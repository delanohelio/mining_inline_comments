{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MDIzODA5", "number": 162, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzowNjowN1rOENWUjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTozNDoxOFrOEPUDcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDMyNjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzowNjowN1rOGv-4XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTo0MjozMFrOGyR5yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NjQ5Mw==", "bodyText": "remove \"the Index\" and just leave \"the IndexShard\"?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r452966493", "createdAt": "2020-07-10T17:06:07Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.codec.KNNCodecUtil;\n+import com.amazon.opendistroforelasticsearch.knn.index.v1736.KNNIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SegmentInfo;\n+import org.apache.lucene.index.SegmentReader;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardPath;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * KNNIndexShard wraps IndexShard and adds methods to perform k-NN related operations against the shard\n+ */\n+public class KNNIndexShard {\n+    private IndexShard indexShard;\n+    private KNNIndexCache knnIndexCache;\n+\n+    private static Logger logger = LogManager.getLogger(KNNIndexShard.class);\n+\n+    /**\n+     * Constructor to generate KNNIndexShard. We do not perform validation that the Index the IndexShard is from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM3NTMwNw==", "bodyText": "I think I wiil change to \"We do not perform validation that the index the shard is from\"", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455375307", "createdAt": "2020-07-15T21:42:30Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.codec.KNNCodecUtil;\n+import com.amazon.opendistroforelasticsearch.knn.index.v1736.KNNIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SegmentInfo;\n+import org.apache.lucene.index.SegmentReader;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardPath;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * KNNIndexShard wraps IndexShard and adds methods to perform k-NN related operations against the shard\n+ */\n+public class KNNIndexShard {\n+    private IndexShard indexShard;\n+    private KNNIndexCache knnIndexCache;\n+\n+    private static Logger logger = LogManager.getLogger(KNNIndexShard.class);\n+\n+    /**\n+     * Constructor to generate KNNIndexShard. We do not perform validation that the Index the IndexShard is from", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NjQ5Mw=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDMzOTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzoxMDoyNFrOGv_ARw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODozNzoxMlrOGy3nqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2ODUxOQ==", "bodyText": "What if resolve(fileName) returns null?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r452968519", "createdAt": "2020-07-10T17:10:24Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.codec.KNNCodecUtil;\n+import com.amazon.opendistroforelasticsearch.knn.index.v1736.KNNIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SegmentInfo;\n+import org.apache.lucene.index.SegmentReader;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardPath;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * KNNIndexShard wraps IndexShard and adds methods to perform k-NN related operations against the shard\n+ */\n+public class KNNIndexShard {\n+    private IndexShard indexShard;\n+    private KNNIndexCache knnIndexCache;\n+\n+    private static Logger logger = LogManager.getLogger(KNNIndexShard.class);\n+\n+    /**\n+     * Constructor to generate KNNIndexShard. We do not perform validation that the Index the IndexShard is from\n+     * is in fact a k-NN Index (index.knn = true). This may make sense to add later, but for now the operations for\n+     * KNNIndexShards that are not from a k-NN index should be no-ops.\n+     *\n+     * @param indexShard IndexShard to be wrapped.\n+     */\n+    public KNNIndexShard(IndexShard indexShard) {\n+        this.indexShard = indexShard;\n+        this.knnIndexCache = KNNIndexCache.getInstance();\n+    }\n+\n+    /**\n+     * Return the underlying IndexShard\n+     *\n+     * @return IndexShard\n+     */\n+    public IndexShard getIndexShard() {\n+        return indexShard;\n+    }\n+\n+    /**\n+     * Return the name of the shards index\n+     *\n+     * @return Name of shard's index\n+     */\n+    public String getIndexName() {\n+        return indexShard.shardId().getIndexName();\n+    }\n+\n+    /**\n+     * Load all of the HNSW graphs for this shard into the cache. Note that getIndices is called to prevent loading\n+     * in duplicates.\n+     *\n+     * @return a List of KNNIndex's from this shard that are in the cache after this operation.\n+     * @throws IOException Thrown when getting the HNSW Paths to be loaded in\n+     */\n+    public List<KNNIndex> warmup() throws IOException {\n+        logger.info(\"[KNN] Warming up index: \" + getIndexName());\n+        Engine.Searcher searcher = indexShard.acquireSearcher(\"knn-warmup\");\n+        List<KNNIndex> indices;\n+        try {\n+            indices = knnIndexCache.getIndices(getHNSWPaths(searcher.getIndexReader()), getIndexName());\n+            searcher.close();\n+        } catch (IOException ex) {\n+            searcher.close();\n+            throw ex;\n+        }\n+        return indices;\n+    }\n+\n+    /**\n+     * For the given shard, get all of its HNSW paths\n+     *\n+     * @param indexReader IndexReader to read the file paths for the shard\n+     * @return List of HNSW Paths\n+     * @throws IOException Thrown when the SegmentReader is attempting to read the segments files\n+     */\n+    public List<String> getHNSWPaths(IndexReader indexReader) throws IOException {\n+        List<String> hnswFiles = new ArrayList<>();\n+        for (LeafReaderContext leafReaderContext : indexReader.leaves()) {\n+            SegmentReader reader = (SegmentReader) FilterLeafReader.unwrap(leafReaderContext.reader());\n+            hnswFiles.addAll(reader.getSegmentInfo().files().stream()\n+                    .filter(fileName -> fileName.endsWith(getHNSWFileExtension(reader.getSegmentInfo().info)))\n+                    .map(fileName -> shardPath().resolveIndex().resolve(fileName).toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM4MDc4Mg==", "bodyText": "resolve(fileName) should not return null because we get the fileNames from the indexReader. However, I can add a test case to confirm the behavior.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455380782", "createdAt": "2020-07-15T21:48:20Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.codec.KNNCodecUtil;\n+import com.amazon.opendistroforelasticsearch.knn.index.v1736.KNNIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SegmentInfo;\n+import org.apache.lucene.index.SegmentReader;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardPath;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * KNNIndexShard wraps IndexShard and adds methods to perform k-NN related operations against the shard\n+ */\n+public class KNNIndexShard {\n+    private IndexShard indexShard;\n+    private KNNIndexCache knnIndexCache;\n+\n+    private static Logger logger = LogManager.getLogger(KNNIndexShard.class);\n+\n+    /**\n+     * Constructor to generate KNNIndexShard. We do not perform validation that the Index the IndexShard is from\n+     * is in fact a k-NN Index (index.knn = true). This may make sense to add later, but for now the operations for\n+     * KNNIndexShards that are not from a k-NN index should be no-ops.\n+     *\n+     * @param indexShard IndexShard to be wrapped.\n+     */\n+    public KNNIndexShard(IndexShard indexShard) {\n+        this.indexShard = indexShard;\n+        this.knnIndexCache = KNNIndexCache.getInstance();\n+    }\n+\n+    /**\n+     * Return the underlying IndexShard\n+     *\n+     * @return IndexShard\n+     */\n+    public IndexShard getIndexShard() {\n+        return indexShard;\n+    }\n+\n+    /**\n+     * Return the name of the shards index\n+     *\n+     * @return Name of shard's index\n+     */\n+    public String getIndexName() {\n+        return indexShard.shardId().getIndexName();\n+    }\n+\n+    /**\n+     * Load all of the HNSW graphs for this shard into the cache. Note that getIndices is called to prevent loading\n+     * in duplicates.\n+     *\n+     * @return a List of KNNIndex's from this shard that are in the cache after this operation.\n+     * @throws IOException Thrown when getting the HNSW Paths to be loaded in\n+     */\n+    public List<KNNIndex> warmup() throws IOException {\n+        logger.info(\"[KNN] Warming up index: \" + getIndexName());\n+        Engine.Searcher searcher = indexShard.acquireSearcher(\"knn-warmup\");\n+        List<KNNIndex> indices;\n+        try {\n+            indices = knnIndexCache.getIndices(getHNSWPaths(searcher.getIndexReader()), getIndexName());\n+            searcher.close();\n+        } catch (IOException ex) {\n+            searcher.close();\n+            throw ex;\n+        }\n+        return indices;\n+    }\n+\n+    /**\n+     * For the given shard, get all of its HNSW paths\n+     *\n+     * @param indexReader IndexReader to read the file paths for the shard\n+     * @return List of HNSW Paths\n+     * @throws IOException Thrown when the SegmentReader is attempting to read the segments files\n+     */\n+    public List<String> getHNSWPaths(IndexReader indexReader) throws IOException {\n+        List<String> hnswFiles = new ArrayList<>();\n+        for (LeafReaderContext leafReaderContext : indexReader.leaves()) {\n+            SegmentReader reader = (SegmentReader) FilterLeafReader.unwrap(leafReaderContext.reader());\n+            hnswFiles.addAll(reader.getSegmentInfo().files().stream()\n+                    .filter(fileName -> fileName.endsWith(getHNSWFileExtension(reader.getSegmentInfo().info)))\n+                    .map(fileName -> shardPath().resolveIndex().resolve(fileName).toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2ODUxOQ=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNDIzOA==", "bodyText": "Actually, fileName has the @NotNull annotation. So it cannot be null.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455414238", "createdAt": "2020-07-15T23:04:40Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.codec.KNNCodecUtil;\n+import com.amazon.opendistroforelasticsearch.knn.index.v1736.KNNIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SegmentInfo;\n+import org.apache.lucene.index.SegmentReader;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardPath;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * KNNIndexShard wraps IndexShard and adds methods to perform k-NN related operations against the shard\n+ */\n+public class KNNIndexShard {\n+    private IndexShard indexShard;\n+    private KNNIndexCache knnIndexCache;\n+\n+    private static Logger logger = LogManager.getLogger(KNNIndexShard.class);\n+\n+    /**\n+     * Constructor to generate KNNIndexShard. We do not perform validation that the Index the IndexShard is from\n+     * is in fact a k-NN Index (index.knn = true). This may make sense to add later, but for now the operations for\n+     * KNNIndexShards that are not from a k-NN index should be no-ops.\n+     *\n+     * @param indexShard IndexShard to be wrapped.\n+     */\n+    public KNNIndexShard(IndexShard indexShard) {\n+        this.indexShard = indexShard;\n+        this.knnIndexCache = KNNIndexCache.getInstance();\n+    }\n+\n+    /**\n+     * Return the underlying IndexShard\n+     *\n+     * @return IndexShard\n+     */\n+    public IndexShard getIndexShard() {\n+        return indexShard;\n+    }\n+\n+    /**\n+     * Return the name of the shards index\n+     *\n+     * @return Name of shard's index\n+     */\n+    public String getIndexName() {\n+        return indexShard.shardId().getIndexName();\n+    }\n+\n+    /**\n+     * Load all of the HNSW graphs for this shard into the cache. Note that getIndices is called to prevent loading\n+     * in duplicates.\n+     *\n+     * @return a List of KNNIndex's from this shard that are in the cache after this operation.\n+     * @throws IOException Thrown when getting the HNSW Paths to be loaded in\n+     */\n+    public List<KNNIndex> warmup() throws IOException {\n+        logger.info(\"[KNN] Warming up index: \" + getIndexName());\n+        Engine.Searcher searcher = indexShard.acquireSearcher(\"knn-warmup\");\n+        List<KNNIndex> indices;\n+        try {\n+            indices = knnIndexCache.getIndices(getHNSWPaths(searcher.getIndexReader()), getIndexName());\n+            searcher.close();\n+        } catch (IOException ex) {\n+            searcher.close();\n+            throw ex;\n+        }\n+        return indices;\n+    }\n+\n+    /**\n+     * For the given shard, get all of its HNSW paths\n+     *\n+     * @param indexReader IndexReader to read the file paths for the shard\n+     * @return List of HNSW Paths\n+     * @throws IOException Thrown when the SegmentReader is attempting to read the segments files\n+     */\n+    public List<String> getHNSWPaths(IndexReader indexReader) throws IOException {\n+        List<String> hnswFiles = new ArrayList<>();\n+        for (LeafReaderContext leafReaderContext : indexReader.leaves()) {\n+            SegmentReader reader = (SegmentReader) FilterLeafReader.unwrap(leafReaderContext.reader());\n+            hnswFiles.addAll(reader.getSegmentInfo().files().stream()\n+                    .filter(fileName -> fileName.endsWith(getHNSWFileExtension(reader.getSegmentInfo().info)))\n+                    .map(fileName -> shardPath().resolveIndex().resolve(fileName).toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2ODUxOQ=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0NTkyMg==", "bodyText": "Could you point me where annotation is?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455945922", "createdAt": "2020-07-16T17:17:45Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.codec.KNNCodecUtil;\n+import com.amazon.opendistroforelasticsearch.knn.index.v1736.KNNIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SegmentInfo;\n+import org.apache.lucene.index.SegmentReader;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardPath;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * KNNIndexShard wraps IndexShard and adds methods to perform k-NN related operations against the shard\n+ */\n+public class KNNIndexShard {\n+    private IndexShard indexShard;\n+    private KNNIndexCache knnIndexCache;\n+\n+    private static Logger logger = LogManager.getLogger(KNNIndexShard.class);\n+\n+    /**\n+     * Constructor to generate KNNIndexShard. We do not perform validation that the Index the IndexShard is from\n+     * is in fact a k-NN Index (index.knn = true). This may make sense to add later, but for now the operations for\n+     * KNNIndexShards that are not from a k-NN index should be no-ops.\n+     *\n+     * @param indexShard IndexShard to be wrapped.\n+     */\n+    public KNNIndexShard(IndexShard indexShard) {\n+        this.indexShard = indexShard;\n+        this.knnIndexCache = KNNIndexCache.getInstance();\n+    }\n+\n+    /**\n+     * Return the underlying IndexShard\n+     *\n+     * @return IndexShard\n+     */\n+    public IndexShard getIndexShard() {\n+        return indexShard;\n+    }\n+\n+    /**\n+     * Return the name of the shards index\n+     *\n+     * @return Name of shard's index\n+     */\n+    public String getIndexName() {\n+        return indexShard.shardId().getIndexName();\n+    }\n+\n+    /**\n+     * Load all of the HNSW graphs for this shard into the cache. Note that getIndices is called to prevent loading\n+     * in duplicates.\n+     *\n+     * @return a List of KNNIndex's from this shard that are in the cache after this operation.\n+     * @throws IOException Thrown when getting the HNSW Paths to be loaded in\n+     */\n+    public List<KNNIndex> warmup() throws IOException {\n+        logger.info(\"[KNN] Warming up index: \" + getIndexName());\n+        Engine.Searcher searcher = indexShard.acquireSearcher(\"knn-warmup\");\n+        List<KNNIndex> indices;\n+        try {\n+            indices = knnIndexCache.getIndices(getHNSWPaths(searcher.getIndexReader()), getIndexName());\n+            searcher.close();\n+        } catch (IOException ex) {\n+            searcher.close();\n+            throw ex;\n+        }\n+        return indices;\n+    }\n+\n+    /**\n+     * For the given shard, get all of its HNSW paths\n+     *\n+     * @param indexReader IndexReader to read the file paths for the shard\n+     * @return List of HNSW Paths\n+     * @throws IOException Thrown when the SegmentReader is attempting to read the segments files\n+     */\n+    public List<String> getHNSWPaths(IndexReader indexReader) throws IOException {\n+        List<String> hnswFiles = new ArrayList<>();\n+        for (LeafReaderContext leafReaderContext : indexReader.leaves()) {\n+            SegmentReader reader = (SegmentReader) FilterLeafReader.unwrap(leafReaderContext.reader());\n+            hnswFiles.addAll(reader.getSegmentInfo().files().stream()\n+                    .filter(fileName -> fileName.endsWith(getHNSWFileExtension(reader.getSegmentInfo().info)))\n+                    .map(fileName -> shardPath().resolveIndex().resolve(fileName).toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2ODUxOQ=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MTk0OA==", "bodyText": "I see it in the source code in intellij. I think Intellij may have added the annotation.\n\nI am not sure what this implies. Do you know what this does @kaituo ?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455971948", "createdAt": "2020-07-16T18:01:07Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.codec.KNNCodecUtil;\n+import com.amazon.opendistroforelasticsearch.knn.index.v1736.KNNIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SegmentInfo;\n+import org.apache.lucene.index.SegmentReader;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardPath;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * KNNIndexShard wraps IndexShard and adds methods to perform k-NN related operations against the shard\n+ */\n+public class KNNIndexShard {\n+    private IndexShard indexShard;\n+    private KNNIndexCache knnIndexCache;\n+\n+    private static Logger logger = LogManager.getLogger(KNNIndexShard.class);\n+\n+    /**\n+     * Constructor to generate KNNIndexShard. We do not perform validation that the Index the IndexShard is from\n+     * is in fact a k-NN Index (index.knn = true). This may make sense to add later, but for now the operations for\n+     * KNNIndexShards that are not from a k-NN index should be no-ops.\n+     *\n+     * @param indexShard IndexShard to be wrapped.\n+     */\n+    public KNNIndexShard(IndexShard indexShard) {\n+        this.indexShard = indexShard;\n+        this.knnIndexCache = KNNIndexCache.getInstance();\n+    }\n+\n+    /**\n+     * Return the underlying IndexShard\n+     *\n+     * @return IndexShard\n+     */\n+    public IndexShard getIndexShard() {\n+        return indexShard;\n+    }\n+\n+    /**\n+     * Return the name of the shards index\n+     *\n+     * @return Name of shard's index\n+     */\n+    public String getIndexName() {\n+        return indexShard.shardId().getIndexName();\n+    }\n+\n+    /**\n+     * Load all of the HNSW graphs for this shard into the cache. Note that getIndices is called to prevent loading\n+     * in duplicates.\n+     *\n+     * @return a List of KNNIndex's from this shard that are in the cache after this operation.\n+     * @throws IOException Thrown when getting the HNSW Paths to be loaded in\n+     */\n+    public List<KNNIndex> warmup() throws IOException {\n+        logger.info(\"[KNN] Warming up index: \" + getIndexName());\n+        Engine.Searcher searcher = indexShard.acquireSearcher(\"knn-warmup\");\n+        List<KNNIndex> indices;\n+        try {\n+            indices = knnIndexCache.getIndices(getHNSWPaths(searcher.getIndexReader()), getIndexName());\n+            searcher.close();\n+        } catch (IOException ex) {\n+            searcher.close();\n+            throw ex;\n+        }\n+        return indices;\n+    }\n+\n+    /**\n+     * For the given shard, get all of its HNSW paths\n+     *\n+     * @param indexReader IndexReader to read the file paths for the shard\n+     * @return List of HNSW Paths\n+     * @throws IOException Thrown when the SegmentReader is attempting to read the segments files\n+     */\n+    public List<String> getHNSWPaths(IndexReader indexReader) throws IOException {\n+        List<String> hnswFiles = new ArrayList<>();\n+        for (LeafReaderContext leafReaderContext : indexReader.leaves()) {\n+            SegmentReader reader = (SegmentReader) FilterLeafReader.unwrap(leafReaderContext.reader());\n+            hnswFiles.addAll(reader.getSegmentInfo().files().stream()\n+                    .filter(fileName -> fileName.endsWith(getHNSWFileExtension(reader.getSegmentInfo().info)))\n+                    .map(fileName -> shardPath().resolveIndex().resolve(fileName).toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2ODUxOQ=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5MzI1Nw==", "bodyText": "maybe https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html#notnull", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455993257", "createdAt": "2020-07-16T18:37:12Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.codec.KNNCodecUtil;\n+import com.amazon.opendistroforelasticsearch.knn.index.v1736.KNNIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SegmentInfo;\n+import org.apache.lucene.index.SegmentReader;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardPath;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * KNNIndexShard wraps IndexShard and adds methods to perform k-NN related operations against the shard\n+ */\n+public class KNNIndexShard {\n+    private IndexShard indexShard;\n+    private KNNIndexCache knnIndexCache;\n+\n+    private static Logger logger = LogManager.getLogger(KNNIndexShard.class);\n+\n+    /**\n+     * Constructor to generate KNNIndexShard. We do not perform validation that the Index the IndexShard is from\n+     * is in fact a k-NN Index (index.knn = true). This may make sense to add later, but for now the operations for\n+     * KNNIndexShards that are not from a k-NN index should be no-ops.\n+     *\n+     * @param indexShard IndexShard to be wrapped.\n+     */\n+    public KNNIndexShard(IndexShard indexShard) {\n+        this.indexShard = indexShard;\n+        this.knnIndexCache = KNNIndexCache.getInstance();\n+    }\n+\n+    /**\n+     * Return the underlying IndexShard\n+     *\n+     * @return IndexShard\n+     */\n+    public IndexShard getIndexShard() {\n+        return indexShard;\n+    }\n+\n+    /**\n+     * Return the name of the shards index\n+     *\n+     * @return Name of shard's index\n+     */\n+    public String getIndexName() {\n+        return indexShard.shardId().getIndexName();\n+    }\n+\n+    /**\n+     * Load all of the HNSW graphs for this shard into the cache. Note that getIndices is called to prevent loading\n+     * in duplicates.\n+     *\n+     * @return a List of KNNIndex's from this shard that are in the cache after this operation.\n+     * @throws IOException Thrown when getting the HNSW Paths to be loaded in\n+     */\n+    public List<KNNIndex> warmup() throws IOException {\n+        logger.info(\"[KNN] Warming up index: \" + getIndexName());\n+        Engine.Searcher searcher = indexShard.acquireSearcher(\"knn-warmup\");\n+        List<KNNIndex> indices;\n+        try {\n+            indices = knnIndexCache.getIndices(getHNSWPaths(searcher.getIndexReader()), getIndexName());\n+            searcher.close();\n+        } catch (IOException ex) {\n+            searcher.close();\n+            throw ex;\n+        }\n+        return indices;\n+    }\n+\n+    /**\n+     * For the given shard, get all of its HNSW paths\n+     *\n+     * @param indexReader IndexReader to read the file paths for the shard\n+     * @return List of HNSW Paths\n+     * @throws IOException Thrown when the SegmentReader is attempting to read the segments files\n+     */\n+    public List<String> getHNSWPaths(IndexReader indexReader) throws IOException {\n+        List<String> hnswFiles = new ArrayList<>();\n+        for (LeafReaderContext leafReaderContext : indexReader.leaves()) {\n+            SegmentReader reader = (SegmentReader) FilterLeafReader.unwrap(leafReaderContext.reader());\n+            hnswFiles.addAll(reader.getSegmentInfo().files().stream()\n+                    .filter(fileName -> fileName.endsWith(getHNSWFileExtension(reader.getSegmentInfo().info)))\n+                    .map(fileName -> shardPath().resolveIndex().resolve(fileName).toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2ODUxOQ=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM0NjUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/transport/KNNWarmupResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNTo1NjoxM1rOGxFPKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjowMjoyOVrOGyS2-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExOTIxMA==", "bodyText": "class doc missing", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r454119210", "createdAt": "2020-07-14T05:56:13Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/transport/KNNWarmupResponse.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.transport;\n+\n+import org.elasticsearch.action.support.DefaultShardOperationFailedException;\n+import org.elasticsearch.action.support.broadcast.BroadcastResponse;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class KNNWarmupResponse extends BroadcastResponse implements ToXContentObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM5MDk2OA==", "bodyText": "Will take care.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455390968", "createdAt": "2020-07-15T22:02:29Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/transport/KNNWarmupResponse.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.transport;\n+\n+import org.elasticsearch.action.support.DefaultShardOperationFailedException;\n+import org.elasticsearch.action.support.broadcast.BroadcastResponse;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class KNNWarmupResponse extends BroadcastResponse implements ToXContentObject {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExOTIxMA=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM0Njk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/transport/KNNWarmupRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNTo1NjoyNlrOGxFPbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjowMjoyMVrOGyS2rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExOTI3OA==", "bodyText": "class doc missing. You might want to take care in other places as wel", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r454119278", "createdAt": "2020-07-14T05:56:26Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/transport/KNNWarmupRequest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.transport;\n+\n+import org.elasticsearch.action.support.broadcast.BroadcastRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+\n+public class KNNWarmupRequest extends BroadcastRequest<KNNWarmupRequest> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM5MDg5Mw==", "bodyText": "Will take care of it thanks.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455390893", "createdAt": "2020-07-15T22:02:21Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/transport/KNNWarmupRequest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.transport;\n+\n+import org.elasticsearch.action.support.broadcast.BroadcastRequest;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+\n+public class KNNWarmupRequest extends BroadcastRequest<KNNWarmupRequest> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExOTI3OA=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM1MjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNTo1OTowMlrOGxFSuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo0OTowMVrOGyT8fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMDEyMQ==", "bodyText": "+1 for making it async.\nwe could log here saying that warm up initiated. Should we capture the number of warmup requests in the knn stats?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r454120121", "createdAt": "2020-07-14T05:59:02Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.rest;\n+\n+import com.amazon.opendistroforelasticsearch.knn.common.exception.KNNInvalidIndexException;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.KNNPlugin;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupAction;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupRequest;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNSettings.KNN_INDEX;\n+import static org.elasticsearch.action.support.IndicesOptions.strictExpandOpen;\n+\n+/**\n+ * RestHandler for k-NN index warmup API. API provides the ability for a user to load specific indices' k-NN graphs\n+ * into memory.\n+ */\n+public class RestKNNWarmupHandler extends BaseRestHandler {\n+    public static String NAME = \"knn_warmup_action\";\n+\n+    private IndexNameExpressionResolver indexNameExpressionResolver;\n+    private ClusterService clusterService;\n+\n+    public RestKNNWarmupHandler(Settings settings, RestController controller, ClusterService clusterService,\n+                                IndexNameExpressionResolver indexNameExpressionResolver) {\n+        this.clusterService = clusterService;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return ImmutableList.of(\n+                new Route(RestRequest.Method.GET, KNNPlugin.KNN_BASE_URI + \"/warmup/{index}\")\n+        );\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) {\n+        KNNWarmupRequest knnWarmupRequest = createKNNWarmupRequest(request);\n+        return channel -> client.execute(KNNWarmupAction.INSTANCE, knnWarmupRequest, new RestToXContentListener<>(channel));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwODc2NQ==", "bodyText": "I can add the log statement. I am not sure if it is useful to know how many warmup requests there have been.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455408765", "createdAt": "2020-07-15T22:49:01Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.rest;\n+\n+import com.amazon.opendistroforelasticsearch.knn.common.exception.KNNInvalidIndexException;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.KNNPlugin;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupAction;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupRequest;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNSettings.KNN_INDEX;\n+import static org.elasticsearch.action.support.IndicesOptions.strictExpandOpen;\n+\n+/**\n+ * RestHandler for k-NN index warmup API. API provides the ability for a user to load specific indices' k-NN graphs\n+ * into memory.\n+ */\n+public class RestKNNWarmupHandler extends BaseRestHandler {\n+    public static String NAME = \"knn_warmup_action\";\n+\n+    private IndexNameExpressionResolver indexNameExpressionResolver;\n+    private ClusterService clusterService;\n+\n+    public RestKNNWarmupHandler(Settings settings, RestController controller, ClusterService clusterService,\n+                                IndexNameExpressionResolver indexNameExpressionResolver) {\n+        this.clusterService = clusterService;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return ImmutableList.of(\n+                new Route(RestRequest.Method.GET, KNNPlugin.KNN_BASE_URI + \"/warmup/{index}\")\n+        );\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) {\n+        KNNWarmupRequest knnWarmupRequest = createKNNWarmupRequest(request);\n+        return channel -> client.execute(KNNWarmupAction.INSTANCE, knnWarmupRequest, new RestToXContentListener<>(channel));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMDEyMQ=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM1OTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjowMjoxNlrOGxFXMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToxMDowOVrOGy4uvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMTI2Ng==", "bodyText": "We could update log to tell the exact setting name. How about below message\n\nthrow new KNNInvalidIndexException(index.getName(),\n\"Warmup request rejected as one of the index has 'index.knn' setting set to false\");\n\n\nShould we loop through the indices and mention full list of indices that are invalid instead of exiting on the first error?\n\n\nHow about making indexNames from String array to set and pass this as a ImmutableSet to KNNWarmupRequest. This was we could avoid duplicates.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r454121266", "createdAt": "2020-07-14T06:02:16Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.rest;\n+\n+import com.amazon.opendistroforelasticsearch.knn.common.exception.KNNInvalidIndexException;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.KNNPlugin;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupAction;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupRequest;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNSettings.KNN_INDEX;\n+import static org.elasticsearch.action.support.IndicesOptions.strictExpandOpen;\n+\n+/**\n+ * RestHandler for k-NN index warmup API. API provides the ability for a user to load specific indices' k-NN graphs\n+ * into memory.\n+ */\n+public class RestKNNWarmupHandler extends BaseRestHandler {\n+    public static String NAME = \"knn_warmup_action\";\n+\n+    private IndexNameExpressionResolver indexNameExpressionResolver;\n+    private ClusterService clusterService;\n+\n+    public RestKNNWarmupHandler(Settings settings, RestController controller, ClusterService clusterService,\n+                                IndexNameExpressionResolver indexNameExpressionResolver) {\n+        this.clusterService = clusterService;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return ImmutableList.of(\n+                new Route(RestRequest.Method.GET, KNNPlugin.KNN_BASE_URI + \"/warmup/{index}\")\n+        );\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) {\n+        KNNWarmupRequest knnWarmupRequest = createKNNWarmupRequest(request);\n+        return channel -> client.execute(KNNWarmupAction.INSTANCE, knnWarmupRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    private KNNWarmupRequest createKNNWarmupRequest(RestRequest request) {\n+        String[] indexNames = Strings.splitStringByCommaToArray(request.param(\"index\"));\n+        Index[] indices =  indexNameExpressionResolver.concreteIndices(clusterService.state(), strictExpandOpen(),\n+                indexNames);\n+\n+        Arrays.stream(indices).forEach(index -> {\n+            if (!\"true\".equals(clusterService.state().metadata().getIndexSafe(index).getSettings().get(KNN_INDEX))) {\n+                throw new KNNInvalidIndexException(index.getName(),\n+                        \"Unable to create warmup index that has 'knn' setting set to false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM5MDgyMg==", "bodyText": "Makes sense\nYes, I think that would be better design.\nYes that makes sense. Will change that.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455390822", "createdAt": "2020-07-15T22:02:08Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.rest;\n+\n+import com.amazon.opendistroforelasticsearch.knn.common.exception.KNNInvalidIndexException;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.KNNPlugin;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupAction;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupRequest;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNSettings.KNN_INDEX;\n+import static org.elasticsearch.action.support.IndicesOptions.strictExpandOpen;\n+\n+/**\n+ * RestHandler for k-NN index warmup API. API provides the ability for a user to load specific indices' k-NN graphs\n+ * into memory.\n+ */\n+public class RestKNNWarmupHandler extends BaseRestHandler {\n+    public static String NAME = \"knn_warmup_action\";\n+\n+    private IndexNameExpressionResolver indexNameExpressionResolver;\n+    private ClusterService clusterService;\n+\n+    public RestKNNWarmupHandler(Settings settings, RestController controller, ClusterService clusterService,\n+                                IndexNameExpressionResolver indexNameExpressionResolver) {\n+        this.clusterService = clusterService;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return ImmutableList.of(\n+                new Route(RestRequest.Method.GET, KNNPlugin.KNN_BASE_URI + \"/warmup/{index}\")\n+        );\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) {\n+        KNNWarmupRequest knnWarmupRequest = createKNNWarmupRequest(request);\n+        return channel -> client.execute(KNNWarmupAction.INSTANCE, knnWarmupRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    private KNNWarmupRequest createKNNWarmupRequest(RestRequest request) {\n+        String[] indexNames = Strings.splitStringByCommaToArray(request.param(\"index\"));\n+        Index[] indices =  indexNameExpressionResolver.concreteIndices(clusterService.state(), strictExpandOpen(),\n+                indexNames);\n+\n+        Arrays.stream(indices).forEach(index -> {\n+            if (!\"true\".equals(clusterService.state().metadata().getIndexSafe(index).getSettings().get(KNN_INDEX))) {\n+                throw new KNNInvalidIndexException(index.getName(),\n+                        \"Unable to create warmup index that has 'knn' setting set to false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMTI2Ng=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwODgzMw==", "bodyText": "For Point 3, KNNWarmupRequest extends BroadcastRequest which takes an array of indices. So, I do not think I should modify that. Additionally, KNNWarmupTransportAction extends TransportBroadcastByNodeAction, which deduplicates the indices here, so I am not sure change 3 is necessary.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455908833", "createdAt": "2020-07-16T16:17:22Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.rest;\n+\n+import com.amazon.opendistroforelasticsearch.knn.common.exception.KNNInvalidIndexException;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.KNNPlugin;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupAction;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupRequest;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNSettings.KNN_INDEX;\n+import static org.elasticsearch.action.support.IndicesOptions.strictExpandOpen;\n+\n+/**\n+ * RestHandler for k-NN index warmup API. API provides the ability for a user to load specific indices' k-NN graphs\n+ * into memory.\n+ */\n+public class RestKNNWarmupHandler extends BaseRestHandler {\n+    public static String NAME = \"knn_warmup_action\";\n+\n+    private IndexNameExpressionResolver indexNameExpressionResolver;\n+    private ClusterService clusterService;\n+\n+    public RestKNNWarmupHandler(Settings settings, RestController controller, ClusterService clusterService,\n+                                IndexNameExpressionResolver indexNameExpressionResolver) {\n+        this.clusterService = clusterService;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return ImmutableList.of(\n+                new Route(RestRequest.Method.GET, KNNPlugin.KNN_BASE_URI + \"/warmup/{index}\")\n+        );\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) {\n+        KNNWarmupRequest knnWarmupRequest = createKNNWarmupRequest(request);\n+        return channel -> client.execute(KNNWarmupAction.INSTANCE, knnWarmupRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    private KNNWarmupRequest createKNNWarmupRequest(RestRequest request) {\n+        String[] indexNames = Strings.splitStringByCommaToArray(request.param(\"index\"));\n+        Index[] indices =  indexNameExpressionResolver.concreteIndices(clusterService.state(), strictExpandOpen(),\n+                indexNames);\n+\n+        Arrays.stream(indices).forEach(index -> {\n+            if (!\"true\".equals(clusterService.state().metadata().getIndexSafe(index).getSettings().get(KNN_INDEX))) {\n+                throw new KNNInvalidIndexException(index.getName(),\n+                        \"Unable to create warmup index that has 'knn' setting set to false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMTI2Ng=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0Nzk2NA==", "bodyText": "For 1, do we want to return the index name that has 'index.knn' setting to be false?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455947964", "createdAt": "2020-07-16T17:21:12Z", "author": {"login": "kaituo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.rest;\n+\n+import com.amazon.opendistroforelasticsearch.knn.common.exception.KNNInvalidIndexException;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.KNNPlugin;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupAction;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupRequest;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNSettings.KNN_INDEX;\n+import static org.elasticsearch.action.support.IndicesOptions.strictExpandOpen;\n+\n+/**\n+ * RestHandler for k-NN index warmup API. API provides the ability for a user to load specific indices' k-NN graphs\n+ * into memory.\n+ */\n+public class RestKNNWarmupHandler extends BaseRestHandler {\n+    public static String NAME = \"knn_warmup_action\";\n+\n+    private IndexNameExpressionResolver indexNameExpressionResolver;\n+    private ClusterService clusterService;\n+\n+    public RestKNNWarmupHandler(Settings settings, RestController controller, ClusterService clusterService,\n+                                IndexNameExpressionResolver indexNameExpressionResolver) {\n+        this.clusterService = clusterService;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return ImmutableList.of(\n+                new Route(RestRequest.Method.GET, KNNPlugin.KNN_BASE_URI + \"/warmup/{index}\")\n+        );\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) {\n+        KNNWarmupRequest knnWarmupRequest = createKNNWarmupRequest(request);\n+        return channel -> client.execute(KNNWarmupAction.INSTANCE, knnWarmupRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    private KNNWarmupRequest createKNNWarmupRequest(RestRequest request) {\n+        String[] indexNames = Strings.splitStringByCommaToArray(request.param(\"index\"));\n+        Index[] indices =  indexNameExpressionResolver.concreteIndices(clusterService.state(), strictExpandOpen(),\n+                indexNames);\n+\n+        Arrays.stream(indices).forEach(index -> {\n+            if (!\"true\".equals(clusterService.state().metadata().getIndexSafe(index).getSettings().get(KNN_INDEX))) {\n+                throw new KNNInvalidIndexException(index.getName(),\n+                        \"Unable to create warmup index that has 'knn' setting set to false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMTI2Ng=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMTQ1NQ==", "bodyText": "Correct. Actually list of index names that have index.knn setting to false.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r456011455", "createdAt": "2020-07-16T19:10:09Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.rest;\n+\n+import com.amazon.opendistroforelasticsearch.knn.common.exception.KNNInvalidIndexException;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.KNNPlugin;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupAction;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupRequest;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNSettings.KNN_INDEX;\n+import static org.elasticsearch.action.support.IndicesOptions.strictExpandOpen;\n+\n+/**\n+ * RestHandler for k-NN index warmup API. API provides the ability for a user to load specific indices' k-NN graphs\n+ * into memory.\n+ */\n+public class RestKNNWarmupHandler extends BaseRestHandler {\n+    public static String NAME = \"knn_warmup_action\";\n+\n+    private IndexNameExpressionResolver indexNameExpressionResolver;\n+    private ClusterService clusterService;\n+\n+    public RestKNNWarmupHandler(Settings settings, RestController controller, ClusterService clusterService,\n+                                IndexNameExpressionResolver indexNameExpressionResolver) {\n+        this.clusterService = clusterService;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return ImmutableList.of(\n+                new Route(RestRequest.Method.GET, KNNPlugin.KNN_BASE_URI + \"/warmup/{index}\")\n+        );\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) {\n+        KNNWarmupRequest knnWarmupRequest = createKNNWarmupRequest(request);\n+        return channel -> client.execute(KNNWarmupAction.INSTANCE, knnWarmupRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    private KNNWarmupRequest createKNNWarmupRequest(RestRequest request) {\n+        String[] indexNames = Strings.splitStringByCommaToArray(request.param(\"index\"));\n+        Index[] indices =  indexNameExpressionResolver.concreteIndices(clusterService.state(), strictExpandOpen(),\n+                indexNames);\n+\n+        Arrays.stream(indices).forEach(index -> {\n+            if (!\"true\".equals(clusterService.state().metadata().getIndexSafe(index).getSettings().get(KNN_INDEX))) {\n+                throw new KNNInvalidIndexException(index.getName(),\n+                        \"Unable to create warmup index that has 'knn' setting set to false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMTI2Ng=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM2OTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjowNjoyMVrOGxFcyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTowMjoyNVrOGy4ebg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMjY5OQ==", "bodyText": "if indexNames empty, return from here with proper log message?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r454122699", "createdAt": "2020-07-14T06:06:21Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.rest;\n+\n+import com.amazon.opendistroforelasticsearch.knn.common.exception.KNNInvalidIndexException;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.KNNPlugin;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupAction;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupRequest;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNSettings.KNN_INDEX;\n+import static org.elasticsearch.action.support.IndicesOptions.strictExpandOpen;\n+\n+/**\n+ * RestHandler for k-NN index warmup API. API provides the ability for a user to load specific indices' k-NN graphs\n+ * into memory.\n+ */\n+public class RestKNNWarmupHandler extends BaseRestHandler {\n+    public static String NAME = \"knn_warmup_action\";\n+\n+    private IndexNameExpressionResolver indexNameExpressionResolver;\n+    private ClusterService clusterService;\n+\n+    public RestKNNWarmupHandler(Settings settings, RestController controller, ClusterService clusterService,\n+                                IndexNameExpressionResolver indexNameExpressionResolver) {\n+        this.clusterService = clusterService;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return ImmutableList.of(\n+                new Route(RestRequest.Method.GET, KNNPlugin.KNN_BASE_URI + \"/warmup/{index}\")\n+        );\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) {\n+        KNNWarmupRequest knnWarmupRequest = createKNNWarmupRequest(request);\n+        return channel -> client.execute(KNNWarmupAction.INSTANCE, knnWarmupRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    private KNNWarmupRequest createKNNWarmupRequest(RestRequest request) {\n+        String[] indexNames = Strings.splitStringByCommaToArray(request.param(\"index\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM5MDM5Nw==", "bodyText": "Will add this check.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455390397", "createdAt": "2020-07-15T22:01:03Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.rest;\n+\n+import com.amazon.opendistroforelasticsearch.knn.common.exception.KNNInvalidIndexException;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.KNNPlugin;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupAction;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupRequest;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNSettings.KNN_INDEX;\n+import static org.elasticsearch.action.support.IndicesOptions.strictExpandOpen;\n+\n+/**\n+ * RestHandler for k-NN index warmup API. API provides the ability for a user to load specific indices' k-NN graphs\n+ * into memory.\n+ */\n+public class RestKNNWarmupHandler extends BaseRestHandler {\n+    public static String NAME = \"knn_warmup_action\";\n+\n+    private IndexNameExpressionResolver indexNameExpressionResolver;\n+    private ClusterService clusterService;\n+\n+    public RestKNNWarmupHandler(Settings settings, RestController controller, ClusterService clusterService,\n+                                IndexNameExpressionResolver indexNameExpressionResolver) {\n+        this.clusterService = clusterService;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return ImmutableList.of(\n+                new Route(RestRequest.Method.GET, KNNPlugin.KNN_BASE_URI + \"/warmup/{index}\")\n+        );\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) {\n+        KNNWarmupRequest knnWarmupRequest = createKNNWarmupRequest(request);\n+        return channel -> client.execute(KNNWarmupAction.INSTANCE, knnWarmupRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    private KNNWarmupRequest createKNNWarmupRequest(RestRequest request) {\n+        String[] indexNames = Strings.splitStringByCommaToArray(request.param(\"index\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMjY5OQ=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0MDM5OQ==", "bodyText": "Actually, because I only register this route, it is impossible to pass in no indices. Instead, it fails with the following:\ncurl ${HOST_NAME}/_opendistro/_knn/warmup?pretty\n{\n  \"error\" : {\n    \"root_cause\" : [\n      {\n        \"type\" : \"illegal_argument_exception\",\n        \"reason\" : \"request [/_opendistro/_knn/warmup] contains unrecognized parameter: [nodeId]\"\n      }\n    ],\n    \"type\" : \"illegal_argument_exception\",\n    \"reason\" : \"request [/_opendistro/_knn/warmup] contains unrecognized parameter: [nodeId]\"\n  },\n  \"status\" : 400\n}\n\nIt actually does not reach this rest handler. Is this okay?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455940399", "createdAt": "2020-07-16T17:09:11Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.rest;\n+\n+import com.amazon.opendistroforelasticsearch.knn.common.exception.KNNInvalidIndexException;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.KNNPlugin;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupAction;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupRequest;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNSettings.KNN_INDEX;\n+import static org.elasticsearch.action.support.IndicesOptions.strictExpandOpen;\n+\n+/**\n+ * RestHandler for k-NN index warmup API. API provides the ability for a user to load specific indices' k-NN graphs\n+ * into memory.\n+ */\n+public class RestKNNWarmupHandler extends BaseRestHandler {\n+    public static String NAME = \"knn_warmup_action\";\n+\n+    private IndexNameExpressionResolver indexNameExpressionResolver;\n+    private ClusterService clusterService;\n+\n+    public RestKNNWarmupHandler(Settings settings, RestController controller, ClusterService clusterService,\n+                                IndexNameExpressionResolver indexNameExpressionResolver) {\n+        this.clusterService = clusterService;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return ImmutableList.of(\n+                new Route(RestRequest.Method.GET, KNNPlugin.KNN_BASE_URI + \"/warmup/{index}\")\n+        );\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) {\n+        KNNWarmupRequest knnWarmupRequest = createKNNWarmupRequest(request);\n+        return channel -> client.execute(KNNWarmupAction.INSTANCE, knnWarmupRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    private KNNWarmupRequest createKNNWarmupRequest(RestRequest request) {\n+        String[] indexNames = Strings.splitStringByCommaToArray(request.param(\"index\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMjY5OQ=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwNzI3OA==", "bodyText": "makes sense. Thanks", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r456007278", "createdAt": "2020-07-16T19:02:25Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/rest/RestKNNWarmupHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.plugin.rest;\n+\n+import com.amazon.opendistroforelasticsearch.knn.common.exception.KNNInvalidIndexException;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.KNNPlugin;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupAction;\n+import com.amazon.opendistroforelasticsearch.knn.plugin.transport.KNNWarmupRequest;\n+import com.google.common.collect.ImmutableList;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.amazon.opendistroforelasticsearch.knn.index.KNNSettings.KNN_INDEX;\n+import static org.elasticsearch.action.support.IndicesOptions.strictExpandOpen;\n+\n+/**\n+ * RestHandler for k-NN index warmup API. API provides the ability for a user to load specific indices' k-NN graphs\n+ * into memory.\n+ */\n+public class RestKNNWarmupHandler extends BaseRestHandler {\n+    public static String NAME = \"knn_warmup_action\";\n+\n+    private IndexNameExpressionResolver indexNameExpressionResolver;\n+    private ClusterService clusterService;\n+\n+    public RestKNNWarmupHandler(Settings settings, RestController controller, ClusterService clusterService,\n+                                IndexNameExpressionResolver indexNameExpressionResolver) {\n+        this.clusterService = clusterService;\n+        this.indexNameExpressionResolver = indexNameExpressionResolver;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return ImmutableList.of(\n+                new Route(RestRequest.Method.GET, KNNPlugin.KNN_BASE_URI + \"/warmup/{index}\")\n+        );\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) {\n+        KNNWarmupRequest knnWarmupRequest = createKNNWarmupRequest(request);\n+        return channel -> client.execute(KNNWarmupAction.INSTANCE, knnWarmupRequest, new RestToXContentListener<>(channel));\n+    }\n+\n+    private KNNWarmupRequest createKNNWarmupRequest(RestRequest request) {\n+        String[] indexNames = Strings.splitStringByCommaToArray(request.param(\"index\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMjY5OQ=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM4MDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/KNNPlugin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxMDo0OVrOGxFjGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjoxNDowMVrOGyTJZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDMxNQ==", "bodyText": "is getRestHandlers always called after getMappers? Making sure clusterService is not null.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r454124315", "createdAt": "2020-07-14T06:10:49Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/KNNPlugin.java", "diffHunk": "@@ -143,8 +148,10 @@\n                                              Supplier<DiscoveryNodes> nodesInCluster) {\n \n         RestKNNStatsHandler restKNNStatsHandler = new RestKNNStatsHandler(settings, restController, knnStats);\n+        RestKNNWarmupHandler restKNNWarmupHandler = new RestKNNWarmupHandler(settings, restController, clusterService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM4OTEwNg==", "bodyText": "Do you mean createComponents, not getMappers?\nAnd yes\n\ncreateComponents\ngetRestHandlers", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455389106", "createdAt": "2020-07-15T21:58:13Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/KNNPlugin.java", "diffHunk": "@@ -143,8 +148,10 @@\n                                              Supplier<DiscoveryNodes> nodesInCluster) {\n \n         RestKNNStatsHandler restKNNStatsHandler = new RestKNNStatsHandler(settings, restController, knnStats);\n+        RestKNNWarmupHandler restKNNWarmupHandler = new RestKNNWarmupHandler(settings, restController, clusterService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDMxNQ=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM5NTY4Nw==", "bodyText": "Sorry. I meant CreateComponent. Thanks for confirming.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455395687", "createdAt": "2020-07-15T22:14:01Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/plugin/KNNPlugin.java", "diffHunk": "@@ -143,8 +148,10 @@\n                                              Supplier<DiscoveryNodes> nodesInCluster) {\n \n         RestKNNStatsHandler restKNNStatsHandler = new RestKNNStatsHandler(settings, restController, knnStats);\n+        RestKNNWarmupHandler restKNNWarmupHandler = new RestKNNWarmupHandler(settings, restController, clusterService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNDMxNQ=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjM5OTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxODoyOVrOGxFuhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTo0MzoyMFrOGyR80g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNzIzOA==", "bodyText": "move searcher.close() to finally block and you could remove from catch", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r454127238", "createdAt": "2020-07-14T06:18:29Z", "author": {"login": "vamshin"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.codec.KNNCodecUtil;\n+import com.amazon.opendistroforelasticsearch.knn.index.v1736.KNNIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SegmentInfo;\n+import org.apache.lucene.index.SegmentReader;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardPath;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * KNNIndexShard wraps IndexShard and adds methods to perform k-NN related operations against the shard\n+ */\n+public class KNNIndexShard {\n+    private IndexShard indexShard;\n+    private KNNIndexCache knnIndexCache;\n+\n+    private static Logger logger = LogManager.getLogger(KNNIndexShard.class);\n+\n+    /**\n+     * Constructor to generate KNNIndexShard. We do not perform validation that the Index the IndexShard is from\n+     * is in fact a k-NN Index (index.knn = true). This may make sense to add later, but for now the operations for\n+     * KNNIndexShards that are not from a k-NN index should be no-ops.\n+     *\n+     * @param indexShard IndexShard to be wrapped.\n+     */\n+    public KNNIndexShard(IndexShard indexShard) {\n+        this.indexShard = indexShard;\n+        this.knnIndexCache = KNNIndexCache.getInstance();\n+    }\n+\n+    /**\n+     * Return the underlying IndexShard\n+     *\n+     * @return IndexShard\n+     */\n+    public IndexShard getIndexShard() {\n+        return indexShard;\n+    }\n+\n+    /**\n+     * Return the name of the shards index\n+     *\n+     * @return Name of shard's index\n+     */\n+    public String getIndexName() {\n+        return indexShard.shardId().getIndexName();\n+    }\n+\n+    /**\n+     * Load all of the HNSW graphs for this shard into the cache. Note that getIndices is called to prevent loading\n+     * in duplicates.\n+     *\n+     * @return a List of KNNIndex's from this shard that are in the cache after this operation.\n+     * @throws IOException Thrown when getting the HNSW Paths to be loaded in\n+     */\n+    public List<KNNIndex> warmup() throws IOException {\n+        logger.info(\"[KNN] Warming up index: \" + getIndexName());\n+        Engine.Searcher searcher = indexShard.acquireSearcher(\"knn-warmup\");\n+        List<KNNIndex> indices;\n+        try {\n+            indices = knnIndexCache.getIndices(getHNSWPaths(searcher.getIndexReader()), getIndexName());\n+            searcher.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM3NjA4Mg==", "bodyText": "Good suggestion. Will update", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r455376082", "createdAt": "2020-07-15T21:43:20Z", "author": {"login": "jmazanec15"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.codec.KNNCodecUtil;\n+import com.amazon.opendistroforelasticsearch.knn.index.v1736.KNNIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.index.FilterLeafReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.SegmentInfo;\n+import org.apache.lucene.index.SegmentReader;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardPath;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * KNNIndexShard wraps IndexShard and adds methods to perform k-NN related operations against the shard\n+ */\n+public class KNNIndexShard {\n+    private IndexShard indexShard;\n+    private KNNIndexCache knnIndexCache;\n+\n+    private static Logger logger = LogManager.getLogger(KNNIndexShard.class);\n+\n+    /**\n+     * Constructor to generate KNNIndexShard. We do not perform validation that the Index the IndexShard is from\n+     * is in fact a k-NN Index (index.knn = true). This may make sense to add later, but for now the operations for\n+     * KNNIndexShards that are not from a k-NN index should be no-ops.\n+     *\n+     * @param indexShard IndexShard to be wrapped.\n+     */\n+    public KNNIndexShard(IndexShard indexShard) {\n+        this.indexShard = indexShard;\n+        this.knnIndexCache = KNNIndexCache.getInstance();\n+    }\n+\n+    /**\n+     * Return the underlying IndexShard\n+     *\n+     * @return IndexShard\n+     */\n+    public IndexShard getIndexShard() {\n+        return indexShard;\n+    }\n+\n+    /**\n+     * Return the name of the shards index\n+     *\n+     * @return Name of shard's index\n+     */\n+    public String getIndexName() {\n+        return indexShard.shardId().getIndexName();\n+    }\n+\n+    /**\n+     * Load all of the HNSW graphs for this shard into the cache. Note that getIndices is called to prevent loading\n+     * in duplicates.\n+     *\n+     * @return a List of KNNIndex's from this shard that are in the cache after this operation.\n+     * @throws IOException Thrown when getting the HNSW Paths to be loaded in\n+     */\n+    public List<KNNIndex> warmup() throws IOException {\n+        logger.info(\"[KNN] Warming up index: \" + getIndexName());\n+        Engine.Searcher searcher = indexShard.acquireSearcher(\"knn-warmup\");\n+        List<KNNIndex> indices;\n+        try {\n+            indices = knnIndexCache.getIndices(getHNSWPaths(searcher.getIndexReader()), getIndexName());\n+            searcher.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNzIzOA=="}, "originalCommit": {"oid": "6b592b78dbacddd2f787fd1d2da9d791ae19724a"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDg5NzcyOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMToyNDo0MVrOGy9UFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMToyNjoyNlrOGy9XMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4NjU1MQ==", "bodyText": "Minor: In places where we mention memory should we be explicit calling native memory or off-heap to set context where the graphs are actually loaded?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r456086551", "createdAt": "2020-07-16T21:24:41Z", "author": {"login": "vamshin"}, "path": "README.md", "diffHunk": "@@ -404,6 +404,35 @@ GET /_opendistro/_knn/HYMrXXsBSamUkcAjhjeN0w/stats/circuit_breaker_triggered,gra\n }\n ```\n \n+## Warmup API\n+### Overview\n+The HNSW graphs used to perform k-Approximate Nearest Neighbor Search are stored as `.hnsw` files with the other Lucene segment files. In order to perform search on these graphs, they need to be loaded into memory. If the graphs have not yet been loaded into memory, upon search, they will first be loaded and then searched. This can cause high latency during initial queries. To avoid this, users will often run random queries during a warmup period. After this warmup period, the graphs will be loaded into memory and their production workloads can begin. This process is indirect and requires extra effort. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843527ee357161bad89ee96c24ba925d33baff26"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4NzM0Ng==", "bodyText": "Sure, will update", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r456087346", "createdAt": "2020-07-16T21:26:26Z", "author": {"login": "jmazanec15"}, "path": "README.md", "diffHunk": "@@ -404,6 +404,35 @@ GET /_opendistro/_knn/HYMrXXsBSamUkcAjhjeN0w/stats/circuit_breaker_triggered,gra\n }\n ```\n \n+## Warmup API\n+### Overview\n+The HNSW graphs used to perform k-Approximate Nearest Neighbor Search are stored as `.hnsw` files with the other Lucene segment files. In order to perform search on these graphs, they need to be loaded into memory. If the graphs have not yet been loaded into memory, upon search, they will first be loaded and then searched. This can cause high latency during initial queries. To avoid this, users will often run random queries during a warmup period. After this warmup period, the graphs will be loaded into memory and their production workloads can begin. This process is indirect and requires extra effort. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4NjU1MQ=="}, "originalCommit": {"oid": "843527ee357161bad89ee96c24ba925d33baff26"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDkyNjU4OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTozNDoxOFrOGy9lPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjowNzozMlrOGy-gGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5MDk0Mg==", "bodyText": "Should we also call out Idempotency with the warmup api? warmup api ensures only the graphs belonging to the segments that did not get loaded are loaded to memory. Existing graphs would be untouched?", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r456090942", "createdAt": "2020-07-16T21:34:18Z", "author": {"login": "vamshin"}, "path": "README.md", "diffHunk": "@@ -404,6 +404,35 @@ GET /_opendistro/_knn/HYMrXXsBSamUkcAjhjeN0w/stats/circuit_breaker_triggered,gra\n }\n ```\n \n+## Warmup API\n+### Overview\n+The HNSW graphs used to perform k-Approximate Nearest Neighbor Search are stored as `.hnsw` files with the other Lucene segment files. In order to perform search on these graphs, they need to be loaded into native memory. If the graphs have not yet been loaded into native memory, upon search, they will first be loaded and then searched. This can cause high latency during initial queries. To avoid this, users will often run random queries during a warmup period. After this warmup period, the graphs will be loaded into native memory and their production workloads can begin. This process is indirect and requires extra effort. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "379bd4e04ceddd6c3c16dece8bd0b16f2727ce34"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwNjAwOQ==", "bodyText": "Sure, I can call this out.", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/162#discussion_r456106009", "createdAt": "2020-07-16T22:07:32Z", "author": {"login": "jmazanec15"}, "path": "README.md", "diffHunk": "@@ -404,6 +404,35 @@ GET /_opendistro/_knn/HYMrXXsBSamUkcAjhjeN0w/stats/circuit_breaker_triggered,gra\n }\n ```\n \n+## Warmup API\n+### Overview\n+The HNSW graphs used to perform k-Approximate Nearest Neighbor Search are stored as `.hnsw` files with the other Lucene segment files. In order to perform search on these graphs, they need to be loaded into native memory. If the graphs have not yet been loaded into native memory, upon search, they will first be loaded and then searched. This can cause high latency during initial queries. To avoid this, users will often run random queries during a warmup period. After this warmup period, the graphs will be loaded into native memory and their production workloads can begin. This process is indirect and requires extra effort. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5MDk0Mg=="}, "originalCommit": {"oid": "379bd4e04ceddd6c3c16dece8bd0b16f2727ce34"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2642, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}