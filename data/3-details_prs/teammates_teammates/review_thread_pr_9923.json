{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDM2NzA5", "number": 9923, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNDoyNToxNFrODZGJcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjo1NToxOVrODaVq0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjQxNzE0OnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNDoyNToxNFrOFfTQWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNDoyNToxNFrOFfTQWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM2NTY1OA==", "bodyText": "Naming convention:\n\nIt is a bit weird to mention frontend here as you are already in the frontend.\nA bit redundant to say in front-end only\nonXXX is more of naming convention for an event handler.", "url": "https://github.com/TEAMMATES/teammates/pull/9923#discussion_r368365658", "createdAt": "2020-01-20T04:25:14Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.ts", "diffHunk": "@@ -248,6 +320,28 @@ export class InstructorCoursesPageComponent implements OnInit {\n     }, () => {});\n   }\n \n+  /**\n+   * Moves an active/archived course to Recycle Bin in front-end only.\n+   * This is to reduce the need to refresh the entire list of courses multiple times.\n+   */\n+  onDeleteFrontEnd(courseId: string): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645631675bc8ebc26ce26493c1b91c10f2771765"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjQyNzgxOnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNDozNzoyOVrOFfTWrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNTowNToyMlrOFfTltA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM2NzI3Ng==", "bodyText": "How about combining ActiveCourseModel ArchivedCourseModel SoftDeletedCourseModel into one CourseModel?", "url": "https://github.com/TEAMMATES/teammates/pull/9923#discussion_r368367276", "createdAt": "2020-01-20T04:37:29Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.ts", "diffHunk": "@@ -228,6 +228,78 @@ export class InstructorCoursesPageComponent implements OnInit {\n     });\n   }\n \n+  /**\n+   * Changes the status of an archived course in front-end only.\n+   * This is to reduce the need to refresh the entire list of courses multiple times.\n+   */\n+  changeFrontEndArchiveStatus(courseId: string, toArchive: boolean): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645631675bc8ebc26ce26493c1b91c10f2771765"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3MTEyNA==", "bodyText": "Noted with thanks! I will consider about that.", "url": "https://github.com/TEAMMATES/teammates/pull/9923#discussion_r368371124", "createdAt": "2020-01-20T05:05:22Z", "author": {"login": "niqiukun"}, "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.ts", "diffHunk": "@@ -228,6 +228,78 @@ export class InstructorCoursesPageComponent implements OnInit {\n     });\n   }\n \n+  /**\n+   * Changes the status of an archived course in front-end only.\n+   * This is to reduce the need to refresh the entire list of courses multiple times.\n+   */\n+  changeFrontEndArchiveStatus(courseId: string, toArchive: boolean): void {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM2NzI3Ng=="}, "originalCommit": {"oid": "645631675bc8ebc26ce26493c1b91c10f2771765"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODc0OTg4OnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo0MjozOVrOFfo20w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo0MjozOVrOFfo20w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxOTU3MQ==", "bodyText": "course now will have the true deletionTimestamp in the backend. Manually assigning a fake deletionTimestamp might cause data inconsistency in the future.", "url": "https://github.com/TEAMMATES/teammates/pull/9923#discussion_r368719571", "createdAt": "2020-01-20T20:42:39Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.ts", "diffHunk": "@@ -239,7 +296,7 @@ export class InstructorCoursesPageComponent implements OnInit {\n     const modalRef: NgbModalRef = this.modalService.open(CourseSoftDeletionConfirmModalComponent);\n     modalRef.result.then(() => {\n       this.courseService.binCourse(courseId).subscribe((course: Course) => {\n-        this.loadInstructorCourses();\n+        this.moveCourseToRecycleBin(courseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f3787b629a2293da206d3a6dfcb6ea6448238d"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODc1MjYwOnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo0NDoxMVrOFfo4UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MDoyNFrOFgjA7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxOTk1Mg==", "bodyText": "You can try to combine findAndRemoveActiveCourse. ,indAndRemoveArchivedCourse and findAndRemoveSoftDeletedCourse to findAndRemoveCourseModel(from, couseId)?", "url": "https://github.com/TEAMMATES/teammates/pull/9923#discussion_r368719952", "createdAt": "2020-01-20T20:44:11Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.ts", "diffHunk": "@@ -216,18 +208,83 @@ export class InstructorCoursesPageComponent implements OnInit {\n     this.courseService.changeArchiveStatus(courseId, {\n       archiveStatus: toArchive,\n     }).subscribe((courseArchive: CourseArchive) => {\n-      this.loadInstructorCourses();\n       if (courseArchive.isArchived) {\n+        this.changeModelFromActiveToArchived(courseId);\n         this.statusMessageService.showSuccessMessage(`The course ${courseId} has been archived.\n           It will not appear on the home page anymore.`);\n       } else {\n+        this.changeModelFromArchivedToActive(courseId);\n         this.statusMessageService.showSuccessMessage('The course has been unarchived.');\n       }\n     }, (resp: ErrorMessageOutput) => {\n       this.statusMessageService.showErrorMessage(resp.error.message);\n     });\n   }\n \n+  /**\n+   * Moves a course model from active courses list to archived list.\n+   * This is to reduce the need to refresh the entire list of courses multiple times.\n+   */\n+  changeModelFromActiveToArchived(courseId: string): void {\n+    const courseToBeRemoved: CourseModel | undefined = this.findAndRemoveActiveCourse(courseId);\n+    if (courseToBeRemoved !== undefined) {\n+      this.archivedCourses.push(courseToBeRemoved);\n+    }\n+  }\n+\n+  /**\n+   * Moves a course model from archived courses list to active list.\n+   * This is to reduce the need to refresh the entire list of courses multiple times.\n+   */\n+  changeModelFromArchivedToActive(courseId: string): void {\n+    const courseToBeRemoved: CourseModel | undefined = this.findAndRemoveArchivedCourse(courseId);\n+    if (courseToBeRemoved !== undefined) {\n+      this.activeCourses.push(courseToBeRemoved);\n+      this.activeCourses.sort(this.sortBy(this.tableSortBy));\n+    }\n+  }\n+\n+  /**\n+   * Finds and removes an active course from the active course list.\n+   */\n+  findAndRemoveActiveCourse(courseId: string): CourseModel | undefined {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f3787b629a2293da206d3a6dfcb6ea6448238d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ1OTA2Mg==", "bodyText": "I tried setting the course model array as the parameter from. But the way used to remove the course by filter and assignment does not work because JavaScript makes a copy of the array. I also tried combining them into switch case statements but that makes the function lengthy. Any suggestions on the improvement?", "url": "https://github.com/TEAMMATES/teammates/pull/9923#discussion_r369459062", "createdAt": "2020-01-22T09:48:56Z", "author": {"login": "niqiukun"}, "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.ts", "diffHunk": "@@ -216,18 +208,83 @@ export class InstructorCoursesPageComponent implements OnInit {\n     this.courseService.changeArchiveStatus(courseId, {\n       archiveStatus: toArchive,\n     }).subscribe((courseArchive: CourseArchive) => {\n-      this.loadInstructorCourses();\n       if (courseArchive.isArchived) {\n+        this.changeModelFromActiveToArchived(courseId);\n         this.statusMessageService.showSuccessMessage(`The course ${courseId} has been archived.\n           It will not appear on the home page anymore.`);\n       } else {\n+        this.changeModelFromArchivedToActive(courseId);\n         this.statusMessageService.showSuccessMessage('The course has been unarchived.');\n       }\n     }, (resp: ErrorMessageOutput) => {\n       this.statusMessageService.showErrorMessage(resp.error.message);\n     });\n   }\n \n+  /**\n+   * Moves a course model from active courses list to archived list.\n+   * This is to reduce the need to refresh the entire list of courses multiple times.\n+   */\n+  changeModelFromActiveToArchived(courseId: string): void {\n+    const courseToBeRemoved: CourseModel | undefined = this.findAndRemoveActiveCourse(courseId);\n+    if (courseToBeRemoved !== undefined) {\n+      this.archivedCourses.push(courseToBeRemoved);\n+    }\n+  }\n+\n+  /**\n+   * Moves a course model from archived courses list to active list.\n+   * This is to reduce the need to refresh the entire list of courses multiple times.\n+   */\n+  changeModelFromArchivedToActive(courseId: string): void {\n+    const courseToBeRemoved: CourseModel | undefined = this.findAndRemoveArchivedCourse(courseId);\n+    if (courseToBeRemoved !== undefined) {\n+      this.activeCourses.push(courseToBeRemoved);\n+      this.activeCourses.sort(this.sortBy(this.tableSortBy));\n+    }\n+  }\n+\n+  /**\n+   * Finds and removes an active course from the active course list.\n+   */\n+  findAndRemoveActiveCourse(courseId: string): CourseModel | undefined {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxOTk1Mg=="}, "originalCommit": {"oid": "58f3787b629a2293da206d3a6dfcb6ea6448238d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MjQzMQ==", "bodyText": "Try\nthis.activeCourses = findAndRemoveCourseModel(findAndRemoveCourseModel, courseId)\n?", "url": "https://github.com/TEAMMATES/teammates/pull/9923#discussion_r369672431", "createdAt": "2020-01-22T16:40:24Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-courses-page/instructor-courses-page.component.ts", "diffHunk": "@@ -216,18 +208,83 @@ export class InstructorCoursesPageComponent implements OnInit {\n     this.courseService.changeArchiveStatus(courseId, {\n       archiveStatus: toArchive,\n     }).subscribe((courseArchive: CourseArchive) => {\n-      this.loadInstructorCourses();\n       if (courseArchive.isArchived) {\n+        this.changeModelFromActiveToArchived(courseId);\n         this.statusMessageService.showSuccessMessage(`The course ${courseId} has been archived.\n           It will not appear on the home page anymore.`);\n       } else {\n+        this.changeModelFromArchivedToActive(courseId);\n         this.statusMessageService.showSuccessMessage('The course has been unarchived.');\n       }\n     }, (resp: ErrorMessageOutput) => {\n       this.statusMessageService.showErrorMessage(resp.error.message);\n     });\n   }\n \n+  /**\n+   * Moves a course model from active courses list to archived list.\n+   * This is to reduce the need to refresh the entire list of courses multiple times.\n+   */\n+  changeModelFromActiveToArchived(courseId: string): void {\n+    const courseToBeRemoved: CourseModel | undefined = this.findAndRemoveActiveCourse(courseId);\n+    if (courseToBeRemoved !== undefined) {\n+      this.archivedCourses.push(courseToBeRemoved);\n+    }\n+  }\n+\n+  /**\n+   * Moves a course model from archived courses list to active list.\n+   * This is to reduce the need to refresh the entire list of courses multiple times.\n+   */\n+  changeModelFromArchivedToActive(courseId: string): void {\n+    const courseToBeRemoved: CourseModel | undefined = this.findAndRemoveArchivedCourse(courseId);\n+    if (courseToBeRemoved !== undefined) {\n+      this.activeCourses.push(courseToBeRemoved);\n+      this.activeCourses.sort(this.sortBy(this.tableSortBy));\n+    }\n+  }\n+\n+  /**\n+   * Finds and removes an active course from the active course list.\n+   */\n+  findAndRemoveActiveCourse(courseId: string): CourseModel | undefined {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxOTk1Mg=="}, "originalCommit": {"oid": "58f3787b629a2293da206d3a6dfcb6ea6448238d"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTQ0NTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/BinCourseAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjo1NToxOVrOFhPVTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjo1NToxOVrOFhPVTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5ODU0MA==", "bodyText": "My apologies. I thought we will return the updated course through the API.\nLooks like your change is necessary. In addition, don't forget to add Java test for it.", "url": "https://github.com/TEAMMATES/teammates/pull/9923#discussion_r370398540", "createdAt": "2020-01-23T22:55:19Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/action/BinCourseAction.java", "diffHunk": "@@ -33,7 +33,7 @@ public ActionResult execute() {\n         String idOfCourseToBin = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n         try {\n             CourseAttributes courseAttributes = logic.getCourse(idOfCourseToBin);\n-            logic.moveCourseToRecycleBin(idOfCourseToBin);\n+            courseAttributes.deletedAt = logic.moveCourseToRecycleBin(idOfCourseToBin);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d0add7f2b7eb977a9ff887177ecb3a824d328f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4021, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}