{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Nzc1NzQz", "number": 10313, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzowNzo1MVrOEOgdCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOToyMjoxOFrOEPC-PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjQ3MjQxOnYy", "diffSide": "RIGHT", "path": "src/web/services/http-request.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzowNzo1MVrOGxsjFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NzozM1rOGx819g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2MzI4Nw==", "bodyText": "Does it get fixed in Angular 9\n\n\nCan we extend HttpUrlEncodingCodec and only override encodeValue.", "url": "https://github.com/TEAMMATES/teammates/pull/10313#discussion_r454763287", "createdAt": "2020-07-15T03:07:51Z", "author": {"login": "xpdavid"}, "path": "src/web/services/http-request.service.ts", "diffHunk": "@@ -1,10 +1,35 @@\n-import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n+import { HttpClient, HttpHeaders, HttpParameterCodec, HttpParams } from '@angular/common/http';\n import { Injectable } from '@angular/core';\n import { Observable } from 'rxjs';\n import { environment } from '../environments/environment';\n import { ResourceEndpoints } from '../types/api-endpoints';\n import { MasqueradeModeService } from './masquerade-mode.service';\n \n+/**\n+ * This encoder was created to support encoding and decoding of plus (+) signs.\n+ *\n+ * Angular will ignore the encoding for plus signs. Refer to:\n+ * https://github.com/angular/angular/blob/8.0.0/packages/common/http/src/params.ts#L33\n+ */\n+class CustomEncoder implements HttpParameterCodec {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c840e701554cbe37e6df9189a2c34cbefd38d6b9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzMDI2Mg==", "bodyText": "I can confirm that the problem is still there. I will work on extending the codec.", "url": "https://github.com/TEAMMATES/teammates/pull/10313#discussion_r455030262", "createdAt": "2020-07-15T12:57:33Z", "author": {"login": "madanalogy"}, "path": "src/web/services/http-request.service.ts", "diffHunk": "@@ -1,10 +1,35 @@\n-import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n+import { HttpClient, HttpHeaders, HttpParameterCodec, HttpParams } from '@angular/common/http';\n import { Injectable } from '@angular/core';\n import { Observable } from 'rxjs';\n import { environment } from '../environments/environment';\n import { ResourceEndpoints } from '../types/api-endpoints';\n import { MasqueradeModeService } from './masquerade-mode.service';\n \n+/**\n+ * This encoder was created to support encoding and decoding of plus (+) signs.\n+ *\n+ * Angular will ignore the encoding for plus signs. Refer to:\n+ * https://github.com/angular/angular/blob/8.0.0/packages/common/http/src/params.ts#L33\n+ */\n+class CustomEncoder implements HttpParameterCodec {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2MzI4Nw=="}, "originalCommit": {"oid": "c840e701554cbe37e6df9189a2c34cbefd38d6b9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjYyMTY2OnYy", "diffSide": "RIGHT", "path": "src/web/services/http-request.service.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDozMjoyMFrOGxt3LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzowOTowMlrOGx9RVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4NDgxMw==", "bodyText": "https://github.com/angular/angular/blob/9.0.0/packages/common/http/src/params.ts#L81-L92\nThere should be a reason why they do it like this. Should just copy that and modify accordingly (if my hunch is right, remove line 88).", "url": "https://github.com/TEAMMATES/teammates/pull/10313#discussion_r454784813", "createdAt": "2020-07-15T04:32:20Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/http-request.service.ts", "diffHunk": "@@ -1,10 +1,35 @@\n-import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n+import { HttpClient, HttpHeaders, HttpParameterCodec, HttpParams } from '@angular/common/http';\n import { Injectable } from '@angular/core';\n import { Observable } from 'rxjs';\n import { environment } from '../environments/environment';\n import { ResourceEndpoints } from '../types/api-endpoints';\n import { MasqueradeModeService } from './masquerade-mode.service';\n \n+/**\n+ * This encoder was created to support encoding and decoding of plus (+) signs.\n+ *\n+ * Angular will ignore the encoding for plus signs. Refer to:\n+ * https://github.com/angular/angular/blob/8.0.0/packages/common/http/src/params.ts#L33\n+ */\n+class CustomEncoder implements HttpParameterCodec {\n+\n+  encodeKey(key: string): string {\n+    return encodeURIComponent(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c840e701554cbe37e6df9189a2c34cbefd38d6b9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNzI2OA==", "bodyText": "Do we want to remove the slash as well? i.e. is there a list of permissible special characters for session names?", "url": "https://github.com/TEAMMATES/teammates/pull/10313#discussion_r455037268", "createdAt": "2020-07-15T13:09:02Z", "author": {"login": "madanalogy"}, "path": "src/web/services/http-request.service.ts", "diffHunk": "@@ -1,10 +1,35 @@\n-import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n+import { HttpClient, HttpHeaders, HttpParameterCodec, HttpParams } from '@angular/common/http';\n import { Injectable } from '@angular/core';\n import { Observable } from 'rxjs';\n import { environment } from '../environments/environment';\n import { ResourceEndpoints } from '../types/api-endpoints';\n import { MasqueradeModeService } from './masquerade-mode.service';\n \n+/**\n+ * This encoder was created to support encoding and decoding of plus (+) signs.\n+ *\n+ * Angular will ignore the encoding for plus signs. Refer to:\n+ * https://github.com/angular/angular/blob/8.0.0/packages/common/http/src/params.ts#L33\n+ */\n+class CustomEncoder implements HttpParameterCodec {\n+\n+  encodeKey(key: string): string {\n+    return encodeURIComponent(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4NDgxMw=="}, "originalCommit": {"oid": "c840e701554cbe37e6df9189a2c34cbefd38d6b9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTE5ODU3OnYy", "diffSide": "RIGHT", "path": "src/web/services/http-request.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjo0Njo0MlrOGyGhjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjo0Njo0MlrOGyGhjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE4ODg3OQ==", "bodyText": "The url should be updated.", "url": "https://github.com/TEAMMATES/teammates/pull/10313#discussion_r455188879", "createdAt": "2020-07-15T16:46:42Z", "author": {"login": "xpdavid"}, "path": "src/web/services/http-request.service.ts", "diffHunk": "@@ -1,10 +1,35 @@\n-import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n+import { HttpClient, HttpHeaders, HttpParams, HttpUrlEncodingCodec } from '@angular/common/http';\n import { Injectable } from '@angular/core';\n import { Observable } from 'rxjs';\n import { environment } from '../environments/environment';\n import { ResourceEndpoints } from '../types/api-endpoints';\n import { MasqueradeModeService } from './masquerade-mode.service';\n \n+/**\n+ * This encoder was created to support encoding and decoding of plus (+) signs.\n+ *\n+ * Angular will ignore the encoding for plus signs. Refer to:\n+ * https://github.com/angular/angular/blob/8.0.0/packages/common/http/src/params.ts#L33", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d086e9cb306718aa9d7bd586297a5db61705355b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTUwNDI5OnYy", "diffSide": "RIGHT", "path": "src/web/app/app.module.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjo1MTowN1rOGyccyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjo1MTowN1rOGyccyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0ODEwNQ==", "bodyText": "Can use stricter type\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            const customUrlSerializerProvider: any = {\n          \n          \n            \n            const customUrlSerializerProvider: ValueProvider = {", "url": "https://github.com/TEAMMATES/teammates/pull/10313#discussion_r455548105", "createdAt": "2020-07-16T06:51:07Z", "author": {"login": "ccyccyccy"}, "path": "src/web/app/app.module.ts", "diffHunk": "@@ -16,13 +16,19 @@ import {\n   StatusMesssageModalModule,\n } from './components/status-message/status-messsage-modal/status-messsage-modal.module';\n import { ToastModule } from './components/toast/toast.module';\n+import { CustomUrlSerializer } from './custom-url-serializer';\n import { ClickOutsideDirective, PageComponent } from './page.component';\n import { AdminPageComponent } from './pages-admin/admin-page.component';\n import { InstructorPageComponent } from './pages-instructor/instructor-page.component';\n import { StaticPageComponent } from './pages-static/static-page.component';\n import { StudentPageComponent } from './pages-student/student-page.component';\n import { PublicPageComponent } from './public-page.component';\n \n+const customUrlSerializer: CustomUrlSerializer = new CustomUrlSerializer();\n+const customUrlSerializerProvider: any = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c58c7e41006cc9e6f5726dd3ed18b7ae8ba64e6"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTUxMDQ4OnYy", "diffSide": "RIGHT", "path": "src/web/app/custom-url-serializer.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjo1MzoxN1rOGycgig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjo1MzoxN1rOGycgig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0OTA2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              parse(url: any): UrlTree {\n          \n          \n            \n              parse(url: string): UrlTree {", "url": "https://github.com/TEAMMATES/teammates/pull/10313#discussion_r455549066", "createdAt": "2020-07-16T06:53:17Z", "author": {"login": "ccyccyccy"}, "path": "src/web/app/custom-url-serializer.ts", "diffHunk": "@@ -0,0 +1,16 @@\n+import { DefaultUrlSerializer, UrlSerializer, UrlTree } from '@angular/router';\n+\n+/**\n+ * Custom Url Serializer to handle plus sign related issues\n+ */\n+export class CustomUrlSerializer implements UrlSerializer {\n+  parse(url: any): UrlTree {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c58c7e41006cc9e6f5726dd3ed18b7ae8ba64e6"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjEyNzk3OnYy", "diffSide": "RIGHT", "path": "src/web/app/custom-url-serializer.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOToyMjoxOFrOGyiizw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOToyMjoxOFrOGyiizw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0Nzk1MQ==", "bodyText": "Here as well :P\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              serialize(tree: UrlTree): any {\n          \n          \n            \n              serialize(tree: UrlTree): string {", "url": "https://github.com/TEAMMATES/teammates/pull/10313#discussion_r455647951", "createdAt": "2020-07-16T09:22:18Z", "author": {"login": "ccyccyccy"}, "path": "src/web/app/custom-url-serializer.ts", "diffHunk": "@@ -0,0 +1,16 @@\n+import { DefaultUrlSerializer, UrlSerializer, UrlTree } from '@angular/router';\n+\n+/**\n+ * Custom Url Serializer to handle plus sign related issues\n+ */\n+export class CustomUrlSerializer implements UrlSerializer {\n+  parse(url: string): UrlTree {\n+    const dus: DefaultUrlSerializer = new DefaultUrlSerializer();\n+    return dus.parse(url.replace(/\\+/g, '%2B'));\n+  }\n+\n+  serialize(tree: UrlTree): any {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d82a54b92bcdce59cf9219a3738263919957d63d"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3633, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}