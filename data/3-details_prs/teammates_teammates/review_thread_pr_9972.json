{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwOTE0NjYy", "number": 9972, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo0Mjo0OFrODjuL0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNjowMToyOVrODl_3Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzgzNDQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/endpoints/CronJobEndpoints.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo0Mjo0OFrOFvr-4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowMTo0N1rOFvsXLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0ODAwMQ==", "bodyText": "The cron job's URL should not be exposed right?", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r385548001", "createdAt": "2020-02-28T07:42:48Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/endpoints/CronJobEndpoints.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.CronJobURIs;\n+\n+/**\n+ * API endpoints for cron jobs.\n+ */\n+public enum CronJobEndpoints {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88dfaa0207b6d873999dc7caa333a51adc6f1c7b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MDQyNg==", "bodyText": "I created the endpoints because I wasn't too sure if we might need it, but since it's unnecessary I will remove it.", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r385550426", "createdAt": "2020-02-28T07:50:28Z", "author": {"login": "tiuweehan"}, "path": "src/main/java/teammates/ui/webapi/endpoints/CronJobEndpoints.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.CronJobURIs;\n+\n+/**\n+ * API endpoints for cron jobs.\n+ */\n+public enum CronJobEndpoints {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0ODAwMQ=="}, "originalCommit": {"oid": "88dfaa0207b6d873999dc7caa333a51adc6f1c7b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MDcyMw==", "bodyText": "Both should not be exposed if you take a careful look at what they do.", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r385550723", "createdAt": "2020-02-28T07:51:22Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/endpoints/CronJobEndpoints.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.CronJobURIs;\n+\n+/**\n+ * API endpoints for cron jobs.\n+ */\n+public enum CronJobEndpoints {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0ODAwMQ=="}, "originalCommit": {"oid": "88dfaa0207b6d873999dc7caa333a51adc6f1c7b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NDIyMg==", "bodyText": "Yup the cron's URLs are used only in the backend so I understand why we don't need it. I'm not too sure about  the legacy URLs, but I suppose since it's legacy we're trying to avoid using them.\nI have removed both from my PR. Is there anything else I need to add/change? Otherwise I think this PR is ready. (There are more instructor modules with HttpRequestService, but this PR might become very large if I refactored them too, so I'm planning to do them in another PR)", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r385554222", "createdAt": "2020-02-28T08:01:47Z", "author": {"login": "tiuweehan"}, "path": "src/main/java/teammates/ui/webapi/endpoints/CronJobEndpoints.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.CronJobURIs;\n+\n+/**\n+ * API endpoints for cron jobs.\n+ */\n+public enum CronJobEndpoints {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0ODAwMQ=="}, "originalCommit": {"oid": "88dfaa0207b6d873999dc7caa333a51adc6f1c7b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzgzNDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/endpoints/LegacyEndpoints.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo0MzowNlrOFvr_MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo0MzowNlrOFvr_MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0ODA4MQ==", "bodyText": "I don't think this one should be exposed either.", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r385548081", "createdAt": "2020-02-28T07:43:06Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/endpoints/LegacyEndpoints.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.LegacyURIs;\n+\n+/**\n+ * Legacy API endpoints.\n+ */\n+public enum LegacyEndpoints {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88dfaa0207b6d873999dc7caa333a51adc6f1c7b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg0ODk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/endpoints/WebPageEndpoints.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxMzoxN1rOFwP7JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjo0OTo0MlrOFwVBKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjg2OQ==", "bodyText": "Question: Is this a good design? (i.e. let the backend to decide what the frontend URL should be). Looks like it should be other way around. the control of frontend URL should be in the frontend rather than the backend.", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386136869", "createdAt": "2020-03-01T20:13:17Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/endpoints/WebPageEndpoints.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.WebPageURIs;\n+\n+/**\n+ * API endpoints for web pages.\n+ */\n+public enum WebPageEndpoints {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIwNDgwOQ==", "bodyText": "Isn't this the current design implementation as well? The URLs are defined in the Const.java file, and are matched by the frontend string literals.\nI'm not sure if there are any gradle plugins that can convert TypeScript enums to Java enums, but I'll look into it.", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386204809", "createdAt": "2020-03-02T05:38:06Z", "author": {"login": "tiuweehan"}, "path": "src/main/java/teammates/ui/webapi/endpoints/WebPageEndpoints.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.WebPageURIs;\n+\n+/**\n+ * API endpoints for web pages.\n+ */\n+public enum WebPageEndpoints {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjg2OQ=="}, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIwNTc0NA==", "bodyText": "Isn't this the current design implementation as well?\n\nYou are syncing this file WebPageEndpoints.java to the frontend right? In what situation will the frontend use this file? You might argue that this file can be used for any redirections in the frontend. But my question is, if one days the redirection changes, you should also modify the file in the backend which is a bit weired.", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386205744", "createdAt": "2020-03-02T05:43:00Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/endpoints/WebPageEndpoints.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.WebPageURIs;\n+\n+/**\n+ * API endpoints for web pages.\n+ */\n+public enum WebPageEndpoints {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjg2OQ=="}, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyMDMzMQ==", "bodyText": "I see what you mean. My intention was to sync both endpoints on the frontend and backend, so I thought it would be best to use a single source of truth in Const.java.\nIf that's the case, should I just remove WebPageEndpoints.java entirely?", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386220331", "createdAt": "2020-03-02T06:49:42Z", "author": {"login": "tiuweehan"}, "path": "src/main/java/teammates/ui/webapi/endpoints/WebPageEndpoints.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.WebPageURIs;\n+\n+/**\n+ * API endpoints for web pages.\n+ */\n+public enum WebPageEndpoints {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjg2OQ=="}, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg0OTUwOnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxNDoxNVrOFwP7ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzoyMDowN1rOFzNBAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjkzOA==", "bodyText": "undefined?", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386136938", "createdAt": "2020-03-01T20:14:15Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -152,10 +152,11 @@ export abstract class InstructorSessionBasePageComponent {\n    * Updates the instructor privilege in {@code SessionsTableRowModel}.\n    */\n   protected updateInstructorPrivilege(model: SessionsTableRowModel): void {\n-    this.httpRequestService.get('/instructor/privilege', {\n-      courseid: model.feedbackSession.courseId,\n-      fsname: model.feedbackSession.feedbackSessionName,\n-    }).subscribe((instructorPrivilege: InstructorPrivilege) => {\n+    this.instructorService.loadInstructorPrivilege(\n+        model.feedbackSession.courseId,\n+        undefined,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIwMjYyMg==", "bodyText": "This method has multiple optional parameters, so I am using undefined to skip parameters\nhttps://stackoverflow.com/questions/8356227/skipping-optional-function-parameters-in-javascript", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386202622", "createdAt": "2020-03-02T05:26:26Z", "author": {"login": "tiuweehan"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -152,10 +152,11 @@ export abstract class InstructorSessionBasePageComponent {\n    * Updates the instructor privilege in {@code SessionsTableRowModel}.\n    */\n   protected updateInstructorPrivilege(model: SessionsTableRowModel): void {\n-    this.httpRequestService.get('/instructor/privilege', {\n-      courseid: model.feedbackSession.courseId,\n-      fsname: model.feedbackSession.feedbackSessionName,\n-    }).subscribe((instructorPrivilege: InstructorPrivilege) => {\n+    this.instructorService.loadInstructorPrivilege(\n+        model.feedbackSession.courseId,\n+        undefined,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjkzOA=="}, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIwMjc5Mw==", "bodyText": "Is it a good design of API?", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386202793", "createdAt": "2020-03-02T05:27:24Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -152,10 +152,11 @@ export abstract class InstructorSessionBasePageComponent {\n    * Updates the instructor privilege in {@code SessionsTableRowModel}.\n    */\n   protected updateInstructorPrivilege(model: SessionsTableRowModel): void {\n-    this.httpRequestService.get('/instructor/privilege', {\n-      courseid: model.feedbackSession.courseId,\n-      fsname: model.feedbackSession.feedbackSessionName,\n-    }).subscribe((instructorPrivilege: InstructorPrivilege) => {\n+    this.instructorService.loadInstructorPrivilege(\n+        model.feedbackSession.courseId,\n+        undefined,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjkzOA=="}, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIwNDE3MQ==", "bodyText": "The other option would be to pass the paramMap object, but I didn't think it was a good idea since { [key:string]: string } can contain other key-value pairs.\nThe other option is to create custom types for the function arguments. Would that be a better option?", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386204171", "createdAt": "2020-03-02T05:34:42Z", "author": {"login": "tiuweehan"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -152,10 +152,11 @@ export abstract class InstructorSessionBasePageComponent {\n    * Updates the instructor privilege in {@code SessionsTableRowModel}.\n    */\n   protected updateInstructorPrivilege(model: SessionsTableRowModel): void {\n-    this.httpRequestService.get('/instructor/privilege', {\n-      courseid: model.feedbackSession.courseId,\n-      fsname: model.feedbackSession.feedbackSessionName,\n-    }).subscribe((instructorPrivilege: InstructorPrivilege) => {\n+    this.instructorService.loadInstructorPrivilege(\n+        model.feedbackSession.courseId,\n+        undefined,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjkzOA=="}, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIwNDM5Ng==", "bodyText": "You have Typescript :P Try search typescript optional parameters", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386204396", "createdAt": "2020-03-02T05:36:01Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -152,10 +152,11 @@ export abstract class InstructorSessionBasePageComponent {\n    * Updates the instructor privilege in {@code SessionsTableRowModel}.\n    */\n   protected updateInstructorPrivilege(model: SessionsTableRowModel): void {\n-    this.httpRequestService.get('/instructor/privilege', {\n-      courseid: model.feedbackSession.courseId,\n-      fsname: model.feedbackSession.feedbackSessionName,\n-    }).subscribe((instructorPrivilege: InstructorPrivilege) => {\n+    this.instructorService.loadInstructorPrivilege(\n+        model.feedbackSession.courseId,\n+        undefined,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjkzOA=="}, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxOTYxNg==", "bodyText": "Haha the method that I'm calling has 2 typescript optional parameters (i.e. method signature is  loadInstructorPrivilege(courseId: string, sectionName?: string, feedbackSessionName?: string)). In this case, the only optional parameter that I am using is feedbackSessionName, so based on TypeScript's documentation I should use undefined for the second parameter. Please correct me if I'm wrong \ud83d\ude05", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386219616", "createdAt": "2020-03-02T06:46:47Z", "author": {"login": "tiuweehan"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -152,10 +152,11 @@ export abstract class InstructorSessionBasePageComponent {\n    * Updates the instructor privilege in {@code SessionsTableRowModel}.\n    */\n   protected updateInstructorPrivilege(model: SessionsTableRowModel): void {\n-    this.httpRequestService.get('/instructor/privilege', {\n-      courseid: model.feedbackSession.courseId,\n-      fsname: model.feedbackSession.feedbackSessionName,\n-    }).subscribe((instructorPrivilege: InstructorPrivilege) => {\n+    this.instructorService.loadInstructorPrivilege(\n+        model.feedbackSession.courseId,\n+        undefined,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjkzOA=="}, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDk0Ng==", "bodyText": "I think you can also try to define the interface on the fly:\nloadInstructorPrivilege(param: { courseId: string, sectionName?: string, feedbackSessionName?: string })", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r389234946", "createdAt": "2020-03-07T07:20:07Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -152,10 +152,11 @@ export abstract class InstructorSessionBasePageComponent {\n    * Updates the instructor privilege in {@code SessionsTableRowModel}.\n    */\n   protected updateInstructorPrivilege(model: SessionsTableRowModel): void {\n-    this.httpRequestService.get('/instructor/privilege', {\n-      courseid: model.feedbackSession.courseId,\n-      fsname: model.feedbackSession.feedbackSessionName,\n-    }).subscribe((instructorPrivilege: InstructorPrivilege) => {\n+    this.instructorService.loadInstructorPrivilege(\n+        model.feedbackSession.courseId,\n+        undefined,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjkzOA=="}, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg0OTg5OnYy", "diffSide": "LEFT", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxNToxNFrOFwP7nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxNToxNFrOFwP7nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNjk4OQ==", "bodyText": "Where does this line goes?", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386136989", "createdAt": "2020-03-01T20:15:14Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -166,15 +167,11 @@ export abstract class InstructorSessionBasePageComponent {\n    * Loads response rate of a feedback session.\n    */\n   loadResponseRate(model: SessionsTableRowModel): void {\n-    model.isLoadingResponseRate = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1MDU4OnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxNjoyMlrOFwP79w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxNjoyMlrOFwP79w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzA3OQ==", "bodyText": "I don't think it is a good practice to pass the whole model into the service. The service should only get what are necessary.", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386137079", "createdAt": "2020-03-01T20:16:22Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -166,15 +167,11 @@ export abstract class InstructorSessionBasePageComponent {\n    * Loads response rate of a feedback session.\n    */\n   loadResponseRate(model: SessionsTableRowModel): void {\n-    model.isLoadingResponseRate = true;\n-    const paramMap: { [key: string]: string } = {\n-      courseid: model.feedbackSession.courseId,\n-      fsname: model.feedbackSession.feedbackSessionName,\n-    };\n-    this.httpRequestService.get('/session/stats', paramMap).subscribe((resp: FeedbackSessionStats) => {\n-      model.isLoadingResponseRate = false;\n-      model.responseRate = `${resp.submittedTotal} / ${resp.expectedTotal}`;\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorMessage(resp.error.message); });\n+    this.feedbackSessionsService.loadSessionStatistics(model)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1MDcyOnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxNjozOVrOFwP8CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxNjozOVrOFwP8CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzA5Nw==", "bodyText": "Same here.", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386137097", "createdAt": "2020-03-01T20:16:39Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -225,12 +222,8 @@ export abstract class InstructorSessionBasePageComponent {\n    * Publishes a feedback session.\n    */\n   publishSession(model: SessionsTableRowModel): void {\n-    const paramMap: { [key: string]: string } = {\n-      courseid: model.feedbackSession.courseId,\n-      fsname: model.feedbackSession.feedbackSessionName,\n-    };\n \n-    this.httpRequestService.post('/session/publish', paramMap)\n+    this.feedbackSessionsService.publishFeedbackSession(model)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1MDkxOnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxNjo0N1rOFwP8IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDoxNjo0N1rOFwP8IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNzEyMA==", "bodyText": "Same here.", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r386137120", "createdAt": "2020-03-01T20:16:47Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -244,12 +237,7 @@ export abstract class InstructorSessionBasePageComponent {\n    * Unpublishes a feedback session.\n    */\n   unpublishSession(model: SessionsTableRowModel): void {\n-    const paramMap: { [key: string]: string } = {\n-      courseid: model.feedbackSession.courseId,\n-      fsname: model.feedbackSession.feedbackSessionName,\n-    };\n-\n-    this.httpRequestService.delete('/session/publish', paramMap)\n+    this.feedbackSessionsService.unpublishFeedbackSession(model)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addd29d18f9e3cfd6657967fa51b59b0eb61bb6b"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTcwMjc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/endpoints/ActionEndpoints.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNjowMToyOVrOFzM0Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNjowMToyOVrOFzM0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMTY3MA==", "bodyText": "ActionURIs is deprecated? Why bother sync it to the frontend?", "url": "https://github.com/TEAMMATES/teammates/pull/9972#discussion_r389231670", "createdAt": "2020-03-07T06:01:29Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/endpoints/ActionEndpoints.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.ActionURIs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b7c42f56e54fe3c391fdf5485f9ec1074e26a8"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4076, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}