{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MzU1NjE3", "number": 10150, "title": "[#10140] Add comment search functionality in the backend", "bodyText": "Part of #10140\nSet up endpoints and data format transformation in backend", "createdAt": "2020-06-02T05:16:48Z", "url": "https://github.com/TEAMMATES/teammates/pull/10150", "merged": true, "mergeCommit": {"oid": "331664bd87c176b2a69a27e616d94a0bdc285d40"}, "closed": true, "closedAt": "2020-06-05T07:50:02Z", "author": {"login": "madanalogy"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnNzs7AH2gAyNDI2MzU1NjE3OjcyMTRjZDgwOGI4NGNlMTM5YzQxMDdlMzRlMTNlODk4MGQyMjgwYjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoN0WeAFqTQyNTA3MjIwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/7214cd808b84ce139c4107e34e13e8980d2280b9", "committedDate": "2020-06-02T05:14:22Z", "message": "Refactor resource endpoints and define API output format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzQ5NTQ3", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-422349547", "createdAt": "2020-06-02T05:21:43Z", "commit": {"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyMTo0M1rOGdicTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyMTo1OVrOGdiclg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjE4OQ==", "bodyText": "Please create a new protected constructor in SessionResultsData, you won't need FeedbackSessionResultsBundle", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433626189", "createdAt": "2020-06-02T05:21:43Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package teammates.ui.webapi.output;\n+\n+import teammates.common.datatransfer.FeedbackSessionResultsBundle;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionResultsBundle bundle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjI2Mg==", "bodyText": "Remember to add doc.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433626262", "createdAt": "2020-06-02T05:21:59Z", "author": {"login": "xpdavid"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -78,14 +80,21 @@ export class SearchService {\n     const paramMap: { [key: string]: string } = {\n       searchkey: searchKey,\n     };\n-    return this.httpRequestService.get('/search/students', paramMap);\n+    return this.httpRequestService.get(ResourceEndpoints.SEARCH_STUDENTS, paramMap);\n   }\n \n   searchInstructors(searchKey: string): Observable<Instructors> {\n     const paramMap: { [key: string]: string } = {\n       searchkey: searchKey,\n     };\n-    return this.httpRequestService.get('/search/instructors', paramMap);\n+    return this.httpRequestService.get(ResourceEndpoints.SEARCH_INSTRUCTORS, paramMap);\n+  }\n+\n+  searchComments(searchKey: string): Observable<CommentSearchResults> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4f14c34fcea7c09a2617e1dd2c96ffa38cca7be", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/e4f14c34fcea7c09a2617e1dd2c96ffa38cca7be", "committedDate": "2020-06-02T06:59:21Z", "message": "Utilise FeedbackResponseCommentSearchResultBundle to build CommentSearchResultsData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b1ee857f939cbc418252f8a68511f0042c2b891", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/0b1ee857f939cbc418252f8a68511f0042c2b891", "committedDate": "2020-06-02T07:09:55Z", "message": "Add documentation to searchComments method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDA2NjA0", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-422406604", "createdAt": "2020-06-02T07:22:44Z", "commit": {"oid": "0b1ee857f939cbc418252f8a68511f0042c2b891"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDA5MDk3", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-422409097", "createdAt": "2020-06-02T07:26:33Z", "commit": {"oid": "0b1ee857f939cbc418252f8a68511f0042c2b891"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c763a1652f28ea106c2c1cc8590344945fcd8074", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/c763a1652f28ea106c2c1cc8590344945fcd8074", "committedDate": "2020-06-02T14:33:27Z", "message": "Implement SearchCommentsAction and clean up unused action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3544b2a4bc1dba9f34f9b5db2276e0789486079f", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/3544b2a4bc1dba9f34f9b5db2276e0789486079f", "committedDate": "2020-06-03T04:04:13Z", "message": "Implement logical skeleton for data transform"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "841e03ee94e91f92abc82e011c880667ad9b6554", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/841e03ee94e91f92abc82e011c880667ad9b6554", "committedDate": "2020-06-03T15:09:40Z", "message": "Implement data transform to output logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/f493fc3a9385317f0c2932f0d88249eef44d8487", "committedDate": "2020-06-03T15:10:09Z", "message": "Fix checkstyle errors for SearchCommentsAction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzOTQwMDg5", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-423940089", "createdAt": "2020-06-03T21:11:16Z", "commit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxMToxNlrOGetvIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxOTowNFrOGet-pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1OTgwOQ==", "bodyText": "There is a nice builder for ResponseOutput merged recently. You can take advantage on that.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434859809", "createdAt": "2020-06-03T21:11:16Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MDYyNA==", "bodyText": "Note the indentation here.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434860624", "createdAt": "2020-06-03T21:12:46Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,\n+                                              FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(new CommentOutput(comment, comment.commentGiver,\n+                    bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail)));\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getStudentComment(List<FeedbackResponseCommentAttributes> comments,\n+                                     FeedbackResponseCommentSearchResultBundle bundle) {\n+        for (String email : bundle.instructorEmails) {\n+            bundle.commentGiverEmailToNameTable.remove(email);\n+        }\n+        Optional<FeedbackResponseCommentAttributes> optComment = comments.stream().filter(c ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MTU0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                   String questionStatistics, List<ResponseOutput> responses) {\n          \n          \n            \n                                   String questionStatistics, List<ResponseOutput> allResponses) {", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434861548", "createdAt": "2020-06-03T21:14:40Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "diffHunk": "@@ -235,6 +237,13 @@ private static String removeAnonymousHash(String identifier) {\n             this.questionStatistics = questionStatistics;\n         }\n \n+        QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes,\n+                       String questionStatistics, List<ResponseOutput> responses) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjE5MQ==", "bodyText": "What is student comment? Do you mean ResponseComment? ParticipantComment\uff1f", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434862191", "createdAt": "2020-06-03T21:15:55Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,\n+                                              FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(new CommentOutput(comment, comment.commentGiver,\n+                    bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail)));\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getStudentComment(List<FeedbackResponseCommentAttributes> comments,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjUwNA==", "bodyText": "Instructor comment?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434862504", "createdAt": "2020-06-03T21:16:34Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2Mzc4Mw==", "bodyText": "The reduction is to find participant comment? You should use isCommentFromFeedbackParticipant() instead?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434863783", "createdAt": "2020-06-03T21:19:04Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,\n+                                              FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(new CommentOutput(comment, comment.commentGiver,\n+                    bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail)));\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getStudentComment(List<FeedbackResponseCommentAttributes> comments,\n+                                     FeedbackResponseCommentSearchResultBundle bundle) {\n+        for (String email : bundle.instructorEmails) {\n+            bundle.commentGiverEmailToNameTable.remove(email);\n+        }\n+        Optional<FeedbackResponseCommentAttributes> optComment = comments.stream().filter(c ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MDYyNA=="}, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "112636d9bfa4af327717a4ff4296dbd091303c16", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/112636d9bfa4af327717a4ff4296dbd091303c16", "committedDate": "2020-06-04T01:51:23Z", "message": "Utilise builder methods in SessionResultsData\n\n# Conflicts:\n#\tsrc/main/java/teammates/ui/webapi/output/SessionResultsData.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a57439132b3515e51c953bc044623d5010ec68f7", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/a57439132b3515e51c953bc044623d5010ec68f7", "committedDate": "2020-06-04T02:04:22Z", "message": "Fix non executing test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDkyMDkz", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-424092093", "createdAt": "2020-06-04T04:22:51Z", "commit": {"oid": "a57439132b3515e51c953bc044623d5010ec68f7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDk0NjYz", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-424094663", "createdAt": "2020-06-04T04:32:04Z", "commit": {"oid": "a57439132b3515e51c953bc044623d5010ec68f7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDozMjowNFrOGe1d8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDozNjoyNlrOGe1iHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4NjQ4Mg==", "bodyText": "The backend should have no knowledge about what the data is going to be used so we should not mention here. Instead, mention what the action does.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434986482", "createdAt": "2020-06-04T04:32:04Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/action/SearchCommentsAction.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package teammates.ui.webapi.action;\n+\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.UnauthorizedAccessException;\n+import teammates.common.util.Const;\n+import teammates.ui.webapi.output.CommentSearchResultsData;\n+\n+/**\n+ * Action: Showing the InstructorSearchPage for an instructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57439132b3515e51c953bc044623d5010ec68f7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4Njk5Mg==", "bodyText": "If you are not using questionStatistics why define it here in the first place?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434986992", "createdAt": "2020-06-04T04:34:00Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "diffHunk": "@@ -337,6 +337,13 @@ private static String getRecipientNameOfResponse(FeedbackResponseAttributes resp\n             this.questionStatistics = questionStatistics;\n         }\n \n+        protected QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes, String questionStatistics,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57439132b3515e51c953bc044623d5010ec68f7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4NzI1NQ==", "bodyText": "Follow good indentation here? Each line should only have one withXX?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434987255", "createdAt": "2020-06-04T04:35:12Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(ResponseOutput.builder().withResponseId(response.getId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57439132b3515e51c953bc044623d5010ec68f7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4NzU1MQ==", "bodyText": "Why we are not filtering out participantComment here?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434987551", "createdAt": "2020-06-04T04:36:26Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(ResponseOutput.builder().withResponseId(response.getId())\n+                    .withGiver(response.giver).withGiverSection(response.giverSection)\n+                    .withRecipient(response.recipient).withRecipientSection(response.recipientSection)\n+                    .withParticipantComment(getParticipantComment(bundle.comments.get(response.getId()), bundle))\n+                    .withInstructorComments(getInstructorComments(bundle.comments.get(response.getId()), bundle))\n+                    .build());\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> getInstructorComments(List<FeedbackResponseCommentAttributes> comments,\n+                                                      FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(CommentOutput.builder(comment)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57439132b3515e51c953bc044623d5010ec68f7"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d06ad5a8a14be7d8c3062b30383bac6ed345d8eb", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d06ad5a8a14be7d8c3062b30383bac6ed345d8eb", "committedDate": "2020-06-04T05:04:45Z", "message": "Clean up code style and documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a", "committedDate": "2020-06-04T05:14:34Z", "message": "Fix imports for search action test files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTExOTgw", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-424111980", "createdAt": "2020-06-04T05:28:07Z", "commit": {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToyODowOFrOGe2T8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToyODowOFrOGe2T8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMDMwNQ==", "bodyText": "Maybe we can break up this one-liner for better readability?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435000305", "createdAt": "2020-06-04T05:28:08Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTE1MTU0", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-424115154", "createdAt": "2020-06-04T05:37:08Z", "commit": {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNTozNzowOFrOGe2eGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNTozNzowOFrOGe2eGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMjkwNw==", "bodyText": "Since this method has the potential to return null, it could be better to have a bit Javadoc to explain when we will get CommentOutput and when will it be null?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435002907", "createdAt": "2020-06-04T05:37:08Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(ResponseOutput.builder()\n+                    .withResponseId(response.getId())\n+                    .withGiver(response.giver)\n+                    .withGiverSection(response.giverSection)\n+                    .withRecipient(response.recipient)\n+                    .withRecipientSection(response.recipientSection)\n+                    .withParticipantComment(getParticipantComment(bundle.comments.get(response.getId()), bundle))\n+                    .withInstructorComments(getInstructorComments(bundle.comments.get(response.getId()), bundle))\n+                    .build());\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> getInstructorComments(List<FeedbackResponseCommentAttributes> comments,\n+                                                      FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            if (comment.isCommentFromFeedbackParticipant()) {\n+                continue;\n+            }\n+            output.add(CommentOutput.builder(comment)\n+                    .withCommentGiver(comment.commentGiver)\n+                    .withLastEditorName(bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail))\n+                    .build());\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getParticipantComment(List<FeedbackResponseCommentAttributes> comments,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTI0NTQw", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-424124540", "createdAt": "2020-06-04T06:02:44Z", "commit": {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02bf871bc490151cd0f1c949329b94abcf94c876", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/02bf871bc490151cd0f1c949329b94abcf94c876", "committedDate": "2020-06-04T07:33:34Z", "message": "Add documentation to explain null CommentOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/5a7569ea269a5c906dc9d90ce844fe265a15c8f1", "committedDate": "2020-06-04T08:24:55Z", "message": "Add response details when building ResponseOutput"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjI2MzU3", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-424226357", "createdAt": "2020-06-04T08:40:40Z", "commit": {"oid": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDAyOTcz", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-424402973", "createdAt": "2020-06-04T12:45:43Z", "commit": {"oid": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0NTo0M1rOGfD_wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0OToyOVrOGfEIUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNDUxMg==", "bodyText": "The class shouldn't care where it gets the mapping details from.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435224512", "createdAt": "2020-06-04T12:45:43Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java", "diffHunk": "@@ -13,17 +13,27 @@\n \n /**\n  * The search result bundle for {@link FeedbackResponseCommentAttributes}.\n+ * Mapping details retrieved from {@link teammates.storage.search.FeedbackResponseCommentSearchDocument#fromResults}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNDg2NQ==", "bodyText": "Use proper javadoc instead of code comments.\n/**\n * Session name to session maps.\n */\npublic Map<String, FeedbackSessionAttributes> sessions = new HashMap<>();", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435224865", "createdAt": "2020-06-04T12:46:18Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java", "diffHunk": "@@ -13,17 +13,27 @@\n \n /**\n  * The search result bundle for {@link FeedbackResponseCommentAttributes}.\n+ * Mapping details retrieved from {@link teammates.storage.search.FeedbackResponseCommentSearchDocument#fromResults}.\n  */\n public class FeedbackResponseCommentSearchResultBundle extends SearchResultBundle {\n \n-    public Map<String, List<FeedbackResponseCommentAttributes>> comments = new HashMap<>();\n-    public Map<String, List<FeedbackResponseAttributes>> responses = new HashMap<>();\n-    public Map<String, List<FeedbackQuestionAttributes>> questions = new HashMap<>();\n+    // session name to session map", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNjcwNw==", "bodyText": "Normally I would say that this shouldn't be included as it is not in the scope of the issue, but I will close one eye this time.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435226707", "createdAt": "2020-06-04T12:49:29Z", "author": {"login": "wkurniawan07"}, "path": "src/test/java/teammates/test/cases/webapi/SearchStudentsActionTest.java", "diffHunk": "@@ -1,6 +1,6 @@\n package teammates.test.cases.webapi;\n \n-import org.junit.Test;\n+import org.testng.annotations.Test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5c44541eb36e007d35d580279ee7f817cef4848", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/b5c44541eb36e007d35d580279ee7f817cef4848", "committedDate": "2020-06-05T04:04:52Z", "message": "Convert code comments to javadocs and fix name email mismatch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b07be0513a3ee2b9df0fc56c7a953dbf1672678", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/7b07be0513a3ee2b9df0fc56c7a953dbf1672678", "committedDate": "2020-06-05T05:47:57Z", "message": "Add unit tests, change access to instructors only"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDI1Njgz", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-425025683", "createdAt": "2020-06-05T06:26:11Z", "commit": {"oid": "7b07be0513a3ee2b9df0fc56c7a953dbf1672678"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d4461abea7f687d0178d7761310bb1222e91443", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/0d4461abea7f687d0178d7761310bb1222e91443", "committedDate": "2020-06-05T07:07:53Z", "message": "Merge branch 'master' into 10140-search"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDcyMjA1", "url": "https://github.com/TEAMMATES/teammates/pull/10150#pullrequestreview-425072205", "createdAt": "2020-06-05T07:49:00Z", "commit": {"oid": "0d4461abea7f687d0178d7761310bb1222e91443"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4332, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}