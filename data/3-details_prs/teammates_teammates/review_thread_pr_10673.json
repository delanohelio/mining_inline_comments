{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTE1Mzky", "number": 10673, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMjo1Mzo1M1rOEivLxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMjo1Mzo1M1rOEivLxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODYwMTAyOnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/pageobjects/InstructorFeedbackEditPage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMjo1Mzo1M1rOHQx_Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMjo1Mzo1M1rOHQx_Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1ODI5NA==", "bodyText": "Is there a better selector here? While this works, having to rely on the Angular component name is not preferred.", "url": "https://github.com/TEAMMATES/teammates/pull/10673#discussion_r487358294", "createdAt": "2020-09-12T02:53:53Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/pageobjects/InstructorFeedbackEditPage.java", "diffHunk": "@@ -911,4 +963,109 @@ private void clickSaveNewQuestionButton() {\n     private WebElement getRecommendedTextLengthField(int questionNum) {\n         return getQuestionForm(questionNum).findElement(By.id(\"recommended-length\"));\n     }\n+\n+    private WebElement getWeightCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"weights-checkbox\"));\n+    }\n+\n+    private String getDoubleString(Double value) {\n+        return value % 1 == 0 ? Integer.toString(value.intValue()) : Double.toString(value);\n+    }\n+\n+    private WebElement getRubricRow(int questionNum, int rowNumber) {\n+        return getQuestionForm(questionNum).findElements(By.cssSelector(\"tm-rubric-question-edit-details-form tr\"))\n+                .get(rowNumber - 1);\n+    }\n+\n+    private List<WebElement> getRubricChoiceInputs(int questionNum) {\n+        return getRubricRow(questionNum, 1).findElements(By.tagName(\"input\"));\n+    }\n+\n+    private List<WebElement> getRubricTextareas(int questionNum, int rowNum) {\n+        return getRubricRow(questionNum, rowNum).findElements(By.tagName(\"textarea\"));\n+    }\n+\n+    private List<WebElement> getRubricWeights(int questionNum, int rowNum) {\n+        return getRubricRow(questionNum, rowNum).findElements(By.tagName(\"input\"));\n+    }\n+\n+    private WebElement getRubricDeleteSubQnBtn(int questionNum, int rowNum) {\n+        return getRubricRow(questionNum, rowNum).findElement(By.id(\"btn-delete-subquestion\"));\n+    }\n+\n+    private WebElement getRubricDeleteChoiceBtn(int questionNum, int colNum) {\n+        return getRubricRow(questionNum, getNumRubricRows(questionNum)).findElements(By.id(\"btn-delete-choice\")).get(colNum);\n+    }\n+\n+    private int getNumRubricRows(int questionNum) {\n+        return getQuestionForm(questionNum).findElements(By.cssSelector(\"tm-rubric-question-edit-details-form tr\")).size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0d2894b3468430fd8b4d1993060753ed904856"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3529, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}