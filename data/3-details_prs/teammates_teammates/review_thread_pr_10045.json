{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NzU1NjE1", "number": 10045, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTowNToxOVrOD9Tjyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTowNzozNFrOD9TnTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjEwMTg2OnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCourseEditPageE2ETest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTowNToxOVrOGWuEig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjo1MDo0OFrOGYU-hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3NjY4Mg==", "bodyText": "Why is this status message hardcoded? I think it should be programatically derived.\nIf not, the test is brittle and any small change in the message (an extra space etc.) will break the E2E tests.\nThe same applies to the other status messages.", "url": "https://github.com/TEAMMATES/teammates/pull/10045#discussion_r426476682", "createdAt": "2020-05-18T09:05:19Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCourseEditPageE2ETest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.ZoneId;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCourseEditPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSE_EDIT_PAGE}.\n+ */\n+public class InstructorCourseEditPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes course;\n+    InstructorAttributes[] instructors = new InstructorAttributes[5];\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCourseEditPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        course = testData.courses.get(\"InsCrsEdit.CS2104\");\n+        instructors[0] = testData.instructors.get(\"InsCrsEdit.helper\");\n+        instructors[1] = testData.instructors.get(\"InsCrsEdit.manager\");\n+        instructors[2] = testData.instructors.get(\"InsCrsEdit.observer\");\n+        instructors[3] = testData.instructors.get(\"InsCrsEdit.coowner\");\n+        instructors[4] = testData.instructors.get(\"InsCrsEdit.tutor\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        ______TS(\"verify cannot edit without privilege\");\n+        // log in as instructor with no edit privilege\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[2].googleId)\n+                .withCourseId(course.getId());\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCourseEditPage editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseNotEditable();\n+        editPage.verifyInstructorsNotEditable();\n+        editPage.verifyAddInstructorNotAllowed();\n+\n+        ______TS(\"verify loaded data\");\n+        // re-log in as instructor with edit privilege\n+        url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[3].googleId)\n+                .withCourseId(course.getId());\n+        editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseDetails(course);\n+\n+        editPage.verifyInstructorDetails(1, instructors[0]);\n+        editPage.verifyInstructorDetails(2, instructors[1]);\n+        editPage.verifyInstructorDetails(3, instructors[2]);\n+        editPage.verifyInstructorDetails(4, instructors[3]);\n+        editPage.verifyInstructorDetails(5, instructors[4]);\n+\n+        ______TS(\"add instructor\");\n+        InstructorAttributes newInstructor = InstructorAttributes\n+                .builder(course.getId(), \"InsCrsEdit.test@gmail.tmt\")\n+                .withName(\"Teammates Test\")\n+                .withIsDisplayedToStudents(true)\n+                .withDisplayedName(\"Instructor\")\n+                .withRole(\"Tutor\")\n+                .build();\n+\n+        editPage.addInstructor(newInstructor);\n+        editPage.verifyStatusMessage(\"\\\"The instructor Teammates Test has been added successfully. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9996ea593276c862e3cc6f02b847242b27c5ffe9"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MTkwNg==", "bodyText": "This is actually a grey area. On one hand, what you said is of course true. However, on the other hand, this is a black-box test, meaning that the test code should not actually know that there exists some constant in the code that holds that string.\nEither way is acceptable.", "url": "https://github.com/TEAMMATES/teammates/pull/10045#discussion_r426571906", "createdAt": "2020-05-18T11:57:37Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCourseEditPageE2ETest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.ZoneId;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCourseEditPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSE_EDIT_PAGE}.\n+ */\n+public class InstructorCourseEditPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes course;\n+    InstructorAttributes[] instructors = new InstructorAttributes[5];\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCourseEditPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        course = testData.courses.get(\"InsCrsEdit.CS2104\");\n+        instructors[0] = testData.instructors.get(\"InsCrsEdit.helper\");\n+        instructors[1] = testData.instructors.get(\"InsCrsEdit.manager\");\n+        instructors[2] = testData.instructors.get(\"InsCrsEdit.observer\");\n+        instructors[3] = testData.instructors.get(\"InsCrsEdit.coowner\");\n+        instructors[4] = testData.instructors.get(\"InsCrsEdit.tutor\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        ______TS(\"verify cannot edit without privilege\");\n+        // log in as instructor with no edit privilege\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[2].googleId)\n+                .withCourseId(course.getId());\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCourseEditPage editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseNotEditable();\n+        editPage.verifyInstructorsNotEditable();\n+        editPage.verifyAddInstructorNotAllowed();\n+\n+        ______TS(\"verify loaded data\");\n+        // re-log in as instructor with edit privilege\n+        url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[3].googleId)\n+                .withCourseId(course.getId());\n+        editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseDetails(course);\n+\n+        editPage.verifyInstructorDetails(1, instructors[0]);\n+        editPage.verifyInstructorDetails(2, instructors[1]);\n+        editPage.verifyInstructorDetails(3, instructors[2]);\n+        editPage.verifyInstructorDetails(4, instructors[3]);\n+        editPage.verifyInstructorDetails(5, instructors[4]);\n+\n+        ______TS(\"add instructor\");\n+        InstructorAttributes newInstructor = InstructorAttributes\n+                .builder(course.getId(), \"InsCrsEdit.test@gmail.tmt\")\n+                .withName(\"Teammates Test\")\n+                .withIsDisplayedToStudents(true)\n+                .withDisplayedName(\"Instructor\")\n+                .withRole(\"Tutor\")\n+                .build();\n+\n+        editPage.addInstructor(newInstructor);\n+        editPage.verifyStatusMessage(\"\\\"The instructor Teammates Test has been added successfully. \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3NjY4Mg=="}, "originalCommit": {"oid": "9996ea593276c862e3cc6f02b847242b27c5ffe9"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2MjY5NQ==", "bodyText": "I did not use the Const values as they are Deprecated. I have added tried to use variables instead for names, emails etc in the status message instead to try to make is slightly less brittle.", "url": "https://github.com/TEAMMATES/teammates/pull/10045#discussion_r428162695", "createdAt": "2020-05-20T16:50:48Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCourseEditPageE2ETest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.ZoneId;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCourseEditPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSE_EDIT_PAGE}.\n+ */\n+public class InstructorCourseEditPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes course;\n+    InstructorAttributes[] instructors = new InstructorAttributes[5];\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCourseEditPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        course = testData.courses.get(\"InsCrsEdit.CS2104\");\n+        instructors[0] = testData.instructors.get(\"InsCrsEdit.helper\");\n+        instructors[1] = testData.instructors.get(\"InsCrsEdit.manager\");\n+        instructors[2] = testData.instructors.get(\"InsCrsEdit.observer\");\n+        instructors[3] = testData.instructors.get(\"InsCrsEdit.coowner\");\n+        instructors[4] = testData.instructors.get(\"InsCrsEdit.tutor\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        ______TS(\"verify cannot edit without privilege\");\n+        // log in as instructor with no edit privilege\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[2].googleId)\n+                .withCourseId(course.getId());\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCourseEditPage editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseNotEditable();\n+        editPage.verifyInstructorsNotEditable();\n+        editPage.verifyAddInstructorNotAllowed();\n+\n+        ______TS(\"verify loaded data\");\n+        // re-log in as instructor with edit privilege\n+        url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[3].googleId)\n+                .withCourseId(course.getId());\n+        editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseDetails(course);\n+\n+        editPage.verifyInstructorDetails(1, instructors[0]);\n+        editPage.verifyInstructorDetails(2, instructors[1]);\n+        editPage.verifyInstructorDetails(3, instructors[2]);\n+        editPage.verifyInstructorDetails(4, instructors[3]);\n+        editPage.verifyInstructorDetails(5, instructors[4]);\n+\n+        ______TS(\"add instructor\");\n+        InstructorAttributes newInstructor = InstructorAttributes\n+                .builder(course.getId(), \"InsCrsEdit.test@gmail.tmt\")\n+                .withName(\"Teammates Test\")\n+                .withIsDisplayedToStudents(true)\n+                .withDisplayedName(\"Instructor\")\n+                .withRole(\"Tutor\")\n+                .build();\n+\n+        editPage.addInstructor(newInstructor);\n+        editPage.verifyStatusMessage(\"\\\"The instructor Teammates Test has been added successfully. \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3NjY4Mg=="}, "originalCommit": {"oid": "9996ea593276c862e3cc6f02b847242b27c5ffe9"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjEwODExOnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCourseEditPageE2ETest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTowNjo1MlrOGWuIhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjo1MToxOFrOGYU_qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3NzcwMg==", "bodyText": "In this test case, we add a new instructor and verify that the frontend has the instructor's details. However, the backend is not verified right? We should also check that the database has the new instructor in this course.", "url": "https://github.com/TEAMMATES/teammates/pull/10045#discussion_r426477702", "createdAt": "2020-05-18T09:06:52Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCourseEditPageE2ETest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.ZoneId;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCourseEditPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSE_EDIT_PAGE}.\n+ */\n+public class InstructorCourseEditPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes course;\n+    InstructorAttributes[] instructors = new InstructorAttributes[5];\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCourseEditPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        course = testData.courses.get(\"InsCrsEdit.CS2104\");\n+        instructors[0] = testData.instructors.get(\"InsCrsEdit.helper\");\n+        instructors[1] = testData.instructors.get(\"InsCrsEdit.manager\");\n+        instructors[2] = testData.instructors.get(\"InsCrsEdit.observer\");\n+        instructors[3] = testData.instructors.get(\"InsCrsEdit.coowner\");\n+        instructors[4] = testData.instructors.get(\"InsCrsEdit.tutor\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        ______TS(\"verify cannot edit without privilege\");\n+        // log in as instructor with no edit privilege\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[2].googleId)\n+                .withCourseId(course.getId());\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCourseEditPage editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseNotEditable();\n+        editPage.verifyInstructorsNotEditable();\n+        editPage.verifyAddInstructorNotAllowed();\n+\n+        ______TS(\"verify loaded data\");\n+        // re-log in as instructor with edit privilege\n+        url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[3].googleId)\n+                .withCourseId(course.getId());\n+        editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseDetails(course);\n+\n+        editPage.verifyInstructorDetails(1, instructors[0]);\n+        editPage.verifyInstructorDetails(2, instructors[1]);\n+        editPage.verifyInstructorDetails(3, instructors[2]);\n+        editPage.verifyInstructorDetails(4, instructors[3]);\n+        editPage.verifyInstructorDetails(5, instructors[4]);\n+\n+        ______TS(\"add instructor\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9996ea593276c862e3cc6f02b847242b27c5ffe9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2Mjk4NQ==", "bodyText": "Added some methods with Backdoor to do some verification for backend", "url": "https://github.com/TEAMMATES/teammates/pull/10045#discussion_r428162985", "createdAt": "2020-05-20T16:51:18Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCourseEditPageE2ETest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.ZoneId;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCourseEditPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSE_EDIT_PAGE}.\n+ */\n+public class InstructorCourseEditPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes course;\n+    InstructorAttributes[] instructors = new InstructorAttributes[5];\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCourseEditPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        course = testData.courses.get(\"InsCrsEdit.CS2104\");\n+        instructors[0] = testData.instructors.get(\"InsCrsEdit.helper\");\n+        instructors[1] = testData.instructors.get(\"InsCrsEdit.manager\");\n+        instructors[2] = testData.instructors.get(\"InsCrsEdit.observer\");\n+        instructors[3] = testData.instructors.get(\"InsCrsEdit.coowner\");\n+        instructors[4] = testData.instructors.get(\"InsCrsEdit.tutor\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        ______TS(\"verify cannot edit without privilege\");\n+        // log in as instructor with no edit privilege\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[2].googleId)\n+                .withCourseId(course.getId());\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCourseEditPage editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseNotEditable();\n+        editPage.verifyInstructorsNotEditable();\n+        editPage.verifyAddInstructorNotAllowed();\n+\n+        ______TS(\"verify loaded data\");\n+        // re-log in as instructor with edit privilege\n+        url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[3].googleId)\n+                .withCourseId(course.getId());\n+        editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseDetails(course);\n+\n+        editPage.verifyInstructorDetails(1, instructors[0]);\n+        editPage.verifyInstructorDetails(2, instructors[1]);\n+        editPage.verifyInstructorDetails(3, instructors[2]);\n+        editPage.verifyInstructorDetails(4, instructors[3]);\n+        editPage.verifyInstructorDetails(5, instructors[4]);\n+\n+        ______TS(\"add instructor\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3NzcwMg=="}, "originalCommit": {"oid": "9996ea593276c862e3cc6f02b847242b27c5ffe9"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjExMDg2OnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCourseEditPageE2ETest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTowNzozNFrOGWuKPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTowNzozNFrOGWuKPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3ODE0MQ==", "bodyText": "Same for this test case. The backend is not verified. Actually this point holds throughout for the other test cases!", "url": "https://github.com/TEAMMATES/teammates/pull/10045#discussion_r426478141", "createdAt": "2020-05-18T09:07:34Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCourseEditPageE2ETest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.ZoneId;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCourseEditPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSE_EDIT_PAGE}.\n+ */\n+public class InstructorCourseEditPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes course;\n+    InstructorAttributes[] instructors = new InstructorAttributes[5];\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCourseEditPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        course = testData.courses.get(\"InsCrsEdit.CS2104\");\n+        instructors[0] = testData.instructors.get(\"InsCrsEdit.helper\");\n+        instructors[1] = testData.instructors.get(\"InsCrsEdit.manager\");\n+        instructors[2] = testData.instructors.get(\"InsCrsEdit.observer\");\n+        instructors[3] = testData.instructors.get(\"InsCrsEdit.coowner\");\n+        instructors[4] = testData.instructors.get(\"InsCrsEdit.tutor\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        ______TS(\"verify cannot edit without privilege\");\n+        // log in as instructor with no edit privilege\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[2].googleId)\n+                .withCourseId(course.getId());\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCourseEditPage editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseNotEditable();\n+        editPage.verifyInstructorsNotEditable();\n+        editPage.verifyAddInstructorNotAllowed();\n+\n+        ______TS(\"verify loaded data\");\n+        // re-log in as instructor with edit privilege\n+        url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSE_EDIT_PAGE)\n+                .withUserId(instructors[3].googleId)\n+                .withCourseId(course.getId());\n+        editPage = AppPage.getNewPageInstance(browser, url, InstructorCourseEditPage.class);\n+\n+        editPage.verifyCourseDetails(course);\n+\n+        editPage.verifyInstructorDetails(1, instructors[0]);\n+        editPage.verifyInstructorDetails(2, instructors[1]);\n+        editPage.verifyInstructorDetails(3, instructors[2]);\n+        editPage.verifyInstructorDetails(4, instructors[3]);\n+        editPage.verifyInstructorDetails(5, instructors[4]);\n+\n+        ______TS(\"add instructor\");\n+        InstructorAttributes newInstructor = InstructorAttributes\n+                .builder(course.getId(), \"InsCrsEdit.test@gmail.tmt\")\n+                .withName(\"Teammates Test\")\n+                .withIsDisplayedToStudents(true)\n+                .withDisplayedName(\"Instructor\")\n+                .withRole(\"Tutor\")\n+                .build();\n+\n+        editPage.addInstructor(newInstructor);\n+        editPage.verifyStatusMessage(\"\\\"The instructor Teammates Test has been added successfully. \"\n+                + \"An email containing how to 'join' this course will be sent to InsCrsEdit.test@gmail.tmt\"\n+                + \" in a few minutes.\\\"\");\n+        editPage.verifyInstructorDetails(6, newInstructor);\n+\n+        ______TS(\"resend invite\");\n+        editPage.resendInstructorInvite(6);\n+        editPage.verifyStatusMessage(\"An email has been sent to InsCrsEdit.test@gmail.tmt\");\n+\n+        ______TS(\"edit instructor\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9996ea593276c862e3cc6f02b847242b27c5ffe9"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3963, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}