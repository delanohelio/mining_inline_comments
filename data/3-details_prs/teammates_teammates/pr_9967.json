{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Nzc2NzIx", "number": 9967, "title": "[#9956] Make dataBundle return the json of actual objects created in backend", "bodyText": "Fixes #9956 and #9965\nOutline of Solution\nputDataBundleAction now returns the JSON of the updated data bundle as a response. Related methods have been updated to return the DataBundle object itself, and the method persistDataBundle now updates all the values in the dataBundle. Test classes that makes use of dataBundles have their logic modified to support this change.\nThis change allows test classes that uses backdoor, to have access to updated dataBundle files.", "createdAt": "2020-02-24T01:13:44Z", "url": "https://github.com/TEAMMATES/teammates/pull/9967", "merged": true, "mergeCommit": {"oid": "44e08946ca0b1f3cbc91a1d8f2d758449dfda925"}, "closed": true, "closedAt": "2020-03-29T04:00:27Z", "author": {"login": "daekoon"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHMQTMgH2gAyMzc4Nzc2NzIxOmQ4ODM0M2RkNDRiYjIxYWRjYzYzODI4NzJlNzA5M2Q3MmJjMzVkM2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRs6dKAH2gAyMzc4Nzc2NzIxOmViNGNmZGM3MWY4NmYzOWZhYjg0MzBkYjljMmY5ZmY5ODkxODVmMzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d88343dd44bb21adcc6382872e7093d72bc35d3d", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d88343dd44bb21adcc6382872e7093d72bc35d3d", "committedDate": "2020-02-23T17:20:13Z", "message": "Make persistDataBundle return updated databundle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4d08a6b736b6cb980d26053dde7b8ead2b7a0c0", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d4d08a6b736b6cb980d26053dde7b8ead2b7a0c0", "committedDate": "2020-02-23T19:57:50Z", "message": "Add test for dataBundle updating its values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b25516c6e6fa72901d11b702a8fa8cc89904947", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/3b25516c6e6fa72901d11b702a8fa8cc89904947", "committedDate": "2020-02-23T20:49:43Z", "message": "Make putDataBundle return updated json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9441f7249adfe338fcdcb9579ac377b591338bef", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/9441f7249adfe338fcdcb9579ac377b591338bef", "committedDate": "2020-02-23T22:28:32Z", "message": "Make LnP tests use updated data bundles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca071e6913402dcccdd5d6cf45b37ce1b2e0019a", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ca071e6913402dcccdd5d6cf45b37ce1b2e0019a", "committedDate": "2020-02-24T00:13:48Z", "message": "Fix tests and faulty logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69aff7d5c4411dd8f73bb23ed6ded49983dbd11a", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/69aff7d5c4411dd8f73bb23ed6ded49983dbd11a", "committedDate": "2020-02-24T01:02:03Z", "message": "Lint fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75545c56e6df6b79635c05a4f87d0e084e361213", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/75545c56e6df6b79635c05a4f87d0e084e361213", "committedDate": "2020-02-24T01:24:04Z", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTQ5MTYy", "url": "https://github.com/TEAMMATES/teammates/pull/9967#pullrequestreview-363149162", "createdAt": "2020-02-24T02:28:10Z", "commit": {"oid": "75545c56e6df6b79635c05a4f87d0e084e361213"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwMjoyODoxMFrOFtUklA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwMjozMDoxMlrOFtUliQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzI4NA==", "bodyText": "seems the logic can be simplified here?\nIs \"adding all accounts from 'newAccounts' that already exist in oldAccounts?\"", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067284", "createdAt": "2020-02-24T02:28:10Z", "author": {"login": "junming403"}, "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75545c56e6df6b79635c05a4f87d0e084e361213"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzM3NQ==", "bodyText": "same here\uff1f", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067375", "createdAt": "2020-02-24T02:28:50Z", "author": {"login": "junming403"}, "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75545c56e6df6b79635c05a4f87d0e084e361213"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzM5Mw==", "bodyText": "same here", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067393", "createdAt": "2020-02-24T02:29:00Z", "author": {"login": "junming403"}, "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {\n+            String key = entry.getKey();\n+            StudentProfileAttributes value = entry.getValue();\n+\n+            for (StudentProfileAttributes cur : newProfiles) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.shortName, value.shortName)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.gender, value.gender)\n+                            && customEquals(cur.pictureKey, value.pictureKey)) {\n+                    profiles.put(key, cur);\n+                    newProfiles.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.profiles = profiles;\n+    }\n+\n+    private void updateDataBundleCourses(DataBundle dataBundle, List<CourseAttributes> newCourses) {\n+        Map<String, CourseAttributes> oldCourses = dataBundle.courses;\n+        Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, CourseAttributes> entry : oldCourses.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75545c56e6df6b79635c05a4f87d0e084e361213"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzQwNw==", "bodyText": "same here", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067407", "createdAt": "2020-02-24T02:29:11Z", "author": {"login": "junming403"}, "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {\n+            String key = entry.getKey();\n+            StudentProfileAttributes value = entry.getValue();\n+\n+            for (StudentProfileAttributes cur : newProfiles) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.shortName, value.shortName)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.gender, value.gender)\n+                            && customEquals(cur.pictureKey, value.pictureKey)) {\n+                    profiles.put(key, cur);\n+                    newProfiles.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.profiles = profiles;\n+    }\n+\n+    private void updateDataBundleCourses(DataBundle dataBundle, List<CourseAttributes> newCourses) {\n+        Map<String, CourseAttributes> oldCourses = dataBundle.courses;\n+        Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, CourseAttributes> entry : oldCourses.entrySet()) {\n+            String key = entry.getKey();\n+            CourseAttributes value = entry.getValue();\n+\n+            for (CourseAttributes cur : newCourses) {\n+                if (customEquals(cur.getId(), value.getId())\n+                            && customEquals(cur.getName(), value.getName())) {\n+                    courses.put(key, cur);\n+                    newCourses.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.courses = courses;\n+    }\n+\n+    private void updateDataBundleInstructors(DataBundle dataBundle, List<InstructorAttributes> newInstructors) {\n+        Map<String, InstructorAttributes> oldInstructors = dataBundle.instructors;\n+        Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, InstructorAttributes> entry : oldInstructors.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75545c56e6df6b79635c05a4f87d0e084e361213"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzQ5Nw==", "bodyText": "same here", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067497", "createdAt": "2020-02-24T02:30:00Z", "author": {"login": "junming403"}, "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {\n+            String key = entry.getKey();\n+            StudentProfileAttributes value = entry.getValue();\n+\n+            for (StudentProfileAttributes cur : newProfiles) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.shortName, value.shortName)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.gender, value.gender)\n+                            && customEquals(cur.pictureKey, value.pictureKey)) {\n+                    profiles.put(key, cur);\n+                    newProfiles.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.profiles = profiles;\n+    }\n+\n+    private void updateDataBundleCourses(DataBundle dataBundle, List<CourseAttributes> newCourses) {\n+        Map<String, CourseAttributes> oldCourses = dataBundle.courses;\n+        Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, CourseAttributes> entry : oldCourses.entrySet()) {\n+            String key = entry.getKey();\n+            CourseAttributes value = entry.getValue();\n+\n+            for (CourseAttributes cur : newCourses) {\n+                if (customEquals(cur.getId(), value.getId())\n+                            && customEquals(cur.getName(), value.getName())) {\n+                    courses.put(key, cur);\n+                    newCourses.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.courses = courses;\n+    }\n+\n+    private void updateDataBundleInstructors(DataBundle dataBundle, List<InstructorAttributes> newInstructors) {\n+        Map<String, InstructorAttributes> oldInstructors = dataBundle.instructors;\n+        Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, InstructorAttributes> entry : oldInstructors.entrySet()) {\n+            String key = entry.getKey();\n+            InstructorAttributes value = entry.getValue();\n+\n+            for (InstructorAttributes cur : newInstructors) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.courseId, value.courseId)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.displayedName, value.displayedName)\n+                            && customEquals(cur.role, value.role)) {\n+                    instructors.put(key, cur);\n+                    newInstructors.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.instructors = instructors;\n+    }\n+\n+    private void updateDataBundleStudents(DataBundle dataBundle, List<StudentAttributes> newStudents) {\n+        Map<String, StudentAttributes> oldStudents = dataBundle.students;\n+        Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentAttributes> entry : oldStudents.entrySet()) {\n+            String key = entry.getKey();\n+            StudentAttributes value = entry.getValue();\n+\n+            for (StudentAttributes cur : newStudents) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.course, value.course)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.team, value.team)\n+                            && customEquals(cur.section, value.section)\n+                            && customEquals(cur.comments, value.comments)) {\n+                    students.put(key, cur);\n+                    newStudents.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.students = students;\n+    }\n+\n+    private void updateDataBundleFeedbackSessions(DataBundle dataBundle,\n+            List<FeedbackSessionAttributes> newFeedbackSessions) {\n+        Map<String, FeedbackSessionAttributes> oldFeedbackSessions = dataBundle.feedbackSessions;\n+        Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackSessionAttributes> entry : oldFeedbackSessions.entrySet()) {\n+            String key = entry.getKey();\n+            FeedbackSessionAttributes value = entry.getValue();\n+\n+            for (FeedbackSessionAttributes cur : newFeedbackSessions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75545c56e6df6b79635c05a4f87d0e084e361213"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzUwOQ==", "bodyText": "same here", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067509", "createdAt": "2020-02-24T02:30:05Z", "author": {"login": "junming403"}, "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {\n+            String key = entry.getKey();\n+            StudentProfileAttributes value = entry.getValue();\n+\n+            for (StudentProfileAttributes cur : newProfiles) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.shortName, value.shortName)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.gender, value.gender)\n+                            && customEquals(cur.pictureKey, value.pictureKey)) {\n+                    profiles.put(key, cur);\n+                    newProfiles.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.profiles = profiles;\n+    }\n+\n+    private void updateDataBundleCourses(DataBundle dataBundle, List<CourseAttributes> newCourses) {\n+        Map<String, CourseAttributes> oldCourses = dataBundle.courses;\n+        Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, CourseAttributes> entry : oldCourses.entrySet()) {\n+            String key = entry.getKey();\n+            CourseAttributes value = entry.getValue();\n+\n+            for (CourseAttributes cur : newCourses) {\n+                if (customEquals(cur.getId(), value.getId())\n+                            && customEquals(cur.getName(), value.getName())) {\n+                    courses.put(key, cur);\n+                    newCourses.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.courses = courses;\n+    }\n+\n+    private void updateDataBundleInstructors(DataBundle dataBundle, List<InstructorAttributes> newInstructors) {\n+        Map<String, InstructorAttributes> oldInstructors = dataBundle.instructors;\n+        Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, InstructorAttributes> entry : oldInstructors.entrySet()) {\n+            String key = entry.getKey();\n+            InstructorAttributes value = entry.getValue();\n+\n+            for (InstructorAttributes cur : newInstructors) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.courseId, value.courseId)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.displayedName, value.displayedName)\n+                            && customEquals(cur.role, value.role)) {\n+                    instructors.put(key, cur);\n+                    newInstructors.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.instructors = instructors;\n+    }\n+\n+    private void updateDataBundleStudents(DataBundle dataBundle, List<StudentAttributes> newStudents) {\n+        Map<String, StudentAttributes> oldStudents = dataBundle.students;\n+        Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentAttributes> entry : oldStudents.entrySet()) {\n+            String key = entry.getKey();\n+            StudentAttributes value = entry.getValue();\n+\n+            for (StudentAttributes cur : newStudents) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.course, value.course)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.team, value.team)\n+                            && customEquals(cur.section, value.section)\n+                            && customEquals(cur.comments, value.comments)) {\n+                    students.put(key, cur);\n+                    newStudents.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.students = students;\n+    }\n+\n+    private void updateDataBundleFeedbackSessions(DataBundle dataBundle,\n+            List<FeedbackSessionAttributes> newFeedbackSessions) {\n+        Map<String, FeedbackSessionAttributes> oldFeedbackSessions = dataBundle.feedbackSessions;\n+        Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackSessionAttributes> entry : oldFeedbackSessions.entrySet()) {\n+            String key = entry.getKey();\n+            FeedbackSessionAttributes value = entry.getValue();\n+\n+            for (FeedbackSessionAttributes cur : newFeedbackSessions) {\n+                if (customEquals(cur.getFeedbackSessionName(), value.getFeedbackSessionName())\n+                            && customEquals(cur.getCourseId(), value.getCourseId())\n+                            && customEquals(cur.getInstructions(), value.getInstructions())\n+                            && customEquals(cur.getCreatorEmail(), value.getCreatorEmail())) {\n+                    feedbackSessions.put(key, cur);\n+                    newFeedbackSessions.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.feedbackSessions = feedbackSessions;\n+    }\n+\n+    private void updateDataBundleFeedbackQuestions(DataBundle dataBundle,\n+                List<FeedbackQuestionAttributes> createdQuestions) {\n+        Map<String, FeedbackQuestionAttributes> oldFeedbackQuestions = dataBundle.feedbackQuestions;\n+        Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackQuestionAttributes> entry : oldFeedbackQuestions.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75545c56e6df6b79635c05a4f87d0e084e361213"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzUyOQ==", "bodyText": "same here", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r383067529", "createdAt": "2020-02-24T02:30:12Z", "author": {"login": "junming403"}, "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,249 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);\n+\n+        return dataBundle;\n+\n+    }\n+\n+    private void updateDataBundleAccounts(DataBundle dataBundle, List<AccountAttributes> newAccounts) {\n+        Map<String, AccountAttributes> oldAccounts = dataBundle.accounts;\n+        Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, AccountAttributes> entry : oldAccounts.entrySet()) {\n+            String key = entry.getKey();\n+            AccountAttributes value = entry.getValue();\n+\n+            for (AccountAttributes cur : newAccounts) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)) {\n+                    accounts.put(key, cur);\n+                    newAccounts.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.accounts = accounts;\n+    }\n+\n+    private void updateDataBundleProfiles(DataBundle dataBundle, List<StudentProfileAttributes> newProfiles) {\n+        Map<String, StudentProfileAttributes> oldProfiles = dataBundle.profiles;\n+        Map<String, StudentProfileAttributes> profiles = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentProfileAttributes> entry : oldProfiles.entrySet()) {\n+            String key = entry.getKey();\n+            StudentProfileAttributes value = entry.getValue();\n+\n+            for (StudentProfileAttributes cur : newProfiles) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.shortName, value.shortName)\n+                            && customEquals(cur.institute, value.institute)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.gender, value.gender)\n+                            && customEquals(cur.pictureKey, value.pictureKey)) {\n+                    profiles.put(key, cur);\n+                    newProfiles.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.profiles = profiles;\n+    }\n+\n+    private void updateDataBundleCourses(DataBundle dataBundle, List<CourseAttributes> newCourses) {\n+        Map<String, CourseAttributes> oldCourses = dataBundle.courses;\n+        Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, CourseAttributes> entry : oldCourses.entrySet()) {\n+            String key = entry.getKey();\n+            CourseAttributes value = entry.getValue();\n+\n+            for (CourseAttributes cur : newCourses) {\n+                if (customEquals(cur.getId(), value.getId())\n+                            && customEquals(cur.getName(), value.getName())) {\n+                    courses.put(key, cur);\n+                    newCourses.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.courses = courses;\n+    }\n+\n+    private void updateDataBundleInstructors(DataBundle dataBundle, List<InstructorAttributes> newInstructors) {\n+        Map<String, InstructorAttributes> oldInstructors = dataBundle.instructors;\n+        Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, InstructorAttributes> entry : oldInstructors.entrySet()) {\n+            String key = entry.getKey();\n+            InstructorAttributes value = entry.getValue();\n+\n+            for (InstructorAttributes cur : newInstructors) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.courseId, value.courseId)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.displayedName, value.displayedName)\n+                            && customEquals(cur.role, value.role)) {\n+                    instructors.put(key, cur);\n+                    newInstructors.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.instructors = instructors;\n+    }\n+\n+    private void updateDataBundleStudents(DataBundle dataBundle, List<StudentAttributes> newStudents) {\n+        Map<String, StudentAttributes> oldStudents = dataBundle.students;\n+        Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, StudentAttributes> entry : oldStudents.entrySet()) {\n+            String key = entry.getKey();\n+            StudentAttributes value = entry.getValue();\n+\n+            for (StudentAttributes cur : newStudents) {\n+                if (customEquals(cur.email, value.email)\n+                            && customEquals(cur.name, value.name)\n+                            && customEquals(cur.course, value.course)\n+                            && customEquals(cur.googleId, value.googleId)\n+                            && customEquals(cur.team, value.team)\n+                            && customEquals(cur.section, value.section)\n+                            && customEquals(cur.comments, value.comments)) {\n+                    students.put(key, cur);\n+                    newStudents.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.students = students;\n+    }\n+\n+    private void updateDataBundleFeedbackSessions(DataBundle dataBundle,\n+            List<FeedbackSessionAttributes> newFeedbackSessions) {\n+        Map<String, FeedbackSessionAttributes> oldFeedbackSessions = dataBundle.feedbackSessions;\n+        Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackSessionAttributes> entry : oldFeedbackSessions.entrySet()) {\n+            String key = entry.getKey();\n+            FeedbackSessionAttributes value = entry.getValue();\n+\n+            for (FeedbackSessionAttributes cur : newFeedbackSessions) {\n+                if (customEquals(cur.getFeedbackSessionName(), value.getFeedbackSessionName())\n+                            && customEquals(cur.getCourseId(), value.getCourseId())\n+                            && customEquals(cur.getInstructions(), value.getInstructions())\n+                            && customEquals(cur.getCreatorEmail(), value.getCreatorEmail())) {\n+                    feedbackSessions.put(key, cur);\n+                    newFeedbackSessions.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.feedbackSessions = feedbackSessions;\n+    }\n+\n+    private void updateDataBundleFeedbackQuestions(DataBundle dataBundle,\n+                List<FeedbackQuestionAttributes> createdQuestions) {\n+        Map<String, FeedbackQuestionAttributes> oldFeedbackQuestions = dataBundle.feedbackQuestions;\n+        Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackQuestionAttributes> entry : oldFeedbackQuestions.entrySet()) {\n+            String key = entry.getKey();\n+            FeedbackQuestionAttributes value = entry.getValue();\n+\n+            for (FeedbackQuestionAttributes cur : createdQuestions) {\n+                if (customEquals(cur.feedbackSessionName, value.feedbackSessionName)\n+                            && customEquals(cur.courseId, value.courseId)\n+                            && cur.questionNumber == value.questionNumber) {\n+                    feedbackQuestions.put(key, cur);\n+                    createdQuestions.remove(cur);\n+                    break;\n+                }\n+            }\n+        }\n+        dataBundle.feedbackQuestions = feedbackQuestions;\n+    }\n+\n+    private void updateDataBundleFeedbackResponses(DataBundle dataBundle,\n+                List<FeedbackResponseAttributes> newFeedbackResponses) {\n+        Map<String, FeedbackResponseAttributes> oldFeedbackResponses = dataBundle.feedbackResponses;\n+        Map<String, FeedbackResponseAttributes> feedbackResponses = new LinkedHashMap<>();\n+\n+        for (Map.Entry<String, FeedbackResponseAttributes> entry : oldFeedbackResponses.entrySet()) {\n+            String key = entry.getKey();\n+            FeedbackResponseAttributes value = entry.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75545c56e6df6b79635c05a4f87d0e084e361213"}, "originalPosition": 226}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb13976a60b6f052e11f81a9920a3129f01b338", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ecb13976a60b6f052e11f81a9920a3129f01b338", "committedDate": "2020-02-25T17:34:20Z", "message": "Add hashcode method for related attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d86237c7cbaf4b42de851b4d370b57d0ccd9d4f", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/8d86237c7cbaf4b42de851b4d370b57d0ccd9d4f", "committedDate": "2020-02-25T23:22:06Z", "message": "Add hash and equal method for attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1a6088a75e54da4e6bb35503523a6d4d4d4881e", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/e1a6088a75e54da4e6bb35503523a6d4d4d4881e", "committedDate": "2020-03-05T08:58:28Z", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzI1Njcz", "url": "https://github.com/TEAMMATES/teammates/pull/9967#pullrequestreview-370725673", "createdAt": "2020-03-07T06:01:14Z", "commit": {"oid": "e1a6088a75e54da4e6bb35503523a6d4d4d4881e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b6146b62d1eac055f6c084dd29705ed2b1c4efe", "author": {"user": {"login": "junming403", "name": "Wang Junming"}}, "url": "https://github.com/TEAMMATES/teammates/commit/3b6146b62d1eac055f6c084dd29705ed2b1c4efe", "committedDate": "2020-03-08T03:44:32Z", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNTMzNDIw", "url": "https://github.com/TEAMMATES/teammates/pull/9967#pullrequestreview-372533420", "createdAt": "2020-03-11T07:51:43Z", "commit": {"oid": "3b6146b62d1eac055f6c084dd29705ed2b1c4efe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1MTo0NFrOF0sH1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNzo1OTo1NVrOF0sU5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MzE3Mw==", "bodyText": "The function return two different things (json response or BACKDOOR_STATUS_FAILURE ) with different meanings which result in the hack in https://github.com/TEAMMATES/teammates/pull/9967/files#diff-6509e6ed4f2a3ea02c0d46c61b1ff10fR185. I think it is better to just throw exception for failing situation.", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r390793173", "createdAt": "2020-03-11T07:51:44Z", "author": {"login": "xpdavid"}, "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -215,8 +215,10 @@ public static String removeAndRestoreDataBundle(DataBundle dataBundle) {\n         removeDataBundle(dataBundle);\n         ResponseBodyAndCode putRequestOutput =\n                 executePostRequest(Const.ResourceURIs.DATABUNDLE, null, JsonUtils.toJson(dataBundle));\n-        return putRequestOutput.responseCode == HttpStatus.SC_OK\n-                ? Const.StatusCodes.BACKDOOR_STATUS_SUCCESS : Const.StatusCodes.BACKDOOR_STATUS_FAILURE;\n+        if (putRequestOutput.responseCode == HttpStatus.SC_OK) {\n+            return putRequestOutput.responseBody;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6146b62d1eac055f6c084dd29705ed2b1c4efe"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5NjUxOQ==", "bodyText": "All the logic above looks the same? Why not writing a generic function?", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r390796519", "createdAt": "2020-03-11T07:59:55Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/logic/core/DataBundleLogic.java", "diffHunk": "@@ -109,18 +110,226 @@ public void persistDataBundle(DataBundle dataBundle) throws InvalidParametersExc\n         processResponsesAndPopulateMap(responses, sessionResponsesMap);\n         processSessionsAndUpdateRespondents(sessions, courseInstructorsMap, sessionQuestionsMap, sessionResponsesMap);\n \n-        accountsDb.putEntities(googleIdAccountMap.values());\n-        profilesDb.putEntities(profiles);\n-        coursesDb.putEntities(courses);\n-        instructorsDb.putEntities(instructors);\n-        studentsDb.putEntities(students);\n-        fbDb.putEntities(sessions);\n+        List<AccountAttributes> newAccounts = accountsDb.putEntities(googleIdAccountMap.values());\n+\n+        List<StudentProfileAttributes> newProfiles = profilesDb.putEntities(profiles);\n+        List<CourseAttributes> newCourses = coursesDb.putEntities(courses);\n+        List<InstructorAttributes> newInstructors = instructorsDb.putEntities(instructors);\n+        List<StudentAttributes> newStudents = studentsDb.putEntities(students);\n+        List<FeedbackSessionAttributes> newFeedbackSessions = fbDb.putEntities(sessions);\n \n         List<FeedbackQuestionAttributes> createdQuestions = fqDb.putEntities(questions);\n         injectRealIds(responses, responseComments, createdQuestions);\n \n-        frDb.putEntities(responses);\n-        fcDb.putEntities(responseComments);\n+        List<FeedbackResponseAttributes> newFeedbackResponses = frDb.putEntities(responses);\n+        List<FeedbackResponseCommentAttributes> newFeedbackResponseComments = fcDb.putEntities(responseComments);\n+\n+        updateDataBundleAccounts(dataBundle, newAccounts);\n+\n+        updateDataBundleProfiles(dataBundle, newProfiles);\n+        updateDataBundleCourses(dataBundle, newCourses);\n+        updateDataBundleInstructors(dataBundle, newInstructors);\n+\n+        updateDataBundleStudents(dataBundle, newStudents);\n+        updateDataBundleFeedbackSessions(dataBundle, newFeedbackSessions);\n+        updateDataBundleFeedbackQuestions(dataBundle, createdQuestions);\n+        updateDataBundleFeedbackResponses(dataBundle, newFeedbackResponses);\n+        updateDataBundleFeedbackResponseComments(dataBundle, newFeedbackResponseComments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6146b62d1eac055f6c084dd29705ed2b1c4efe"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11ae5def98c064332a7ba73379296a2bb5a6b04d", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/11ae5def98c064332a7ba73379296a2bb5a6b04d", "committedDate": "2020-03-16T09:20:41Z", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49504d2b042bc20c8b1a3c06f4e00d7258de535a", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/49504d2b042bc20c8b1a3c06f4e00d7258de535a", "committedDate": "2020-03-16T14:13:45Z", "message": "Update removeAndRestoreDataBundle to throw exception when request fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2293eec588f0a11399ec8c02ec8cce57318f376", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/c2293eec588f0a11399ec8c02ec8cce57318f376", "committedDate": "2020-03-16T15:32:59Z", "message": "Compress all updateXXX methods into a single generic method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MzgwMDU1", "url": "https://github.com/TEAMMATES/teammates/pull/9967#pullrequestreview-375380055", "createdAt": "2020-03-16T16:27:42Z", "commit": {"oid": "c2293eec588f0a11399ec8c02ec8cce57318f376"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyNzo0MlrOF28CqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozMjo1OFrOF28P9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTE0NQ==", "bodyText": "Just a nit: The whole message body can be the json. Don't use a specific field to hold them (magic \"message\" field) .", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393151145", "createdAt": "2020-03-16T16:27:42Z", "author": {"login": "xpdavid"}, "path": "src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java", "diffHunk": "@@ -162,18 +163,27 @@ protected void createTestData() {\n         LNPTestData testData = getTestData();\n         try {\n             createJsonDataFile(testData);\n+            persistTestData();\n             createCsvConfigDataFile(testData);\n-        } catch (IOException ex) {\n+        } catch (IOException | HttpRequestFailedException ex) {\n             log.severe(TeammatesException.toStringWithStackTrace(ex));\n         }\n     }\n \n     /**\n      * Creates the entities in the datastore from the JSON data file.\n      */\n-    protected void persistTestData() {\n+    protected void persistTestData() throws IOException, HttpRequestFailedException {\n         DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n-        BackDoor.removeAndRestoreDataBundle(dataBundle);\n+        String responseBody = \"\";\n+        responseBody = BackDoor.removeAndRestoreDataBundle(dataBundle);\n+\n+        String pathToResultFile = createFileAndDirectory(TestProperties.LNP_TEST_DATA_FOLDER, getJsonDataPath());\n+        String jsonValue = JsonUtils.parse(responseBody).getAsJsonObject().get(\"message\").getAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2293eec588f0a11399ec8c02ec8cce57318f376"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTUzNQ==", "bodyText": "I think you can try FileHelper.saveFile", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393151535", "createdAt": "2020-03-16T16:28:18Z", "author": {"login": "xpdavid"}, "path": "src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java", "diffHunk": "@@ -162,18 +163,27 @@ protected void createTestData() {\n         LNPTestData testData = getTestData();\n         try {\n             createJsonDataFile(testData);\n+            persistTestData();\n             createCsvConfigDataFile(testData);\n-        } catch (IOException ex) {\n+        } catch (IOException | HttpRequestFailedException ex) {\n             log.severe(TeammatesException.toStringWithStackTrace(ex));\n         }\n     }\n \n     /**\n      * Creates the entities in the datastore from the JSON data file.\n      */\n-    protected void persistTestData() {\n+    protected void persistTestData() throws IOException, HttpRequestFailedException {\n         DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n-        BackDoor.removeAndRestoreDataBundle(dataBundle);\n+        String responseBody = \"\";\n+        responseBody = BackDoor.removeAndRestoreDataBundle(dataBundle);\n+\n+        String pathToResultFile = createFileAndDirectory(TestProperties.LNP_TEST_DATA_FOLDER, getJsonDataPath());\n+        String jsonValue = JsonUtils.parse(responseBody).getAsJsonObject().get(\"message\").getAsString();\n+        try (BufferedWriter bw = Files.newBufferedWriter(Paths.get(pathToResultFile))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2293eec588f0a11399ec8c02ec8cce57318f376"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MjEwOA==", "bodyText": "It OK to use IOException I think.", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393152108", "createdAt": "2020-03-16T16:29:10Z", "author": {"login": "xpdavid"}, "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -212,12 +213,14 @@ private static void addAuthKeys(HttpRequestBase request) {\n      * However, removing the data bundle on teardown manually is not a perfect solution because two tests can concurrently\n      * access the same account and their data may get mixed up in the process. This is a major problem we need to address.\n      */\n-    public static String removeAndRestoreDataBundle(DataBundle dataBundle) {\n+    public static String removeAndRestoreDataBundle(DataBundle dataBundle) throws HttpRequestFailedException {\n         removeDataBundle(dataBundle);\n         ResponseBodyAndCode putRequestOutput =\n                 executePostRequest(Const.ResourceURIs.DATABUNDLE, null, JsonUtils.toJson(dataBundle));\n-        return putRequestOutput.responseCode == HttpStatus.SC_OK\n-                ? Const.StatusCodes.BACKDOOR_STATUS_SUCCESS : Const.StatusCodes.BACKDOOR_STATUS_FAILURE;\n+        if (putRequestOutput.responseCode == HttpStatus.SC_OK) {\n+            return putRequestOutput.responseBody;\n+        }\n+        throw new HttpRequestFailedException(\"Request failed with status code: \" + putRequestOutput.responseCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2293eec588f0a11399ec8c02ec8cce57318f376"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MzkzOA==", "bodyText": "I think you should put the method into EntityAttributes since it is about comparison between attributes. In addition, please don't call it as customEquals. The name is not constructive as how \"custom\" is \"custom\". A name such as equalsWithNullComparaision (of course it is not a ideal name) is far better than customEquals.", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393153938", "createdAt": "2020-03-16T16:32:04Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/common/util/CustomLogic.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package teammates.common.util;\n+\n+/**\n+ * Stores various custom logic that are used across classes.\n+ */\n+public final class CustomLogic {\n+\n+    private CustomLogic() {\n+        // utility class\n+    }\n+\n+    /**\n+     * Custom equals method that is able to handle null objects.\n+     * @param first first object to be compared\n+     * @param second second object to be compared\n+     * @return true of both objects are null or equal, false otherwise.\n+     */\n+    public static boolean customEquals(Object first, Object second) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2293eec588f0a11399ec8c02ec8cce57318f376"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1NDU0OQ==", "bodyText": "Don't forget to write test for the equals method.", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r393154549", "createdAt": "2020-03-16T16:32:58Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/common/datatransfer/attributes/FeedbackResponseAttributes.java", "diffHunk": "@@ -168,6 +170,28 @@ public String toString() {\n                 + \", answer=\" + getSerializedFeedbackResponseDetail() + \"]\";\n     }\n \n+    @Override\n+    public int hashCode() {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(this.feedbackSessionName).append(this.courseId)\n+                .append(this.feedbackQuestionId).append(this.giver).append(this.recipient);\n+        return stringBuilder.toString().hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2293eec588f0a11399ec8c02ec8cce57318f376"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0e3df1c1ebf04de7d605c6051defc50357055ae", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/f0e3df1c1ebf04de7d605c6051defc50357055ae", "committedDate": "2020-03-18T19:08:23Z", "message": "Update BaseLnPTestCase to use FileHelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9735aa6086f4c7f4cfdfa30bb997b430e7bacf16", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/9735aa6086f4c7f4cfdfa30bb997b430e7bacf16", "committedDate": "2020-03-18T19:56:55Z", "message": "Move custom equals class to EntityAttribute class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f2d07e5a292c504440bba1b583758d865c6811b", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/5f2d07e5a292c504440bba1b583758d865c6811b", "committedDate": "2020-03-18T20:21:52Z", "message": "Fix lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58dff4bfa3b7f6582cfbc17b3d2f3b534b8d0835", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/58dff4bfa3b7f6582cfbc17b3d2f3b534b8d0835", "committedDate": "2020-03-18T21:37:41Z", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d147ac0f787cc277c2c78169c0f8314cf2a188e4", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d147ac0f787cc277c2c78169c0f8314cf2a188e4", "committedDate": "2020-03-18T23:06:03Z", "message": "Add test for equals method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44615e0e96157f4f73a7979c822d731e121bd02e", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/44615e0e96157f4f73a7979c822d731e121bd02e", "committedDate": "2020-03-18T23:06:18Z", "message": "Merge branch '9956-dataBundle-returns-actual-object-in-database' of github.com:daekoon/teammates into 9956-dataBundle-returns-actual-object-in-database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33b6ad32f2410ce3c2d555e9e7a6794503185653", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/33b6ad32f2410ce3c2d555e9e7a6794503185653", "committedDate": "2020-03-23T04:09:04Z", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/8f55a933c78a2c019fd08ee03aeeb9a69ff297de", "committedDate": "2020-03-23T05:10:21Z", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTQ4MjI1", "url": "https://github.com/TEAMMATES/teammates/pull/9967#pullrequestreview-379148225", "createdAt": "2020-03-23T05:54:59Z", "commit": {"oid": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo1NDo1OVrOF53t3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo1NDo1OVrOF53t3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNjAxNA==", "bodyText": "I think there is a way such that this (usage of magic string message) can be mitigated. Let me get back to you later.", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r396226014", "createdAt": "2020-03-23T05:54:59Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/lnp/BaseLNPTestCase.java", "diffHunk": "@@ -162,18 +164,24 @@ protected void createTestData() {\n         LNPTestData testData = getTestData();\n         try {\n             createJsonDataFile(testData);\n+            persistTestData();\n             createCsvConfigDataFile(testData);\n-        } catch (IOException ex) {\n+        } catch (IOException | HttpRequestFailedException ex) {\n             log.severe(TeammatesException.toStringWithStackTrace(ex));\n         }\n     }\n \n     /**\n      * Creates the entities in the datastore from the JSON data file.\n      */\n-    protected void persistTestData() {\n+    protected void persistTestData() throws IOException, HttpRequestFailedException {\n         DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n-        BackDoor.removeAndRestoreDataBundle(dataBundle);\n+        String responseBody = \"\";\n+        responseBody = BackDoor.removeAndRestoreDataBundle(dataBundle);\n+\n+        String pathToResultFile = createFileAndDirectory(TestProperties.LNP_TEST_DATA_FOLDER, getJsonDataPath());\n+        String jsonValue = JsonUtils.parse(responseBody).getAsJsonObject().get(\"message\").getAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTQzMTYy", "url": "https://github.com/TEAMMATES/teammates/pull/9967#pullrequestreview-379943162", "createdAt": "2020-03-24T01:33:49Z", "commit": {"oid": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMTozMzo0OVrOF6eHqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMTozMzo0OVrOF6eHqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1NTIwOA==", "bodyText": "Actually, you can use Objects.equals from java.util.Objects", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r396855208", "createdAt": "2020-03-24T01:33:49Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/common/datatransfer/attributes/EntityAttributes.java", "diffHunk": "@@ -55,6 +55,21 @@ public void addNonEmptyError(String error, List<String> errors) {\n         errors.add(error);\n     }\n \n+    /**\n+     * Custom equals method that is able to handle null objects.\n+     * @param first first object to be compared\n+     * @param second second object to be compared\n+     * @return true of both objects are null or equal, false otherwise.\n+     */\n+    protected boolean nullableDataEquals(Object first, Object second) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTQzNzA2", "url": "https://github.com/TEAMMATES/teammates/pull/9967#pullrequestreview-379943706", "createdAt": "2020-03-24T01:35:44Z", "commit": {"oid": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMTozNTo0NVrOF6eJeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMTozNTo0NVrOF6eJeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1NTY3Mw==", "bodyText": "You can test: hashCode() of objects should be equal if there are equal.", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r396855673", "createdAt": "2020-03-24T01:35:45Z", "author": {"login": "xpdavid"}, "path": "src/test/java/teammates/test/cases/datatransfer/StudentProfileAttributesTest.java", "diffHunk": "@@ -295,6 +295,35 @@ public void testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError(\n                         .withPictureKey(null));\n     }\n \n+    @Test\n+    public void testEquals() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72066d4f330f3072ae01d0cf1b1f896d941262b8", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/72066d4f330f3072ae01d0cf1b1f896d941262b8", "committedDate": "2020-03-24T13:49:55Z", "message": "Change nullableObjectEquals to java's Objects.equal method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90d3210d0b78885d4b88f32d9e3a5df5e6f417e4", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/90d3210d0b78885d4b88f32d9e3a5df5e6f417e4", "committedDate": "2020-03-24T13:50:16Z", "message": "Merge branch '9956-dataBundle-returns-actual-object-in-database' of github.com:daekoon/teammates into 9956-dataBundle-returns-actual-object-in-database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d48ad4498e150d6c3bce89fac9aa5415b042a4d8", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d48ad4498e150d6c3bce89fac9aa5415b042a4d8", "committedDate": "2020-03-24T15:53:02Z", "message": "Add tests for xxxAttributes' hash code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b48d82a048f4ef3e27054e6c07cdedcee0d55b06", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/b48d82a048f4ef3e27054e6c07cdedcee0d55b06", "committedDate": "2020-03-26T14:21:49Z", "message": "Merge branch 'master' into 9956-dataBundle-returns-actual-object-in-database"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjQ5MTMx", "url": "https://github.com/TEAMMATES/teammates/pull/9967#pullrequestreview-382249131", "createdAt": "2020-03-26T17:36:43Z", "commit": {"oid": "b48d82a048f4ef3e27054e6c07cdedcee0d55b06"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzozNjo0M1rOF8Skkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzozNjo0M1rOF8Skkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2MzE1NA==", "bodyText": "You can remove the method also?", "url": "https://github.com/TEAMMATES/teammates/pull/9967#discussion_r398763154", "createdAt": "2020-03-26T17:36:43Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/common/datatransfer/attributes/EntityAttributes.java", "diffHunk": "@@ -55,6 +55,21 @@ public void addNonEmptyError(String error, List<String> errors) {\n         errors.add(error);\n     }\n \n+    /**\n+     * Custom equals method that is able to handle null objects.\n+     * @param first first object to be compared\n+     * @param second second object to be compared\n+     * @return true of both objects are null or equal, false otherwise.\n+     */\n+    protected boolean nullableDataEquals(Object first, Object second) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1NTIwOA=="}, "originalCommit": {"oid": "8f55a933c78a2c019fd08ee03aeeb9a69ff297de"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7654795161fcfcd76368f04e62bd7b5a37147744", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/7654795161fcfcd76368f04e62bd7b5a37147744", "committedDate": "2020-03-27T08:34:43Z", "message": "Remove deprecated method nullableDataEquals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4cfdc71f86f39fab8430db9c2f9ff989185f36", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/eb4cfdc71f86f39fab8430db9c2f9ff989185f36", "committedDate": "2020-03-27T09:02:28Z", "message": "Remove unused import"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4436, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}