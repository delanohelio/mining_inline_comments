{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NDYxNTk4", "number": 10668, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToxNzo1NVrOEe9KmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToxNzo1NVrOEe9KmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODk0ODcyOnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/pageobjects/InstructorFeedbackEditPage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToxNzo1NVrOHK7krA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMjoyMTo1NFrOHNe5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyMzg1Mg==", "bodyText": "I notice this a few times here. This looks pretty hacky - isnt there a null state for the max/min objects within the object itself?\nIt looks we set it as Integer.MIN_VALUE in our E2E test to leave it unchecked.", "url": "https://github.com/TEAMMATES/teammates/pull/10668#discussion_r481223852", "createdAt": "2020-09-01T15:17:55Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/pageobjects/InstructorFeedbackEditPage.java", "diffHunk": "@@ -862,4 +921,251 @@ private void selectVisibilityDropdownOption(int questionNum, String text) {\n             }\n         }\n     }\n+\n+    private void clickAndWaitForNewQuestion(WebElement button) {\n+        int newQuestionNum = getNumQuestions() + 1;\n+        click(button);\n+        waitForElementPresence(By.id(\"question-form-\" + newQuestionNum));\n+    }\n+\n+    private void addNewQuestion(int optionNumber) {\n+        click(addNewQuestionButton);\n+        WebElement newQuestionDropdown = waitForElementPresence(By.id(\"new-question-dropdown\"));\n+        click(newQuestionDropdown.findElements(By.tagName(\"button\")).get(optionNumber - 1));\n+    }\n+\n+    private void clickSaveNewQuestionButton() {\n+        WebElement saveButton = browser.driver.findElement(By.id(\"btn-save-new\"));\n+        click(saveButton);\n+        waitForElementStaleness(saveButton);\n+    }\n+\n+    private WebElement getGenerateOptionsCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"generate-checkbox\"));\n+    }\n+\n+    private WebElement getGenerateOptionsDropdown(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"generate-dropdown\"));\n+    }\n+\n+    private WebElement getWeightCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"weights-checkbox\"));\n+    }\n+\n+    private WebElement getOtherOptionCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"other-checkbox\"));\n+    }\n+\n+    private String getGeneratedOptionString(FeedbackParticipantType type) {\n+        switch (type) {\n+        case STUDENTS:\n+            return \"students\";\n+        case STUDENTS_EXCLUDING_SELF:\n+            return \"students (excluding self)\";\n+        case TEAMS:\n+            return \"teams\";\n+        case TEAMS_EXCLUDING_SELF:\n+            return \"teams (excluding own team)\";\n+        case INSTRUCTORS:\n+            return \"instructors\";\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+\n+    private String getDoubleString(Double value) {\n+        return value % 1 == 0 ? Integer.toString(value.intValue()) : Double.toString(value);\n+    }\n+\n+    private WebElement getOptionsSection(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"options-section\"));\n+    }\n+\n+    private List<WebElement> getOptionInputs(int questionNum) {\n+        WebElement optionsSection = getOptionsSection(questionNum);\n+        return optionsSection.findElements(By.cssSelector(\"input[type='text']\"));\n+    }\n+\n+    private List<WebElement> getOptionWeightInputs(int questionNum) {\n+        WebElement optionsSection = getOptionsSection(questionNum);\n+        return optionsSection.findElements(By.cssSelector(\"tm-weight-field input\"));\n+    }\n+\n+    private WebElement getOtherWeightInput(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"other-weight\"));\n+    }\n+\n+    private boolean verifyGeneratedOptions(int questionNum, FeedbackParticipantType participantType) {\n+        if (!participantType.equals(FeedbackParticipantType.NONE)) {\n+            assertTrue(getGenerateOptionsCheckbox(questionNum).isSelected());\n+            assertEquals(getSelectedDropdownOptionText(getGenerateOptionsDropdown(questionNum)),\n+                    getGeneratedOptionString(participantType));\n+            return true;\n+        }\n+        assertFalse(getGenerateOptionsCheckbox(questionNum).isSelected());\n+        return false;\n+    }\n+\n+    private void verifyOptions(int questionNum, List<String> options) {\n+        List<WebElement> inputs = getOptionInputs(questionNum);\n+        for (int i = 0; i < options.size(); i++) {\n+            assertEquals(options.get(i), inputs.get(i).getAttribute(\"value\"));\n+        }\n+    }\n+\n+    private void verifyOptionWeights(int questionNum, boolean hasWeights, List<Double> weights) {\n+        if (hasWeights) {\n+            assertTrue(getWeightCheckbox(questionNum).isSelected());\n+            List<WebElement> weightInputs = getOptionWeightInputs(questionNum);\n+            for (int i = 0; i < weights.size(); i++) {\n+                assertEquals(getDoubleString(weights.get(i)), weightInputs.get(i).getAttribute(\"value\"));\n+            }\n+        } else {\n+            assertFalse(getWeightCheckbox(questionNum).isSelected());\n+        }\n+    }\n+\n+    private void verifyOtherOption(int questionNum, boolean hasOther, Double weight) {\n+        if (hasOther) {\n+            assertTrue(getOtherOptionCheckbox(questionNum).isSelected());\n+            if (weight > 0) {\n+                String otherWeight = getOtherWeightInput(questionNum).getAttribute(\"value\");\n+                assertEquals(getDoubleString(weight), otherWeight);\n+            }\n+        } else {\n+            assertFalse(getOtherOptionCheckbox(questionNum).isSelected());\n+        }\n+    }\n+\n+    private void inputMcqDetails(int questionNum, FeedbackMcqQuestionDetails questionDetails) {\n+        if (inputGenerateOptions(questionNum, questionDetails.getGenerateOptionsFor())) {\n+            return;\n+        }\n+\n+        inputOptions(questionNum, questionDetails.getMcqChoices());\n+        inputOptionWeights(questionNum, questionDetails.hasAssignedWeights(), questionDetails.getMcqWeights());\n+        inputOtherChoice(questionNum, questionDetails.isOtherEnabled(), questionDetails.getMcqOtherWeight());\n+    }\n+\n+    private boolean inputGenerateOptions(int questionNum, FeedbackParticipantType participantType) {\n+        if (!participantType.equals(FeedbackParticipantType.NONE)) {\n+            markOptionAsSelected(getGenerateOptionsCheckbox(questionNum));\n+            selectDropdownOptionByText(getGenerateOptionsDropdown(questionNum),\n+                    getGeneratedOptionString(participantType));\n+            clickSaveQuestionButton(questionNum);\n+            return true;\n+        }\n+        markOptionAsUnselected(getGenerateOptionsCheckbox(questionNum));\n+        return false;\n+    }\n+\n+    private void inputOptions(int questionNum, List<String> options) {\n+        List<WebElement> inputs = getOptionInputs(questionNum);\n+        int numInputsNeeded = options.size() - inputs.size();\n+        if (numInputsNeeded > 0) {\n+            for (int i = 0; i < numInputsNeeded; i++) {\n+                click(getQuestionForm(questionNum).findElement(By.id(\"btn-add-option\")));\n+            }\n+            inputs = getOptionInputs(questionNum);\n+        }\n+        if (numInputsNeeded < 0) {\n+            for (int i = 0; i < -numInputsNeeded; i++) {\n+                click(getOptionsSection(questionNum).findElement(By.tagName(\"button\")));\n+            }\n+            inputs = getOptionInputs(questionNum);\n+        }\n+\n+        for (int i = 0; i < options.size(); i++) {\n+            fillTextBox(inputs.get(i), options.get(i));\n+        }\n+    }\n+\n+    private void inputOptionWeights(int questionNum, boolean hasWeights, List<Double> weights) {\n+        if (hasWeights) {\n+            markOptionAsSelected(getWeightCheckbox(questionNum));\n+            List<WebElement> weightInputs = getOptionWeightInputs(questionNum);\n+            for (int i = 0; i < weights.size(); i++) {\n+                fillTextBox(weightInputs.get(i), getDoubleString(weights.get(i)));\n+            }\n+        } else {\n+            markOptionAsUnselected(getWeightCheckbox(questionNum));\n+        }\n+    }\n+\n+    private void inputOtherChoice(int questionNum, boolean hasOther, Double otherWeight) {\n+        if (hasOther) {\n+            markOptionAsSelected(getOtherOptionCheckbox(questionNum));\n+            if (otherWeight > 0) {\n+                fillTextBox(getOtherWeightInput(questionNum), getDoubleString(otherWeight));\n+            }\n+        } else {\n+            markOptionAsUnselected(getOtherOptionCheckbox(questionNum));\n+        }\n+    }\n+\n+    private WebElement getMaxOptionsCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"max-options-checkbox\"));\n+    }\n+\n+    private WebElement getMaxOptionsInput(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"max-options\"));\n+    }\n+\n+    private WebElement getMinOptionsCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"min-options-checkbox\"));\n+    }\n+\n+    private WebElement getMinOptionsInput(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"min-options\"));\n+    }\n+\n+    private void verifyMaxOptions(int questionNum, int maxOptions) {\n+        if (maxOptions == Integer.MIN_VALUE) {\n+            assertFalse(getMaxOptionsCheckbox(questionNum).isSelected());\n+        } else {\n+            assertTrue(getMaxOptionsCheckbox(questionNum).isSelected());\n+            assertEquals(getMaxOptionsInput(questionNum).getAttribute(\"value\"),\n+                    Integer.toString(maxOptions));\n+        }\n+    }\n+\n+    private void verifyMinOptions(int questionNum, int minOptions) {\n+        if (minOptions == Integer.MIN_VALUE) {\n+            assertFalse(getMinOptionsCheckbox(questionNum).isSelected());\n+        } else {\n+            assertTrue(getMinOptionsCheckbox(questionNum).isSelected());\n+            assertEquals(getMinOptionsInput(questionNum).getAttribute(\"value\"),\n+                    Integer.toString(minOptions));\n+        }\n+    }\n+\n+    private void inputMsqDetails(int questionNum, FeedbackMsqQuestionDetails questionDetails) {\n+        if (inputGenerateOptions(questionNum, questionDetails.getGenerateOptionsFor())) {\n+            return;\n+        }\n+\n+        inputOptions(questionNum, questionDetails.getMsqChoices());\n+        inputOptionWeights(questionNum, questionDetails.hasAssignedWeights(), questionDetails.getMsqWeights());\n+        inputOtherChoice(questionNum, questionDetails.isOtherEnabled(), questionDetails.getMsqOtherWeight());\n+        inputMaxOptions(questionNum, questionDetails.getMaxSelectableChoices());\n+        inputMinOptions(questionNum, questionDetails.getMinSelectableChoices());\n+    }\n+\n+    private void inputMaxOptions(int questionNum, int maxOptions) {\n+        if (maxOptions == Integer.MIN_VALUE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5706a24790bd65ed89c8217e33e3f17abaf6c3b6"}, "originalPosition": 576}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNjIyNA==", "bodyText": "Integer.MIN_VALUE is the actual value being used to represent max and min option are not selected in FeedbackMsqQuestionDetails class", "url": "https://github.com/TEAMMATES/teammates/pull/10668#discussion_r481316224", "createdAt": "2020-09-01T17:34:13Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/pageobjects/InstructorFeedbackEditPage.java", "diffHunk": "@@ -862,4 +921,251 @@ private void selectVisibilityDropdownOption(int questionNum, String text) {\n             }\n         }\n     }\n+\n+    private void clickAndWaitForNewQuestion(WebElement button) {\n+        int newQuestionNum = getNumQuestions() + 1;\n+        click(button);\n+        waitForElementPresence(By.id(\"question-form-\" + newQuestionNum));\n+    }\n+\n+    private void addNewQuestion(int optionNumber) {\n+        click(addNewQuestionButton);\n+        WebElement newQuestionDropdown = waitForElementPresence(By.id(\"new-question-dropdown\"));\n+        click(newQuestionDropdown.findElements(By.tagName(\"button\")).get(optionNumber - 1));\n+    }\n+\n+    private void clickSaveNewQuestionButton() {\n+        WebElement saveButton = browser.driver.findElement(By.id(\"btn-save-new\"));\n+        click(saveButton);\n+        waitForElementStaleness(saveButton);\n+    }\n+\n+    private WebElement getGenerateOptionsCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"generate-checkbox\"));\n+    }\n+\n+    private WebElement getGenerateOptionsDropdown(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"generate-dropdown\"));\n+    }\n+\n+    private WebElement getWeightCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"weights-checkbox\"));\n+    }\n+\n+    private WebElement getOtherOptionCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"other-checkbox\"));\n+    }\n+\n+    private String getGeneratedOptionString(FeedbackParticipantType type) {\n+        switch (type) {\n+        case STUDENTS:\n+            return \"students\";\n+        case STUDENTS_EXCLUDING_SELF:\n+            return \"students (excluding self)\";\n+        case TEAMS:\n+            return \"teams\";\n+        case TEAMS_EXCLUDING_SELF:\n+            return \"teams (excluding own team)\";\n+        case INSTRUCTORS:\n+            return \"instructors\";\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+\n+    private String getDoubleString(Double value) {\n+        return value % 1 == 0 ? Integer.toString(value.intValue()) : Double.toString(value);\n+    }\n+\n+    private WebElement getOptionsSection(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"options-section\"));\n+    }\n+\n+    private List<WebElement> getOptionInputs(int questionNum) {\n+        WebElement optionsSection = getOptionsSection(questionNum);\n+        return optionsSection.findElements(By.cssSelector(\"input[type='text']\"));\n+    }\n+\n+    private List<WebElement> getOptionWeightInputs(int questionNum) {\n+        WebElement optionsSection = getOptionsSection(questionNum);\n+        return optionsSection.findElements(By.cssSelector(\"tm-weight-field input\"));\n+    }\n+\n+    private WebElement getOtherWeightInput(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"other-weight\"));\n+    }\n+\n+    private boolean verifyGeneratedOptions(int questionNum, FeedbackParticipantType participantType) {\n+        if (!participantType.equals(FeedbackParticipantType.NONE)) {\n+            assertTrue(getGenerateOptionsCheckbox(questionNum).isSelected());\n+            assertEquals(getSelectedDropdownOptionText(getGenerateOptionsDropdown(questionNum)),\n+                    getGeneratedOptionString(participantType));\n+            return true;\n+        }\n+        assertFalse(getGenerateOptionsCheckbox(questionNum).isSelected());\n+        return false;\n+    }\n+\n+    private void verifyOptions(int questionNum, List<String> options) {\n+        List<WebElement> inputs = getOptionInputs(questionNum);\n+        for (int i = 0; i < options.size(); i++) {\n+            assertEquals(options.get(i), inputs.get(i).getAttribute(\"value\"));\n+        }\n+    }\n+\n+    private void verifyOptionWeights(int questionNum, boolean hasWeights, List<Double> weights) {\n+        if (hasWeights) {\n+            assertTrue(getWeightCheckbox(questionNum).isSelected());\n+            List<WebElement> weightInputs = getOptionWeightInputs(questionNum);\n+            for (int i = 0; i < weights.size(); i++) {\n+                assertEquals(getDoubleString(weights.get(i)), weightInputs.get(i).getAttribute(\"value\"));\n+            }\n+        } else {\n+            assertFalse(getWeightCheckbox(questionNum).isSelected());\n+        }\n+    }\n+\n+    private void verifyOtherOption(int questionNum, boolean hasOther, Double weight) {\n+        if (hasOther) {\n+            assertTrue(getOtherOptionCheckbox(questionNum).isSelected());\n+            if (weight > 0) {\n+                String otherWeight = getOtherWeightInput(questionNum).getAttribute(\"value\");\n+                assertEquals(getDoubleString(weight), otherWeight);\n+            }\n+        } else {\n+            assertFalse(getOtherOptionCheckbox(questionNum).isSelected());\n+        }\n+    }\n+\n+    private void inputMcqDetails(int questionNum, FeedbackMcqQuestionDetails questionDetails) {\n+        if (inputGenerateOptions(questionNum, questionDetails.getGenerateOptionsFor())) {\n+            return;\n+        }\n+\n+        inputOptions(questionNum, questionDetails.getMcqChoices());\n+        inputOptionWeights(questionNum, questionDetails.hasAssignedWeights(), questionDetails.getMcqWeights());\n+        inputOtherChoice(questionNum, questionDetails.isOtherEnabled(), questionDetails.getMcqOtherWeight());\n+    }\n+\n+    private boolean inputGenerateOptions(int questionNum, FeedbackParticipantType participantType) {\n+        if (!participantType.equals(FeedbackParticipantType.NONE)) {\n+            markOptionAsSelected(getGenerateOptionsCheckbox(questionNum));\n+            selectDropdownOptionByText(getGenerateOptionsDropdown(questionNum),\n+                    getGeneratedOptionString(participantType));\n+            clickSaveQuestionButton(questionNum);\n+            return true;\n+        }\n+        markOptionAsUnselected(getGenerateOptionsCheckbox(questionNum));\n+        return false;\n+    }\n+\n+    private void inputOptions(int questionNum, List<String> options) {\n+        List<WebElement> inputs = getOptionInputs(questionNum);\n+        int numInputsNeeded = options.size() - inputs.size();\n+        if (numInputsNeeded > 0) {\n+            for (int i = 0; i < numInputsNeeded; i++) {\n+                click(getQuestionForm(questionNum).findElement(By.id(\"btn-add-option\")));\n+            }\n+            inputs = getOptionInputs(questionNum);\n+        }\n+        if (numInputsNeeded < 0) {\n+            for (int i = 0; i < -numInputsNeeded; i++) {\n+                click(getOptionsSection(questionNum).findElement(By.tagName(\"button\")));\n+            }\n+            inputs = getOptionInputs(questionNum);\n+        }\n+\n+        for (int i = 0; i < options.size(); i++) {\n+            fillTextBox(inputs.get(i), options.get(i));\n+        }\n+    }\n+\n+    private void inputOptionWeights(int questionNum, boolean hasWeights, List<Double> weights) {\n+        if (hasWeights) {\n+            markOptionAsSelected(getWeightCheckbox(questionNum));\n+            List<WebElement> weightInputs = getOptionWeightInputs(questionNum);\n+            for (int i = 0; i < weights.size(); i++) {\n+                fillTextBox(weightInputs.get(i), getDoubleString(weights.get(i)));\n+            }\n+        } else {\n+            markOptionAsUnselected(getWeightCheckbox(questionNum));\n+        }\n+    }\n+\n+    private void inputOtherChoice(int questionNum, boolean hasOther, Double otherWeight) {\n+        if (hasOther) {\n+            markOptionAsSelected(getOtherOptionCheckbox(questionNum));\n+            if (otherWeight > 0) {\n+                fillTextBox(getOtherWeightInput(questionNum), getDoubleString(otherWeight));\n+            }\n+        } else {\n+            markOptionAsUnselected(getOtherOptionCheckbox(questionNum));\n+        }\n+    }\n+\n+    private WebElement getMaxOptionsCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"max-options-checkbox\"));\n+    }\n+\n+    private WebElement getMaxOptionsInput(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"max-options\"));\n+    }\n+\n+    private WebElement getMinOptionsCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"min-options-checkbox\"));\n+    }\n+\n+    private WebElement getMinOptionsInput(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"min-options\"));\n+    }\n+\n+    private void verifyMaxOptions(int questionNum, int maxOptions) {\n+        if (maxOptions == Integer.MIN_VALUE) {\n+            assertFalse(getMaxOptionsCheckbox(questionNum).isSelected());\n+        } else {\n+            assertTrue(getMaxOptionsCheckbox(questionNum).isSelected());\n+            assertEquals(getMaxOptionsInput(questionNum).getAttribute(\"value\"),\n+                    Integer.toString(maxOptions));\n+        }\n+    }\n+\n+    private void verifyMinOptions(int questionNum, int minOptions) {\n+        if (minOptions == Integer.MIN_VALUE) {\n+            assertFalse(getMinOptionsCheckbox(questionNum).isSelected());\n+        } else {\n+            assertTrue(getMinOptionsCheckbox(questionNum).isSelected());\n+            assertEquals(getMinOptionsInput(questionNum).getAttribute(\"value\"),\n+                    Integer.toString(minOptions));\n+        }\n+    }\n+\n+    private void inputMsqDetails(int questionNum, FeedbackMsqQuestionDetails questionDetails) {\n+        if (inputGenerateOptions(questionNum, questionDetails.getGenerateOptionsFor())) {\n+            return;\n+        }\n+\n+        inputOptions(questionNum, questionDetails.getMsqChoices());\n+        inputOptionWeights(questionNum, questionDetails.hasAssignedWeights(), questionDetails.getMsqWeights());\n+        inputOtherChoice(questionNum, questionDetails.isOtherEnabled(), questionDetails.getMsqOtherWeight());\n+        inputMaxOptions(questionNum, questionDetails.getMaxSelectableChoices());\n+        inputMinOptions(questionNum, questionDetails.getMinSelectableChoices());\n+    }\n+\n+    private void inputMaxOptions(int questionNum, int maxOptions) {\n+        if (maxOptions == Integer.MIN_VALUE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyMzg1Mg=="}, "originalCommit": {"oid": "5706a24790bd65ed89c8217e33e3f17abaf6c3b6"}, "originalPosition": 576}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5OTcwMA==", "bodyText": "@rrtheonlyone actually made a good point here. If Integer.MIN_VALUE has a special meaning, then it should be in its own variable.", "url": "https://github.com/TEAMMATES/teammates/pull/10668#discussion_r483899700", "createdAt": "2020-09-05T02:21:54Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/pageobjects/InstructorFeedbackEditPage.java", "diffHunk": "@@ -862,4 +921,251 @@ private void selectVisibilityDropdownOption(int questionNum, String text) {\n             }\n         }\n     }\n+\n+    private void clickAndWaitForNewQuestion(WebElement button) {\n+        int newQuestionNum = getNumQuestions() + 1;\n+        click(button);\n+        waitForElementPresence(By.id(\"question-form-\" + newQuestionNum));\n+    }\n+\n+    private void addNewQuestion(int optionNumber) {\n+        click(addNewQuestionButton);\n+        WebElement newQuestionDropdown = waitForElementPresence(By.id(\"new-question-dropdown\"));\n+        click(newQuestionDropdown.findElements(By.tagName(\"button\")).get(optionNumber - 1));\n+    }\n+\n+    private void clickSaveNewQuestionButton() {\n+        WebElement saveButton = browser.driver.findElement(By.id(\"btn-save-new\"));\n+        click(saveButton);\n+        waitForElementStaleness(saveButton);\n+    }\n+\n+    private WebElement getGenerateOptionsCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"generate-checkbox\"));\n+    }\n+\n+    private WebElement getGenerateOptionsDropdown(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"generate-dropdown\"));\n+    }\n+\n+    private WebElement getWeightCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"weights-checkbox\"));\n+    }\n+\n+    private WebElement getOtherOptionCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"other-checkbox\"));\n+    }\n+\n+    private String getGeneratedOptionString(FeedbackParticipantType type) {\n+        switch (type) {\n+        case STUDENTS:\n+            return \"students\";\n+        case STUDENTS_EXCLUDING_SELF:\n+            return \"students (excluding self)\";\n+        case TEAMS:\n+            return \"teams\";\n+        case TEAMS_EXCLUDING_SELF:\n+            return \"teams (excluding own team)\";\n+        case INSTRUCTORS:\n+            return \"instructors\";\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+\n+    private String getDoubleString(Double value) {\n+        return value % 1 == 0 ? Integer.toString(value.intValue()) : Double.toString(value);\n+    }\n+\n+    private WebElement getOptionsSection(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"options-section\"));\n+    }\n+\n+    private List<WebElement> getOptionInputs(int questionNum) {\n+        WebElement optionsSection = getOptionsSection(questionNum);\n+        return optionsSection.findElements(By.cssSelector(\"input[type='text']\"));\n+    }\n+\n+    private List<WebElement> getOptionWeightInputs(int questionNum) {\n+        WebElement optionsSection = getOptionsSection(questionNum);\n+        return optionsSection.findElements(By.cssSelector(\"tm-weight-field input\"));\n+    }\n+\n+    private WebElement getOtherWeightInput(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"other-weight\"));\n+    }\n+\n+    private boolean verifyGeneratedOptions(int questionNum, FeedbackParticipantType participantType) {\n+        if (!participantType.equals(FeedbackParticipantType.NONE)) {\n+            assertTrue(getGenerateOptionsCheckbox(questionNum).isSelected());\n+            assertEquals(getSelectedDropdownOptionText(getGenerateOptionsDropdown(questionNum)),\n+                    getGeneratedOptionString(participantType));\n+            return true;\n+        }\n+        assertFalse(getGenerateOptionsCheckbox(questionNum).isSelected());\n+        return false;\n+    }\n+\n+    private void verifyOptions(int questionNum, List<String> options) {\n+        List<WebElement> inputs = getOptionInputs(questionNum);\n+        for (int i = 0; i < options.size(); i++) {\n+            assertEquals(options.get(i), inputs.get(i).getAttribute(\"value\"));\n+        }\n+    }\n+\n+    private void verifyOptionWeights(int questionNum, boolean hasWeights, List<Double> weights) {\n+        if (hasWeights) {\n+            assertTrue(getWeightCheckbox(questionNum).isSelected());\n+            List<WebElement> weightInputs = getOptionWeightInputs(questionNum);\n+            for (int i = 0; i < weights.size(); i++) {\n+                assertEquals(getDoubleString(weights.get(i)), weightInputs.get(i).getAttribute(\"value\"));\n+            }\n+        } else {\n+            assertFalse(getWeightCheckbox(questionNum).isSelected());\n+        }\n+    }\n+\n+    private void verifyOtherOption(int questionNum, boolean hasOther, Double weight) {\n+        if (hasOther) {\n+            assertTrue(getOtherOptionCheckbox(questionNum).isSelected());\n+            if (weight > 0) {\n+                String otherWeight = getOtherWeightInput(questionNum).getAttribute(\"value\");\n+                assertEquals(getDoubleString(weight), otherWeight);\n+            }\n+        } else {\n+            assertFalse(getOtherOptionCheckbox(questionNum).isSelected());\n+        }\n+    }\n+\n+    private void inputMcqDetails(int questionNum, FeedbackMcqQuestionDetails questionDetails) {\n+        if (inputGenerateOptions(questionNum, questionDetails.getGenerateOptionsFor())) {\n+            return;\n+        }\n+\n+        inputOptions(questionNum, questionDetails.getMcqChoices());\n+        inputOptionWeights(questionNum, questionDetails.hasAssignedWeights(), questionDetails.getMcqWeights());\n+        inputOtherChoice(questionNum, questionDetails.isOtherEnabled(), questionDetails.getMcqOtherWeight());\n+    }\n+\n+    private boolean inputGenerateOptions(int questionNum, FeedbackParticipantType participantType) {\n+        if (!participantType.equals(FeedbackParticipantType.NONE)) {\n+            markOptionAsSelected(getGenerateOptionsCheckbox(questionNum));\n+            selectDropdownOptionByText(getGenerateOptionsDropdown(questionNum),\n+                    getGeneratedOptionString(participantType));\n+            clickSaveQuestionButton(questionNum);\n+            return true;\n+        }\n+        markOptionAsUnselected(getGenerateOptionsCheckbox(questionNum));\n+        return false;\n+    }\n+\n+    private void inputOptions(int questionNum, List<String> options) {\n+        List<WebElement> inputs = getOptionInputs(questionNum);\n+        int numInputsNeeded = options.size() - inputs.size();\n+        if (numInputsNeeded > 0) {\n+            for (int i = 0; i < numInputsNeeded; i++) {\n+                click(getQuestionForm(questionNum).findElement(By.id(\"btn-add-option\")));\n+            }\n+            inputs = getOptionInputs(questionNum);\n+        }\n+        if (numInputsNeeded < 0) {\n+            for (int i = 0; i < -numInputsNeeded; i++) {\n+                click(getOptionsSection(questionNum).findElement(By.tagName(\"button\")));\n+            }\n+            inputs = getOptionInputs(questionNum);\n+        }\n+\n+        for (int i = 0; i < options.size(); i++) {\n+            fillTextBox(inputs.get(i), options.get(i));\n+        }\n+    }\n+\n+    private void inputOptionWeights(int questionNum, boolean hasWeights, List<Double> weights) {\n+        if (hasWeights) {\n+            markOptionAsSelected(getWeightCheckbox(questionNum));\n+            List<WebElement> weightInputs = getOptionWeightInputs(questionNum);\n+            for (int i = 0; i < weights.size(); i++) {\n+                fillTextBox(weightInputs.get(i), getDoubleString(weights.get(i)));\n+            }\n+        } else {\n+            markOptionAsUnselected(getWeightCheckbox(questionNum));\n+        }\n+    }\n+\n+    private void inputOtherChoice(int questionNum, boolean hasOther, Double otherWeight) {\n+        if (hasOther) {\n+            markOptionAsSelected(getOtherOptionCheckbox(questionNum));\n+            if (otherWeight > 0) {\n+                fillTextBox(getOtherWeightInput(questionNum), getDoubleString(otherWeight));\n+            }\n+        } else {\n+            markOptionAsUnselected(getOtherOptionCheckbox(questionNum));\n+        }\n+    }\n+\n+    private WebElement getMaxOptionsCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"max-options-checkbox\"));\n+    }\n+\n+    private WebElement getMaxOptionsInput(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"max-options\"));\n+    }\n+\n+    private WebElement getMinOptionsCheckbox(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"min-options-checkbox\"));\n+    }\n+\n+    private WebElement getMinOptionsInput(int questionNum) {\n+        return getQuestionForm(questionNum).findElement(By.id(\"min-options\"));\n+    }\n+\n+    private void verifyMaxOptions(int questionNum, int maxOptions) {\n+        if (maxOptions == Integer.MIN_VALUE) {\n+            assertFalse(getMaxOptionsCheckbox(questionNum).isSelected());\n+        } else {\n+            assertTrue(getMaxOptionsCheckbox(questionNum).isSelected());\n+            assertEquals(getMaxOptionsInput(questionNum).getAttribute(\"value\"),\n+                    Integer.toString(maxOptions));\n+        }\n+    }\n+\n+    private void verifyMinOptions(int questionNum, int minOptions) {\n+        if (minOptions == Integer.MIN_VALUE) {\n+            assertFalse(getMinOptionsCheckbox(questionNum).isSelected());\n+        } else {\n+            assertTrue(getMinOptionsCheckbox(questionNum).isSelected());\n+            assertEquals(getMinOptionsInput(questionNum).getAttribute(\"value\"),\n+                    Integer.toString(minOptions));\n+        }\n+    }\n+\n+    private void inputMsqDetails(int questionNum, FeedbackMsqQuestionDetails questionDetails) {\n+        if (inputGenerateOptions(questionNum, questionDetails.getGenerateOptionsFor())) {\n+            return;\n+        }\n+\n+        inputOptions(questionNum, questionDetails.getMsqChoices());\n+        inputOptionWeights(questionNum, questionDetails.hasAssignedWeights(), questionDetails.getMsqWeights());\n+        inputOtherChoice(questionNum, questionDetails.isOtherEnabled(), questionDetails.getMsqOtherWeight());\n+        inputMaxOptions(questionNum, questionDetails.getMaxSelectableChoices());\n+        inputMinOptions(questionNum, questionDetails.getMinSelectableChoices());\n+    }\n+\n+    private void inputMaxOptions(int questionNum, int maxOptions) {\n+        if (maxOptions == Integer.MIN_VALUE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyMzg1Mg=="}, "originalCommit": {"oid": "5706a24790bd65ed89c8217e33e3f17abaf6c3b6"}, "originalPosition": 576}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3519, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}