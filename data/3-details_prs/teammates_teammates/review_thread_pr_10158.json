{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2OTQ3OTI2", "number": 10158, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0NTo1N1rOECHilA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0ODo1N1rOECHmMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjU2MTQ4OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/datatransfer/SessionResultsBundleTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0NTo1N1rOGeYJDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0NTo1N1rOGeYJDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNTk5Ng==", "bodyText": "MapMap -> Map", "url": "https://github.com/TEAMMATES/teammates/pull/10158#discussion_r434505996", "createdAt": "2020-06-03T11:45:57Z", "author": {"login": "wkurniawan07"}, "path": "src/test/java/teammates/test/cases/datatransfer/SessionResultsBundleTest.java", "diffHunk": "@@ -23,7 +23,7 @@\n public class SessionResultsBundleTest extends BaseTestCase {\n \n     @Test\n-    public void testGetResponseCommentsMap() {\n+    public void testGetQuestionResponseMapMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0796adefa39468c16f1039cdb19ad29911ca64d6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjU2NTIzOnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/logic/FeedbackSessionsLogicTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0NzoyMFrOGeYLkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0NzoyMFrOGeYLkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNjY0MQ==", "bodyText": "58 = 10 (total response) + 48 (total missing). It's not easy to justify where 10 and 48 come from, but 58 should not be left as a magic number.", "url": "https://github.com/TEAMMATES/teammates/pull/10158#discussion_r434506641", "createdAt": "2020-06-03T11:47:20Z", "author": {"login": "wkurniawan07"}, "path": "src/test/java/teammates/test/cases/logic/FeedbackSessionsLogicTest.java", "diffHunk": "@@ -2019,7 +2037,7 @@ public void testGetSessionResultsForUser_instructorAllQuestions_shouldGenerateCo\n                 getResponseId(\"qn5.resp1\", responseBundle) + \"={false,true}\",\n                 getResponseId(\"qn6.resp1\", responseBundle) + \"={true,true}\");\n         AssertHelper.assertContains(expectedStrings, mapString);\n-        assertEquals(10, bundle.getResponseVisibilityTable().size());\n+        assertEquals(58, bundle.getResponseVisibilityTable().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0796adefa39468c16f1039cdb19ad29911ca64d6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjU2NTY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/logic/FeedbackSessionsLogicTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0NzoyOVrOGeYL5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0NzoyOVrOGeYL5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNjcyNg==", "bodyText": "Similarly here for 43 = 7 + 36.", "url": "https://github.com/TEAMMATES/teammates/pull/10158#discussion_r434506726", "createdAt": "2020-06-03T11:47:29Z", "author": {"login": "wkurniawan07"}, "path": "src/test/java/teammates/test/cases/logic/FeedbackSessionsLogicTest.java", "diffHunk": "@@ -2061,7 +2086,7 @@ public void testGetSessionResultsForUser_instructorAllQuestionsSpecificSection_s\n                 getResponseId(\"qn2.resp3\", responseBundle) + \"={false,false}\",\n                 getResponseId(\"qn2.resp1\", responseBundle) + \"={false,false}\");\n         AssertHelper.assertContains(expectedStrings, mapString);\n-        assertEquals(7, bundle.getResponseVisibilityTable().size());\n+        assertEquals(43, bundle.getResponseVisibilityTable().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0796adefa39468c16f1039cdb19ad29911ca64d6"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjU3MDcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/logic/core/FeedbackSessionsLogic.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0ODo1N1rOGeYO5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0NDo0MFrOGfD9NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNzQ5NQ==", "bodyText": "Is it possible/not too troublesome to generate the response details object based on the question type?", "url": "https://github.com/TEAMMATES/teammates/pull/10158#discussion_r434507495", "createdAt": "2020-06-03T11:48:57Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/logic/core/FeedbackSessionsLogic.java", "diffHunk": "@@ -1623,6 +1632,92 @@ private void addCommentVisibilityToTable(\n         commentVisibilityTable.put(frc.getId(), commentVisibility);\n     }\n \n+    /**\n+     * Builds viewable missing responses for the session for instructor.\n+     *\n+     * @param instructor the instructor\n+     * @param responseVisibilityTable the visibility table which will be updated with the visibility of missing responses\n+     * @param feedbackSession the feedback sessions\n+     * @param relatedQuestionsMap the relevant questions\n+     * @param existingResponses existing responses\n+     * @param courseRoster the course roster\n+     * @param section if not null, will only build missing responses for the section\n+     * @return a list of missing responses for the session.\n+     */\n+    private List<FeedbackResponseAttributes> buildMissingResponses(\n+            InstructorAttributes instructor,\n+            Map<String, boolean[]> responseVisibilityTable,\n+            FeedbackSessionAttributes feedbackSession, Map<String, FeedbackQuestionAttributes> relatedQuestionsMap,\n+            List<FeedbackResponseAttributes> existingResponses, CourseRoster courseRoster, @Nullable String section) {\n+\n+        // first get all possible giver recipient pairs\n+        Map<String, Map<String, Set<String>>> completeGiverRecipientMap =\n+                fqLogic.buildCompleteGiverRecipientMap(feedbackSession, relatedQuestionsMap.values(), courseRoster);\n+\n+        // remove the existing responses in those pairs\n+        for (FeedbackResponseAttributes existingResponse : existingResponses) {\n+            Map<String, Set<String>> currGiverRecipientMap =\n+                    completeGiverRecipientMap.get(existingResponse.getFeedbackQuestionId());\n+            if (!currGiverRecipientMap.containsKey(existingResponse.getGiver())) {\n+                continue;\n+            }\n+            currGiverRecipientMap.get(existingResponse.getGiver()).remove(existingResponse.getRecipient());\n+        }\n+\n+        List<FeedbackResponseAttributes> missingResponses = new ArrayList<>();\n+        // build dummy responses\n+        for (Map.Entry<String, Map<String, Set<String>>> currGiverRecipientMapEntry\n+                : completeGiverRecipientMap.entrySet()) {\n+            FeedbackQuestionAttributes correspondingQuestion =\n+                    relatedQuestionsMap.get(currGiverRecipientMapEntry.getKey());\n+            String questionId = correspondingQuestion.getId();\n+\n+            for (Map.Entry<String, Set<String>> giverRecipientEntry\n+                    : currGiverRecipientMapEntry.getValue().entrySet()) {\n+                // giver\n+                String giverIdentifier = giverRecipientEntry.getKey();\n+                CourseRoster.ParticipantInfo giverInfo = courseRoster.getInfoForIdentifier(giverIdentifier);\n+\n+                for (String recipientIdentifier : giverRecipientEntry.getValue()) {\n+                    // recipient\n+                    CourseRoster.ParticipantInfo recipientInfo = courseRoster.getInfoForIdentifier(recipientIdentifier);\n+\n+                    // skip responses not in current section\n+                    if (section != null\n+                            && !giverInfo.getSectionName().equals(section)\n+                                    && !recipientInfo.getSectionName().equals(section)) {\n+                        continue;\n+                    }\n+\n+                    FeedbackResponseAttributes missingResponse =\n+                            FeedbackResponseAttributes.builder(questionId, giverIdentifier, recipientIdentifier)\n+                                    .withCourseId(feedbackSession.getCourseId())\n+                                    .withFeedbackSessionName(feedbackSession.getFeedbackSessionName())\n+                                    .withGiverSection(giverInfo.getSectionName())\n+                                    .withRecipientSection(recipientInfo.getSectionName())\n+                                    .withResponseDetails(new FeedbackTextResponseDetails(\n+                                                    Const.INSTRUCTOR_FEEDBACK_RESULTS_MISSING_RESPONSE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0796adefa39468c16f1039cdb19ad29911ca64d6"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2OTU0OQ==", "bodyText": "Actually it is hard. There is no \"default value factory\" in the backend (but there is one in the frontend)", "url": "https://github.com/TEAMMATES/teammates/pull/10158#discussion_r434869549", "createdAt": "2020-06-03T21:31:27Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/logic/core/FeedbackSessionsLogic.java", "diffHunk": "@@ -1623,6 +1632,92 @@ private void addCommentVisibilityToTable(\n         commentVisibilityTable.put(frc.getId(), commentVisibility);\n     }\n \n+    /**\n+     * Builds viewable missing responses for the session for instructor.\n+     *\n+     * @param instructor the instructor\n+     * @param responseVisibilityTable the visibility table which will be updated with the visibility of missing responses\n+     * @param feedbackSession the feedback sessions\n+     * @param relatedQuestionsMap the relevant questions\n+     * @param existingResponses existing responses\n+     * @param courseRoster the course roster\n+     * @param section if not null, will only build missing responses for the section\n+     * @return a list of missing responses for the session.\n+     */\n+    private List<FeedbackResponseAttributes> buildMissingResponses(\n+            InstructorAttributes instructor,\n+            Map<String, boolean[]> responseVisibilityTable,\n+            FeedbackSessionAttributes feedbackSession, Map<String, FeedbackQuestionAttributes> relatedQuestionsMap,\n+            List<FeedbackResponseAttributes> existingResponses, CourseRoster courseRoster, @Nullable String section) {\n+\n+        // first get all possible giver recipient pairs\n+        Map<String, Map<String, Set<String>>> completeGiverRecipientMap =\n+                fqLogic.buildCompleteGiverRecipientMap(feedbackSession, relatedQuestionsMap.values(), courseRoster);\n+\n+        // remove the existing responses in those pairs\n+        for (FeedbackResponseAttributes existingResponse : existingResponses) {\n+            Map<String, Set<String>> currGiverRecipientMap =\n+                    completeGiverRecipientMap.get(existingResponse.getFeedbackQuestionId());\n+            if (!currGiverRecipientMap.containsKey(existingResponse.getGiver())) {\n+                continue;\n+            }\n+            currGiverRecipientMap.get(existingResponse.getGiver()).remove(existingResponse.getRecipient());\n+        }\n+\n+        List<FeedbackResponseAttributes> missingResponses = new ArrayList<>();\n+        // build dummy responses\n+        for (Map.Entry<String, Map<String, Set<String>>> currGiverRecipientMapEntry\n+                : completeGiverRecipientMap.entrySet()) {\n+            FeedbackQuestionAttributes correspondingQuestion =\n+                    relatedQuestionsMap.get(currGiverRecipientMapEntry.getKey());\n+            String questionId = correspondingQuestion.getId();\n+\n+            for (Map.Entry<String, Set<String>> giverRecipientEntry\n+                    : currGiverRecipientMapEntry.getValue().entrySet()) {\n+                // giver\n+                String giverIdentifier = giverRecipientEntry.getKey();\n+                CourseRoster.ParticipantInfo giverInfo = courseRoster.getInfoForIdentifier(giverIdentifier);\n+\n+                for (String recipientIdentifier : giverRecipientEntry.getValue()) {\n+                    // recipient\n+                    CourseRoster.ParticipantInfo recipientInfo = courseRoster.getInfoForIdentifier(recipientIdentifier);\n+\n+                    // skip responses not in current section\n+                    if (section != null\n+                            && !giverInfo.getSectionName().equals(section)\n+                                    && !recipientInfo.getSectionName().equals(section)) {\n+                        continue;\n+                    }\n+\n+                    FeedbackResponseAttributes missingResponse =\n+                            FeedbackResponseAttributes.builder(questionId, giverIdentifier, recipientIdentifier)\n+                                    .withCourseId(feedbackSession.getCourseId())\n+                                    .withFeedbackSessionName(feedbackSession.getFeedbackSessionName())\n+                                    .withGiverSection(giverInfo.getSectionName())\n+                                    .withRecipientSection(recipientInfo.getSectionName())\n+                                    .withResponseDetails(new FeedbackTextResponseDetails(\n+                                                    Const.INSTRUCTOR_FEEDBACK_RESULTS_MISSING_RESPONSE))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNzQ5NQ=="}, "originalCommit": {"oid": "0796adefa39468c16f1039cdb19ad29911ca64d6"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyMzg2MA==", "bodyText": "Then it's ok to let it be like this", "url": "https://github.com/TEAMMATES/teammates/pull/10158#discussion_r435223860", "createdAt": "2020-06-04T12:44:40Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/logic/core/FeedbackSessionsLogic.java", "diffHunk": "@@ -1623,6 +1632,92 @@ private void addCommentVisibilityToTable(\n         commentVisibilityTable.put(frc.getId(), commentVisibility);\n     }\n \n+    /**\n+     * Builds viewable missing responses for the session for instructor.\n+     *\n+     * @param instructor the instructor\n+     * @param responseVisibilityTable the visibility table which will be updated with the visibility of missing responses\n+     * @param feedbackSession the feedback sessions\n+     * @param relatedQuestionsMap the relevant questions\n+     * @param existingResponses existing responses\n+     * @param courseRoster the course roster\n+     * @param section if not null, will only build missing responses for the section\n+     * @return a list of missing responses for the session.\n+     */\n+    private List<FeedbackResponseAttributes> buildMissingResponses(\n+            InstructorAttributes instructor,\n+            Map<String, boolean[]> responseVisibilityTable,\n+            FeedbackSessionAttributes feedbackSession, Map<String, FeedbackQuestionAttributes> relatedQuestionsMap,\n+            List<FeedbackResponseAttributes> existingResponses, CourseRoster courseRoster, @Nullable String section) {\n+\n+        // first get all possible giver recipient pairs\n+        Map<String, Map<String, Set<String>>> completeGiverRecipientMap =\n+                fqLogic.buildCompleteGiverRecipientMap(feedbackSession, relatedQuestionsMap.values(), courseRoster);\n+\n+        // remove the existing responses in those pairs\n+        for (FeedbackResponseAttributes existingResponse : existingResponses) {\n+            Map<String, Set<String>> currGiverRecipientMap =\n+                    completeGiverRecipientMap.get(existingResponse.getFeedbackQuestionId());\n+            if (!currGiverRecipientMap.containsKey(existingResponse.getGiver())) {\n+                continue;\n+            }\n+            currGiverRecipientMap.get(existingResponse.getGiver()).remove(existingResponse.getRecipient());\n+        }\n+\n+        List<FeedbackResponseAttributes> missingResponses = new ArrayList<>();\n+        // build dummy responses\n+        for (Map.Entry<String, Map<String, Set<String>>> currGiverRecipientMapEntry\n+                : completeGiverRecipientMap.entrySet()) {\n+            FeedbackQuestionAttributes correspondingQuestion =\n+                    relatedQuestionsMap.get(currGiverRecipientMapEntry.getKey());\n+            String questionId = correspondingQuestion.getId();\n+\n+            for (Map.Entry<String, Set<String>> giverRecipientEntry\n+                    : currGiverRecipientMapEntry.getValue().entrySet()) {\n+                // giver\n+                String giverIdentifier = giverRecipientEntry.getKey();\n+                CourseRoster.ParticipantInfo giverInfo = courseRoster.getInfoForIdentifier(giverIdentifier);\n+\n+                for (String recipientIdentifier : giverRecipientEntry.getValue()) {\n+                    // recipient\n+                    CourseRoster.ParticipantInfo recipientInfo = courseRoster.getInfoForIdentifier(recipientIdentifier);\n+\n+                    // skip responses not in current section\n+                    if (section != null\n+                            && !giverInfo.getSectionName().equals(section)\n+                                    && !recipientInfo.getSectionName().equals(section)) {\n+                        continue;\n+                    }\n+\n+                    FeedbackResponseAttributes missingResponse =\n+                            FeedbackResponseAttributes.builder(questionId, giverIdentifier, recipientIdentifier)\n+                                    .withCourseId(feedbackSession.getCourseId())\n+                                    .withFeedbackSessionName(feedbackSession.getFeedbackSessionName())\n+                                    .withGiverSection(giverInfo.getSectionName())\n+                                    .withRecipientSection(recipientInfo.getSectionName())\n+                                    .withResponseDetails(new FeedbackTextResponseDetails(\n+                                                    Const.INSTRUCTOR_FEEDBACK_RESULTS_MISSING_RESPONSE))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNzQ5NQ=="}, "originalCommit": {"oid": "0796adefa39468c16f1039cdb19ad29911ca64d6"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3774, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}