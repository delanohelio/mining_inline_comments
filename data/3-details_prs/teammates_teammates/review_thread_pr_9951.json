{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NjY1NTYw", "number": 9951, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDo0NDowOFrODfalhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNToyMzowM1rODfyCzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY4MDM2OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDo0NDowOFrOFpG38A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjoyNzo0MFrOFpanlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0ODU2MA==", "bodyText": "Looks like you are not using api-endpoints.ts anywhere?", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r378648560", "createdAt": "2020-02-13T04:44:08Z", "author": {"login": "xpdavid"}, "path": "build.gradle", "diffHunk": "@@ -162,6 +162,13 @@ task generateApiRequestFormat(type: cz.habarta.typescript.generator.gradle.Gener\n     outputFile = \"src/web/types/api-request.ts\"\n }\n \n+task generateApiEndPoints(type: cz.habarta.typescript.generator.gradle.GenerateTask) {\n+    classPatterns = [\n+            \"teammates.ui.webapi.endpoints.**\"\n+    ]\n+    outputFile = \"src/web/types/api-endpoints.ts\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ee55923ce53d1f26f3a9c2851282c93310758e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NjA4Ng==", "bodyText": "Yup, I was just thinking about how to standardize the endpoints on the frontend and backend, but I forgot to remove it. I will remove it.\nOn a related note, it seems the current typescript generator can only convert Java classes to Typescript interfaces, so I can't use it to convert the existing endpoints in Const.java to a string : string mapping in the  api-endpoints.ts file. I've been searching for gradle plugins that can do that, but there doesn't seem to be any, so I am considering writing a gradle task to do that. Do you have any suggestions?", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r378696086", "createdAt": "2020-02-13T07:47:09Z", "author": {"login": "tiuweehan"}, "path": "build.gradle", "diffHunk": "@@ -162,6 +162,13 @@ task generateApiRequestFormat(type: cz.habarta.typescript.generator.gradle.Gener\n     outputFile = \"src/web/types/api-request.ts\"\n }\n \n+task generateApiEndPoints(type: cz.habarta.typescript.generator.gradle.GenerateTask) {\n+    classPatterns = [\n+            \"teammates.ui.webapi.endpoints.**\"\n+    ]\n+    outputFile = \"src/web/types/api-endpoints.ts\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0ODU2MA=="}, "originalCommit": {"oid": "68ee55923ce53d1f26f3a9c2851282c93310758e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc2NDA3Ng==", "bodyText": "Ok after some more searching I think I found something that might work. I'll give it a try first", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r378764076", "createdAt": "2020-02-13T10:10:19Z", "author": {"login": "tiuweehan"}, "path": "build.gradle", "diffHunk": "@@ -162,6 +162,13 @@ task generateApiRequestFormat(type: cz.habarta.typescript.generator.gradle.Gener\n     outputFile = \"src/web/types/api-request.ts\"\n }\n \n+task generateApiEndPoints(type: cz.habarta.typescript.generator.gradle.GenerateTask) {\n+    classPatterns = [\n+            \"teammates.ui.webapi.endpoints.**\"\n+    ]\n+    outputFile = \"src/web/types/api-endpoints.ts\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0ODU2MA=="}, "originalCommit": {"oid": "68ee55923ce53d1f26f3a9c2851282c93310758e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4NzE0OQ==", "bodyText": "Yup seems to be working! I created a new gradle task called generateApiEndpoints that will convert the enum values in src/main/java/teammates/ui/webapi/endpoints/ResourceEndpoints.java to a typescript enum in api-endpoints.ts called ResourceEndpoints.\nThis is how the ResourceEndpoints.java file looks like:\npackage teammates.ui.webapi.endpoints;\n\nimport com.fasterxml.jackson.annotation.JsonValue;\nimport teammates.common.util.Const.ResourceURIs;\n\npublic enum ResourceEndpoints {\n    URI_PREFIX(ResourceURIs.URI_PREFIX),\n    LOGOUT(ResourceURIs.LOGOUT),\n    DATABUNDLE(ResourceURIs.DATABUNDLE),\n    EXCEPTION(ResourceURIs.EXCEPTION),\n    ERROR_REPORT(ResourceURIs.ERROR_REPORT),\n    AUTH(ResourceURIs.AUTH),\n    ACCOUNT(ResourceURIs.ACCOUNT),\n    ACCOUNTS_SEARCH(ResourceURIs.ACCOUNTS_SEARCH),\n    ACCOUNT_RESET(ResourceURIs.ACCOUNT_RESET),\n    ACCOUNT_DOWNGRADE(ResourceURIs.ACCOUNT_DOWNGRADE),\n    RESPONSE_COMMENT(ResourceURIs.RESPONSE_COMMENT),\n    COURSE(ResourceURIs.COURSE),\n    COURSE_ARCHIVE(ResourceURIs.COURSE_ARCHIVE),\n    BIN_COURSE(ResourceURIs.BIN_COURSE),\n    COURSE_SECTIONS(ResourceURIs.COURSE_SECTIONS),\n    COURSES(ResourceURIs.COURSES),\n    INSTRUCTORS(ResourceURIs.INSTRUCTORS),\n    INSTRUCTOR(ResourceURIs.INSTRUCTOR),\n    INSTRUCTOR_PRIVILEGE(ResourceURIs.INSTRUCTOR_PRIVILEGE),\n    RESULT(ResourceURIs.RESULT),\n    STUDENTS(ResourceURIs.STUDENTS),\n    STUDENT(ResourceURIs.STUDENT),\n    SESSIONS_ONGOING(ResourceURIs.SESSIONS_ONGOING),\n    SESSION(ResourceURIs.SESSION),\n    SESSION_PUBLISH(ResourceURIs.SESSION_PUBLISH),\n    SESSION_REMIND_SUBMISSION(ResourceURIs.SESSION_REMIND_SUBMISSION),\n    SESSION_REMIND_RESULT(ResourceURIs.SESSION_REMIND_RESULT),\n    SESSION_STATS(ResourceURIs.SESSION_STATS),\n    SESSION_SUBMITTED_GIVER_SET(ResourceURIs.SESSION_SUBMITTED_GIVER_SET),\n    SESSIONS(ResourceURIs.SESSIONS),\n    BIN_SESSION(ResourceURIs.BIN_SESSION),\n    QUESTIONS(ResourceURIs.QUESTIONS),\n    QUESTION_RECIPIENTS(ResourceURIs.QUESTION_RECIPIENTS),\n    RESPONSE(ResourceURIs.RESPONSE),\n    RESPONSES(ResourceURIs.RESPONSES),\n    HAS_RESPONSES(ResourceURIs.HAS_RESPONSES),\n    SUBMISSION_CONFIRMATION(ResourceURIs.SUBMISSION_CONFIRMATION),\n    JOIN(ResourceURIs.JOIN),\n    JOIN_REMIND(ResourceURIs.JOIN_REMIND),\n    TIMEZONE(ResourceURIs.TIMEZONE),\n    LOCAL_DATE_TIME(ResourceURIs.LOCAL_DATE_TIME),\n    SESSION_LINKS_RECOVERY(ResourceURIs.SESSION_LINKS_RECOVERY),\n    NATIONALITIES(ResourceURIs.NATIONALITIES),\n    STUDENT_PROFILE_PICTURE(ResourceURIs.STUDENT_PROFILE_PICTURE),\n    STUDENT_PROFILE(ResourceURIs.STUDENT_PROFILE),\n    STUDENTS_CSV(ResourceURIs.STUDENTS_CSV),\n    STUDENTS_AND_FEEDBACK_SESSION_DATA_SEARCH(ResourceURIs.STUDENTS_AND_FEEDBACK_SESSION_DATA_SEARCH),\n    COURSE_ENROLL_STUDENTS(ResourceURIs.COURSE_ENROLL_STUDENTS);\n\n    ResourceEndpoints(String s) {\n        this.url = s;\n    }\n    private final String url;\n\n    @JsonValue\n    public String getUrl() {\n        return url;\n    }\n}\n\nAnd this is how the resulting api-endpoints.ts file looks like:\nexport enum ResourceEndpoints {\n  URI_PREFIX = \"/webapi\",\n  LOGOUT = \"/logout\",\n  DATABUNDLE = \"/databundle\",\n  EXCEPTION = \"/exception\",\n  ERROR_REPORT = \"/errorreport\",\n  AUTH = \"/auth\",\n  ACCOUNT = \"/account\",\n  ACCOUNTS_SEARCH = \"/accounts/search\",\n  ACCOUNT_RESET = \"/account/reset\",\n  ACCOUNT_DOWNGRADE = \"/account/downgrade\",\n  RESPONSE_COMMENT = \"/responsecomment\",\n  COURSE = \"/course\",\n  COURSE_ARCHIVE = \"/course/archive\",\n  BIN_COURSE = \"/bin/course\",\n  COURSE_SECTIONS = \"/course/sections\",\n  COURSES = \"/courses\",\n  INSTRUCTORS = \"/instructors\",\n  INSTRUCTOR = \"/instructor\",\n  INSTRUCTOR_PRIVILEGE = \"/instructor/privilege\",\n  RESULT = \"/result\",\n  STUDENTS = \"/students\",\n  STUDENT = \"/student\",\n  SESSIONS_ONGOING = \"/sessions/ongoing\",\n  SESSION = \"/session\",\n  SESSION_PUBLISH = \"/session/publish\",\n  SESSION_REMIND_SUBMISSION = \"/session/remind/submission\",\n  SESSION_REMIND_RESULT = \"/session/remind/result\",\n  SESSION_STATS = \"/session/stats\",\n  SESSION_SUBMITTED_GIVER_SET = \"/session/submitted/giverset\",\n  SESSIONS = \"/sessions\",\n  BIN_SESSION = \"/bin/session\",\n  QUESTIONS = \"/questions\",\n  QUESTION_RECIPIENTS = \"/question/recipients\",\n  RESPONSE = \"/response\",\n  RESPONSES = \"/responses\",\n  HAS_RESPONSES = \"/hasResponses\",\n  SUBMISSION_CONFIRMATION = \"/submission/confirmation\",\n  JOIN = \"/join\",\n  JOIN_REMIND = \"/join/remind\",\n  TIMEZONE = \"/timezone\",\n  LOCAL_DATE_TIME = \"/localdatetime\",\n  SESSION_LINKS_RECOVERY = \"/sessionlinksrecovery\",\n  NATIONALITIES = \"/nationalities\",\n  STUDENT_PROFILE_PICTURE = \"/student/profilePic\",\n  STUDENT_PROFILE = \"/student/profile\",\n  STUDENTS_CSV = \"/students/csv\",\n  STUDENTS_AND_FEEDBACK_SESSION_DATA_SEARCH = \"/studentsAndSessionData/search\",\n  COURSE_ENROLL_STUDENTS = \"/course/enroll/students\",\n}\nWhat do you think?", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r378787149", "createdAt": "2020-02-13T10:53:07Z", "author": {"login": "tiuweehan"}, "path": "build.gradle", "diffHunk": "@@ -162,6 +162,13 @@ task generateApiRequestFormat(type: cz.habarta.typescript.generator.gradle.Gener\n     outputFile = \"src/web/types/api-request.ts\"\n }\n \n+task generateApiEndPoints(type: cz.habarta.typescript.generator.gradle.GenerateTask) {\n+    classPatterns = [\n+            \"teammates.ui.webapi.endpoints.**\"\n+    ]\n+    outputFile = \"src/web/types/api-endpoints.ts\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0ODU2MA=="}, "originalCommit": {"oid": "68ee55923ce53d1f26f3a9c2851282c93310758e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk3MjA1NA==", "bodyText": "Nice work!", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r378972054", "createdAt": "2020-02-13T16:27:40Z", "author": {"login": "xpdavid"}, "path": "build.gradle", "diffHunk": "@@ -162,6 +162,13 @@ task generateApiRequestFormat(type: cz.habarta.typescript.generator.gradle.Gener\n     outputFile = \"src/web/types/api-request.ts\"\n }\n \n+task generateApiEndPoints(type: cz.habarta.typescript.generator.gradle.GenerateTask) {\n+    classPatterns = [\n+            \"teammates.ui.webapi.endpoints.**\"\n+    ]\n+    outputFile = \"src/web/types/api-endpoints.ts\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0ODU2MA=="}, "originalCommit": {"oid": "68ee55923ce53d1f26f3a9c2851282c93310758e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY4MjUzOnYy", "diffSide": "RIGHT", "path": "src/web/services/nationalities.service.spec.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDo0NTozNVrOFpG5JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDo0NTozNVrOFpG5JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0ODg2OQ==", "bodyText": "Will this pass the CI? You may need mock httpRequestService or the API request will be sent?", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r378648869", "createdAt": "2020-02-13T04:45:35Z", "author": {"login": "xpdavid"}, "path": "src/web/services/nationalities.service.spec.ts", "diffHunk": "@@ -0,0 +1,22 @@\n+import { TestBed } from '@angular/core/testing';\n+\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { NationalitiesService } from './nationalities.service';\n+\n+describe('NationalitiesService', () => {\n+  beforeEach(() => TestBed.configureTestingModule({\n+    imports: [\n+      HttpClientTestingModule,\n+    ],\n+  }));\n+\n+  it('should be created', () => {\n+    const service: NationalitiesService = TestBed.get(NationalitiesService);\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should return non-empty list of nationalities', () => {\n+    const service: NationalitiesService = TestBed.get(NationalitiesService);\n+    expect(service.getNationalities()).toBeTruthy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ee55923ce53d1f26f3a9c2851282c93310758e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY4Mzc4OnYy", "diffSide": "RIGHT", "path": "src/web/services/instructor.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDo0NjoxNlrOFpG52A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDo0NjoxNlrOFpG52A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0OTA0OA==", "bodyText": "Let's add a (trivial) test for this method also?", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r378649048", "createdAt": "2020-02-13T04:46:16Z", "author": {"login": "xpdavid"}, "path": "src/web/services/instructor.service.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import { Injectable } from '@angular/core';\n+import { Observable } from 'rxjs';\n+import { Instructors } from '../types/api-output';\n+import { HttpRequestService } from './http-request.service';\n+\n+/**\n+ * Handles instructor related logic provision.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class InstructorService {\n+\n+  constructor(private httpRequestService: HttpRequestService) { }\n+\n+  /**\n+   * Get a list of instructors of a course by calling API.\n+   */\n+  getInstructorsFromCourse(courseId: string): Observable<Instructors> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ee55923ce53d1f26f3a9c2851282c93310758e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY4NDE2OnYy", "diffSide": "RIGHT", "path": "src/web/services/course.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDo0NjoyOFrOFpG6BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDo0NjoyOFrOFpG6BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0OTA5Mg==", "bodyText": "Same here", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r378649092", "createdAt": "2020-02-13T04:46:28Z", "author": {"login": "xpdavid"}, "path": "src/web/services/course.service.ts", "diffHunk": "@@ -136,16 +146,28 @@ export class CourseService {\n   }\n \n   /**\n-   * Join a course by calling API.\n+   * Get the status of whether the entity has joined the course by calling API.\n    */\n-  joinCourse(regKey: string, entityType: string): Observable<JoinStatus> {\n+  getJoinCourseStatus(regKey: string, entityType: string): Observable<JoinStatus> {\n     const paramMap: { [key: string]: string } = {\n       key: regKey,\n       entitytype: entityType,\n     };\n     return this.httpRequestService.get('/join', paramMap);\n   }\n \n+  /**\n+   * Join a course by calling API.\n+   */\n+  joinCourse(regKey: string, entityType: string, institute: string): Observable<any> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ee55923ce53d1f26f3a9c2851282c93310758e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY4NDMzOnYy", "diffSide": "RIGHT", "path": "src/web/services/course.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDo0NjozNVrOFpG6Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDo0NjozNVrOFpG6Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0OTExNA==", "bodyText": "Same here", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r378649114", "createdAt": "2020-02-13T04:46:35Z", "author": {"login": "xpdavid"}, "path": "src/web/services/course.service.ts", "diffHunk": "@@ -38,6 +38,16 @@ export class CourseService {\n     return this.httpRequestService.get('/course', paramMap);\n   }\n \n+  /**\n+   * Gets all course data for a student by calling API.\n+   */\n+  getAllCoursesAsStudent(): Observable<Courses> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ee55923ce53d1f26f3a9c2851282c93310758e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjA5NDczOnYy", "diffSide": "RIGHT", "path": "static-analysis/teammates-checkstyle.xml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDoxMToxM1rOFpn4-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNDozNzoxMVrOFprb8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4OTQ5OQ==", "bodyText": "Added this line to suppress missing javadoc warnings for enum values\ncheckstyle/checkstyle#1669", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r379189499", "createdAt": "2020-02-14T00:11:13Z", "author": {"login": "tiuweehan"}, "path": "static-analysis/teammates-checkstyle.xml", "diffHunk": "@@ -141,6 +141,7 @@\n         <module name=\"SingleLineJavadoc\"/>\n         <module name=\"JavadocVariable\">\n             <property name=\"scope\" value=\"public\"/>\n+            <property name=\"tokens\" value=\"VARIABLE_DEF\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bedc1c89164ae25b17b3d21645e3244a6a4a7801"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4OTc4Mg==", "bodyText": "I think you should disable it for that file/section instead of disabling it for the whole project.", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r379189782", "createdAt": "2020-02-14T00:12:14Z", "author": {"login": "xpdavid"}, "path": "static-analysis/teammates-checkstyle.xml", "diffHunk": "@@ -141,6 +141,7 @@\n         <module name=\"SingleLineJavadoc\"/>\n         <module name=\"JavadocVariable\">\n             <property name=\"scope\" value=\"public\"/>\n+            <property name=\"tokens\" value=\"VARIABLE_DEF\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4OTQ5OQ=="}, "originalCommit": {"oid": "bedc1c89164ae25b17b3d21645e3244a6a4a7801"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5MjUwNQ==", "bodyText": "Makes sense. I have suppressed it in teammates-checkstyle-suppressions.xml instead", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r379192505", "createdAt": "2020-02-14T00:22:24Z", "author": {"login": "tiuweehan"}, "path": "static-analysis/teammates-checkstyle.xml", "diffHunk": "@@ -141,6 +141,7 @@\n         <module name=\"SingleLineJavadoc\"/>\n         <module name=\"JavadocVariable\">\n             <property name=\"scope\" value=\"public\"/>\n+            <property name=\"tokens\" value=\"VARIABLE_DEF\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4OTQ5OQ=="}, "originalCommit": {"oid": "bedc1c89164ae25b17b3d21645e3244a6a4a7801"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5MzI4Mw==", "bodyText": "https://checkstyle.sourceforge.io/config_annotation.html#SuppressWarnings is more straight-forward? I think teammates-checkstyle-suppressions.xml is not supposed to be used in that way. It contains TODO works instead.", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r379193283", "createdAt": "2020-02-14T00:25:30Z", "author": {"login": "xpdavid"}, "path": "static-analysis/teammates-checkstyle.xml", "diffHunk": "@@ -141,6 +141,7 @@\n         <module name=\"SingleLineJavadoc\"/>\n         <module name=\"JavadocVariable\">\n             <property name=\"scope\" value=\"public\"/>\n+            <property name=\"tokens\" value=\"VARIABLE_DEF\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4OTQ5OQ=="}, "originalCommit": {"oid": "bedc1c89164ae25b17b3d21645e3244a6a4a7801"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0NzYwMQ==", "bodyText": "Ahh I didn't realize. I have changed to use comments instead. Thanks for clarifying!", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r379247601", "createdAt": "2020-02-14T04:37:11Z", "author": {"login": "tiuweehan"}, "path": "static-analysis/teammates-checkstyle.xml", "diffHunk": "@@ -141,6 +141,7 @@\n         <module name=\"SingleLineJavadoc\"/>\n         <module name=\"JavadocVariable\">\n             <property name=\"scope\" value=\"public\"/>\n+            <property name=\"tokens\" value=\"VARIABLE_DEF\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4OTQ5OQ=="}, "originalCommit": {"oid": "bedc1c89164ae25b17b3d21645e3244a6a4a7801"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjUyMzY0OnYy", "diffSide": "RIGHT", "path": "src/web/services/course.service.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNToyMzowM1rOFpr55w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNzoyNDo0NVrOFptkJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI1NTI3MQ==", "bodyText": "@xpdavid Do you think it is alright to do it this way?", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r379255271", "createdAt": "2020-02-14T05:23:03Z", "author": {"login": "tiuweehan"}, "path": "src/web/services/course.service.ts", "diffHunk": "@@ -1,9 +1,20 @@\n import { Injectable } from '@angular/core';\n import { forkJoin, Observable } from 'rxjs';\n import { map } from 'rxjs/operators';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n import { Course, CourseArchive, Courses,  HasResponses, JoinStatus, MessageOutput } from '../types/api-output';\n import { CourseArchiveRequest, CourseCreateRequest, CourseUpdateRequest } from '../types/api-request';\n import { HttpRequestService } from './http-request.service';\n+const {\n+  BIN_COURSE,\n+  COURSE,\n+  COURSES,\n+  COURSE_ARCHIVE,\n+  HAS_RESPONSES,\n+  JOIN,\n+  JOIN_REMIND,\n+  STUDENT,\n+}: typeof ResourceEndpoints = ResourceEndpoints;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5491a40e1c1c2895f04095b36f05c0d0c9bdec"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MTE0MA==", "bodyText": "While it is verbose, maybe we can use ResourceEndpoints.COURSE to indicate that it's an endpoint. I am fine with the current implementation also.", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r379281140", "createdAt": "2020-02-14T07:20:05Z", "author": {"login": "xpdavid"}, "path": "src/web/services/course.service.ts", "diffHunk": "@@ -1,9 +1,20 @@\n import { Injectable } from '@angular/core';\n import { forkJoin, Observable } from 'rxjs';\n import { map } from 'rxjs/operators';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n import { Course, CourseArchive, Courses,  HasResponses, JoinStatus, MessageOutput } from '../types/api-output';\n import { CourseArchiveRequest, CourseCreateRequest, CourseUpdateRequest } from '../types/api-request';\n import { HttpRequestService } from './http-request.service';\n+const {\n+  BIN_COURSE,\n+  COURSE,\n+  COURSES,\n+  COURSE_ARCHIVE,\n+  HAS_RESPONSES,\n+  JOIN,\n+  JOIN_REMIND,\n+  STUDENT,\n+}: typeof ResourceEndpoints = ResourceEndpoints;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI1NTI3MQ=="}, "originalCommit": {"oid": "3e5491a40e1c1c2895f04095b36f05c0d0c9bdec"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MTcyNQ==", "bodyText": "Ok! I will use ResourceEndpoints.COURSE then. I will refactor for the rest of the student modules to use api-endpoints.ts, then this PR should (hopefully) be ready. Thanks!", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r379281725", "createdAt": "2020-02-14T07:22:09Z", "author": {"login": "tiuweehan"}, "path": "src/web/services/course.service.ts", "diffHunk": "@@ -1,9 +1,20 @@\n import { Injectable } from '@angular/core';\n import { forkJoin, Observable } from 'rxjs';\n import { map } from 'rxjs/operators';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n import { Course, CourseArchive, Courses,  HasResponses, JoinStatus, MessageOutput } from '../types/api-output';\n import { CourseArchiveRequest, CourseCreateRequest, CourseUpdateRequest } from '../types/api-request';\n import { HttpRequestService } from './http-request.service';\n+const {\n+  BIN_COURSE,\n+  COURSE,\n+  COURSES,\n+  COURSE_ARCHIVE,\n+  HAS_RESPONSES,\n+  JOIN,\n+  JOIN_REMIND,\n+  STUDENT,\n+}: typeof ResourceEndpoints = ResourceEndpoints;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI1NTI3MQ=="}, "originalCommit": {"oid": "3e5491a40e1c1c2895f04095b36f05c0d0c9bdec"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MjQ3MA==", "bodyText": "Also should we change ResourceEndpoints to ResourceEndpoint to be singular, as per the convention for enums? Though I realize we are using mostly plural class names in Const.java", "url": "https://github.com/TEAMMATES/teammates/pull/9951#discussion_r379282470", "createdAt": "2020-02-14T07:24:45Z", "author": {"login": "tiuweehan"}, "path": "src/web/services/course.service.ts", "diffHunk": "@@ -1,9 +1,20 @@\n import { Injectable } from '@angular/core';\n import { forkJoin, Observable } from 'rxjs';\n import { map } from 'rxjs/operators';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n import { Course, CourseArchive, Courses,  HasResponses, JoinStatus, MessageOutput } from '../types/api-output';\n import { CourseArchiveRequest, CourseCreateRequest, CourseUpdateRequest } from '../types/api-request';\n import { HttpRequestService } from './http-request.service';\n+const {\n+  BIN_COURSE,\n+  COURSE,\n+  COURSES,\n+  COURSE_ARCHIVE,\n+  HAS_RESPONSES,\n+  JOIN,\n+  JOIN_REMIND,\n+  STUDENT,\n+}: typeof ResourceEndpoints = ResourceEndpoints;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI1NTI3MQ=="}, "originalCommit": {"oid": "3e5491a40e1c1c2895f04095b36f05c0d0c9bdec"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4057, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}