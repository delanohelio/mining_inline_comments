{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NjI5NDY4", "number": 10218, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTo1NjowNlrOEHaCtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDo0ODowM1rOEHxllA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjAyMTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/GetAuthInfoAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTo1NjowNlrOGmv6tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTowNjowNVrOGnNaYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NDE0OA==", "bodyText": "The url param should be in lowercase?", "url": "https://github.com/TEAMMATES/teammates/pull/10218#discussion_r443284148", "createdAt": "2020-06-22T01:56:06Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/action/GetAuthInfoAction.java", "diffHunk": "@@ -32,17 +32,26 @@ public void checkSpecificAccessControl() {\n     @Override\n     public ActionResult execute() {\n         String frontendUrl = getRequestParamValue(\"frontendUrl\");\n+        String nextUrl = getRequestParamValue(\"nextUrl\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c055bb7139d598da030e683943e98a1b9bc745"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NzA0OA==", "bodyText": "Look at the line before it.", "url": "https://github.com/TEAMMATES/teammates/pull/10218#discussion_r443487048", "createdAt": "2020-06-22T11:15:57Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/ui/webapi/action/GetAuthInfoAction.java", "diffHunk": "@@ -32,17 +32,26 @@ public void checkSpecificAccessControl() {\n     @Override\n     public ActionResult execute() {\n         String frontendUrl = getRequestParamValue(\"frontendUrl\");\n+        String nextUrl = getRequestParamValue(\"nextUrl\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NDE0OA=="}, "originalCommit": {"oid": "59c055bb7139d598da030e683943e98a1b9bc745"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2NzM5NQ==", "bodyText": "I notice that but all (maybe) others actions use lowercase url params (see Const#ParamsNames)", "url": "https://github.com/TEAMMATES/teammates/pull/10218#discussion_r443767395", "createdAt": "2020-06-22T19:06:05Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/action/GetAuthInfoAction.java", "diffHunk": "@@ -32,17 +32,26 @@ public void checkSpecificAccessControl() {\n     @Override\n     public ActionResult execute() {\n         String frontendUrl = getRequestParamValue(\"frontendUrl\");\n+        String nextUrl = getRequestParamValue(\"nextUrl\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NDE0OA=="}, "originalCommit": {"oid": "59c055bb7139d598da030e683943e98a1b9bc745"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjA2MjkwOnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-session/session-submission-page/session-submission-page.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjozMjoxMlrOGmwT-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjozMjoxMlrOGmwT-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5MDYxOA==", "bodyText": "I am wondering why navigationService is not used?\nIn addition, we can be more specific: Instead of remove what is in the URL, we construct the URL more explicitly. In this case, I think we only need courseid and fsname", "url": "https://github.com/TEAMMATES/teammates/pull/10218#discussion_r443290618", "createdAt": "2020-06-22T02:32:12Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-session/session-submission-page/session-submission-page.component.ts", "diffHunk": "@@ -143,13 +150,48 @@ export class SessionSubmissionPageComponent implements OnInit, AfterViewInit {\n         this.isSubmissionFormsDisabled = true;\n       }\n \n-      if (this.regKey) {\n-        // public page using regKey, fetch CSRF token\n-        this.authService.getAuthUser().subscribe(() => {}, () => {});\n-      }\n-\n-      this.loadPersonName();\n-      this.loadFeedbackSession();\n+      const nextUrl: string = `${window.location.pathname}${window.location.search}`;\n+      this.authService.getAuthUser(undefined, nextUrl).subscribe((auth: AuthInfo) => {\n+        const isPreviewOrModeration: boolean = !!(auth.user && (this.moderatedPerson || this.previewAsPerson));\n+        if (this.regKey && !isPreviewOrModeration) {\n+          this.authService.getAuthRegkeyValidity(this.regKey, this.intent).subscribe((resp: RegkeyValidity) => {\n+            if (resp.isValid) {\n+              if (auth.user) {\n+                // The logged in user matches the registration key; redirect to the logged in URL\n+\n+                const loggedInUrl: string = window.location.href.replace('/web/sessions', '/web/student/sessions')\n+                    .replace(/key=[A-Z0-9]+(&?)/, '$1');\n+                window.location.href = loggedInUrl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfccd7b51b3623281ec2f69190b43cbd49fa261a"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjA3OTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/GetRegkeyValidityAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjo0NjowNVrOGmwdyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjo0NjowNVrOGmwdyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5MzEzMA==", "bodyText": "Might result in NPE when the regkey is not valid", "url": "https://github.com/TEAMMATES/teammates/pull/10218#discussion_r443293130", "createdAt": "2020-06-22T02:46:05Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/action/GetRegkeyValidityAction.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package teammates.ui.webapi.action;\n+\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.Const;\n+import teammates.common.util.StringHelper;\n+import teammates.ui.webapi.output.RegkeyValidityData;\n+import teammates.ui.webapi.request.Intent;\n+\n+/**\n+ * Action: checks whether the provided registration key is valid for the logged in user.\n+ *\n+ * <p>This does not log in or log out the user.\n+ */\n+public class GetRegkeyValidityAction extends Action {\n+\n+    @Override\n+    public AuthType getMinAuthLevel() {\n+        return AuthType.PUBLIC;\n+    }\n+\n+    @Override\n+    public void checkSpecificAccessControl() {\n+        // Regkey information is available to everyone\n+    }\n+\n+    @Override\n+    public ActionResult execute() {\n+        Intent intent = Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));\n+        String regkey = getNonNullRequestParamValue(Const.ParamsNames.REGKEY);\n+\n+        boolean isValid = true;\n+        boolean isLoggedIn = userInfo != null;\n+\n+        if (intent == Intent.STUDENT_SUBMISSION || intent == Intent.STUDENT_RESULT) {\n+            StudentAttributes student = logic.getStudentForRegistrationKey(regkey);\n+\n+            if (!StringHelper.isEmpty(student.googleId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aae37bdda50ed8c247c7742b14ad7eb58d984b2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjA4MzgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/RegkeyValidityData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjo0OToyN1rOGmwgYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjo0OToyN1rOGmwgYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5Mzc5Mw==", "bodyText": "Is this field used in the frontend?", "url": "https://github.com/TEAMMATES/teammates/pull/10218#discussion_r443293793", "createdAt": "2020-06-22T02:49:27Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/RegkeyValidityData.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package teammates.ui.webapi.output;\n+\n+/**\n+ * The API output format to represent if the registration key is valid for the logged in user (or lack thereof).\n+ */\n+public class RegkeyValidityData extends ApiOutput {\n+    private final boolean isValid;\n+    private final boolean isLoggedIn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aae37bdda50ed8c247c7742b14ad7eb58d984b2"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzI2Mzk5OnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-session/session-result-page/session-result-page.component.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTowMjozOFrOGm764A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxNTo0N1rOGm8S-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4MDgwMA==", "bodyText": "Actually just curious what's stopping them from manually navigating to /web/student/sessions? Is there a separate auth check on that page? I tried to explore the code base but couldn't figure out how page navigation and authentication works in Angular :\")", "url": "https://github.com/TEAMMATES/teammates/pull/10218#discussion_r443480800", "createdAt": "2020-06-22T11:02:38Z", "author": {"login": "madanalogy"}, "path": "src/web/app/pages-session/session-result-page/session-result-page.component.ts", "diffHunk": "@@ -43,41 +48,113 @@ export class SessionResultPageComponent implements OnInit {\n   questions: QuestionOutput[] = [];\n   formattedSessionOpeningTime: string = '';\n   formattedSessionClosingTime: string = '';\n+  personName: string = '';\n+  courseId: string = '';\n+  feedbackSessionName: string = '';\n+  regKey: string = '';\n \n-  constructor(private feedbackSessionsService: FeedbackSessionsService, private route: ActivatedRoute,\n-      private timezoneService: TimezoneService, private statusMessageService: StatusMessageService) {\n+  private backendUrl: string = environment.backendUrl;\n+\n+  constructor(private feedbackSessionsService: FeedbackSessionsService,\n+              private route: ActivatedRoute,\n+              private router: Router,\n+              private timezoneService: TimezoneService,\n+              private navigationService: NavigationService,\n+              private authService: AuthService,\n+              private studentService: StudentService,\n+              private statusMessageService: StatusMessageService) {\n     this.timezoneService.getTzVersion(); // import timezone service to load timezone data\n   }\n \n   ngOnInit(): void {\n     this.route.queryParams.subscribe((queryParams: any) => {\n-      const { courseid: courseId, fsname: feedbackSessionName }: Record<string, string> = queryParams;\n-      this.feedbackSessionsService.getFeedbackSession({\n-        courseId,\n-        feedbackSessionName,\n+      this.courseId = queryParams.courseid;\n+      this.feedbackSessionName = queryParams.fsname;\n+      this.regKey = queryParams.key || '';\n+\n+      const nextUrl: string = `${window.location.pathname}${window.location.search}`;\n+      this.authService.getAuthUser(undefined, nextUrl).subscribe((auth: AuthInfo) => {\n+        if (this.regKey) {\n+          const intent: Intent = Intent.STUDENT_RESULT;\n+          this.authService.getAuthRegkeyValidity(this.regKey, intent).subscribe((resp: RegkeyValidity) => {\n+            if (resp.isValid) {\n+              if (auth.user) {\n+                // The logged in user matches the registration key; redirect to the logged in URL\n+\n+                const loggedInUrl: string = window.location.href.replace('/web/sessions', '/web/student/sessions')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aae37bdda50ed8c247c7742b14ad7eb58d984b2"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4Njk3MQ==", "bodyText": "Front-end: Student pages, instructor pages, and admin pages are all guarded and require login.\nBack-end: Only if the intent is right and the authentication is right (based on registration key or Google ID information stored in cookie) then data will be provided.\nSo it is secure in both aspects.", "url": "https://github.com/TEAMMATES/teammates/pull/10218#discussion_r443486971", "createdAt": "2020-06-22T11:15:47Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-session/session-result-page/session-result-page.component.ts", "diffHunk": "@@ -43,41 +48,113 @@ export class SessionResultPageComponent implements OnInit {\n   questions: QuestionOutput[] = [];\n   formattedSessionOpeningTime: string = '';\n   formattedSessionClosingTime: string = '';\n+  personName: string = '';\n+  courseId: string = '';\n+  feedbackSessionName: string = '';\n+  regKey: string = '';\n \n-  constructor(private feedbackSessionsService: FeedbackSessionsService, private route: ActivatedRoute,\n-      private timezoneService: TimezoneService, private statusMessageService: StatusMessageService) {\n+  private backendUrl: string = environment.backendUrl;\n+\n+  constructor(private feedbackSessionsService: FeedbackSessionsService,\n+              private route: ActivatedRoute,\n+              private router: Router,\n+              private timezoneService: TimezoneService,\n+              private navigationService: NavigationService,\n+              private authService: AuthService,\n+              private studentService: StudentService,\n+              private statusMessageService: StatusMessageService) {\n     this.timezoneService.getTzVersion(); // import timezone service to load timezone data\n   }\n \n   ngOnInit(): void {\n     this.route.queryParams.subscribe((queryParams: any) => {\n-      const { courseid: courseId, fsname: feedbackSessionName }: Record<string, string> = queryParams;\n-      this.feedbackSessionsService.getFeedbackSession({\n-        courseId,\n-        feedbackSessionName,\n+      this.courseId = queryParams.courseid;\n+      this.feedbackSessionName = queryParams.fsname;\n+      this.regKey = queryParams.key || '';\n+\n+      const nextUrl: string = `${window.location.pathname}${window.location.search}`;\n+      this.authService.getAuthUser(undefined, nextUrl).subscribe((auth: AuthInfo) => {\n+        if (this.regKey) {\n+          const intent: Intent = Intent.STUDENT_RESULT;\n+          this.authService.getAuthRegkeyValidity(this.regKey, intent).subscribe((resp: RegkeyValidity) => {\n+            if (resp.isValid) {\n+              if (auth.user) {\n+                // The logged in user matches the registration key; redirect to the logged in URL\n+\n+                const loggedInUrl: string = window.location.href.replace('/web/sessions', '/web/student/sessions')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4MDgwMA=="}, "originalCommit": {"oid": "3aae37bdda50ed8c247c7742b14ad7eb58d984b2"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTg3OTI0OnYy", "diffSide": "LEFT", "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDo0ODowM1rOGnViRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDo1Mzo0OVrOGnVoLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwMDQ4Ng==", "bodyText": "I'm assuming that with the new auth flow you can't access the results page as an admin? Just confirming, because this guard clause is being fixed in #9994", "url": "https://github.com/TEAMMATES/teammates/pull/10218#discussion_r443900486", "createdAt": "2020-06-23T00:48:03Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java", "diffHunk": "@@ -25,10 +25,6 @@ protected AuthType getMinAuthLevel() {\n \n     @Override\n     public void checkSpecificAccessControl() {\n-        if (userInfo.isAdmin) {\n-            return;\n-        }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f6001b8b8926841285b17ad6c654ac412ab492"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwMTk5Nw==", "bodyText": "There is no reason for admin to have this elevated privilege.", "url": "https://github.com/TEAMMATES/teammates/pull/10218#discussion_r443901997", "createdAt": "2020-06-23T00:53:49Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/ui/webapi/action/GetSessionResultsAction.java", "diffHunk": "@@ -25,10 +25,6 @@ protected AuthType getMinAuthLevel() {\n \n     @Override\n     public void checkSpecificAccessControl() {\n-        if (userInfo.isAdmin) {\n-            return;\n-        }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwMDQ4Ng=="}, "originalCommit": {"oid": "d7f6001b8b8926841285b17ad6c654ac412ab492"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3844, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}