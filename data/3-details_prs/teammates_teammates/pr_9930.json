{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NzkwNTA5", "number": 9930, "title": "[#9382] Add Access Control Tests for UpdateFeedbackResponseAction", "bodyText": "Part of #9382", "createdAt": "2020-01-28T01:55:50Z", "url": "https://github.com/TEAMMATES/teammates/pull/9930", "merged": true, "mergeCommit": {"oid": "87f9c7180f17083161986b3311cf3785e32a8494"}, "closed": true, "closedAt": "2020-02-11T06:25:28Z", "author": {"login": "madanalogy"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-nLgdAH2gAyMzY3NzkwNTA5OmU4NzIyNWQ2MzE5MDNhZjEzZWY1OWQ1OWJhODNlZjFkZTg2MGJkZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDIR_ogFqTM1NjM5MDQ4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e87225d631903af13ef59d59ba83ef1de860bdf6", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/e87225d631903af13ef59d59ba83ef1de860bdf6", "committedDate": "2020-01-28T01:37:06Z", "message": "Prepare draft test code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "619d77e8f694433c41d9f8e973fdd82595be568f", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/619d77e8f694433c41d9f8e973fdd82595be568f", "committedDate": "2020-01-29T12:45:26Z", "message": "Implement generic access control tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwOTc3MzY3", "url": "https://github.com/TEAMMATES/teammates/pull/9930#pullrequestreview-350977367", "createdAt": "2020-01-30T16:47:32Z", "commit": {"oid": "a1bca228674adeeff92cdaf4ff31cad633f1a459"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo0NzozM1rOFjyI1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo1NToxMVrOFjyZzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NTk0MQ==", "bodyText": "verifyCannotAccess(studentAccessOtherTeamParams)", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373065941", "createdAt": "2020-01-30T16:47:33Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -158,7 +215,273 @@ public void testExecute_instructorFeedbackSubmissionMcqGenerateOptionsForTeams_s\n     @Test\n     @Override\n     protected void testAccessControl() throws Exception {\n-        // TODO\n+\n+        ______TS(\"wrong giver type\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] wrongGiverTypeParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        verifyCannotAccess(wrongGiverTypeParams);\n+\n+        ______TS(\"preview mode, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        String[] previewParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.PREVIEWAS, instructor1OfCourse1.email,\n+        };\n+\n+        verifyCannotAccess(previewParams);\n+\n+        ______TS(\"response in session not open, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        assertFalse(closedSession.isOpened());\n+\n+        String[] sessionNotOpenParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, responseInClosedSession.getId(),\n+        };\n+\n+        verifyCannotAccess(sessionNotOpenParams);\n+\n+        ______TS(\"Response contains question not intended shown to instructor, \"\n+                + \"moderated instructor should not be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        assertFalse(logic.getFeedbackQuestion(typicalResponse2.getFeedbackQuestionId())\n+                .getShowResponsesTo().contains(FeedbackParticipantType.INSTRUCTORS));\n+\n+        String[] invalidModeratedInstructorSubmissionParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse2.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, instructor1OfCourse1.getEmail(),\n+        };\n+\n+        verifyCannotAccess(invalidModeratedInstructorSubmissionParams);\n+\n+        ______TS(\"non-existent feedback response\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] nonExistParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, \"randomNonExistId\",\n+        };\n+\n+        assertThrows(EntityNotFoundException.class, () -> getAction(nonExistParams).checkAccessControl());\n+\n+        ______TS(\"Unknown intent, should not be accessible\");\n+\n+        loginAsInstructor(instructor2OfCourse1.getGoogleId());\n+\n+        String[] unknownIntentParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse3.getId(),\n+        };\n+\n+        assertThrows(InvalidHttpParameterException.class, () -> getAction(unknownIntentParams).checkAccessControl());\n+    }\n+\n+    @Test\n+    protected void testAccessControl_giverNotModeratedStudent_inaccessible() {\n+\n+        ______TS(\"Instructor moderates student's response, but response not given by moderated student, \"\n+                + \"should not be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        assertEquals(FeedbackParticipantType.STUDENTS,\n+                logic.getFeedbackQuestion(testModerateResponse.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student1InCourse1.getEmail(), testModerateResponse.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(instructor1OfCourse1.getEmail());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] moderatedStudentSubmissionParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, testModerateResponse.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, student1InCourse1.getEmail(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, moderatedStudentSubmissionParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_studentAccessOtherStudent_inaccessible() throws Exception {\n+\n+        ______TS(\"Student intends to access other person's response, should not be accessible\");\n+\n+        loginAsStudent(student2InCourse1.getGoogleId());\n+\n+        assertEquals(FeedbackParticipantType.STUDENTS,\n+                logic.getFeedbackQuestion(typicalResponse.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student2InCourse1.getEmail(), typicalResponse.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(typicalResponse.getRecipient());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] studentAccessOtherPersonParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, studentAccessOtherPersonParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_studentAccessOtherTeam_inaccessible() {\n+\n+        ______TS(\"Student intends to access other team's response, should not be accessible\");\n+\n+        loginAsStudent(student5InCourse1.getGoogleId());\n+\n+        assertEquals(FeedbackParticipantType.TEAMS,\n+                logic.getFeedbackQuestion(typicalResponse2.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student5InCourse1.getTeam(), typicalResponse2.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(student5InCourse1.getEmail());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] studentAccessOtherTeamParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse2.getId(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, studentAccessOtherTeamParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bca228674adeeff92cdaf4ff31cad633f1a459"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NzU1NQ==", "bodyText": "Already logged in?", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373067555", "createdAt": "2020-01-30T16:50:27Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -158,7 +215,273 @@ public void testExecute_instructorFeedbackSubmissionMcqGenerateOptionsForTeams_s\n     @Test\n     @Override\n     protected void testAccessControl() throws Exception {\n-        // TODO\n+\n+        ______TS(\"wrong giver type\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] wrongGiverTypeParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        verifyCannotAccess(wrongGiverTypeParams);\n+\n+        ______TS(\"preview mode, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        String[] previewParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.PREVIEWAS, instructor1OfCourse1.email,\n+        };\n+\n+        verifyCannotAccess(previewParams);\n+\n+        ______TS(\"response in session not open, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bca228674adeeff92cdaf4ff31cad633f1a459"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3MDI4NA==", "bodyText": "I think it would be good to enwrap this code into a helper method, since you're using it a lot. You can add things like recipient identifier as parameters and reuse the method instead of copy and pasting this.", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373070284", "createdAt": "2020-01-30T16:55:11Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -158,7 +215,273 @@ public void testExecute_instructorFeedbackSubmissionMcqGenerateOptionsForTeams_s\n     @Test\n     @Override\n     protected void testAccessControl() throws Exception {\n-        // TODO\n+\n+        ______TS(\"wrong giver type\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] wrongGiverTypeParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        verifyCannotAccess(wrongGiverTypeParams);\n+\n+        ______TS(\"preview mode, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        String[] previewParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.PREVIEWAS, instructor1OfCourse1.email,\n+        };\n+\n+        verifyCannotAccess(previewParams);\n+\n+        ______TS(\"response in session not open, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        assertFalse(closedSession.isOpened());\n+\n+        String[] sessionNotOpenParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, responseInClosedSession.getId(),\n+        };\n+\n+        verifyCannotAccess(sessionNotOpenParams);\n+\n+        ______TS(\"Response contains question not intended shown to instructor, \"\n+                + \"moderated instructor should not be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        assertFalse(logic.getFeedbackQuestion(typicalResponse2.getFeedbackQuestionId())\n+                .getShowResponsesTo().contains(FeedbackParticipantType.INSTRUCTORS));\n+\n+        String[] invalidModeratedInstructorSubmissionParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse2.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, instructor1OfCourse1.getEmail(),\n+        };\n+\n+        verifyCannotAccess(invalidModeratedInstructorSubmissionParams);\n+\n+        ______TS(\"non-existent feedback response\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] nonExistParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, \"randomNonExistId\",\n+        };\n+\n+        assertThrows(EntityNotFoundException.class, () -> getAction(nonExistParams).checkAccessControl());\n+\n+        ______TS(\"Unknown intent, should not be accessible\");\n+\n+        loginAsInstructor(instructor2OfCourse1.getGoogleId());\n+\n+        String[] unknownIntentParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse3.getId(),\n+        };\n+\n+        assertThrows(InvalidHttpParameterException.class, () -> getAction(unknownIntentParams).checkAccessControl());\n+    }\n+\n+    @Test\n+    protected void testAccessControl_giverNotModeratedStudent_inaccessible() {\n+\n+        ______TS(\"Instructor moderates student's response, but response not given by moderated student, \"\n+                + \"should not be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        assertEquals(FeedbackParticipantType.STUDENTS,\n+                logic.getFeedbackQuestion(testModerateResponse.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student1InCourse1.getEmail(), testModerateResponse.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(instructor1OfCourse1.getEmail());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] moderatedStudentSubmissionParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, testModerateResponse.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, student1InCourse1.getEmail(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, moderatedStudentSubmissionParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_studentAccessOtherStudent_inaccessible() throws Exception {\n+\n+        ______TS(\"Student intends to access other person's response, should not be accessible\");\n+\n+        loginAsStudent(student2InCourse1.getGoogleId());\n+\n+        assertEquals(FeedbackParticipantType.STUDENTS,\n+                logic.getFeedbackQuestion(typicalResponse.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student2InCourse1.getEmail(), typicalResponse.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(typicalResponse.getRecipient());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] studentAccessOtherPersonParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, studentAccessOtherPersonParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_studentAccessOtherTeam_inaccessible() {\n+\n+        ______TS(\"Student intends to access other team's response, should not be accessible\");\n+\n+        loginAsStudent(student5InCourse1.getGoogleId());\n+\n+        assertEquals(FeedbackParticipantType.TEAMS,\n+                logic.getFeedbackQuestion(typicalResponse2.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student5InCourse1.getTeam(), typicalResponse2.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(student5InCourse1.getEmail());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] studentAccessOtherTeamParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse2.getId(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, studentAccessOtherTeamParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_instructorAccessOtherGiver_inaccessible() {\n+\n+        ______TS(\"Instructor intends to access other person's response, should not be accessible\");\n+\n+        loginAsInstructor(instructor2OfCourse1.getGoogleId());\n+\n+        assertEquals(FeedbackParticipantType.SELF,\n+                logic.getFeedbackQuestion(typicalResponse3.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(instructor2OfCourse1.getEmail(), typicalResponse3.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(instructor2OfCourse1.getEmail());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] instructorAccessOtherPersonParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse3.getId(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, instructorAccessOtherPersonParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n     }\n \n+    @Test\n+    protected void testAccessControl_instructorAccessOwnResponse_accessible() {\n+\n+        ______TS(\"Instructor intends to access own response, should be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        assertEquals(instructor1OfCourse1.getEmail(), typicalResponse3.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(typicalResponse3.getRecipient());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bca228674adeeff92cdaf4ff31cad633f1a459"}, "originalPosition": 289}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODk3NzAw", "url": "https://github.com/TEAMMATES/teammates/pull/9930#pullrequestreview-351897700", "createdAt": "2020-02-01T18:32:10Z", "commit": {"oid": "ca4950d373cec823cc061f740b311b107717bb62"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxODozMjoxMFrOFkenlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxODozNjo1MlrOFkeogQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NDcxMA==", "bodyText": "Similar to the other tests, assert that a feedback response with ID \"randomNonExistId\" doesn't exist.", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373794710", "createdAt": "2020-02-01T18:32:10Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -155,10 +201,263 @@ public void testExecute_instructorFeedbackSubmissionMcqGenerateOptionsForTeams_s\n         AssertHelper.assertContains(Const.FeedbackQuestion.MCQ_ERROR_INVALID_OPTION, e.getMessage());\n     }\n \n+    private FeedbackResponseUpdateRequest getUpdateRequest(String recipientIdentifier) {\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(recipientIdentifier);\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+        return updateRequest;\n+    }\n+\n     @Test\n     @Override\n     protected void testAccessControl() throws Exception {\n-        // TODO\n+        // See individual test cases below\n+    }\n+\n+    @Test\n+    protected void testAccessControl_wrongGiver_inaccessible() {\n+\n+        ______TS(\"wrong giver type\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] wrongGiverTypeParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        verifyCannotAccess(wrongGiverTypeParams);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_previewMode_inaccessible() {\n+\n+        ______TS(\"preview mode, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        String[] previewParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.PREVIEWAS, instructor1OfCourse1.email,\n+        };\n+\n+        verifyCannotAccess(previewParams);\n+\n+    }\n+\n+    @Test\n+    protected void testAccessControl_responseSessionNotOpen_inaccessible() {\n+\n+        ______TS(\"response in session not open, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        assertFalse(closedSession.isOpened());\n+\n+        String[] sessionNotOpenParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, responseInClosedSession.getId(),\n+        };\n+\n+        verifyCannotAccess(sessionNotOpenParams);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_containsQuestionNotForInstructor_inaccessible() {\n+\n+        ______TS(\"Response contains question not intended shown to instructor, \"\n+                + \"moderated instructor should not be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        assertFalse(logic.getFeedbackQuestion(typicalResponse2.getFeedbackQuestionId())\n+                .getShowResponsesTo().contains(FeedbackParticipantType.INSTRUCTORS));\n+\n+        String[] invalidModeratedInstructorSubmissionParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse2.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, instructor1OfCourse1.getEmail(),\n+        };\n+\n+        verifyCannotAccess(invalidModeratedInstructorSubmissionParams);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_noFeedbackResponse_inaccessible() {\n+\n+        ______TS(\"non-existent feedback response\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] nonExistParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, \"randomNonExistId\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4950d373cec823cc061f740b311b107717bb62"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NDk0NQ==", "bodyText": "Let's try to reduce the amount of class variables used, where possible.\nclosedSession (and responseInClosedSession) is only used in one method (testAccessControl_responseSessionNotOpen_inaccessible), we can refactor all the code into there.\nAlso let's have more descriptive names for the responses. Instead of typicalResponse, how about \"student1ResponseToStudent1\".", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373794945", "createdAt": "2020-02-01T18:36:52Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,18 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;\n+    private StudentAttributes student5InCourse1;\n+    private InstructorAttributes instructor2OfCourse1;\n+    private InstructorAttributes instructor1OfCourse1;\n+    private FeedbackResponseAttributes typicalResponse;\n+    private FeedbackResponseAttributes testModerateResponse;\n+    private FeedbackResponseAttributes typicalResponse2;\n+    private FeedbackResponseAttributes typicalResponse3;\n+    private FeedbackResponseAttributes responseInClosedSession;\n+    private FeedbackSessionAttributes closedSession;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4950d373cec823cc061f740b311b107717bb62"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzQxMDU4", "url": "https://github.com/TEAMMATES/teammates/pull/9930#pullrequestreview-352741058", "createdAt": "2020-02-04T06:06:11Z", "commit": {"oid": "52581d7a03f61357c4e1c6fcff3537f084fb202c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjowNjoxMVrOFlI-Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjozMzozNlrOFlJV3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4ODYzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThrows(NullHttpParameterException.class, () -> getAction(missingResponseIdParams).checkAccessControl());\n          \n          \n            \n            verifyHttpParameterFailure(missingResponseIdParams);", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374488634", "createdAt": "2020-02-04T06:06:11Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -301,6 +302,34 @@ protected void testAccessControl_noFeedbackResponse_inaccessible() {\n         assertThrows(EntityNotFoundException.class, () -> getAction(nonExistParams).checkAccessControl());\n     }\n \n+    @Test\n+    protected void testAccessControl_missingIntent_inaccessible() {\n+\n+        ______TS(\"missing intent response parameters\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] missingIntentParams = new String[] {\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, \"randomNonExistId\",\n+        };\n+\n+        assertThrows(EntityNotFoundException.class, () -> getAction(missingIntentParams).checkAccessControl());\n+    }\n+\n+    @Test\n+    protected void testAccessControl_missingResponseId_inaccessible() {\n+\n+        ______TS(\"missing response id parameters\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] missingResponseIdParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+        };\n+\n+        assertThrows(NullHttpParameterException.class, () -> getAction(missingResponseIdParams).checkAccessControl());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52581d7a03f61357c4e1c6fcff3537f084fb202c"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4OTAyMw==", "bodyText": "A bit of a renaming, since this effectively comes down to a permission issue\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ______TS(\"Student intends to access own response, but logged in as instructor, should be accessible\");\n          \n          \n            \n                    ______TS(\"Instructor attempts to edit student's response with appropriate permission, should be accessible\");", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374489023", "createdAt": "2020-02-04T06:08:05Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -449,15 +497,58 @@ protected void testAccessControl_studentAccessOwnResponse_accessible() {\n \n         loginAsStudent(student1InCourse1.getGoogleId());\n \n-        assertEquals(student1InCourse1.getEmail(), typicalResponse.getGiver());\n+        assertEquals(student1InCourse1.getEmail(), student1ResponseToStudent1.getGiver());\n \n-        FeedbackResponseUpdateRequest updateRequest = getUpdateRequest(typicalResponse.getRecipient());\n+        FeedbackResponseUpdateRequest updateRequest = getUpdateRequest(student1ResponseToStudent1.getRecipient());\n \n         String[] studentAccessOwnPersonParams = new String[] {\n                 Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n-                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, student1ResponseToStudent1.getId(),\n         };\n \n         verifyCanAccess(updateRequest, studentAccessOwnPersonParams);\n     }\n+\n+    @Test\n+    protected void testAccessControl_instructorSubmitStudentResponse_accessible() {\n+\n+        ______TS(\"Student intends to access own response, but logged in as instructor, should be accessible\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52581d7a03f61357c4e1c6fcff3537f084fb202c"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5MDgzNA==", "bodyText": "Use a valid ID for this other than randomNonExistId. Then you shouldn't get the EntityNotFoundException and should instead properly get NullHttpParameterException.", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374490834", "createdAt": "2020-02-04T06:16:58Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -301,6 +302,34 @@ protected void testAccessControl_noFeedbackResponse_inaccessible() {\n         assertThrows(EntityNotFoundException.class, () -> getAction(nonExistParams).checkAccessControl());\n     }\n \n+    @Test\n+    protected void testAccessControl_missingIntent_inaccessible() {\n+\n+        ______TS(\"missing intent response parameters\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] missingIntentParams = new String[] {\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, \"randomNonExistId\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52581d7a03f61357c4e1c6fcff3537f084fb202c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NDY4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ______TS(\"Student intends to access own response, but logged in as instructor without permission, \"\n          \n          \n            \n                    ______TS(\"Instructor attempts to edit student's response, but without appropriate permission, \"", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374494685", "createdAt": "2020-02-04T06:33:36Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -449,15 +497,58 @@ protected void testAccessControl_studentAccessOwnResponse_accessible() {\n \n         loginAsStudent(student1InCourse1.getGoogleId());\n \n-        assertEquals(student1InCourse1.getEmail(), typicalResponse.getGiver());\n+        assertEquals(student1InCourse1.getEmail(), student1ResponseToStudent1.getGiver());\n \n-        FeedbackResponseUpdateRequest updateRequest = getUpdateRequest(typicalResponse.getRecipient());\n+        FeedbackResponseUpdateRequest updateRequest = getUpdateRequest(student1ResponseToStudent1.getRecipient());\n \n         String[] studentAccessOwnPersonParams = new String[] {\n                 Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n-                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, student1ResponseToStudent1.getId(),\n         };\n \n         verifyCanAccess(updateRequest, studentAccessOwnPersonParams);\n     }\n+\n+    @Test\n+    protected void testAccessControl_instructorSubmitStudentResponse_accessible() {\n+\n+        ______TS(\"Student intends to access own response, but logged in as instructor, should be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        assertEquals(student1InCourse1.getEmail(), student1ResponseToStudent1.getGiver());\n+\n+        FeedbackResponseUpdateRequest updateRequest = getUpdateRequest(student1ResponseToStudent1.getRecipient());\n+\n+        String[] studentAccessOwnPersonParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, student1ResponseToStudent1.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, student1InCourse1.getEmail(),\n+        };\n+\n+        verifyCanAccess(updateRequest, studentAccessOwnPersonParams);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_instructorSubmitStudentResponseNoPermission_inaccessible() {\n+\n+        ______TS(\"Student intends to access own response, but logged in as instructor without permission, \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52581d7a03f61357c4e1c6fcff3537f084fb202c"}, "originalPosition": 317}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a25561032de605c96c1056de1506ea7650b56e65", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/a25561032de605c96c1056de1506ea7650b56e65", "committedDate": "2020-02-04T10:41:14Z", "message": "Implement access control tests with update requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b830087fcf3d91333b8242439a19d69f12df05dc", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/b830087fcf3d91333b8242439a19d69f12df05dc", "committedDate": "2020-02-04T10:41:37Z", "message": "Refactor test helpers and test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae64e09fce7d743123ba6b84d9812e6d26851168", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ae64e09fce7d743123ba6b84d9812e6d26851168", "committedDate": "2020-02-04T10:41:51Z", "message": "Add additional test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f85af645827f574611420c7e1d5e7e4764eea915", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/f85af645827f574611420c7e1d5e7e4764eea915", "committedDate": "2020-02-04T09:38:36Z", "message": "move test cases"}, "afterCommit": {"oid": "ae64e09fce7d743123ba6b84d9812e6d26851168", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ae64e09fce7d743123ba6b84d9812e6d26851168", "committedDate": "2020-02-04T10:41:51Z", "message": "Add additional test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aba0486482fe7951288c7cead14e23f7a3d0d4c", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/0aba0486482fe7951288c7cead14e23f7a3d0d4c", "committedDate": "2020-02-04T10:43:58Z", "message": "Merge branch 'master' into 9382-test-java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDUxNDA4", "url": "https://github.com/TEAMMATES/teammates/pull/9930#pullrequestreview-353051408", "createdAt": "2020-02-04T15:09:52Z", "commit": {"oid": "0aba0486482fe7951288c7cead14e23f7a3d0d4c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTowOTo1MlrOFlXkrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo0NTozN1rOFlZCPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyNzg1Mw==", "bodyText": "This is only utilized in testAccessControl_studentAccessOtherStudent_inaccessible.", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374727853", "createdAt": "2020-02-04T15:09:52Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,16 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aba0486482fe7951288c7cead14e23f7a3d0d4c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyODMzNA==", "bodyText": "This is only utilized in testAccessControl_studentAccessOtherTeam_inaccessible", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374728334", "createdAt": "2020-02-04T15:10:34Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,16 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;\n+    private StudentAttributes student5InCourse1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aba0486482fe7951288c7cead14e23f7a3d0d4c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyODc4OQ==", "bodyText": "This is only utilized in testAccessControl_instructorAccessOtherGiver_inaccessible. It's also used in unknown intent, but any other instructor / student will do too.", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374728789", "createdAt": "2020-02-04T15:11:15Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,16 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;\n+    private StudentAttributes student5InCourse1;\n+    private InstructorAttributes instructor2OfCourse1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aba0486482fe7951288c7cead14e23f7a3d0d4c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyOTQ2Mw==", "bodyText": "This is only utilized in testAccessControl_giverNotModeratedStudent_inaccessible", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374729463", "createdAt": "2020-02-04T15:12:13Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,16 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;\n+    private StudentAttributes student5InCourse1;\n+    private InstructorAttributes instructor2OfCourse1;\n+    private InstructorAttributes instructor1OfCourse1;\n+    private FeedbackResponseAttributes student1ResponseToStudent1;\n+    private FeedbackResponseAttributes testModerateResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aba0486482fe7951288c7cead14e23f7a3d0d4c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1MTgwNw==", "bodyText": "This is used in testAccessControl_containsQuestionNotForInstructor_inaccessible and testAccessControl_studentAccessOtherTeam_inaccessible, can testAccessControl_containsQuestionNotForInstructor_inaccessible use some other response?", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374751807", "createdAt": "2020-02-04T15:45:37Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,16 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;\n+    private StudentAttributes student5InCourse1;\n+    private InstructorAttributes instructor2OfCourse1;\n+    private InstructorAttributes instructor1OfCourse1;\n+    private FeedbackResponseAttributes student1ResponseToStudent1;\n+    private FeedbackResponseAttributes testModerateResponse;\n+    private FeedbackResponseAttributes student4ResponseToTeam;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aba0486482fe7951288c7cead14e23f7a3d0d4c"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83432c923f38e6c6388fe35fd01c7c092c2b9bb6", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/83432c923f38e6c6388fe35fd01c7c092c2b9bb6", "committedDate": "2020-02-06T11:11:24Z", "message": "Refactor static variables to local scope"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab343c0ed5cf20a802edb2f3952a3c8f2ca0e93f", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ab343c0ed5cf20a802edb2f3952a3c8f2ca0e93f", "committedDate": "2020-02-06T11:12:21Z", "message": "Merge branch 'master' into 9382-test-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab80f9a22a36af320644d8efb9871a7f1bab9ffb", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ab80f9a22a36af320644d8efb9871a7f1bab9ffb", "committedDate": "2020-02-07T01:05:16Z", "message": "Merge branch 'master' into 9382-test-java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21995a1d89b4d7ab983e5b8d3aba8e2244855bcc", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/21995a1d89b4d7ab983e5b8d3aba8e2244855bcc", "committedDate": "2020-02-07T13:08:37Z", "message": "Edit containsQuestionNotForInstructor for clarity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63fa3e41a24f9c88f54ccd881d939c74675d38aa", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/63fa3e41a24f9c88f54ccd881d939c74675d38aa", "committedDate": "2020-02-07T12:54:50Z", "message": "Edit containsQuestionNotForInstructor for clarity"}, "afterCommit": {"oid": "21995a1d89b4d7ab983e5b8d3aba8e2244855bcc", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/21995a1d89b4d7ab983e5b8d3aba8e2244855bcc", "committedDate": "2020-02-07T13:08:37Z", "message": "Edit containsQuestionNotForInstructor for clarity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTY5MTQ4", "url": "https://github.com/TEAMMATES/teammates/pull/9930#pullrequestreview-355169148", "createdAt": "2020-02-07T13:53:30Z", "commit": {"oid": "21995a1d89b4d7ab983e5b8d3aba8e2244855bcc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTY3NTIx", "url": "https://github.com/TEAMMATES/teammates/pull/9930#pullrequestreview-356167521", "createdAt": "2020-02-10T18:35:37Z", "commit": {"oid": "21995a1d89b4d7ab983e5b8d3aba8e2244855bcc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODozNTozN1rOFnxBAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODozNTozN1rOFnxBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI0MTg1Nw==", "bodyText": "The type is too specific for BaseActionTest? (i.e. what if we want to add this method for FeedbackResponseCreateRequest, FeedbackSessionCreateRequest etc.)", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r377241857", "createdAt": "2020-02-10T18:35:37Z", "author": {"login": "xpdavid"}, "path": "src/test/java/teammates/test/cases/webapi/BaseActionTest.java", "diffHunk": "@@ -433,12 +434,22 @@ protected void verifyCanAccess(String... params) {\n         c.checkAccessControl();\n     }\n \n+    protected void verifyCanAccess(FeedbackResponseUpdateRequest updateRequest, String... params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21995a1d89b4d7ab983e5b8d3aba8e2244855bcc"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7b7bbdf7fceb23baedbf0c7f31324d76d5eddc0", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/b7b7bbdf7fceb23baedbf0c7f31324d76d5eddc0", "committedDate": "2020-02-11T02:21:53Z", "message": "Refactor verifyAccess method signatures to more generic request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzkwNDgy", "url": "https://github.com/TEAMMATES/teammates/pull/9930#pullrequestreview-356390482", "createdAt": "2020-02-11T02:26:45Z", "commit": {"oid": "b7b7bbdf7fceb23baedbf0c7f31324d76d5eddc0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4422, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}