{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2OTEyNTg4", "number": 10157, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzoyMzo0OFrOECJq4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNToyMDo0MFrOEG_nOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjkxMDQwOnYy", "diffSide": "RIGHT", "path": "src/web/services/csv-helper.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzoyMzo0OFrOGebmhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoyNjo1NlrOGinYbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2MjY5Mg==", "bodyText": "Let's not reinvent the wheel, even if the previous way in the back end did. Use this library, for example.", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r434562692", "createdAt": "2020-06-03T13:23:48Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/csv-helper.ts", "diffHunk": "@@ -0,0 +1,14 @@\n+/**\n+ * CSV related utility functions.\n+ */\n+export class CsvHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c246907a9f3c4ee82189a263518fc5f67ddcb252"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMjI1MA==", "bodyText": "Those libraries provide high-level conversion between JOSN and CSV but our results CSV generations requires some low-level manipulations. It is worth to try especially for the student list generation.", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r436232250", "createdAt": "2020-06-06T03:10:44Z", "author": {"login": "xpdavid"}, "path": "src/web/services/csv-helper.ts", "diffHunk": "@@ -0,0 +1,14 @@\n+/**\n+ * CSV related utility functions.\n+ */\n+export class CsvHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2MjY5Mg=="}, "originalCommit": {"oid": "c246907a9f3c4ee82189a263518fc5f67ddcb252"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0OTk5Ng==", "bodyText": "Then for now, at least you can instead make use of this method to expedite many of the processes:\nconvertCsvContentsToCsvString(rows: string[][]): string {\n  return rows.map((columns: string[]) => columns.map((entry: string) => {\n    if (entry.indexOf(',') >= 0 || entry.indexOf('\"') >= 0) {\n      return `\"${entry.replace(/\"/g, '\"\"')}\"`;\n    }\n    return entry;\n  }).join(',')).join('\\n');\n}", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r438949996", "createdAt": "2020-06-11T17:26:56Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/csv-helper.ts", "diffHunk": "@@ -0,0 +1,14 @@\n+/**\n+ * CSV related utility functions.\n+ */\n+export class CsvHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2MjY5Mg=="}, "originalCommit": {"oid": "c246907a9f3c4ee82189a263518fc5f67ddcb252"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjk5OTExOnYy", "diffSide": "RIGHT", "path": "src/web/services/session-result-csv.service.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0Mzo1NlrOGece9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMzoxMjowNlrOGgBgmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NzE0MQ==", "bodyText": "This is not a good way. Above all, this adds a tight coupling between front-end testing and back-end testing. Let generateTypes be the only exception for that.\nLet's just generate one good test data file to be used by all test cases (I believe it's possible) and put it within this folder (it will be tree-shaken so it won't appear in production).\nThis will make the second commit obsolete.", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r434577141", "createdAt": "2020-06-03T13:43:56Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/session-result-csv.service.spec.ts", "diffHunk": "@@ -0,0 +1,293 @@\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { TestBed } from '@angular/core/testing';\n+import {\n+  InstructorSessionResultSectionType,\n+} from '../app/pages-instructor/instructor-session-result-page/instructor-session-result-section-type.enum';\n+import {\n+  SectionTypeDescriptionPipe,\n+} from '../app/pages-instructor/instructor-session-result-page/section-type-description.pipe';\n+import { SessionResults } from '../types/api-output';\n+import { SessionResultCsvService } from './session-result-csv.service';\n+\n+/**\n+ * Loads data for testing.\n+ */\n+const loadTestData: (filename: string) => SessionResults = (filename: string): SessionResults => {\n+  try {\n+    return require(`../../test/resources/generated-data/${filename}`);\n+  } catch (error) {\n+    console.error('Fail to load test data, did you run GenerateSessionResults?');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab014db51cde3248c1edf3c8001e93a2a2e9ea17"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMjM0NQ==", "bodyText": "Included generated files instead. I believe the API output would be almost fixed. Let's revise the test file (to a single generic-cover-all test file) in another PR.", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r436232345", "createdAt": "2020-06-06T03:12:06Z", "author": {"login": "xpdavid"}, "path": "src/web/services/session-result-csv.service.spec.ts", "diffHunk": "@@ -0,0 +1,293 @@\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { TestBed } from '@angular/core/testing';\n+import {\n+  InstructorSessionResultSectionType,\n+} from '../app/pages-instructor/instructor-session-result-page/instructor-session-result-section-type.enum';\n+import {\n+  SectionTypeDescriptionPipe,\n+} from '../app/pages-instructor/instructor-session-result-page/section-type-description.pipe';\n+import { SessionResults } from '../types/api-output';\n+import { SessionResultCsvService } from './session-result-csv.service';\n+\n+/**\n+ * Loads data for testing.\n+ */\n+const loadTestData: (filename: string) => SessionResults = (filename: string): SessionResults => {\n+  try {\n+    return require(`../../test/resources/generated-data/${filename}`);\n+  } catch (error) {\n+    console.error('Fail to load test data, did you run GenerateSessionResults?');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NzE0MQ=="}, "originalCommit": {"oid": "ab014db51cde3248c1edf3c8001e93a2a2e9ea17"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzAwMTQ4OnYy", "diffSide": "RIGHT", "path": "src/web/services/session-result-csv.service.spec.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0NDoyOFrOGecghw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0NDoyOFrOGecghw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NzU0Mw==", "bodyText": "Even though it's done this way before, let's not make this a snapshot test: make this a normal assertion so that we can easily see what the method does.", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r434577543", "createdAt": "2020-06-03T13:44:28Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/session-result-csv.service.spec.ts", "diffHunk": "@@ -0,0 +1,293 @@\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { TestBed } from '@angular/core/testing';\n+import {\n+  InstructorSessionResultSectionType,\n+} from '../app/pages-instructor/instructor-session-result-page/instructor-session-result-section-type.enum';\n+import {\n+  SectionTypeDescriptionPipe,\n+} from '../app/pages-instructor/instructor-session-result-page/section-type-description.pipe';\n+import { SessionResults } from '../types/api-output';\n+import { SessionResultCsvService } from './session-result-csv.service';\n+\n+/**\n+ * Loads data for testing.\n+ */\n+const loadTestData: (filename: string) => SessionResults = (filename: string): SessionResults => {\n+  try {\n+    return require(`../../test/resources/generated-data/${filename}`);\n+  } catch (error) {\n+    console.error('Fail to load test data, did you run GenerateSessionResults?');\n+    throw error;\n+  }\n+};\n+\n+/**\n+ * Substitutes values that are different across different properties configuration.\n+ */\n+const replaceUnpredictableValuesWithPlaceholders: (str: string) => string = (str: string): string => {\n+  // tslint:disable-next-line:no-invalid-template-strings\n+  return str.replace(/Anonymous (student|instructor|team) [0-9]{1,10}/g, 'Anonymous $1 ${participant.hash}');\n+};\n+\n+describe('replaceUnpredictableValuesWithPlaceholders', () => {\n+  it('should replace unpredictable values with placeholders', () => {\n+    const sampleCsvFile: string = `Header 1,Header 2,Header 3\n+Content 1,Content 2,Content 3\n+Anonymous student 1234567,Anonymous instructor 4567890,Anonymous team 87654321\n+`;\n+    expect(replaceUnpredictableValuesWithPlaceholders(sampleCsvFile)).toMatchSnapshot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab014db51cde3248c1edf3c8001e93a2a2e9ea17"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzAxMzY0OnYy", "diffSide": "RIGHT", "path": "src/web/services/session-result-csv.service.spec.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0NzoxNFrOGecoiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0NzoxNFrOGecoiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3OTU5Mw==", "bodyText": "Nitpicking, but this line is really too short to be line-broken like this. Same for the one below.", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r434579593", "createdAt": "2020-06-03T13:47:14Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/session-result-csv.service.spec.ts", "diffHunk": "@@ -0,0 +1,293 @@\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { TestBed } from '@angular/core/testing';\n+import {\n+  InstructorSessionResultSectionType,\n+} from '../app/pages-instructor/instructor-session-result-page/instructor-session-result-section-type.enum';\n+import {\n+  SectionTypeDescriptionPipe,\n+} from '../app/pages-instructor/instructor-session-result-page/section-type-description.pipe';\n+import { SessionResults } from '../types/api-output';\n+import { SessionResultCsvService } from './session-result-csv.service';\n+\n+/**\n+ * Loads data for testing.\n+ */\n+const loadTestData: (filename: string) => SessionResults = (filename: string): SessionResults => {\n+  try {\n+    return require(`../../test/resources/generated-data/${filename}`);\n+  } catch (error) {\n+    console.error('Fail to load test data, did you run GenerateSessionResults?');\n+    throw error;\n+  }\n+};\n+\n+/**\n+ * Substitutes values that are different across different properties configuration.\n+ */\n+const replaceUnpredictableValuesWithPlaceholders: (str: string) => string = (str: string): string => {\n+  // tslint:disable-next-line:no-invalid-template-strings\n+  return str.replace(/Anonymous (student|instructor|team) [0-9]{1,10}/g, 'Anonymous $1 ${participant.hash}');\n+};\n+\n+describe('replaceUnpredictableValuesWithPlaceholders', () => {\n+  it('should replace unpredictable values with placeholders', () => {\n+    const sampleCsvFile: string = `Header 1,Header 2,Header 3\n+Content 1,Content 2,Content 3\n+Anonymous student 1234567,Anonymous instructor 4567890,Anonymous team 87654321\n+`;\n+    expect(replaceUnpredictableValuesWithPlaceholders(sampleCsvFile)).toMatchSnapshot();\n+  });\n+});\n+\n+describe('SessionResultCsvService', () => {\n+  let service: SessionResultCsvService;\n+\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      providers: [\n+        SectionTypeDescriptionPipe,\n+      ],\n+      imports: [\n+        HttpClientTestingModule,\n+      ],\n+    });\n+\n+    service = TestBed.get(SessionResultCsvService);\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should show responses for feedbackSessionResultsC1S1', () => {\n+    const sessionResult: SessionResults = loadTestData('feedbackSessionResultsC1S1.json');\n+\n+    const result: string = service.getCsvForSessionResult(sessionResult,\n+        false, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab014db51cde3248c1edf3c8001e93a2a2e9ea17"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzAxODk4OnYy", "diffSide": "RIGHT", "path": "src/web/services/session-result-csv.service.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0ODoyNFrOGecr5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMzoxMzowNlrOGgBg2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MDQ1Mg==", "bodyText": "This has no meaning once the mentioned CSV file is removed. Let's not add this kind of line.", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r434580452", "createdAt": "2020-06-03T13:48:24Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/session-result-csv.service.spec.ts", "diffHunk": "@@ -0,0 +1,293 @@\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { TestBed } from '@angular/core/testing';\n+import {\n+  InstructorSessionResultSectionType,\n+} from '../app/pages-instructor/instructor-session-result-page/instructor-session-result-section-type.enum';\n+import {\n+  SectionTypeDescriptionPipe,\n+} from '../app/pages-instructor/instructor-session-result-page/section-type-description.pipe';\n+import { SessionResults } from '../types/api-output';\n+import { SessionResultCsvService } from './session-result-csv.service';\n+\n+/**\n+ * Loads data for testing.\n+ */\n+const loadTestData: (filename: string) => SessionResults = (filename: string): SessionResults => {\n+  try {\n+    return require(`../../test/resources/generated-data/${filename}`);\n+  } catch (error) {\n+    console.error('Fail to load test data, did you run GenerateSessionResults?');\n+    throw error;\n+  }\n+};\n+\n+/**\n+ * Substitutes values that are different across different properties configuration.\n+ */\n+const replaceUnpredictableValuesWithPlaceholders: (str: string) => string = (str: string): string => {\n+  // tslint:disable-next-line:no-invalid-template-strings\n+  return str.replace(/Anonymous (student|instructor|team) [0-9]{1,10}/g, 'Anonymous $1 ${participant.hash}');\n+};\n+\n+describe('replaceUnpredictableValuesWithPlaceholders', () => {\n+  it('should replace unpredictable values with placeholders', () => {\n+    const sampleCsvFile: string = `Header 1,Header 2,Header 3\n+Content 1,Content 2,Content 3\n+Anonymous student 1234567,Anonymous instructor 4567890,Anonymous team 87654321\n+`;\n+    expect(replaceUnpredictableValuesWithPlaceholders(sampleCsvFile)).toMatchSnapshot();\n+  });\n+});\n+\n+describe('SessionResultCsvService', () => {\n+  let service: SessionResultCsvService;\n+\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      providers: [\n+        SectionTypeDescriptionPipe,\n+      ],\n+      imports: [\n+        HttpClientTestingModule,\n+      ],\n+    });\n+\n+    service = TestBed.get(SessionResultCsvService);\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should show responses for feedbackSessionResultsC1S1', () => {\n+    const sessionResult: SessionResults = loadTestData('feedbackSessionResultsC1S1.json');\n+\n+    const result: string = service.getCsvForSessionResult(sessionResult,\n+        false, false);\n+    expect(replaceUnpredictableValuesWithPlaceholders(result)).toMatchSnapshot();\n+    // feedbackSessionResultsC1S1_actionTest.csv", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab014db51cde3248c1edf3c8001e93a2a2e9ea17"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMjQwOQ==", "bodyText": "Choose to leave them there for migration purpose. Will remove them when the branch is ready to be merged.", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r436232409", "createdAt": "2020-06-06T03:13:06Z", "author": {"login": "xpdavid"}, "path": "src/web/services/session-result-csv.service.spec.ts", "diffHunk": "@@ -0,0 +1,293 @@\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { TestBed } from '@angular/core/testing';\n+import {\n+  InstructorSessionResultSectionType,\n+} from '../app/pages-instructor/instructor-session-result-page/instructor-session-result-section-type.enum';\n+import {\n+  SectionTypeDescriptionPipe,\n+} from '../app/pages-instructor/instructor-session-result-page/section-type-description.pipe';\n+import { SessionResults } from '../types/api-output';\n+import { SessionResultCsvService } from './session-result-csv.service';\n+\n+/**\n+ * Loads data for testing.\n+ */\n+const loadTestData: (filename: string) => SessionResults = (filename: string): SessionResults => {\n+  try {\n+    return require(`../../test/resources/generated-data/${filename}`);\n+  } catch (error) {\n+    console.error('Fail to load test data, did you run GenerateSessionResults?');\n+    throw error;\n+  }\n+};\n+\n+/**\n+ * Substitutes values that are different across different properties configuration.\n+ */\n+const replaceUnpredictableValuesWithPlaceholders: (str: string) => string = (str: string): string => {\n+  // tslint:disable-next-line:no-invalid-template-strings\n+  return str.replace(/Anonymous (student|instructor|team) [0-9]{1,10}/g, 'Anonymous $1 ${participant.hash}');\n+};\n+\n+describe('replaceUnpredictableValuesWithPlaceholders', () => {\n+  it('should replace unpredictable values with placeholders', () => {\n+    const sampleCsvFile: string = `Header 1,Header 2,Header 3\n+Content 1,Content 2,Content 3\n+Anonymous student 1234567,Anonymous instructor 4567890,Anonymous team 87654321\n+`;\n+    expect(replaceUnpredictableValuesWithPlaceholders(sampleCsvFile)).toMatchSnapshot();\n+  });\n+});\n+\n+describe('SessionResultCsvService', () => {\n+  let service: SessionResultCsvService;\n+\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      providers: [\n+        SectionTypeDescriptionPipe,\n+      ],\n+      imports: [\n+        HttpClientTestingModule,\n+      ],\n+    });\n+\n+    service = TestBed.get(SessionResultCsvService);\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should show responses for feedbackSessionResultsC1S1', () => {\n+    const sessionResult: SessionResults = loadTestData('feedbackSessionResultsC1S1.json');\n+\n+    const result: string = service.getCsvForSessionResult(sessionResult,\n+        false, false);\n+    expect(replaceUnpredictableValuesWithPlaceholders(result)).toMatchSnapshot();\n+    // feedbackSessionResultsC1S1_actionTest.csv", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MDQ1Mg=="}, "originalCommit": {"oid": "ab014db51cde3248c1edf3c8001e93a2a2e9ea17"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzIwOTgyOnYy", "diffSide": "RIGHT", "path": "src/web/services/__snapshots__/session-result-csv.service.spec.ts.snap", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyOToxOFrOGeektw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyOToxOFrOGeektw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxMTM4Mw==", "bodyText": "On top of having a snapshot file, the old CSV testing makes it such that you can directly open the CSV file to see the content. We lost that ability now, but it's not a big price to pay.", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r434611383", "createdAt": "2020-06-03T14:29:18Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/__snapshots__/session-result-csv.service.spec.ts.snap", "diffHunk": "@@ -0,0 +1,782 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`SessionResultCsvService should display student last name displayed properly for feedbackSessionResultsC1S1NewLastName 1`] = `", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab014db51cde3248c1edf3c8001e93a2a2e9ea17"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDQ3NDU4OnYy", "diffSide": "RIGHT", "path": "src/web/types/question-details-impl/feedback-question-details-factory.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoyODo0NFrOGincSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoyODo0NFrOGincSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1MDk4Ng==", "bodyText": "Typo in the file name quesiton", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r438950986", "createdAt": "2020-06-11T17:28:44Z", "author": {"login": "wkurniawan07"}, "path": "src/web/types/question-details-impl/feedback-question-details-factory.ts", "diffHunk": "@@ -0,0 +1,62 @@\n+import {\n+  FeedbackConstantSumQuestionDetails,\n+  FeedbackContributionQuestionDetails,\n+  FeedbackMcqQuestionDetails,\n+  FeedbackMsqQuestionDetails,\n+  FeedbackNumericalScaleQuestionDetails,\n+  FeedbackQuestionDetails,\n+  FeedbackQuestionType,\n+  FeedbackRankOptionsQuestionDetails,\n+  FeedbackRankRecipientsQuestionDetails,\n+  FeedbackRubricQuestionDetails,\n+  FeedbackTextQuestionDetails,\n+} from '../api-output';\n+import { AbstractFeedbackQuestionDetails } from './abstract-feedback-question-details';\n+import { FeedbackConstantSumOptionsQuestionDetailsImpl } from './feedback-constsum-options-question-details.impl';\n+import { FeedbackConstantSumRecipientsQuestionDetailsImpl } from './feedback-constsum-recipient-question-details.impl';\n+import { FeedbackContributionQuestionDetailsImpl } from './feedback-contribution-question-details.impl';\n+import { FeedbackMcqQuestionDetailsImpl } from './feedback-mcq-question-details.impl';\n+import { FeedbackMsqQuestionDetailsImpl } from './feedback-msq-question-details.impl';\n+import { FeedbackNumericalScaleQuestionDetailsImpl } from './feedback-num-scale-question-details.impl';\n+import { FeedbackRankOptionsQuestionDetailsImpl } from './feedback-rank-options-question-details.impl';\n+import { FeedbackRankRecipientsQuestionDetailsImpl } from './feedback-rank-recipients-question-details.impl';\n+import { FeedbackRubricQuestionDetailsImpl } from './feedback-rubric-quesiton-details.impl';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e52dc3c20a3fa9ffe63a023218e2fea40936844"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzM3OTA0OnYy", "diffSide": "RIGHT", "path": "src/web/services/csv-helper.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzoyMzowNVrOGjDxbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzoyMzowNVrOGjDxbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQxNTE0OA==", "bodyText": "Based on RFC4180, if the entry contains \\r or \\n it also needs to be escaped. Let's add that check as well, even though it's unlikely to happen.", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r439415148", "createdAt": "2020-06-12T13:23:05Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/csv-helper.ts", "diffHunk": "@@ -0,0 +1,23 @@\n+\n+const LINE_SEPARATOR: string = '\\n';\n+\n+/**\n+ * CSV related utility functions.\n+ */\n+export class CsvHelper {\n+\n+  /**\n+   * Converts CSV contents to a standard CSV string.\n+   *\n+   * @param rows list of rows, each row contains elements for each column\n+   * @see <a href=\"http://tools.ietf.org/html/rfc4180\">http://tools.ietf.org/html/rfc4180</a>\n+   */\n+  static convertCsvContentsToCsvString(rows: string[][]): string {\n+    return rows.map((columns: string[]) => columns.map((entry: string) => {\n+      if (entry.indexOf(',') >= 0 || entry.indexOf('\"') >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2573c993cc9806779682f66ce05f161268a5568d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzM3OTc3OnYy", "diffSide": "RIGHT", "path": "src/web/services/csv-helper.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzoyMzoxOVrOGjDx7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzoyMzoxOVrOGjDx7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQxNTI3Ng==", "bodyText": "Based on RFC4180, the line separator is \\r\\n.", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r439415276", "createdAt": "2020-06-12T13:23:19Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/csv-helper.ts", "diffHunk": "@@ -0,0 +1,23 @@\n+\n+const LINE_SEPARATOR: string = '\\n';\n+\n+/**\n+ * CSV related utility functions.\n+ */\n+export class CsvHelper {\n+\n+  /**\n+   * Converts CSV contents to a standard CSV string.\n+   *\n+   * @param rows list of rows, each row contains elements for each column\n+   * @see <a href=\"http://tools.ietf.org/html/rfc4180\">http://tools.ietf.org/html/rfc4180</a>\n+   */\n+  static convertCsvContentsToCsvString(rows: string[][]): string {\n+    return rows.map((columns: string[]) => columns.map((entry: string) => {\n+      if (entry.indexOf(',') >= 0 || entry.indexOf('\"') >= 0) {\n+        return `\"${entry.replace(/\"/g, '\"\"')}\"`;\n+      }\n+      return entry;\n+    }).join(',')).join(LINE_SEPARATOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2573c993cc9806779682f66ce05f161268a5568d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzY5MTQ2OnYy", "diffSide": "RIGHT", "path": "src/web/app/components/question-types/question-statistics/constsum-options-question-statistics.component.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNToyMDo0MFrOGmIXAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNToyMDo0MFrOGmIXAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNjAzMg==", "bodyText": "Typo in filename statstics", "url": "https://github.com/TEAMMATES/teammates/pull/10157#discussion_r442636032", "createdAt": "2020-06-19T05:20:40Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/components/question-types/question-statistics/constsum-options-question-statistics.component.ts", "diffHunk": "@@ -1,9 +1,10 @@\n import { Component, OnChanges, OnInit } from '@angular/core';\n-import { FeedbackConstantSumQuestionDetails, FeedbackConstantSumResponseDetails } from '../../../../types/api-output';\n import { DEFAULT_CONSTSUM_RECIPIENTS_QUESTION_DETAILS } from '../../../../types/default-question-structs';\n import { SortBy } from '../../../../types/sort-properties';\n import { ColumnData, SortableTableCellData } from '../../sortable-table/sortable-table.component';\n-import { QuestionStatistics } from './question-statistics';\n+import {\n+  ConstsumOptionsQuestionStatisticsCalculation,\n+} from './question-statistics-calculation/constsum-options-question-statstics-calculation';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e761aad8d277b4aae99dbb24d7233b2126dd974b"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3771, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}