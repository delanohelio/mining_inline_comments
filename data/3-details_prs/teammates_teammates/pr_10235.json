{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMDY2Mjgy", "number": 10235, "title": "[#10220] Migrate Student List CSV Generation to Frontend", "bodyText": "Resolves #10220\n\n Implement CSV Generation in Frontend\n Write Snapshot Tests for CSV Generation\n Remove CSV Generation from the Backend", "createdAt": "2020-06-25T14:40:24Z", "url": "https://github.com/TEAMMATES/teammates/pull/10235", "merged": true, "mergeCommit": {"oid": "72956920bf189e9857c14e0fa3a511601125232e"}, "closed": true, "closedAt": "2020-06-28T07:36:11Z", "author": {"login": "madanalogy"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcu6VfdABqjM0ODQ4NzkyOTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvnX5FgFqTQzODc1MjczMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a430e08da6acc546e7b87b5eeffa13037b911094", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/a430e08da6acc546e7b87b5eeffa13037b911094", "committedDate": "2020-06-25T14:31:06Z", "message": "Implement csv generation in student.service.ts"}, "afterCommit": {"oid": "ed5f4ac013b63b27968e584ce25e25a968f5f4a6", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ed5f4ac013b63b27968e584ce25e25a968f5f4a6", "committedDate": "2020-06-26T03:04:20Z", "message": "Implement csv generation in student.service.ts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDYxNjg2", "url": "https://github.com/TEAMMATES/teammates/pull/10235#pullrequestreview-438461686", "createdAt": "2020-06-26T17:11:17Z", "commit": {"oid": "315086db051d25e29218f4488b5591e8fa45f582"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzoxMToxN1rOGpofJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzoxMToxN1rOGpofJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwODEzMg==", "bodyText": "Mistakes:\n\nYou're setting the spy here on the test method, but the service to be tested has been injected with the default spyHttpRequestService (with none of the above having any effect) way up in the beforeEach block.\n\nThe example in admin-search-page.component.spec.ts works because the spies are modified after the services are obtained from TestBed. But here, the spied service is used to construct the test object.\n\n\nHere toMatchSnapshot is called on the Observable, not the CSV string itself. It won't produce the testing effect we want to achieve.\n\nSuggestion:\nWhile setting a spy to the HttpRequestService works, it will be troublesome to set up multiple different spies for different test cases. So why not:\n\nIn student.service.ts, create a method that takes in Students and outputs CSV string.\nTest that method extensively. You don't need any spy to do that, and you also don't need to worry about Observables.", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446308132", "createdAt": "2020-06-26T17:11:17Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -82,18 +84,59 @@ describe('StudentService', () => {\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should show course student list with section', () => {\n+    const course: string = 'typicalWithSection';\n+    spyOn(spyHttpRequestService, 'get').and.callFake((endpoint: ResourceEndpoints, params: Record<string, string>) => {\n+      if (endpoint === ResourceEndpoints.COURSE) {\n+        expect(params).toEqual({\n+          courseid: course,\n+          entitytype: 'instructor',\n+        });\n+        return of({\n+          courseId: course,\n+          courseName: course,\n+          timeZone: 'UTC',\n+          creationTimestamp: 123,\n+          deletionTimestamp: 123,\n+        });\n+      }  if (endpoint === ResourceEndpoints.STUDENTS) {\n+        return of({\n+          students: [{\n+            email: 'student1OfTypicalCourse@typicalCourse.com',\n+            courseId: course,\n+            name: 'student1OfTypicalCourse',\n+            joinState: JoinState.JOINED,\n+            teamName: 'Team 1',\n+            sectionName: 'Section A',\n+          },\n+          {\n+            email: 'student2OfTypicalCourse@typicalCourse.com',\n+            courseId: course,\n+            name: 'student2OfTypicalCourse',\n+            joinState: JoinState.JOINED,\n+            teamName: 'Team 2',\n+            sectionName: 'Section A',\n+          }],\n+        });\n+      }\n+      return null;\n+    });\n+    expect(service.loadStudentListAsCsv({ courseId: course })).toMatchSnapshot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315086db051d25e29218f4488b5591e8fa45f582"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6faaa707226cbd479f4df4b801b2625c3e89269d", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/6faaa707226cbd479f4df4b801b2625c3e89269d", "committedDate": "2020-06-27T04:31:01Z", "message": "Implement student list csv generation in frontend"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "315086db051d25e29218f4488b5591e8fa45f582", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/315086db051d25e29218f4488b5591e8fa45f582", "committedDate": "2020-06-26T16:10:54Z", "message": "Add csv generation tests"}, "afterCommit": {"oid": "47bd2302db591c44c2b1e1e5725a6a0280f03cd0", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/47bd2302db591c44c2b1e1e5725a6a0280f03cd0", "committedDate": "2020-06-27T04:31:58Z", "message": "Remove student list csv generation from backend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24fef5d3a36ef7f5cf0e07bc3dec979ded87aae4", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/24fef5d3a36ef7f5cf0e07bc3dec979ded87aae4", "committedDate": "2020-06-27T04:39:35Z", "message": "Add snapshot tests for student list csv generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "610fd06c5c81a8136155436d69eaa211289bfa40", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/610fd06c5c81a8136155436d69eaa211289bfa40", "committedDate": "2020-06-27T04:40:01Z", "message": "Remove student list csv generation from backend"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47bd2302db591c44c2b1e1e5725a6a0280f03cd0", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/47bd2302db591c44c2b1e1e5725a6a0280f03cd0", "committedDate": "2020-06-27T04:31:58Z", "message": "Remove student list csv generation from backend"}, "afterCommit": {"oid": "610fd06c5c81a8136155436d69eaa211289bfa40", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/610fd06c5c81a8136155436d69eaa211289bfa40", "committedDate": "2020-06-27T04:40:01Z", "message": "Remove student list csv generation from backend"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjcyMzU2", "url": "https://github.com/TEAMMATES/teammates/pull/10235#pullrequestreview-438672356", "createdAt": "2020-06-27T04:45:36Z", "commit": {"oid": "610fd06c5c81a8136155436d69eaa211289bfa40"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNDo0NTozNlrOGpzP_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNDo1NDoxM1rOGpzSPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDQ3OA==", "bodyText": "I think students need to be sorted by section, team and name.", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446484478", "createdAt": "2020-06-27T04:45:36Z", "author": {"login": "xpdavid"}, "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +132,34 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    csvRows.push(['Section', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);\n+    students.forEach((student: Student) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "610fd06c5c81a8136155436d69eaa211289bfa40"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDUyMg==", "bodyText": "We shall transform the join state to human-friendly string. See if you can use the JoinStatePipe pipe", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446484522", "createdAt": "2020-06-27T04:46:10Z", "author": {"login": "xpdavid"}, "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +132,34 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    csvRows.push(['Section', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);\n+    students.forEach((student: Student) => {\n+      csvRows.push([\n+        student.sectionName ? StringHelper.removeExtraSpace(student.sectionName) : '',\n+        student.teamName ? StringHelper.removeExtraSpace(student.teamName) : '',\n+        StringHelper.removeExtraSpace(student.name),\n+        student.lastName ? StringHelper.removeExtraSpace(student.lastName) : '',\n+        StringHelper.removeExtraSpace(student.joinState),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "610fd06c5c81a8136155436d69eaa211289bfa40"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDY0OQ==", "bodyText": "I'll close one eye for the section filtering (i.e. we will not display section column if all students are from the default section)", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446484649", "createdAt": "2020-06-27T04:48:14Z", "author": {"login": "xpdavid"}, "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +132,34 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    csvRows.push(['Section', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "610fd06c5c81a8136155436d69eaa211289bfa40"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDg5OQ==", "bodyText": "I guess in the original Java code, we don't have removeExtraSpace for sectionName? Same for other fields.", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446484899", "createdAt": "2020-06-27T04:51:50Z", "author": {"login": "xpdavid"}, "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +132,34 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    csvRows.push(['Section', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);\n+    students.forEach((student: Student) => {\n+      csvRows.push([\n+        student.sectionName ? StringHelper.removeExtraSpace(student.sectionName) : '',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "610fd06c5c81a8136155436d69eaa211289bfa40"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NTA1NQ==", "bodyText": "The indentation is a bit weird.\n[\n    {\n        ...\n    },\n    {\n        ...\n    },\n]", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446485055", "createdAt": "2020-06-27T04:54:13Z", "author": {"login": "xpdavid"}, "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -82,18 +83,113 @@ describe('StudentService', () => {\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should show course student list with section', () => {\n+    const courseId: string = 'listWithSection';\n+    const courseName: string = 'List With Section';\n+    const students: Student[] = [{\n+      courseId,\n+      email: 'student1OfTypicalCourse@typicalCourse.com',\n+      name: 'student1OfTypicalCourse',\n+      joinState: JoinState.JOINED,\n+      teamName: 'Team 1',\n+      sectionName: 'Section A',\n+    },\n+      {\n+        courseId,\n+        email: 'student2OfTypicalCourse@typicalCourse.com',\n+        name: 'student2OfTypicalCourse',\n+        joinState: JoinState.JOINED,\n+        teamName: 'Team 2',\n+        sectionName: 'Section A',\n+      }];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list without section', () => {\n+    const courseId: string = 'listWithoutSection';\n+    const courseName: string = 'List Without Section';\n+    const students: Student[] = [{\n+      courseId,\n+      email: 'student1OfTypicalCourse@typicalCourse.com',\n+      name: 'student1OfTypicalCourse',\n+      joinState: JoinState.JOINED,\n+      teamName: 'Team 1',\n+      sectionName: '',\n+    },\n+      {\n+        courseId,\n+        email: 'student2OfTypicalCourse@typicalCourse.com',\n+        name: 'student2OfTypicalCourse',\n+        joinState: JoinState.JOINED,\n+        teamName: 'Team 2',\n+        sectionName: '',\n+      }];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    const responseType: string = 'text';\n+  it('should show course student list with special team name', () => {\n+    const courseId: string = 'listWithSpecialTeamName';\n+    const courseName: string = 'List With Special Team Name';\n+    const students: Student[] = [{\n+      courseId,\n+      email: 'student1OfTypicalCourse@typicalCourse.com',\n+      name: 'student1OfTypicalCourse',\n+      joinState: JoinState.JOINED,\n+      teamName: 'N/A',\n+      sectionName: 'Section A',\n+    },\n+      {\n+        courseId,\n+        email: 'student2OfTypicalCourse@typicalCourse.com',\n+        name: 'student2OfTypicalCourse',\n+        joinState: JoinState.JOINED,\n+        teamName: '-Nil-',\n+        sectionName: 'Section A',\n+      }];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    service.loadStudentListAsCsv({\n-      courseId: paramMap.courseid,\n-    });\n+  it('should show course student list with student last name', () => {\n+    const courseId: string = 'listWithLastName';\n+    const courseName: string = 'List With Last Name';\n+    const students: Student[] = [{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "610fd06c5c81a8136155436d69eaa211289bfa40"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzMxMDAy", "url": "https://github.com/TEAMMATES/teammates/pull/10235#pullrequestreview-438731002", "createdAt": "2020-06-27T23:34:52Z", "commit": {"oid": "a655dc40f6b91f839f1ff16128b14994881fb934"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzozNDo1M1rOGp5BEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMzozNDo1M1rOGp5BEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3ODk2MA==", "bodyText": "Although not explicit, this can be viewed as a \"table\" of some sort. You should use chain call of TableComparatorService:\n\n  \n    \n      teammates/src/web/app/components/question-responses/per-question-view-responses/per-question-view-responses.component.ts\n    \n    \n        Lines 117 to 123\n      in\n      f4c7e6d\n    \n    \n    \n    \n\n        \n          \n           // Default order: giver team > giver name > recipient team > recipient name \n        \n\n        \n          \n           return ((a: ResponseOutput, b: ResponseOutput): number => { \n        \n\n        \n          \n             return this.tableComparatorService.compare(SortBy.GIVER_TEAM, order, a.giverTeam, b.giverTeam) \n        \n\n        \n          \n                 || this.tableComparatorService.compare(SortBy.GIVER_NAME, order, a.giver, b.giver) \n        \n\n        \n          \n                 || this.tableComparatorService.compare(SortBy.RECIPIENT_TEAM, order, a.recipientTeam, b.recipientTeam) \n        \n\n        \n          \n                 || this.tableComparatorService.compare(SortBy.RECIPIENT_NAME, order, a.recipient, b.recipient); \n        \n\n        \n          \n           });", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446578960", "createdAt": "2020-06-27T23:34:53Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +133,58 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    const hasSection: boolean = students.filter((student: Student) =>\n+        student.sectionName !== 'None' && student.sectionName !== '').length > 0;\n+    csvRows.push([hasSection ? 'Section' : '', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);\n+    students.sort((a: Student, b: Student) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a655dc40f6b91f839f1ff16128b14994881fb934"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "875635ca7405c103ef38356233e77448c3a27305", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/875635ca7405c103ef38356233e77448c3a27305", "committedDate": "2020-06-28T01:43:55Z", "message": "Add sort logic to csv generation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a655dc40f6b91f839f1ff16128b14994881fb934", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/a655dc40f6b91f839f1ff16128b14994881fb934", "committedDate": "2020-06-27T13:22:06Z", "message": "Add HttpRequestService test for csv generation"}, "afterCommit": {"oid": "2fe26275d485722b10d672700c259cb17d3942a8", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/2fe26275d485722b10d672700c259cb17d3942a8", "committedDate": "2020-06-28T01:44:28Z", "message": "Add http request test for csv generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/2c0734699b048bc8ca2768122d62bcb1ca3e7922", "committedDate": "2020-06-28T01:47:50Z", "message": "Add http request test for csv generation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2fe26275d485722b10d672700c259cb17d3942a8", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/2fe26275d485722b10d672700c259cb17d3942a8", "committedDate": "2020-06-28T01:44:28Z", "message": "Add http request test for csv generation"}, "afterCommit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/2c0734699b048bc8ca2768122d62bcb1ca3e7922", "committedDate": "2020-06-28T01:47:50Z", "message": "Add http request test for csv generation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzM2OTEz", "url": "https://github.com/TEAMMATES/teammates/pull/10235#pullrequestreview-438736913", "createdAt": "2020-06-28T02:11:19Z", "commit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjoxMToxOVrOGp5rJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjoxNzoxOVrOGp5sqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4OTczMw==", "bodyText": "I don't think you need : at the end of either Course ID or Course Name", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446589733", "createdAt": "2020-06-28T02:11:19Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +136,42 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4OTgxMg==", "bodyText": "If there is no section, it shouldn't have any column, not adding an empty column.", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446589812", "createdAt": "2020-06-28T02:12:26Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +136,42 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    const hasSection: boolean = students.filter((student: Student) =>\n+        student.sectionName !== 'None' && student.sectionName !== '').length > 0;\n+    csvRows.push([hasSection ? 'Section' : '', 'Team', 'Full Name', 'Last Name', 'Status', 'Email']);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDA4MA==", "bodyText": "There's nothing special in this test that warrants it to be a different test case. Unlike existence/absence of section which will affect the section column, special (?) team name only affects the individual row. Just combine this with  one of the previous test cases. You can make clear in e.g. the full name or email what the test data is about.", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590080", "createdAt": "2020-06-28T02:16:45Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -75,25 +73,151 @@ describe('StudentService', () => {\n       courseid: 'CS3281',\n       studentemail: 'johndoe@gmail.com',\n     };\n+    spyOn(spyHttpRequestService, 'post').and.stub();\n \n     service.regenerateStudentCourseLinks(paramMap.courseid, paramMap.studentemail);\n \n     expect(spyHttpRequestService.post)\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should execute GET on course & students endpoints when generating student csv list', () => {\n+    const courseId: string = 'CS3281';\n+    const httpSpy: Spy = spyOn(spyHttpRequestService, 'get').and.returnValue(of(''));\n+    const studentList: Observable<string> = service.loadStudentListAsCsv({ courseId });\n+    expect(httpSpy).toBeCalledWith(ResourceEndpoints.COURSE, {\n+      courseid: courseId,\n+      entitytype: 'instructor',\n+    });\n+    studentList.subscribe(() => expect(httpSpy).toBeCalledWith(ResourceEndpoints.STUDENTS, {\n+      courseid: courseId,\n+    }));\n+  });\n \n-    const responseType: string = 'text';\n+  it('should show course student list with section', () => {\n+    const courseId: string = 'listWithSection';\n+    const courseName: string = 'List With Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    service.loadStudentListAsCsv({\n-      courseId: paramMap.courseid,\n-    });\n+  it('should show course student list without section', () => {\n+    const courseId: string = 'listWithoutSection';\n+    const courseName: string = 'List Without Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'None',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'None',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list with special team name', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDEwNA==", "bodyText": "Similarly; nothing special here.", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590104", "createdAt": "2020-06-28T02:17:07Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -75,25 +73,151 @@ describe('StudentService', () => {\n       courseid: 'CS3281',\n       studentemail: 'johndoe@gmail.com',\n     };\n+    spyOn(spyHttpRequestService, 'post').and.stub();\n \n     service.regenerateStudentCourseLinks(paramMap.courseid, paramMap.studentemail);\n \n     expect(spyHttpRequestService.post)\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should execute GET on course & students endpoints when generating student csv list', () => {\n+    const courseId: string = 'CS3281';\n+    const httpSpy: Spy = spyOn(spyHttpRequestService, 'get').and.returnValue(of(''));\n+    const studentList: Observable<string> = service.loadStudentListAsCsv({ courseId });\n+    expect(httpSpy).toBeCalledWith(ResourceEndpoints.COURSE, {\n+      courseid: courseId,\n+      entitytype: 'instructor',\n+    });\n+    studentList.subscribe(() => expect(httpSpy).toBeCalledWith(ResourceEndpoints.STUDENTS, {\n+      courseid: courseId,\n+    }));\n+  });\n \n-    const responseType: string = 'text';\n+  it('should show course student list with section', () => {\n+    const courseId: string = 'listWithSection';\n+    const courseName: string = 'List With Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    service.loadStudentListAsCsv({\n-      courseId: paramMap.courseid,\n-    });\n+  it('should show course student list without section', () => {\n+    const courseId: string = 'listWithoutSection';\n+    const courseName: string = 'List Without Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'None',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'None',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list with special team name', () => {\n+    const courseId: string = 'listWithSpecialTeamName';\n+    const courseName: string = 'List With Special Team Name';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'N/A',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: '-Nil-',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list with student last name', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDEyMQ==", "bodyText": "Similarly; nothing special here.", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590121", "createdAt": "2020-06-28T02:17:19Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -75,25 +73,151 @@ describe('StudentService', () => {\n       courseid: 'CS3281',\n       studentemail: 'johndoe@gmail.com',\n     };\n+    spyOn(spyHttpRequestService, 'post').and.stub();\n \n     service.regenerateStudentCourseLinks(paramMap.courseid, paramMap.studentemail);\n \n     expect(spyHttpRequestService.post)\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should execute GET on course & students endpoints when generating student csv list', () => {\n+    const courseId: string = 'CS3281';\n+    const httpSpy: Spy = spyOn(spyHttpRequestService, 'get').and.returnValue(of(''));\n+    const studentList: Observable<string> = service.loadStudentListAsCsv({ courseId });\n+    expect(httpSpy).toBeCalledWith(ResourceEndpoints.COURSE, {\n+      courseid: courseId,\n+      entitytype: 'instructor',\n+    });\n+    studentList.subscribe(() => expect(httpSpy).toBeCalledWith(ResourceEndpoints.STUDENTS, {\n+      courseid: courseId,\n+    }));\n+  });\n \n-    const responseType: string = 'text';\n+  it('should show course student list with section', () => {\n+    const courseId: string = 'listWithSection';\n+    const courseName: string = 'List With Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    service.loadStudentListAsCsv({\n-      courseId: paramMap.courseid,\n-    });\n+  it('should show course student list without section', () => {\n+    const courseId: string = 'listWithoutSection';\n+    const courseName: string = 'List Without Section';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'None',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'None',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list with special team name', () => {\n+    const courseId: string = 'listWithSpecialTeamName';\n+    const courseName: string = 'List With Special Team Name';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: 'N/A',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          joinState: JoinState.JOINED,\n+          teamName: '-Nil-',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n+\n+  it('should show course student list with student last name', () => {\n+    const courseId: string = 'listWithLastName';\n+    const courseName: string = 'List With Last Name';\n+    const students: Student[] =\n+      [\n+        {\n+          courseId,\n+          email: 'student1OfTypicalCourse@typicalCourse.com',\n+          name: 'student1OfTypicalCourse',\n+          lastName: ' of The Last Name',\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 1',\n+          sectionName: 'Section A',\n+        },\n+        {\n+          courseId,\n+          email: 'student2OfTypicalCourse@typicalCourse.com',\n+          name: 'student2OfTypicalCourse',\n+          lastName: \"with apostrophe' here\",\n+          joinState: JoinState.JOINED,\n+          teamName: 'Team 2',\n+          sectionName: 'Section A',\n+        },\n+      ];\n+    expect(service.processStudentsToCsv(courseId, courseName, students)).toMatchSnapshot();\n+  });\n \n-    expect(spyHttpRequestService.get)\n-        .toHaveBeenCalledWith(ResourceEndpoints.STUDENTS_CSV, paramMap, responseType);\n+  it('should show course student list with unregistered student', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922"}, "originalPosition": 191}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzM2ODU4", "url": "https://github.com/TEAMMATES/teammates/pull/10235#pullrequestreview-438736858", "createdAt": "2020-06-28T02:10:09Z", "commit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjoxMDowOVrOGp5q2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjoyMDo1OVrOGp5trw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4OTY1OA==", "bodyText": "Check Array.prototype.some(): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446589658", "createdAt": "2020-06-28T02:10:09Z", "author": {"login": "xpdavid"}, "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +136,42 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {\n       courseid: queryParams.courseId,\n-    };\n-    const responseType: string = 'text';\n-    return this.httpRequestService.get(ResourceEndpoints.STUDENTS_CSV, paramsMap, responseType);\n+      entitytype: 'instructor',\n+    }).pipe(mergeMap((course: Course) => {\n+      return this.httpRequestService.get(ResourceEndpoints.STUDENTS, {\n+        courseid: queryParams.courseId,\n+      }).pipe(map((students: Students) => {\n+        return this.processStudentsToCsv(course.courseId, course.courseName, students.students);\n+      }));\n+    }));\n+  }\n+\n+  processStudentsToCsv(courseId: string, courseName: string, students: Student[]): string {\n+    const csvRows: string[][] = [];\n+    csvRows.push(['Course ID:', StringHelper.removeExtraSpace(courseId)]);\n+    csvRows.push(['Course Name:', StringHelper.removeExtraSpace(courseName)]);\n+    csvRows.push([]);\n+    const hasSection: boolean = students.filter((student: Student) =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDA0NQ==", "bodyText": "Why not using real data here (and verify the snapshot also)?", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590045", "createdAt": "2020-06-28T02:16:09Z", "author": {"login": "xpdavid"}, "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -75,25 +73,151 @@ describe('StudentService', () => {\n       courseid: 'CS3281',\n       studentemail: 'johndoe@gmail.com',\n     };\n+    spyOn(spyHttpRequestService, 'post').and.stub();\n \n     service.regenerateStudentCourseLinks(paramMap.courseid, paramMap.studentemail);\n \n     expect(spyHttpRequestService.post)\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should execute GET on course & students endpoints when generating student csv list', () => {\n+    const courseId: string = 'CS3281';\n+    const httpSpy: Spy = spyOn(spyHttpRequestService, 'get').and.returnValue(of(''));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDEzNQ==", "bodyText": "The description should mention about csv as it here refers to the service itself.", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590135", "createdAt": "2020-06-28T02:17:30Z", "author": {"login": "xpdavid"}, "path": "src/web/services/student.service.spec.ts", "diffHunk": "@@ -75,25 +73,151 @@ describe('StudentService', () => {\n       courseid: 'CS3281',\n       studentemail: 'johndoe@gmail.com',\n     };\n+    spyOn(spyHttpRequestService, 'post').and.stub();\n \n     service.regenerateStudentCourseLinks(paramMap.courseid, paramMap.studentemail);\n \n     expect(spyHttpRequestService.post)\n         .toHaveBeenCalledWith(ResourceEndpoints.STUDENT_COURSE_LINKS_REGENERATION, paramMap);\n   });\n \n-  it('should execute GET when loading students in a course as CSV', () => {\n-    const paramMap: Record<string, string> = {\n-      courseid: 'CS3281',\n-    };\n+  it('should execute GET on course & students endpoints when generating student csv list', () => {\n+    const courseId: string = 'CS3281';\n+    const httpSpy: Spy = spyOn(spyHttpRequestService, 'get').and.returnValue(of(''));\n+    const studentList: Observable<string> = service.loadStudentListAsCsv({ courseId });\n+    expect(httpSpy).toBeCalledWith(ResourceEndpoints.COURSE, {\n+      courseid: courseId,\n+      entitytype: 'instructor',\n+    });\n+    studentList.subscribe(() => expect(httpSpy).toBeCalledWith(ResourceEndpoints.STUDENTS, {\n+      courseid: courseId,\n+    }));\n+  });\n \n-    const responseType: string = 'text';\n+  it('should show course student list with section', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDM4Mw==", "bodyText": "Actually you can consider use CourseService#getCourseAsInstructor and StudentService#getStudentsFromCourse.", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446590383", "createdAt": "2020-06-28T02:20:59Z", "author": {"login": "xpdavid"}, "path": "src/web/services/student.service.ts", "diffHunk": "@@ -129,10 +136,42 @@ export class StudentService {\n    * Loads list of students from a course in CSV format by calling API.\n    */\n   loadStudentListAsCsv(queryParams: { courseId: string }): Observable<string> {\n-    const paramsMap: Record<string, string> = {\n+    return this.httpRequestService.get(ResourceEndpoints.COURSE, {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92e90de95b5a862bd8e32999bdf6c744ddf8227b", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/92e90de95b5a862bd8e32999bdf6c744ddf8227b", "committedDate": "2020-06-28T04:51:50Z", "message": "Refactor service methods and tests"}, "afterCommit": {"oid": "36de4153fc2cd45d7886e18a5c920252e25eb994", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/36de4153fc2cd45d7886e18a5c920252e25eb994", "committedDate": "2020-06-28T05:37:34Z", "message": "Refactor service methods and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzQ1MzUy", "url": "https://github.com/TEAMMATES/teammates/pull/10235#pullrequestreview-438745352", "createdAt": "2020-06-28T05:37:44Z", "commit": {"oid": "92e90de95b5a862bd8e32999bdf6c744ddf8227b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNTozNzo0NFrOGp6gSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNTozNzo0NFrOGp6gSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwMzMzNg==", "bodyText": "Can we just use the plain string?", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446603336", "createdAt": "2020-06-28T05:37:44Z", "author": {"login": "xpdavid"}, "path": "src/web/services/__snapshots__/student.service.spec.ts.snap", "diffHunk": "@@ -0,0 +1,33 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`StudentService should generate course student list with section as csv 1`] = `\n+ZoneAwarePromise {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e90de95b5a862bd8e32999bdf6c744ddf8227b"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36de4153fc2cd45d7886e18a5c920252e25eb994", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/36de4153fc2cd45d7886e18a5c920252e25eb994", "committedDate": "2020-06-28T05:37:34Z", "message": "Refactor service methods and tests"}, "afterCommit": {"oid": "2c0734699b048bc8ca2768122d62bcb1ca3e7922", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/2c0734699b048bc8ca2768122d62bcb1ca3e7922", "committedDate": "2020-06-28T01:47:50Z", "message": "Add http request test for csv generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e24d2d41071a1f5cda8ac0d4dceed0acea70c4f", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/1e24d2d41071a1f5cda8ac0d4dceed0acea70c4f", "committedDate": "2020-06-28T06:12:29Z", "message": "Refactor service methods and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzQ5NzQw", "url": "https://github.com/TEAMMATES/teammates/pull/10235#pullrequestreview-438749740", "createdAt": "2020-06-28T06:51:20Z", "commit": {"oid": "1e24d2d41071a1f5cda8ac0d4dceed0acea70c4f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjo1MToyMVrOGp646g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjo1MToyMVrOGp646g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwOTY0Mg==", "bodyText": "We shall have at least one student with the last name passed down.", "url": "https://github.com/TEAMMATES/teammates/pull/10235#discussion_r446609642", "createdAt": "2020-06-28T06:51:21Z", "author": {"login": "xpdavid"}, "path": "src/web/services/__snapshots__/student.service.spec.ts.snap", "diffHunk": "@@ -0,0 +1,27 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`StudentService should generate course student list with section as csv 1`] = `\n+\"Course ID,studentListWithSection\n+Course Name,Student List With Section\n+\n+Section,Team,Full Name,Last Name,Status,Email", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e24d2d41071a1f5cda8ac0d4dceed0acea70c4f"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ac7b06f16d8022acb2b7cd246f6bf2ed5d8835e", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/8ac7b06f16d8022acb2b7cd246f6bf2ed5d8835e", "committedDate": "2020-06-28T07:26:10Z", "message": "Add last names to all test students"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzUyNDI0", "url": "https://github.com/TEAMMATES/teammates/pull/10235#pullrequestreview-438752424", "createdAt": "2020-06-28T07:28:46Z", "commit": {"oid": "8ac7b06f16d8022acb2b7cd246f6bf2ed5d8835e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzUyNzMw", "url": "https://github.com/TEAMMATES/teammates/pull/10235#pullrequestreview-438752730", "createdAt": "2020-06-28T07:32:55Z", "commit": {"oid": "8ac7b06f16d8022acb2b7cd246f6bf2ed5d8835e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4368, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}