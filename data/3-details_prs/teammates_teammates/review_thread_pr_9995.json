{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMTE5MDU1", "number": 9995, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODoyNzoxMFrODuq1Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNToyNzoyNFrODu1tag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYyODc0OnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODoyNzoxMFrOGAwMQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODoyNzoxMFrOGAwMQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0Mjc1Mg==", "bodyText": "Might want to change this part to make it deterministic.", "url": "https://github.com/TEAMMATES/teammates/pull/9995#discussion_r403442752", "createdAt": "2020-04-04T08:27:10Z", "author": {"login": "hcwong"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,103 @@\n+import { Injectable } from '@angular/core';\n+import { Observable } from 'rxjs';\n+import { map } from 'rxjs/operators';\n+import { SearchStudentsTable } from '../app/pages-instructor/instructor-search-page/instructor-search-page.component';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n+import { InstructorPrivilege, Student, Students } from '../types/api-output';\n+import { HttpRequestService } from './http-request.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+  constructor(private httpRequestService: HttpRequestService) {}\n+\n+  searchInstructor(searchKey: string): Observable<InstructorSearchResult> {\n+    return this.getStudents(searchKey).pipe(\n+      map((studentsRes: Students): SearchStudentsTable[] =>\n+        this.getCoursesWithSections(studentsRes),\n+      ),\n+      map(\n+        (coursesWithSections: SearchStudentsTable[]): InstructorSearchResult =>\n+          this.getPrivileges(coursesWithSections),\n+      ),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getCoursesWithSections(studentsRes: Students): SearchStudentsTable[] {\n+    const { students }: { students: Student[] } = studentsRes;\n+\n+    const distinctCourses: string[] = Array.from(\n+      new Set(students.map((s: Student) => s.courseId)),\n+    );\n+    const coursesWithSections: SearchStudentsTable[] = distinctCourses.map(\n+      (courseId: string) => ({\n+        courseId,\n+        sections: Array.from(\n+          new Set(\n+            students\n+              .filter((s: Student) => s.courseId === courseId)\n+              .map((s: Student) => s.sectionName),\n+          ),\n+        ).map((sectionName: string) => ({\n+          sectionName,\n+          isAllowedToViewStudentInSection: false,\n+          isAllowedToModifyStudent: false,\n+          students: students\n+            .filter(\n+              (s: Student) =>\n+                s.courseId === courseId && s.sectionName === sectionName,\n+            )\n+            .map((s: Student) => ({\n+              name: s.name,\n+              email: s.email,\n+              status: s.joinState,\n+              team: s.teamName,\n+            })),\n+        })),\n+      }),\n+    );\n+\n+    return coursesWithSections;\n+  }\n+\n+  getPrivileges(\n+    coursesWithSections: SearchStudentsTable[],\n+  ): InstructorSearchResult {\n+    for (const course of coursesWithSections) {\n+      for (const section of course.sections) {\n+        this.httpRequestService\n+          .get(ResourceEndpoints.INSTRUCTOR_PRIVILEGE, {\n+            courseid: course.courseId,\n+            sectionname: section.sectionName,\n+          })\n+          .subscribe((res: InstructorPrivilege): void => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ca702e3b475eeb7de42e79c85c73d85c400b3c"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDQxMDY2OnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNToyNzoyNFrOGA87cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMDoyMDoxM1rOGA-s7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MTQ0Mg==", "bodyText": "Idk, could this be done so that we can remove the reduce part?\n  // Gets an array of Observable<InstructorPrivilege>[] via flattening\n  const instructorPrivilegesArray = courseWithSections\n    .flatMap((course: SearchStudentsTable) => \n      course.sections.map((section: StudentListSectionData)\n        => this.insructorService.loadInstructorPrivilege({...});\n  return forkJoin(instructorPrivilegesArray)", "url": "https://github.com/TEAMMATES/teammates/pull/9995#discussion_r403651442", "createdAt": "2020-04-05T05:27:24Z", "author": {"login": "hcwong"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,127 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { map, mergeMap } from 'rxjs/operators';\n+import { SearchStudentsTable } from '../app/pages-instructor/instructor-search-page/instructor-search-page.component';\n+import { StudentListSectionData } from '../app/pages-instructor/student-list/student-list-section-data';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n+import { InstructorPrivilege, Student, Students } from '../types/api-output';\n+import { HttpRequestService } from './http-request.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+  constructor(private httpRequestService: HttpRequestService) {}\n+\n+  searchInstructor(searchKey: string): Observable<InstructorSearchResult> {\n+    return this.getStudents(searchKey).pipe(\n+      map((studentsRes: Students) => this.getCoursesWithSections(studentsRes)),\n+      mergeMap((coursesWithSections: SearchStudentsTable[]) =>\n+        forkJoin([\n+          of(coursesWithSections),\n+          this.getPrivileges(coursesWithSections),\n+        ]),\n+      ),\n+      map((res: [SearchStudentsTable[], InstructorPrivilege[]]) => this.combinePrivileges(res)),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getCoursesWithSections(studentsRes: Students): SearchStudentsTable[] {\n+    const { students }: { students: Student[] } = studentsRes;\n+\n+    const distinctCourses: string[] = Array.from(\n+      new Set(students.map((s: Student) => s.courseId)),\n+    );\n+    const coursesWithSections: SearchStudentsTable[] = distinctCourses.map(\n+      (courseId: string) => ({\n+        courseId,\n+        sections: Array.from(\n+          new Set(\n+            students\n+              .filter((s: Student) => s.courseId === courseId)\n+              .map((s: Student) => s.sectionName),\n+          ),\n+        ).map((sectionName: string) => ({\n+          sectionName,\n+          isAllowedToViewStudentInSection: false,\n+          isAllowedToModifyStudent: false,\n+          students: students\n+            .filter(\n+              (s: Student) =>\n+                s.courseId === courseId && s.sectionName === sectionName,\n+            )\n+            .map((s: Student) => ({\n+              name: s.name,\n+              email: s.email,\n+              status: s.joinState,\n+              team: s.teamName,\n+            })),\n+        })),\n+      }),\n+    );\n+\n+    return coursesWithSections;\n+  }\n+\n+  getPrivileges(\n+    coursesWithSections: SearchStudentsTable[],\n+  ): Observable<InstructorPrivilege[]> {\n+    return forkJoin(\n+      coursesWithSections.map((course: SearchStudentsTable) => {\n+        return course.sections.map((section: StudentListSectionData) => {\n+          return this.httpRequestService.get(\n+            ResourceEndpoints.INSTRUCTOR_PRIVILEGE,\n+            {\n+              courseid: course.courseId,\n+              sectionname: section.sectionName,\n+            },\n+          );\n+        });\n+      }).reduce(\n+        (acc: Observable<InstructorPrivilege>[], val: Observable<InstructorPrivilege>[]) =>\n+        acc.concat(val),\n+        [],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b696f35b20b8868a2658c0125a75618090ffa550"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MjE1MQ==", "bodyText": "Also could consider using the instructorService service to get the instructor privilege instead of calling httpRequestService directly\ninstructorService.loadInstructorPrivilege(queryParams)", "url": "https://github.com/TEAMMATES/teammates/pull/9995#discussion_r403652151", "createdAt": "2020-04-05T05:37:23Z", "author": {"login": "hcwong"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,127 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { map, mergeMap } from 'rxjs/operators';\n+import { SearchStudentsTable } from '../app/pages-instructor/instructor-search-page/instructor-search-page.component';\n+import { StudentListSectionData } from '../app/pages-instructor/student-list/student-list-section-data';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n+import { InstructorPrivilege, Student, Students } from '../types/api-output';\n+import { HttpRequestService } from './http-request.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+  constructor(private httpRequestService: HttpRequestService) {}\n+\n+  searchInstructor(searchKey: string): Observable<InstructorSearchResult> {\n+    return this.getStudents(searchKey).pipe(\n+      map((studentsRes: Students) => this.getCoursesWithSections(studentsRes)),\n+      mergeMap((coursesWithSections: SearchStudentsTable[]) =>\n+        forkJoin([\n+          of(coursesWithSections),\n+          this.getPrivileges(coursesWithSections),\n+        ]),\n+      ),\n+      map((res: [SearchStudentsTable[], InstructorPrivilege[]]) => this.combinePrivileges(res)),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getCoursesWithSections(studentsRes: Students): SearchStudentsTable[] {\n+    const { students }: { students: Student[] } = studentsRes;\n+\n+    const distinctCourses: string[] = Array.from(\n+      new Set(students.map((s: Student) => s.courseId)),\n+    );\n+    const coursesWithSections: SearchStudentsTable[] = distinctCourses.map(\n+      (courseId: string) => ({\n+        courseId,\n+        sections: Array.from(\n+          new Set(\n+            students\n+              .filter((s: Student) => s.courseId === courseId)\n+              .map((s: Student) => s.sectionName),\n+          ),\n+        ).map((sectionName: string) => ({\n+          sectionName,\n+          isAllowedToViewStudentInSection: false,\n+          isAllowedToModifyStudent: false,\n+          students: students\n+            .filter(\n+              (s: Student) =>\n+                s.courseId === courseId && s.sectionName === sectionName,\n+            )\n+            .map((s: Student) => ({\n+              name: s.name,\n+              email: s.email,\n+              status: s.joinState,\n+              team: s.teamName,\n+            })),\n+        })),\n+      }),\n+    );\n+\n+    return coursesWithSections;\n+  }\n+\n+  getPrivileges(\n+    coursesWithSections: SearchStudentsTable[],\n+  ): Observable<InstructorPrivilege[]> {\n+    return forkJoin(\n+      coursesWithSections.map((course: SearchStudentsTable) => {\n+        return course.sections.map((section: StudentListSectionData) => {\n+          return this.httpRequestService.get(\n+            ResourceEndpoints.INSTRUCTOR_PRIVILEGE,\n+            {\n+              courseid: course.courseId,\n+              sectionname: section.sectionName,\n+            },\n+          );\n+        });\n+      }).reduce(\n+        (acc: Observable<InstructorPrivilege>[], val: Observable<InstructorPrivilege>[]) =>\n+        acc.concat(val),\n+        [],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MTQ0Mg=="}, "originalCommit": {"oid": "b696f35b20b8868a2658c0125a75618090ffa550"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY2NjE3OA==", "bodyText": "Idk, could this be done so that we can remove the reduce part?\n\n\n  \n    \n      teammates/tsconfig.json\n    \n    \n         Line 27\n      in\n      5f35ee0\n    \n    \n    \n    \n\n        \n          \n           \"es2018\", \n        \n    \n  \n\n\nI would love to use flatMap but our project is configured for ES2018 and flatMap only ships in ES2019. It's easy for us to switch since we're already transpiling, just need to change the tsconfig.\n@xpdavid @wkurniawan07 what do you think?", "url": "https://github.com/TEAMMATES/teammates/pull/9995#discussion_r403666178", "createdAt": "2020-04-05T08:13:15Z", "author": {"login": "dvrylc"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,127 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { map, mergeMap } from 'rxjs/operators';\n+import { SearchStudentsTable } from '../app/pages-instructor/instructor-search-page/instructor-search-page.component';\n+import { StudentListSectionData } from '../app/pages-instructor/student-list/student-list-section-data';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n+import { InstructorPrivilege, Student, Students } from '../types/api-output';\n+import { HttpRequestService } from './http-request.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+  constructor(private httpRequestService: HttpRequestService) {}\n+\n+  searchInstructor(searchKey: string): Observable<InstructorSearchResult> {\n+    return this.getStudents(searchKey).pipe(\n+      map((studentsRes: Students) => this.getCoursesWithSections(studentsRes)),\n+      mergeMap((coursesWithSections: SearchStudentsTable[]) =>\n+        forkJoin([\n+          of(coursesWithSections),\n+          this.getPrivileges(coursesWithSections),\n+        ]),\n+      ),\n+      map((res: [SearchStudentsTable[], InstructorPrivilege[]]) => this.combinePrivileges(res)),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getCoursesWithSections(studentsRes: Students): SearchStudentsTable[] {\n+    const { students }: { students: Student[] } = studentsRes;\n+\n+    const distinctCourses: string[] = Array.from(\n+      new Set(students.map((s: Student) => s.courseId)),\n+    );\n+    const coursesWithSections: SearchStudentsTable[] = distinctCourses.map(\n+      (courseId: string) => ({\n+        courseId,\n+        sections: Array.from(\n+          new Set(\n+            students\n+              .filter((s: Student) => s.courseId === courseId)\n+              .map((s: Student) => s.sectionName),\n+          ),\n+        ).map((sectionName: string) => ({\n+          sectionName,\n+          isAllowedToViewStudentInSection: false,\n+          isAllowedToModifyStudent: false,\n+          students: students\n+            .filter(\n+              (s: Student) =>\n+                s.courseId === courseId && s.sectionName === sectionName,\n+            )\n+            .map((s: Student) => ({\n+              name: s.name,\n+              email: s.email,\n+              status: s.joinState,\n+              team: s.teamName,\n+            })),\n+        })),\n+      }),\n+    );\n+\n+    return coursesWithSections;\n+  }\n+\n+  getPrivileges(\n+    coursesWithSections: SearchStudentsTable[],\n+  ): Observable<InstructorPrivilege[]> {\n+    return forkJoin(\n+      coursesWithSections.map((course: SearchStudentsTable) => {\n+        return course.sections.map((section: StudentListSectionData) => {\n+          return this.httpRequestService.get(\n+            ResourceEndpoints.INSTRUCTOR_PRIVILEGE,\n+            {\n+              courseid: course.courseId,\n+              sectionname: section.sectionName,\n+            },\n+          );\n+        });\n+      }).reduce(\n+        (acc: Observable<InstructorPrivilege>[], val: Observable<InstructorPrivilege>[]) =>\n+        acc.concat(val),\n+        [],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MTQ0Mg=="}, "originalCommit": {"oid": "b696f35b20b8868a2658c0125a75618090ffa550"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY4MDQ5NA==", "bodyText": "Ah right forgot about the ES2019 thing. Sure that works then", "url": "https://github.com/TEAMMATES/teammates/pull/9995#discussion_r403680494", "createdAt": "2020-04-05T10:20:13Z", "author": {"login": "hcwong"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,127 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { map, mergeMap } from 'rxjs/operators';\n+import { SearchStudentsTable } from '../app/pages-instructor/instructor-search-page/instructor-search-page.component';\n+import { StudentListSectionData } from '../app/pages-instructor/student-list/student-list-section-data';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n+import { InstructorPrivilege, Student, Students } from '../types/api-output';\n+import { HttpRequestService } from './http-request.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+  constructor(private httpRequestService: HttpRequestService) {}\n+\n+  searchInstructor(searchKey: string): Observable<InstructorSearchResult> {\n+    return this.getStudents(searchKey).pipe(\n+      map((studentsRes: Students) => this.getCoursesWithSections(studentsRes)),\n+      mergeMap((coursesWithSections: SearchStudentsTable[]) =>\n+        forkJoin([\n+          of(coursesWithSections),\n+          this.getPrivileges(coursesWithSections),\n+        ]),\n+      ),\n+      map((res: [SearchStudentsTable[], InstructorPrivilege[]]) => this.combinePrivileges(res)),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getCoursesWithSections(studentsRes: Students): SearchStudentsTable[] {\n+    const { students }: { students: Student[] } = studentsRes;\n+\n+    const distinctCourses: string[] = Array.from(\n+      new Set(students.map((s: Student) => s.courseId)),\n+    );\n+    const coursesWithSections: SearchStudentsTable[] = distinctCourses.map(\n+      (courseId: string) => ({\n+        courseId,\n+        sections: Array.from(\n+          new Set(\n+            students\n+              .filter((s: Student) => s.courseId === courseId)\n+              .map((s: Student) => s.sectionName),\n+          ),\n+        ).map((sectionName: string) => ({\n+          sectionName,\n+          isAllowedToViewStudentInSection: false,\n+          isAllowedToModifyStudent: false,\n+          students: students\n+            .filter(\n+              (s: Student) =>\n+                s.courseId === courseId && s.sectionName === sectionName,\n+            )\n+            .map((s: Student) => ({\n+              name: s.name,\n+              email: s.email,\n+              status: s.joinState,\n+              team: s.teamName,\n+            })),\n+        })),\n+      }),\n+    );\n+\n+    return coursesWithSections;\n+  }\n+\n+  getPrivileges(\n+    coursesWithSections: SearchStudentsTable[],\n+  ): Observable<InstructorPrivilege[]> {\n+    return forkJoin(\n+      coursesWithSections.map((course: SearchStudentsTable) => {\n+        return course.sections.map((section: StudentListSectionData) => {\n+          return this.httpRequestService.get(\n+            ResourceEndpoints.INSTRUCTOR_PRIVILEGE,\n+            {\n+              courseid: course.courseId,\n+              sectionname: section.sectionName,\n+            },\n+          );\n+        });\n+      }).reduce(\n+        (acc: Observable<InstructorPrivilege>[], val: Observable<InstructorPrivilege>[]) =>\n+        acc.concat(val),\n+        [],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1MTQ0Mg=="}, "originalCommit": {"oid": "b696f35b20b8868a2658c0125a75618090ffa550"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3925, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}