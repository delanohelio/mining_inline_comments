{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNDkxODEw", "number": 10555, "title": "[#10544] Add feedback session copy to multiple courses", "bodyText": "Fixes #10544\nOutline of Solution\nChange modal input to checkbox. Ticking the checkbox triggers toggling of the courseId in copyToCourseSet, which is then emitted as a string array. Parent component will copy the new session per courseId returned. If session is being copied to more than one course, do not navigate to session editing.", "createdAt": "2020-08-05T16:10:22Z", "url": "https://github.com/TEAMMATES/teammates/pull/10555", "merged": true, "mergeCommit": {"oid": "018bec4838cecb0bb9926a72568647b70dbf77b0"}, "closed": true, "closedAt": "2020-10-11T03:30:46Z", "author": {"login": "madanalogy"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc79fq-gH2gAyNDYzNDkxODEwOjE0ZGUzZDFlMmE4ODQ0NDhhMzJhM2ZlOGZkOTFmODk5NzJhMzk2M2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdRVslRgH2gAyNDYzNDkxODEwOjZkNjkzYmE4MzhmOGQ2NzQzY2Y4MzBiNjFkODBjNTljMGYxYjJkYWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "14de3d1e2a884448a32a3fe8fd91f89972a3963c", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/14de3d1e2a884448a32a3fe8fd91f89972a3963c", "committedDate": "2020-08-05T16:06:25Z", "message": "Implement feedback session copy to multiple courses"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDU5OTcz", "url": "https://github.com/TEAMMATES/teammates/pull/10555#pullrequestreview-462059973", "createdAt": "2020-08-05T22:12:41Z", "commit": {"oid": "14de3d1e2a884448a32a3fe8fd91f89972a3963c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoxMjo0MVrOG8cbUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoxNDowNlrOG8cdAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzQ4OQ==", "bodyText": "More proper way is to use forkJoin to send the request concurrently (need more code changes and a sample can come from submission related code). I am ok with the current implementation also.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466033489", "createdAt": "2020-08-05T22:12:41Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,25 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        result.copyToCourseList.forEach((copyToCourseId: string) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14de3d1e2a884448a32a3fe8fd91f89972a3963c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzkyMg==", "bodyText": "You should also bind the [checked] property?", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466033922", "createdAt": "2020-08-05T22:14:06Z", "author": {"login": "xpdavid"}, "path": "src/web/app/components/copy-session-modal/copy-session-modal.component.html", "diffHunk": "@@ -17,8 +17,8 @@ <h5 class=\"modal-title\">\n       </div>\n       <div class=\"form-check\" *ngFor=\"let course of courseCandidates\">\n         <label class=\"form-check-label\">\n-          <input type=\"radio\" name=\"copySessionChooseCourse\" class=\"form-check-input\"\n-                 [(ngModel)]=\"copyToCourseId\" [value]=\"course.courseId\">\n+          <input type=\"checkbox\" name=\"copySessionChooseCourse\" class=\"form-check-input\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14de3d1e2a884448a32a3fe8fd91f89972a3963c"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78e71362eda37f9e9873d4e4d526aab346c01986", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/78e71362eda37f9e9873d4e4d526aab346c01986", "committedDate": "2020-08-06T05:56:07Z", "message": "Bind input property to copyToCourseSet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTg0NTc1", "url": "https://github.com/TEAMMATES/teammates/pull/10555#pullrequestreview-462984575", "createdAt": "2020-08-07T01:49:43Z", "commit": {"oid": "78e71362eda37f9e9873d4e4d526aab346c01986"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo0OTo0M1rOG9JxDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo1MDo0NFrOG9JyBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3NjMzMw==", "bodyText": "Though I don't like the idea of refreshing page. If you want reload the sessions, just call the corresponding method.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466776333", "createdAt": "2020-08-07T01:49:43Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,25 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        result.copyToCourseList.forEach((copyToCourseId: string) => {\n+          this.feedbackSessionsService.getFeedbackSession({\n+            courseId: this.courseId,\n+            feedbackSessionName: this.feedbackSessionName,\n+            intent: Intent.FULL_DETAIL,\n+          }).pipe(\n+              switchMap((feedbackSession: FeedbackSession) =>\n+                  this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)),\n+          ).subscribe((createdSession: FeedbackSession) => {\n+            if (result.copyToCourseList.length > 1) { return; }\n+            this.navigationService.navigateWithSuccessMessage(this.router,\n+                '/web/instructor/sessions/edit',\n+                'The feedback session has been copied. Please modify settings/questions as necessary.',\n+                { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+          }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        }, () => {});\n+        if (result.copyToCourseList.length > 1) { window.location.reload(); }\n+      }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e71362eda37f9e9873d4e4d526aab346c01986"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3NjU4MQ==", "bodyText": "Another question here is why we cannot reuse copySession in the base page?", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466776581", "createdAt": "2020-08-07T01:50:44Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,25 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        result.copyToCourseList.forEach((copyToCourseId: string) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e71362eda37f9e9873d4e4d526aab346c01986"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjIxOTU1", "url": "https://github.com/TEAMMATES/teammates/pull/10555#pullrequestreview-463221955", "createdAt": "2020-08-07T10:57:52Z", "commit": {"oid": "78e71362eda37f9e9873d4e4d526aab346c01986"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDo1Nzo1M1rOG9VkOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMTowNDozNFrOG9VvRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk2OTY1OA==", "bodyText": "Putting this outside of the subscribe function means that this will not wait for the subscription result. This is not exactly what we want because if any of the API calls fail, we need to know.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466969658", "createdAt": "2020-08-07T10:57:53Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,25 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        result.copyToCourseList.forEach((copyToCourseId: string) => {\n+          this.feedbackSessionsService.getFeedbackSession({\n+            courseId: this.courseId,\n+            feedbackSessionName: this.feedbackSessionName,\n+            intent: Intent.FULL_DETAIL,\n+          }).pipe(\n+              switchMap((feedbackSession: FeedbackSession) =>\n+                  this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)),\n+          ).subscribe((createdSession: FeedbackSession) => {\n+            if (result.copyToCourseList.length > 1) { return; }\n+            this.navigationService.navigateWithSuccessMessage(this.router,\n+                '/web/instructor/sessions/edit',\n+                'The feedback session has been copied. Please modify settings/questions as necessary.',\n+                { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+          }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        }, () => {});\n+        if (result.copyToCourseList.length > 1) { window.location.reload(); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e71362eda37f9e9873d4e4d526aab346c01986"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3MDEyNg==", "bodyText": "I am ok with the current implementation also.\n\nI am not; we need to either forkJoin the requests or change the back-end to accept list of course IDs.\n\nI thought that the current approach would be simpler and more straightforward\n\nThere is one problem with that argument: you're trading off with accuracy (in some sense).", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466970126", "createdAt": "2020-08-07T10:58:55Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,25 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        result.copyToCourseList.forEach((copyToCourseId: string) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzQ4OQ=="}, "originalCommit": {"oid": "14de3d1e2a884448a32a3fe8fd91f89972a3963c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3MjQ4Ng==", "bodyText": "If there are multiple course IDs, we still need to show toast mentioning that the operation is successful (and if any are failing).", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466972486", "createdAt": "2020-08-07T11:04:34Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,25 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        result.copyToCourseList.forEach((copyToCourseId: string) => {\n+          this.feedbackSessionsService.getFeedbackSession({\n+            courseId: this.courseId,\n+            feedbackSessionName: this.feedbackSessionName,\n+            intent: Intent.FULL_DETAIL,\n+          }).pipe(\n+              switchMap((feedbackSession: FeedbackSession) =>\n+                  this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)),\n+          ).subscribe((createdSession: FeedbackSession) => {\n+            if (result.copyToCourseList.length > 1) { return; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e71362eda37f9e9873d4e4d526aab346c01986"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1", "committedDate": "2020-08-07T13:18:29Z", "message": "Change copy session requests to use forkJoin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzI3NDM0", "url": "https://github.com/TEAMMATES/teammates/pull/10555#pullrequestreview-463327434", "createdAt": "2020-08-07T13:48:49Z", "commit": {"oid": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzo0ODo0OVrOG9ameA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDowNzozNlrOG9bSFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1MjE1Mg==", "bodyText": "This is not going to work. Subscriptions in Observable are asynchronous, so this line would have been executed before the Observables finish.\nEven if this works, this is essentially reloading the page (just less explicit than window.location.reload). Ideally, it should only append the new sessions for the courses that are already pre-fetched.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467052152", "createdAt": "2020-08-07T13:48:49Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-home-page/instructor-home-page.component.ts", "diffHunk": "@@ -360,6 +360,8 @@ export class InstructorHomePageComponent extends InstructorSessionModalPageCompo\n    */\n   copySessionEventHandler(tabIndex: number, result: CopySessionResult): void {\n     this.copySession(this.courseTabModels[tabIndex].sessionsTableRowModels[result.sessionToCopyRowIndex], result);\n+    this.courseTabModels = [];\n+    this.loadCourses();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1MzU1NQ==", "bodyText": "This is where the actual copying takes place, so this really is not a helper method. It was the previous method that becomes an event handler of some sort.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467053555", "createdAt": "2020-08-07T13:51:07Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -195,14 +195,33 @@ export abstract class InstructorSessionBasePageComponent {\n    * Copies the feedback session.\n    */\n   copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId));\n+    });\n+    this.copySessionHelper(copySessionRequests);\n+  }\n+\n+  /**\n+   * Submits the copy session requests.\n+   */\n+  copySessionHelper(copySessionRequests: Observable<FeedbackSession>[]): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1ODg1Nw==", "bodyText": "This is not sufficient. forkJoin-ing these requests verbatim will cause everything to be wasted if any of the API calls are errored. Reference: https://medium.com/better-programming/rxjs-error-handling-with-forkjoin-3d4027df70fc\nSee this, particularly on the functions passed to pipe:\n\n  \n    \n      teammates/src/web/app/pages-session/session-submission-page/session-submission-page.component.ts\n    \n    \n        Lines 608 to 628\n      in\n      748cc55\n    \n    \n    \n    \n\n        \n          \n           savingRequests.push( \n        \n\n        \n          \n               this.feedbackResponsesService.createFeedbackResponse(questionSubmissionFormModel.feedbackQuestionId, { \n        \n\n        \n          \n                 intent: this.intent, \n        \n\n        \n          \n                 key: this.regKey, \n        \n\n        \n          \n                 moderatedperson: this.moderatedPerson, \n        \n\n        \n          \n               }, { \n        \n\n        \n          \n                 recipientIdentifier: recipientSubmissionFormModel.recipientIdentifier, \n        \n\n        \n          \n                 questionType: questionSubmissionFormModel.questionType, \n        \n\n        \n          \n                 responseDetails: recipientSubmissionFormModel.responseDetails, \n        \n\n        \n          \n               }).pipe( \n        \n\n        \n          \n                   tap((resp: FeedbackResponse) => { \n        \n\n        \n          \n                     recipientSubmissionFormModel.responseId = resp.feedbackResponseId; \n        \n\n        \n          \n                     recipientSubmissionFormModel.responseDetails = resp.responseDetails; \n        \n\n        \n          \n                     recipientSubmissionFormModel.recipientIdentifier = resp.recipientIdentifier; \n        \n\n        \n          \n                   }), \n        \n\n        \n          \n                   switchMap(() => this.createCommentRequest(recipientSubmissionFormModel)), \n        \n\n        \n          \n                   catchError((error: ErrorMessageOutput) => { \n        \n\n        \n          \n                     failToSaveQuestions[questionSubmissionFormModel.questionNumber] = error.error.message; \n        \n\n        \n          \n                     return of(error); \n        \n\n        \n          \n                   }), \n        \n\n        \n          \n               ));", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467058857", "createdAt": "2020-08-07T13:59:48Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -195,14 +195,33 @@ export abstract class InstructorSessionBasePageComponent {\n    * Copies the feedback session.\n    */\n   copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2MjkwOQ==", "bodyText": "Use the actual typing instead of any?", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467062909", "createdAt": "2020-08-07T14:06:55Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,18 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        const copySessionRequests: Observable<any>[] = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2MzMxNg==", "bodyText": "Same comments here as the one in instructor home page", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467063316", "createdAt": "2020-08-07T14:07:36Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-sessions-page/instructor-sessions-page.component.ts", "diffHunk": "@@ -482,6 +482,8 @@ export class InstructorSessionsPageComponent extends InstructorSessionModalPageC\n    */\n   copySessionEventHandler(result: CopySessionResult): void {\n     this.copySession(this.sessionsTableRowModels[result.sessionToCopyRowIndex], result);\n+    this.sessionsTableRowModels = [];\n+    this.loadFeedbackSessions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a76eae7ac2e27b119598d9ccbb0658bbf4d91b3", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/9a76eae7ac2e27b119598d9ccbb0658bbf4d91b3", "committedDate": "2020-08-08T02:37:27Z", "message": "Add forkJoin error handling and update by model"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODIyMzk4", "url": "https://github.com/TEAMMATES/teammates/pull/10555#pullrequestreview-463822398", "createdAt": "2020-08-08T19:23:35Z", "commit": {"oid": "9a76eae7ac2e27b119598d9ccbb0658bbf4d91b3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxOToyMzozNVrOG91srQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxOToyNTowNFrOG91tKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjEwOQ==", "bodyText": "This is not going to work. This will almost always return empty list because the list is populated inside the subscribe block, but this method doesn't wait for that.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467496109", "createdAt": "2020-08-08T19:23:35Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +192,50 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Combines a {@link SessionsTableRowModel} and {@link CopySessionResult} to submit the copy session requests.\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionTransformer(model: SessionsTableRowModel, result: CopySessionResult): FeedbackSession[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId));\n+    });\n+    return this.copySession(copySessionRequests);\n+  }\n+\n+  /**\n+   * Submits the copy session requests.\n+   */\n+  copySession(copySessionRequests: Observable<FeedbackSession>[]): FeedbackSession[] {\n+    const successMessage: string =\n+        'The feedback session has been copied. Please modify settings/questions as necessary.';\n+    const sessionList: FeedbackSession[] = [];\n+    if (copySessionRequests.length === 1) {\n+      copySessionRequests[0].subscribe((createdSession: FeedbackSession) => {\n+        sessionList.push(createdSession);\n+        this.navigationService.navigateWithSuccessMessage(this.router,\n+            '/web/instructor/sessions/edit', successMessage,\n+            { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+      }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+    } else if (copySessionRequests.length > 1) {\n+      let isAnyFailed: boolean = false;\n+      forkJoin(copySessionRequests).pipe(\n+          tap((sessions: FeedbackSession[]) => {\n+            sessionList.concat(sessions);\n+          }),\n+          catchError((error: any) => {\n+            isAnyFailed = true;\n+            return of(error);\n+          }),\n+      ).subscribe(() => {\n+        if (isAnyFailed) {\n+          this.statusMessageService.showErrorToast('The session could not be copied into some courses.');\n+        } else {\n+          this.statusMessageService.showSuccessToast(successMessage);\n+        }\n+      });\n+    }\n+    return sessionList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a76eae7ac2e27b119598d9ccbb0658bbf4d91b3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjIzNA==", "bodyText": "Knowing isAnyFailed is good, but will be better if we know exactly which ones fail. Submission page does that.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467496234", "createdAt": "2020-08-08T19:25:04Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +192,50 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Combines a {@link SessionsTableRowModel} and {@link CopySessionResult} to submit the copy session requests.\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionTransformer(model: SessionsTableRowModel, result: CopySessionResult): FeedbackSession[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId));\n+    });\n+    return this.copySession(copySessionRequests);\n+  }\n+\n+  /**\n+   * Submits the copy session requests.\n+   */\n+  copySession(copySessionRequests: Observable<FeedbackSession>[]): FeedbackSession[] {\n+    const successMessage: string =\n+        'The feedback session has been copied. Please modify settings/questions as necessary.';\n+    const sessionList: FeedbackSession[] = [];\n+    if (copySessionRequests.length === 1) {\n+      copySessionRequests[0].subscribe((createdSession: FeedbackSession) => {\n+        sessionList.push(createdSession);\n+        this.navigationService.navigateWithSuccessMessage(this.router,\n+            '/web/instructor/sessions/edit', successMessage,\n+            { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+      }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+    } else if (copySessionRequests.length > 1) {\n+      let isAnyFailed: boolean = false;\n+      forkJoin(copySessionRequests).pipe(\n+          tap((sessions: FeedbackSession[]) => {\n+            sessionList.concat(sessions);\n+          }),\n+          catchError((error: any) => {\n+            isAnyFailed = true;\n+            return of(error);\n+          }),\n+      ).subscribe(() => {\n+        if (isAnyFailed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a76eae7ac2e27b119598d9ccbb0658bbf4d91b3"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee8d4adc97560ba8d6a29d0dda593cfb2e5ccc33", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ee8d4adc97560ba8d6a29d0dda593cfb2e5ccc33", "committedDate": "2020-08-15T10:23:03Z", "message": "Merge branch 'master' into 10544-copy-sessions\n\n# Conflicts:\n#\tsrc/web/app/components/copy-session-modal/copy-session-modal.component.html"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d00fd34b2121e8f45dc63906c07347cf32ab70e2", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d00fd34b2121e8f45dc63906c07347cf32ab70e2", "committedDate": "2020-08-16T14:25:54Z", "message": "Refactor copy session methods for modularity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6ea0d5389fc6bd68716673c57c68e360519e1d3", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/c6ea0d5389fc6bd68716673c57c68e360519e1d3", "committedDate": "2020-08-16T16:07:59Z", "message": "Merge branch 'master' into 10544-copy-sessions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/6c6e269fded5cde0acf19160125c2f0ffc7f4c17", "committedDate": "2020-08-16T16:22:08Z", "message": "Fix accidental regression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDU4ODM5", "url": "https://github.com/TEAMMATES/teammates/pull/10555#pullrequestreview-471058839", "createdAt": "2020-08-20T00:58:58Z", "commit": {"oid": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo1ODo1OVrOHDjoqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMToxNToyOFrOHDkR5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5MTYyNw==", "bodyText": "The method name doesn't represent what it does. The method returns a list of requests, but the method name implies that it does the copying.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473491627", "createdAt": "2020-08-20T00:58:59Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5Mjc1Nw==", "bodyText": "This method (building the requests) should not be concerned with resetting this field. The field needs to be reset when there is a fresh request to copy sessions, not when there is a need to build the HTTP requests.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473492757", "createdAt": "2020-08-20T01:00:34Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5NTI3OQ==", "bodyText": "This is already inside a pipe block, so you shouldn't need to define another .pipe here. Just make the catchError the second argument.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473495279", "createdAt": "2020-08-20T01:04:33Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+              .pipe(catchError((err: any) => {\n+                this.failedToCopySessions[copyToCourseId] = err.error.message;\n+                return of(err);\n+              })),\n+      );\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Creates list of copy session requests from params\n+   * @param result the result of the copy session modal\n+   * @param courseId the source courseId\n+   * @param feedbackSessionName the source feedback session name\n+   * @returns the list of copy session requests\n+   */\n+  copySessionFromModal(result: CopySessionModalResult, courseId: string, feedbackSessionName: string)\n+      : Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(this.feedbackSessionsService.getFeedbackSession({\n+        courseId,\n+        feedbackSessionName,\n+        intent: Intent.FULL_DETAIL,\n+      }).pipe(switchMap((feedbackSession: FeedbackSession) =>\n+              this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+          .pipe(catchError((err: any) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5ODQ3Mw==", "bodyText": "There's too many unnecessary concat here. You can simplify the process:\n\nUse map to map each session to the message Error copying to ${key}: ${this.failedToCopySessions[key]}\nEnd with join(' ')", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473498473", "createdAt": "2020-08-20T01:09:37Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+              .pipe(catchError((err: any) => {\n+                this.failedToCopySessions[copyToCourseId] = err.error.message;\n+                return of(err);\n+              })),\n+      );\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Creates list of copy session requests from params\n+   * @param result the result of the copy session modal\n+   * @param courseId the source courseId\n+   * @param feedbackSessionName the source feedback session name\n+   * @returns the list of copy session requests\n+   */\n+  copySessionFromModal(result: CopySessionModalResult, courseId: string, feedbackSessionName: string)\n+      : Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(this.feedbackSessionsService.getFeedbackSession({\n+        courseId,\n+        feedbackSessionName,\n+        intent: Intent.FULL_DETAIL,\n+      }).pipe(switchMap((feedbackSession: FeedbackSession) =>\n+              this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+          .pipe(catchError((err: any) => {\n+            this.failedToCopySessions[copyToCourseId] = err.error.message;\n+            return of(err);\n+          })),\n+      )));\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Submits a single copy session request.\n+   */\n+  copySingleSession(copySessionRequest: Observable<FeedbackSession>): void {\n+    copySessionRequest.subscribe((createdSession: FeedbackSession) => {\n+      if (Object.keys(this.failedToCopySessions).length === 0) {\n+        this.navigationService.navigateWithSuccessMessage(this.router,\n+            '/web/instructor/sessions/edit',\n+            'The feedback session has been copied. Please modify settings/questions as necessary.',\n+            { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+      } else {\n+        this.statusMessageService.showErrorToast(this.getCopyErrorMessage());\n+      }\n+    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  }\n+\n+  resolveCopyRequest(): void {\n+    if (Object.keys(this.failedToCopySessions).length > 0) {\n+      this.statusMessageService.showErrorToast(this.getCopyErrorMessage());\n+    } else {\n+      this.statusMessageService.showSuccessToast('Feedback session copied successfully to all courses.');\n+    }\n+  }\n+\n+  getCopyErrorMessage(): string {\n+    let errorMessage: string = '';\n+    Object.keys(this.failedToCopySessions).forEach((key: string) => {\n+      errorMessage = errorMessage.concat(`Error copying to ${key}:`).concat(' ')\n+          .concat(this.failedToCopySessions[key]).concat(' ');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUwMDE3NA==", "bodyText": "This is not exactly resolving the request; this is merely showing status message.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473500174", "createdAt": "2020-08-20T01:12:12Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+              .pipe(catchError((err: any) => {\n+                this.failedToCopySessions[copyToCourseId] = err.error.message;\n+                return of(err);\n+              })),\n+      );\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Creates list of copy session requests from params\n+   * @param result the result of the copy session modal\n+   * @param courseId the source courseId\n+   * @param feedbackSessionName the source feedback session name\n+   * @returns the list of copy session requests\n+   */\n+  copySessionFromModal(result: CopySessionModalResult, courseId: string, feedbackSessionName: string)\n+      : Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(this.feedbackSessionsService.getFeedbackSession({\n+        courseId,\n+        feedbackSessionName,\n+        intent: Intent.FULL_DETAIL,\n+      }).pipe(switchMap((feedbackSession: FeedbackSession) =>\n+              this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+          .pipe(catchError((err: any) => {\n+            this.failedToCopySessions[copyToCourseId] = err.error.message;\n+            return of(err);\n+          })),\n+      )));\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Submits a single copy session request.\n+   */\n+  copySingleSession(copySessionRequest: Observable<FeedbackSession>): void {\n+    copySessionRequest.subscribe((createdSession: FeedbackSession) => {\n+      if (Object.keys(this.failedToCopySessions).length === 0) {\n+        this.navigationService.navigateWithSuccessMessage(this.router,\n+            '/web/instructor/sessions/edit',\n+            'The feedback session has been copied. Please modify settings/questions as necessary.',\n+            { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+      } else {\n+        this.statusMessageService.showErrorToast(this.getCopyErrorMessage());\n+      }\n+    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  }\n+\n+  resolveCopyRequest(): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUwMjE4MA==", "bodyText": "Similar comment here as copySessionFromRowModel", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473502180", "createdAt": "2020-08-20T01:15:28Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+              .pipe(catchError((err: any) => {\n+                this.failedToCopySessions[copyToCourseId] = err.error.message;\n+                return of(err);\n+              })),\n+      );\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Creates list of copy session requests from params\n+   * @param result the result of the copy session modal\n+   * @param courseId the source courseId\n+   * @param feedbackSessionName the source feedback session name\n+   * @returns the list of copy session requests\n+   */\n+  copySessionFromModal(result: CopySessionModalResult, courseId: string, feedbackSessionName: string)\n+      : Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "913bbd0c3524fb25563fe1145bf34d3bdb0b8116", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/913bbd0c3524fb25563fe1145bf34d3bdb0b8116", "committedDate": "2020-09-06T16:55:07Z", "message": "Merge branch 'master' into 10544-copy-sessions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8294131451762dc5f069c20f7dfe89ba527b600", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/e8294131451762dc5f069c20f7dfe89ba527b600", "committedDate": "2020-09-06T17:19:45Z", "message": "Refactor for code quality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjE3NTM0", "url": "https://github.com/TEAMMATES/teammates/pull/10555#pullrequestreview-489217534", "createdAt": "2020-09-16T01:47:03Z", "commit": {"oid": "e8294131451762dc5f069c20f7dfe89ba527b600"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTo0NzowNFrOHSdEjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTo0NzowNFrOHSdEjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExMjcxNw==", "bodyText": "Single session is just a special case for copying multiple session, is it necessary to have a separate method to handle it?", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r489112717", "createdAt": "2020-09-16T01:47:04Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,19 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        this.failedToCopySessions = {};\n+        const requestList: Observable<FeedbackSession>[] = this.createSessionCopyRequestsFromModal(\n+            result, this.courseId, this.feedbackSessionName);\n+        if (requestList.length === 1) {\n+          this.copySingleSession(requestList[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8294131451762dc5f069c20f7dfe89ba527b600"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9d6eb8e04833ffe1bb161e2ddb05fada50b14d8", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/c9d6eb8e04833ffe1bb161e2ddb05fada50b14d8", "committedDate": "2020-09-28T15:33:12Z", "message": "Merge branch 'master' into 10544-copy-sessions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTIyNzYw", "url": "https://github.com/TEAMMATES/teammates/pull/10555#pullrequestreview-500522760", "createdAt": "2020-10-01T16:29:29Z", "commit": {"oid": "c9d6eb8e04833ffe1bb161e2ddb05fada50b14d8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoyOToyOVrOHbSTFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoyOToyOVrOHbSTFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3MzM5OQ==", "bodyText": "This should not be part of the component, but admittedly I can't really think of a better way to put this that still achieves what we want.", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r498373399", "createdAt": "2020-10-01T16:29:29Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -2,35 +2,35 @@ import { Router } from '@angular/router';\n import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n import { saveAs } from 'file-saver';\n import { from, Observable, of } from 'rxjs';\n-import { concatMap, finalize, last, switchMap } from 'rxjs/operators';\n+import { catchError, concatMap, finalize, last, switchMap } from 'rxjs/operators';\n import { FeedbackQuestionsService } from '../../services/feedback-questions.service';\n import { FeedbackSessionsService } from '../../services/feedback-sessions.service';\n import { InstructorService } from '../../services/instructor.service';\n import { NavigationService } from '../../services/navigation.service';\n import { StatusMessageService } from '../../services/status-message.service';\n import { TableComparatorService } from '../../services/table-comparator.service';\n import {\n-    FeedbackQuestion,\n-    FeedbackQuestions,\n-    FeedbackSession,\n-    FeedbackSessionStats,\n-    InstructorPrivilege,\n+  FeedbackQuestion,\n+  FeedbackQuestions,\n+  FeedbackSession,\n+  FeedbackSessionStats,\n+  InstructorPrivilege,\n } from '../../types/api-output';\n import { Intent } from '../../types/api-request';\n import { DEFAULT_NUMBER_OF_RETRY_ATTEMPTS } from '../../types/default-retry-attempts';\n import { SortBy, SortOrder } from '../../types/sort-properties';\n+import { CopySessionModalResult } from '../components/copy-session-modal/copy-session-modal-model';\n import { ErrorReportComponent } from '../components/error-report/error-report.component';\n-import {\n-    CopySessionResult,\n-    SessionsTableRowModel,\n-} from '../components/sessions-table/sessions-table-model';\n+import { CopySessionResult, SessionsTableRowModel } from '../components/sessions-table/sessions-table-model';\n import { ErrorMessageOutput } from '../error-message-output';\n \n /**\n  * The base page for session related page.\n  */\n export abstract class InstructorSessionBasePageComponent {\n \n+  protected failedToCopySessions: Record<string, string> = {}; // Map of failed session copy to error message", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d6eb8e04833ffe1bb161e2ddb05fada50b14d8"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTM0NDAx", "url": "https://github.com/TEAMMATES/teammates/pull/10555#pullrequestreview-506134401", "createdAt": "2020-10-11T00:25:14Z", "commit": {"oid": "c9d6eb8e04833ffe1bb161e2ddb05fada50b14d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d693ba838f8d6743cf830b61d80c59c0f1b2dae", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/6d693ba838f8d6743cf830b61d80c59c0f1b2dae", "committedDate": "2020-10-11T02:10:39Z", "message": "Merge branch 'master' into 10544-copy-sessions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4233, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}