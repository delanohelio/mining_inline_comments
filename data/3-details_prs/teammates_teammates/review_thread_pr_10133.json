{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjU3MzY4", "number": 10133, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozNzozMVrOEBbxwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNzozODo0MlrOEFVjzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTM5MTM3OnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozNzozMVrOGdRwpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjo0MzoxNFrOGhHrvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1Mjg3MQ==", "bodyText": "Why are these methods here instead of in backdoor? (just like verifyPresentInDatastore for example)", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r433352871", "createdAt": "2020-06-01T16:37:31Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCoursesPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSES_PAGE}.\n+ */\n+public class InstructorCoursesPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes[] courses = new CourseAttributes[3];\n+    CourseAttributes newCourse;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCoursesPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        courses[0] = testData.courses.get(\"CS1101\");\n+        courses[1] = testData.courses.get(\"CS2104\");\n+        courses[2] = testData.courses.get(\"CS2105\");\n+\n+        newCourse = CourseAttributes.builder(\"ICAddE2ETest.CS4100\")\n+                .withName(\"New Course\")\n+                .withTimezone(ZoneId.of(\"Asia/Singapore\"))\n+                .build();\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        BackDoor.deleteCourse(newCourse.getId());\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        String instructorId = testData.accounts.get(\"instructor\").getGoogleId();\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSES_PAGE)\n+                .withUserId(instructorId);\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCoursesPage coursesPage = AppPage.getNewPageInstance(browser, url, InstructorCoursesPage.class);\n+        coursesPage.waitForPageToLoad();\n+\n+        ______TS(\"verify loaded data\");\n+        CourseAttributes[] activeCourses = { courses[0] };\n+        CourseAttributes[] archivedCourses = { courses[1] };\n+        CourseAttributes[] deletedCourses = { courses[2] };\n+\n+        coursesPage.verifyActiveCoursesDetails(activeCourses);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCourses);\n+\n+        ______TS(\"verify statistics\");\n+        coursesPage.verifyActiveCourseStatistics(courses[0], \"1\", \"3\", \"3\", \"1\");\n+\n+        ______TS(\"verify cannot modify without permissions\");\n+        coursesPage.verifyNotModifiable(courses[0].getId());\n+\n+        ______TS(\"add new course\");\n+        CourseAttributes[] activeCoursesWithNewCourse = { newCourse, courses[0] };\n+        String[] expectedLinks = { \"/web/instructor/courses/enroll?courseid=\" + newCourse.getId(),\n+                \"/web/instructor/courses/edit?courseid=\" + newCourse.getId() };\n+        coursesPage.addCourse(newCourse);\n+\n+        coursesPage.verifyStatusMessageWithLinks(\"The course has been added. \"\n+                + \"Click here to add students to the course or click here to add other instructors.\\n\"\n+                + \"If you don't see the course in the list below, please refresh the page after a few moments.\",\n+                expectedLinks);\n+        coursesPage.sortByCourseId();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        verifyPresentInDatastore(newCourse);\n+\n+        ______TS(\"archive course\");\n+        CourseAttributes[] archivedCoursesWithNewCourse = { newCourse, courses[1] };\n+        coursesPage.archiveCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been archived. \"\n+                + \"It will not appear on the home page anymore.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCoursesWithNewCourse);\n+        verifyCourseArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"unarchive course\");\n+        coursesPage.unarchiveCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course has been unarchived.\");\n+        coursesPage.verifyNumArchivedCourses(1);\n+        coursesPage.sortByCourseName();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        verifyCourseNotArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"move active course to recycle bin\");\n+        newCourse.deletedAt = Instant.now();\n+        CourseAttributes[] deletedCoursesWithNewCourse = { newCourse, courses[2] };\n+        coursesPage.moveCourseToRecycleBin(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been deleted. \"\n+                + \"You can restore it from the Recycle Bin manually.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCoursesWithNewCourse);\n+        assertTrue(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"restore active course\");\n+        newCourse.deletedAt = null;\n+        coursesPage.restoreCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been restored.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        coursesPage.sortByCreationDate();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        assertFalse(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"move archived course to recycle bin\");\n+        coursesPage.archiveCourse(newCourse.getId());\n+        newCourse.deletedAt = Instant.now();\n+        coursesPage.moveArchivedCourseToRecycleBin(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been deleted. \"\n+                + \"You can restore it from the Recycle Bin manually.\");\n+        coursesPage.verifyNumArchivedCourses(1);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCoursesWithNewCourse);\n+        assertTrue(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"restore archived course\");\n+        newCourse.deletedAt = null;\n+        coursesPage.restoreCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been restored.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCoursesWithNewCourse);\n+        assertFalse(isCourseInRecycleBin(newCourse.getId()));\n+        verifyCourseArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"permanently delete course\");\n+        coursesPage.moveArchivedCourseToRecycleBin(newCourse.getId());\n+        coursesPage.deleteCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId()\n+                + \" has been permanently deleted.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        verifyAbsentInDatastore(newCourse);\n+\n+        ______TS(\"restore all\");\n+        coursesPage.moveArchivedCourseToRecycleBin(courses[1].getId());\n+        CourseAttributes[] activeCoursesWithRestored = { courses[0], courses[2] };\n+        coursesPage.restoreAllCourses();\n+\n+        coursesPage.verifyStatusMessage(\"All courses have been restored.\");\n+        coursesPage.sortByCourseId();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithRestored);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyNumDeletedCourses(0);\n+        assertFalse(isCourseInRecycleBin(courses[1].getId()));\n+        assertFalse(isCourseInRecycleBin(courses[2].getId()));\n+\n+        ______TS(\"permanently delete all\");\n+        coursesPage.moveArchivedCourseToRecycleBin(courses[1].getId());\n+        coursesPage.moveCourseToRecycleBin(courses[2].getId());\n+        coursesPage.deleteAllCourses();\n+\n+        coursesPage.verifyStatusMessage(\"All courses have been permanently deleted.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyNumArchivedCourses(0);\n+        coursesPage.verifyNumDeletedCourses(0);\n+        verifyAbsentInDatastore(courses[1]);\n+        verifyAbsentInDatastore(courses[2]);\n+\n+    }\n+\n+    private void verifyCourseArchivedInDatastore(String instructorId, CourseAttributes course) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4MjA3OQ==", "bodyText": "verifyPresentInDatastore is actually in BaseTestCaseWithDatastoreAccess which is one of the ancestors of all E2E test classes. However, I believe that the courses page test is the only test that will require the verification of archived courses in the datastore and hence I left it at that level.", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r437382079", "createdAt": "2020-06-09T12:43:14Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCoursesPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSES_PAGE}.\n+ */\n+public class InstructorCoursesPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes[] courses = new CourseAttributes[3];\n+    CourseAttributes newCourse;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCoursesPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        courses[0] = testData.courses.get(\"CS1101\");\n+        courses[1] = testData.courses.get(\"CS2104\");\n+        courses[2] = testData.courses.get(\"CS2105\");\n+\n+        newCourse = CourseAttributes.builder(\"ICAddE2ETest.CS4100\")\n+                .withName(\"New Course\")\n+                .withTimezone(ZoneId.of(\"Asia/Singapore\"))\n+                .build();\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        BackDoor.deleteCourse(newCourse.getId());\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        String instructorId = testData.accounts.get(\"instructor\").getGoogleId();\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSES_PAGE)\n+                .withUserId(instructorId);\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCoursesPage coursesPage = AppPage.getNewPageInstance(browser, url, InstructorCoursesPage.class);\n+        coursesPage.waitForPageToLoad();\n+\n+        ______TS(\"verify loaded data\");\n+        CourseAttributes[] activeCourses = { courses[0] };\n+        CourseAttributes[] archivedCourses = { courses[1] };\n+        CourseAttributes[] deletedCourses = { courses[2] };\n+\n+        coursesPage.verifyActiveCoursesDetails(activeCourses);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCourses);\n+\n+        ______TS(\"verify statistics\");\n+        coursesPage.verifyActiveCourseStatistics(courses[0], \"1\", \"3\", \"3\", \"1\");\n+\n+        ______TS(\"verify cannot modify without permissions\");\n+        coursesPage.verifyNotModifiable(courses[0].getId());\n+\n+        ______TS(\"add new course\");\n+        CourseAttributes[] activeCoursesWithNewCourse = { newCourse, courses[0] };\n+        String[] expectedLinks = { \"/web/instructor/courses/enroll?courseid=\" + newCourse.getId(),\n+                \"/web/instructor/courses/edit?courseid=\" + newCourse.getId() };\n+        coursesPage.addCourse(newCourse);\n+\n+        coursesPage.verifyStatusMessageWithLinks(\"The course has been added. \"\n+                + \"Click here to add students to the course or click here to add other instructors.\\n\"\n+                + \"If you don't see the course in the list below, please refresh the page after a few moments.\",\n+                expectedLinks);\n+        coursesPage.sortByCourseId();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        verifyPresentInDatastore(newCourse);\n+\n+        ______TS(\"archive course\");\n+        CourseAttributes[] archivedCoursesWithNewCourse = { newCourse, courses[1] };\n+        coursesPage.archiveCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been archived. \"\n+                + \"It will not appear on the home page anymore.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCoursesWithNewCourse);\n+        verifyCourseArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"unarchive course\");\n+        coursesPage.unarchiveCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course has been unarchived.\");\n+        coursesPage.verifyNumArchivedCourses(1);\n+        coursesPage.sortByCourseName();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        verifyCourseNotArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"move active course to recycle bin\");\n+        newCourse.deletedAt = Instant.now();\n+        CourseAttributes[] deletedCoursesWithNewCourse = { newCourse, courses[2] };\n+        coursesPage.moveCourseToRecycleBin(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been deleted. \"\n+                + \"You can restore it from the Recycle Bin manually.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCoursesWithNewCourse);\n+        assertTrue(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"restore active course\");\n+        newCourse.deletedAt = null;\n+        coursesPage.restoreCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been restored.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        coursesPage.sortByCreationDate();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        assertFalse(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"move archived course to recycle bin\");\n+        coursesPage.archiveCourse(newCourse.getId());\n+        newCourse.deletedAt = Instant.now();\n+        coursesPage.moveArchivedCourseToRecycleBin(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been deleted. \"\n+                + \"You can restore it from the Recycle Bin manually.\");\n+        coursesPage.verifyNumArchivedCourses(1);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCoursesWithNewCourse);\n+        assertTrue(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"restore archived course\");\n+        newCourse.deletedAt = null;\n+        coursesPage.restoreCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been restored.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCoursesWithNewCourse);\n+        assertFalse(isCourseInRecycleBin(newCourse.getId()));\n+        verifyCourseArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"permanently delete course\");\n+        coursesPage.moveArchivedCourseToRecycleBin(newCourse.getId());\n+        coursesPage.deleteCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId()\n+                + \" has been permanently deleted.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        verifyAbsentInDatastore(newCourse);\n+\n+        ______TS(\"restore all\");\n+        coursesPage.moveArchivedCourseToRecycleBin(courses[1].getId());\n+        CourseAttributes[] activeCoursesWithRestored = { courses[0], courses[2] };\n+        coursesPage.restoreAllCourses();\n+\n+        coursesPage.verifyStatusMessage(\"All courses have been restored.\");\n+        coursesPage.sortByCourseId();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithRestored);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyNumDeletedCourses(0);\n+        assertFalse(isCourseInRecycleBin(courses[1].getId()));\n+        assertFalse(isCourseInRecycleBin(courses[2].getId()));\n+\n+        ______TS(\"permanently delete all\");\n+        coursesPage.moveArchivedCourseToRecycleBin(courses[1].getId());\n+        coursesPage.moveCourseToRecycleBin(courses[2].getId());\n+        coursesPage.deleteAllCourses();\n+\n+        coursesPage.verifyStatusMessage(\"All courses have been permanently deleted.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyNumArchivedCourses(0);\n+        coursesPage.verifyNumDeletedCourses(0);\n+        verifyAbsentInDatastore(courses[1]);\n+        verifyAbsentInDatastore(courses[2]);\n+\n+    }\n+\n+    private void verifyCourseArchivedInDatastore(String instructorId, CourseAttributes course) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1Mjg3MQ=="}, "originalCommit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTM5NTU2OnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozODo0MVrOGdRzKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjo0NzoyM1rOGhH1tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MzUxNQ==", "bodyText": "Is this method really needed? It looks like it is hitting the same endpoint as getCourse.", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r433353515", "createdAt": "2020-06-01T16:38:41Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -282,6 +283,47 @@ public static CourseData getCourseData(String courseId) {\n      */\n     public static CourseAttributes getCourse(String courseId) {\n         CourseData courseData = getCourseData(courseId);\n+        if (courseData == null) {\n+            return null;\n+        }\n+        return CourseAttributes.builder(courseData.getCourseId())\n+                .withName(courseData.getCourseName())\n+                .withTimezone(ZoneId.of(courseData.getTimeZone()))\n+                .build();\n+    }\n+\n+    /**\n+     * Gets archived course data from the datastore.\n+     */\n+    public static CourseData getArchivedCourseData(String instructorId, String courseId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4NDYyOA==", "bodyText": "It is actually a different endpoint as archived status is not saved in the CourseAttributes but rather in InstructorAttributes. Hence the GetCourse endpoint cannot be used and the getCourses endpoint which gets all courses by instructor id has to be used instead.", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r437384628", "createdAt": "2020-06-09T12:47:23Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -282,6 +283,47 @@ public static CourseData getCourseData(String courseId) {\n      */\n     public static CourseAttributes getCourse(String courseId) {\n         CourseData courseData = getCourseData(courseId);\n+        if (courseData == null) {\n+            return null;\n+        }\n+        return CourseAttributes.builder(courseData.getCourseId())\n+                .withName(courseData.getCourseName())\n+                .withTimezone(ZoneId.of(courseData.getTimeZone()))\n+                .build();\n+    }\n+\n+    /**\n+     * Gets archived course data from the datastore.\n+     */\n+    public static CourseData getArchivedCourseData(String instructorId, String courseId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MzUxNQ=="}, "originalCommit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTM5NjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/Action.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozODo1NlrOGdRzsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjo0ODo0MVrOGhH40Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MzY1MQ==", "bodyText": "Why was this added?", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r433353651", "createdAt": "2020-06-01T16:38:56Z", "author": {"login": "rrtheonlyone"}, "path": "src/main/java/teammates/ui/webapi/action/Action.java", "diffHunk": "@@ -97,6 +97,7 @@ public void checkAccessControl() {\n     private void initAuthInfo() {\n         if (Config.BACKDOOR_KEY.equals(req.getHeader(\"Backdoor-Key\"))) {\n             authType = AuthType.ALL_ACCESS;\n+            userInfo = new UserInfo(getRequestParamValue(Const.ParamsNames.USER_ID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4NTQyNQ==", "bodyText": "Similar to above comment, it is because archived status is saved under InstructorAttributes and in order to get the archived courses of the instructor, the request must have the instructors user id. Without doing this the user field is null when using Backdoor.\nThis will also help other Backdoor requests in the future if user id is needed.", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r437385425", "createdAt": "2020-06-09T12:48:41Z", "author": {"login": "jtankw3"}, "path": "src/main/java/teammates/ui/webapi/action/Action.java", "diffHunk": "@@ -97,6 +97,7 @@ public void checkAccessControl() {\n     private void initAuthInfo() {\n         if (Config.BACKDOOR_KEY.equals(req.getHeader(\"Backdoor-Key\"))) {\n             authType = AuthType.ALL_ACCESS;\n+            userInfo = new UserInfo(getRequestParamValue(Const.ParamsNames.USER_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MzY1MQ=="}, "originalCommit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTQwNTgyOnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo0MTo1MlrOGdR52Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo0MTo1MlrOGdR52Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1NTIyNQ==", "bodyText": "This is a minor nit - when you hardcode in \"1\" / \"3\" / \"3\" / \"1\", you may run into problems when the course details are modified (you have to change two places instead of one). Perhaps getting it programmatically might be better?", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r433355225", "createdAt": "2020-06-01T16:41:52Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCoursesPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSES_PAGE}.\n+ */\n+public class InstructorCoursesPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes[] courses = new CourseAttributes[3];\n+    CourseAttributes newCourse;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCoursesPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        courses[0] = testData.courses.get(\"CS1101\");\n+        courses[1] = testData.courses.get(\"CS2104\");\n+        courses[2] = testData.courses.get(\"CS2105\");\n+\n+        newCourse = CourseAttributes.builder(\"ICAddE2ETest.CS4100\")\n+                .withName(\"New Course\")\n+                .withTimezone(ZoneId.of(\"Asia/Singapore\"))\n+                .build();\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        BackDoor.deleteCourse(newCourse.getId());\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        String instructorId = testData.accounts.get(\"instructor\").getGoogleId();\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSES_PAGE)\n+                .withUserId(instructorId);\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCoursesPage coursesPage = AppPage.getNewPageInstance(browser, url, InstructorCoursesPage.class);\n+        coursesPage.waitForPageToLoad();\n+\n+        ______TS(\"verify loaded data\");\n+        CourseAttributes[] activeCourses = { courses[0] };\n+        CourseAttributes[] archivedCourses = { courses[1] };\n+        CourseAttributes[] deletedCourses = { courses[2] };\n+\n+        coursesPage.verifyActiveCoursesDetails(activeCourses);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCourses);\n+\n+        ______TS(\"verify statistics\");\n+        coursesPage.verifyActiveCourseStatistics(courses[0], \"1\", \"3\", \"3\", \"1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDIxOTQ0OnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNTowODo0NVrOGjdppA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNTowODo0NVrOGjdppA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzOTE0MA==", "bodyText": "Here if you want, can do:\nif (!student.course.equals(course.getId())) {\n   continue;\n}\n\nThen un-indent the statements below!", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r439839140", "createdAt": "2020-06-14T15:08:45Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCoursesPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSES_PAGE}.\n+ */\n+public class InstructorCoursesPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes[] courses = new CourseAttributes[3];\n+    CourseAttributes newCourse;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCoursesPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        courses[0] = testData.courses.get(\"CS1101\");\n+        courses[1] = testData.courses.get(\"CS2104\");\n+        courses[2] = testData.courses.get(\"CS2105\");\n+\n+        newCourse = CourseAttributes.builder(\"ICAddE2ETest.CS4100\")\n+                .withName(\"New Course\")\n+                .withTimezone(ZoneId.of(\"Asia/Singapore\"))\n+                .build();\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        BackDoor.deleteCourse(newCourse.getId());\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        String instructorId = testData.accounts.get(\"instructor\").getGoogleId();\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSES_PAGE)\n+                .withUserId(instructorId);\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCoursesPage coursesPage = AppPage.getNewPageInstance(browser, url, InstructorCoursesPage.class);\n+        coursesPage.waitForPageToLoad();\n+\n+        ______TS(\"verify loaded data\");\n+        CourseAttributes[] activeCourses = { courses[0] };\n+        CourseAttributes[] archivedCourses = { courses[1] };\n+        CourseAttributes[] deletedCourses = { courses[2] };\n+\n+        coursesPage.verifyActiveCoursesDetails(activeCourses);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCourses);\n+\n+        ______TS(\"verify statistics\");\n+        verifyActiveCourseStatistics(coursesPage, courses[0]);\n+\n+        ______TS(\"verify cannot modify without permissions\");\n+        coursesPage.verifyNotModifiable(courses[0].getId());\n+\n+        ______TS(\"add new course\");\n+        CourseAttributes[] activeCoursesWithNewCourse = { newCourse, courses[0] };\n+        String[] expectedLinks = { \"/web/instructor/courses/enroll?courseid=\" + newCourse.getId(),\n+                \"/web/instructor/courses/edit?courseid=\" + newCourse.getId() };\n+        coursesPage.addCourse(newCourse);\n+\n+        coursesPage.verifyStatusMessageWithLinks(\"The course has been added. \"\n+                + \"Click here to add students to the course or click here to add other instructors.\\n\"\n+                + \"If you don't see the course in the list below, please refresh the page after a few moments.\",\n+                expectedLinks);\n+        coursesPage.sortByCourseId();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        verifyPresentInDatastore(newCourse);\n+\n+        ______TS(\"archive course\");\n+        CourseAttributes[] archivedCoursesWithNewCourse = { newCourse, courses[1] };\n+        coursesPage.archiveCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been archived. \"\n+                + \"It will not appear on the home page anymore.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCoursesWithNewCourse);\n+        verifyCourseArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"unarchive course\");\n+        coursesPage.unarchiveCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course has been unarchived.\");\n+        coursesPage.verifyNumArchivedCourses(1);\n+        coursesPage.sortByCourseName();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        verifyCourseNotArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"move active course to recycle bin\");\n+        newCourse.deletedAt = Instant.now();\n+        CourseAttributes[] deletedCoursesWithNewCourse = { newCourse, courses[2] };\n+        coursesPage.moveCourseToRecycleBin(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been deleted. \"\n+                + \"You can restore it from the Recycle Bin manually.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCoursesWithNewCourse);\n+        assertTrue(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"restore active course\");\n+        newCourse.deletedAt = null;\n+        coursesPage.restoreCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been restored.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        coursesPage.sortByCreationDate();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        assertFalse(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"move archived course to recycle bin\");\n+        coursesPage.archiveCourse(newCourse.getId());\n+        newCourse.deletedAt = Instant.now();\n+        coursesPage.moveArchivedCourseToRecycleBin(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been deleted. \"\n+                + \"You can restore it from the Recycle Bin manually.\");\n+        coursesPage.verifyNumArchivedCourses(1);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCoursesWithNewCourse);\n+        assertTrue(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"restore archived course\");\n+        newCourse.deletedAt = null;\n+        coursesPage.restoreCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been restored.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCoursesWithNewCourse);\n+        assertFalse(isCourseInRecycleBin(newCourse.getId()));\n+        verifyCourseArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"permanently delete course\");\n+        coursesPage.moveArchivedCourseToRecycleBin(newCourse.getId());\n+        coursesPage.deleteCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId()\n+                + \" has been permanently deleted.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        verifyAbsentInDatastore(newCourse);\n+\n+        ______TS(\"restore all\");\n+        coursesPage.moveArchivedCourseToRecycleBin(courses[1].getId());\n+        CourseAttributes[] activeCoursesWithRestored = { courses[0], courses[2] };\n+        coursesPage.restoreAllCourses();\n+\n+        coursesPage.verifyStatusMessage(\"All courses have been restored.\");\n+        coursesPage.sortByCourseId();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithRestored);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyNumDeletedCourses(0);\n+        assertFalse(isCourseInRecycleBin(courses[1].getId()));\n+        assertFalse(isCourseInRecycleBin(courses[2].getId()));\n+\n+        ______TS(\"permanently delete all\");\n+        coursesPage.moveArchivedCourseToRecycleBin(courses[1].getId());\n+        coursesPage.moveCourseToRecycleBin(courses[2].getId());\n+        coursesPage.deleteAllCourses();\n+\n+        coursesPage.verifyStatusMessage(\"All courses have been permanently deleted.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyNumArchivedCourses(0);\n+        coursesPage.verifyNumDeletedCourses(0);\n+        verifyAbsentInDatastore(courses[1]);\n+        verifyAbsentInDatastore(courses[2]);\n+    }\n+\n+    private void verifyActiveCourseStatistics(InstructorCoursesPage coursesPage, CourseAttributes course) {\n+        int numSections = 0;\n+        int numTeams = 0;\n+        int numStudents = 0;\n+        int numUnregistered = 0;\n+        Set<String> sections = new HashSet<>();\n+        Set<String> teams = new HashSet<>();\n+\n+        for (StudentAttributes student : testData.students.values()) {\n+            if (student.course.equals(course.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0cd57cb93dcdd903deff1a35c6b1431c1fee372"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDMxNTQ3OnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNzozODoyMFrOGjebWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNzozODoyMFrOGjebWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1MTg2Ng==", "bodyText": "These can be private?", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r439851866", "createdAt": "2020-06-14T17:38:20Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCoursesPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSES_PAGE}.\n+ */\n+public class InstructorCoursesPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes[] courses = new CourseAttributes[3];\n+    CourseAttributes newCourse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0cd57cb93dcdd903deff1a35c6b1431c1fee372"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDMxNTY0OnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNzozODo0MlrOGjebcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNzozODo0MlrOGjebcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1MTg5MA==", "bodyText": "There are items in Const.WebPageURIs that can be used here.", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r439851890", "createdAt": "2020-06-14T17:38:42Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCoursesPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSES_PAGE}.\n+ */\n+public class InstructorCoursesPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes[] courses = new CourseAttributes[3];\n+    CourseAttributes newCourse;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCoursesPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        courses[0] = testData.courses.get(\"CS1101\");\n+        courses[1] = testData.courses.get(\"CS2104\");\n+        courses[2] = testData.courses.get(\"CS2105\");\n+\n+        newCourse = CourseAttributes.builder(\"ICAddE2ETest.CS4100\")\n+                .withName(\"New Course\")\n+                .withTimezone(ZoneId.of(\"Asia/Singapore\"))\n+                .build();\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        BackDoor.deleteCourse(newCourse.getId());\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        String instructorId = testData.accounts.get(\"instructor\").getGoogleId();\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSES_PAGE)\n+                .withUserId(instructorId);\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCoursesPage coursesPage = AppPage.getNewPageInstance(browser, url, InstructorCoursesPage.class);\n+        coursesPage.waitForPageToLoad();\n+\n+        ______TS(\"verify loaded data\");\n+        CourseAttributes[] activeCourses = { courses[0] };\n+        CourseAttributes[] archivedCourses = { courses[1] };\n+        CourseAttributes[] deletedCourses = { courses[2] };\n+\n+        coursesPage.verifyActiveCoursesDetails(activeCourses);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCourses);\n+\n+        ______TS(\"verify statistics\");\n+        verifyActiveCourseStatistics(coursesPage, courses[0]);\n+\n+        ______TS(\"verify cannot modify without permissions\");\n+        coursesPage.verifyNotModifiable(courses[0].getId());\n+\n+        ______TS(\"add new course\");\n+        CourseAttributes[] activeCoursesWithNewCourse = { newCourse, courses[0] };\n+        String[] expectedLinks = { \"/web/instructor/courses/enroll?courseid=\" + newCourse.getId(),\n+                \"/web/instructor/courses/edit?courseid=\" + newCourse.getId() };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0cd57cb93dcdd903deff1a35c6b1431c1fee372"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3734, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}