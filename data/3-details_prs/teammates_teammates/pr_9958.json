{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1ODY1NDk3", "number": 9958, "title": "[#9646] Add L&P tests for backend endpoints", "bodyText": "Fixes #9646\nOutline of Solution\n\nAdded two Load and Performance tests related to feedback sessions, specifically for viewing, and submitting feedback sessions.\nWhile the original issue mentioned \"Submitting a feedback session when the number of questions is large\", I implemented the test by having many students submit a feedback session question. This is because each feedback session question makes its own POST/PUT request to create/update, so having many question in a single feedback session, or having many students submit a question at same time has similar impact. In fact, I would consider the latter to be more often, since its common for a large course to have many students submitting feedback at same time, and its rare for a feedback session to have >50 questions.\nAdded a Backdoor method that allows you to obtain Feedback Question ID, by supplying feedback session ID, course ID and the question index. This was necessary to obtain the feedback question id from the L&P test class, since the ID for feedback question is only generated when it is created in the backend server and cannot be obtained normally in the test class.", "createdAt": "2020-02-16T19:57:57Z", "url": "https://github.com/TEAMMATES/teammates/pull/9958", "merged": true, "mergeCommit": {"oid": "0bc073e2f84edb1b7c9aa0e1925000246f973814"}, "closed": true, "closedAt": "2020-04-02T23:20:43Z", "author": {"login": "daekoon"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcD_iR5gH2gAyMzc1ODY1NDk3OmYyNjJmYzJiYTc0ZDRiZjgwZDU5Yjc3NjVlMGRmODAxZTQyYzc4ZTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT0qAFgFqTM4NjgzOTkxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f262fc2ba74d4bf80d59b7765e0df801e42c78e8", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/f262fc2ba74d4bf80d59b7765e0df801e42c78e8", "committedDate": "2020-02-13T18:49:19Z", "message": "Add skeleton for Feedback Session load testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a6daef8e2ab3de8cfcea55c58f940ea85c302c3", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/4a6daef8e2ab3de8cfcea55c58f940ea85c302c3", "committedDate": "2020-02-13T19:16:38Z", "message": "Add method to generate feedback session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eda259772484334ed47f33fb70ee508dba6b2ff", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/1eda259772484334ed47f33fb70ee508dba6b2ff", "committedDate": "2020-02-13T19:46:46Z", "message": "Add method to generate feedback questions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f270aa582e43979a1b990805ceecb08234c1c2e7", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/f270aa582e43979a1b990805ceecb08234c1c2e7", "committedDate": "2020-02-15T17:15:08Z", "message": "Complete feedback view lnp test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "739dfe103bc59afef6ab8c4e811c8f42900db55e", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/739dfe103bc59afef6ab8c4e811c8f42900db55e", "committedDate": "2020-02-15T19:45:03Z", "message": "Change test to use login method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "787b40708e4f2a80ae3e751191c006e157f949c2", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/787b40708e4f2a80ae3e751191c006e157f949c2", "committedDate": "2020-02-15T20:41:52Z", "message": "Fix lnp test for viewing feedback form not working properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd3ce07c5392c1e00e2f9b4463055e6f51b4adbd", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/cd3ce07c5392c1e00e2f9b4463055e6f51b4adbd", "committedDate": "2020-02-15T20:52:13Z", "message": "Fix styling issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d389f6286904f024ffb16b7e62977455e2ae0da", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/6d389f6286904f024ffb16b7e62977455e2ae0da", "committedDate": "2020-02-15T21:22:06Z", "message": "Add more HTTP request to simulate real case scenario better"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78f1cf0f0084553b2fd539205ee34f7cd4eebe15", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/78f1cf0f0084553b2fd539205ee34f7cd4eebe15", "committedDate": "2020-02-15T22:16:56Z", "message": "Fix FeedbackSessionQuestion giving errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c98774b08810466d9edfefb62c9592e7f4b6b11f", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/c98774b08810466d9edfefb62c9592e7f4b6b11f", "committedDate": "2020-02-16T00:11:53Z", "message": "Create new lnp test for submitting feedback session form"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a589b4b9226e9d0007b54090232c2acdd8199c53", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/a589b4b9226e9d0007b54090232c2acdd8199c53", "committedDate": "2020-02-16T07:59:25Z", "message": "Attempt to fix regexMatcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d4091014776f7684fe98aa3cc3acb97d67d996a", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/6d4091014776f7684fe98aa3cc3acb97d67d996a", "committedDate": "2020-02-16T18:52:11Z", "message": "Fix lnp testing for Feedback session submit response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a63dec974e734da2f692e2e2526a5f4c8d5bf5", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/38a63dec974e734da2f692e2e2526a5f4c8d5bf5", "committedDate": "2020-02-16T18:54:18Z", "message": "Remove debugging code and stray character"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ccc4d7b7832861885a243915349a1742d834d0", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/f3ccc4d7b7832861885a243915349a1742d834d0", "committedDate": "2020-02-16T19:10:40Z", "message": "Disable standard output stream for lnp tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "104b14a3acfa2399470f363b49728e625aef1392", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/104b14a3acfa2399470f363b49728e625aef1392", "committedDate": "2020-02-16T19:51:08Z", "message": "Fix style issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b01c9ae90972f8ca048f71407ff251fda060c159", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/b01c9ae90972f8ca048f71407ff251fda060c159", "committedDate": "2020-02-16T20:57:49Z", "message": "Fix lint and other minor issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDI5OTUz", "url": "https://github.com/TEAMMATES/teammates/pull/9958#pullrequestreview-359429953", "createdAt": "2020-02-16T21:20:52Z", "commit": {"oid": "b01c9ae90972f8ca048f71407ff251fda060c159"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToyMDo1MlrOFqVWMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToyNjowMVrOFqVXcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDI1Ng==", "bodyText": "Forget to change?", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934256", "createdAt": "2020-02-16T21:20:52Z", "author": {"login": "xpdavid"}, "path": "src/e2e/java/teammates/e2e/cases/lnp/FeedbackSessionSubmitLNPTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package teammates.e2e.cases.lnp;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.jmeter.protocol.http.control.HeaderManager;\n+import org.apache.jorphan.collections.HashTree;\n+import org.apache.jorphan.collections.ListedHashTree;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.DataBundle;\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.InstructorPrivileges;\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;\n+import teammates.common.util.Const;\n+import teammates.e2e.util.BackDoor;\n+import teammates.e2e.util.JMeterElements;\n+import teammates.e2e.util.LNPTestData;\n+\n+/**\n+ * L&P Test Case for instructor's student enrollment API endpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01c9ae90972f8ca048f71407ff251fda060c159"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDM2Mg==", "bodyText": "sleep for?", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934362", "createdAt": "2020-02-16T21:22:27Z", "author": {"login": "xpdavid"}, "path": "src/e2e/java/teammates/e2e/cases/lnp/FeedbackSessionSubmitLNPTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package teammates.e2e.cases.lnp;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.jmeter.protocol.http.control.HeaderManager;\n+import org.apache.jorphan.collections.HashTree;\n+import org.apache.jorphan.collections.ListedHashTree;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.DataBundle;\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.InstructorPrivileges;\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;\n+import teammates.common.util.Const;\n+import teammates.e2e.util.BackDoor;\n+import teammates.e2e.util.JMeterElements;\n+import teammates.e2e.util.LNPTestData;\n+\n+/**\n+ * L&P Test Case for instructor's student enrollment API endpoint.\n+ */\n+public class FeedbackSessionSubmitLNPTest extends BaseLNPTestCase {\n+\n+    private static final int NUMBER_OF_USER_ACCOUNTS = 500;\n+    private static final int RAMP_UP_PERIOD = 2;\n+    private static final String STUDENT_NAME = \"LnPStudent\";\n+    private static final String STUDENT_EMAIL = \"personalEmail\";\n+\n+    private static final String INSTRUCTOR_EMAIL = \"tmms.test@gmail.tmt\";\n+\n+    private static final String COURSE_ID = \"TestData.CS101\";\n+    private static final String FEEDBACK_SESSION_NAME = \"Test Feedback Session\";\n+\n+    @Override\n+    protected LNPTestData getTestData() {\n+        return new LNPTestData() {\n+            @Override\n+            protected Map<String, AccountAttributes> generateAccounts() {\n+                Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    accounts.put(STUDENT_NAME + i, AccountAttributes.builder(STUDENT_NAME + i + \".tmms\")\n+                            .withEmail(STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                            .withName(STUDENT_NAME + i)\n+                            .withIsInstructor(false)\n+                            .withInstitute(\"TEAMMATES Test Institute 2\")\n+                            .build()\n+                    );\n+                }\n+\n+                return accounts;\n+            }\n+\n+            @Override\n+            protected Map<String, CourseAttributes> generateCourses() {\n+                Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+                courses.put(\"course\", CourseAttributes.builder(COURSE_ID)\n+                        .withName(\"Feedback Load Testing\")\n+                        .withTimezone(ZoneId.of(\"UTC\"))\n+                        .build()\n+                );\n+\n+                return courses;\n+            }\n+\n+            @Override\n+            protected Map<String, InstructorAttributes> generateInstructors() {\n+                Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+                instructors.put(\"teammates.test.instructor\",\n+                        InstructorAttributes.builder(COURSE_ID, INSTRUCTOR_EMAIL)\n+                                .withGoogleId(\"TestData.instructor\")\n+                                .withName(\"Teammates Test\")\n+                                .withRole(\"Co-owner\")\n+                                .withIsDisplayedToStudents(true)\n+                                .withDisplayedName(\"Co-owner\")\n+                                .withPrivileges(new InstructorPrivileges(\n+                                        Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER))\n+                                .build()\n+                );\n+\n+                return instructors;\n+            }\n+\n+            @Override\n+            protected Map<String, StudentAttributes> generateStudents() {\n+                Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+                StudentAttributes studentAttribute;\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    studentAttribute = StudentAttributes.builder(COURSE_ID, STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                                            .withGoogleId(STUDENT_NAME + i + \".tmms\")\n+                                            .withName(STUDENT_NAME + i)\n+                                            .withComment(\"This student's name is \" + STUDENT_NAME + i)\n+                                            .withSectionName(\"None\")\n+                                            .withTeamName(\"Team 1\")\n+                                            .build();\n+                    students.put(STUDENT_NAME + i, studentAttribute);\n+                }\n+\n+                return students;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackSessionAttributes> generateFeedbackSessions() {\n+                Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+                FeedbackSessionAttributes session = FeedbackSessionAttributes\n+                                                            .builder(FEEDBACK_SESSION_NAME, COURSE_ID)\n+                                                            .withCreatorEmail(INSTRUCTOR_EMAIL)\n+                                                            .withStartTime(Instant.now())\n+                                                            .withEndTime(Instant.now().plusSeconds(500))\n+                                                            .withSessionVisibleFromTime(Instant.now())\n+                                                            .withResultsVisibleFromTime(Instant.now())\n+                                                            .build();\n+\n+                feedbackSessions.put(FEEDBACK_SESSION_NAME, session);\n+\n+                return feedbackSessions;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackQuestionAttributes> generateFeedbackQuestions() {\n+                ArrayList<FeedbackParticipantType> showResponses = new ArrayList<>();\n+                showResponses.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                ArrayList<FeedbackParticipantType> showGiverName = new ArrayList<>();\n+                showGiverName.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                ArrayList<FeedbackParticipantType> showRecepientName = new ArrayList<>();\n+                showRecepientName.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+                FeedbackQuestionDetails details = new FeedbackTextQuestionDetails(\"Test Question\");\n+                feedbackQuestions.put(\"QuestionTest\",\n+                        FeedbackQuestionAttributes.builder()\n+                            .withFeedbackSessionName(FEEDBACK_SESSION_NAME)\n+                                .withQuestionDescription(\"Test Question\")\n+                            .withCourseId(COURSE_ID)\n+                            .withQuestionDetails(details)\n+                            .withQuestionNumber(1)\n+                            .withGiverType(FeedbackParticipantType.STUDENTS)\n+                            .withRecipientType(FeedbackParticipantType.SELF)\n+                            .withShowResponsesTo(showResponses)\n+                            .withShowGiverNameTo(showGiverName)\n+                            .withShowRecipientNameTo(showRecepientName)\n+                            .withNumberOfEntitiesToGiveFeedbackTo(1)\n+                            .build()\n+                );\n+\n+                return feedbackQuestions;\n+            }\n+\n+            @Override\n+            public List<String> generateCsvHeaders() {\n+                List<String> headers = new ArrayList<>();\n+\n+                headers.add(\"loginId\");\n+                headers.add(\"isAdmin\");\n+                headers.add(\"googleId\");\n+                headers.add(\"courseId\");\n+                headers.add(\"fsname\");\n+                headers.add(\"studentEmail\");\n+\n+                return headers;\n+            }\n+\n+            @Override\n+            public List<List<String>> generateCsvData() {\n+                DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n+                List<List<String>> csvData = new ArrayList<>();\n+\n+                dataBundle.students.forEach((key, student) -> {\n+                    List<String> csvRow = new ArrayList<>();\n+\n+                    csvRow.add(student.googleId); // \"googleId\" is used for logging in, not \"email\"\n+                    csvRow.add(\"no\");\n+                    csvRow.add(student.googleId);\n+                    csvRow.add(COURSE_ID);\n+                    csvRow.add(FEEDBACK_SESSION_NAME);\n+                    csvRow.add(student.email);\n+\n+                    csvData.add(csvRow);\n+\n+                });\n+\n+                return csvData;\n+            }\n+        };\n+    }\n+\n+    private Map<String, String> getRequestHeaders() {\n+        Map<String, String> headers = new LinkedHashMap<>();\n+\n+        headers.put(\"X-CSRF-TOKEN\", \"${csrfToken}\");\n+        headers.put(\"Content-Type\", \"application/json\");\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    protected ListedHashTree getLnpTestPlan() {\n+        ListedHashTree testPlan = new ListedHashTree(JMeterElements.testPlan());\n+        HashTree threadGroup = testPlan.add(\n+                JMeterElements.threadGroup(NUMBER_OF_USER_ACCOUNTS, RAMP_UP_PERIOD, 1));\n+        threadGroup.add(JMeterElements.csvDataSet(getPathToTestDataFile(getCsvConfigPath())));\n+        threadGroup.add(JMeterElements.cookieManager());\n+        threadGroup.add(JMeterElements.defaultSampler());\n+        threadGroup.add(JMeterElements.onceOnlyController())\n+                .add(JMeterElements.loginSampler())\n+                .add(JMeterElements.csrfExtractor(\"csrfToken\"));\n+\n+        HeaderManager headerManager = JMeterElements.headerManager(getRequestHeaders());\n+        threadGroup.add(headerManager);\n+\n+        //Backdoor to retrieve questionId which is generated only on backend server\n+        String fqId = BackDoor.getFeedbackQuestionId(COURSE_ID, FEEDBACK_SESSION_NAME, 1);\n+\n+        String body = \"{\\\"questionType\\\": \\\"TEXT\\\",\"\n+                + \"\\\"recipientIdentifier\\\": \\\"${studentEmail}\\\",\"\n+                + \"\\\"responseDetails\\\": {\\\"answer\\\": \\\"<p>test</p>\\\", \\\"questionType\\\": \\\"TEXT\\\"}}\";\n+        String fourthPath = \"webapi/response?questionid=\" + fqId\n+                                    + \"&intent=STUDENT_SUBMISSION\";\n+        threadGroup.add(JMeterElements.httpSampler(fourthPath, POST, body));\n+\n+        return testPlan;\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        createTestData();\n+        persistTestData();\n+    }\n+\n+    @Test\n+    public void runLnpTest() throws IOException {\n+        try {\n+            Thread.sleep(3000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01c9ae90972f8ca048f71407ff251fda060c159"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDQxNA==", "bodyText": "Remember to change the doc", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934414", "createdAt": "2020-02-16T21:23:19Z", "author": {"login": "xpdavid"}, "path": "src/e2e/java/teammates/e2e/cases/lnp/FeedbackSessionSubmitLNPTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package teammates.e2e.cases.lnp;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.jmeter.protocol.http.control.HeaderManager;\n+import org.apache.jorphan.collections.HashTree;\n+import org.apache.jorphan.collections.ListedHashTree;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.DataBundle;\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.InstructorPrivileges;\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;\n+import teammates.common.util.Const;\n+import teammates.e2e.util.BackDoor;\n+import teammates.e2e.util.JMeterElements;\n+import teammates.e2e.util.LNPTestData;\n+\n+/**\n+ * L&P Test Case for instructor's student enrollment API endpoint.\n+ */\n+public class FeedbackSessionSubmitLNPTest extends BaseLNPTestCase {\n+\n+    private static final int NUMBER_OF_USER_ACCOUNTS = 500;\n+    private static final int RAMP_UP_PERIOD = 2;\n+    private static final String STUDENT_NAME = \"LnPStudent\";\n+    private static final String STUDENT_EMAIL = \"personalEmail\";\n+\n+    private static final String INSTRUCTOR_EMAIL = \"tmms.test@gmail.tmt\";\n+\n+    private static final String COURSE_ID = \"TestData.CS101\";\n+    private static final String FEEDBACK_SESSION_NAME = \"Test Feedback Session\";\n+\n+    @Override\n+    protected LNPTestData getTestData() {\n+        return new LNPTestData() {\n+            @Override\n+            protected Map<String, AccountAttributes> generateAccounts() {\n+                Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    accounts.put(STUDENT_NAME + i, AccountAttributes.builder(STUDENT_NAME + i + \".tmms\")\n+                            .withEmail(STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                            .withName(STUDENT_NAME + i)\n+                            .withIsInstructor(false)\n+                            .withInstitute(\"TEAMMATES Test Institute 2\")\n+                            .build()\n+                    );\n+                }\n+\n+                return accounts;\n+            }\n+\n+            @Override\n+            protected Map<String, CourseAttributes> generateCourses() {\n+                Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+                courses.put(\"course\", CourseAttributes.builder(COURSE_ID)\n+                        .withName(\"Feedback Load Testing\")\n+                        .withTimezone(ZoneId.of(\"UTC\"))\n+                        .build()\n+                );\n+\n+                return courses;\n+            }\n+\n+            @Override\n+            protected Map<String, InstructorAttributes> generateInstructors() {\n+                Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+                instructors.put(\"teammates.test.instructor\",\n+                        InstructorAttributes.builder(COURSE_ID, INSTRUCTOR_EMAIL)\n+                                .withGoogleId(\"TestData.instructor\")\n+                                .withName(\"Teammates Test\")\n+                                .withRole(\"Co-owner\")\n+                                .withIsDisplayedToStudents(true)\n+                                .withDisplayedName(\"Co-owner\")\n+                                .withPrivileges(new InstructorPrivileges(\n+                                        Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER))\n+                                .build()\n+                );\n+\n+                return instructors;\n+            }\n+\n+            @Override\n+            protected Map<String, StudentAttributes> generateStudents() {\n+                Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+                StudentAttributes studentAttribute;\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    studentAttribute = StudentAttributes.builder(COURSE_ID, STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                                            .withGoogleId(STUDENT_NAME + i + \".tmms\")\n+                                            .withName(STUDENT_NAME + i)\n+                                            .withComment(\"This student's name is \" + STUDENT_NAME + i)\n+                                            .withSectionName(\"None\")\n+                                            .withTeamName(\"Team 1\")\n+                                            .build();\n+                    students.put(STUDENT_NAME + i, studentAttribute);\n+                }\n+\n+                return students;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackSessionAttributes> generateFeedbackSessions() {\n+                Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+                FeedbackSessionAttributes session = FeedbackSessionAttributes\n+                                                            .builder(FEEDBACK_SESSION_NAME, COURSE_ID)\n+                                                            .withCreatorEmail(INSTRUCTOR_EMAIL)\n+                                                            .withStartTime(Instant.now())\n+                                                            .withEndTime(Instant.now().plusSeconds(500))\n+                                                            .withSessionVisibleFromTime(Instant.now())\n+                                                            .withResultsVisibleFromTime(Instant.now())\n+                                                            .build();\n+\n+                feedbackSessions.put(FEEDBACK_SESSION_NAME, session);\n+\n+                return feedbackSessions;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackQuestionAttributes> generateFeedbackQuestions() {\n+                ArrayList<FeedbackParticipantType> showResponses = new ArrayList<>();\n+                showResponses.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                ArrayList<FeedbackParticipantType> showGiverName = new ArrayList<>();\n+                showGiverName.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                ArrayList<FeedbackParticipantType> showRecepientName = new ArrayList<>();\n+                showRecepientName.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+                FeedbackQuestionDetails details = new FeedbackTextQuestionDetails(\"Test Question\");\n+                feedbackQuestions.put(\"QuestionTest\",\n+                        FeedbackQuestionAttributes.builder()\n+                            .withFeedbackSessionName(FEEDBACK_SESSION_NAME)\n+                                .withQuestionDescription(\"Test Question\")\n+                            .withCourseId(COURSE_ID)\n+                            .withQuestionDetails(details)\n+                            .withQuestionNumber(1)\n+                            .withGiverType(FeedbackParticipantType.STUDENTS)\n+                            .withRecipientType(FeedbackParticipantType.SELF)\n+                            .withShowResponsesTo(showResponses)\n+                            .withShowGiverNameTo(showGiverName)\n+                            .withShowRecipientNameTo(showRecepientName)\n+                            .withNumberOfEntitiesToGiveFeedbackTo(1)\n+                            .build()\n+                );\n+\n+                return feedbackQuestions;\n+            }\n+\n+            @Override\n+            public List<String> generateCsvHeaders() {\n+                List<String> headers = new ArrayList<>();\n+\n+                headers.add(\"loginId\");\n+                headers.add(\"isAdmin\");\n+                headers.add(\"googleId\");\n+                headers.add(\"courseId\");\n+                headers.add(\"fsname\");\n+                headers.add(\"studentEmail\");\n+\n+                return headers;\n+            }\n+\n+            @Override\n+            public List<List<String>> generateCsvData() {\n+                DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n+                List<List<String>> csvData = new ArrayList<>();\n+\n+                dataBundle.students.forEach((key, student) -> {\n+                    List<String> csvRow = new ArrayList<>();\n+\n+                    csvRow.add(student.googleId); // \"googleId\" is used for logging in, not \"email\"\n+                    csvRow.add(\"no\");\n+                    csvRow.add(student.googleId);\n+                    csvRow.add(COURSE_ID);\n+                    csvRow.add(FEEDBACK_SESSION_NAME);\n+                    csvRow.add(student.email);\n+\n+                    csvData.add(csvRow);\n+\n+                });\n+\n+                return csvData;\n+            }\n+        };\n+    }\n+\n+    private Map<String, String> getRequestHeaders() {\n+        Map<String, String> headers = new LinkedHashMap<>();\n+\n+        headers.put(\"X-CSRF-TOKEN\", \"${csrfToken}\");\n+        headers.put(\"Content-Type\", \"application/json\");\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    protected ListedHashTree getLnpTestPlan() {\n+        ListedHashTree testPlan = new ListedHashTree(JMeterElements.testPlan());\n+        HashTree threadGroup = testPlan.add(\n+                JMeterElements.threadGroup(NUMBER_OF_USER_ACCOUNTS, RAMP_UP_PERIOD, 1));\n+        threadGroup.add(JMeterElements.csvDataSet(getPathToTestDataFile(getCsvConfigPath())));\n+        threadGroup.add(JMeterElements.cookieManager());\n+        threadGroup.add(JMeterElements.defaultSampler());\n+        threadGroup.add(JMeterElements.onceOnlyController())\n+                .add(JMeterElements.loginSampler())\n+                .add(JMeterElements.csrfExtractor(\"csrfToken\"));\n+\n+        HeaderManager headerManager = JMeterElements.headerManager(getRequestHeaders());\n+        threadGroup.add(headerManager);\n+\n+        //Backdoor to retrieve questionId which is generated only on backend server\n+        String fqId = BackDoor.getFeedbackQuestionId(COURSE_ID, FEEDBACK_SESSION_NAME, 1);\n+\n+        String body = \"{\\\"questionType\\\": \\\"TEXT\\\",\"\n+                + \"\\\"recipientIdentifier\\\": \\\"${studentEmail}\\\",\"\n+                + \"\\\"responseDetails\\\": {\\\"answer\\\": \\\"<p>test</p>\\\", \\\"questionType\\\": \\\"TEXT\\\"}}\";\n+        String fourthPath = \"webapi/response?questionid=\" + fqId\n+                                    + \"&intent=STUDENT_SUBMISSION\";\n+        threadGroup.add(JMeterElements.httpSampler(fourthPath, POST, body));\n+\n+        return testPlan;\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        createTestData();\n+        persistTestData();\n+    }\n+\n+    @Test\n+    public void runLnpTest() throws IOException {\n+        try {\n+            Thread.sleep(3000);\n+        } catch (Exception e) {\n+            System.out.println(\"Error while executing LnP Test.\");\n+            System.out.println(e.toString());\n+        }\n+        runJmeter(true);\n+    }\n+\n+    /**\n+     * Removes the entities added for the instructors' student enrollment L&P test.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01c9ae90972f8ca048f71407ff251fda060c159"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDQ3OA==", "bodyText": "Is there any particular reason to name the path as firstPath, secondPath and so on?", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934478", "createdAt": "2020-02-16T21:24:19Z", "author": {"login": "xpdavid"}, "path": "src/e2e/java/teammates/e2e/cases/lnp/FeedbackSessionViewLNPTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package teammates.e2e.cases.lnp;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.jorphan.collections.HashTree;\n+import org.apache.jorphan.collections.ListedHashTree;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.DataBundle;\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.InstructorPrivileges;\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;\n+import teammates.common.util.Const;\n+import teammates.e2e.util.JMeterElements;\n+import teammates.e2e.util.LNPTestData;\n+\n+/**\n+ * L&P Test Case for instructor's student enrollment API endpoint.\n+ */\n+public class FeedbackSessionViewLNPTest extends BaseLNPTestCase {\n+\n+    private static final int NUMBER_OF_USER_ACCOUNTS = 500;\n+    private static final int RAMP_UP_PERIOD = 2;\n+    private static final String STUDENT_NAME = \"LnPStudent\";\n+    private static final String STUDENT_EMAIL = \"personalEmail\";\n+\n+    private static final String INSTRUCTOR_EMAIL = \"tmms.test@gmail.tmt\";\n+\n+    private static final String COURSE_ID = \"TestData.CS101\";\n+\n+    @Override\n+    protected LNPTestData getTestData() {\n+        return new LNPTestData() {\n+            @Override\n+            protected Map<String, AccountAttributes> generateAccounts() {\n+                Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    accounts.put(STUDENT_NAME + i, AccountAttributes.builder(STUDENT_NAME + i + \".tmms\")\n+                            .withEmail(STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                            .withName(STUDENT_NAME + i)\n+                            .withIsInstructor(false)\n+                            .withInstitute(\"TEAMMATES Test Institute 2\")\n+                            .build()\n+                    );\n+                }\n+\n+                return accounts;\n+            }\n+\n+            @Override\n+            protected Map<String, CourseAttributes> generateCourses() {\n+                Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+                courses.put(\"course\", CourseAttributes.builder(COURSE_ID)\n+                        .withName(\"Feedback Load Testing\")\n+                        .withTimezone(ZoneId.of(\"UTC\"))\n+                        .build()\n+                );\n+\n+                return courses;\n+            }\n+\n+            @Override\n+            protected Map<String, InstructorAttributes> generateInstructors() {\n+                Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+                instructors.put(\"teammates.test.instructor\",\n+                        InstructorAttributes.builder(COURSE_ID, INSTRUCTOR_EMAIL)\n+                                .withGoogleId(\"TestData.instructor\")\n+                                .withName(\"Teammates Test\")\n+                                .withRole(\"Co-owner\")\n+                                .withIsDisplayedToStudents(true)\n+                                .withDisplayedName(\"Co-owner\")\n+                                .withPrivileges(new InstructorPrivileges(\n+                                        Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER))\n+                                .build()\n+                );\n+\n+                return instructors;\n+            }\n+\n+            @Override\n+            protected Map<String, StudentAttributes> generateStudents() {\n+                Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+                StudentAttributes studentAttribute;\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    studentAttribute = StudentAttributes.builder(COURSE_ID, STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                                            .withGoogleId(STUDENT_NAME + i + \".tmms\")\n+                                            .withName(STUDENT_NAME + i)\n+                                            .withComment(\"This student's name is \" + STUDENT_NAME + i)\n+                                            .withSectionName(\"None\")\n+                                            .withTeamName(\"Team 1\")\n+                                            .build();\n+                    students.put(STUDENT_NAME + i, studentAttribute);\n+                }\n+\n+                return students;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackSessionAttributes> generateFeedbackSessions() {\n+                Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+                FeedbackSessionAttributes session = FeedbackSessionAttributes\n+                                                            .builder(\"Test Feedback Session\", COURSE_ID)\n+                                                            .withCreatorEmail(INSTRUCTOR_EMAIL)\n+                                                            .withStartTime(Instant.now())\n+                                                            .withEndTime(Instant.now().plusSeconds(500))\n+                                                            .withSessionVisibleFromTime(Instant.now())\n+                                                            .withResultsVisibleFromTime(Instant.now())\n+                                                            .build();\n+\n+                feedbackSessions.put(\"Test Feedback Session\", session);\n+\n+                return feedbackSessions;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackQuestionAttributes> generateFeedbackQuestions() {\n+                ArrayList<FeedbackParticipantType> showResponses = new ArrayList<>();\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                showResponses.add(FeedbackParticipantType.INSTRUCTORS);\n+                ArrayList<FeedbackParticipantType> showGiverName = new ArrayList<>();\n+                showGiverName.add(FeedbackParticipantType.INSTRUCTORS);\n+                ArrayList<FeedbackParticipantType> showRecepientName = new ArrayList<>();\n+                showRecepientName.add(FeedbackParticipantType.INSTRUCTORS);\n+                Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+                FeedbackQuestionDetails details = new FeedbackTextQuestionDetails(\"Test Question\");\n+                feedbackQuestions.put(\"QuestionTest\",\n+                        FeedbackQuestionAttributes.builder()\n+                            .withFeedbackSessionName(\"Test Feedback Session\")\n+                            .withQuestionDescription(\"Test Question\")\n+                            .withCourseId(COURSE_ID)\n+                            .withQuestionDetails(details)\n+                            .withQuestionNumber(1)\n+                            .withGiverType(FeedbackParticipantType.SELF)\n+                            .withRecipientType(FeedbackParticipantType.NONE)\n+                            .withShowResponsesTo(showResponses)\n+                            .withShowGiverNameTo(showGiverName)\n+                            .withShowRecipientNameTo(showRecepientName)\n+                            .build()\n+                );\n+                return feedbackQuestions;\n+            }\n+\n+            @Override\n+            public List<String> generateCsvHeaders() {\n+                List<String> headers = new ArrayList<>();\n+\n+                headers.add(\"loginId\");\n+                headers.add(\"isAdmin\");\n+                headers.add(\"googleId\");\n+                headers.add(\"courseId\");\n+                headers.add(\"fsname\");\n+\n+                return headers;\n+            }\n+\n+            @Override\n+            public List<List<String>> generateCsvData() {\n+                DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n+                List<List<String>> csvData = new ArrayList<>();\n+\n+                dataBundle.students.forEach((key, student) -> {\n+                    List<String> csvRow = new ArrayList<>();\n+\n+                    csvRow.add(student.googleId); // \"googleId\" is used for logging in, not \"email\"\n+                    csvRow.add(\"no\");\n+                    csvRow.add(student.googleId);\n+                    csvRow.add(COURSE_ID);\n+                    csvRow.add(\"Test Feedback Session\");\n+\n+                    csvData.add(csvRow);\n+                });\n+\n+                return csvData;\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected ListedHashTree getLnpTestPlan() {\n+        ListedHashTree testPlan = new ListedHashTree(JMeterElements.testPlan());\n+        HashTree threadGroup = testPlan.add(\n+                JMeterElements.threadGroup(NUMBER_OF_USER_ACCOUNTS, RAMP_UP_PERIOD, 1));\n+        threadGroup.add(JMeterElements.csvDataSet(getPathToTestDataFile(getCsvConfigPath())));\n+        threadGroup.add(JMeterElements.cookieManager());\n+        threadGroup.add(JMeterElements.defaultSampler());\n+        threadGroup.add(JMeterElements.onceOnlyController())\n+                .add(JMeterElements.loginSampler());\n+\n+        // Add HTTP samplers for test endpoint\n+        String firstPath = \"webapi/student?courseid=${courseId}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01c9ae90972f8ca048f71407ff251fda060c159"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDUzMQ==", "bodyText": "This is more like a work-around before #9956", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934531", "createdAt": "2020-02-16T21:25:20Z", "author": {"login": "xpdavid"}, "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -258,6 +259,22 @@ public static CourseAttributes getCourse(String courseId) {\n         return CourseAttributes.builder(courseData.getCourseId()).build();\n     }\n \n+    /**\n+     * Gets the ID of an feedback question from the datastore.\n+     */\n+    public static String getFeedbackQuestionId(String courseId, String fsName, int questionNumber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01c9ae90972f8ca048f71407ff251fda060c159"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDU1Mg==", "bodyText": "As you make implicit assumption that an instructor is logged in.", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934552", "createdAt": "2020-02-16T21:25:41Z", "author": {"login": "xpdavid"}, "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -258,6 +259,22 @@ public static CourseAttributes getCourse(String courseId) {\n         return CourseAttributes.builder(courseData.getCourseId()).build();\n     }\n \n+    /**\n+     * Gets the ID of an feedback question from the datastore.\n+     */\n+    public static String getFeedbackQuestionId(String courseId, String fsName, int questionNumber) {\n+        Map<String, String[]> params = new HashMap<>();\n+        params.put(Const.ParamsNames.COURSE_ID, new String[] { courseId });\n+        params.put(Const.ParamsNames.FEEDBACK_SESSION_NAME, new String[] {fsName});\n+        params.put(Const.ParamsNames.INTENT, new String[] {\"INSTRUCTOR_RESULT\"});\n+        ResponseBodyAndCode response = executeGetRequest(Const.ResourceURIs.QUESTIONS, params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01c9ae90972f8ca048f71407ff251fda060c159"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDU3OQ==", "bodyText": "Irrelevant changes?", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934579", "createdAt": "2020-02-16T21:26:01Z", "author": {"login": "xpdavid"}, "path": "src/e2e/java/teammates/e2e/util/LNPTestData.java", "diffHunk": "@@ -67,8 +67,8 @@ public DataBundle generateJsonData() {\n         dataBundle.courses = generateCourses();\n         dataBundle.instructors = generateInstructors();\n         dataBundle.students = generateStudents();\n-        dataBundle.feedbackSessions = generateFeedbackSessions();\n         dataBundle.feedbackQuestions = generateFeedbackQuestions();\n+        dataBundle.feedbackSessions = generateFeedbackSessions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01c9ae90972f8ca048f71407ff251fda060c159"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74646bc2a8be6b716dec37442215ba06e7bf0a8a", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/74646bc2a8be6b716dec37442215ba06e7bf0a8a", "committedDate": "2020-02-16T21:49:32Z", "message": "Fix minor issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4353817ebdca34abac43ecfc3da756c1ff4b2b37", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/4353817ebdca34abac43ecfc3da756c1ff4b2b37", "committedDate": "2020-02-16T21:56:56Z", "message": "Revert ordering of data bundle generation in lnp test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb6eae70f4e75999cb2cb4823f11f4f6f440248e", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/bb6eae70f4e75999cb2cb4823f11f4f6f440248e", "committedDate": "2020-02-19T07:51:29Z", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxODYzNjI1", "url": "https://github.com/TEAMMATES/teammates/pull/9958#pullrequestreview-361863625", "createdAt": "2020-02-20T12:31:56Z", "commit": {"oid": "bb6eae70f4e75999cb2cb4823f11f4f6f440248e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjozMTo1NlrOFsRmzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjozMTo1NlrOFsRmzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3MDEyNA==", "bodyText": "probably add some documentation explaining the situation, as it is not straight forward.", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r381970124", "createdAt": "2020-02-20T12:31:56Z", "author": {"login": "junming403"}, "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -258,6 +259,22 @@ public static CourseAttributes getCourse(String courseId) {\n         return CourseAttributes.builder(courseData.getCourseId()).build();\n     }\n \n+    /**\n+     * Gets the ID of an feedback question from the datastore.\n+     */\n+    public static String getFeedbackQuestionId(String courseId, String fsName, int questionNumber) {\n+        Map<String, String[]> params = new HashMap<>();\n+        params.put(Const.ParamsNames.COURSE_ID, new String[] { courseId });\n+        params.put(Const.ParamsNames.FEEDBACK_SESSION_NAME, new String[] {fsName});\n+        params.put(Const.ParamsNames.INTENT, new String[] {\"INSTRUCTOR_RESULT\"});\n+        ResponseBodyAndCode response = executeGetRequest(Const.ResourceURIs.QUESTIONS, params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDU1Mg=="}, "originalCommit": {"oid": "b01c9ae90972f8ca048f71407ff251fda060c159"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff98f599692e635d1628307ba84019d084cda54b", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ff98f599692e635d1628307ba84019d084cda54b", "committedDate": "2020-02-24T03:09:05Z", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5a14f56a93ecd8520f81d38966f2a4d031bcd07", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/a5a14f56a93ecd8520f81d38966f2a4d031bcd07", "committedDate": "2020-02-24T08:32:02Z", "message": "Add comments and documentation to explain new backdoor API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3894089353247b3ebaf881d26970373675435984", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/3894089353247b3ebaf881d26970373675435984", "committedDate": "2020-03-16T15:33:49Z", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d52fe325ad567918e0758d200f62fd63eefd9d5d", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d52fe325ad567918e0758d200f62fd63eefd9d5d", "committedDate": "2020-03-19T14:23:25Z", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd79a7611b28f603efcde1a8a6ab308eb8da0fc3", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/dd79a7611b28f603efcde1a8a6ab308eb8da0fc3", "committedDate": "2020-04-01T07:53:56Z", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b19d626a30b0a34289a1d3ece8f9a9521e291e22", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/b19d626a30b0a34289a1d3ece8f9a9521e291e22", "committedDate": "2020-04-02T21:37:21Z", "message": "Update LnP tests to work with new BaseLNPTestCase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19e2249987733a8a8ba09f38ca1150ac49e52e6a", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/19e2249987733a8a8ba09f38ca1150ac49e52e6a", "committedDate": "2020-04-02T22:40:57Z", "message": "Update FeedbackSessionView LnP test to handle multiple questions per feedbackSession"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3007ffc5ed59371d6fb07c19af10249c76953e36", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/3007ffc5ed59371d6fb07c19af10249c76953e36", "committedDate": "2020-04-02T22:41:33Z", "message": "Update FeedbackSessionSubmit LnP to support multiple questions, and remove dependency on backdoor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd243ef9eeb5d2ba5617a946c0ea11a5a48a0664", "author": {"user": {"login": "daekoon", "name": "Daekoon"}}, "url": "https://github.com/TEAMMATES/teammates/commit/bd243ef9eeb5d2ba5617a946c0ea11a5a48a0664", "committedDate": "2020-04-02T22:43:23Z", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODM5OTE5", "url": "https://github.com/TEAMMATES/teammates/pull/9958#pullrequestreview-386839919", "createdAt": "2020-04-02T23:11:35Z", "commit": {"oid": "bd243ef9eeb5d2ba5617a946c0ea11a5a48a0664"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4434, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}