{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyODAyMjg3", "number": 10549, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMzoxNjoxMFrOEa9m_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzo0NTozMlrOEeUH9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzA3ODM4OnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/pageobjects/AppPage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMzoxNjoxMFrOHEsu4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMzoxNjoxMFrOHEsu4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY4OTI1MA==", "bodyText": "Not harmful, but be careful of this", "url": "https://github.com/TEAMMATES/teammates/pull/10549#discussion_r474689250", "createdAt": "2020-08-21T13:16:10Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/pageobjects/AppPage.java", "diffHunk": "@@ -378,6 +376,8 @@ protected void fillFileBox(RemoteWebElement fileBoxElement, String fileName) {\n     }\n \n     /**\n+<<<<<<< HEAD\n+=======", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76fa0423103bfff05239f59137ac59543d08d2f4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzA3ODc1OnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/pageobjects/AppPage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMzoxNjoxN1rOHEsvHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMzoxNjoxN1rOHEsvHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY4OTMxMA==", "bodyText": "And this", "url": "https://github.com/TEAMMATES/teammates/pull/10549#discussion_r474689310", "createdAt": "2020-08-21T13:16:17Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/pageobjects/AppPage.java", "diffHunk": "@@ -392,6 +392,7 @@ protected String getEditorRichText(WebElement editor) {\n     }\n \n     /**\n+>>>>>>> 5c2f44f0c69a6abac594ba5c03ef90c162b336f3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76fa0423103bfff05239f59137ac59543d08d2f4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzA4NTAyOnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/e2e/FeedbackSubmitPageE2ETest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMzoxODoxMlrOHEszBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoyNDowNFrOHHL39Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY5MDMxMA==", "bodyText": "Is there another way to verify this that doesn't involve reloading?", "url": "https://github.com/TEAMMATES/teammates/pull/10549#discussion_r474690310", "createdAt": "2020-08-21T13:18:12Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/FeedbackSubmitPageE2ETest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.StringHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.FeedbackSubmitPage;\n+import teammates.e2e.util.TestProperties;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#SESSION_SUBMISSION_PAGE}.\n+ */\n+public class FeedbackSubmitPageE2ETest extends BaseE2ETestCase {\n+    private StudentAttributes student;\n+\n+    private FeedbackSessionAttributes openSession;\n+    private FeedbackSessionAttributes closedSession;\n+    private FeedbackSessionAttributes gracePeriodSession;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/FeedbackSubmitPageE2ETest.json\");\n+        testData.feedbackSessions.get(\"Grace Period Session\").setEndTime(Instant.now());\n+        student = testData.students.get(\"Alice\");\n+        if (!TestProperties.isDevServer()) {\n+            student.email = TestProperties.TEST_STUDENT1_ACCOUNT;\n+        }\n+        removeAndRestoreDataBundle(testData);\n+\n+        openSession = testData.feedbackSessions.get(\"Open Session\");\n+        closedSession = testData.feedbackSessions.get(\"Closed Session\");\n+        gracePeriodSession = testData.feedbackSessions.get(\"Grace Period Session\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_SESSION_SUBMISSION_PAGE)\n+                .withUserId(testData.instructors.get(\"SFSubmitE2eT.instr\").googleId)\n+                .withCourseId(openSession.getCourseId())\n+                .withSessionName(openSession.getFeedbackSessionName());\n+        FeedbackSubmitPage submitPage = loginAdminToPage(url, FeedbackSubmitPage.class);\n+        submitPage.waitForPageToLoad();\n+\n+        ______TS(\"verify loaded session data\");\n+        submitPage.verifyFeedbackSessionDetails(openSession);\n+\n+        ______TS(\"questions with giver type instructor\");\n+        submitPage.verifyNumQuestions(1);\n+        submitPage.verifyQuestionDetails(1, testData.feedbackQuestions.get(\"qn5InSession1\"));\n+\n+        ______TS(\"questions with giver type students\");\n+        submitPage = loginAdminToPage(getStudentSubmitPageUrl(student, openSession), FeedbackSubmitPage.class);\n+        submitPage.waitForPageToLoad();\n+\n+        submitPage.verifyNumQuestions(4);\n+        submitPage.verifyQuestionDetails(1, testData.feedbackQuestions.get(\"qn1InSession1\"));\n+        submitPage.verifyQuestionDetails(2, testData.feedbackQuestions.get(\"qn2InSession1\"));\n+        submitPage.verifyQuestionDetails(3, testData.feedbackQuestions.get(\"qn3InSession1\"));\n+        submitPage.verifyQuestionDetails(4, testData.feedbackQuestions.get(\"qn4InSession1\"));\n+\n+        ______TS(\"verify recipients: students\");\n+        submitPage.verifyLimitedRecipients(1, 3, getOtherStudents(student));\n+\n+        ______TS(\"verify recipients: instructors\");\n+        submitPage.verifyRecipients(2, getInstructors(), \"Instructor\");\n+\n+        ______TS(\"verify recipients: team mates\");\n+        submitPage.verifyRecipients(3, getTeammates(student), \"Student\");\n+\n+        ______TS(\"verify recipients: teams\");\n+        submitPage.verifyRecipients(4, getOtherTeams(student), \"Team\");\n+\n+        ______TS(\"submit partial response\");\n+        int[] unansweredQuestions = { 1, 2, 3, 4 };\n+        submitPage.verifyWarningMessageForPartialResponse(unansweredQuestions);\n+\n+        ______TS(\"cannot submit in closed session\");\n+        AppUrl closedSessionUrl = getStudentSubmitPageUrl(student, closedSession);\n+        submitPage = AppPage.getNewPageInstance(browser, closedSessionUrl, FeedbackSubmitPage.class);\n+        submitPage.verifyCannotSubmit();\n+\n+        ______TS(\"can submit in grace period\");\n+        AppUrl gracePeriodSessionUrl = getStudentSubmitPageUrl(student, gracePeriodSession);\n+        submitPage = AppPage.getNewPageInstance(browser, gracePeriodSessionUrl, FeedbackSubmitPage.class);\n+        submitPage.waitForPageToLoad();\n+\n+        int[] gracePeriodUnansweredQuestions = { 1 };\n+        submitPage.verifyWarningMessageForPartialResponse(gracePeriodUnansweredQuestions);\n+\n+        ______TS(\"confirmation email\");\n+        submitPage.selectMultipleChoiceOption(1, 1, 1);\n+        submitPage.markWithConfirmationEmail();\n+\n+        submitPage.verifyWarningMessageForPartialResponse(gracePeriodUnansweredQuestions);\n+        verifyEmailSent(student.getEmail(), \"TEAMMATES: Feedback responses successfully recorded\"\n+                + \" [Course: \" + testData.courses.get(\"SFSubmitE2eT.CS2104\").getName() + \"][Feedback Session: \"\n+                + gracePeriodSession.getFeedbackSessionName() + \"]\");\n+\n+        ______TS(\"add comment\");\n+        int qnToComment = 1;\n+        int recipientToComment = 1;\n+        String comment = \"<p>new comment</p>\";\n+        submitPage.addComment(qnToComment, recipientToComment, comment);\n+\n+        submitPage.verifyWarningMessageForPartialResponse(gracePeriodUnansweredQuestions);\n+        // Reload page to verify comment persists in datastore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76fa0423103bfff05239f59137ac59543d08d2f4"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NjYyOQ==", "bodyText": "Added methods to use the existing verifyPresentInDatastore", "url": "https://github.com/TEAMMATES/teammates/pull/10549#discussion_r477296629", "createdAt": "2020-08-26T13:24:04Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/FeedbackSubmitPageE2ETest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.StringHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.FeedbackSubmitPage;\n+import teammates.e2e.util.TestProperties;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#SESSION_SUBMISSION_PAGE}.\n+ */\n+public class FeedbackSubmitPageE2ETest extends BaseE2ETestCase {\n+    private StudentAttributes student;\n+\n+    private FeedbackSessionAttributes openSession;\n+    private FeedbackSessionAttributes closedSession;\n+    private FeedbackSessionAttributes gracePeriodSession;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/FeedbackSubmitPageE2ETest.json\");\n+        testData.feedbackSessions.get(\"Grace Period Session\").setEndTime(Instant.now());\n+        student = testData.students.get(\"Alice\");\n+        if (!TestProperties.isDevServer()) {\n+            student.email = TestProperties.TEST_STUDENT1_ACCOUNT;\n+        }\n+        removeAndRestoreDataBundle(testData);\n+\n+        openSession = testData.feedbackSessions.get(\"Open Session\");\n+        closedSession = testData.feedbackSessions.get(\"Closed Session\");\n+        gracePeriodSession = testData.feedbackSessions.get(\"Grace Period Session\");\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_SESSION_SUBMISSION_PAGE)\n+                .withUserId(testData.instructors.get(\"SFSubmitE2eT.instr\").googleId)\n+                .withCourseId(openSession.getCourseId())\n+                .withSessionName(openSession.getFeedbackSessionName());\n+        FeedbackSubmitPage submitPage = loginAdminToPage(url, FeedbackSubmitPage.class);\n+        submitPage.waitForPageToLoad();\n+\n+        ______TS(\"verify loaded session data\");\n+        submitPage.verifyFeedbackSessionDetails(openSession);\n+\n+        ______TS(\"questions with giver type instructor\");\n+        submitPage.verifyNumQuestions(1);\n+        submitPage.verifyQuestionDetails(1, testData.feedbackQuestions.get(\"qn5InSession1\"));\n+\n+        ______TS(\"questions with giver type students\");\n+        submitPage = loginAdminToPage(getStudentSubmitPageUrl(student, openSession), FeedbackSubmitPage.class);\n+        submitPage.waitForPageToLoad();\n+\n+        submitPage.verifyNumQuestions(4);\n+        submitPage.verifyQuestionDetails(1, testData.feedbackQuestions.get(\"qn1InSession1\"));\n+        submitPage.verifyQuestionDetails(2, testData.feedbackQuestions.get(\"qn2InSession1\"));\n+        submitPage.verifyQuestionDetails(3, testData.feedbackQuestions.get(\"qn3InSession1\"));\n+        submitPage.verifyQuestionDetails(4, testData.feedbackQuestions.get(\"qn4InSession1\"));\n+\n+        ______TS(\"verify recipients: students\");\n+        submitPage.verifyLimitedRecipients(1, 3, getOtherStudents(student));\n+\n+        ______TS(\"verify recipients: instructors\");\n+        submitPage.verifyRecipients(2, getInstructors(), \"Instructor\");\n+\n+        ______TS(\"verify recipients: team mates\");\n+        submitPage.verifyRecipients(3, getTeammates(student), \"Student\");\n+\n+        ______TS(\"verify recipients: teams\");\n+        submitPage.verifyRecipients(4, getOtherTeams(student), \"Team\");\n+\n+        ______TS(\"submit partial response\");\n+        int[] unansweredQuestions = { 1, 2, 3, 4 };\n+        submitPage.verifyWarningMessageForPartialResponse(unansweredQuestions);\n+\n+        ______TS(\"cannot submit in closed session\");\n+        AppUrl closedSessionUrl = getStudentSubmitPageUrl(student, closedSession);\n+        submitPage = AppPage.getNewPageInstance(browser, closedSessionUrl, FeedbackSubmitPage.class);\n+        submitPage.verifyCannotSubmit();\n+\n+        ______TS(\"can submit in grace period\");\n+        AppUrl gracePeriodSessionUrl = getStudentSubmitPageUrl(student, gracePeriodSession);\n+        submitPage = AppPage.getNewPageInstance(browser, gracePeriodSessionUrl, FeedbackSubmitPage.class);\n+        submitPage.waitForPageToLoad();\n+\n+        int[] gracePeriodUnansweredQuestions = { 1 };\n+        submitPage.verifyWarningMessageForPartialResponse(gracePeriodUnansweredQuestions);\n+\n+        ______TS(\"confirmation email\");\n+        submitPage.selectMultipleChoiceOption(1, 1, 1);\n+        submitPage.markWithConfirmationEmail();\n+\n+        submitPage.verifyWarningMessageForPartialResponse(gracePeriodUnansweredQuestions);\n+        verifyEmailSent(student.getEmail(), \"TEAMMATES: Feedback responses successfully recorded\"\n+                + \" [Course: \" + testData.courses.get(\"SFSubmitE2eT.CS2104\").getName() + \"][Feedback Session: \"\n+                + gracePeriodSession.getFeedbackSessionName() + \"]\");\n+\n+        ______TS(\"add comment\");\n+        int qnToComment = 1;\n+        int recipientToComment = 1;\n+        String comment = \"<p>new comment</p>\";\n+        submitPage.addComment(qnToComment, recipientToComment, comment);\n+\n+        submitPage.verifyWarningMessageForPartialResponse(gracePeriodUnansweredQuestions);\n+        // Reload page to verify comment persists in datastore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY5MDMxMA=="}, "originalCommit": {"oid": "76fa0423103bfff05239f59137ac59543d08d2f4"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzIzMDY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/GetStudentAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo1MTozN1rOHJPcyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo1MTozN1rOHJPcyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1MjM2MA==", "bodyText": "I think instead of this, we can just check for admin privilege?", "url": "https://github.com/TEAMMATES/teammates/pull/10549#discussion_r479452360", "createdAt": "2020-08-28T17:51:37Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/ui/webapi/action/GetStudentAction.java", "diffHunk": "@@ -80,6 +80,9 @@ public ActionResult execute() {\n         }\n \n         StudentData studentData = new StudentData(student);\n+        if (isBackdoor()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82dbb15e7ff58415b1a50ed2ac770ec7dd495444"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjIyMzk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/GetStudentAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzo0NToxOVrOHJ5fUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzo0NToxOVrOHJ5fUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MTEzNg==", "bodyText": "Need to check that userInfo is not null", "url": "https://github.com/TEAMMATES/teammates/pull/10549#discussion_r480141136", "createdAt": "2020-08-31T13:45:19Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/ui/webapi/action/GetStudentAction.java", "diffHunk": "@@ -80,6 +80,9 @@ public ActionResult execute() {\n         }\n \n         StudentData studentData = new StudentData(student);\n+        if (userInfo.isAdmin) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4130c7382103ebbc52770ea1082d797aa5bfcd66"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjIyNDUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/Action.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzo0NTozMlrOHJ5fvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzo0NTozMlrOHJ5fvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MTI0NA==", "bodyText": "This change is no longer necessary, I believe", "url": "https://github.com/TEAMMATES/teammates/pull/10549#discussion_r480141244", "createdAt": "2020-08-31T13:45:32Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/ui/webapi/action/Action.java", "diffHunk": "@@ -95,7 +99,7 @@ public void checkAccessControl() {\n     }\n \n     private void initAuthInfo() {\n-        if (Config.BACKDOOR_KEY.equals(req.getHeader(\"Backdoor-Key\"))) {\n+        if (isBackdoor()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4130c7382103ebbc52770ea1082d797aa5bfcd66"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3471, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}