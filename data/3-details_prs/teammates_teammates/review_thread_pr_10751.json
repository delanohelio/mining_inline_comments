{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MjYyMDY2", "number": 10751, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNDo1ODoxOFrOEsZCgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwMTowMzo1MFrOExm73Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTgzMDQzOnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNDo1ODoxOFrOHfoMPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNDo1ODoxOFrOHfoMPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNjM5Nw==", "bodyText": "Question", "url": "https://github.com/TEAMMATES/teammates/pull/10751#discussion_r502926397", "createdAt": "2020-10-11T14:58:18Z", "author": {"login": "rrtheonlyone"}, "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "diffHunk": "@@ -20,4 +34,132 @@ public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFals\n         FeedbackQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n         assertFalse(feedbackQuestionDetails.isFeedbackParticipantCommentsOnResponsesAllowed());\n     }\n+\n+    @Test\n+    public void testValidateQueestionDetails_emptyOption_errorReturned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "232284b75cbd1f46ba71adf337fcfe372e600b45"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTgzMDcyOnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNDo1ODo0MlrOHfoMaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNDo1ODo0MlrOHfoMaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNjQ0MQ==", "bodyText": "you can add more whitespace to one of them", "url": "https://github.com/TEAMMATES/teammates/pull/10751#discussion_r502926441", "createdAt": "2020-10-11T14:58:42Z", "author": {"login": "rrtheonlyone"}, "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "diffHunk": "@@ -20,4 +34,132 @@ public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFals\n         FeedbackQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n         assertFalse(feedbackQuestionDetails.isFeedbackParticipantCommentsOnResponsesAllowed());\n     }\n+\n+    @Test\n+    public void testValidateQueestionDetails_emptyOption_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"\", \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "232284b75cbd1f46ba71adf337fcfe372e600b45"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTgzMTI4OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNDo1OToxOVrOHfoMsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNDo1OToxOVrOHfoMsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNjUxMw==", "bodyText": "why do you clear when the variable is not going to be used after this? same at other places", "url": "https://github.com/TEAMMATES/teammates/pull/10751#discussion_r502926513", "createdAt": "2020-10-11T14:59:19Z", "author": {"login": "rrtheonlyone"}, "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "diffHunk": "@@ -20,4 +34,132 @@ public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFals\n         FeedbackQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n         assertFalse(feedbackQuestionDetails.isFeedbackParticipantCommentsOnResponsesAllowed());\n     }\n+\n+    @Test\n+    public void testValidateQueestionDetails_emptyOption_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"\", \"\"));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_EMPTY_OPTIONS_ENTERED);\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_invalidMaxMinOptions_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(0);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_INVALID_MAX_OPTIONS_ENABLED);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(1);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_MIN_OPTIONS_ENABLED_MORE_THAN_CHOICES);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(4);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_MAX_OPTIONS_ENABLED_MORE_THAN_CHOICES);\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "232284b75cbd1f46ba71adf337fcfe372e600b45"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTgzMzgyOnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTowMToyN1rOHfoN7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTowMToyN1rOHfoN7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkyNjgzMA==", "bodyText": "remove System.out.println", "url": "https://github.com/TEAMMATES/teammates/pull/10751#discussion_r502926830", "createdAt": "2020-10-11T15:01:27Z", "author": {"login": "rrtheonlyone"}, "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "diffHunk": "@@ -20,4 +34,132 @@ public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFals\n         FeedbackQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n         assertFalse(feedbackQuestionDetails.isFeedbackParticipantCommentsOnResponsesAllowed());\n     }\n+\n+    @Test\n+    public void testValidateQueestionDetails_emptyOption_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"\", \"\"));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_EMPTY_OPTIONS_ENTERED);\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_invalidMaxMinOptions_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(0);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_INVALID_MAX_OPTIONS_ENABLED);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(1);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_MIN_OPTIONS_ENABLED_MORE_THAN_CHOICES);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(4);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_MAX_OPTIONS_ENABLED_MORE_THAN_CHOICES);\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_optionSizeInvalid_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\"));\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_optionSizeValid_noError() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\"));\n+        assertTrue(feedbackQuestionDetails.validateQuestionDetails().isEmpty());\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_duplicateRankOptions_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 1));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_DUPLICATE_RANK_RESPONSE);\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_optionExceedBound_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(3);\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(5);\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 2));\n+        errorResponse.add(\"You must rank at least \" + feedbackQuestionDetails.minOptionsToBeRanked + \" options.\");\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+        errorResponse.clear();\n+\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 2, 3, 4, 5, 6));\n+        errorResponse.add(\"You can rank at most \" + feedbackQuestionDetails.maxOptionsToBeRanked + \" options.\");\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_invalidRankOption_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        List<String> errorResponse = new ArrayList<>();\n+        System.out.println(feedbackQuestionDetails.getOptions().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "232284b75cbd1f46ba71adf337fcfe372e600b45"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDk4ODk4OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoxNzo1NFrOHmaxeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoxNzo1NFrOHmaxeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0NjU4NQ==", "bodyText": "I think it'd be better to have the closing bracket on a new line, would be easy to miss the value 1 here", "url": "https://github.com/TEAMMATES/teammates/pull/10751#discussion_r510046585", "createdAt": "2020-10-22T10:17:54Z", "author": {"login": "madanalogy"}, "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "diffHunk": "@@ -20,4 +34,172 @@ public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFals\n         FeedbackQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n         assertFalse(feedbackQuestionDetails.isFeedbackParticipantCommentsOnResponsesAllowed());\n     }\n+\n+    @Test\n+    public void testValidateQuestionDetails_emptyOption_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"\", \"  \"));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_EMPTY_OPTIONS_ENTERED);\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_invalidMaxMinOptions_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(0);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_INVALID_MAX_OPTIONS_ENABLED);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(0);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_INVALID_MIN_OPTIONS_ENABLED);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(1);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_MIN_OPTIONS_ENABLED_MORE_THAN_CHOICES);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(4);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_MAX_OPTIONS_ENABLED_MORE_THAN_CHOICES);\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_optionSizeInvalid_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\"));\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_optionSizeValid_noError() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\"));\n+        assertTrue(feedbackQuestionDetails.validateQuestionDetails().isEmpty());\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_duplicateRankOptions_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 1));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_DUPLICATE_RANK_RESPONSE);\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_optionExceedBound_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(3);\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(5);\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 2));\n+        errorResponse.add(\"You must rank at least \" + feedbackQuestionDetails.minOptionsToBeRanked + \" options.\");\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+        errorResponse.clear();\n+\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 2, 3, 4, 5, 6));\n+        errorResponse.add(\"You can rank at most \" + feedbackQuestionDetails.maxOptionsToBeRanked + \" options.\");\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_invalidRankOption_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails.setAnswers(Arrays.asList(0));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_INVALID_RANK_RESPONSE);\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+\n+        feedbackResponseDetails.setAnswers(Arrays.asList(5));\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_validRankOption_noError() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"));\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails1 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails1.setAnswers(Arrays.asList(2, 3));\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails2 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails2.setAnswers(Arrays.asList(3, 5));\n+        assertTrue(feedbackQuestionDetails.validateResponsesDetails(\n+                Arrays.asList(\n+                        feedbackResponseDetails1,\n+                        feedbackResponseDetails2),\n+                1).isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cbaf5af09a7808d9e9694b5ef18130818505172"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDk5MDA2OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoxODowOFrOHmayDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoxODowOFrOHmayDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0NjczMw==", "bodyText": "similarly here", "url": "https://github.com/TEAMMATES/teammates/pull/10751#discussion_r510046733", "createdAt": "2020-10-22T10:18:08Z", "author": {"login": "madanalogy"}, "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "diffHunk": "@@ -20,4 +34,172 @@ public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFals\n         FeedbackQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n         assertFalse(feedbackQuestionDetails.isFeedbackParticipantCommentsOnResponsesAllowed());\n     }\n+\n+    @Test\n+    public void testValidateQuestionDetails_emptyOption_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"\", \"  \"));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_EMPTY_OPTIONS_ENTERED);\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_invalidMaxMinOptions_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(0);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_INVALID_MAX_OPTIONS_ENABLED);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(0);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_INVALID_MIN_OPTIONS_ENABLED);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(1);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_MIN_OPTIONS_ENABLED_MORE_THAN_CHOICES);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(4);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_MAX_OPTIONS_ENABLED_MORE_THAN_CHOICES);\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_optionSizeInvalid_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\"));\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_optionSizeValid_noError() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\"));\n+        assertTrue(feedbackQuestionDetails.validateQuestionDetails().isEmpty());\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_duplicateRankOptions_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 1));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_DUPLICATE_RANK_RESPONSE);\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_optionExceedBound_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(3);\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(5);\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 2));\n+        errorResponse.add(\"You must rank at least \" + feedbackQuestionDetails.minOptionsToBeRanked + \" options.\");\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+        errorResponse.clear();\n+\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 2, 3, 4, 5, 6));\n+        errorResponse.add(\"You can rank at most \" + feedbackQuestionDetails.maxOptionsToBeRanked + \" options.\");\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_invalidRankOption_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails.setAnswers(Arrays.asList(0));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_INVALID_RANK_RESPONSE);\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+\n+        feedbackResponseDetails.setAnswers(Arrays.asList(5));\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_validRankOption_noError() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"));\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails1 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails1.setAnswers(Arrays.asList(2, 3));\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails2 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails2.setAnswers(Arrays.asList(3, 5));\n+        assertTrue(feedbackQuestionDetails.validateResponsesDetails(\n+                Arrays.asList(\n+                        feedbackResponseDetails1,\n+                        feedbackResponseDetails2),\n+                1).isEmpty());\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_duplicateOptionInDefault_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails1 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails1.setAnswers(Arrays.asList(2, 2));\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails2 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails2.setAnswers(Arrays.asList(2, 3));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_DUPLICATE_RANK_RESPONSE);\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(\n+                Arrays.asList(\n+                        feedbackResponseDetails1,\n+                        feedbackResponseDetails2),\n+                1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cbaf5af09a7808d9e9694b5ef18130818505172"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDk5NzU5OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoyMDowOFrOHma2ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoyMDowOFrOHma2ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0NzkwMg==", "bodyText": "similarly here", "url": "https://github.com/TEAMMATES/teammates/pull/10751#discussion_r510047902", "createdAt": "2020-10-22T10:20:08Z", "author": {"login": "madanalogy"}, "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "diffHunk": "@@ -20,4 +34,172 @@ public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFals\n         FeedbackQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n         assertFalse(feedbackQuestionDetails.isFeedbackParticipantCommentsOnResponsesAllowed());\n     }\n+\n+    @Test\n+    public void testValidateQuestionDetails_emptyOption_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"\", \"  \"));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_EMPTY_OPTIONS_ENTERED);\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_invalidMaxMinOptions_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(0);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_INVALID_MAX_OPTIONS_ENABLED);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(0);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_INVALID_MIN_OPTIONS_ENABLED);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(1);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_MIN_OPTIONS_ENABLED_MORE_THAN_CHOICES);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+\n+        feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(4);\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_MAX_OPTIONS_ENABLED_MORE_THAN_CHOICES);\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_optionSizeInvalid_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_NOT_ENOUGH_OPTIONS\n+                + FeedbackRankOptionsQuestionDetails.MIN_NUM_OF_OPTIONS + \".\");\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\"));\n+        assertEquals(errorResponse, feedbackQuestionDetails.validateQuestionDetails());\n+        errorResponse.clear();\n+    }\n+\n+    @Test\n+    public void testValidateQuestionDetails_optionSizeValid_noError() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\"));\n+        assertTrue(feedbackQuestionDetails.validateQuestionDetails().isEmpty());\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_duplicateRankOptions_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 1));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_DUPLICATE_RANK_RESPONSE);\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_optionExceedBound_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setMinOptionsToBeRanked(3);\n+        feedbackQuestionDetails.setMaxOptionsToBeRanked(5);\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 2));\n+        errorResponse.add(\"You must rank at least \" + feedbackQuestionDetails.minOptionsToBeRanked + \" options.\");\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+        errorResponse.clear();\n+\n+        feedbackResponseDetails.setAnswers(Arrays.asList(1, 2, 3, 4, 5, 6));\n+        errorResponse.add(\"You can rank at most \" + feedbackQuestionDetails.maxOptionsToBeRanked + \" options.\");\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_invalidRankOption_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails.setAnswers(Arrays.asList(0));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_INVALID_RANK_RESPONSE);\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+\n+        feedbackResponseDetails.setAnswers(Arrays.asList(5));\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(Arrays.asList(feedbackResponseDetails), 1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_validRankOption_noError() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"));\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails1 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails1.setAnswers(Arrays.asList(2, 3));\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails2 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails2.setAnswers(Arrays.asList(3, 5));\n+        assertTrue(feedbackQuestionDetails.validateResponsesDetails(\n+                Arrays.asList(\n+                        feedbackResponseDetails1,\n+                        feedbackResponseDetails2),\n+                1).isEmpty());\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_duplicateOptionInDefault_errorReturned() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"));\n+        List<String> errorResponse = new ArrayList<>();\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails1 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails1.setAnswers(Arrays.asList(2, 2));\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails2 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails2.setAnswers(Arrays.asList(2, 3));\n+        errorResponse.add(FeedbackRankOptionsQuestionDetails.ERROR_DUPLICATE_RANK_RESPONSE);\n+        assertEquals(errorResponse,\n+                feedbackQuestionDetails.validateResponsesDetails(\n+                Arrays.asList(\n+                        feedbackResponseDetails1,\n+                        feedbackResponseDetails2),\n+                1));\n+    }\n+\n+    @Test\n+    public void testValidateResponseDetails_duplicateOption_noError() {\n+        FeedbackRankOptionsQuestionDetails feedbackQuestionDetails = new FeedbackRankOptionsQuestionDetails();\n+        feedbackQuestionDetails.setAreDuplicatesAllowed(true);\n+        feedbackQuestionDetails.setOptions(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"));\n+\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails1 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails1.setAnswers(Arrays.asList(2, 2));\n+        FeedbackRankOptionsResponseDetails feedbackResponseDetails2 = new FeedbackRankOptionsResponseDetails();\n+        feedbackResponseDetails2.setAnswers(Arrays.asList(2, 3));\n+        assertTrue(feedbackQuestionDetails.validateResponsesDetails(\n+                Arrays.asList(\n+                        feedbackResponseDetails1,\n+                        feedbackResponseDetails2),\n+                1).isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cbaf5af09a7808d9e9694b5ef18130818505172"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjY5OTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetails.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzowMDoyNFrOHmrZhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzowMDoyNFrOHmrZhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxODk4MQ==", "bodyText": "I don't think this needs to be public (at most package level)? In fact I don't think any of the constants already defined here needs to be public.", "url": "https://github.com/TEAMMATES/teammates/pull/10751#discussion_r510318981", "createdAt": "2020-10-22T17:00:24Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetails.java", "diffHunk": "@@ -23,6 +23,10 @@\n             + \". Minimum number of options is: \";\n     public static final transient String ERROR_EMPTY_OPTIONS_ENTERED =\n             \"Empty Rank Options are not allowed\";\n+    public static final transient String ERROR_DUPLICATE_RANK_RESPONSE =\n+            \"Duplicate Ranks are not allowed.\";\n+    public static final transient String ERROR_INVALID_RANK_RESPONSE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cbaf5af09a7808d9e9694b5ef18130818505172"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjcwMDk4OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzowMDo0M1rOHmragw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzowMDo0M1rOHmragw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxOTIzNQ==", "bodyText": "Use assertEquals here instead", "url": "https://github.com/TEAMMATES/teammates/pull/10751#discussion_r510319235", "createdAt": "2020-10-22T17:00:43Z", "author": {"login": "wkurniawan07"}, "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackRankOptionsQuestionDetailsTest.java", "diffHunk": "@@ -9,6 +13,16 @@\n  */\n public class FeedbackRankOptionsQuestionDetailsTest extends BaseTestCase {\n \n+    @Test\n+    public void testConstructor_defaultConstructor_fieldsShouldHaveCorrectDefaultValues() {\n+        FeedbackRankOptionsQuestionDetails rankDetails = new FeedbackRankOptionsQuestionDetails();\n+\n+        assertEquals(FeedbackQuestionType.RANK_OPTIONS, rankDetails.getQuestionType());\n+        assertTrue(rankDetails.getMinOptionsToBeRanked() == FeedbackRankQuestionDetails.NO_VALUE);\n+        assertTrue(rankDetails.getMaxOptionsToBeRanked() == FeedbackRankQuestionDetails.NO_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cbaf5af09a7808d9e9694b5ef18130818505172"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDUzNTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/common/datatransfer/questions/FeedbackContributionQuestionDetails.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwMTowMzo1MFrOHn1adQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxMDo0MToyMlrOHn4SSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzMTYzNw==", "bodyText": "I won't advise trying to change this here. You'll soon realize how much change this would necessitate.", "url": "https://github.com/TEAMMATES/teammates/pull/10751#discussion_r511531637", "createdAt": "2020-10-25T01:03:50Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/questions/FeedbackContributionQuestionDetails.java", "diffHunk": "@@ -239,7 +239,7 @@ public String getQuestionResultStatisticsJson(\n     }\n \n     @Override\n-    public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses, int numRecipients) {\n+    public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00a96fec295b316ed5c510c4491049c8335e619"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3ODY5OA==", "bodyText": "Yes. This param is quite baked in to the interface and it would require all the dependencies to adapt to the new interface... If necessary, I can make a PR to fix it.", "url": "https://github.com/TEAMMATES/teammates/pull/10751#discussion_r511578698", "createdAt": "2020-10-25T10:41:22Z", "author": {"login": "moziliar"}, "path": "src/main/java/teammates/common/datatransfer/questions/FeedbackContributionQuestionDetails.java", "diffHunk": "@@ -239,7 +239,7 @@ public String getQuestionResultStatisticsJson(\n     }\n \n     @Override\n-    public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses, int numRecipients) {\n+    public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzMTYzNw=="}, "originalCommit": {"oid": "d00a96fec295b316ed5c510c4491049c8335e619"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3373, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}