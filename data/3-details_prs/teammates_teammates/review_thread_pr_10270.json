{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjAzNjAw", "number": 10270, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxNjozMVrOEKk3dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDo1NjoyM1rOEMVIfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTI1MjM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/GenerateEmailAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxNjozMVrOGrsplg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxNjozMVrOGrsplg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3MzQ5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return AuthType.PUBLIC;\n          \n          \n            \n                    return AuthType.LOGGED_IN;", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r448473494", "createdAt": "2020-07-01T16:16:31Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/ui/webapi/action/GenerateEmailAction.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package teammates.ui.webapi.action;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.exception.InvalidHttpParameterException;\n+import teammates.common.exception.UnauthorizedAccessException;\n+import teammates.common.util.Assumption;\n+import teammates.common.util.Const;\n+import teammates.common.util.EmailType;\n+import teammates.common.util.EmailWrapper;\n+import teammates.ui.webapi.output.GenerateEmailData;\n+\n+/**\n+ * Generate email content.\n+ */\n+public class GenerateEmailAction extends Action {\n+\n+    @Override\n+    protected AuthType getMinAuthLevel() {\n+        return AuthType.PUBLIC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecdfc394048fbbce1e22dfca41dfd6284833073a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTI2NDAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/common/util/Const.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxOTo0NVrOGrsxGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTowNTozOFrOGr1Vrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3NTQxNg==", "bodyText": "I'm thinking /email might be more appropriate. Worthwhile getting more input on this from senior devs.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r448475416", "createdAt": "2020-07-01T16:19:45Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/common/util/Const.java", "diffHunk": "@@ -704,6 +706,7 @@ private Const() {\n         public static final String LOCAL_DATE_TIME = \"/localdatetime\";\n         public static final String SESSION_LINKS_RECOVERY = \"/sessionlinksrecovery\";\n         public static final String NATIONALITIES = \"/nationalities\";\n+        public static final String GENERATE_EMAIL = \"/generateemail\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecdfc394048fbbce1e22dfca41dfd6284833073a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNTg1NA==", "bodyText": "email is better. In REST, you are dealing with Resource not RPC.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r448615854", "createdAt": "2020-07-01T21:05:38Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/common/util/Const.java", "diffHunk": "@@ -704,6 +706,7 @@ private Const() {\n         public static final String LOCAL_DATE_TIME = \"/localdatetime\";\n         public static final String SESSION_LINKS_RECOVERY = \"/sessionlinksrecovery\";\n         public static final String NATIONALITIES = \"/nationalities\";\n+        public static final String GENERATE_EMAIL = \"/generateemail\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3NTQxNg=="}, "originalCommit": {"oid": "ecdfc394048fbbce1e22dfca41dfd6284833073a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjEzNzM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/logic/api/EmailGenerator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTowMzoyNVrOGr1SCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMzo0MTo0MlrOGr8W4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNDkyMw==", "bodyText": "Is this the same as the method above? generateFeedbackSessionReminderEmails ?", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r448614923", "createdAt": "2020-07-01T21:03:25Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/logic/api/EmailGenerator.java", "diffHunk": "@@ -108,6 +108,21 @@\n         return emails;\n     }\n \n+    /**\n+     * Generates the feedback session reminder emails for the given {@code student}.\n+     */\n+    public EmailWrapper generateFeedbackSessionStudentReminderEmail(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecdfc394048fbbce1e22dfca41dfd6284833073a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyNjU4Mg==", "bodyText": "No. This is only for a particular student. The method above generates for all students and instructors.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r448726582", "createdAt": "2020-07-02T03:22:42Z", "author": {"login": "ccyccyccy"}, "path": "src/main/java/teammates/logic/api/EmailGenerator.java", "diffHunk": "@@ -108,6 +108,21 @@\n         return emails;\n     }\n \n+    /**\n+     * Generates the feedback session reminder emails for the given {@code student}.\n+     */\n+    public EmailWrapper generateFeedbackSessionStudentReminderEmail(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNDkyMw=="}, "originalCommit": {"oid": "ecdfc394048fbbce1e22dfca41dfd6284833073a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyNzY0Ng==", "bodyText": "But the code is duplicated (almost the same?); By right, generateFeedbackSessionReminderEmails should be able to do generateFeedbackSessionReminderEmails can do.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r448727646", "createdAt": "2020-07-02T03:27:21Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/logic/api/EmailGenerator.java", "diffHunk": "@@ -108,6 +108,21 @@\n         return emails;\n     }\n \n+    /**\n+     * Generates the feedback session reminder emails for the given {@code student}.\n+     */\n+    public EmailWrapper generateFeedbackSessionStudentReminderEmail(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNDkyMw=="}, "originalCommit": {"oid": "ecdfc394048fbbce1e22dfca41dfd6284833073a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMDg0OQ==", "bodyText": "Yes generateFeedbackSessionReminderEmails can do what generateFeedbackSessionStudentReminderEmail does. But I didn't want to generate emails for everyone even though we only need one of them. Seems quite wasteful.\nI think it's more like generateFeedbackSessionReminderEmails can reuse generateFeedbackSessionStudentReminderEmail? I could refactor that.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r448730849", "createdAt": "2020-07-02T03:41:42Z", "author": {"login": "ccyccyccy"}, "path": "src/main/java/teammates/logic/api/EmailGenerator.java", "diffHunk": "@@ -108,6 +108,21 @@\n         return emails;\n     }\n \n+    /**\n+     * Generates the feedback session reminder emails for the given {@code student}.\n+     */\n+    public EmailWrapper generateFeedbackSessionStudentReminderEmail(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNDkyMw=="}, "originalCommit": {"oid": "ecdfc394048fbbce1e22dfca41dfd6284833073a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Njg4NTI3OnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.html", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMzoyNzo1NlrOGr8K4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMzo1Njo0NVrOGr8kSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyNzc3Ng==", "bodyText": "Not sure if I can link STUDENT_COURSE_JOIN to the backend, without hardcoding it here. How do I get the enum EmailType to show up in the frontend? Do I add a new class to src/main/java/teammates/ui/webapi/request?", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r448727776", "createdAt": "2020-07-02T03:27:56Z", "author": {"login": "ccyccyccy"}, "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.html", "diffHunk": "@@ -149,18 +149,22 @@\n                 </li>\n                 <li class=\"list-group-item list-group-item-info\">\n                   <strong>Course Join Link</strong>\n+                  <button type=\"button\" class=\"btn btn-primary margin-left-5px btn-sm\" (click)=\"openEmail(student.courseId, student.email, 'STUDENT_COURSE_JOIN')\">Send mail</button>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecdfc394048fbbce1e22dfca41dfd6284833073a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyODkxOA==", "bodyText": "You can add src/main/java/teammates/common/util/EmailType.java to the classPatterns of Gradle task generateApiRequestFormat", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r448728918", "createdAt": "2020-07-02T03:33:02Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.html", "diffHunk": "@@ -149,18 +149,22 @@\n                 </li>\n                 <li class=\"list-group-item list-group-item-info\">\n                   <strong>Course Join Link</strong>\n+                  <button type=\"button\" class=\"btn btn-primary margin-left-5px btn-sm\" (click)=\"openEmail(student.courseId, student.email, 'STUDENT_COURSE_JOIN')\">Send mail</button>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyNzc3Ng=="}, "originalCommit": {"oid": "ecdfc394048fbbce1e22dfca41dfd6284833073a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczNDI4MA==", "bodyText": "Wow thanks!", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r448734280", "createdAt": "2020-07-02T03:56:45Z", "author": {"login": "ccyccyccy"}, "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.html", "diffHunk": "@@ -149,18 +149,22 @@\n                 </li>\n                 <li class=\"list-group-item list-group-item-info\">\n                   <strong>Course Join Link</strong>\n+                  <button type=\"button\" class=\"btn btn-primary margin-left-5px btn-sm\" (click)=\"openEmail(student.courseId, student.email, 'STUDENT_COURSE_JOIN')\">Send mail</button>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyNzc3Ng=="}, "originalCommit": {"oid": "ecdfc394048fbbce1e22dfca41dfd6284833073a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDY0NDQyOnYy", "diffSide": "RIGHT", "path": "src/web/services/email-generation.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMDo0MDozNVrOGsgjmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMDo0MDozNVrOGsgjmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyMzkzMA==", "bodyText": "Instead of queryParams for the method parameter, why not just put all the individual courseId, studentEmail, etc. as the method parameters?", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r449323930", "createdAt": "2020-07-03T00:40:35Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/email-generation.service.ts", "diffHunk": "@@ -0,0 +1,31 @@\n+import { Injectable } from '@angular/core';\n+import { Observable } from 'rxjs';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n+import { Email } from '../types/api-output';\n+import { HttpRequestService } from './http-request.service';\n+\n+/**\n+ * Handles email generation.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class EmailGenerationService {\n+\n+  constructor(private httpRequestService: HttpRequestService) { }\n+\n+  /**\n+   * Get email contents by calling API.\n+   */\n+  getEmail(queryParams: {\n+    courseId: string, studentemail: string, emailtype: string, fsname?: string,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e30cf09b6a41ceb9cbc86de4934580c48a53a78"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDY1NTE3OnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.html", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMDo0OToxNFrOGsgqDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1OTowMlrOGspPpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNTU4Mg==", "bodyText": "Do we really need sessionLinkToSessionName function? There might be something already usable in openFs.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r449325582", "createdAt": "2020-07-03T00:49:14Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.html", "diffHunk": "@@ -149,18 +149,22 @@\n                 </li>\n                 <li class=\"list-group-item list-group-item-info\">\n                   <strong>Course Join Link</strong>\n+                  <button type=\"button\" class=\"btn btn-primary margin-left-5px btn-sm\" (click)=\"openEmail(student.courseId, student.email, EmailType.STUDENT_COURSE_JOIN)\">Send mail</button>\n                   <input [value]=\"student.courseJoinLink\" readonly class=\"form-control\">\n                 </li>\n                 <li class=\"list-group-item list-group-item-warning\" *ngFor=\"let openFs of student.openSessions | keyvalue\">\n                   <strong>{{ openFs.key }}</strong>\n+                  <button type=\"button\" class=\"btn btn-primary margin-left-5px btn-sm\" (click)=\"openEmail(student.courseId, student.email, EmailType.FEEDBACK_SESSION_REMINDER, sessionLinkToSessionName(openFs.value))\">Send mail</button>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e30cf09b6a41ceb9cbc86de4934580c48a53a78"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4NDkwNQ==", "bodyText": "I think we need it.\nopenFs.key is something like s2 Sun, 01 Apr yyyy, 11:59 PM +08:00-Sat, 09 Apr yyyy, 11:59 PM +08:00\nopenFs.value is http://localhost:4200/web/sessions/submission?courseid=c1&key=8A005B3F3B25C093B205568073DC29A394871A2B4E4D2B30C5725D92FA70F5689F5DB03F086A69415AA0B122AE5F7A05&studentemail=charles%40example.com&fsname=s2\nEither way we'll have to extract it from either of them. I think the URL is safer?", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r449384905", "createdAt": "2020-07-03T05:38:34Z", "author": {"login": "ccyccyccy"}, "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.html", "diffHunk": "@@ -149,18 +149,22 @@\n                 </li>\n                 <li class=\"list-group-item list-group-item-info\">\n                   <strong>Course Join Link</strong>\n+                  <button type=\"button\" class=\"btn btn-primary margin-left-5px btn-sm\" (click)=\"openEmail(student.courseId, student.email, EmailType.STUDENT_COURSE_JOIN)\">Send mail</button>\n                   <input [value]=\"student.courseJoinLink\" readonly class=\"form-control\">\n                 </li>\n                 <li class=\"list-group-item list-group-item-warning\" *ngFor=\"let openFs of student.openSessions | keyvalue\">\n                   <strong>{{ openFs.key }}</strong>\n+                  <button type=\"button\" class=\"btn btn-primary margin-left-5px btn-sm\" (click)=\"openEmail(student.courseId, student.email, EmailType.FEEDBACK_SESSION_REMINDER, sessionLinkToSessionName(openFs.value))\">Send mail</button>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNTU4Mg=="}, "originalCommit": {"oid": "3e30cf09b6a41ceb9cbc86de4934580c48a53a78"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjI3Ng==", "bodyText": "I just checked code again. Let's take this time to also improve the implementation of this part; key being something like that is not exactly the best way. Better way would be the feedback session (name, open time, close time) to be accessible and the HTML file just needs to call one of those fields as needed.\nAlso, that yyyy is supposed to be the year. That needs to be fixed.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r449466276", "createdAt": "2020-07-03T08:59:02Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.html", "diffHunk": "@@ -149,18 +149,22 @@\n                 </li>\n                 <li class=\"list-group-item list-group-item-info\">\n                   <strong>Course Join Link</strong>\n+                  <button type=\"button\" class=\"btn btn-primary margin-left-5px btn-sm\" (click)=\"openEmail(student.courseId, student.email, EmailType.STUDENT_COURSE_JOIN)\">Send mail</button>\n                   <input [value]=\"student.courseJoinLink\" readonly class=\"form-control\">\n                 </li>\n                 <li class=\"list-group-item list-group-item-warning\" *ngFor=\"let openFs of student.openSessions | keyvalue\">\n                   <strong>{{ openFs.key }}</strong>\n+                  <button type=\"button\" class=\"btn btn-primary margin-left-5px btn-sm\" (click)=\"openEmail(student.courseId, student.email, EmailType.FEEDBACK_SESSION_REMINDER, sessionLinkToSessionName(openFs.value))\">Send mail</button>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNTU4Mg=="}, "originalCommit": {"oid": "3e30cf09b6a41ceb9cbc86de4934580c48a53a78"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTUyNzkxOnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozMjo0NlrOGtKZSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozMjo0NlrOGtKZSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwOTQxOA==", "bodyText": "This comment is not necessary. It is implied by the fact that there is no export preceding the interfaces.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r450009418", "createdAt": "2020-07-06T06:32:46Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -505,16 +514,24 @@ export interface StudentAccountSearchResult extends InstructorAccountSearchResul\n   team: string;\n   comments: string;\n   recordsPageLink: string;\n-  openSessions: { [index: string]: string };\n-  notOpenSessions: { [index: string]: string };\n-  publishedSessions: { [index: string]: string };\n+  openSessions: FeedbackSessionsGroup;\n+  notOpenSessions: FeedbackSessionsGroup;\n+  publishedSessions: FeedbackSessionsGroup;\n }\n \n-// Private interfaces\n-interface FeedbackSessionsGroup {\n-  [key: string]: string;\n+/**\n+ * Feedback session inforamtion for search result.\n+ */\n+export interface FeedbackSessionsGroup {\n+  [name: string]: {\n+    startTime: string;\n+    endTime: string;\n+    feedbackSessionUrl: string;\n+  };\n }\n \n+// Private interfaces", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ddb5e899db92d586c1368ff3fabb881f867484"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTUzMDQwOnYy", "diffSide": "RIGHT", "path": "src/web/services/feedback-sessions.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozNDowNVrOGtKa7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozNDowNVrOGtKa7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwOTgzOA==", "bodyText": "It looks like the only usage for this is in search-service.ts, and the method is very use case-specific. Let's move this method there instead.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r450009838", "createdAt": "2020-07-06T06:34:05Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/feedback-sessions.service.ts", "diffHunk": "@@ -413,14 +413,14 @@ export class FeedbackSessionsService {\n   }\n \n   /**\n-   * Generates the name fragment of a feedbackSession for display on the frontend.\n+   * Generates formatted properties of a feedbackSession for display on the frontend.\n    */\n-  generateNameFragment(feedbackSession: FeedbackSession): string {\n-    const DATE_FORMAT_WITH_ZONE_INFO: string = 'ddd, DD MMM yyyy, hh:mm A Z';\n+  formatProperties(feedbackSession: FeedbackSession): { startTime: string, endTime: string } {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ddb5e899db92d586c1368ff3fabb881f867484"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjIyNjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/GenerateEmailAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDowMzozMFrOGtRAbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDowMzozMFrOGtRAbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDExNzc0MQ==", "bodyText": "Unknown is not exactly accurate because some other types (e.g. INSTRUCTOR_COURSE_JOIN, NEW_INSTRUCTOR_ACCOUNT) are known but we just don't cater for them, maybe not now, maybe never. Email type ... is not accepted. is more accurate.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r450117741", "createdAt": "2020-07-06T10:03:30Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/ui/webapi/action/GenerateEmailAction.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package teammates.ui.webapi.action;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.exception.InvalidHttpParameterException;\n+import teammates.common.exception.UnauthorizedAccessException;\n+import teammates.common.util.Assumption;\n+import teammates.common.util.Const;\n+import teammates.common.util.EmailType;\n+import teammates.common.util.EmailWrapper;\n+import teammates.ui.webapi.output.EmailData;\n+\n+/**\n+ * Generate email content.\n+ */\n+public class GenerateEmailAction extends Action {\n+\n+    @Override\n+    protected AuthType getMinAuthLevel() {\n+        return AuthType.LOGGED_IN;\n+    }\n+\n+    @Override\n+    public void checkSpecificAccessControl() {\n+        if (!userInfo.isAdmin) {\n+            throw new UnauthorizedAccessException(\"Admin privilege is required to access this resource.\");\n+        }\n+    }\n+\n+    @Override\n+    public ActionResult execute() {\n+        String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);\n+        String studentEmail = getNonNullRequestParamValue(Const.ParamsNames.STUDENT_EMAIL);\n+        String emailType = getNonNullRequestParamValue(Const.ParamsNames.EMAIL_TYPE);\n+        String feedbackSessionName = getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);\n+\n+        CourseAttributes course = logic.getCourse(courseId);\n+        Assumption.assertNotNull(course);\n+\n+        StudentAttributes student = logic.getStudentForEmail(courseId, studentEmail);\n+        Assumption.assertNotNull(student);\n+\n+        EmailWrapper email;\n+\n+        if (emailType.equals(EmailType.STUDENT_COURSE_JOIN.name())) {\n+            email = emailGenerator.generateStudentCourseJoinEmail(course, student);\n+        } else if (emailType.equals(EmailType.FEEDBACK_SESSION_REMINDER.name())) {\n+            if (feedbackSessionName == null) {\n+                throw new InvalidHttpParameterException(\"Feedback session name not specified\");\n+            }\n+            FeedbackSessionAttributes feedbackSession = logic.getFeedbackSession(feedbackSessionName, courseId);\n+            email = emailGenerator.generateFeedbackSessionStudentReminderEmail(feedbackSession, student);\n+        } else {\n+            throw new InvalidHttpParameterException(\"Unknown emailType \" + emailType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ddb5e899db92d586c1368ff3fabb881f867484"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjY1MDQwOnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoyMzo1OVrOGtVCog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoyMzo1OVrOGtVCog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4Mzg0Mg==", "bodyText": "I would even go this far and say that LinkService should be deprecated as this class is the only user, but you don't need to change this now.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r450183842", "createdAt": "2020-07-06T12:23:59Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -342,16 +342,25 @@ export class SearchService {\n     };\n     for (const feedbackSession of feedbackSessions.feedbackSessions) {\n       if (this.feedbackSessionService.isFeedbackSessionOpen(feedbackSession)) {\n-        feedbackSessionLinks.openSessions[this.feedbackSessionService.generateNameFragment(feedbackSession).toString()]\n-          = this.linkService.generateSubmitUrl(student, feedbackSession.feedbackSessionName);\n+        feedbackSessionLinks.openSessions[feedbackSession.feedbackSessionName]\n+            = {\n+              ...this.feedbackSessionService.formatProperties(feedbackSession),\n+              feedbackSessionUrl: this.linkService.generateSubmitUrl(student, feedbackSession.feedbackSessionName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ddb5e899db92d586c1368ff3fabb881f867484"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjY1ODc0OnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoyNjoxN1rOGtVHhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoyNjoxN1rOGtVHhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4NTA5Mw==", "bodyText": "It's ok for the = { to be on the previous line, i.e.\nfeedbackSessionLinks.openSessions[feedbackSession.feedbackSessionName] = {\n  // ...\n};\nIt saves some levels of indentation.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r450185093", "createdAt": "2020-07-06T12:26:17Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -342,16 +342,25 @@ export class SearchService {\n     };\n     for (const feedbackSession of feedbackSessions.feedbackSessions) {\n       if (this.feedbackSessionService.isFeedbackSessionOpen(feedbackSession)) {\n-        feedbackSessionLinks.openSessions[this.feedbackSessionService.generateNameFragment(feedbackSession).toString()]\n-          = this.linkService.generateSubmitUrl(student, feedbackSession.feedbackSessionName);\n+        feedbackSessionLinks.openSessions[feedbackSession.feedbackSessionName]\n+            = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ddb5e899db92d586c1368ff3fabb881f867484"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjY2MDUxOnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoyNjo0MVrOGtVIeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoyNjo0MVrOGtVIeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4NTMzNw==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r450185337", "createdAt": "2020-07-06T12:26:41Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.html", "diffHunk": "@@ -149,19 +149,23 @@\n                 </li>\n                 <li class=\"list-group-item list-group-item-info\">\n                   <strong>Course Join Link</strong>\n+                  <button type=\"button\" class=\"btn btn-primary margin-left-5px btn-sm\" (click)=\"openEmail(student.courseId, student.email, EmailType.STUDENT_COURSE_JOIN)\">Send mail</button>\n                   <input [value]=\"student.courseJoinLink\" readonly class=\"form-control\">\n                 </li>\n                 <li class=\"list-group-item list-group-item-warning\" *ngFor=\"let openFs of student.openSessions | keyvalue\">\n-                  <strong>{{ openFs.key }}</strong>\n-                  <input [value]=\"openFs.value\" readonly class=\"form-control\">\n+                  <strong>{{ openFs.key + ' ' + openFs.value.startTime + ' - ' + openFs.value.endTime }}</strong>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ddb5e899db92d586c1368ff3fabb881f867484"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjY3MTQyOnYy", "diffSide": "RIGHT", "path": "src/web/services/email-generation.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoyOTo1OFrOGtVPCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoyOTo1OFrOGtVPCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4NzAxNw==", "bodyText": "Although it works, it's not exactly the best way to generalize this method for all email types. Why not create a few different methods for different email types? i.e.\ngetCourseJoinEmail(courseId: string, studentEmail: string): Observable<Email> {\n  ...\n}\n\ngetFeedbackSessionReminderEmail(courseId: string, studentEmail: string): Observable<Email> {\n  ...\n}\nThis way you can also hide some implementation details (e.g. the EmailType) from the service callers.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r450187017", "createdAt": "2020-07-06T12:29:58Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/email-generation.service.ts", "diffHunk": "@@ -0,0 +1,29 @@\n+import { Injectable } from '@angular/core';\n+import { Observable } from 'rxjs';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n+import { Email } from '../types/api-output';\n+import { HttpRequestService } from './http-request.service';\n+\n+/**\n+ * Handles email generation.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class EmailGenerationService {\n+\n+  constructor(private httpRequestService: HttpRequestService) { }\n+\n+  /**\n+   * Get email contents by calling API.\n+   */\n+  getEmail(courseId: string, studentemail: string, emailtype: string, fsname?: string): Observable<Email> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ddb5e899db92d586c1368ff3fabb881f867484"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzY0Mjc0OnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDo1NDozMVrOGuYFZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDo1NDozMVrOGuYFZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI4MjI3OQ==", "bodyText": "I believe you don't need this anymore", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r451282279", "createdAt": "2020-07-08T04:54:31Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.ts", "diffHunk": "@@ -28,6 +27,9 @@ import {\n })\n export class AdminSearchPageComponent {\n \n+  // enum\n+  EmailType: typeof EmailType = EmailType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83f8794002fe02ba7bf91aafa37064afb5a6e377"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzY0NDg3OnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDo1NTozNlrOGuYGlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzoyMjoyMlrOGunyTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI4MjU4MA==", "bodyText": "The body of these two methods are identical other than the method being called in the service class. Can they be abstracted out?", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r451282580", "createdAt": "2020-07-08T04:55:36Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.ts", "diffHunk": "@@ -189,4 +192,32 @@ export class AdminSearchPageComponent {\n     return link.replace(regex, `$1${newVal}`);\n   }\n \n+  /**\n+   * Open up an email populated with content for course join invitation.\n+   */\n+  openCourseJoinEmail(courseId: string, studentemail: string): void {\n+    this.emailGenerationService.getCourseJoinEmail(courseId, studentemail)\n+        .subscribe((email: Email) => {\n+          window.location.href = `mailto:${email.recipient}`\n+              + `?Subject=${email.subject}`\n+              + `&body=${email.content}`;\n+        }, (err: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorToast(err.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Open up an email populated with content for feedback session reminder.\n+   */\n+  openFeedbackSessionReminderEmail(courseId: string, studentemail: string, fsname: string): void {\n+    this.emailGenerationService.getFeedbackSessionReminderEmail(courseId, studentemail, fsname)\n+        .subscribe((email: Email) => {\n+          window.location.href = `mailto:${email.recipient}`\n+              + `?Subject=${email.subject}`\n+              + `&body=${email.content}`;\n+        }, (err: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorToast(err.error.message);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83f8794002fe02ba7bf91aafa37064afb5a6e377"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM2MTM3OQ==", "bodyText": "Don't think it's a good idea to refactor this. The function parameters could always change to require even more arguments, and these methods might not share similar parameters at all. The only repeated code I see here is this portion\nwindow.location.href = `mailto:${email.recipient}`\n              + `?Subject=${email.subject}`\n              + `&body=${email.content}`;\n\nwhere it is already very self descriptive. Could be worth refactoring if we further add similar methods?", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r451361379", "createdAt": "2020-07-08T08:09:48Z", "author": {"login": "ccyccyccy"}, "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.ts", "diffHunk": "@@ -189,4 +192,32 @@ export class AdminSearchPageComponent {\n     return link.replace(regex, `$1${newVal}`);\n   }\n \n+  /**\n+   * Open up an email populated with content for course join invitation.\n+   */\n+  openCourseJoinEmail(courseId: string, studentemail: string): void {\n+    this.emailGenerationService.getCourseJoinEmail(courseId, studentemail)\n+        .subscribe((email: Email) => {\n+          window.location.href = `mailto:${email.recipient}`\n+              + `?Subject=${email.subject}`\n+              + `&body=${email.content}`;\n+        }, (err: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorToast(err.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Open up an email populated with content for feedback session reminder.\n+   */\n+  openFeedbackSessionReminderEmail(courseId: string, studentemail: string, fsname: string): void {\n+    this.emailGenerationService.getFeedbackSessionReminderEmail(courseId, studentemail, fsname)\n+        .subscribe((email: Email) => {\n+          window.location.href = `mailto:${email.recipient}`\n+              + `?Subject=${email.subject}`\n+              + `&body=${email.content}`;\n+        }, (err: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorToast(err.error.message);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI4MjU4MA=="}, "originalCommit": {"oid": "83f8794002fe02ba7bf91aafa37064afb5a6e377"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUzOTUzNA==", "bodyText": "What I'm suggesting is a function that takes in Observable<Email>, so it shouldn't matter how many parameter it takes or whether the parameters change or not.\nSince this is repeated just twice, it is fine to let this be for now.", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r451539534", "createdAt": "2020-07-08T13:22:22Z", "author": {"login": "wkurniawan07"}, "path": "src/web/app/pages-admin/admin-search-page/admin-search-page.component.ts", "diffHunk": "@@ -189,4 +192,32 @@ export class AdminSearchPageComponent {\n     return link.replace(regex, `$1${newVal}`);\n   }\n \n+  /**\n+   * Open up an email populated with content for course join invitation.\n+   */\n+  openCourseJoinEmail(courseId: string, studentemail: string): void {\n+    this.emailGenerationService.getCourseJoinEmail(courseId, studentemail)\n+        .subscribe((email: Email) => {\n+          window.location.href = `mailto:${email.recipient}`\n+              + `?Subject=${email.subject}`\n+              + `&body=${email.content}`;\n+        }, (err: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorToast(err.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Open up an email populated with content for feedback session reminder.\n+   */\n+  openFeedbackSessionReminderEmail(courseId: string, studentemail: string, fsname: string): void {\n+    this.emailGenerationService.getFeedbackSessionReminderEmail(courseId, studentemail, fsname)\n+        .subscribe((email: Email) => {\n+          window.location.href = `mailto:${email.recipient}`\n+              + `?Subject=${email.subject}`\n+              + `&body=${email.content}`;\n+        }, (err: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorToast(err.error.message);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI4MjU4MA=="}, "originalCommit": {"oid": "83f8794002fe02ba7bf91aafa37064afb5a6e377"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzY0NjA3OnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDo1NjoyM1rOGuYHUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNDo1NjoyM1rOGuYHUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI4Mjc3MQ==", "bodyText": "This can be private, I believe", "url": "https://github.com/TEAMMATES/teammates/pull/10270#discussion_r451282771", "createdAt": "2020-07-08T04:56:23Z", "author": {"login": "wkurniawan07"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -463,6 +471,15 @@ export class SearchService {\n       }),\n     );\n   }\n+\n+  formatProperties(feedbackSession: FeedbackSession): { startTime: string, endTime: string } {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83f8794002fe02ba7bf91aafa37064afb5a6e377"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3574, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}