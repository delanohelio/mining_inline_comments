{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NDI4Njkx", "number": 10004, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxNzozMVrODuDNyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODo1Mzo1NVrODuq9IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjEzNzcxOnYy", "diffSide": "RIGHT", "path": "src/web/services/error-report.service.spec.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxNzozMVrOF_1UYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxNzozMVrOF_1UYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3ODE3OQ==", "bodyText": "Might be worthwhile to have dummy values instead of blank strings", "url": "https://github.com/TEAMMATES/teammates/pull/10004#discussion_r402478179", "createdAt": "2020-04-02T17:17:31Z", "author": {"login": "madanalogy"}, "path": "src/web/services/error-report.service.spec.ts", "diffHunk": "@@ -0,0 +1,44 @@\n+import { TestBed } from '@angular/core/testing';\n+\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { ResourceEndpoints } from '../types/api-endpoints';\n+import { ErrorReportRequest } from '../types/api-request';\n+import { ErrorReportService } from './error-report.service';\n+import { HttpRequestService } from './http-request.service';\n+\n+describe('ErrorReportService', () => {\n+  let spyHttpRequestService: any;\n+  let service: ErrorReportService;\n+\n+  beforeEach(() => {\n+    spyHttpRequestService = {\n+      get: jest.fn(),\n+      post: jest.fn(),\n+      put: jest.fn(),\n+      delete: jest.fn(),\n+    };\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+      ],\n+      providers: [\n+        { provide: HttpRequestService, useValue: spyHttpRequestService },\n+      ],\n+    });\n+    service = TestBed.get(ErrorReportService);\n+  });\n+\n+  it('should be created', () => {\n+    expect(service).toBeTruthy();\n+  });\n+\n+  it('should execute POST when sending an error report', () => {\n+    const request: ErrorReportRequest = {\n+      requestId: '',\n+      subject: '',\n+      content: '',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "885f534f2ad3758ff97478fcaeb0b02bd1d71358"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjYyMzU2OnYy", "diffSide": "RIGHT", "path": "src/web/services/feedback-responses.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODoxOToyMVrOGAwJyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODoxOToyMVrOGAwJyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MjEyMA==", "bodyText": "Nitpicking I guess, but maybe ES6 destructuring can come into handy here, so that you can just do\n// do destructuring here\n// then can simplify this part\nconst paramMap: { [key: string]: string } = {\n   questionid \n   intent,\n   key,\n   moderatedperson\n}", "url": "https://github.com/TEAMMATES/teammates/pull/10004#discussion_r403442120", "createdAt": "2020-04-04T08:19:21Z", "author": {"login": "hcwong"}, "path": "src/web/services/feedback-responses.service.ts", "diffHunk": "@@ -119,6 +122,24 @@ export class FeedbackResponsesService {\n     }\n   }\n \n+  /**\n+   * Retrieves a feedback response by calling API.\n+   */\n+  getFeedbackResponse(queryParams: {\n+    questionId: string,\n+    intent: Intent,\n+    key: string,\n+    moderatedPerson: string,\n+  }): Observable<FeedbackResponsesResponse> {\n+    const paramMap: { [key: string]: string } = {\n+      questionid: queryParams.questionId,\n+      intent: queryParams.intent,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf572725de0b7c63d3fb126e86b85c17c93e4541"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY0Mjg2OnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-admin/admin-accounts-page/admin-accounts-page.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODo0NjozN1rOGAwS5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODo0NjozN1rOGAwS5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NDQ1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  googleId: id,\n          \n          \n            \n                  googleId: this.accountInfo.googleId,\n          \n      \n    \n    \n  \n\nCan it be this instead? Then we can get rid of the id local variable since it isn't used anywhere else.", "url": "https://github.com/TEAMMATES/teammates/pull/10004#discussion_r403444455", "createdAt": "2020-04-04T08:46:37Z", "author": {"login": "dvrylc"}, "path": "src/web/app/pages-admin/admin-accounts-page/admin-accounts-page.component.ts", "diffHunk": "@@ -97,11 +103,10 @@ export class AdminAccountsPageComponent implements OnInit {\n    */\n   removeStudentFromCourse(courseId: string): void {\n     const id: string = this.accountInfo.googleId;\n-    const paramMap: { [key: string]: string } = {\n-      googleid: id,\n-      courseid: courseId,\n-    };\n-    this.httpRequestService.delete('/student', paramMap).subscribe(() => {\n+    this.studentService.deleteStudent({\n+      courseId,\n+      googleId: id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf572725de0b7c63d3fb126e86b85c17c93e4541"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY0NjU3OnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-admin/admin-accounts-page/admin-accounts-page.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODo1MTozMlrOGAwUrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODo1MTozMlrOGAwUrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NDkxMA==", "bodyText": "Same as above", "url": "https://github.com/TEAMMATES/teammates/pull/10004#discussion_r403444910", "createdAt": "2020-04-04T08:51:32Z", "author": {"login": "dvrylc"}, "path": "src/web/app/pages-admin/admin-accounts-page/admin-accounts-page.component.ts", "diffHunk": "@@ -114,11 +119,10 @@ export class AdminAccountsPageComponent implements OnInit {\n    */\n   removeInstructorFromCourse(courseId: string): void {\n     const id: string = this.accountInfo.googleId;\n-    const paramMap: { [key: string]: string } = {\n-      instructorid: id,\n-      courseid: courseId,\n-    };\n-    this.httpRequestService.delete('/instructor', paramMap).subscribe(() => {\n+    this.instructorService.deleteInstructor({\n+      courseId,\n+      instructorId: id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf572725de0b7c63d3fb126e86b85c17c93e4541"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjY0ODY1OnYy", "diffSide": "RIGHT", "path": "src/web/app/pages-session/session-result-page/session-result-page.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODo1Mzo1NVrOGAwVow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwODo1Mzo1NVrOGAwVow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0NTE1NQ==", "bodyText": "Since courseid and fsname are used twice in this function, consider destructuring queryParams as { courseid: courseId, fsname: feedbackSessionName } so that this object and the one below can be simplified?", "url": "https://github.com/TEAMMATES/teammates/pull/10004#discussion_r403445155", "createdAt": "2020-04-04T08:53:55Z", "author": {"login": "dvrylc"}, "path": "src/web/app/pages-session/session-result-page/session-result-page.component.ts", "diffHunk": "@@ -27,26 +23,29 @@ export class SessionResultPageComponent implements OnInit {\n   formattedSessionOpeningTime: string = '';\n   formattedSessionClosingTime: string = '';\n \n-  constructor(private httpRequestService: HttpRequestService, private route: ActivatedRoute,\n+  constructor(private feedbackSessionsService: FeedbackSessionsService, private route: ActivatedRoute,\n       private timezoneService: TimezoneService, private statusMessageService: StatusMessageService) {\n     this.timezoneService.getTzVersion(); // import timezone service to load timezone data\n   }\n \n   ngOnInit(): void {\n     this.route.queryParams.subscribe((queryParams: any) => {\n-      const paramMap: { [key: string]: string } = {\n-        courseid: queryParams.courseid,\n-        fsname: queryParams.fsname,\n+      this.feedbackSessionsService.getFeedbackSession({\n+        courseId: queryParams.courseid,\n+        feedbackSessionName: queryParams.fsname,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf572725de0b7c63d3fb126e86b85c17c93e4541"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3940, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}