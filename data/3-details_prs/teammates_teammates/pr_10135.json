{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODczNTYx", "number": 10135, "title": "[#10146] Refactor get session result logic in the backend", "bodyText": "Part of #10146\nOutline of Solution\nFirst commit:\n\nCorrect one type definition in the frontend. Basically, recipientEmail can be null for anonymous case.\n\nSecond commit:\n\nFix data inconsistency in the typicalDataBundle. The giverSection and recipientSection should follow those of its corresponding response.\n\nThird commit:\n\nI purely add a common method for both student and instructor to get feedback session result. I also create a new bundle called SessionResultsBundle (The old FeedbackSessionResultsBundle is too complicated to change)\n\nAll responses and comments are fetched first and them checked one by one (so it is a compute-intensive operation). The old method fetches viewable responses by issuing multiple queries (communication-intensive operation)\nRemove all complicated and unnecessary maps in the bundle and purely use CourseRoster to get name, teamName and sectionName.\nMove the giver/recipient name hiding logic to SessionResultData. Similarly, data transformation will all be made there. The hiding logic will also not modify fields in *Attributes.\nI have gone through the code base and look for session result related tests. The tests are migrated to test the new method as much as possible.\nRewrite the building process of SessionResultData. Also applied builder pattern to make the constructor more readable.\n\n\n\nWe decide to move irrelevant code in a separate PR as it related to the functionality of the CSV generation.\nFirst commit:\n\nI purely add a common method for both student and instructor to get feedback session result. I also create a new bundle called SessionResultsBundle (The old FeedbackSessionResultsBundle is too complicated to change)\n\nAll responses and comments are fetched first and them checked one by one (so it is a compute-intensive operation). The old method fetches viewable responses by issuing multiple queries (communication-intensive operation)\nRemove all complicated and unnecessary maps in the bundle and purely use CourseRoster to get name, teamName and sectionName.\nMove the giver/recipient name hiding logic to SessionResultData. Similarly, data transformation will all be made there. The hiding logic will also not modify fields in *Attributes.\nI have gone through the code base and look for session result related tests. The tests are migrated to test the new method as much as possible.\n\n\n\nSecond commit:\n\nRemove all unused methods related to session result.\nRemove get CSV functionality. I believe we can generate the CSV in the frontend by using the RESTFul data returned. Anyway, I need to remove them or the dependencies can be de-coupled.\n\nThird commit:\n\nJust move a method to the correct place.", "createdAt": "2020-05-29T04:13:13Z", "url": "https://github.com/TEAMMATES/teammates/pull/10135", "merged": true, "mergeCommit": {"oid": "10c72c78908632965b79ce497c91fa44bb143038"}, "closed": true, "closedAt": "2020-06-02T21:15:35Z", "author": {"login": "xpdavid"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl8SYuAFqTQyMDY3MjMwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnZ5XkgH2gAyNDI0ODczNTYxOjcyYWZiMDZmNTkzOTc0MDliMGNhZWM0ZDUxNjJiZGFiYTY2M2EzMGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjcyMzA0", "url": "https://github.com/TEAMMATES/teammates/pull/10135#pullrequestreview-420672304", "createdAt": "2020-05-29T06:01:09Z", "commit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMToxMFrOGcPxkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoxNToyOFrOGcQB_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTc2MA==", "bodyText": "Apply SLAP principle here: extract this block to a private method, no matter how simple it is.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432271760", "createdAt": "2020-05-29T06:01:10Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/CourseRoster.java", "diffHunk": "@@ -15,12 +16,24 @@\n  */\n public class CourseRoster {\n \n-    Map<String, StudentAttributes> studentListByEmail = new HashMap<>();\n-    Map<String, InstructorAttributes> instructorListByEmail = new HashMap<>();\n+    // The name for each index of the result returned by {@link CourseRoster#getInfoForIdentifier(String)}\n+    public static final int INFO_NAME = 0;\n+    public static final int INFO_TEAM_NAME = 1;\n+    public static final int INFO_SECTION_NAME = 2;\n+\n+    private final Map<String, StudentAttributes> studentListByEmail = new HashMap<>();\n+    private final Map<String, InstructorAttributes> instructorListByEmail = new HashMap<>();\n+    private final Map<String, List<StudentAttributes>> teamToMembersTable = new HashMap<>();\n \n     public CourseRoster(List<StudentAttributes> students, List<InstructorAttributes> instructors) {\n         populateStudentListByEmail(students);\n         populateInstructorListByEmail(instructors);\n+\n+        // group students by team\n+        for (StudentAttributes studentAttributes : this.getStudents()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MjAyOA==", "bodyText": "While this works, we can just define another small data structure with 3 fields for this. That way we also don't need the INFO_* variables.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432272028", "createdAt": "2020-05-29T06:02:00Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/CourseRoster.java", "diffHunk": "@@ -104,4 +128,42 @@ private void populateInstructorListByEmail(List<InstructorAttributes> instructor\n             instructorListByEmail.put(i.email, i);\n         }\n     }\n+\n+    /**\n+     * Gets the info of a participant associated with the identifier in the course.\n+     *\n+     * @see CourseRoster#INFO_NAME\n+     * @see CourseRoster#INFO_TEAM_NAME\n+     * @see CourseRoster#INFO_SECTION_NAME\n+     */\n+    public String[] getInfoForIdentifier(String identifier) {\n+        String name = Const.USER_NOBODY_TEXT;\n+        String teamName = Const.USER_NOBODY_TEXT;\n+        String sectionName = Const.DEFAULT_SECTION;\n+\n+        boolean isStudent = this.getStudentForEmail(identifier) != null;\n+        boolean isInstructor = this.getInstructorForEmail(identifier) != null;\n+        boolean isTeam = this.getTeamToMembersTable().containsKey(identifier);\n+        if (isStudent) {\n+            StudentAttributes student = this.getStudentForEmail(identifier);\n+\n+            name = student.getName();\n+            teamName = student.getTeam();\n+            sectionName = student.getSection();\n+        } else if (isInstructor) {\n+            InstructorAttributes instructor = this.getInstructorForEmail(identifier);\n+\n+            name = instructor.getName();\n+            teamName = Const.USER_TEAM_FOR_INSTRUCTOR;\n+            sectionName = Const.DEFAULT_SECTION;\n+        } else if (isTeam) {\n+            StudentAttributes teamMember = this.getTeamToMembersTable().get(identifier).iterator().next();\n+\n+            name = identifier;\n+            teamName = identifier;\n+            sectionName = teamMember.getSection();\n+        }\n+\n+        return new String[] { name, teamName, sectionName };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3Mjk0Mw==", "bodyText": "We don't normally put @Nullable annotation at this layer. What's the advantage here?", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432272943", "createdAt": "2020-05-29T06:05:00Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/logic/api/Logic.java", "diffHunk": "@@ -1678,83 +1434,20 @@ public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorToSect\n     }\n \n     /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session from a given question number\n-     * This will not retrieve the list of comments for this question\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n-     */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromQuestion(\n-            String feedbackSessionName, String courseId, String userEmail, String questionId)\n-            throws EntityDoesNotExistException {\n-\n-        Assumption.assertNotNull(feedbackSessionName);\n-        Assumption.assertNotNull(courseId);\n-        Assumption.assertNotNull(userEmail);\n-\n-        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorFromQuestion(feedbackSessionName, courseId,\n-                                                                                        userEmail, questionId);\n-    }\n-\n-    /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session from a given question number\n-     * in a given section.\n-     * This will not retrieve the list of comments for this question\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n-     */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromQuestionInSection(\n-                                    String feedbackSessionName, String courseId, String userEmail,\n-                                    String questionId, String selectedSection, SectionDetail selectedSectionDetail)\n-            throws EntityDoesNotExistException {\n-\n-        Assumption.assertNotNull(feedbackSessionName);\n-        Assumption.assertNotNull(courseId);\n-        Assumption.assertNotNull(userEmail);\n-        Assumption.assertNotNull(selectedSection);\n-        Assumption.assertNotNull(selectedSectionDetail);\n-\n-        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorFromQuestionInSection(\n-                                            feedbackSessionName, courseId, userEmail,\n-                                            questionId, selectedSection, selectedSectionDetail);\n-    }\n-\n-    /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session.\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n-     */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructor(\n-            String feedbackSessionName, String courseId, String userEmail)\n-            throws EntityDoesNotExistException {\n-\n-        Assumption.assertNotNull(feedbackSessionName);\n-        Assumption.assertNotNull(courseId);\n-        Assumption.assertNotNull(userEmail);\n-\n-        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructor(feedbackSessionName, courseId, userEmail);\n-    }\n-\n-    /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session in a specific section.\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n+     * Get the session result for a feedback session.\n+     *\n+     * @see FeedbackSessionsLogic#getSessionResultsForUser(String, String, String, UserRole, String, String)\n      */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorInSection(String feedbackSessionName,\n-            String courseId, String userEmail, String section, SectionDetail sectionDetail)\n-            throws EntityDoesNotExistException {\n-\n+    public SessionResultsBundle getSessionResultsForUser(\n+            String feedbackSessionName, String courseId, String userEmail, UserRole role,\n+            @Nullable String questionId, @Nullable String section) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 420}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3NDU2Mw==", "bodyText": "Why is this removed?\nEdit: Just read the explanation. While it may be true, I don't suggest doing it here in this PR until we know exactly how to do it in the front-end.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432274563", "createdAt": "2020-05-29T06:10:46Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/ui/webapi/action/ActionFactory.java", "diffHunk": "@@ -63,7 +63,6 @@\n         map(ResourceURIs.RESPONSE_COMMENT, PUT, UpdateFeedbackResponseCommentAction.class);\n         map(ResourceURIs.RESPONSE_COMMENT, DELETE, DeleteFeedbackResponseCommentAction.class);\n         map(ResourceURIs.RESULT, GET, GetSessionResultsAction.class);\n-        map(ResourceURIs.RESULT_CSV, GET, GetSessionResultsAsCsvAction.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3NTk2NA==", "bodyText": "You can remove this method and the field sc of this class as well. Also you can remove the httpunit test dependency in build.gradle.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432275964", "createdAt": "2020-05-29T06:15:28Z", "author": {"login": "wkurniawan07"}, "path": "src/test/java/teammates/test/driver/GaeSimulation.java", "diffHunk": "@@ -183,24 +182,6 @@ public void loginAsStudentInstructor(String userId) {\n         assertFalse(user.isAdmin);\n     }\n \n-    /**\n-     * Returns an {@link teammates.ui.controller.Action} object that matches the parameters given.\n-     *\n-     * @param parameters Parameters that appear in a HttpServletRequest received by the app.\n-     */\n-    public teammates.ui.controller.Action getLegacyActionObject(String uri, String... parameters) {\n-        InvocationContext ic = invokeWebRequest(uri, parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNzk3NDY2", "url": "https://github.com/TEAMMATES/teammates/pull/10135#pullrequestreview-420797466", "createdAt": "2020-05-29T09:32:35Z", "commit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTozMjozNlrOGcVqxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDoyMzo1MFrOGcXQMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2ODMyNQ==", "bodyText": "Probably we can be consistent with the use of this. here?", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432368325", "createdAt": "2020-05-29T09:32:36Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/common/datatransfer/SessionResultsBundle.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package teammates.common.datatransfer;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.util.Const;\n+import teammates.common.util.StringHelper;\n+\n+/**\n+ * Represents detailed results for a feedback session.\n+ */\n+public class SessionResultsBundle {\n+\n+    private final FeedbackSessionAttributes feedbackSession;\n+    private final Map<String, FeedbackQuestionAttributes> questionsMap;\n+    private final Map<String, List<FeedbackResponseAttributes>> questionResponseMap;\n+    private final Map<String, List<FeedbackResponseCommentAttributes>> responseCommentsMap;\n+    private final Map<String, boolean[]> responseVisibilityTable;\n+    private final Map<Long, boolean[]> commentVisibilityTable;\n+    private final CourseRoster roster;\n+\n+    public SessionResultsBundle(FeedbackSessionAttributes feedbackSession,\n+                                Map<String, FeedbackQuestionAttributes> questionsMap,\n+                                List<FeedbackResponseAttributes> responses,\n+                                Map<String, boolean[]> responseVisibilityTable,\n+                                Map<String, List<FeedbackResponseCommentAttributes>> responseCommentsMap,\n+                                Map<Long, boolean[]> commentVisibilityTable,\n+                                CourseRoster roster) {\n+\n+        this.feedbackSession = feedbackSession;\n+        this.questionsMap = questionsMap;\n+        this.responseCommentsMap = responseCommentsMap;\n+        this.responseVisibilityTable = responseVisibilityTable;\n+        this.commentVisibilityTable = commentVisibilityTable;\n+        this.roster = roster;\n+\n+        // build question to response map\n+        questionResponseMap = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MTYxNw==", "bodyText": "How about refactor out a private builder method for questionResponseMap?", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432371617", "createdAt": "2020-05-29T09:38:53Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/common/datatransfer/SessionResultsBundle.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package teammates.common.datatransfer;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.util.Const;\n+import teammates.common.util.StringHelper;\n+\n+/**\n+ * Represents detailed results for a feedback session.\n+ */\n+public class SessionResultsBundle {\n+\n+    private final FeedbackSessionAttributes feedbackSession;\n+    private final Map<String, FeedbackQuestionAttributes> questionsMap;\n+    private final Map<String, List<FeedbackResponseAttributes>> questionResponseMap;\n+    private final Map<String, List<FeedbackResponseCommentAttributes>> responseCommentsMap;\n+    private final Map<String, boolean[]> responseVisibilityTable;\n+    private final Map<Long, boolean[]> commentVisibilityTable;\n+    private final CourseRoster roster;\n+\n+    public SessionResultsBundle(FeedbackSessionAttributes feedbackSession,\n+                                Map<String, FeedbackQuestionAttributes> questionsMap,\n+                                List<FeedbackResponseAttributes> responses,\n+                                Map<String, boolean[]> responseVisibilityTable,\n+                                Map<String, List<FeedbackResponseCommentAttributes>> responseCommentsMap,\n+                                Map<Long, boolean[]> commentVisibilityTable,\n+                                CourseRoster roster) {\n+\n+        this.feedbackSession = feedbackSession;\n+        this.questionsMap = questionsMap;\n+        this.responseCommentsMap = responseCommentsMap;\n+        this.responseVisibilityTable = responseVisibilityTable;\n+        this.commentVisibilityTable = commentVisibilityTable;\n+        this.roster = roster;\n+\n+        // build question to response map\n+        questionResponseMap = new LinkedHashMap<>();\n+        List<FeedbackQuestionAttributes> questions = new ArrayList<>(questionsMap.values());\n+        for (FeedbackQuestionAttributes question : questions) {\n+            questionResponseMap.put(question.getId(), new ArrayList<>());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3OTE1NQ==", "bodyText": "Instead of prefixing the name of 2 lists as first, second, we can give more meaningful prefixes such as giver, receiver, which is the true intention here.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432379155", "createdAt": "2020-05-29T09:52:51Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/storage/api/FeedbackResponseCommentsDb.java", "diffHunk": "@@ -395,6 +415,38 @@ private FeedbackResponseComment getFeedbackResponseCommentEntitiesForResponseFro\n                 .list();\n     }\n \n+    private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForQuestion(String questionId) {\n+        return load()\n+                .filter(\"feedbackQuestionId =\", questionId)\n+                .list();\n+    }\n+\n+    private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForQuestionInSection(\n+            String questionId, String section) {\n+        // creating map to remove duplicates\n+        Map<Long, FeedbackResponseComment> comments = new HashMap<>();\n+\n+        List<FeedbackResponseComment> firstQueryResponseComments = load()\n+                .filter(\"feedbackQuestionId =\", questionId)\n+                .filter(\"giverSection =\", section)\n+                .list();\n+\n+        for (FeedbackResponseComment comment : firstQueryResponseComments) {\n+            comments.put(comment.getFeedbackResponseCommentId(), comment);\n+        }\n+\n+        List<FeedbackResponseComment> secondQueryResponseComments = load()\n+                .filter(\"feedbackQuestionId =\", questionId)\n+                .filter(\"receiverSection =\", section)\n+                .list();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MTIzOQ==", "bodyText": "The variable naming would be better to be consistent with the underlying data structure, such as respondingStudentSet .", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432381239", "createdAt": "2020-05-29T09:56:59Z", "author": {"login": "Derek-Hardy"}, "path": "src/test/java/teammates/test/cases/automated/FeedbackSessionUpdateRespondentWorkerActionTest.java", "diffHunk": "@@ -103,22 +101,32 @@ public void allTests() throws EntityDoesNotExistException {\n     }\n \n     private void verifyRespondentInSessionRespondentsList(FeedbackSessionAttributes session, String respondentEmail,\n-            boolean isInstructor) throws EntityDoesNotExistException {\n-        FeedbackSessionResponseStatus responseStatus =\n-                fsLogic.getFeedbackSessionResponseStatus(session.getFeedbackSessionName(), session.getCourseId());\n-        assertFalse(responseStatus.getStudentsWhoDidNotRespond().contains(respondentEmail));\n-        if (!isInstructor) {\n-            assertTrue(responseStatus.getStudentsWhoResponded().contains(respondentEmail));\n+            boolean isInstructor) {\n+        FeedbackSessionAttributes sessionInDb =\n+                logic.getFeedbackSession(session.getFeedbackSessionName(), session.getCourseId());\n+\n+        Set<String> respondingStudentList = sessionInDb.getRespondingStudentList();\n+        Set<String> respondingInstructorList = sessionInDb.getRespondingInstructorList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzcxOA==", "bodyText": "Actually the method itself also named as get...List but in fact return a set.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432383718", "createdAt": "2020-05-29T10:01:48Z", "author": {"login": "Derek-Hardy"}, "path": "src/test/java/teammates/test/cases/automated/FeedbackSessionUpdateRespondentWorkerActionTest.java", "diffHunk": "@@ -103,22 +101,32 @@ public void allTests() throws EntityDoesNotExistException {\n     }\n \n     private void verifyRespondentInSessionRespondentsList(FeedbackSessionAttributes session, String respondentEmail,\n-            boolean isInstructor) throws EntityDoesNotExistException {\n-        FeedbackSessionResponseStatus responseStatus =\n-                fsLogic.getFeedbackSessionResponseStatus(session.getFeedbackSessionName(), session.getCourseId());\n-        assertFalse(responseStatus.getStudentsWhoDidNotRespond().contains(respondentEmail));\n-        if (!isInstructor) {\n-            assertTrue(responseStatus.getStudentsWhoResponded().contains(respondentEmail));\n+            boolean isInstructor) {\n+        FeedbackSessionAttributes sessionInDb =\n+                logic.getFeedbackSession(session.getFeedbackSessionName(), session.getCourseId());\n+\n+        Set<String> respondingStudentList = sessionInDb.getRespondingStudentList();\n+        Set<String> respondingInstructorList = sessionInDb.getRespondingInstructorList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MTIzOQ=="}, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzkyNA==", "bodyText": "Similarly here", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432383924", "createdAt": "2020-05-29T10:02:14Z", "author": {"login": "Derek-Hardy"}, "path": "src/test/java/teammates/test/cases/automated/FeedbackSessionUpdateRespondentWorkerActionTest.java", "diffHunk": "@@ -103,22 +101,32 @@ public void allTests() throws EntityDoesNotExistException {\n     }\n \n     private void verifyRespondentInSessionRespondentsList(FeedbackSessionAttributes session, String respondentEmail,\n-            boolean isInstructor) throws EntityDoesNotExistException {\n-        FeedbackSessionResponseStatus responseStatus =\n-                fsLogic.getFeedbackSessionResponseStatus(session.getFeedbackSessionName(), session.getCourseId());\n-        assertFalse(responseStatus.getStudentsWhoDidNotRespond().contains(respondentEmail));\n-        if (!isInstructor) {\n-            assertTrue(responseStatus.getStudentsWhoResponded().contains(respondentEmail));\n+            boolean isInstructor) {\n+        FeedbackSessionAttributes sessionInDb =\n+                logic.getFeedbackSession(session.getFeedbackSessionName(), session.getCourseId());\n+\n+        Set<String> respondingStudentList = sessionInDb.getRespondingStudentList();\n+        Set<String> respondingInstructorList = sessionInDb.getRespondingInstructorList();\n+        if (isInstructor) {\n+            assertFalse(respondingStudentList.contains(respondentEmail));\n+            assertTrue(respondingInstructorList.contains(respondentEmail));\n+        } else {\n+            assertTrue(respondingStudentList.contains(respondentEmail));\n+            assertFalse(respondingInstructorList.contains(respondentEmail));\n         }\n     }\n \n     private void verifyRespondentNotInSessionRespondentsList(FeedbackSessionAttributes session, String respondentEmail,\n-            boolean isInstructor) throws EntityDoesNotExistException {\n-        FeedbackSessionResponseStatus responseStatus =\n-                fsLogic.getFeedbackSessionResponseStatus(session.getFeedbackSessionName(), session.getCourseId());\n-        assertTrue(responseStatus.getStudentsWhoDidNotRespond().contains(respondentEmail));\n-        if (!isInstructor) {\n-            assertFalse(responseStatus.getStudentsWhoResponded().contains(respondentEmail));\n+            boolean isInstructor) {\n+        FeedbackSessionAttributes sessionInDb =\n+                logic.getFeedbackSession(session.getFeedbackSessionName(), session.getCourseId());\n+\n+        Set<String> respondingStudentList = sessionInDb.getRespondingStudentList();\n+        Set<String> respondingInstructorList = sessionInDb.getRespondingInstructorList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjM2OQ==", "bodyText": "Although it is just a test class, I think it is still good to name each element in the pair within the for loop for better understanding.\nLike studentTeam = studentData[i], studentEmail = studentData[i + 1].", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432386369", "createdAt": "2020-05-29T10:07:15Z", "author": {"login": "Derek-Hardy"}, "path": "src/test/java/teammates/test/cases/datatransfer/CourseRosterTest.java", "diffHunk": "@@ -104,15 +105,96 @@ public void testGetEmailToNameTableFromRoster() {\n         assertEquals(emailToNameTableExpected, emailToNameTableActual);\n     }\n \n+    @Test\n+    public void testGetTeamToMembersTable_typicalCase_shouldGroupTeamCorrectly() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"team 1\", \"s1@gmail.com\",\n+                        \"team 1\", \"s2@gmail.com\",\n+                        \"team 2\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"ins1@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+\n+        assertEquals(2, roster.getTeamToMembersTable().size());\n+        assertEquals(2, roster.getTeamToMembersTable().get(\"team 1\").size());\n+        assertEquals(1, roster.getTeamToMembersTable().get(\"team 2\").size());\n+        assertEquals(\"s3@gmail.com\", roster.getTeamToMembersTable().get(\"team 2\").iterator().next().getEmail());\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_studentCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"John\", \"john@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"john@gmail.com\");\n+        assertEquals(\"John\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(\"John\", info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(\"John's Section\", info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_instructorCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"john@email.com\");\n+        assertEquals(\"John\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(Const.USER_TEAM_FOR_INSTRUCTOR, info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(Const.DEFAULT_SECTION, info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_teamCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"s1\");\n+        assertEquals(\"s1\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(\"s1\", info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(\"s1's Section\", info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_unknownCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"random\");\n+        assertEquals(Const.USER_NOBODY_TEXT, info[CourseRoster.INFO_NAME]);\n+        assertEquals(Const.USER_NOBODY_TEXT, info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(Const.DEFAULT_SECTION, info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n     private List<StudentAttributes> createStudentList(String... studentData) {\n         List<StudentAttributes> students = new ArrayList<>();\n         for (int i = 0; i < studentData.length; i += 2) {\n             StudentAttributes student = StudentAttributes\n-                    .builder(\"\", \"\")\n-                    .withName(\"\")\n+                    .builder(\"\", studentData[i + 1])\n+                    .withName(studentData[i])\n+                    .withTeamName(studentData[i])\n+                    .withSectionName(studentData[i] + \"'s Section\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5NDI4OQ==", "bodyText": "So, decided to pass in null and remove if-else check? :)", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432394289", "createdAt": "2020-05-29T10:23:50Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "diffHunk": "@@ -371,18 +437,24 @@ public CommentOutput getParticipantComment() {\n         @Nullable\n         private final String lastEditorName;\n \n-        public CommentOutput(FeedbackResponseCommentAttributes frc, String commentGiverName, String lastEditorName) {\n+        public CommentOutput(FeedbackResponseCommentAttributes frc,\n+                             String commentGiver, String commentGiverName,\n+                             String lastEditorEmail, String lastEditorName) {\n             super(frc);\n+            this.commentGiver = commentGiver;\n+            this.commentGiverName = commentGiverName;\n+            this.lastEditorEmail = lastEditorEmail;\n+            this.lastEditorName = lastEditorName;\n+        }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 442}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85627bba356c237a1399e5af5b85d5e447b7335", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/c85627bba356c237a1399e5af5b85d5e447b7335", "committedDate": "2020-05-31T17:09:57Z", "message": "fix code inconsistency for question stats"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/833c1948bb833e14c660a0fedb83e6ae6fff149d", "committedDate": "2020-05-29T03:59:57Z", "message": "move the response visible checking to response logic class"}, "afterCommit": {"oid": "eb8d5bd93b86588ea90d869e88ebbea98f2fc0ba", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/eb8d5bd93b86588ea90d869e88ebbea98f2fc0ba", "committedDate": "2020-05-31T17:45:22Z", "message": "rewrite the get result logic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb8d5bd93b86588ea90d869e88ebbea98f2fc0ba", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/eb8d5bd93b86588ea90d869e88ebbea98f2fc0ba", "committedDate": "2020-05-31T17:45:22Z", "message": "rewrite the get result logic"}, "afterCommit": {"oid": "d27410301f1e6ff927016ee1b0c96f2ff218c846", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d27410301f1e6ff927016ee1b0c96f2ff218c846", "committedDate": "2020-05-31T20:34:44Z", "message": "rewrite the get session result logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f65b63ffd44e03c09283c258846e521a8b0a00", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/57f65b63ffd44e03c09283c258846e521a8b0a00", "committedDate": "2020-05-31T21:05:22Z", "message": "fix two data inconsistency in typical data bundle about comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d27410301f1e6ff927016ee1b0c96f2ff218c846", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d27410301f1e6ff927016ee1b0c96f2ff218c846", "committedDate": "2020-05-31T20:34:44Z", "message": "rewrite the get session result logic"}, "afterCommit": {"oid": "7da52fd3d7a940fd7765b0c89fbde824ed1c7816", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/7da52fd3d7a940fd7765b0c89fbde824ed1c7816", "committedDate": "2020-05-31T21:05:22Z", "message": "rewrite the get session result logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a05caaaabcbc5949cee71899de421c783eccfb49", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/a05caaaabcbc5949cee71899de421c783eccfb49", "committedDate": "2020-06-01T02:55:56Z", "message": "rewrite the get session result logic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7da52fd3d7a940fd7765b0c89fbde824ed1c7816", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/7da52fd3d7a940fd7765b0c89fbde824ed1c7816", "committedDate": "2020-05-31T21:05:22Z", "message": "rewrite the get session result logic"}, "afterCommit": {"oid": "a05caaaabcbc5949cee71899de421c783eccfb49", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/a05caaaabcbc5949cee71899de421c783eccfb49", "committedDate": "2020-06-01T02:55:56Z", "message": "rewrite the get session result logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyODU4MTk4", "url": "https://github.com/TEAMMATES/teammates/pull/10135#pullrequestreview-422858198", "createdAt": "2020-06-02T16:34:00Z", "commit": {"oid": "a05caaaabcbc5949cee71899de421c783eccfb49"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozNDowMFrOGd6O8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozNDowMFrOGd6O8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxNTk4Ng==", "bodyText": "Nitpicking, but this is Java so this is not exactly necessary.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r434015986", "createdAt": "2020-06-02T16:34:00Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/CourseRoster.java", "diffHunk": "@@ -104,4 +118,76 @@ private void populateInstructorListByEmail(List<InstructorAttributes> instructor\n             instructorListByEmail.put(i.email, i);\n         }\n     }\n+\n+    private void buildTeamToMembersTable() {\n+        // group students by team\n+        for (StudentAttributes studentAttributes : this.getStudents()) {\n+            teamToMembersTable.computeIfAbsent(studentAttributes.getTeam(), key -> new ArrayList<>())\n+                    .add(studentAttributes);\n+        }\n+    }\n+\n+    /**\n+     * Gets info of a participant associated with an identifier in the course.\n+     *\n+     * @return an object {@link ParticipantInfo} containing the name, teamName and the sectionName.\n+     */\n+    public ParticipantInfo getInfoForIdentifier(String identifier) {\n+        String name = Const.USER_NOBODY_TEXT;\n+        String teamName = Const.USER_NOBODY_TEXT;\n+        String sectionName = Const.DEFAULT_SECTION;\n+\n+        boolean isStudent = this.getStudentForEmail(identifier) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05caaaabcbc5949cee71899de421c783eccfb49"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1711184c679cf1743602d8537791701cb92cde8e", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/1711184c679cf1743602d8537791701cb92cde8e", "committedDate": "2020-06-02T19:18:27Z", "message": "remove redundant this keyword in CourseRoster"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72afb06f59397409b0caec4d5162bdaba663a30a", "author": {"user": {"login": "xpdavid", "name": "Xiao Pu"}}, "url": "https://github.com/TEAMMATES/teammates/commit/72afb06f59397409b0caec4d5162bdaba663a30a", "committedDate": "2020-06-02T19:19:25Z", "message": "Merge branch 'master' into 9382-refactor-result-logic"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4325, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}