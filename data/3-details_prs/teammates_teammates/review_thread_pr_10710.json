{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MTg4NTA3", "number": 10710, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDoxODo0NFrOEnxekA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDoxODo0NFrOEnxekA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTQwNTYwOnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorHomePageE2ETest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDoxODo0NFrOHYiarQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDoxODo0NFrOHYiarQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5MTc1Nw==", "bodyText": "We really should extract out this kind of operation", "url": "https://github.com/TEAMMATES/teammates/pull/10710#discussion_r495491757", "createdAt": "2020-09-26T20:18:44Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorHomePageE2ETest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.pageobjects.InstructorSearchPage;\n+import teammates.e2e.util.TestProperties;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_HOME_PAGE}.\n+ */\n+public class InstructorHomePageE2ETest extends BaseE2ETestCase {\n+    private InstructorAttributes instructor;\n+    private StudentAttributes studentToEmail;\n+    private CourseAttributes course;\n+    private CourseAttributes otherCourse;\n+\n+    private FeedbackSessionAttributes feedbackSessionAwaiting;\n+    private FeedbackSessionAttributes feedbackSessionOpen;\n+    private FeedbackSessionAttributes feedbackSessionClosed;\n+    private FeedbackSessionAttributes feedbackSessionPublished;\n+    private FeedbackSessionAttributes otherCourseSession;\n+\n+    private String fileName;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorHomePageE2ETest.json\");\n+        studentToEmail = testData.students.get(\"IHomeE2eT.charlie.d.tmms@IHomeE2eT.CS2104\");\n+        if (!TestProperties.isDevServer()) {\n+            studentToEmail.email = TestProperties.TEST_STUDENT1_ACCOUNT;\n+        }\n+        removeAndRestoreDataBundle(testData);\n+        putDocuments(testData);\n+\n+        instructor = testData.instructors.get(\"IHomeE2eT.instr.CS2104\");\n+        course = testData.courses.get(\"IHomeE2eT.CS2104\");\n+        otherCourse = testData.courses.get(\"IHomeE2eT.CS1101\");\n+\n+        feedbackSessionAwaiting = testData.feedbackSessions.get(\"Second Feedback Session\");\n+        feedbackSessionOpen = testData.feedbackSessions.get(\"First Feedback Session\");\n+        feedbackSessionClosed = testData.feedbackSessions.get(\"Third Feedback Session\");\n+        feedbackSessionPublished = testData.feedbackSessions.get(\"Fourth Feedback Session\");\n+        otherCourseSession = testData.feedbackSessions.get(\"CS1101 Session\");\n+\n+        fileName = \"/\" + feedbackSessionOpen.getCourseId() + \"_\" + feedbackSessionOpen.getFeedbackSessionName()\n+                + \"_result.csv\";\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        deleteDownloadsFile(fileName);\n+    }\n+\n+    @Test\n+    public void allTests() {\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_HOME_PAGE).withUserId(instructor.googleId);\n+        InstructorHomePage homePage = loginAdminToPage(url, InstructorHomePage.class);\n+\n+        ______TS(\"search for valid student\");\n+        InstructorSearchPage searchPage = homePage.searchKeyword(studentToEmail.getName());\n+\n+        // TODO: implement more thorough tests for search results in InstructorSearchPageE2ETest\n+        searchPage.verifyNumCoursesInStudentResults(2);\n+        homePage = AppPage.getNewPageInstance(browser, url, InstructorHomePage.class);\n+\n+        ______TS(\"search for invalid student\");\n+        searchPage = homePage.searchKeyword(\"INVALID\");\n+\n+        searchPage.verifyStatusMessage(\"No results found.\");\n+        searchPage.verifyNumCoursesInStudentResults(0);\n+        homePage = AppPage.getNewPageInstance(browser, url, InstructorHomePage.class);\n+\n+        ______TS(\"verify loaded data\");\n+        homePage.sortCoursesById();\n+        int courseIndex = 1;\n+        int otherCourseIndex = 0;\n+        // by default, sessions are sorted by end date in descending order\n+        FeedbackSessionAttributes[] courseSessions = { feedbackSessionOpen, feedbackSessionAwaiting,\n+                feedbackSessionClosed, feedbackSessionPublished };\n+        FeedbackSessionAttributes[] otherCourseSessions = { otherCourseSession };\n+        // use course index instead of searching for course in table to test sorted order of courses\n+        homePage.verifyCourseTabDetails(otherCourseIndex, otherCourse, otherCourseSessions);\n+        homePage.verifyCourseTabDetails(courseIndex, course, courseSessions);\n+\n+        ______TS(\"verify response rate\");\n+        for (int i = 0; i < courseSessions.length; i++) {\n+            homePage.verifyResponseRate(courseIndex, i, getExpectedResponseRate(courseSessions[i]));\n+        }\n+\n+        ______TS(\"copy session\");\n+        int sessionIndex = 1;\n+        String newName = \"Copied Name\";\n+        FeedbackSessionAttributes copiedSession = feedbackSessionAwaiting.getCopy();\n+        copiedSession.setCourseId(otherCourse.getId());\n+        copiedSession.setFeedbackSessionName(newName);\n+        copiedSession.setCreatedTime(Instant.now());\n+        copiedSession.setTimeZone(otherCourse.getTimeZone());\n+        homePage.copySession(courseIndex, sessionIndex, otherCourse, newName);\n+\n+        homePage.verifyStatusMessage(\"The feedback session has been copied. \"\n+                + \"Please modify settings/questions as necessary.\");\n+        homePage = AppPage.getNewPageInstance(browser, url, InstructorHomePage.class);\n+        homePage.sortCoursesByName();\n+        // flip index after sorting\n+        courseIndex = 0;\n+        otherCourseIndex = 1;\n+        FeedbackSessionAttributes[] otherCourseSessionsWithCopy = { copiedSession, otherCourseSession };\n+        homePage.verifyCourseTabDetails(otherCourseIndex, otherCourse, otherCourseSessionsWithCopy);\n+        verifyPresentInDatastore(copiedSession);\n+\n+        ______TS(\"publish results\");\n+        sessionIndex = 0;\n+        feedbackSessionOpen.setResultsVisibleFromTime(Const.TIME_REPRESENTS_NOW);\n+        homePage.publishSessionResults(courseIndex, sessionIndex);\n+\n+        homePage.verifyStatusMessage(\"The feedback session has been published. \"\n+                + \"Please allow up to 1 hour for all the notification emails to be sent out.\");\n+        homePage.verifySessionDetails(courseIndex, sessionIndex, feedbackSessionOpen);\n+        verifySessionPublishedState(feedbackSessionOpen, true);\n+        verifyEmailSent(studentToEmail.getEmail(), \"TEAMMATES: Feedback session results published\"\n+                + \" [Course: \" + course.getName() + \"][Feedback Session: \"\n+                + feedbackSessionOpen.getFeedbackSessionName() + \"]\");\n+\n+        ______TS(\"send reminder email\");\n+        homePage.sendReminderEmail(courseIndex, sessionIndex, studentToEmail);\n+\n+        homePage.verifyStatusMessage(\"Reminder e-mails have been sent out to those students\"\n+                + \" and instructors. Please allow up to 1 hour for all the notification emails to be sent out.\");\n+        verifyEmailSent(studentToEmail.getEmail(), \"TEAMMATES: Feedback session reminder\"\n+                + \" [Course: \" + course.getName() + \"][Feedback Session: \"\n+                + feedbackSessionOpen.getFeedbackSessionName() + \"]\");\n+\n+        ______TS(\"resend results link\");\n+        homePage.resendResultsLink(courseIndex, sessionIndex, studentToEmail);\n+\n+        homePage.verifyStatusMessage(\"Session published notification emails have been resent\"\n+                + \" to those students and instructors. Please allow up to 1 hour for all the notification emails to be\"\n+                + \" sent out.\");\n+        verifyEmailSent(studentToEmail.getEmail(), \"TEAMMATES: Feedback session results published\"\n+                + \" [Course: \" + course.getName() + \"][Feedback Session: \"\n+                + feedbackSessionOpen.getFeedbackSessionName() + \"]\");\n+\n+        ______TS(\"unpublish results\");\n+        feedbackSessionOpen.setResultsVisibleFromTime(Const.TIME_REPRESENTS_LATER);\n+        homePage.unpublishSessionResults(courseIndex, sessionIndex);\n+\n+        homePage.verifyStatusMessage(\"The feedback session has been unpublished.\");\n+        homePage.verifySessionDetails(courseIndex, sessionIndex, feedbackSessionOpen);\n+        verifySessionPublishedState(feedbackSessionOpen, false);\n+        verifyEmailSent(studentToEmail.getEmail(), \"TEAMMATES: Feedback session results unpublished\"\n+                + \" [Course: \" + course.getName() + \"][Feedback Session: \"\n+                + feedbackSessionOpen.getFeedbackSessionName() + \"]\");\n+\n+        ______TS(\"download results\");\n+        homePage.downloadResults(courseIndex, sessionIndex);\n+        List<String> expectedContent = Arrays.asList(\"Course,IHomeE2eT.CS2104\",\n+                \"Session Name,First Feedback Session\", \"Question 1,Rate 5 other students' products\");\n+        verifyDownloadedFile(fileName, expectedContent);\n+\n+        ______TS(\"soft delete session\");\n+        copiedSession.setDeletedTime(Instant.now());\n+        homePage.deleteSession(otherCourseIndex, sessionIndex);\n+\n+        homePage.verifyStatusMessage(\"The feedback session has been deleted. \"\n+                + \"You can restore it from the 'Sessions' tab.\");\n+        homePage.sortCoursesByCreationDate();\n+        courseIndex = 1;\n+        otherCourseIndex = 0;\n+        homePage.verifyCourseTabDetails(otherCourseIndex, otherCourse, otherCourseSessions);\n+        assertNotNull(getSoftDeletedSession(copiedSession.getFeedbackSessionName(),\n+                instructor.googleId));\n+\n+        ______TS(\"archive course\");\n+        homePage.archiveCourse(courseIndex);\n+\n+        homePage.verifyStatusMessage(\"The course \" + course.getId() + \" has been archived. \"\n+                + \"You can retrieve it from the Courses page.\");\n+        homePage.verifyNumCourses(1);\n+        verifyCourseArchivedInDatastore(instructor.getGoogleId(), course);\n+\n+        ______TS(\"delete course\");\n+        otherCourseIndex = 0;\n+        homePage.deleteCourse(otherCourseIndex);\n+\n+        homePage.verifyStatusMessage(\"The course \" + otherCourse.getId() + \" has been deleted. \"\n+                + \"You can restore it from the Recycle Bin manually.\");\n+        homePage.verifyNumCourses(0);\n+        assertTrue(isCourseInRecycleBin(otherCourse.getId()));\n+    }\n+\n+    private String getExpectedResponseRate(FeedbackSessionAttributes session) {\n+        String sessionName = session.getFeedbackSessionName();\n+        boolean hasQuestion = testData.feedbackQuestions.values()\n+                .stream()\n+                .anyMatch(q -> q.feedbackSessionName.equals(sessionName));\n+\n+        if (!hasQuestion) {\n+            return \"0 / 0\";\n+        }\n+\n+        long numStudents = testData.students.values()\n+                .stream()\n+                .filter(s -> s.getCourse().equals(session.getCourseId()))\n+                .count();\n+\n+        Set<String> uniqueGivers = new HashSet<>();\n+        testData.feedbackResponses.values()\n+                .stream()\n+                .filter(r -> r.feedbackSessionName.equals(sessionName))\n+                .forEach(r -> uniqueGivers.add(r.giver));\n+        int numResponses = uniqueGivers.size();\n+\n+        return numResponses + \" / \" + numStudents;\n+    }\n+\n+    private void verifySessionPublishedState(FeedbackSessionAttributes feedbackSession, boolean state) {\n+        int retryLimit = 5;\n+        FeedbackSessionAttributes actual = getFeedbackSession(feedbackSession.getCourseId(),\n+                feedbackSession.getFeedbackSessionName());\n+        while (actual.isPublished() == state && retryLimit > 0) {\n+            retryLimit--;\n+            ThreadHelper.waitFor(1000);\n+            actual = getFeedbackSession(feedbackSession.getCourseId(),\n+                    feedbackSession.getFeedbackSessionName());\n+        }\n+        assertEquals(actual.isPublished(), state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0187b80c01ea4f60efa96410f9defc1b3db3c732"}, "originalPosition": 242}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3565, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}