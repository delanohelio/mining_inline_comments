{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MTc1NTc0", "number": 10899, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwODozMDowMFrOFKPwVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwODo0MTozMlrOFKP2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2Mjg4MjE0OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/AbstractBackDoor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwODozMDowMFrOIM7dlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMjo1NzowOVrOIM-hKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyODA1NA==", "bodyText": "Why not return a boolean here instead of throwing an exception?", "url": "https://github.com/TEAMMATES/teammates/pull/10899#discussion_r550428054", "createdAt": "2020-12-31T08:30:00Z", "author": {"login": "rrtheonlyone"}, "path": "src/test/java/teammates/test/AbstractBackDoor.java", "diffHunk": "@@ -260,11 +261,14 @@ public void removeDataBundle(DataBundle dataBundle) {\n     /**\n      * Puts searchable documents in data bundle into the datastore.\n      */\n-    public String putDocuments(DataBundle dataBundle) {\n+    public String putDocuments(DataBundle dataBundle) throws HttpRequestFailedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee0d9f1debdab3ab231e38ed85d18742b452a0d3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3MTEwOQ==", "bodyText": "To make it the same as removeAndRestoreDataBundle. The latter needs to be String-returning as there is a usage in L&P test case that requires it to be. And I do think there might be future usage of putDocuments that requires the output result, but I could be wrong.\nGoing by the YAGNI principle I could revert this back to boolean-returning, but I do think it's fine either way.", "url": "https://github.com/TEAMMATES/teammates/pull/10899#discussion_r550471109", "createdAt": "2020-12-31T12:15:55Z", "author": {"login": "wkurniawan07"}, "path": "src/test/java/teammates/test/AbstractBackDoor.java", "diffHunk": "@@ -260,11 +261,14 @@ public void removeDataBundle(DataBundle dataBundle) {\n     /**\n      * Puts searchable documents in data bundle into the datastore.\n      */\n-    public String putDocuments(DataBundle dataBundle) {\n+    public String putDocuments(DataBundle dataBundle) throws HttpRequestFailedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyODA1NA=="}, "originalCommit": {"oid": "ee0d9f1debdab3ab231e38ed85d18742b452a0d3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3ODEyMQ==", "bodyText": "Well fair enough, if it makes the codebase more consistent we can retain this approach. I believe we should however, make the happy path prominent:\n        if (putRequestOutput.responseCode != HttpStatus.SC_OK) {\n            throw new HttpRequestFailedException(\"Request failed: [\" + putRequestOutput.responseCode + \"] \"\n                + putRequestOutput.responseBody);\n        }\n        \n        return putRequestOutput.responseBody;\n\nIt helps to make the code more readable", "url": "https://github.com/TEAMMATES/teammates/pull/10899#discussion_r550478121", "createdAt": "2020-12-31T12:57:09Z", "author": {"login": "rrtheonlyone"}, "path": "src/test/java/teammates/test/AbstractBackDoor.java", "diffHunk": "@@ -260,11 +261,14 @@ public void removeDataBundle(DataBundle dataBundle) {\n     /**\n      * Puts searchable documents in data bundle into the datastore.\n      */\n-    public String putDocuments(DataBundle dataBundle) {\n+    public String putDocuments(DataBundle dataBundle) throws HttpRequestFailedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyODA1NA=="}, "originalCommit": {"oid": "ee0d9f1debdab3ab231e38ed85d18742b452a0d3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2Mjg4ODEyOnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwODozNToxMVrOIM7g6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMjoxMjowMlrOIM-DgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyODkwNA==", "bodyText": "Why is there a println here?", "url": "https://github.com/TEAMMATES/teammates/pull/10899#discussion_r550428904", "createdAt": "2020-12-31T08:35:11Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java", "diffHunk": "@@ -349,13 +350,25 @@ protected String getKeyForStudent(StudentAttributes student) {\n     }\n \n     @Override\n-    protected String doRemoveAndRestoreDataBundle(DataBundle testData) throws HttpRequestFailedException {\n-        return BACKDOOR.removeAndRestoreDataBundle(testData);\n+    protected boolean doRemoveAndRestoreDataBundle(DataBundle testData) {\n+        try {\n+            BACKDOOR.removeAndRestoreDataBundle(testData);\n+            return true;\n+        } catch (HttpRequestFailedException e) {\n+            System.out.println(TeammatesException.toStringWithStackTrace(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee0d9f1debdab3ab231e38ed85d18742b452a0d3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3MDUyOQ==", "bodyText": "You'd want to know why it fails.", "url": "https://github.com/TEAMMATES/teammates/pull/10899#discussion_r550470529", "createdAt": "2020-12-31T12:12:02Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java", "diffHunk": "@@ -349,13 +350,25 @@ protected String getKeyForStudent(StudentAttributes student) {\n     }\n \n     @Override\n-    protected String doRemoveAndRestoreDataBundle(DataBundle testData) throws HttpRequestFailedException {\n-        return BACKDOOR.removeAndRestoreDataBundle(testData);\n+    protected boolean doRemoveAndRestoreDataBundle(DataBundle testData) {\n+        try {\n+            BACKDOOR.removeAndRestoreDataBundle(testData);\n+            return true;\n+        } catch (HttpRequestFailedException e) {\n+            System.out.println(TeammatesException.toStringWithStackTrace(e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyODkwNA=="}, "originalCommit": {"oid": "ee0d9f1debdab3ab231e38ed85d18742b452a0d3"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2Mjg4ODMzOnYy", "diffSide": "RIGHT", "path": "src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwODozNToxOFrOIM7hCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwODozNToxOFrOIM7hCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyODkzNg==", "bodyText": "same here", "url": "https://github.com/TEAMMATES/teammates/pull/10899#discussion_r550428936", "createdAt": "2020-12-31T08:35:18Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java", "diffHunk": "@@ -349,13 +350,25 @@ protected String getKeyForStudent(StudentAttributes student) {\n     }\n \n     @Override\n-    protected String doRemoveAndRestoreDataBundle(DataBundle testData) throws HttpRequestFailedException {\n-        return BACKDOOR.removeAndRestoreDataBundle(testData);\n+    protected boolean doRemoveAndRestoreDataBundle(DataBundle testData) {\n+        try {\n+            BACKDOOR.removeAndRestoreDataBundle(testData);\n+            return true;\n+        } catch (HttpRequestFailedException e) {\n+            System.out.println(TeammatesException.toStringWithStackTrace(e));\n+            return false;\n+        }\n     }\n \n     @Override\n-    protected String doPutDocuments(DataBundle testData) {\n-        return BACKDOOR.putDocuments(testData);\n+    protected boolean doPutDocuments(DataBundle testData) {\n+        try {\n+            BACKDOOR.putDocuments(testData);\n+            return true;\n+        } catch (HttpRequestFailedException e) {\n+            System.out.println(TeammatesException.toStringWithStackTrace(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee0d9f1debdab3ab231e38ed85d18742b452a0d3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2Mjg5NzE5OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/BaseComponentTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwODo0MTozMlrOIM7luQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxMjoxMTo1MVrOIM-DUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMDEzNw==", "bodyText": "This is not related to this PR but catching all Exception is rarely a good choice. It is much better to catch the specific ones that you know will be thrown and handle them.", "url": "https://github.com/TEAMMATES/teammates/pull/10899#discussion_r550430137", "createdAt": "2020-12-31T08:41:32Z", "author": {"login": "rrtheonlyone"}, "path": "src/test/java/teammates/test/BaseComponentTestCase.java", "diffHunk": "@@ -115,23 +114,25 @@ protected void removeAndRestoreTypicalDataBundle() {\n     }\n \n     @Override\n-    protected String doRemoveAndRestoreDataBundle(DataBundle dataBundle) {\n+    protected boolean doRemoveAndRestoreDataBundle(DataBundle dataBundle) {\n         try {\n             logic.removeDataBundle(dataBundle);\n             logic.persistDataBundle(dataBundle);\n-            return Const.StatusCodes.BACKDOOR_STATUS_SUCCESS;\n+            return true;\n         } catch (Exception e) {\n-            return Const.StatusCodes.BACKDOOR_STATUS_FAILURE + \": \" + TeammatesException.toStringWithStackTrace(e);\n+            System.out.println(TeammatesException.toStringWithStackTrace(e));\n+            return false;\n         }\n     }\n \n     @Override\n-    protected String doPutDocuments(DataBundle dataBundle) {\n+    protected boolean doPutDocuments(DataBundle dataBundle) {\n         try {\n             logic.putDocuments(dataBundle);\n-            return Const.StatusCodes.BACKDOOR_STATUS_SUCCESS;\n+            return true;\n         } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee0d9f1debdab3ab231e38ed85d18742b452a0d3"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3MDQ4Mw==", "bodyText": "Rarely does not mean always. In this case:\n\nThis is a test only method. That on its own doesn't justify to be lazy and catch all Exceptions, but the next reason will/should.\nAny kind of failure during persisting search documents (or test data, because the methodology of catching-all-Exceptions are the same) warrant the same handling: retry or halt (depending on number of attempts), i.e. no special case needs to be handled differently. If each case is caught separately but in the end everything is handled the same, that becomes a case of \"doing it just for the sake of doing it\", which is an anti-pattern.", "url": "https://github.com/TEAMMATES/teammates/pull/10899#discussion_r550470483", "createdAt": "2020-12-31T12:11:51Z", "author": {"login": "wkurniawan07"}, "path": "src/test/java/teammates/test/BaseComponentTestCase.java", "diffHunk": "@@ -115,23 +114,25 @@ protected void removeAndRestoreTypicalDataBundle() {\n     }\n \n     @Override\n-    protected String doRemoveAndRestoreDataBundle(DataBundle dataBundle) {\n+    protected boolean doRemoveAndRestoreDataBundle(DataBundle dataBundle) {\n         try {\n             logic.removeDataBundle(dataBundle);\n             logic.persistDataBundle(dataBundle);\n-            return Const.StatusCodes.BACKDOOR_STATUS_SUCCESS;\n+            return true;\n         } catch (Exception e) {\n-            return Const.StatusCodes.BACKDOOR_STATUS_FAILURE + \": \" + TeammatesException.toStringWithStackTrace(e);\n+            System.out.println(TeammatesException.toStringWithStackTrace(e));\n+            return false;\n         }\n     }\n \n     @Override\n-    protected String doPutDocuments(DataBundle dataBundle) {\n+    protected boolean doPutDocuments(DataBundle dataBundle) {\n         try {\n             logic.putDocuments(dataBundle);\n-            return Const.StatusCodes.BACKDOOR_STATUS_SUCCESS;\n+            return true;\n         } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMDEzNw=="}, "originalCommit": {"oid": "ee0d9f1debdab3ab231e38ed85d18742b452a0d3"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3360, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}