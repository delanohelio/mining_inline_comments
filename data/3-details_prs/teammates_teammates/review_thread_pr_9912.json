{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNDM4ODg5", "number": 9912, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNDo1NzoyNVrODXu6rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToyNDo1MFrODpB29w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MjEyNTI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNDo1NzoyNVrOFdMMbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNjowNTo1NFrOFdM7NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ==", "bodyText": "There are two problems here:\n\ngetAccount accepts googleId rather than email\nIf instructor does not have account stored in the database (e.g. it is the first time he/she use TEAMMATES), account will be null. In this case, they can still modify the institute name and bypass the check.", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366152815", "createdAt": "2020-01-14T04:57:25Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "diffHunk": "@@ -162,6 +164,16 @@ public InstructorAttributes joinCourseForInstructor(String encryptedKey, String\n         return instructor;\n     }\n \n+    private void validateInstructorInstitute (InstructorAttributes instructor, String institute)\n+            throws InvalidParametersException {\n+        assert instructor != null : \"Should have been checked in validateInstructorJoinRequest() method.\";\n+        AccountAttributes account = getAccount(instructor.email);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4eda6d4aa23c5d85080308036f654403a212fab"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1OTI3OQ==", "bodyText": "Apologies for the mistake relating to the parameter for getAccount.\nIf accounts are identified by their googleId, how does the CreateAccountAction create an account (given that no google id is provided)?\nIf that class doesn't actually create an account, then how are instructors loaded in the admin home page (for admins to add instructors/generate the join link)? Unless that data is never stored and merely persisted in the live server?\nAppreciate any insight you can provide, thank you for your time!", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366159279", "createdAt": "2020-01-14T05:36:25Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "diffHunk": "@@ -162,6 +164,16 @@ public InstructorAttributes joinCourseForInstructor(String encryptedKey, String\n         return instructor;\n     }\n \n+    private void validateInstructorInstitute (InstructorAttributes instructor, String institute)\n+            throws InvalidParametersException {\n+        assert instructor != null : \"Should have been checked in validateInstructorJoinRequest() method.\";\n+        AccountAttributes account = getAccount(instructor.email);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ=="}, "originalCommit": {"oid": "d4eda6d4aa23c5d85080308036f654403a212fab"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2MTgyMg==", "bodyText": "If accounts are identified by their googleId, how does the CreateAccountAction create an account (given that no google id is provided)?\n\n:p apologies for the naming, it actually does not create an account.\n\nThe action will create everything except for Account and StudentProfile.\n\nIf that class doesn't actually create an account, then how are instructors loaded in the admin home page\n\nWhen Instructor joins course, we store its googleId in the Instructor entity (the instructor is get by the encrytedKey).", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366161822", "createdAt": "2020-01-14T05:50:02Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "diffHunk": "@@ -162,6 +164,16 @@ public InstructorAttributes joinCourseForInstructor(String encryptedKey, String\n         return instructor;\n     }\n \n+    private void validateInstructorInstitute (InstructorAttributes instructor, String institute)\n+            throws InvalidParametersException {\n+        assert instructor != null : \"Should have been checked in validateInstructorJoinRequest() method.\";\n+        AccountAttributes account = getAccount(instructor.email);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ=="}, "originalCommit": {"oid": "d4eda6d4aa23c5d85080308036f654403a212fab"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2MzM0OQ==", "bodyText": "I see, thank you so much for the information!\nI will think on this problem for a little longer. Should I close this PR and open a new one when I have a solution or just push updates to this PR?", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366163349", "createdAt": "2020-01-14T05:57:55Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "diffHunk": "@@ -162,6 +164,16 @@ public InstructorAttributes joinCourseForInstructor(String encryptedKey, String\n         return instructor;\n     }\n \n+    private void validateInstructorInstitute (InstructorAttributes instructor, String institute)\n+            throws InvalidParametersException {\n+        assert instructor != null : \"Should have been checked in validateInstructorJoinRequest() method.\";\n+        AccountAttributes account = getAccount(instructor.email);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ=="}, "originalCommit": {"oid": "d4eda6d4aa23c5d85080308036f654403a212fab"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2NDQ4Nw==", "bodyText": "Let's close it right now :)\nI think approaching the problem without changing the data schema is a bit difficult. I suggest you switch to/ or you can find your own issue to work on.", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366164487", "createdAt": "2020-01-14T06:03:56Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "diffHunk": "@@ -162,6 +164,16 @@ public InstructorAttributes joinCourseForInstructor(String encryptedKey, String\n         return instructor;\n     }\n \n+    private void validateInstructorInstitute (InstructorAttributes instructor, String institute)\n+            throws InvalidParametersException {\n+        assert instructor != null : \"Should have been checked in validateInstructorJoinRequest() method.\";\n+        AccountAttributes account = getAccount(instructor.email);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ=="}, "originalCommit": {"oid": "d4eda6d4aa23c5d85080308036f654403a212fab"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2NDc4OA==", "bodyText": "Understood, thanks again for the help :)", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r366164788", "createdAt": "2020-01-14T06:05:54Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "diffHunk": "@@ -162,6 +164,16 @@ public InstructorAttributes joinCourseForInstructor(String encryptedKey, String\n         return instructor;\n     }\n \n+    private void validateInstructorInstitute (InstructorAttributes instructor, String institute)\n+            throws InvalidParametersException {\n+        assert instructor != null : \"Should have been checked in validateInstructorJoinRequest() method.\";\n+        AccountAttributes account = getAccount(instructor.email);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjgxNQ=="}, "originalCommit": {"oid": "d4eda6d4aa23c5d85080308036f654403a212fab"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTkyMTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/logic/api/Logic.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTo1NDoxOVrOF3Y77Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoxMToxOFrOF3bhbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNDU1Nw==", "bodyText": "Assumption.assertNotNull(mac)?\nWhile we're at it, let's add the missing one for institute too.", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393624557", "createdAt": "2020-03-17T11:54:19Z", "author": {"login": "ChooJeremy"}, "path": "src/main/java/teammates/logic/api/Logic.java", "diffHunk": "@@ -361,13 +361,13 @@ public InstructorAttributes updateInstructor(InstructorAttributes.UpdateOptionsW\n      * Preconditions: <br>\n      * * All parameters are non-null.\n      */\n-    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute)\n+    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n \n         Assumption.assertNotNull(googleId);\n         Assumption.assertNotNull(encryptedKey);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decb2e0a0e7489a0d49a80cecbbe017025b79dbf"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MTIzMw==", "bodyText": "The problem is that the institute can be null? From what I gather reading the method. If the institute is null, an institute gets assigned from the course the instructor is joining. It's weird but it's what's already there :\")", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393661233", "createdAt": "2020-03-17T13:01:58Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/logic/api/Logic.java", "diffHunk": "@@ -361,13 +361,13 @@ public InstructorAttributes updateInstructor(InstructorAttributes.UpdateOptionsW\n      * Preconditions: <br>\n      * * All parameters are non-null.\n      */\n-    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute)\n+    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n \n         Assumption.assertNotNull(googleId);\n         Assumption.assertNotNull(encryptedKey);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNDU1Nw=="}, "originalCommit": {"oid": "decb2e0a0e7489a0d49a80cecbbe017025b79dbf"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2NjkyNg==", "bodyText": "Ahh, ok. Let's update the docs then, since it currently says \"All parameters are non-null.\"", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393666926", "createdAt": "2020-03-17T13:11:18Z", "author": {"login": "ChooJeremy"}, "path": "src/main/java/teammates/logic/api/Logic.java", "diffHunk": "@@ -361,13 +361,13 @@ public InstructorAttributes updateInstructor(InstructorAttributes.UpdateOptionsW\n      * Preconditions: <br>\n      * * All parameters are non-null.\n      */\n-    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute)\n+    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n \n         Assumption.assertNotNull(googleId);\n         Assumption.assertNotNull(encryptedKey);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYyNDU1Nw=="}, "originalCommit": {"oid": "decb2e0a0e7489a0d49a80cecbbe017025b79dbf"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDAwMDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/common/util/StringHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoxOToyOVrOF3ZuZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoxOToyOVrOF3ZuZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzNzQ3OQ==", "bodyText": "I'm not sure such a variable belongs in StringHelper. Since it's only used twice, let's follow the encrypt and decrypt methods and just use \"HmacSHA1\" instead.", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393637479", "createdAt": "2020-03-17T12:19:29Z", "author": {"login": "ChooJeremy"}, "path": "src/main/java/teammates/common/util/StringHelper.java", "diffHunk": "@@ -26,6 +28,7 @@\n \n public final class StringHelper {\n     private static final Logger log = Logger.getLogger();\n+    private static final String HMAC_SHA1_ALGORITHM = \"HmacSHA1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decb2e0a0e7489a0d49a80cecbbe017025b79dbf"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDAwOTIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoyMjowNVrOF3Z0Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjoyMjowNVrOF3Z0Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzODkyMw==", "bodyText": "Nothing wrong here - you throw an Invalid Parameter Exception when the hash doesn't match.", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393638923", "createdAt": "2020-03-17T12:22:05Z", "author": {"login": "ChooJeremy"}, "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "diffHunk": "@@ -115,8 +116,13 @@ public StudentAttributes joinCourseForStudent(String registrationKey, String goo\n      * Joins the user as an instructor and sets the institute if it is not null.\n      * If the given instructor is null, the instructor is given the institute of an existing instructor of the same course.\n      */\n-    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute)\n+    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n+\n+        if (institute != null && !StringHelper.isCorrectSignature(institute, mac)) {\n+            throw new InvalidParametersException(\"Institute authentication failed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decb2e0a0e7489a0d49a80cecbbe017025b79dbf"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDA3MjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo0MDo0MlrOF3ab0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo0MDo0MlrOF3ab0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0OTEwNA==", "bodyText": "validateInstructorJoinRequest is probably a more appropriate location to do the check.", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r393649104", "createdAt": "2020-03-17T12:40:42Z", "author": {"login": "ChooJeremy"}, "path": "src/main/java/teammates/logic/core/AccountsLogic.java", "diffHunk": "@@ -115,8 +116,13 @@ public StudentAttributes joinCourseForStudent(String registrationKey, String goo\n      * Joins the user as an instructor and sets the institute if it is not null.\n      * If the given instructor is null, the instructor is given the institute of an existing instructor of the same course.\n      */\n-    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute)\n+    public InstructorAttributes joinCourseForInstructor(String encryptedKey, String googleId, String institute, String mac)\n             throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {\n+\n+        if (institute != null && !StringHelper.isCorrectSignature(institute, mac)) {\n+            throw new InvalidParametersException(\"Institute authentication failed.\");\n+        }\n+\n         InstructorAttributes instructor = validateInstructorJoinRequest(encryptedKey, googleId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decb2e0a0e7489a0d49a80cecbbe017025b79dbf"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mjg3MDQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTowMjo0OFrOF32cjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo1NDoxNlrOF33K8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwODA0NA==", "bodyText": "Have you done manual testing to ensure that this is displayed correctly?", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394108044", "createdAt": "2020-03-18T05:02:48Z", "author": {"login": "ChooJeremy"}, "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "diffHunk": "@@ -49,6 +50,13 @@ private JsonResult getInstructorJoinStatus(String regkey) {\n         if (instructor == null) {\n             return new JsonResult(\"No instructor with given registration key: \" + regkey, HttpStatus.SC_NOT_FOUND);\n         }\n+\n+        String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);\n+        String mac = getRequestParamValue(Const.ParamsNames.INSTITUTION_MAC);\n+        if (institute != null && !StringHelper.isCorrectSignature(institute, mac)) {\n+            return new JsonResult(\"Error in URL validation. Please re-check the URL.\", HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0efb2b9b8cd28c03593fb8a5b3b40f5709a68"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExOTkyMw==", "bodyText": "After manual testing, this does not seem to work as intended. Additionally, neither does the institute validation, the authentication fails even with the correct signature in the url params.\nAll back-end checks/tests indicate that it should be working so I believe there might be some disconnect with the front-end. I will investigate this further and update once the implementation works properly.\nUpdate: The front-end does not forward the request as is but instead repackages the params, meaning that the mac gets left out. I will make the necessary changes including the initial front-end validation", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394119923", "createdAt": "2020-03-18T05:54:16Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "diffHunk": "@@ -49,6 +50,13 @@ private JsonResult getInstructorJoinStatus(String regkey) {\n         if (instructor == null) {\n             return new JsonResult(\"No instructor with given registration key: \" + regkey, HttpStatus.SC_NOT_FOUND);\n         }\n+\n+        String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);\n+        String mac = getRequestParamValue(Const.ParamsNames.INSTITUTION_MAC);\n+        if (institute != null && !StringHelper.isCorrectSignature(institute, mac)) {\n+            return new JsonResult(\"Error in URL validation. Please re-check the URL.\", HttpStatus.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwODA0NA=="}, "originalCommit": {"oid": "70f0efb2b9b8cd28c03593fb8a5b3b40f5709a68"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzM4ODg5OnYy", "diffSide": "LEFT", "path": "src/main/java/teammates/logic/api/Logic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwODo1NzozNVrOF37ejA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwODo1NzozNVrOF37ejA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5MDQ3Ng==", "bodyText": "Why not: encryptedKey and googleId are non-null?", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394190476", "createdAt": "2020-03-18T08:57:35Z", "author": {"login": "ChooJeremy"}, "path": "src/main/java/teammates/logic/api/Logic.java", "diffHunk": "@@ -357,17 +357,15 @@ public InstructorAttributes updateInstructor(InstructorAttributes.UpdateOptionsW\n \n     /**\n      * Make the instructor join the course, i.e. associate the Google ID to the instructor.<br>\n-     * Create an account for the instructor if there is no account exist for him.\n-     * Preconditions: <br>\n-     * * All parameters are non-null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de04519202f5186b7f44a0291cfb9cb21e51af2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzQzNzM5OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/logic/AccountsLogicTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxMTozMFrOF378-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxMTozMFrOF378-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5ODI2NA==", "bodyText": "You should verify that the account is indeed not in the database.", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394198264", "createdAt": "2020-03-18T09:11:30Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/logic/AccountsLogicTest.java", "diffHunk": "@@ -353,24 +354,81 @@ public void testJoinCourseForInstructor() throws Exception {\n         joinedInstructor = instructorsLogic.getInstructorForEmail(instructor.courseId, nonInstrAccount.email);\n         InstructorAttributes[] finalInstructor = new InstructorAttributes[] { joinedInstructor };\n         eaee = assertThrows(EntityAlreadyExistsException.class,\n-                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], finalInstructor[0].googleId, null));\n+                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], finalInstructor[0].googleId, null, null));\n         assertEquals(\"Instructor has already joined course\", eaee.getMessage());\n \n         ______TS(\"failure: key belongs to a different user\");\n \n         eaee = assertThrows(EntityAlreadyExistsException.class,\n-                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], \"otherUserId\", null));\n+                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], \"otherUserId\", null, null));\n         assertEquals(\"Instructor has already joined course\", eaee.getMessage());\n \n         ______TS(\"failure: invalid key\");\n         String invalidKey = StringHelper.encrypt(\"invalidKey\");\n \n         EntityDoesNotExistException ednee = assertThrows(EntityDoesNotExistException.class,\n-                () -> accountsLogic.joinCourseForInstructor(invalidKey, loggedInGoogleId, null));\n+                () -> accountsLogic.joinCourseForInstructor(invalidKey, loggedInGoogleId, null, null));\n         assertEquals(\"No instructor with given registration key: \" + invalidKey,\n                 ednee.getMessage());\n     }\n \n+    @Test\n+    public void testJoinCourseForInstructor_validInstitute_shouldPass()\n+            throws EntityDoesNotExistException, InvalidParametersException, EntityAlreadyExistsException {\n+        InstructorAttributes instructor = dataBundle.instructors.get(\"instructorNotYetJoinCourse\");\n+        String loggedInGoogleId = \"AccLogicT.instr.id\";\n+        String institute = \"National University of Singapore\";\n+        String[] encryptedKey = new String[] {\n+                instructorsLogic.getEncryptedKeyForInstructor(instructor.courseId, instructor.email),\n+        };\n+\n+        ______TS(\"success: instructor with institute joined and new account created\");\n+\n+        accountsLogic.joinCourseForInstructor(encryptedKey[0], loggedInGoogleId,\n+                institute, StringHelper.generateSignature(institute));\n+\n+        InstructorAttributes joinedInstructor =\n+                instructorsLogic.getInstructorForEmail(instructor.courseId, instructor.email);\n+        assertEquals(loggedInGoogleId, joinedInstructor.googleId);\n+\n+        AccountAttributes accountCreated = accountsLogic.getAccount(loggedInGoogleId);\n+        assertNotNull(accountCreated);\n+    }\n+\n+    @Test\n+    public void testJoinCourseForInstructor_invalidInstituteMac_shouldFail() throws EntityDoesNotExistException {\n+        InstructorAttributes instructor = dataBundle.instructors.get(\"instructorNotYetJoinCourse\");\n+        String loggedInGoogleId = \"AccLogicT.instr.id\";\n+        String institute = \"National University of Singapore\";\n+        String[] encryptedKey = new String[] {\n+                instructorsLogic.getEncryptedKeyForInstructor(instructor.courseId, instructor.email),\n+        };\n+\n+        ______TS(\"failure: institute signature does not match institute provided\");\n+\n+        InvalidParametersException ipe = assertThrows(InvalidParametersException.class,\n+                () -> accountsLogic.joinCourseForInstructor(\n+                        encryptedKey[0], loggedInGoogleId, institute, StringHelper.generateSignature(\"NUS\")));\n+        assertEquals(\"Institute authentication failed.\", ipe.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de04519202f5186b7f44a0291cfb9cb21e51af2"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzQzODkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/logic/AccountsLogicTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxMTo1M1rOF3796w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxMTo1M1rOF3796w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5ODUwNw==", "bodyText": "Same here", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394198507", "createdAt": "2020-03-18T09:11:53Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/logic/AccountsLogicTest.java", "diffHunk": "@@ -353,24 +354,81 @@ public void testJoinCourseForInstructor() throws Exception {\n         joinedInstructor = instructorsLogic.getInstructorForEmail(instructor.courseId, nonInstrAccount.email);\n         InstructorAttributes[] finalInstructor = new InstructorAttributes[] { joinedInstructor };\n         eaee = assertThrows(EntityAlreadyExistsException.class,\n-                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], finalInstructor[0].googleId, null));\n+                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], finalInstructor[0].googleId, null, null));\n         assertEquals(\"Instructor has already joined course\", eaee.getMessage());\n \n         ______TS(\"failure: key belongs to a different user\");\n \n         eaee = assertThrows(EntityAlreadyExistsException.class,\n-                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], \"otherUserId\", null));\n+                () -> accountsLogic.joinCourseForInstructor(encryptedKey[0], \"otherUserId\", null, null));\n         assertEquals(\"Instructor has already joined course\", eaee.getMessage());\n \n         ______TS(\"failure: invalid key\");\n         String invalidKey = StringHelper.encrypt(\"invalidKey\");\n \n         EntityDoesNotExistException ednee = assertThrows(EntityDoesNotExistException.class,\n-                () -> accountsLogic.joinCourseForInstructor(invalidKey, loggedInGoogleId, null));\n+                () -> accountsLogic.joinCourseForInstructor(invalidKey, loggedInGoogleId, null, null));\n         assertEquals(\"No instructor with given registration key: \" + invalidKey,\n                 ednee.getMessage());\n     }\n \n+    @Test\n+    public void testJoinCourseForInstructor_validInstitute_shouldPass()\n+            throws EntityDoesNotExistException, InvalidParametersException, EntityAlreadyExistsException {\n+        InstructorAttributes instructor = dataBundle.instructors.get(\"instructorNotYetJoinCourse\");\n+        String loggedInGoogleId = \"AccLogicT.instr.id\";\n+        String institute = \"National University of Singapore\";\n+        String[] encryptedKey = new String[] {\n+                instructorsLogic.getEncryptedKeyForInstructor(instructor.courseId, instructor.email),\n+        };\n+\n+        ______TS(\"success: instructor with institute joined and new account created\");\n+\n+        accountsLogic.joinCourseForInstructor(encryptedKey[0], loggedInGoogleId,\n+                institute, StringHelper.generateSignature(institute));\n+\n+        InstructorAttributes joinedInstructor =\n+                instructorsLogic.getInstructorForEmail(instructor.courseId, instructor.email);\n+        assertEquals(loggedInGoogleId, joinedInstructor.googleId);\n+\n+        AccountAttributes accountCreated = accountsLogic.getAccount(loggedInGoogleId);\n+        assertNotNull(accountCreated);\n+    }\n+\n+    @Test\n+    public void testJoinCourseForInstructor_invalidInstituteMac_shouldFail() throws EntityDoesNotExistException {\n+        InstructorAttributes instructor = dataBundle.instructors.get(\"instructorNotYetJoinCourse\");\n+        String loggedInGoogleId = \"AccLogicT.instr.id\";\n+        String institute = \"National University of Singapore\";\n+        String[] encryptedKey = new String[] {\n+                instructorsLogic.getEncryptedKeyForInstructor(instructor.courseId, instructor.email),\n+        };\n+\n+        ______TS(\"failure: institute signature does not match institute provided\");\n+\n+        InvalidParametersException ipe = assertThrows(InvalidParametersException.class,\n+                () -> accountsLogic.joinCourseForInstructor(\n+                        encryptedKey[0], loggedInGoogleId, institute, StringHelper.generateSignature(\"NUS\")));\n+        assertEquals(\"Institute authentication failed.\", ipe.getMessage());\n+    }\n+\n+    @Test\n+    public void testJoinCourseForInstructor_missingInstituteMac_shouldFail() throws EntityDoesNotExistException {\n+        InstructorAttributes instructor = dataBundle.instructors.get(\"instructorNotYetJoinCourse\");\n+        String loggedInGoogleId = \"AccLogicT.instr.id\";\n+        String institute = \"National University of Singapore\";\n+        String[] encryptedKey = new String[] {\n+                instructorsLogic.getEncryptedKeyForInstructor(instructor.courseId, instructor.email),\n+        };\n+\n+        ______TS(\"failure: institute signature missing\");\n+\n+        InvalidParametersException ipe = assertThrows(InvalidParametersException.class,\n+                () -> accountsLogic.joinCourseForInstructor(\n+                        encryptedKey[0], loggedInGoogleId, institute, null));\n+        assertEquals(\"Institute authentication failed.\", ipe.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de04519202f5186b7f44a0291cfb9cb21e51af2"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzQ1MTAzOnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/util/StringHelperTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxNToxNVrOF38Fzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxNToxNVrOF38Fzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMDUyNg==", "bodyText": "In addition to verify determinism, we should verify if it is correct. (i.e. the returned value is indeed the expected hash of a certain String. You can take a look at the encrypt test methods.", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394200526", "createdAt": "2020-03-18T09:15:15Z", "author": {"login": "ChooJeremy"}, "path": "src/test/java/teammates/test/cases/util/StringHelperTest.java", "diffHunk": "@@ -412,4 +412,13 @@ public void testExtractContentFromQuotedString() {\n         assertEquals(StringHelper.extractContentFromQuotedString(null), null);\n         assertEquals(StringHelper.extractContentFromQuotedString(\"\"), \"\");\n     }\n+\n+    @Test\n+    public void testSignatureGenerationDeterministic() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de04519202f5186b7f44a0291cfb9cb21e51af2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzQ4NjYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToyNDo1MFrOF38cAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNTozNToxMFrOF4gqLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ==", "bodyText": "Why we need to verify MAC for GET action?", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394206211", "createdAt": "2020-03-18T09:24:50Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "diffHunk": "@@ -49,6 +50,13 @@ private JsonResult getInstructorJoinStatus(String regkey) {\n         if (instructor == null) {\n             return new JsonResult(\"No instructor with given registration key: \" + regkey, HttpStatus.SC_NOT_FOUND);\n         }\n+\n+        String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de04519202f5186b7f44a0291cfb9cb21e51af2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwOTc1OA==", "bodyText": "If we don't then everything seems normal to the user up till the point in which he presses \"Join course\", then he gets thrown an \"Internal Server error\" message and is told to write a report to the teammates dev team. IMO it would be better to show that the MAC was invalid at the point in which the \"Join course\" button is available and thus let the user know that they should re-check the URL.", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394209758", "createdAt": "2020-03-18T09:30:32Z", "author": {"login": "ChooJeremy"}, "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "diffHunk": "@@ -49,6 +50,13 @@ private JsonResult getInstructorJoinStatus(String regkey) {\n         if (instructor == null) {\n             return new JsonResult(\"No instructor with given registration key: \" + regkey, HttpStatus.SC_NOT_FOUND);\n         }\n+\n+        String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ=="}, "originalCommit": {"oid": "3de04519202f5186b7f44a0291cfb9cb21e51af2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxMzA5Mw==", "bodyText": "If we don't then everything seems normal to the user up till the point in which he presses \"Join course\"\n\nIn the normal workflow, I don't think user will encounter the situation unless he intends to modify the URL.\n\nhe gets thrown an \"Internal Server error\" message\n\nThe problem looks like is in the frontend where we should handle the situation better. e.g. more helpful message like \"do you copy the full URL in the join email?\"\nThe MAC makes sure data integrity is not compromised when creating the account. Unlike joinKey, it has nothing to do with the GET operation and that is why I put the comment.", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394213093", "createdAt": "2020-03-18T09:36:08Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "diffHunk": "@@ -49,6 +50,13 @@ private JsonResult getInstructorJoinStatus(String regkey) {\n         if (instructor == null) {\n             return new JsonResult(\"No instructor with given registration key: \" + regkey, HttpStatus.SC_NOT_FOUND);\n         }\n+\n+        String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ=="}, "originalCommit": {"oid": "3de04519202f5186b7f44a0291cfb9cb21e51af2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0NzMwNQ==", "bodyText": "I agree it's not great in terms of RESTful API convention - GET should only be retrieving data and not verifying that checksums match.\nSure, we can roll back the change (so the error only appears after the user clicks on \"Join Course\".) The only issues I see is that (1) the user actually needs to click on Join Course (I would prefer if the error message is shown before the user has to click the button), though I suppose this may not be worth breaking RESTful convention and (2) if we replace the error message with say, a toast, then there isn't a form available to report the issue to the dev team. I'd prefer to keep that form, since it gives them an avenue to report if it really ends up being a problem within teammates.", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394247305", "createdAt": "2020-03-18T10:33:05Z", "author": {"login": "ChooJeremy"}, "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "diffHunk": "@@ -49,6 +50,13 @@ private JsonResult getInstructorJoinStatus(String regkey) {\n         if (instructor == null) {\n             return new JsonResult(\"No instructor with given registration key: \" + regkey, HttpStatus.SC_NOT_FOUND);\n         }\n+\n+        String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ=="}, "originalCommit": {"oid": "3de04519202f5186b7f44a0291cfb9cb21e51af2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2OTk3Mw==", "bodyText": "I'm surmising from the discussion that we'll be adopting the following workflow:\n\nUser navigates to join link\nFront-end validation for presence of institute signature\n2a. If signature missing, display front-end error message\nUser clicks on \"Register for course\"\nBack-end validation of signature\n4a. If signature wrong, display internal server error message\n\nError message in (2a) to display a message to the instructor to request for a new join link, as the only non-malicious use-case would be instructors who have received their join link before this feature was implemented.\nInternal server error message in (4a) is the ErrorReportComponent modal to allow for error reporting, considering that in the non-malicious use-case, this should not happen.\nDo let me know if there are any other considerations I might have missed. Thank you!", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394269973", "createdAt": "2020-03-18T11:13:33Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "diffHunk": "@@ -49,6 +50,13 @@ private JsonResult getInstructorJoinStatus(String regkey) {\n         if (instructor == null) {\n             return new JsonResult(\"No instructor with given registration key: \" + regkey, HttpStatus.SC_NOT_FOUND);\n         }\n+\n+        String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ=="}, "originalCommit": {"oid": "3de04519202f5186b7f44a0291cfb9cb21e51af2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5OTY2Mg==", "bodyText": "Looks good", "url": "https://github.com/TEAMMATES/teammates/pull/9912#discussion_r394799662", "createdAt": "2020-03-19T05:35:10Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/action/GetCourseJoinStatusAction.java", "diffHunk": "@@ -49,6 +50,13 @@ private JsonResult getInstructorJoinStatus(String regkey) {\n         if (instructor == null) {\n             return new JsonResult(\"No instructor with given registration key: \" + regkey, HttpStatus.SC_NOT_FOUND);\n         }\n+\n+        String institute = getRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjIxMQ=="}, "originalCommit": {"oid": "3de04519202f5186b7f44a0291cfb9cb21e51af2"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4019, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}