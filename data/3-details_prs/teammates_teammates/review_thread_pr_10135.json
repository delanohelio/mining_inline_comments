{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODczNTYx", "number": 10135, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMTowOVrOEAw-1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozNDowMFrOEB050g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM3OTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/common/datatransfer/CourseRoster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMToxMFrOGcPxkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMToxMFrOGcPxkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTc2MA==", "bodyText": "Apply SLAP principle here: extract this block to a private method, no matter how simple it is.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432271760", "createdAt": "2020-05-29T06:01:10Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/CourseRoster.java", "diffHunk": "@@ -15,12 +16,24 @@\n  */\n public class CourseRoster {\n \n-    Map<String, StudentAttributes> studentListByEmail = new HashMap<>();\n-    Map<String, InstructorAttributes> instructorListByEmail = new HashMap<>();\n+    // The name for each index of the result returned by {@link CourseRoster#getInfoForIdentifier(String)}\n+    public static final int INFO_NAME = 0;\n+    public static final int INFO_TEAM_NAME = 1;\n+    public static final int INFO_SECTION_NAME = 2;\n+\n+    private final Map<String, StudentAttributes> studentListByEmail = new HashMap<>();\n+    private final Map<String, InstructorAttributes> instructorListByEmail = new HashMap<>();\n+    private final Map<String, List<StudentAttributes>> teamToMembersTable = new HashMap<>();\n \n     public CourseRoster(List<StudentAttributes> students, List<InstructorAttributes> instructors) {\n         populateStudentListByEmail(students);\n         populateInstructorListByEmail(instructors);\n+\n+        // group students by team\n+        for (StudentAttributes studentAttributes : this.getStudents()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM4MTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/common/datatransfer/CourseRoster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMjowMFrOGcPynA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMjowMFrOGcPynA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MjAyOA==", "bodyText": "While this works, we can just define another small data structure with 3 fields for this. That way we also don't need the INFO_* variables.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432272028", "createdAt": "2020-05-29T06:02:00Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/CourseRoster.java", "diffHunk": "@@ -104,4 +128,42 @@ private void populateInstructorListByEmail(List<InstructorAttributes> instructor\n             instructorListByEmail.put(i.email, i);\n         }\n     }\n+\n+    /**\n+     * Gets the info of a participant associated with the identifier in the course.\n+     *\n+     * @see CourseRoster#INFO_NAME\n+     * @see CourseRoster#INFO_TEAM_NAME\n+     * @see CourseRoster#INFO_SECTION_NAME\n+     */\n+    public String[] getInfoForIdentifier(String identifier) {\n+        String name = Const.USER_NOBODY_TEXT;\n+        String teamName = Const.USER_NOBODY_TEXT;\n+        String sectionName = Const.DEFAULT_SECTION;\n+\n+        boolean isStudent = this.getStudentForEmail(identifier) != null;\n+        boolean isInstructor = this.getInstructorForEmail(identifier) != null;\n+        boolean isTeam = this.getTeamToMembersTable().containsKey(identifier);\n+        if (isStudent) {\n+            StudentAttributes student = this.getStudentForEmail(identifier);\n+\n+            name = student.getName();\n+            teamName = student.getTeam();\n+            sectionName = student.getSection();\n+        } else if (isInstructor) {\n+            InstructorAttributes instructor = this.getInstructorForEmail(identifier);\n+\n+            name = instructor.getName();\n+            teamName = Const.USER_TEAM_FOR_INSTRUCTOR;\n+            sectionName = Const.DEFAULT_SECTION;\n+        } else if (isTeam) {\n+            StudentAttributes teamMember = this.getTeamToMembersTable().get(identifier).iterator().next();\n+\n+            name = identifier;\n+            teamName = identifier;\n+            sectionName = teamMember.getSection();\n+        }\n+\n+        return new String[] { name, teamName, sectionName };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM4NzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/logic/api/Logic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowNTowMFrOGcP2Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjozNzoxMVrOGcQeBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3Mjk0Mw==", "bodyText": "We don't normally put @Nullable annotation at this layer. What's the advantage here?", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432272943", "createdAt": "2020-05-29T06:05:00Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/logic/api/Logic.java", "diffHunk": "@@ -1678,83 +1434,20 @@ public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorToSect\n     }\n \n     /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session from a given question number\n-     * This will not retrieve the list of comments for this question\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n-     */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromQuestion(\n-            String feedbackSessionName, String courseId, String userEmail, String questionId)\n-            throws EntityDoesNotExistException {\n-\n-        Assumption.assertNotNull(feedbackSessionName);\n-        Assumption.assertNotNull(courseId);\n-        Assumption.assertNotNull(userEmail);\n-\n-        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorFromQuestion(feedbackSessionName, courseId,\n-                                                                                        userEmail, questionId);\n-    }\n-\n-    /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session from a given question number\n-     * in a given section.\n-     * This will not retrieve the list of comments for this question\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n-     */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromQuestionInSection(\n-                                    String feedbackSessionName, String courseId, String userEmail,\n-                                    String questionId, String selectedSection, SectionDetail selectedSectionDetail)\n-            throws EntityDoesNotExistException {\n-\n-        Assumption.assertNotNull(feedbackSessionName);\n-        Assumption.assertNotNull(courseId);\n-        Assumption.assertNotNull(userEmail);\n-        Assumption.assertNotNull(selectedSection);\n-        Assumption.assertNotNull(selectedSectionDetail);\n-\n-        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorFromQuestionInSection(\n-                                            feedbackSessionName, courseId, userEmail,\n-                                            questionId, selectedSection, selectedSectionDetail);\n-    }\n-\n-    /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session.\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n-     */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructor(\n-            String feedbackSessionName, String courseId, String userEmail)\n-            throws EntityDoesNotExistException {\n-\n-        Assumption.assertNotNull(feedbackSessionName);\n-        Assumption.assertNotNull(courseId);\n-        Assumption.assertNotNull(userEmail);\n-\n-        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructor(feedbackSessionName, courseId, userEmail);\n-    }\n-\n-    /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session in a specific section.\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n+     * Get the session result for a feedback session.\n+     *\n+     * @see FeedbackSessionsLogic#getSessionResultsForUser(String, String, String, UserRole, String, String)\n      */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorInSection(String feedbackSessionName,\n-            String courseId, String userEmail, String section, SectionDetail sectionDetail)\n-            throws EntityDoesNotExistException {\n-\n+    public SessionResultsBundle getSessionResultsForUser(\n+            String feedbackSessionName, String courseId, String userEmail, UserRole role,\n+            @Nullable String questionId, @Nullable String section) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 420}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MzE0Mw==", "bodyText": "More explicitly indicates that the variables can be null.\nFor consistency with the code base, I can also put them in the Javadoc.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432283143", "createdAt": "2020-05-29T06:37:11Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/logic/api/Logic.java", "diffHunk": "@@ -1678,83 +1434,20 @@ public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorToSect\n     }\n \n     /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session from a given question number\n-     * This will not retrieve the list of comments for this question\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n-     */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromQuestion(\n-            String feedbackSessionName, String courseId, String userEmail, String questionId)\n-            throws EntityDoesNotExistException {\n-\n-        Assumption.assertNotNull(feedbackSessionName);\n-        Assumption.assertNotNull(courseId);\n-        Assumption.assertNotNull(userEmail);\n-\n-        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorFromQuestion(feedbackSessionName, courseId,\n-                                                                                        userEmail, questionId);\n-    }\n-\n-    /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session from a given question number\n-     * in a given section.\n-     * This will not retrieve the list of comments for this question\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n-     */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorFromQuestionInSection(\n-                                    String feedbackSessionName, String courseId, String userEmail,\n-                                    String questionId, String selectedSection, SectionDetail selectedSectionDetail)\n-            throws EntityDoesNotExistException {\n-\n-        Assumption.assertNotNull(feedbackSessionName);\n-        Assumption.assertNotNull(courseId);\n-        Assumption.assertNotNull(userEmail);\n-        Assumption.assertNotNull(selectedSection);\n-        Assumption.assertNotNull(selectedSectionDetail);\n-\n-        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructorFromQuestionInSection(\n-                                            feedbackSessionName, courseId, userEmail,\n-                                            questionId, selectedSection, selectedSectionDetail);\n-    }\n-\n-    /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session.\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n-     */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructor(\n-            String feedbackSessionName, String courseId, String userEmail)\n-            throws EntityDoesNotExistException {\n-\n-        Assumption.assertNotNull(feedbackSessionName);\n-        Assumption.assertNotNull(courseId);\n-        Assumption.assertNotNull(userEmail);\n-\n-        return feedbackSessionsLogic.getFeedbackSessionResultsForInstructor(feedbackSessionName, courseId, userEmail);\n-    }\n-\n-    /**\n-     * Gets a question+response bundle for questions with responses that\n-     * is visible to the instructor for a feedback session in a specific section.\n-     * Preconditions: <br>\n-     * * All parameters are non-null.\n+     * Get the session result for a feedback session.\n+     *\n+     * @see FeedbackSessionsLogic#getSessionResultsForUser(String, String, String, UserRole, String, String)\n      */\n-    public FeedbackSessionResultsBundle getFeedbackSessionResultsForInstructorInSection(String feedbackSessionName,\n-            String courseId, String userEmail, String section, SectionDetail sectionDetail)\n-            throws EntityDoesNotExistException {\n-\n+    public SessionResultsBundle getSessionResultsForUser(\n+            String feedbackSessionName, String courseId, String userEmail, UserRole role,\n+            @Nullable String questionId, @Nullable String section) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3Mjk0Mw=="}, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 420}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM5Nzg2OnYy", "diffSide": "LEFT", "path": "src/main/java/teammates/ui/webapi/action/ActionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoxMDo0NlrOGcP8gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMToxNTo1NlrOGcsTfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3NDU2Mw==", "bodyText": "Why is this removed?\nEdit: Just read the explanation. While it may be true, I don't suggest doing it here in this PR until we know exactly how to do it in the front-end.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432274563", "createdAt": "2020-05-29T06:10:46Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/ui/webapi/action/ActionFactory.java", "diffHunk": "@@ -63,7 +63,6 @@\n         map(ResourceURIs.RESPONSE_COMMENT, PUT, UpdateFeedbackResponseCommentAction.class);\n         map(ResourceURIs.RESPONSE_COMMENT, DELETE, DeleteFeedbackResponseCommentAction.class);\n         map(ResourceURIs.RESULT, GET, GetSessionResultsAction.class);\n-        map(ResourceURIs.RESULT_CSV, GET, GetSessionResultsAsCsvAction.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczOTE5Ng==", "bodyText": "Here are my investigations after trying to bring back the function:\nI think we only have two options here because of the couplings:\nKeep the second commit:\n\nNeed to rewrite the CSV generation in the backend.\nOr write a new function in the frontend for CSV generation.\n\nPersonally, I think the CSV generation should be in the frontend where we care about the data presentation (Actually the current refactor is targeted to make this happened in the frontend to minimized the code duplication (e.g., missing response generation)).\nI have done some initial attempts and I would say it requires the same efforts to do either. After all, the CSV view is just a non-interactive version of the per question view in the frontend.\nRemove the second commit:\n\nThis will always work as commits are independent.\nWe will remove other functions later. Not sure when though.\n\nPersonally, I would like to be ambitious and do it in frontend with the interns :P", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432739196", "createdAt": "2020-05-29T21:15:56Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/action/ActionFactory.java", "diffHunk": "@@ -63,7 +63,6 @@\n         map(ResourceURIs.RESPONSE_COMMENT, PUT, UpdateFeedbackResponseCommentAction.class);\n         map(ResourceURIs.RESPONSE_COMMENT, DELETE, DeleteFeedbackResponseCommentAction.class);\n         map(ResourceURIs.RESULT, GET, GetSessionResultsAction.class);\n-        map(ResourceURIs.RESULT_CSV, GET, GetSessionResultsAsCsvAction.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3NDU2Mw=="}, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjQwNjkzOnYy", "diffSide": "LEFT", "path": "src/test/java/teammates/test/driver/GaeSimulation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoxNToyOFrOGcQB_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoxNToyOFrOGcQB_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3NTk2NA==", "bodyText": "You can remove this method and the field sc of this class as well. Also you can remove the httpunit test dependency in build.gradle.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432275964", "createdAt": "2020-05-29T06:15:28Z", "author": {"login": "wkurniawan07"}, "path": "src/test/java/teammates/test/driver/GaeSimulation.java", "diffHunk": "@@ -183,24 +182,6 @@ public void loginAsStudentInstructor(String userId) {\n         assertFalse(user.isAdmin);\n     }\n \n-    /**\n-     * Returns an {@link teammates.ui.controller.Action} object that matches the parameters given.\n-     *\n-     * @param parameters Parameters that appear in a HttpServletRequest received by the app.\n-     */\n-    public teammates.ui.controller.Action getLegacyActionObject(String uri, String... parameters) {\n-        InvocationContext ic = invokeWebRequest(uri, parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mjk4MDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/common/datatransfer/SessionResultsBundle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTozMjozNlrOGcVqxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTozMjozNlrOGcVqxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2ODMyNQ==", "bodyText": "Probably we can be consistent with the use of this. here?", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432368325", "createdAt": "2020-05-29T09:32:36Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/common/datatransfer/SessionResultsBundle.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package teammates.common.datatransfer;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.util.Const;\n+import teammates.common.util.StringHelper;\n+\n+/**\n+ * Represents detailed results for a feedback session.\n+ */\n+public class SessionResultsBundle {\n+\n+    private final FeedbackSessionAttributes feedbackSession;\n+    private final Map<String, FeedbackQuestionAttributes> questionsMap;\n+    private final Map<String, List<FeedbackResponseAttributes>> questionResponseMap;\n+    private final Map<String, List<FeedbackResponseCommentAttributes>> responseCommentsMap;\n+    private final Map<String, boolean[]> responseVisibilityTable;\n+    private final Map<Long, boolean[]> commentVisibilityTable;\n+    private final CourseRoster roster;\n+\n+    public SessionResultsBundle(FeedbackSessionAttributes feedbackSession,\n+                                Map<String, FeedbackQuestionAttributes> questionsMap,\n+                                List<FeedbackResponseAttributes> responses,\n+                                Map<String, boolean[]> responseVisibilityTable,\n+                                Map<String, List<FeedbackResponseCommentAttributes>> responseCommentsMap,\n+                                Map<Long, boolean[]> commentVisibilityTable,\n+                                CourseRoster roster) {\n+\n+        this.feedbackSession = feedbackSession;\n+        this.questionsMap = questionsMap;\n+        this.responseCommentsMap = responseCommentsMap;\n+        this.responseVisibilityTable = responseVisibilityTable;\n+        this.commentVisibilityTable = commentVisibilityTable;\n+        this.roster = roster;\n+\n+        // build question to response map\n+        questionResponseMap = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzAwMDUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/common/datatransfer/SessionResultsBundle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTozODo1M1rOGcV3oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTozODo1M1rOGcV3oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MTYxNw==", "bodyText": "How about refactor out a private builder method for questionResponseMap?", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432371617", "createdAt": "2020-05-29T09:38:53Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/common/datatransfer/SessionResultsBundle.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package teammates.common.datatransfer;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.util.Const;\n+import teammates.common.util.StringHelper;\n+\n+/**\n+ * Represents detailed results for a feedback session.\n+ */\n+public class SessionResultsBundle {\n+\n+    private final FeedbackSessionAttributes feedbackSession;\n+    private final Map<String, FeedbackQuestionAttributes> questionsMap;\n+    private final Map<String, List<FeedbackResponseAttributes>> questionResponseMap;\n+    private final Map<String, List<FeedbackResponseCommentAttributes>> responseCommentsMap;\n+    private final Map<String, boolean[]> responseVisibilityTable;\n+    private final Map<Long, boolean[]> commentVisibilityTable;\n+    private final CourseRoster roster;\n+\n+    public SessionResultsBundle(FeedbackSessionAttributes feedbackSession,\n+                                Map<String, FeedbackQuestionAttributes> questionsMap,\n+                                List<FeedbackResponseAttributes> responses,\n+                                Map<String, boolean[]> responseVisibilityTable,\n+                                Map<String, List<FeedbackResponseCommentAttributes>> responseCommentsMap,\n+                                Map<Long, boolean[]> commentVisibilityTable,\n+                                CourseRoster roster) {\n+\n+        this.feedbackSession = feedbackSession;\n+        this.questionsMap = questionsMap;\n+        this.responseCommentsMap = responseCommentsMap;\n+        this.responseVisibilityTable = responseVisibilityTable;\n+        this.commentVisibilityTable = commentVisibilityTable;\n+        this.roster = roster;\n+\n+        // build question to response map\n+        questionResponseMap = new LinkedHashMap<>();\n+        List<FeedbackQuestionAttributes> questions = new ArrayList<>(questionsMap.values());\n+        for (FeedbackQuestionAttributes question : questions) {\n+            questionResponseMap.put(question.getId(), new ArrayList<>());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA0NzQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/storage/api/FeedbackResponseCommentsDb.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1Mjo1MVrOGcWVEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1Mjo1MVrOGcWVEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3OTE1NQ==", "bodyText": "Instead of prefixing the name of 2 lists as first, second, we can give more meaningful prefixes such as giver, receiver, which is the true intention here.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432379155", "createdAt": "2020-05-29T09:52:51Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/storage/api/FeedbackResponseCommentsDb.java", "diffHunk": "@@ -395,6 +415,38 @@ private FeedbackResponseComment getFeedbackResponseCommentEntitiesForResponseFro\n                 .list();\n     }\n \n+    private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForQuestion(String questionId) {\n+        return load()\n+                .filter(\"feedbackQuestionId =\", questionId)\n+                .list();\n+    }\n+\n+    private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForQuestionInSection(\n+            String questionId, String section) {\n+        // creating map to remove duplicates\n+        Map<Long, FeedbackResponseComment> comments = new HashMap<>();\n+\n+        List<FeedbackResponseComment> firstQueryResponseComments = load()\n+                .filter(\"feedbackQuestionId =\", questionId)\n+                .filter(\"giverSection =\", section)\n+                .list();\n+\n+        for (FeedbackResponseComment comment : firstQueryResponseComments) {\n+            comments.put(comment.getFeedbackResponseCommentId(), comment);\n+        }\n+\n+        List<FeedbackResponseComment> secondQueryResponseComments = load()\n+                .filter(\"feedbackQuestionId =\", questionId)\n+                .filter(\"receiverSection =\", section)\n+                .list();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA2MDE0OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/automated/FeedbackSessionUpdateRespondentWorkerActionTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1Njo1OVrOGcWdNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDoxMDozMlrOGcqpcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MTIzOQ==", "bodyText": "The variable naming would be better to be consistent with the underlying data structure, such as respondingStudentSet .", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432381239", "createdAt": "2020-05-29T09:56:59Z", "author": {"login": "Derek-Hardy"}, "path": "src/test/java/teammates/test/cases/automated/FeedbackSessionUpdateRespondentWorkerActionTest.java", "diffHunk": "@@ -103,22 +101,32 @@ public void allTests() throws EntityDoesNotExistException {\n     }\n \n     private void verifyRespondentInSessionRespondentsList(FeedbackSessionAttributes session, String respondentEmail,\n-            boolean isInstructor) throws EntityDoesNotExistException {\n-        FeedbackSessionResponseStatus responseStatus =\n-                fsLogic.getFeedbackSessionResponseStatus(session.getFeedbackSessionName(), session.getCourseId());\n-        assertFalse(responseStatus.getStudentsWhoDidNotRespond().contains(respondentEmail));\n-        if (!isInstructor) {\n-            assertTrue(responseStatus.getStudentsWhoResponded().contains(respondentEmail));\n+            boolean isInstructor) {\n+        FeedbackSessionAttributes sessionInDb =\n+                logic.getFeedbackSession(session.getFeedbackSessionName(), session.getCourseId());\n+\n+        Set<String> respondingStudentList = sessionInDb.getRespondingStudentList();\n+        Set<String> respondingInstructorList = sessionInDb.getRespondingInstructorList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzcxOA==", "bodyText": "Actually the method itself also named as get...List but in fact return a set.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432383718", "createdAt": "2020-05-29T10:01:48Z", "author": {"login": "Derek-Hardy"}, "path": "src/test/java/teammates/test/cases/automated/FeedbackSessionUpdateRespondentWorkerActionTest.java", "diffHunk": "@@ -103,22 +101,32 @@ public void allTests() throws EntityDoesNotExistException {\n     }\n \n     private void verifyRespondentInSessionRespondentsList(FeedbackSessionAttributes session, String respondentEmail,\n-            boolean isInstructor) throws EntityDoesNotExistException {\n-        FeedbackSessionResponseStatus responseStatus =\n-                fsLogic.getFeedbackSessionResponseStatus(session.getFeedbackSessionName(), session.getCourseId());\n-        assertFalse(responseStatus.getStudentsWhoDidNotRespond().contains(respondentEmail));\n-        if (!isInstructor) {\n-            assertTrue(responseStatus.getStudentsWhoResponded().contains(respondentEmail));\n+            boolean isInstructor) {\n+        FeedbackSessionAttributes sessionInDb =\n+                logic.getFeedbackSession(session.getFeedbackSessionName(), session.getCourseId());\n+\n+        Set<String> respondingStudentList = sessionInDb.getRespondingStudentList();\n+        Set<String> respondingInstructorList = sessionInDb.getRespondingInstructorList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MTIzOQ=="}, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxMjA0OA==", "bodyText": "The method names are for legacy reason. Let not refactor them in this PR.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432712048", "createdAt": "2020-05-29T20:10:32Z", "author": {"login": "xpdavid"}, "path": "src/test/java/teammates/test/cases/automated/FeedbackSessionUpdateRespondentWorkerActionTest.java", "diffHunk": "@@ -103,22 +101,32 @@ public void allTests() throws EntityDoesNotExistException {\n     }\n \n     private void verifyRespondentInSessionRespondentsList(FeedbackSessionAttributes session, String respondentEmail,\n-            boolean isInstructor) throws EntityDoesNotExistException {\n-        FeedbackSessionResponseStatus responseStatus =\n-                fsLogic.getFeedbackSessionResponseStatus(session.getFeedbackSessionName(), session.getCourseId());\n-        assertFalse(responseStatus.getStudentsWhoDidNotRespond().contains(respondentEmail));\n-        if (!isInstructor) {\n-            assertTrue(responseStatus.getStudentsWhoResponded().contains(respondentEmail));\n+            boolean isInstructor) {\n+        FeedbackSessionAttributes sessionInDb =\n+                logic.getFeedbackSession(session.getFeedbackSessionName(), session.getCourseId());\n+\n+        Set<String> respondingStudentList = sessionInDb.getRespondingStudentList();\n+        Set<String> respondingInstructorList = sessionInDb.getRespondingInstructorList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MTIzOQ=="}, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA3NzE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/automated/FeedbackSessionUpdateRespondentWorkerActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowMjoxNFrOGcWntA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowMjoxNFrOGcWntA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzkyNA==", "bodyText": "Similarly here", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432383924", "createdAt": "2020-05-29T10:02:14Z", "author": {"login": "Derek-Hardy"}, "path": "src/test/java/teammates/test/cases/automated/FeedbackSessionUpdateRespondentWorkerActionTest.java", "diffHunk": "@@ -103,22 +101,32 @@ public void allTests() throws EntityDoesNotExistException {\n     }\n \n     private void verifyRespondentInSessionRespondentsList(FeedbackSessionAttributes session, String respondentEmail,\n-            boolean isInstructor) throws EntityDoesNotExistException {\n-        FeedbackSessionResponseStatus responseStatus =\n-                fsLogic.getFeedbackSessionResponseStatus(session.getFeedbackSessionName(), session.getCourseId());\n-        assertFalse(responseStatus.getStudentsWhoDidNotRespond().contains(respondentEmail));\n-        if (!isInstructor) {\n-            assertTrue(responseStatus.getStudentsWhoResponded().contains(respondentEmail));\n+            boolean isInstructor) {\n+        FeedbackSessionAttributes sessionInDb =\n+                logic.getFeedbackSession(session.getFeedbackSessionName(), session.getCourseId());\n+\n+        Set<String> respondingStudentList = sessionInDb.getRespondingStudentList();\n+        Set<String> respondingInstructorList = sessionInDb.getRespondingInstructorList();\n+        if (isInstructor) {\n+            assertFalse(respondingStudentList.contains(respondentEmail));\n+            assertTrue(respondingInstructorList.contains(respondentEmail));\n+        } else {\n+            assertTrue(respondingStudentList.contains(respondentEmail));\n+            assertFalse(respondingInstructorList.contains(respondentEmail));\n         }\n     }\n \n     private void verifyRespondentNotInSessionRespondentsList(FeedbackSessionAttributes session, String respondentEmail,\n-            boolean isInstructor) throws EntityDoesNotExistException {\n-        FeedbackSessionResponseStatus responseStatus =\n-                fsLogic.getFeedbackSessionResponseStatus(session.getFeedbackSessionName(), session.getCourseId());\n-        assertTrue(responseStatus.getStudentsWhoDidNotRespond().contains(respondentEmail));\n-        if (!isInstructor) {\n-            assertFalse(responseStatus.getStudentsWhoResponded().contains(respondentEmail));\n+            boolean isInstructor) {\n+        FeedbackSessionAttributes sessionInDb =\n+                logic.getFeedbackSession(session.getFeedbackSessionName(), session.getCourseId());\n+\n+        Set<String> respondingStudentList = sessionInDb.getRespondingStudentList();\n+        Set<String> respondingInstructorList = sessionInDb.getRespondingInstructorList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA5MjQzOnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/datatransfer/CourseRosterTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowNzoxNVrOGcWxQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwMTo0NTowMlrOGc2Nsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjM2OQ==", "bodyText": "Although it is just a test class, I think it is still good to name each element in the pair within the for loop for better understanding.\nLike studentTeam = studentData[i], studentEmail = studentData[i + 1].", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432386369", "createdAt": "2020-05-29T10:07:15Z", "author": {"login": "Derek-Hardy"}, "path": "src/test/java/teammates/test/cases/datatransfer/CourseRosterTest.java", "diffHunk": "@@ -104,15 +105,96 @@ public void testGetEmailToNameTableFromRoster() {\n         assertEquals(emailToNameTableExpected, emailToNameTableActual);\n     }\n \n+    @Test\n+    public void testGetTeamToMembersTable_typicalCase_shouldGroupTeamCorrectly() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"team 1\", \"s1@gmail.com\",\n+                        \"team 1\", \"s2@gmail.com\",\n+                        \"team 2\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"ins1@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+\n+        assertEquals(2, roster.getTeamToMembersTable().size());\n+        assertEquals(2, roster.getTeamToMembersTable().get(\"team 1\").size());\n+        assertEquals(1, roster.getTeamToMembersTable().get(\"team 2\").size());\n+        assertEquals(\"s3@gmail.com\", roster.getTeamToMembersTable().get(\"team 2\").iterator().next().getEmail());\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_studentCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"John\", \"john@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"john@gmail.com\");\n+        assertEquals(\"John\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(\"John\", info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(\"John's Section\", info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_instructorCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"john@email.com\");\n+        assertEquals(\"John\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(Const.USER_TEAM_FOR_INSTRUCTOR, info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(Const.DEFAULT_SECTION, info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_teamCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"s1\");\n+        assertEquals(\"s1\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(\"s1\", info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(\"s1's Section\", info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_unknownCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"random\");\n+        assertEquals(Const.USER_NOBODY_TEXT, info[CourseRoster.INFO_NAME]);\n+        assertEquals(Const.USER_NOBODY_TEXT, info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(Const.DEFAULT_SECTION, info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n     private List<StudentAttributes> createStudentList(String... studentData) {\n         List<StudentAttributes> students = new ArrayList<>();\n         for (int i = 0; i < studentData.length; i += 2) {\n             StudentAttributes student = StudentAttributes\n-                    .builder(\"\", \"\")\n-                    .withName(\"\")\n+                    .builder(\"\", studentData[i + 1])\n+                    .withName(studentData[i])\n+                    .withTeamName(studentData[i])\n+                    .withSectionName(studentData[i] + \"'s Section\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxMjgyNw==", "bodyText": "The names are implicitly specified by the builder pattern?", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432712827", "createdAt": "2020-05-29T20:12:22Z", "author": {"login": "xpdavid"}, "path": "src/test/java/teammates/test/cases/datatransfer/CourseRosterTest.java", "diffHunk": "@@ -104,15 +105,96 @@ public void testGetEmailToNameTableFromRoster() {\n         assertEquals(emailToNameTableExpected, emailToNameTableActual);\n     }\n \n+    @Test\n+    public void testGetTeamToMembersTable_typicalCase_shouldGroupTeamCorrectly() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"team 1\", \"s1@gmail.com\",\n+                        \"team 1\", \"s2@gmail.com\",\n+                        \"team 2\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"ins1@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+\n+        assertEquals(2, roster.getTeamToMembersTable().size());\n+        assertEquals(2, roster.getTeamToMembersTable().get(\"team 1\").size());\n+        assertEquals(1, roster.getTeamToMembersTable().get(\"team 2\").size());\n+        assertEquals(\"s3@gmail.com\", roster.getTeamToMembersTable().get(\"team 2\").iterator().next().getEmail());\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_studentCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"John\", \"john@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"john@gmail.com\");\n+        assertEquals(\"John\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(\"John\", info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(\"John's Section\", info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_instructorCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"john@email.com\");\n+        assertEquals(\"John\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(Const.USER_TEAM_FOR_INSTRUCTOR, info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(Const.DEFAULT_SECTION, info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_teamCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"s1\");\n+        assertEquals(\"s1\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(\"s1\", info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(\"s1's Section\", info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_unknownCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"random\");\n+        assertEquals(Const.USER_NOBODY_TEXT, info[CourseRoster.INFO_NAME]);\n+        assertEquals(Const.USER_NOBODY_TEXT, info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(Const.DEFAULT_SECTION, info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n     private List<StudentAttributes> createStudentList(String... studentData) {\n         List<StudentAttributes> students = new ArrayList<>();\n         for (int i = 0; i < studentData.length; i += 2) {\n             StudentAttributes student = StudentAttributes\n-                    .builder(\"\", \"\")\n-                    .withName(\"\")\n+                    .builder(\"\", studentData[i + 1])\n+                    .withName(studentData[i])\n+                    .withTeamName(studentData[i])\n+                    .withSectionName(studentData[i] + \"'s Section\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjM2OQ=="}, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMTU1NA==", "bodyText": "There's no indication what studentData[i + 1] is when instantiating the builder.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432901554", "createdAt": "2020-05-31T01:45:02Z", "author": {"login": "Derek-Hardy"}, "path": "src/test/java/teammates/test/cases/datatransfer/CourseRosterTest.java", "diffHunk": "@@ -104,15 +105,96 @@ public void testGetEmailToNameTableFromRoster() {\n         assertEquals(emailToNameTableExpected, emailToNameTableActual);\n     }\n \n+    @Test\n+    public void testGetTeamToMembersTable_typicalCase_shouldGroupTeamCorrectly() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"team 1\", \"s1@gmail.com\",\n+                        \"team 1\", \"s2@gmail.com\",\n+                        \"team 2\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"ins1@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+\n+        assertEquals(2, roster.getTeamToMembersTable().size());\n+        assertEquals(2, roster.getTeamToMembersTable().get(\"team 1\").size());\n+        assertEquals(1, roster.getTeamToMembersTable().get(\"team 2\").size());\n+        assertEquals(\"s3@gmail.com\", roster.getTeamToMembersTable().get(\"team 2\").iterator().next().getEmail());\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_studentCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"John\", \"john@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"john@gmail.com\");\n+        assertEquals(\"John\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(\"John\", info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(\"John's Section\", info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_instructorCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"john@email.com\");\n+        assertEquals(\"John\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(Const.USER_TEAM_FOR_INSTRUCTOR, info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(Const.DEFAULT_SECTION, info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_teamCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"s1\");\n+        assertEquals(\"s1\", info[CourseRoster.INFO_NAME]);\n+        assertEquals(\"s1\", info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(\"s1's Section\", info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n+    @Test\n+    public void testGetInfoForIdentifier_unknownCase_shouldShowCorrectInfo() {\n+        CourseRoster roster = new CourseRoster(\n+                createStudentList(\n+                        \"s1\", \"s1@gmail.com\",\n+                        \"s2\", \"s2@gmail.com\",\n+                        \"s3\", \"s3@gmail.com\"),\n+                createInstructorList(\n+                        \"John\", \"john@email.com\",\n+                        \"Jean\", \"ins2@email.com\"));\n+        String[] info = roster.getInfoForIdentifier(\"random\");\n+        assertEquals(Const.USER_NOBODY_TEXT, info[CourseRoster.INFO_NAME]);\n+        assertEquals(Const.USER_NOBODY_TEXT, info[CourseRoster.INFO_TEAM_NAME]);\n+        assertEquals(Const.DEFAULT_SECTION, info[CourseRoster.INFO_SECTION_NAME]);\n+    }\n+\n     private List<StudentAttributes> createStudentList(String... studentData) {\n         List<StudentAttributes> students = new ArrayList<>();\n         for (int i = 0; i < studentData.length; i += 2) {\n             StudentAttributes student = StudentAttributes\n-                    .builder(\"\", \"\")\n-                    .withName(\"\")\n+                    .builder(\"\", studentData[i + 1])\n+                    .withName(studentData[i])\n+                    .withTeamName(studentData[i])\n+                    .withSectionName(studentData[i] + \"'s Section\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjM2OQ=="}, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzE0MTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDoyMzo1MFrOGcXQMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMDo1Njo1NFrOGc8dyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5NDI4OQ==", "bodyText": "So, decided to pass in null and remove if-else check? :)", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432394289", "createdAt": "2020-05-29T10:23:50Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "diffHunk": "@@ -371,18 +437,24 @@ public CommentOutput getParticipantComment() {\n         @Nullable\n         private final String lastEditorName;\n \n-        public CommentOutput(FeedbackResponseCommentAttributes frc, String commentGiverName, String lastEditorName) {\n+        public CommentOutput(FeedbackResponseCommentAttributes frc,\n+                             String commentGiver, String commentGiverName,\n+                             String lastEditorEmail, String lastEditorName) {\n             super(frc);\n+            this.commentGiver = commentGiver;\n+            this.commentGiverName = commentGiverName;\n+            this.lastEditorEmail = lastEditorEmail;\n+            this.lastEditorName = lastEditorName;\n+        }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 442}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk4MzQzNQ==", "bodyText": "Applied builder pattern instead \ud83d\udc4d", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r432983435", "createdAt": "2020-05-31T20:56:37Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "diffHunk": "@@ -371,18 +437,24 @@ public CommentOutput getParticipantComment() {\n         @Nullable\n         private final String lastEditorName;\n \n-        public CommentOutput(FeedbackResponseCommentAttributes frc, String commentGiverName, String lastEditorName) {\n+        public CommentOutput(FeedbackResponseCommentAttributes frc,\n+                             String commentGiver, String commentGiverName,\n+                             String lastEditorEmail, String lastEditorName) {\n             super(frc);\n+            this.commentGiver = commentGiver;\n+            this.commentGiverName = commentGiverName;\n+            this.lastEditorEmail = lastEditorEmail;\n+            this.lastEditorName = lastEditorName;\n+        }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5NDI4OQ=="}, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 442}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwMzk3OQ==", "bodyText": "Looks great!", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r433003979", "createdAt": "2020-06-01T00:56:54Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "diffHunk": "@@ -371,18 +437,24 @@ public CommentOutput getParticipantComment() {\n         @Nullable\n         private final String lastEditorName;\n \n-        public CommentOutput(FeedbackResponseCommentAttributes frc, String commentGiverName, String lastEditorName) {\n+        public CommentOutput(FeedbackResponseCommentAttributes frc,\n+                             String commentGiver, String commentGiverName,\n+                             String lastEditorEmail, String lastEditorName) {\n             super(frc);\n+            this.commentGiver = commentGiver;\n+            this.commentGiverName = commentGiverName;\n+            this.lastEditorEmail = lastEditorEmail;\n+            this.lastEditorName = lastEditorName;\n+        }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5NDI4OQ=="}, "originalCommit": {"oid": "833c1948bb833e14c660a0fedb83e6ae6fff149d"}, "originalPosition": 442}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzUwODAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/common/datatransfer/CourseRoster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozNDowMFrOGd6O8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozNDowMFrOGd6O8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxNTk4Ng==", "bodyText": "Nitpicking, but this is Java so this is not exactly necessary.", "url": "https://github.com/TEAMMATES/teammates/pull/10135#discussion_r434015986", "createdAt": "2020-06-02T16:34:00Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/CourseRoster.java", "diffHunk": "@@ -104,4 +118,76 @@ private void populateInstructorListByEmail(List<InstructorAttributes> instructor\n             instructorListByEmail.put(i.email, i);\n         }\n     }\n+\n+    private void buildTeamToMembersTable() {\n+        // group students by team\n+        for (StudentAttributes studentAttributes : this.getStudents()) {\n+            teamToMembersTable.computeIfAbsent(studentAttributes.getTeam(), key -> new ArrayList<>())\n+                    .add(studentAttributes);\n+        }\n+    }\n+\n+    /**\n+     * Gets info of a participant associated with an identifier in the course.\n+     *\n+     * @return an object {@link ParticipantInfo} containing the name, teamName and the sectionName.\n+     */\n+    public ParticipantInfo getInfoForIdentifier(String identifier) {\n+        String name = Const.USER_NOBODY_TEXT;\n+        String teamName = Const.USER_NOBODY_TEXT;\n+        String sectionName = Const.DEFAULT_SECTION;\n+\n+        boolean isStudent = this.getStudentForEmail(identifier) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05caaaabcbc5949cee71899de421c783eccfb49"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3739, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}