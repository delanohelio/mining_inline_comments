{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NDAwODQ5", "number": 10138, "title": "[#10109] Add response comment CRUD operations", "bodyText": "Fixes #10109", "createdAt": "2020-05-30T02:24:24Z", "url": "https://github.com/TEAMMATES/teammates/pull/10138", "merged": true, "mergeCommit": {"oid": "db2dde3e7cab67837132ca908ac9ae04e11c929e"}, "closed": true, "closedAt": "2020-06-01T03:28:25Z", "author": {"login": "madanalogy"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmNhOwAH2gAyNDI1NDAwODQ5OmMwODU3NWQ5NGMzNjUyOGEzZTZmYWU4MDkyOTBkMmExNmFhMzM0NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcm3av8AH2gAyNDI1NDAwODQ5OmFkYTZmYmU5ZDFkYmY0NWQxNTEzMWYxY2I4NjEwY2FjYjZkZWUwMDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c08575d94c36528a3e6fae809290d2a16aa33475", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/c08575d94c36528a3e6fae809290d2a16aa33475", "committedDate": "2020-05-30T02:20:16Z", "message": "Add response comment CRUD operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzcwNjIw", "url": "https://github.com/TEAMMATES/teammates/pull/10138#pullrequestreview-421370620", "createdAt": "2020-05-30T02:31:23Z", "commit": {"oid": "c08575d94c36528a3e6fae809290d2a16aa33475"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjozMToyNFrOGcwJ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjozMToyNFrOGcwJ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMjI3MA==", "bodyText": "Are you copying from the result page? I think most of the comment related features are the same. Can we extract to a common parent class?", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432802270", "createdAt": "2020-05-30T02:31:24Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-student-records-page/instructor-student-records-page.component.ts", "diffHunk": "@@ -188,4 +201,89 @@ export class InstructorStudentRecordsPageComponent implements OnInit {\n       isEditing: false,\n     };\n   }\n+\n+  /**\n+   * Deletes an instructor comment.\n+   */\n+  deleteComment(data: { responseId: string, index: number}): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08575d94c36528a3e6fae809290d2a16aa33475"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDU2ODM5", "url": "https://github.com/TEAMMATES/teammates/pull/10138#pullrequestreview-421456839", "createdAt": "2020-05-31T02:40:13Z", "commit": {"oid": "c08575d94c36528a3e6fae809290d2a16aa33475"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwMjo0MDoxNFrOGc2W8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwMjo0MDoxNFrOGc2W8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzkyMQ==", "bodyText": "We can be consistent with subscribe taking its own line?", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432903921", "createdAt": "2020-05-31T02:40:14Z", "author": {"login": "Derek-Hardy"}, "path": "src/web/app/pages-instructor/instructor-student-records-page/instructor-student-records-page.component.ts", "diffHunk": "@@ -188,4 +201,89 @@ export class InstructorStudentRecordsPageComponent implements OnInit {\n       isEditing: false,\n     };\n   }\n+\n+  /**\n+   * Deletes an instructor comment.\n+   */\n+  deleteComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentToDelete: FeedbackResponseComment =\n+        // tslint:disable-next-line:no-non-null-assertion\n+        this.instructorCommentTableModel[data.responseId].commentRows[data.index].originalComment!;\n+\n+    this.commentService.deleteComment(commentToDelete.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe(() => {\n+          commentTableModel.commentRows.splice(data.index, 1);\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Updates an instructor comment.\n+   */\n+  updateComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentRowToUpdate: CommentRowModel = commentTableModel.commentRows[data.index];\n+    // tslint:disable-next-line:no-non-null-assertion\n+    const commentToUpdate: FeedbackResponseComment = commentRowToUpdate.originalComment!;\n+\n+    this.commentService.updateComment({\n+      commentText: commentRowToUpdate.commentEditFormModel.commentText,\n+      showCommentTo: commentRowToUpdate.commentEditFormModel.showCommentTo,\n+      showGiverNameTo: commentRowToUpdate.commentEditFormModel.showGiverNameTo,\n+    }, commentToUpdate.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe((commentResponse: FeedbackResponseComment) => {\n+          commentTableModel.commentRows[data.index] = this.getCommentRowModel({\n+            ...commentResponse,\n+            commentGiverName: commentRowToUpdate.commentGiverName,\n+            // the current instructor will become the last editor\n+            lastEditorName: this.currInstructorName,\n+          });\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Saves an instructor comment.\n+   */\n+  saveNewComment(responseId: string): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[responseId];\n+    const commentRowToAdd: CommentRowModel = commentTableModel.newCommentRow;\n+\n+    this.commentService.createComment({\n+      commentText: commentRowToAdd.commentEditFormModel.commentText,\n+      showCommentTo: commentRowToAdd.commentEditFormModel.showCommentTo,\n+      showGiverNameTo: commentRowToAdd.commentEditFormModel.showGiverNameTo,\n+    }, responseId, Intent.INSTRUCTOR_RESULT).subscribe((commentResponse: FeedbackResponseComment) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08575d94c36528a3e6fae809290d2a16aa33475"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a9a8cff56821f84154dcac0f7b0ca2ade2d1b80", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/6a9a8cff56821f84154dcac0f7b0ca2ade2d1b80", "committedDate": "2020-05-31T12:23:41Z", "message": "Merge branch 'master' into 10109-comments\n\n# Conflicts:\n#\tsrc/web/app/pages-instructor/instructor-student-records-page/__snapshots__/instructor-student-records-page.component.spec.ts.snap\n#\tsrc/web/app/pages-instructor/instructor-student-records-page/instructor-student-records-page.component.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc9ca4ef8b84b38eb3c1b1de330bf26dbc66c679", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/fc9ca4ef8b84b38eb3c1b1de330bf26dbc66c679", "committedDate": "2020-05-31T13:25:15Z", "message": "Extract duplicate functions into common parent class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "662bc5f5679357b298f1129a4109fb7627faca4c", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/662bc5f5679357b298f1129a4109fb7627faca4c", "committedDate": "2020-05-31T13:31:17Z", "message": "Fix typo in preprocessComments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8307b4d4a5e3b4f776cc6e53e3a88b7f2b91ecfd", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/8307b4d4a5e3b4f776cc6e53e3a88b7f2b91ecfd", "committedDate": "2020-05-31T13:37:52Z", "message": "Fix method documentation alignment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDk5Mjkz", "url": "https://github.com/TEAMMATES/teammates/pull/10138#pullrequestreview-421499293", "createdAt": "2020-05-31T14:19:00Z", "commit": {"oid": "8307b4d4a5e3b4f776cc6e53e3a88b7f2b91ecfd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDoxOTowMVrOGc5SOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDoyMjozNlrOGc5TdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MTg2NQ==", "bodyText": "Since the class is abstract, the keyword protected for constructor is optional.", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432951865", "createdAt": "2020-05-31T14:19:01Z", "author": {"login": "Derek-Hardy"}, "path": "src/web/app/pages-instructor/instructor-comments.component.ts", "diffHunk": "@@ -0,0 +1,132 @@\n+import { FeedbackResponseCommentService } from '../../services/feedback-response-comment.service';\n+import { StatusMessageService } from '../../services/status-message.service';\n+import {\n+    FeedbackResponseComment,\n+    FeedbackSession, FeedbackSessionPublishStatus, FeedbackSessionSubmissionStatus,\n+    ResponseVisibleSetting,\n+    SessionVisibleSetting,\n+} from '../../types/api-output';\n+import { Intent } from '../../types/api-request';\n+import { CommentRowModel } from '../components/comment-box/comment-row/comment-row.component';\n+import { CommentTableModel } from '../components/comment-box/comment-table/comment-table.component';\n+import { CommentToCommentRowModelPipe } from '../components/comment-box/comment-to-comment-row-model.pipe';\n+import { ErrorMessageOutput } from '../error-message-output';\n+\n+/**\n+ * Base class for instructor comment CRUD operations.\n+ */\n+export abstract class InstructorCommentsComponent {\n+\n+  session: FeedbackSession = {\n+    courseId: '',\n+    timeZone: '',\n+    feedbackSessionName: '',\n+    instructions: '',\n+    submissionStartTimestamp: 0,\n+    submissionEndTimestamp: 0,\n+    gracePeriod: 0,\n+    sessionVisibleSetting: SessionVisibleSetting.AT_OPEN,\n+    responseVisibleSetting: ResponseVisibleSetting.AT_VISIBLE,\n+    submissionStatus: FeedbackSessionSubmissionStatus.OPEN,\n+    publishStatus: FeedbackSessionPublishStatus.NOT_PUBLISHED,\n+    isClosingEmailEnabled: true,\n+    isPublishedEmailEnabled: true,\n+    createdAtTimestamp: 0,\n+  };\n+  currInstructorName?: string;\n+\n+  // this is a separate model for instructor comments\n+  // from responseID to comment table model\n+  instructorCommentTableModel: Record<string, CommentTableModel> = {};\n+\n+  protected constructor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8307b4d4a5e3b4f776cc6e53e3a88b7f2b91ecfd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MjE4MQ==", "bodyText": "I think services can be all private here, since there is no more class extends from InstructorSessionResultPageComponent .\nhttps://stackoverflow.com/a/48571668/9421552", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432952181", "createdAt": "2020-05-31T14:22:36Z", "author": {"login": "Derek-Hardy"}, "path": "src/web/app/pages-instructor/instructor-session-result-page/instructor-session-result-page.component.ts", "diffHunk": "@@ -139,12 +113,15 @@ export class InstructorSessionResultPageComponent implements OnInit {\n               private courseService: CourseService,\n               private studentService: StudentService,\n               private instructorService: InstructorService,\n-              private commentService: FeedbackResponseCommentService,\n               private route: ActivatedRoute,\n-      private timezoneService: TimezoneService, private statusMessageService: StatusMessageService,\n-      private modalService: NgbModal, private router: Router,\n-      private commentsToCommentTableModel: CommentsToCommentTableModelPipe,\n-      private commentToCommentRowModel: CommentToCommentRowModelPipe) {\n+              private timezoneService: TimezoneService,\n+              private modalService: NgbModal,\n+              private router: Router,\n+              private commentsToCommentTableModel: CommentsToCommentTableModelPipe,\n+              protected statusMessageService: StatusMessageService,\n+              protected commentService: FeedbackResponseCommentService,\n+              protected commentToCommentRowModel: CommentToCommentRowModelPipe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8307b4d4a5e3b4f776cc6e53e3a88b7f2b91ecfd"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6b510ae016430eee17a492d9124a312c3b6b2ec", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/f6b510ae016430eee17a492d9124a312c3b6b2ec", "committedDate": "2020-06-01T01:54:50Z", "message": "Remove access modifiers for inherited services"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNTYwMDk2", "url": "https://github.com/TEAMMATES/teammates/pull/10138#pullrequestreview-421560096", "createdAt": "2020-06-01T02:09:45Z", "commit": {"oid": "f6b510ae016430eee17a492d9124a312c3b6b2ec"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNTcwMzY0", "url": "https://github.com/TEAMMATES/teammates/pull/10138#pullrequestreview-421570364", "createdAt": "2020-06-01T03:02:35Z", "commit": {"oid": "f6b510ae016430eee17a492d9124a312c3b6b2ec"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMzowMjozNVrOGc9oyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMzowNDozOVrOGc9qGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMzE3OQ==", "bodyText": "The indentation is not correct?", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r433023179", "createdAt": "2020-06-01T03:02:35Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-comments.component.ts", "diffHunk": "@@ -0,0 +1,132 @@\n+import { FeedbackResponseCommentService } from '../../services/feedback-response-comment.service';\n+import { StatusMessageService } from '../../services/status-message.service';\n+import {\n+    FeedbackResponseComment,\n+    FeedbackSession, FeedbackSessionPublishStatus, FeedbackSessionSubmissionStatus,\n+    ResponseVisibleSetting,\n+    SessionVisibleSetting,\n+} from '../../types/api-output';\n+import { Intent } from '../../types/api-request';\n+import { CommentRowModel } from '../components/comment-box/comment-row/comment-row.component';\n+import { CommentTableModel } from '../components/comment-box/comment-table/comment-table.component';\n+import { CommentToCommentRowModelPipe } from '../components/comment-box/comment-to-comment-row-model.pipe';\n+import { ErrorMessageOutput } from '../error-message-output';\n+\n+/**\n+ * Base class for instructor comment CRUD operations.\n+ */\n+export abstract class InstructorCommentsComponent {\n+\n+  session: FeedbackSession = {\n+    courseId: '',\n+    timeZone: '',\n+    feedbackSessionName: '',\n+    instructions: '',\n+    submissionStartTimestamp: 0,\n+    submissionEndTimestamp: 0,\n+    gracePeriod: 0,\n+    sessionVisibleSetting: SessionVisibleSetting.AT_OPEN,\n+    responseVisibleSetting: ResponseVisibleSetting.AT_VISIBLE,\n+    submissionStatus: FeedbackSessionSubmissionStatus.OPEN,\n+    publishStatus: FeedbackSessionPublishStatus.NOT_PUBLISHED,\n+    isClosingEmailEnabled: true,\n+    isPublishedEmailEnabled: true,\n+    createdAtTimestamp: 0,\n+  };\n+  currInstructorName?: string;\n+\n+  // this is a separate model for instructor comments\n+  // from responseID to comment table model\n+  instructorCommentTableModel: Record<string, CommentTableModel> = {};\n+\n+  protected constructor(\n+        protected commentToCommentRowModel: CommentToCommentRowModelPipe,\n+        protected commentService: FeedbackResponseCommentService,\n+        protected statusMessageService: StatusMessageService) { }\n+\n+  /**\n+   * Deletes an instructor comment.\n+   */\n+  deleteComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentToDelete: FeedbackResponseComment =\n+            // tslint:disable-next-line:no-non-null-assertion\n+            this.instructorCommentTableModel[data.responseId].commentRows[data.index].originalComment!;\n+\n+    this.commentService.deleteComment(commentToDelete.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe(() => {\n+          commentTableModel.commentRows.splice(data.index, 1);\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Updates an instructor comment.\n+   */\n+  updateComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentRowToUpdate: CommentRowModel = commentTableModel.commentRows[data.index];\n+        // tslint:disable-next-line:no-non-null-assertion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6b510ae016430eee17a492d9124a312c3b6b2ec"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMzM0OA==", "bodyText": "Same here?", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r433023348", "createdAt": "2020-06-01T03:03:33Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-comments.component.ts", "diffHunk": "@@ -0,0 +1,132 @@\n+import { FeedbackResponseCommentService } from '../../services/feedback-response-comment.service';\n+import { StatusMessageService } from '../../services/status-message.service';\n+import {\n+    FeedbackResponseComment,\n+    FeedbackSession, FeedbackSessionPublishStatus, FeedbackSessionSubmissionStatus,\n+    ResponseVisibleSetting,\n+    SessionVisibleSetting,\n+} from '../../types/api-output';\n+import { Intent } from '../../types/api-request';\n+import { CommentRowModel } from '../components/comment-box/comment-row/comment-row.component';\n+import { CommentTableModel } from '../components/comment-box/comment-table/comment-table.component';\n+import { CommentToCommentRowModelPipe } from '../components/comment-box/comment-to-comment-row-model.pipe';\n+import { ErrorMessageOutput } from '../error-message-output';\n+\n+/**\n+ * Base class for instructor comment CRUD operations.\n+ */\n+export abstract class InstructorCommentsComponent {\n+\n+  session: FeedbackSession = {\n+    courseId: '',\n+    timeZone: '',\n+    feedbackSessionName: '',\n+    instructions: '',\n+    submissionStartTimestamp: 0,\n+    submissionEndTimestamp: 0,\n+    gracePeriod: 0,\n+    sessionVisibleSetting: SessionVisibleSetting.AT_OPEN,\n+    responseVisibleSetting: ResponseVisibleSetting.AT_VISIBLE,\n+    submissionStatus: FeedbackSessionSubmissionStatus.OPEN,\n+    publishStatus: FeedbackSessionPublishStatus.NOT_PUBLISHED,\n+    isClosingEmailEnabled: true,\n+    isPublishedEmailEnabled: true,\n+    createdAtTimestamp: 0,\n+  };\n+  currInstructorName?: string;\n+\n+  // this is a separate model for instructor comments\n+  // from responseID to comment table model\n+  instructorCommentTableModel: Record<string, CommentTableModel> = {};\n+\n+  protected constructor(\n+        protected commentToCommentRowModel: CommentToCommentRowModelPipe,\n+        protected commentService: FeedbackResponseCommentService,\n+        protected statusMessageService: StatusMessageService) { }\n+\n+  /**\n+   * Deletes an instructor comment.\n+   */\n+  deleteComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentToDelete: FeedbackResponseComment =\n+            // tslint:disable-next-line:no-non-null-assertion\n+            this.instructorCommentTableModel[data.responseId].commentRows[data.index].originalComment!;\n+\n+    this.commentService.deleteComment(commentToDelete.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe(() => {\n+          commentTableModel.commentRows.splice(data.index, 1);\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Updates an instructor comment.\n+   */\n+  updateComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentRowToUpdate: CommentRowModel = commentTableModel.commentRows[data.index];\n+        // tslint:disable-next-line:no-non-null-assertion\n+    const commentToUpdate: FeedbackResponseComment = commentRowToUpdate.originalComment!;\n+\n+    this.commentService.updateComment({\n+      commentText: commentRowToUpdate.commentEditFormModel.commentText,\n+      showCommentTo: commentRowToUpdate.commentEditFormModel.showCommentTo,\n+      showGiverNameTo: commentRowToUpdate.commentEditFormModel.showGiverNameTo,\n+    }, commentToUpdate.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe((commentResponse: FeedbackResponseComment) => {\n+          commentTableModel.commentRows[data.index] = this.commentToCommentRowModel.transform({\n+            ...commentResponse,\n+            commentGiverName: commentRowToUpdate.commentGiverName,\n+                    // the current instructor will become the last editor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6b510ae016430eee17a492d9124a312c3b6b2ec"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMzUxNQ==", "bodyText": "And here", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r433023515", "createdAt": "2020-06-01T03:04:39Z", "author": {"login": "xpdavid"}, "path": "src/web/app/pages-instructor/instructor-comments.component.ts", "diffHunk": "@@ -0,0 +1,132 @@\n+import { FeedbackResponseCommentService } from '../../services/feedback-response-comment.service';\n+import { StatusMessageService } from '../../services/status-message.service';\n+import {\n+    FeedbackResponseComment,\n+    FeedbackSession, FeedbackSessionPublishStatus, FeedbackSessionSubmissionStatus,\n+    ResponseVisibleSetting,\n+    SessionVisibleSetting,\n+} from '../../types/api-output';\n+import { Intent } from '../../types/api-request';\n+import { CommentRowModel } from '../components/comment-box/comment-row/comment-row.component';\n+import { CommentTableModel } from '../components/comment-box/comment-table/comment-table.component';\n+import { CommentToCommentRowModelPipe } from '../components/comment-box/comment-to-comment-row-model.pipe';\n+import { ErrorMessageOutput } from '../error-message-output';\n+\n+/**\n+ * Base class for instructor comment CRUD operations.\n+ */\n+export abstract class InstructorCommentsComponent {\n+\n+  session: FeedbackSession = {\n+    courseId: '',\n+    timeZone: '',\n+    feedbackSessionName: '',\n+    instructions: '',\n+    submissionStartTimestamp: 0,\n+    submissionEndTimestamp: 0,\n+    gracePeriod: 0,\n+    sessionVisibleSetting: SessionVisibleSetting.AT_OPEN,\n+    responseVisibleSetting: ResponseVisibleSetting.AT_VISIBLE,\n+    submissionStatus: FeedbackSessionSubmissionStatus.OPEN,\n+    publishStatus: FeedbackSessionPublishStatus.NOT_PUBLISHED,\n+    isClosingEmailEnabled: true,\n+    isPublishedEmailEnabled: true,\n+    createdAtTimestamp: 0,\n+  };\n+  currInstructorName?: string;\n+\n+  // this is a separate model for instructor comments\n+  // from responseID to comment table model\n+  instructorCommentTableModel: Record<string, CommentTableModel> = {};\n+\n+  protected constructor(\n+        protected commentToCommentRowModel: CommentToCommentRowModelPipe,\n+        protected commentService: FeedbackResponseCommentService,\n+        protected statusMessageService: StatusMessageService) { }\n+\n+  /**\n+   * Deletes an instructor comment.\n+   */\n+  deleteComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentToDelete: FeedbackResponseComment =\n+            // tslint:disable-next-line:no-non-null-assertion\n+            this.instructorCommentTableModel[data.responseId].commentRows[data.index].originalComment!;\n+\n+    this.commentService.deleteComment(commentToDelete.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe(() => {\n+          commentTableModel.commentRows.splice(data.index, 1);\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Updates an instructor comment.\n+   */\n+  updateComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentRowToUpdate: CommentRowModel = commentTableModel.commentRows[data.index];\n+        // tslint:disable-next-line:no-non-null-assertion\n+    const commentToUpdate: FeedbackResponseComment = commentRowToUpdate.originalComment!;\n+\n+    this.commentService.updateComment({\n+      commentText: commentRowToUpdate.commentEditFormModel.commentText,\n+      showCommentTo: commentRowToUpdate.commentEditFormModel.showCommentTo,\n+      showGiverNameTo: commentRowToUpdate.commentEditFormModel.showGiverNameTo,\n+    }, commentToUpdate.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe((commentResponse: FeedbackResponseComment) => {\n+          commentTableModel.commentRows[data.index] = this.commentToCommentRowModel.transform({\n+            ...commentResponse,\n+            commentGiverName: commentRowToUpdate.commentGiverName,\n+                    // the current instructor will become the last editor\n+            lastEditorName: this.currInstructorName,\n+          }, this.session.timeZone);\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Saves an instructor comment.\n+   */\n+  saveNewComment(responseId: string): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[responseId];\n+    const commentRowToAdd: CommentRowModel = commentTableModel.newCommentRow;\n+\n+    this.commentService.createComment({\n+      commentText: commentRowToAdd.commentEditFormModel.commentText,\n+      showCommentTo: commentRowToAdd.commentEditFormModel.showCommentTo,\n+      showGiverNameTo: commentRowToAdd.commentEditFormModel.showGiverNameTo,\n+    }, responseId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe((commentResponse: FeedbackResponseComment) => {\n+          commentTableModel.commentRows.push(this.commentToCommentRowModel.transform({\n+            ...commentResponse,\n+                // the giver and editor name will be the current login instructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6b510ae016430eee17a492d9124a312c3b6b2ec"}, "originalPosition": 111}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ada6fbe9d1dbf45d15131f1cb8610cacb6dee000", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ada6fbe9d1dbf45d15131f1cb8610cacb6dee000", "committedDate": "2020-06-01T03:09:12Z", "message": "Fix tslint comment indentations"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4328, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}