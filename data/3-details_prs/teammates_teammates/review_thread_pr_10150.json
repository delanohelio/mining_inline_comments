{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MzU1NjE3", "number": 10150, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyMTo0M1rOEBmOaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0OToyOVrOECi12g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTEwMzEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyMTo0M1rOGdicTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTozMjo1N1rOGdipIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjE4OQ==", "bodyText": "Please create a new protected constructor in SessionResultsData, you won't need FeedbackSessionResultsBundle", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433626189", "createdAt": "2020-06-02T05:21:43Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package teammates.ui.webapi.output;\n+\n+import teammates.common.datatransfer.FeedbackSessionResultsBundle;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionResultsBundle bundle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNzk2Ng==", "bodyText": "In that case, would CommentSearchResultData even need a FeedbackSessionResultsBundle (as opposed to a different type to retrieve the FeedbackSessionData)?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433627966", "createdAt": "2020-06-02T05:27:49Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package teammates.ui.webapi.output;\n+\n+import teammates.common.datatransfer.FeedbackSessionResultsBundle;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionResultsBundle bundle) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjE4OQ=="}, "originalCommit": {"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyODYyNQ==", "bodyText": "Why you need FeedbackSessionResultsBundle in the first place? Does Logic#searchFeedbackResponseComments gives you FeedbackSessionResultsBundle?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433628625", "createdAt": "2020-06-02T05:30:04Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package teammates.ui.webapi.output;\n+\n+import teammates.common.datatransfer.FeedbackSessionResultsBundle;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionResultsBundle bundle) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjE4OQ=="}, "originalCommit": {"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyOTQ3NA==", "bodyText": "Good point, let me take a closer look and define the constructor properly.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433629474", "createdAt": "2020-06-02T05:32:57Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package teammates.ui.webapi.output;\n+\n+import teammates.common.datatransfer.FeedbackSessionResultsBundle;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionResultsBundle bundle) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjE4OQ=="}, "originalCommit": {"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTEwMzY1OnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyMTo1OVrOGdiclg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyOTowMFrOGdikwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjI2Mg==", "bodyText": "Remember to add doc.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433626262", "createdAt": "2020-06-02T05:21:59Z", "author": {"login": "xpdavid"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -78,14 +80,21 @@ export class SearchService {\n     const paramMap: { [key: string]: string } = {\n       searchkey: searchKey,\n     };\n-    return this.httpRequestService.get('/search/students', paramMap);\n+    return this.httpRequestService.get(ResourceEndpoints.SEARCH_STUDENTS, paramMap);\n   }\n \n   searchInstructors(searchKey: string): Observable<Instructors> {\n     const paramMap: { [key: string]: string } = {\n       searchkey: searchKey,\n     };\n-    return this.httpRequestService.get('/search/instructors', paramMap);\n+    return this.httpRequestService.get(ResourceEndpoints.SEARCH_INSTRUCTORS, paramMap);\n+  }\n+\n+  searchComments(searchKey: string): Observable<CommentSearchResults> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNzI0Mw==", "bodyText": "You mean javadoc to indicate that it's not currently functional?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433627243", "createdAt": "2020-06-02T05:25:17Z", "author": {"login": "madanalogy"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -78,14 +80,21 @@ export class SearchService {\n     const paramMap: { [key: string]: string } = {\n       searchkey: searchKey,\n     };\n-    return this.httpRequestService.get('/search/students', paramMap);\n+    return this.httpRequestService.get(ResourceEndpoints.SEARCH_STUDENTS, paramMap);\n   }\n \n   searchInstructors(searchKey: string): Observable<Instructors> {\n     const paramMap: { [key: string]: string } = {\n       searchkey: searchKey,\n     };\n-    return this.httpRequestService.get('/search/instructors', paramMap);\n+    return this.httpRequestService.get(ResourceEndpoints.SEARCH_INSTRUCTORS, paramMap);\n+  }\n+\n+  searchComments(searchKey: string): Observable<CommentSearchResults> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjI2Mg=="}, "originalCommit": {"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyODM1Mg==", "bodyText": "To explain what the function does (though the name might already be self-explaining)\nhttps://typedoc.org/guides/doccomments/", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r433628352", "createdAt": "2020-06-02T05:29:00Z", "author": {"login": "xpdavid"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -78,14 +80,21 @@ export class SearchService {\n     const paramMap: { [key: string]: string } = {\n       searchkey: searchKey,\n     };\n-    return this.httpRequestService.get('/search/students', paramMap);\n+    return this.httpRequestService.get(ResourceEndpoints.SEARCH_STUDENTS, paramMap);\n   }\n \n   searchInstructors(searchKey: string): Observable<Instructors> {\n     const paramMap: { [key: string]: string } = {\n       searchkey: searchKey,\n     };\n-    return this.httpRequestService.get('/search/instructors', paramMap);\n+    return this.httpRequestService.get(ResourceEndpoints.SEARCH_INSTRUCTORS, paramMap);\n+  }\n+\n+  searchComments(searchKey: string): Observable<CommentSearchResults> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjI2Mg=="}, "originalCommit": {"oid": "7214cd808b84ce139c4107e34e13e8980d2280b9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODcyODM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxMToxNlrOGetvIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxMToxNlrOGetvIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1OTgwOQ==", "bodyText": "There is a nice builder for ResponseOutput merged recently. You can take advantage on that.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434859809", "createdAt": "2020-06-03T21:11:16Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODczMzY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxMjo0NlrOGetyUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMDo1MToxMFrOGeyMtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MDYyNA==", "bodyText": "Note the indentation here.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434860624", "createdAt": "2020-06-03T21:12:46Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,\n+                                              FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(new CommentOutput(comment, comment.commentGiver,\n+                    bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail)));\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getStudentComment(List<FeedbackResponseCommentAttributes> comments,\n+                                     FeedbackResponseCommentSearchResultBundle bundle) {\n+        for (String email : bundle.instructorEmails) {\n+            bundle.commentGiverEmailToNameTable.remove(email);\n+        }\n+        Optional<FeedbackResponseCommentAttributes> optComment = comments.stream().filter(c ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2Mzc4Mw==", "bodyText": "The reduction is to find participant comment? You should use isCommentFromFeedbackParticipant() instead?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434863783", "createdAt": "2020-06-03T21:19:04Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,\n+                                              FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(new CommentOutput(comment, comment.commentGiver,\n+                    bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail)));\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getStudentComment(List<FeedbackResponseCommentAttributes> comments,\n+                                     FeedbackResponseCommentSearchResultBundle bundle) {\n+        for (String email : bundle.instructorEmails) {\n+            bundle.commentGiverEmailToNameTable.remove(email);\n+        }\n+        Optional<FeedbackResponseCommentAttributes> optComment = comments.stream().filter(c ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MDYyNA=="}, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzMjkxNg==", "bodyText": "Yes it was to find participant, I did not know about that method thank you for the suggestion :)", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434932916", "createdAt": "2020-06-04T00:51:10Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,\n+                                              FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(new CommentOutput(comment, comment.commentGiver,\n+                    bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail)));\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getStudentComment(List<FeedbackResponseCommentAttributes> comments,\n+                                     FeedbackResponseCommentSearchResultBundle bundle) {\n+        for (String email : bundle.instructorEmails) {\n+            bundle.commentGiverEmailToNameTable.remove(email);\n+        }\n+        Optional<FeedbackResponseCommentAttributes> optComment = comments.stream().filter(c ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MDYyNA=="}, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODczOTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxNDo0MFrOGet17A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxNDo0MFrOGet17A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MTU0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                   String questionStatistics, List<ResponseOutput> responses) {\n          \n          \n            \n                                   String questionStatistics, List<ResponseOutput> allResponses) {", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434861548", "createdAt": "2020-06-03T21:14:40Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "diffHunk": "@@ -235,6 +237,13 @@ private static String removeAnonymousHash(String identifier) {\n             this.questionStatistics = questionStatistics;\n         }\n \n+        QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes,\n+                       String questionStatistics, List<ResponseOutput> responses) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODc0MzI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxNTo1NVrOGet4bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMDo1MTozOFrOGeyNGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjE5MQ==", "bodyText": "What is student comment? Do you mean ResponseComment? ParticipantComment\uff1f", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434862191", "createdAt": "2020-06-03T21:15:55Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,\n+                                              FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(new CommentOutput(comment, comment.commentGiver,\n+                    bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail)));\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getStudentComment(List<FeedbackResponseCommentAttributes> comments,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzMzAxOA==", "bodyText": "Participant comment yes", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434933018", "createdAt": "2020-06-04T00:51:38Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,\n+                                              FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(new CommentOutput(comment, comment.commentGiver,\n+                    bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail)));\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getStudentComment(List<FeedbackResponseCommentAttributes> comments,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjE5MQ=="}, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODc0NDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxNjozNFrOGet5qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMToxNjozNFrOGet5qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjUwNA==", "bodyText": "Instructor comment?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434862504", "createdAt": "2020-06-03T21:16:34Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(new ResponseOutput(response.getId(), response.giver, null, null, null,\n+                    response.giverSection, response.recipient, null, null, response.recipientSection,\n+                    response.responseDetails, getStudentComment(bundle.comments.get(response.getId()), bundle),\n+                    buildComments(bundle.comments.get(response.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> comments,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f493fc3a9385317f0c2932f0d88249eef44d8487"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTUzODQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/SearchCommentsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDozMjowNFrOGe1d8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDozMjowNFrOGe1d8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4NjQ4Mg==", "bodyText": "The backend should have no knowledge about what the data is going to be used so we should not mention here. Instead, mention what the action does.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434986482", "createdAt": "2020-06-04T04:32:04Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/action/SearchCommentsAction.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package teammates.ui.webapi.action;\n+\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.UnauthorizedAccessException;\n+import teammates.common.util.Const;\n+import teammates.ui.webapi.output.CommentSearchResultsData;\n+\n+/**\n+ * Action: Showing the InstructorSearchPage for an instructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57439132b3515e51c953bc044623d5010ec68f7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTU0MTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDozNDowMFrOGe1f8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDozNDowMFrOGe1f8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4Njk5Mg==", "bodyText": "If you are not using questionStatistics why define it here in the first place?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434986992", "createdAt": "2020-06-04T04:34:00Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/SessionResultsData.java", "diffHunk": "@@ -337,6 +337,13 @@ private static String getRecipientNameOfResponse(FeedbackResponseAttributes resp\n             this.questionStatistics = questionStatistics;\n         }\n \n+        protected QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes, String questionStatistics,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57439132b3515e51c953bc044623d5010ec68f7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTU0Mzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDozNToxMlrOGe1g9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDozNToxMlrOGe1g9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4NzI1NQ==", "bodyText": "Follow good indentation here? Each line should only have one withXX?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434987255", "createdAt": "2020-06-04T04:35:12Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(ResponseOutput.builder().withResponseId(response.getId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57439132b3515e51c953bc044623d5010ec68f7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTU0NTY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDozNjoyNlrOGe1iHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNDozNjoyNlrOGe1iHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4NzU1MQ==", "bodyText": "Why we are not filtering out participantComment here?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r434987551", "createdAt": "2020-06-04T04:36:26Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, null,\n+                    buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(ResponseOutput.builder().withResponseId(response.getId())\n+                    .withGiver(response.giver).withGiverSection(response.giverSection)\n+                    .withRecipient(response.recipient).withRecipientSection(response.recipientSection)\n+                    .withParticipantComment(getParticipantComment(bundle.comments.get(response.getId()), bundle))\n+                    .withInstructorComments(getInstructorComments(bundle.comments.get(response.getId()), bundle))\n+                    .build());\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> getInstructorComments(List<FeedbackResponseCommentAttributes> comments,\n+                                                      FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            output.add(CommentOutput.builder(comment)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57439132b3515e51c953bc044623d5010ec68f7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTYyNjgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToyODowOFrOGe2T8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODoyODoxNFrOGe7QEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMDMwNQ==", "bodyText": "Maybe we can break up this one-liner for better readability?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435000305", "createdAt": "2020-06-04T05:28:08Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjkwMA==", "bodyText": "Looks okay to me. Where would you suggest the breakpoint be?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435016900", "createdAt": "2020-06-04T06:21:20Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMDMwNQ=="}, "originalCommit": {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MDQ3OQ==", "bodyText": "I felt output of buildResponses() can be separate out and saved as a variable?\nSo that it is easier to see what are the params for new QuestionOutput()", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435080479", "createdAt": "2020-06-04T08:27:02Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMDMwNQ=="}, "originalCommit": {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MTIzNA==", "bodyText": "Yeap, I put the params of new QuestionOutput() to a new line :)", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435081234", "createdAt": "2020-06-04T08:28:14Z", "author": {"login": "madanalogy"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMDMwNQ=="}, "originalCommit": {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTY0MzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNTozNzowOFrOGe2eGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNTozNzowOFrOGe2eGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMjkwNw==", "bodyText": "Since this method has the potential to return null, it could be better to have a bit Javadoc to explain when we will get CommentOutput and when will it be null?", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435002907", "createdAt": "2020-06-04T05:37:08Z", "author": {"login": "Derek-Hardy"}, "path": "src/main/java/teammates/ui/webapi/output/CommentSearchResultData.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.ui.webapi.output;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import teammates.common.datatransfer.FeedbackResponseCommentSearchResultBundle;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+\n+/**\n+ * API output format for a comment search result.\n+ */\n+public class CommentSearchResultData extends SessionResultsData {\n+    private final FeedbackSessionData feedbackSession;\n+\n+    public CommentSearchResultData(FeedbackSessionAttributes session,\n+                                   FeedbackResponseCommentSearchResultBundle bundle) {\n+        super();\n+        feedbackSession = new FeedbackSessionData(session);\n+        bundle.questions.forEach((key, value) -> {\n+            questions.addAll(buildQuestions(value, bundle));\n+        });\n+    }\n+\n+    private List<QuestionOutput> buildQuestions(List<FeedbackQuestionAttributes> questions,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<QuestionOutput> output = new ArrayList<>();\n+        for (FeedbackQuestionAttributes question : questions) {\n+            output.add(new QuestionOutput(question, buildResponses(bundle.responses.get(question.getId()), bundle)));\n+        }\n+        return output;\n+    }\n+\n+    private List<ResponseOutput> buildResponses(List<FeedbackResponseAttributes> responses,\n+                                                FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<ResponseOutput> output = new ArrayList<>();\n+        for (FeedbackResponseAttributes response : responses) {\n+            output.add(ResponseOutput.builder()\n+                    .withResponseId(response.getId())\n+                    .withGiver(response.giver)\n+                    .withGiverSection(response.giverSection)\n+                    .withRecipient(response.recipient)\n+                    .withRecipientSection(response.recipientSection)\n+                    .withParticipantComment(getParticipantComment(bundle.comments.get(response.getId()), bundle))\n+                    .withInstructorComments(getInstructorComments(bundle.comments.get(response.getId()), bundle))\n+                    .build());\n+        }\n+        return output;\n+    }\n+\n+    private List<CommentOutput> getInstructorComments(List<FeedbackResponseCommentAttributes> comments,\n+                                                      FeedbackResponseCommentSearchResultBundle bundle) {\n+        List<CommentOutput> output = new ArrayList<>();\n+        for (FeedbackResponseCommentAttributes comment : comments) {\n+            if (comment.isCommentFromFeedbackParticipant()) {\n+                continue;\n+            }\n+            output.add(CommentOutput.builder(comment)\n+                    .withCommentGiver(comment.commentGiver)\n+                    .withLastEditorName(bundle.commentGiverEmailToNameTable.get(comment.lastEditorEmail))\n+                    .build());\n+        }\n+        return output;\n+    }\n+\n+    private CommentOutput getParticipantComment(List<FeedbackResponseCommentAttributes> comments,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661ed25e8612633ce0e6bcd41f58bdbc5b74cf2a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTAyMDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0NTo0M1rOGfD_wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0NTo0M1rOGfD_wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNDUxMg==", "bodyText": "The class shouldn't care where it gets the mapping details from.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435224512", "createdAt": "2020-06-04T12:45:43Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java", "diffHunk": "@@ -13,17 +13,27 @@\n \n /**\n  * The search result bundle for {@link FeedbackResponseCommentAttributes}.\n+ * Mapping details retrieved from {@link teammates.storage.search.FeedbackResponseCommentSearchDocument#fromResults}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTAyMzMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0NjoxOFrOGfEBIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0NjoxOFrOGfEBIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNDg2NQ==", "bodyText": "Use proper javadoc instead of code comments.\n/**\n * Session name to session maps.\n */\npublic Map<String, FeedbackSessionAttributes> sessions = new HashMap<>();", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435224865", "createdAt": "2020-06-04T12:46:18Z", "author": {"login": "wkurniawan07"}, "path": "src/main/java/teammates/common/datatransfer/FeedbackResponseCommentSearchResultBundle.java", "diffHunk": "@@ -13,17 +13,27 @@\n \n /**\n  * The search result bundle for {@link FeedbackResponseCommentAttributes}.\n+ * Mapping details retrieved from {@link teammates.storage.search.FeedbackResponseCommentSearchDocument#fromResults}.\n  */\n public class FeedbackResponseCommentSearchResultBundle extends SearchResultBundle {\n \n-    public Map<String, List<FeedbackResponseCommentAttributes>> comments = new HashMap<>();\n-    public Map<String, List<FeedbackResponseAttributes>> responses = new HashMap<>();\n-    public Map<String, List<FeedbackQuestionAttributes>> questions = new HashMap<>();\n+    // session name to session map", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTAzNDUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/webapi/SearchStudentsActionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0OToyOVrOGfEIUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0OToyOVrOGfEIUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNjcwNw==", "bodyText": "Normally I would say that this shouldn't be included as it is not in the scope of the issue, but I will close one eye this time.", "url": "https://github.com/TEAMMATES/teammates/pull/10150#discussion_r435226707", "createdAt": "2020-06-04T12:49:29Z", "author": {"login": "wkurniawan07"}, "path": "src/test/java/teammates/test/cases/webapi/SearchStudentsActionTest.java", "diffHunk": "@@ -1,6 +1,6 @@\n package teammates.test.cases.webapi;\n \n-import org.junit.Test;\n+import org.testng.annotations.Test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7569ea269a5c906dc9d90ce844fe265a15c8f1"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3763, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}