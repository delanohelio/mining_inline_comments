{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjU3MzY4", "number": 10133, "title": "[#9536] Instructor Courses Page E2E Test", "bodyText": "Part of #9536\nOutline of Solution\n\nAdd UserId parsing to Actions with Backdoor authentication to access data as user.\nAdd getArchivedCourse to Backdoor to verify archived course status.\nAdd InstructorCoursesPage to represent instructor courses page.\nAdd InstructorCoursesPageE2ETest which tests for\n\nVerify loaded data\nVerify statistics\nVerify cannot modify without permissions\nAdd new course\nArchive course\nUnarchive course\nMove active course to recycle bin\nRestore active course\nMove archived course to recycle bin\nRestore archived course\nPermanently delete course\nRestore all\nPermanently delete all", "createdAt": "2020-05-28T18:26:45Z", "url": "https://github.com/TEAMMATES/teammates/pull/10133", "merged": true, "mergeCommit": {"oid": "790d882426871823ab1ef12411a101ee61a378b2"}, "closed": true, "closedAt": "2020-06-15T12:53:11Z", "author": {"login": "jtankw3"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclx2-2gH2gAyNDI0NjU3MzY4OjEyOTQ0MjExY2ZmNmYzZTczZTM4ZThjNGM2MmU4MTBmYWZhNTVkNzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrfq2OgH2gAyNDI0NjU3MzY4OjkyNjUxNTI3OWMyMDg1MmQ1NjBiZTU5ZWIyN2Q5NDJjYzVlYmY5MTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "12944211cff6f3e73e38e8c4c62e810fafa55d75", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/12944211cff6f3e73e38e8c4c62e810fafa55d75", "committedDate": "2020-05-28T18:06:41Z", "message": "Add Backdoor methods to access archived course details"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46e45c17171a03899ed9363649b957d690316291", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/46e45c17171a03899ed9363649b957d690316291", "committedDate": "2020-05-28T18:07:14Z", "message": "Add InstructorCoursesPage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "204c6eedf050e17461415a548b6aa38bc97de153", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/204c6eedf050e17461415a548b6aa38bc97de153", "committedDate": "2020-05-28T18:07:26Z", "message": "Add InstructorCoursesPageE2ETest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef195120db20db2f435bf5167996017395a6fb5e", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ef195120db20db2f435bf5167996017395a6fb5e", "committedDate": "2020-05-28T18:23:48Z", "message": "Standardize lower case for test case description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ac102d43e7d5caf47bc5718d25fe70da194613b", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/1ac102d43e7d5caf47bc5718d25fe70da194613b", "committedDate": "2020-05-28T19:40:58Z", "message": "Update snapshots"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3417535d4f6e4a9db073724a5db593ca8667300d", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/3417535d4f6e4a9db073724a5db593ca8667300d", "committedDate": "2020-05-29T15:27:55Z", "message": "Use system default zoneId for date string comparison"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72428e1874dca2b5f1b1a8810c6852bc7af50832", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/72428e1874dca2b5f1b1a8810c6852bc7af50832", "committedDate": "2020-05-28T20:11:46Z", "message": "Add createdAt timing for  add new course"}, "afterCommit": {"oid": "3417535d4f6e4a9db073724a5db593ca8667300d", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/3417535d4f6e4a9db073724a5db593ca8667300d", "committedDate": "2020-05-29T15:27:55Z", "message": "Use system default zoneId for date string comparison"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c16ef1ba8f3d3a630d21a0e46a4364c5be6b92b", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/3c16ef1ba8f3d3a630d21a0e46a4364c5be6b92b", "committedDate": "2020-05-29T15:29:18Z", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into instructor-courses-e2e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/f6402657ea7d65783097f80902adfd309d605d5d", "committedDate": "2020-05-29T15:53:46Z", "message": "Delete old files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDAyOTk0", "url": "https://github.com/TEAMMATES/teammates/pull/10133#pullrequestreview-422002994", "createdAt": "2020-06-01T16:37:31Z", "commit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozNzozMVrOGdRwpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo0MTo1MlrOGdR52Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1Mjg3MQ==", "bodyText": "Why are these methods here instead of in backdoor? (just like verifyPresentInDatastore for example)", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r433352871", "createdAt": "2020-06-01T16:37:31Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCoursesPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSES_PAGE}.\n+ */\n+public class InstructorCoursesPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes[] courses = new CourseAttributes[3];\n+    CourseAttributes newCourse;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCoursesPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        courses[0] = testData.courses.get(\"CS1101\");\n+        courses[1] = testData.courses.get(\"CS2104\");\n+        courses[2] = testData.courses.get(\"CS2105\");\n+\n+        newCourse = CourseAttributes.builder(\"ICAddE2ETest.CS4100\")\n+                .withName(\"New Course\")\n+                .withTimezone(ZoneId.of(\"Asia/Singapore\"))\n+                .build();\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        BackDoor.deleteCourse(newCourse.getId());\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        String instructorId = testData.accounts.get(\"instructor\").getGoogleId();\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSES_PAGE)\n+                .withUserId(instructorId);\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCoursesPage coursesPage = AppPage.getNewPageInstance(browser, url, InstructorCoursesPage.class);\n+        coursesPage.waitForPageToLoad();\n+\n+        ______TS(\"verify loaded data\");\n+        CourseAttributes[] activeCourses = { courses[0] };\n+        CourseAttributes[] archivedCourses = { courses[1] };\n+        CourseAttributes[] deletedCourses = { courses[2] };\n+\n+        coursesPage.verifyActiveCoursesDetails(activeCourses);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCourses);\n+\n+        ______TS(\"verify statistics\");\n+        coursesPage.verifyActiveCourseStatistics(courses[0], \"1\", \"3\", \"3\", \"1\");\n+\n+        ______TS(\"verify cannot modify without permissions\");\n+        coursesPage.verifyNotModifiable(courses[0].getId());\n+\n+        ______TS(\"add new course\");\n+        CourseAttributes[] activeCoursesWithNewCourse = { newCourse, courses[0] };\n+        String[] expectedLinks = { \"/web/instructor/courses/enroll?courseid=\" + newCourse.getId(),\n+                \"/web/instructor/courses/edit?courseid=\" + newCourse.getId() };\n+        coursesPage.addCourse(newCourse);\n+\n+        coursesPage.verifyStatusMessageWithLinks(\"The course has been added. \"\n+                + \"Click here to add students to the course or click here to add other instructors.\\n\"\n+                + \"If you don't see the course in the list below, please refresh the page after a few moments.\",\n+                expectedLinks);\n+        coursesPage.sortByCourseId();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        verifyPresentInDatastore(newCourse);\n+\n+        ______TS(\"archive course\");\n+        CourseAttributes[] archivedCoursesWithNewCourse = { newCourse, courses[1] };\n+        coursesPage.archiveCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been archived. \"\n+                + \"It will not appear on the home page anymore.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCoursesWithNewCourse);\n+        verifyCourseArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"unarchive course\");\n+        coursesPage.unarchiveCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course has been unarchived.\");\n+        coursesPage.verifyNumArchivedCourses(1);\n+        coursesPage.sortByCourseName();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        verifyCourseNotArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"move active course to recycle bin\");\n+        newCourse.deletedAt = Instant.now();\n+        CourseAttributes[] deletedCoursesWithNewCourse = { newCourse, courses[2] };\n+        coursesPage.moveCourseToRecycleBin(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been deleted. \"\n+                + \"You can restore it from the Recycle Bin manually.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCoursesWithNewCourse);\n+        assertTrue(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"restore active course\");\n+        newCourse.deletedAt = null;\n+        coursesPage.restoreCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been restored.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        coursesPage.sortByCreationDate();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        assertFalse(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"move archived course to recycle bin\");\n+        coursesPage.archiveCourse(newCourse.getId());\n+        newCourse.deletedAt = Instant.now();\n+        coursesPage.moveArchivedCourseToRecycleBin(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been deleted. \"\n+                + \"You can restore it from the Recycle Bin manually.\");\n+        coursesPage.verifyNumArchivedCourses(1);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCoursesWithNewCourse);\n+        assertTrue(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"restore archived course\");\n+        newCourse.deletedAt = null;\n+        coursesPage.restoreCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been restored.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCoursesWithNewCourse);\n+        assertFalse(isCourseInRecycleBin(newCourse.getId()));\n+        verifyCourseArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"permanently delete course\");\n+        coursesPage.moveArchivedCourseToRecycleBin(newCourse.getId());\n+        coursesPage.deleteCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId()\n+                + \" has been permanently deleted.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        verifyAbsentInDatastore(newCourse);\n+\n+        ______TS(\"restore all\");\n+        coursesPage.moveArchivedCourseToRecycleBin(courses[1].getId());\n+        CourseAttributes[] activeCoursesWithRestored = { courses[0], courses[2] };\n+        coursesPage.restoreAllCourses();\n+\n+        coursesPage.verifyStatusMessage(\"All courses have been restored.\");\n+        coursesPage.sortByCourseId();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithRestored);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyNumDeletedCourses(0);\n+        assertFalse(isCourseInRecycleBin(courses[1].getId()));\n+        assertFalse(isCourseInRecycleBin(courses[2].getId()));\n+\n+        ______TS(\"permanently delete all\");\n+        coursesPage.moveArchivedCourseToRecycleBin(courses[1].getId());\n+        coursesPage.moveCourseToRecycleBin(courses[2].getId());\n+        coursesPage.deleteAllCourses();\n+\n+        coursesPage.verifyStatusMessage(\"All courses have been permanently deleted.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyNumArchivedCourses(0);\n+        coursesPage.verifyNumDeletedCourses(0);\n+        verifyAbsentInDatastore(courses[1]);\n+        verifyAbsentInDatastore(courses[2]);\n+\n+    }\n+\n+    private void verifyCourseArchivedInDatastore(String instructorId, CourseAttributes course) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MzUxNQ==", "bodyText": "Is this method really needed? It looks like it is hitting the same endpoint as getCourse.", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r433353515", "createdAt": "2020-06-01T16:38:41Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -282,6 +283,47 @@ public static CourseData getCourseData(String courseId) {\n      */\n     public static CourseAttributes getCourse(String courseId) {\n         CourseData courseData = getCourseData(courseId);\n+        if (courseData == null) {\n+            return null;\n+        }\n+        return CourseAttributes.builder(courseData.getCourseId())\n+                .withName(courseData.getCourseName())\n+                .withTimezone(ZoneId.of(courseData.getTimeZone()))\n+                .build();\n+    }\n+\n+    /**\n+     * Gets archived course data from the datastore.\n+     */\n+    public static CourseData getArchivedCourseData(String instructorId, String courseId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MzY1MQ==", "bodyText": "Why was this added?", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r433353651", "createdAt": "2020-06-01T16:38:56Z", "author": {"login": "rrtheonlyone"}, "path": "src/main/java/teammates/ui/webapi/action/Action.java", "diffHunk": "@@ -97,6 +97,7 @@ public void checkAccessControl() {\n     private void initAuthInfo() {\n         if (Config.BACKDOOR_KEY.equals(req.getHeader(\"Backdoor-Key\"))) {\n             authType = AuthType.ALL_ACCESS;\n+            userInfo = new UserInfo(getRequestParamValue(Const.ParamsNames.USER_ID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1NTIyNQ==", "bodyText": "This is a minor nit - when you hardcode in \"1\" / \"3\" / \"3\" / \"1\", you may run into problems when the course details are modified (you have to change two places instead of one). Perhaps getting it programmatically might be better?", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r433355225", "createdAt": "2020-06-01T16:41:52Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCoursesPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSES_PAGE}.\n+ */\n+public class InstructorCoursesPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes[] courses = new CourseAttributes[3];\n+    CourseAttributes newCourse;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCoursesPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        courses[0] = testData.courses.get(\"CS1101\");\n+        courses[1] = testData.courses.get(\"CS2104\");\n+        courses[2] = testData.courses.get(\"CS2105\");\n+\n+        newCourse = CourseAttributes.builder(\"ICAddE2ETest.CS4100\")\n+                .withName(\"New Course\")\n+                .withTimezone(ZoneId.of(\"Asia/Singapore\"))\n+                .build();\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        BackDoor.deleteCourse(newCourse.getId());\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        String instructorId = testData.accounts.get(\"instructor\").getGoogleId();\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSES_PAGE)\n+                .withUserId(instructorId);\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCoursesPage coursesPage = AppPage.getNewPageInstance(browser, url, InstructorCoursesPage.class);\n+        coursesPage.waitForPageToLoad();\n+\n+        ______TS(\"verify loaded data\");\n+        CourseAttributes[] activeCourses = { courses[0] };\n+        CourseAttributes[] archivedCourses = { courses[1] };\n+        CourseAttributes[] deletedCourses = { courses[2] };\n+\n+        coursesPage.verifyActiveCoursesDetails(activeCourses);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCourses);\n+\n+        ______TS(\"verify statistics\");\n+        coursesPage.verifyActiveCourseStatistics(courses[0], \"1\", \"3\", \"3\", \"1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6402657ea7d65783097f80902adfd309d605d5d"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5644a5feead2a2dfbfe04c2596314bf11506ed61", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/5644a5feead2a2dfbfe04c2596314bf11506ed61", "committedDate": "2020-06-09T15:44:37Z", "message": "Get course statistics programmically"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1446f560e3369007804852172de6a0ef232f0525", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/1446f560e3369007804852172de6a0ef232f0525", "committedDate": "2020-06-09T16:04:37Z", "message": "Add retries for archive course verification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d504cf194292c907305804a41835be5acb3b18c", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/1d504cf194292c907305804a41835be5acb3b18c", "committedDate": "2020-06-09T15:45:49Z", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into instructor-courses-e2e"}, "afterCommit": {"oid": "1446f560e3369007804852172de6a0ef232f0525", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/1446f560e3369007804852172de6a0ef232f0525", "committedDate": "2020-06-09T16:04:37Z", "message": "Add retries for archive course verification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf823a794db96b7fef7d48a64ccae7565b9558c9", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/cf823a794db96b7fef7d48a64ccae7565b9558c9", "committedDate": "2020-06-09T16:05:11Z", "message": "Merge branch 'master' into instructor-courses-e2e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0cd57cb93dcdd903deff1a35c6b1431c1fee372", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/b0cd57cb93dcdd903deff1a35c6b1431c1fee372", "committedDate": "2020-06-09T17:29:31Z", "message": "Use system default timezone for deleted details"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjI2OTk5", "url": "https://github.com/TEAMMATES/teammates/pull/10133#pullrequestreview-430226999", "createdAt": "2020-06-14T15:04:33Z", "commit": {"oid": "b0cd57cb93dcdd903deff1a35c6b1431c1fee372"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjI3Mzgz", "url": "https://github.com/TEAMMATES/teammates/pull/10133#pullrequestreview-430227383", "createdAt": "2020-06-14T15:08:45Z", "commit": {"oid": "b0cd57cb93dcdd903deff1a35c6b1431c1fee372"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNTowODo0NVrOGjdppA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNTowODo0NVrOGjdppA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzOTE0MA==", "bodyText": "Here if you want, can do:\nif (!student.course.equals(course.getId())) {\n   continue;\n}\n\nThen un-indent the statements below!", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r439839140", "createdAt": "2020-06-14T15:08:45Z", "author": {"login": "rrtheonlyone"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCoursesPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSES_PAGE}.\n+ */\n+public class InstructorCoursesPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes[] courses = new CourseAttributes[3];\n+    CourseAttributes newCourse;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCoursesPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        courses[0] = testData.courses.get(\"CS1101\");\n+        courses[1] = testData.courses.get(\"CS2104\");\n+        courses[2] = testData.courses.get(\"CS2105\");\n+\n+        newCourse = CourseAttributes.builder(\"ICAddE2ETest.CS4100\")\n+                .withName(\"New Course\")\n+                .withTimezone(ZoneId.of(\"Asia/Singapore\"))\n+                .build();\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        BackDoor.deleteCourse(newCourse.getId());\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        String instructorId = testData.accounts.get(\"instructor\").getGoogleId();\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSES_PAGE)\n+                .withUserId(instructorId);\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCoursesPage coursesPage = AppPage.getNewPageInstance(browser, url, InstructorCoursesPage.class);\n+        coursesPage.waitForPageToLoad();\n+\n+        ______TS(\"verify loaded data\");\n+        CourseAttributes[] activeCourses = { courses[0] };\n+        CourseAttributes[] archivedCourses = { courses[1] };\n+        CourseAttributes[] deletedCourses = { courses[2] };\n+\n+        coursesPage.verifyActiveCoursesDetails(activeCourses);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCourses);\n+\n+        ______TS(\"verify statistics\");\n+        verifyActiveCourseStatistics(coursesPage, courses[0]);\n+\n+        ______TS(\"verify cannot modify without permissions\");\n+        coursesPage.verifyNotModifiable(courses[0].getId());\n+\n+        ______TS(\"add new course\");\n+        CourseAttributes[] activeCoursesWithNewCourse = { newCourse, courses[0] };\n+        String[] expectedLinks = { \"/web/instructor/courses/enroll?courseid=\" + newCourse.getId(),\n+                \"/web/instructor/courses/edit?courseid=\" + newCourse.getId() };\n+        coursesPage.addCourse(newCourse);\n+\n+        coursesPage.verifyStatusMessageWithLinks(\"The course has been added. \"\n+                + \"Click here to add students to the course or click here to add other instructors.\\n\"\n+                + \"If you don't see the course in the list below, please refresh the page after a few moments.\",\n+                expectedLinks);\n+        coursesPage.sortByCourseId();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        verifyPresentInDatastore(newCourse);\n+\n+        ______TS(\"archive course\");\n+        CourseAttributes[] archivedCoursesWithNewCourse = { newCourse, courses[1] };\n+        coursesPage.archiveCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been archived. \"\n+                + \"It will not appear on the home page anymore.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCoursesWithNewCourse);\n+        verifyCourseArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"unarchive course\");\n+        coursesPage.unarchiveCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course has been unarchived.\");\n+        coursesPage.verifyNumArchivedCourses(1);\n+        coursesPage.sortByCourseName();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        verifyCourseNotArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"move active course to recycle bin\");\n+        newCourse.deletedAt = Instant.now();\n+        CourseAttributes[] deletedCoursesWithNewCourse = { newCourse, courses[2] };\n+        coursesPage.moveCourseToRecycleBin(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been deleted. \"\n+                + \"You can restore it from the Recycle Bin manually.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCoursesWithNewCourse);\n+        assertTrue(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"restore active course\");\n+        newCourse.deletedAt = null;\n+        coursesPage.restoreCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been restored.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        coursesPage.sortByCreationDate();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithNewCourse);\n+        assertFalse(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"move archived course to recycle bin\");\n+        coursesPage.archiveCourse(newCourse.getId());\n+        newCourse.deletedAt = Instant.now();\n+        coursesPage.moveArchivedCourseToRecycleBin(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been deleted. \"\n+                + \"You can restore it from the Recycle Bin manually.\");\n+        coursesPage.verifyNumArchivedCourses(1);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCoursesWithNewCourse);\n+        assertTrue(isCourseInRecycleBin(newCourse.getId()));\n+\n+        ______TS(\"restore archived course\");\n+        newCourse.deletedAt = null;\n+        coursesPage.restoreCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId() + \" has been restored.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCoursesWithNewCourse);\n+        assertFalse(isCourseInRecycleBin(newCourse.getId()));\n+        verifyCourseArchivedInDatastore(instructorId, newCourse);\n+\n+        ______TS(\"permanently delete course\");\n+        coursesPage.moveArchivedCourseToRecycleBin(newCourse.getId());\n+        coursesPage.deleteCourse(newCourse.getId());\n+\n+        coursesPage.verifyStatusMessage(\"The course \" + newCourse.getId()\n+                + \" has been permanently deleted.\");\n+        coursesPage.verifyNumDeletedCourses(1);\n+        verifyAbsentInDatastore(newCourse);\n+\n+        ______TS(\"restore all\");\n+        coursesPage.moveArchivedCourseToRecycleBin(courses[1].getId());\n+        CourseAttributes[] activeCoursesWithRestored = { courses[0], courses[2] };\n+        coursesPage.restoreAllCourses();\n+\n+        coursesPage.verifyStatusMessage(\"All courses have been restored.\");\n+        coursesPage.sortByCourseId();\n+        coursesPage.verifyActiveCoursesDetails(activeCoursesWithRestored);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyNumDeletedCourses(0);\n+        assertFalse(isCourseInRecycleBin(courses[1].getId()));\n+        assertFalse(isCourseInRecycleBin(courses[2].getId()));\n+\n+        ______TS(\"permanently delete all\");\n+        coursesPage.moveArchivedCourseToRecycleBin(courses[1].getId());\n+        coursesPage.moveCourseToRecycleBin(courses[2].getId());\n+        coursesPage.deleteAllCourses();\n+\n+        coursesPage.verifyStatusMessage(\"All courses have been permanently deleted.\");\n+        coursesPage.verifyNumActiveCourses(1);\n+        coursesPage.verifyNumArchivedCourses(0);\n+        coursesPage.verifyNumDeletedCourses(0);\n+        verifyAbsentInDatastore(courses[1]);\n+        verifyAbsentInDatastore(courses[2]);\n+    }\n+\n+    private void verifyActiveCourseStatistics(InstructorCoursesPage coursesPage, CourseAttributes course) {\n+        int numSections = 0;\n+        int numTeams = 0;\n+        int numStudents = 0;\n+        int numUnregistered = 0;\n+        Set<String> sections = new HashSet<>();\n+        Set<String> teams = new HashSet<>();\n+\n+        for (StudentAttributes student : testData.students.values()) {\n+            if (student.course.equals(course.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0cd57cb93dcdd903deff1a35c6b1431c1fee372"}, "originalPosition": 191}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjM3OTA4", "url": "https://github.com/TEAMMATES/teammates/pull/10133#pullrequestreview-430237908", "createdAt": "2020-06-14T17:38:20Z", "commit": {"oid": "b0cd57cb93dcdd903deff1a35c6b1431c1fee372"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNzozODoyMFrOGjebWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNzozODo0MlrOGjebcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1MTg2Ng==", "bodyText": "These can be private?", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r439851866", "createdAt": "2020-06-14T17:38:20Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCoursesPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSES_PAGE}.\n+ */\n+public class InstructorCoursesPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes[] courses = new CourseAttributes[3];\n+    CourseAttributes newCourse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0cd57cb93dcdd903deff1a35c6b1431c1fee372"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1MTg5MA==", "bodyText": "There are items in Const.WebPageURIs that can be used here.", "url": "https://github.com/TEAMMATES/teammates/pull/10133#discussion_r439851890", "createdAt": "2020-06-14T17:38:42Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/InstructorCoursesPageE2ETest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.AppPage;\n+import teammates.e2e.pageobjects.InstructorCoursesPage;\n+import teammates.e2e.pageobjects.InstructorHomePage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_COURSES_PAGE}.\n+ */\n+public class InstructorCoursesPageE2ETest extends BaseE2ETestCase {\n+    CourseAttributes[] courses = new CourseAttributes[3];\n+    CourseAttributes newCourse;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorCoursesPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+\n+        courses[0] = testData.courses.get(\"CS1101\");\n+        courses[1] = testData.courses.get(\"CS2104\");\n+        courses[2] = testData.courses.get(\"CS2105\");\n+\n+        newCourse = CourseAttributes.builder(\"ICAddE2ETest.CS4100\")\n+                .withName(\"New Course\")\n+                .withTimezone(ZoneId.of(\"Asia/Singapore\"))\n+                .build();\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        BackDoor.deleteCourse(newCourse.getId());\n+    }\n+\n+    @Test\n+    public void testAll() {\n+        String instructorId = testData.accounts.get(\"instructor\").getGoogleId();\n+        AppUrl url = createUrl(Const.WebPageURIs.INSTRUCTOR_COURSES_PAGE)\n+                .withUserId(instructorId);\n+        loginAdminToPage(url, InstructorHomePage.class);\n+        InstructorCoursesPage coursesPage = AppPage.getNewPageInstance(browser, url, InstructorCoursesPage.class);\n+        coursesPage.waitForPageToLoad();\n+\n+        ______TS(\"verify loaded data\");\n+        CourseAttributes[] activeCourses = { courses[0] };\n+        CourseAttributes[] archivedCourses = { courses[1] };\n+        CourseAttributes[] deletedCourses = { courses[2] };\n+\n+        coursesPage.verifyActiveCoursesDetails(activeCourses);\n+        coursesPage.verifyArchivedCoursesDetails(archivedCourses);\n+        coursesPage.verifyDeletedCoursesDetails(deletedCourses);\n+\n+        ______TS(\"verify statistics\");\n+        verifyActiveCourseStatistics(coursesPage, courses[0]);\n+\n+        ______TS(\"verify cannot modify without permissions\");\n+        coursesPage.verifyNotModifiable(courses[0].getId());\n+\n+        ______TS(\"add new course\");\n+        CourseAttributes[] activeCoursesWithNewCourse = { newCourse, courses[0] };\n+        String[] expectedLinks = { \"/web/instructor/courses/enroll?courseid=\" + newCourse.getId(),\n+                \"/web/instructor/courses/edit?courseid=\" + newCourse.getId() };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0cd57cb93dcdd903deff1a35c6b1431c1fee372"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d262247428aad646fb1966e2279c604981aea86", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/6d262247428aad646fb1966e2279c604981aea86", "committedDate": "2020-06-15T05:46:24Z", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into instructor-courses-e2e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "920993e699e66b8d3e4a5870a3cd06a6a7a0f633", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/920993e699e66b8d3e4a5870a3cd06a6a7a0f633", "committedDate": "2020-06-15T06:10:58Z", "message": "Fix code quality issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTc4Mjc2", "url": "https://github.com/TEAMMATES/teammates/pull/10133#pullrequestreview-430578276", "createdAt": "2020-06-15T12:04:52Z", "commit": {"oid": "920993e699e66b8d3e4a5870a3cd06a6a7a0f633"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "926515279c20852d560be59eb27d942cc5ebf917", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/926515279c20852d560be59eb27d942cc5ebf917", "committedDate": "2020-06-15T12:18:41Z", "message": "Merge branch 'master' into instructor-courses-e2e"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4324, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}