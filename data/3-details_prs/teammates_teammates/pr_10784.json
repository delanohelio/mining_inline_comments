{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNDk0MDQz", "number": 10784, "title": "[#9536] Migrate remaining Admin E2E tests", "bodyText": "Part of #9536\n\nAutomated session reminders (cron job URLs)\n\nSame test cases, same test data as before\nThere is no need to use support email as the target email, and this in fact breaks the black box as we need to get that value from production app's config. Thus the target email is changed to student1's account.\n\n\nAdmin sessions page\n\nPrevious test only checked for hide/show filter and table headers. Current test checks for loaded data, hide/show filter, and querying ongoing sessions given a time window.\nTest data is designed with pre-determined date so that querying ongoing sessions is guaranteed to hit them, and only those test data will be verified as everything else is unpredictable (depending on the state of the actual DB at the time of testing)\nAdded a feature in the actual page to choose the time zone in sessions table\n\nThis allows consistent test pass and also an additional feature for admin, so it's two wins at once\n\n\nAdmin account details page\n\nRenamed to admin accounts page as per the URL, although admittedly accounts (focus on the plural) is not the most accurate name either\nPrevious test checked for loaded data and removing from course. Current test builds on that and adds checks for downgrading account and removing account entirely.", "createdAt": "2020-10-14T16:25:16Z", "url": "https://github.com/TEAMMATES/teammates/pull/10784", "merged": true, "mergeCommit": {"oid": "036afd325b6fc82933e3d01877920ffc098c0714"}, "closed": true, "closedAt": "2020-10-20T23:02:52Z", "author": {"login": "wkurniawan07"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSfyW6AFqTUwODUyNjU2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTbUxHgFqTUxMDk4NzM5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NTI2NTYy", "url": "https://github.com/TEAMMATES/teammates/pull/10784#pullrequestreview-508526562", "createdAt": "2020-10-14T16:29:55Z", "commit": {"oid": "19a148650beac33a322fb47a422045d5427c279f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjoyOTo1NVrOHhbcnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjoyOTo1NVrOHhbcnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxNDc0OQ==", "bodyText": "Aware that there is verifyEmailSent method. However currently there are places whereby even verifyEmailSent will not work due to wrongly configured email (i.e. forget to append @gmail.com), so we might as well fix this together when fixing the above.", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r504814749", "createdAt": "2020-10-14T16:29:55Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/AutomatedSessionRemindersTest.java", "diffHunk": "@@ -1,43 +1,40 @@\n-package teammates.test.cases.browsertests;\n+package teammates.e2e.cases.e2e;\n \n import org.testng.annotations.Test;\n \n import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n import teammates.common.util.AppUrl;\n-import teammates.common.util.Config;\n import teammates.common.util.Const;\n import teammates.common.util.TimeHelper;\n import teammates.common.util.TimeHelperExtension;\n-import teammates.e2e.util.Priority;\n-import teammates.test.pageobjects.GenericAppPage;\n+import teammates.e2e.pageobjects.GenericAppPage;\n+import teammates.e2e.util.TestProperties;\n \n /**\n  * SUT: {@link Const.CronJobURIs#AUTOMATED_FEEDBACK_OPENING_REMINDERS},\n  *      {@link Const.CronJobURIs#AUTOMATED_FEEDBACK_CLOSING_REMINDERS},\n  *      {@link Const.CronJobURIs#AUTOMATED_FEEDBACK_CLOSED_REMINDERS},\n  *      {@link Const.CronJobURIs#AUTOMATED_FEEDBACK_PUBLISHED_REMINDERS}.\n  */\n-@Priority(5)\n-public class AutomatedSessionRemindersTest extends BaseLegacyUiTestCase {\n+public class AutomatedSessionRemindersTest extends BaseE2ETestCase {\n \n     @Override\n     protected void prepareTestData() {\n         testData = loadDataBundle(\"/AutomatedSessionRemindersTest.json\");\n \n-        /*\n-         * In this test, we set the email address of the accounts to be the same as the\n-         * support email address. When running the test against a production server,\n-         * email alerts will be sent to the specified support email address.\n-         * The tester should manually check the email box after running the test suite.\n-         */\n-\n-        testData.accounts.get(\"instructorWithEvals\").email = Config.SUPPORT_EMAIL;\n-        testData.instructors.get(\"AutSessRem.instructor\").email = Config.SUPPORT_EMAIL;\n-        testData.students.get(\"alice.tmms@AutSessRem.course\").email = Config.SUPPORT_EMAIL;\n-        testData.feedbackSessions.get(\"closedSession\").setCreatorEmail(Config.SUPPORT_EMAIL);\n-        testData.feedbackSessions.get(\"closingSession\").setCreatorEmail(Config.SUPPORT_EMAIL);\n-        testData.feedbackSessions.get(\"openingSession\").setCreatorEmail(Config.SUPPORT_EMAIL);\n-        testData.feedbackSessions.get(\"publishedSession\").setCreatorEmail(Config.SUPPORT_EMAIL);\n+        // When running the test against a production server, email alerts will be sent\n+        // to the specified email address\n+        // The tester should manually check the email box after running the test suite\n+        // TODO check if we can automate this checking process", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19a148650beac33a322fb47a422045d5427c279f"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODcxNTkx", "url": "https://github.com/TEAMMATES/teammates/pull/10784#pullrequestreview-510871591", "createdAt": "2020-10-17T03:55:54Z", "commit": {"oid": "3936c91b552a4a368192f8119c7d241f4d797c14"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMzo1NTo1NVrOHjUAqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwNDoyNTozMlrOHjUJdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MDA1Nw==", "bodyText": "I believe interactions with Backdoor are abstracted in BaseTestCaseWithBackDoorApiAccess so it may be better to add a getAccount() method there.", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506790057", "createdAt": "2020-10-17T03:55:55Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package teammates.e2e.cases.e2e;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AdminAccountsPage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n+ */\n+public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        String googleId = \"AAMgtE2eT.instr2\";\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n+                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n+        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n+\n+        AccountAttributes account = BackDoor.getAccount(googleId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3936c91b552a4a368192f8119c7d241f4d797c14"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MDI3MQ==", "bodyText": "Can consider using the existing verifyPresentInDatastore and verifyAbsentInDatastore which has the retry functionality", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506790271", "createdAt": "2020-10-17T03:59:25Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package teammates.e2e.cases.e2e;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AdminAccountsPage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n+ */\n+public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        String googleId = \"AAMgtE2eT.instr2\";\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n+                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n+        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n+\n+        AccountAttributes account = BackDoor.getAccount(googleId);\n+        accountsPage.verifyAccountDetails(account);\n+\n+        ______TS(\"action: remove instructor from course\");\n+\n+        String courseId = \"AAMgtE2eT.CS2103\";\n+        String email = \"AAMgtE2eT.instr2@gmail.tmt\";\n+\n+        assertNotNull(BackDoor.getInstructor(courseId, email));\n+        accountsPage.clickRemoveInstructorFromCourse(courseId);\n+        assertNull(BackDoor.getInstructor(courseId, email));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3936c91b552a4a368192f8119c7d241f4d797c14"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MTE0NQ==", "bodyText": "Might be better to have verifyStatusMessage in AdminAccountsPageE2ETest instead as it does not feel like it belongs to these action related methods.", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506791145", "createdAt": "2020-10-17T04:10:21Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+\n+/**\n+ * Page Object Model for the admin accounts page.\n+ */\n+public class AdminAccountsPage extends AppPage {\n+\n+    @FindBy(id = \"account-google-id\")\n+    private WebElement accountId;\n+\n+    @FindBy(id = \"account-name\")\n+    private WebElement accountName;\n+\n+    @FindBy(id = \"account-email\")\n+    private WebElement accountEmail;\n+\n+    @FindBy(id = \"account-institute\")\n+    private WebElement accountInstitute;\n+\n+    @FindBy(id = \"account-is-instructor\")\n+    private WebElement accountIsInstructor;\n+\n+    @FindBy(id = \"instructor-table\")\n+    private WebElement instructorTable;\n+\n+    @FindBy(id = \"student-table\")\n+    private WebElement studentTable;\n+\n+    @FindBy(id = \"btn-downgrade-account\")\n+    private WebElement downgradeAccountButton;\n+\n+    @FindBy(id = \"btn-delete-account\")\n+    private WebElement deleteAccountButton;\n+\n+    public AdminAccountsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageSource().contains(\"Account Details\");\n+    }\n+\n+    public void verifyAccountDetails(AccountAttributes account) {\n+        assertEquals(account.getGoogleId(), accountId.getText());\n+        assertEquals(account.getName(), accountName.getText());\n+        assertEquals(account.getEmail(), accountEmail.getText());\n+        assertEquals(account.getInstitute(), accountInstitute.getText());\n+        assertEquals(account.isInstructor(), Boolean.parseBoolean(accountIsInstructor.getText()));\n+    }\n+\n+    public void clickRemoveInstructorFromCourse(String courseId) {\n+        List<WebElement> instructorRows =\n+                instructorTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n+\n+        WebElement deleteButton = null;\n+        for (WebElement instructorRow : instructorRows) {\n+            List<WebElement> cells = instructorRow.findElements(By.tagName(\"td\"));\n+            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n+                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n+            }\n+        }\n+\n+        if (deleteButton == null) {\n+            fail(\"Instructor to be deleted is not found\");\n+        }\n+        click(deleteButton);\n+        waitForPageToLoad(true);\n+        verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3936c91b552a4a368192f8119c7d241f4d797c14"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MTE2NQ==", "bodyText": "Should be studentRows here.", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506791165", "createdAt": "2020-10-17T04:10:48Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+\n+/**\n+ * Page Object Model for the admin accounts page.\n+ */\n+public class AdminAccountsPage extends AppPage {\n+\n+    @FindBy(id = \"account-google-id\")\n+    private WebElement accountId;\n+\n+    @FindBy(id = \"account-name\")\n+    private WebElement accountName;\n+\n+    @FindBy(id = \"account-email\")\n+    private WebElement accountEmail;\n+\n+    @FindBy(id = \"account-institute\")\n+    private WebElement accountInstitute;\n+\n+    @FindBy(id = \"account-is-instructor\")\n+    private WebElement accountIsInstructor;\n+\n+    @FindBy(id = \"instructor-table\")\n+    private WebElement instructorTable;\n+\n+    @FindBy(id = \"student-table\")\n+    private WebElement studentTable;\n+\n+    @FindBy(id = \"btn-downgrade-account\")\n+    private WebElement downgradeAccountButton;\n+\n+    @FindBy(id = \"btn-delete-account\")\n+    private WebElement deleteAccountButton;\n+\n+    public AdminAccountsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageSource().contains(\"Account Details\");\n+    }\n+\n+    public void verifyAccountDetails(AccountAttributes account) {\n+        assertEquals(account.getGoogleId(), accountId.getText());\n+        assertEquals(account.getName(), accountName.getText());\n+        assertEquals(account.getEmail(), accountEmail.getText());\n+        assertEquals(account.getInstitute(), accountInstitute.getText());\n+        assertEquals(account.isInstructor(), Boolean.parseBoolean(accountIsInstructor.getText()));\n+    }\n+\n+    public void clickRemoveInstructorFromCourse(String courseId) {\n+        List<WebElement> instructorRows =\n+                instructorTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n+\n+        WebElement deleteButton = null;\n+        for (WebElement instructorRow : instructorRows) {\n+            List<WebElement> cells = instructorRow.findElements(By.tagName(\"td\"));\n+            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n+                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n+            }\n+        }\n+\n+        if (deleteButton == null) {\n+            fail(\"Instructor to be deleted is not found\");\n+        }\n+        click(deleteButton);\n+        waitForPageToLoad(true);\n+        verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n+    }\n+\n+    public void clickRemoveStudentFromCourse(String courseId) {\n+        List<WebElement> instructorRows =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3936c91b552a4a368192f8119c7d241f4d797c14"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MjA1MQ==", "bodyText": "Is it possible to shift this verification into AdminSessionsPage as I believe all interaction with WebElements should be hidden in the page object and we should avoid having getters for any WebElements. It can also be reused for the below testcase.", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506792051", "createdAt": "2020-10-17T04:22:37Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.TimeHelper;\n+import teammates.e2e.pageobjects.AdminSessionsPage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_SESSIONS_PAGE}.\n+ */\n+public class AdminSessionsPageE2ETest extends BaseE2ETestCase {\n+    private FeedbackSessionAttributes openFeedbackSession;\n+    private FeedbackSessionAttributes awaitingFeedbackSession;\n+    private FeedbackSessionAttributes futureFeedbackSession;\n+    private Instant instant3DaysAgo = TimeHelper.getInstantDaysOffsetFromNow(-3);\n+    private Instant instantTomorrow = TimeHelper.getInstantDaysOffsetFromNow(1);\n+    private Instant instant3DaysLater = TimeHelper.getInstantDaysOffsetFromNow(3);\n+    private Instant instantNextWeek = TimeHelper.getInstantDaysOffsetFromNow(7);\n+    private Instant instant10DaysLater = TimeHelper.getInstantDaysOffsetFromNow(10);\n+    private Instant instant14DaysLater = TimeHelper.getInstantDaysOffsetFromNow(14);\n+    private Instant instant24DaysLater = TimeHelper.getInstantDaysOffsetFromNow(24);\n+\n+    private String formatDateTime(Instant instant, String timeZone) {\n+        return DateTimeFormatter\n+                .ofPattern(\"EEE, dd MMM YYYY, hh:mm a\")\n+                .format(instant.atZone(ZoneId.of(timeZone)))\n+                .replaceFirst(\" AM$\", \" am\")\n+                .replaceFirst(\" PM$\", \" pm\");\n+    }\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminSessionsPageE2ETest.json\");\n+\n+        // To guarantee that there will always be some \"ongoing sessions\" listed,\n+        // the test data is injected with date/time values relative to the time where the test takes place\n+\n+        openFeedbackSession = testData.feedbackSessions.get(\"session1InCourse1\");\n+        openFeedbackSession.setStartTime(instant3DaysAgo);\n+        openFeedbackSession.setCreatedTime(instant3DaysAgo);\n+        openFeedbackSession.setSessionVisibleFromTime(instant3DaysAgo);\n+        openFeedbackSession.setEndTime(instant3DaysLater);\n+        openFeedbackSession.setResultsVisibleFromTime(instant3DaysLater);\n+\n+        awaitingFeedbackSession = testData.feedbackSessions.get(\"session2InCourse1\");\n+        awaitingFeedbackSession.setStartTime(instantTomorrow);\n+        awaitingFeedbackSession.setCreatedTime(instant3DaysAgo);\n+        awaitingFeedbackSession.setSessionVisibleFromTime(instantTomorrow);\n+        awaitingFeedbackSession.setEndTime(instant3DaysLater);\n+        awaitingFeedbackSession.setResultsVisibleFromTime(instant3DaysLater);\n+\n+        futureFeedbackSession = testData.feedbackSessions.get(\"session3InCourse1\");\n+        futureFeedbackSession.setStartTime(instant10DaysLater);\n+        futureFeedbackSession.setCreatedTime(instant3DaysAgo);\n+        futureFeedbackSession.setSessionVisibleFromTime(instant10DaysLater);\n+        futureFeedbackSession.setEndTime(instant24DaysLater);\n+        futureFeedbackSession.setResultsVisibleFromTime(instant24DaysLater);\n+\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl sessionsUrl = createUrl(Const.WebPageURIs.ADMIN_SESSIONS_PAGE);\n+        AdminSessionsPage sessionsPage = loginAdminToPage(sessionsUrl, AdminSessionsPage.class);\n+        sessionsPage.waitUntilAnimationFinish();\n+\n+        String tableTimezone = sessionsPage.getSessionsTableTimezone();\n+\n+        List<WebElement> ongoingSessionRows = sessionsPage.getOngoingSessionsRows();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3936c91b552a4a368192f8119c7d241f4d797c14"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MjMxMA==", "bodyText": "I think we should avoid returning WebElements as we want to minimize interaction outside of the page object.", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506792310", "createdAt": "2020-10-17T04:25:32Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.e2e.pageobjects;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+/**\n+ * Page Object Model for the admin sessions page.\n+ */\n+public class AdminSessionsPage extends AppPage {\n+\n+    @FindBy(id = \"btn-toggle-filter\")\n+    private WebElement toggleFilterButton;\n+\n+    @FindBy(id = \"ongoing-sessions-table\")\n+    private WebElement ongoingSessionsTable;\n+\n+    public AdminSessionsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageSource().contains(\"Ongoing Sessions\");\n+    }\n+\n+    public List<WebElement> getOngoingSessionsRows() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3936c91b552a4a368192f8119c7d241f4d797c14"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3936c91b552a4a368192f8119c7d241f4d797c14", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/3936c91b552a4a368192f8119c7d241f4d797c14", "committedDate": "2020-10-14T17:57:42Z", "message": "Add feature to choose time zone for times displayed in sessions table"}, "afterCommit": {"oid": "00e9352bf71f91ac4d9c14035b8510361747ee46", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/00e9352bf71f91ac4d9c14035b8510361747ee46", "committedDate": "2020-10-17T07:41:24Z", "message": "Abstract out checking of session rows to page object class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00e9352bf71f91ac4d9c14035b8510361747ee46", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/00e9352bf71f91ac4d9c14035b8510361747ee46", "committedDate": "2020-10-17T07:41:24Z", "message": "Abstract out checking of session rows to page object class"}, "afterCommit": {"oid": "8154021ab829ca217ed19532a531c703282e37a8", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/8154021ab829ca217ed19532a531c703282e37a8", "committedDate": "2020-10-17T08:32:43Z", "message": "Abstract out checking of session rows to page object class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8926f4f0b61ef7379bf0cb5750c81a3f4a75b225", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/8926f4f0b61ef7379bf0cb5750c81a3f4a75b225", "committedDate": "2020-10-17T12:52:34Z", "message": "Move AutomatedSessionRemindersTest to new E2E test package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc7b6ee363a954760287e509b0c835ebef743280", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/cc7b6ee363a954760287e509b0c835ebef743280", "committedDate": "2020-10-17T12:52:34Z", "message": "Add minimum E2E test for admin sessions page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb8ef0f52d0c562848f404e3094d8e87b154032", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ecb8ef0f52d0c562848f404e3094d8e87b154032", "committedDate": "2020-10-17T12:52:34Z", "message": "Add test case for querying future session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa04aeaace8f2eb17bd2d2fc4f49534d1848f6d", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/4aa04aeaace8f2eb17bd2d2fc4f49534d1848f6d", "committedDate": "2020-10-17T12:52:34Z", "message": "Add minimum E2E test for admin accounts page"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTg0NDE2", "url": "https://github.com/TEAMMATES/teammates/pull/10784#pullrequestreview-510984416", "createdAt": "2020-10-17T13:04:59Z", "commit": {"oid": "8154021ab829ca217ed19532a531c703282e37a8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzowNDo1OVrOHjdP4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzowNjoxNlrOHjdQTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0MTQwOA==", "bodyText": "Actually the getInstructor method will get the InstructorAttribute from the datastore so it is not necessary to verify present again after you call getInstructor. I think you can either get the InstructorAttribute from testData instead or you can just skip the verification.", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506941408", "createdAt": "2020-10-17T13:04:59Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package teammates.e2e.cases.e2e;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AdminAccountsPage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n+ */\n+public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        String googleId = \"AAMgtE2eT.instr2\";\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n+                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n+        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n+\n+        AccountAttributes account = getAccount(googleId);\n+        accountsPage.verifyAccountDetails(account);\n+\n+        ______TS(\"action: remove instructor from course\");\n+\n+        String courseId = \"AAMgtE2eT.CS2103\";\n+        String email = \"AAMgtE2eT.instr2@gmail.tmt\";\n+\n+        InstructorAttributes instructor = getInstructor(courseId, email);\n+        verifyPresentInDatastore(instructor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8154021ab829ca217ed19532a531c703282e37a8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0MTUxOA==", "bodyText": "Same for getStudent and actually we do not have to import BackDoor here because of the getStudent method in BaseTestCaseWithBackDoorApiAccess", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506941518", "createdAt": "2020-10-17T13:06:16Z", "author": {"login": "jtankw3"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package teammates.e2e.cases.e2e;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AdminAccountsPage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n+ */\n+public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        String googleId = \"AAMgtE2eT.instr2\";\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n+                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n+        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n+\n+        AccountAttributes account = getAccount(googleId);\n+        accountsPage.verifyAccountDetails(account);\n+\n+        ______TS(\"action: remove instructor from course\");\n+\n+        String courseId = \"AAMgtE2eT.CS2103\";\n+        String email = \"AAMgtE2eT.instr2@gmail.tmt\";\n+\n+        InstructorAttributes instructor = getInstructor(courseId, email);\n+        verifyPresentInDatastore(instructor);\n+        accountsPage.clickRemoveInstructorFromCourse(courseId);\n+        accountsPage.verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n+        verifyAbsentInDatastore(instructor);\n+\n+        ______TS(\"action: remove student from course\");\n+\n+        StudentAttributes student = BackDoor.getStudent(courseId, email);\n+        verifyPresentInDatastore(student);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8154021ab829ca217ed19532a531c703282e37a8"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "258427b99b0f9d815af913039fa649c4a1bd4156", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/258427b99b0f9d815af913039fa649c4a1bd4156", "committedDate": "2020-10-17T13:23:36Z", "message": "Add test cases for removing/downgrading accounts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec864a90bbb691d72a2738d7c4d5558e66b3345b", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/ec864a90bbb691d72a2738d7c4d5558e66b3345b", "committedDate": "2020-10-17T13:23:36Z", "message": "Add feature to choose time zone for times displayed in sessions table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d278d62aff7748c79f6f32491cebcc01116545a6", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d278d62aff7748c79f6f32491cebcc01116545a6", "committedDate": "2020-10-17T13:23:36Z", "message": "Abstract out checking of session rows to page object class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8154021ab829ca217ed19532a531c703282e37a8", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/8154021ab829ca217ed19532a531c703282e37a8", "committedDate": "2020-10-17T08:32:43Z", "message": "Abstract out checking of session rows to page object class"}, "afterCommit": {"oid": "d278d62aff7748c79f6f32491cebcc01116545a6", "author": {"user": {"login": "wkurniawan07", "name": "Wilson Kurniawan"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d278d62aff7748c79f6f32491cebcc01116545a6", "committedDate": "2020-10-17T13:23:36Z", "message": "Abstract out checking of session rows to page object class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTg3Mzk2", "url": "https://github.com/TEAMMATES/teammates/pull/10784#pullrequestreview-510987396", "createdAt": "2020-10-17T13:51:55Z", "commit": {"oid": "d278d62aff7748c79f6f32491cebcc01116545a6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4200, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}