{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NDQwNDAz", "number": 10812, "title": "[#9536] Update docs for E2E testing", "bodyText": "Part of #9536\nOutline of Solution\n\nUpdate development.md to reflect the changes to testing with the production server as it is not possible to test with the whole test suite anymore because of the login issues\nAdd e2e-testing.md which describes the general ideas behind e2e testing in TEAMMATES\nMention e2e-testing.md in README.md", "createdAt": "2020-10-24T14:32:33Z", "url": "https://github.com/TEAMMATES/teammates/pull/10812", "merged": true, "mergeCommit": {"oid": "e7d18b04c3fccd27a380fa60b10e5d87a5f2ff2d"}, "closed": true, "closedAt": "2020-11-03T05:31:56Z", "author": {"login": "jtankw3"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVsCKnAH2gAyNTA5NDQwNDAzOmQyNzllNWJkYzA1MmQ4NjJmZGEwZjU2NjExMWE4ZTJjODE2MWZjYjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYvMRzAH2gAyNTA5NDQwNDAzOjY0ZTI3NzkyOTE5ZDdlNWMwNjJkMDA0YmI4M2Q1YjU0ZTY3ZTYzNGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d279e5bdc052d862fda0f566111a8e2c8161fcb5", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d279e5bdc052d862fda0f566111a8e2c8161fcb5", "committedDate": "2020-10-24T14:27:50Z", "message": "Update docs for E2E testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/4db2cec53f074bce17d03b058a88b377eb781e19", "committedDate": "2020-10-24T14:32:42Z", "message": "Merge branch 'master' into e2e-docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzA0NTA4", "url": "https://github.com/TEAMMATES/teammates/pull/10812#pullrequestreview-516304508", "createdAt": "2020-10-24T20:16:31Z", "commit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQyMDoxNjozMVrOHn0G3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwMDozMTo0NVrOHn1Svg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxMDIzNg==", "bodyText": "bunch -> bundle", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511510236", "createdAt": "2020-10-24T20:16:31Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+To set up and run E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/development.md#testing).  \n+\n+## Creating E2E tests\n+  \n+As E2E tests should be written from the end user perspective, each test case should reflect some user workflow.   \n+  \n+In TEAMMATES, E2E test cases are organized by page. Thus, for each page:  \n+1. Identify the important user workflows  \n+1. Simulate the user actions involved in the workflow by interacting with the UI elements.  \n+1. Assert the expected conditions are present after the interaction.  \n+  \n+[Selenium](https://www.selenium.dev/) is used to locate and interact with elements in the UI.   \n+  \n+All E2E test classes inherit from `BaseE2ETestCase` which contains methods that are common to most test cases, such as preparing the `Browser` object used for testing.   \n+  \n+  \n+## Page Object Pattern\n+  \n+In order to make E2E testing more robust to UI changes, the Page Object Pattern is adopted.  \n+  \n+Each page in TEAMMATES is represented by a page object class. The page object class abstracts interactions with UI elements and only exposes the functionality of each page as methods.   \n+- This way only the page object classes require updating when there are UI changes  \n+- Without Page Object Pattern, all test cases that use the changed UI element would require updating  \n+  \n+To maximise the effectiveness of Page Object Pattern, interaction with UI elements should not occur outside the page objects.   \n+  \n+  \n+## Creating Page Objects\n+  \n+The page object should have methods to represent the main functionality of the page that testers can use to simulate user actions.   \n+- The public methods for page objects should avoid exposing the UI elements it interacts with and instead focus on the functionality of the webpage.   \n+- For example, instead of having methods like `fillSearchBox` and `clickSearchButton`, it is better to have a method `searchForInstructor` which hides the UI elements used.    \n+\n+All Page Object classes inherit from `AppPage` which contains methods that are common for interacting with the web elements such as filling in textboxes.   \n+  \n+  \n+## Things to avoid when writing E2E \n+  \n+1. **Testing based on implementation** - The focus should be on user actions instead of implementation details. Therefore, black box testing should be adopted and test cases should be designed around use cases.   \n+1. **Exception testing** - Testing edge cases with E2E tests should be avoided. This is because E2E tests are expensive to run and not that effective for isolating bugs. Hence it is not the optimal to use E2E tests to look for exceptions.   \n+1. **Not following \u201cTell Don\u2019t Ask\" Principle** - Instead of \u201casking\u201d for data from the page objects and performing operations on them, \u201ctell\u201d the page object to do the operations. This is mostly seen in the verification methods where assertions are done in the page object instead of in the test case. This improves readability and maintainability as data and behavior are placed together.  \n+  \n+## FAQ  \n+  \n+**Why are all the tests done in one `testAll()` method?**  \n+We bunch together everything as one test case instead of having multiple test cases. The advantage is that the time for the whole test class will be reduced because we minimize repetitive per-method setup/teardown. The downside is that it increases the time spent on re-running failed tests as the whole class has to be re-run. We opt for this approach because we expect tests to pass more frequently than to fail.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxMDI3Ng==", "bodyText": "Now that we are sure we're going to do this, let's make this an abstract method under BaseE2ETestCase", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511510276", "createdAt": "2020-10-24T20:16:48Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+To set up and run E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/development.md#testing).  \n+\n+## Creating E2E tests\n+  \n+As E2E tests should be written from the end user perspective, each test case should reflect some user workflow.   \n+  \n+In TEAMMATES, E2E test cases are organized by page. Thus, for each page:  \n+1. Identify the important user workflows  \n+1. Simulate the user actions involved in the workflow by interacting with the UI elements.  \n+1. Assert the expected conditions are present after the interaction.  \n+  \n+[Selenium](https://www.selenium.dev/) is used to locate and interact with elements in the UI.   \n+  \n+All E2E test classes inherit from `BaseE2ETestCase` which contains methods that are common to most test cases, such as preparing the `Browser` object used for testing.   \n+  \n+  \n+## Page Object Pattern\n+  \n+In order to make E2E testing more robust to UI changes, the Page Object Pattern is adopted.  \n+  \n+Each page in TEAMMATES is represented by a page object class. The page object class abstracts interactions with UI elements and only exposes the functionality of each page as methods.   \n+- This way only the page object classes require updating when there are UI changes  \n+- Without Page Object Pattern, all test cases that use the changed UI element would require updating  \n+  \n+To maximise the effectiveness of Page Object Pattern, interaction with UI elements should not occur outside the page objects.   \n+  \n+  \n+## Creating Page Objects\n+  \n+The page object should have methods to represent the main functionality of the page that testers can use to simulate user actions.   \n+- The public methods for page objects should avoid exposing the UI elements it interacts with and instead focus on the functionality of the webpage.   \n+- For example, instead of having methods like `fillSearchBox` and `clickSearchButton`, it is better to have a method `searchForInstructor` which hides the UI elements used.    \n+\n+All Page Object classes inherit from `AppPage` which contains methods that are common for interacting with the web elements such as filling in textboxes.   \n+  \n+  \n+## Things to avoid when writing E2E \n+  \n+1. **Testing based on implementation** - The focus should be on user actions instead of implementation details. Therefore, black box testing should be adopted and test cases should be designed around use cases.   \n+1. **Exception testing** - Testing edge cases with E2E tests should be avoided. This is because E2E tests are expensive to run and not that effective for isolating bugs. Hence it is not the optimal to use E2E tests to look for exceptions.   \n+1. **Not following \u201cTell Don\u2019t Ask\" Principle** - Instead of \u201casking\u201d for data from the page objects and performing operations on them, \u201ctell\u201d the page object to do the operations. This is mostly seen in the verification methods where assertions are done in the page object instead of in the test case. This improves readability and maintainability as data and behavior are placed together.  \n+  \n+## FAQ  \n+  \n+**Why are all the tests done in one `testAll()` method?**  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxMDMxNA==", "bodyText": "json -> JSON (capitalize)", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511510314", "createdAt": "2020-10-24T20:17:17Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+To set up and run E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/development.md#testing).  \n+\n+## Creating E2E tests\n+  \n+As E2E tests should be written from the end user perspective, each test case should reflect some user workflow.   \n+  \n+In TEAMMATES, E2E test cases are organized by page. Thus, for each page:  \n+1. Identify the important user workflows  \n+1. Simulate the user actions involved in the workflow by interacting with the UI elements.  \n+1. Assert the expected conditions are present after the interaction.  \n+  \n+[Selenium](https://www.selenium.dev/) is used to locate and interact with elements in the UI.   \n+  \n+All E2E test classes inherit from `BaseE2ETestCase` which contains methods that are common to most test cases, such as preparing the `Browser` object used for testing.   \n+  \n+  \n+## Page Object Pattern\n+  \n+In order to make E2E testing more robust to UI changes, the Page Object Pattern is adopted.  \n+  \n+Each page in TEAMMATES is represented by a page object class. The page object class abstracts interactions with UI elements and only exposes the functionality of each page as methods.   \n+- This way only the page object classes require updating when there are UI changes  \n+- Without Page Object Pattern, all test cases that use the changed UI element would require updating  \n+  \n+To maximise the effectiveness of Page Object Pattern, interaction with UI elements should not occur outside the page objects.   \n+  \n+  \n+## Creating Page Objects\n+  \n+The page object should have methods to represent the main functionality of the page that testers can use to simulate user actions.   \n+- The public methods for page objects should avoid exposing the UI elements it interacts with and instead focus on the functionality of the webpage.   \n+- For example, instead of having methods like `fillSearchBox` and `clickSearchButton`, it is better to have a method `searchForInstructor` which hides the UI elements used.    \n+\n+All Page Object classes inherit from `AppPage` which contains methods that are common for interacting with the web elements such as filling in textboxes.   \n+  \n+  \n+## Things to avoid when writing E2E \n+  \n+1. **Testing based on implementation** - The focus should be on user actions instead of implementation details. Therefore, black box testing should be adopted and test cases should be designed around use cases.   \n+1. **Exception testing** - Testing edge cases with E2E tests should be avoided. This is because E2E tests are expensive to run and not that effective for isolating bugs. Hence it is not the optimal to use E2E tests to look for exceptions.   \n+1. **Not following \u201cTell Don\u2019t Ask\" Principle** - Instead of \u201casking\u201d for data from the page objects and performing operations on them, \u201ctell\u201d the page object to do the operations. This is mostly seen in the verification methods where assertions are done in the page object instead of in the test case. This improves readability and maintainability as data and behavior are placed together.  \n+  \n+## FAQ  \n+  \n+**Why are all the tests done in one `testAll()` method?**  \n+We bunch together everything as one test case instead of having multiple test cases. The advantage is that the time for the whole test class will be reduced because we minimize repetitive per-method setup/teardown. The downside is that it increases the time spent on re-running failed tests as the whole class has to be re-run. We opt for this approach because we expect tests to pass more frequently than to fail.  \n+  \n+**Why is there one json file for each test case?**  \n+Each test case has its own json file and the data inside has a unique prefix to prevent clashes in the database that may cause test failure, since tests are run concurrently.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxMDM4OQ==", "bodyText": "writing E2E tests", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511510389", "createdAt": "2020-10-24T20:18:27Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+To set up and run E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/development.md#testing).  \n+\n+## Creating E2E tests\n+  \n+As E2E tests should be written from the end user perspective, each test case should reflect some user workflow.   \n+  \n+In TEAMMATES, E2E test cases are organized by page. Thus, for each page:  \n+1. Identify the important user workflows  \n+1. Simulate the user actions involved in the workflow by interacting with the UI elements.  \n+1. Assert the expected conditions are present after the interaction.  \n+  \n+[Selenium](https://www.selenium.dev/) is used to locate and interact with elements in the UI.   \n+  \n+All E2E test classes inherit from `BaseE2ETestCase` which contains methods that are common to most test cases, such as preparing the `Browser` object used for testing.   \n+  \n+  \n+## Page Object Pattern\n+  \n+In order to make E2E testing more robust to UI changes, the Page Object Pattern is adopted.  \n+  \n+Each page in TEAMMATES is represented by a page object class. The page object class abstracts interactions with UI elements and only exposes the functionality of each page as methods.   \n+- This way only the page object classes require updating when there are UI changes  \n+- Without Page Object Pattern, all test cases that use the changed UI element would require updating  \n+  \n+To maximise the effectiveness of Page Object Pattern, interaction with UI elements should not occur outside the page objects.   \n+  \n+  \n+## Creating Page Objects\n+  \n+The page object should have methods to represent the main functionality of the page that testers can use to simulate user actions.   \n+- The public methods for page objects should avoid exposing the UI elements it interacts with and instead focus on the functionality of the webpage.   \n+- For example, instead of having methods like `fillSearchBox` and `clickSearchButton`, it is better to have a method `searchForInstructor` which hides the UI elements used.    \n+\n+All Page Object classes inherit from `AppPage` which contains methods that are common for interacting with the web elements such as filling in textboxes.   \n+  \n+  \n+## Things to avoid when writing E2E ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxMDU1Ng==", "bodyText": "This is not exactly accurate. While it is true that testing multiple edge cases with E2E test cases is not the right approach, not testing any is not right either. It is after all part of user workflow to encounter errors and we need to make sure that the flow in error handling is also tested.", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511510556", "createdAt": "2020-10-24T20:20:16Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+To set up and run E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/development.md#testing).  \n+\n+## Creating E2E tests\n+  \n+As E2E tests should be written from the end user perspective, each test case should reflect some user workflow.   \n+  \n+In TEAMMATES, E2E test cases are organized by page. Thus, for each page:  \n+1. Identify the important user workflows  \n+1. Simulate the user actions involved in the workflow by interacting with the UI elements.  \n+1. Assert the expected conditions are present after the interaction.  \n+  \n+[Selenium](https://www.selenium.dev/) is used to locate and interact with elements in the UI.   \n+  \n+All E2E test classes inherit from `BaseE2ETestCase` which contains methods that are common to most test cases, such as preparing the `Browser` object used for testing.   \n+  \n+  \n+## Page Object Pattern\n+  \n+In order to make E2E testing more robust to UI changes, the Page Object Pattern is adopted.  \n+  \n+Each page in TEAMMATES is represented by a page object class. The page object class abstracts interactions with UI elements and only exposes the functionality of each page as methods.   \n+- This way only the page object classes require updating when there are UI changes  \n+- Without Page Object Pattern, all test cases that use the changed UI element would require updating  \n+  \n+To maximise the effectiveness of Page Object Pattern, interaction with UI elements should not occur outside the page objects.   \n+  \n+  \n+## Creating Page Objects\n+  \n+The page object should have methods to represent the main functionality of the page that testers can use to simulate user actions.   \n+- The public methods for page objects should avoid exposing the UI elements it interacts with and instead focus on the functionality of the webpage.   \n+- For example, instead of having methods like `fillSearchBox` and `clickSearchButton`, it is better to have a method `searchForInstructor` which hides the UI elements used.    \n+\n+All Page Object classes inherit from `AppPage` which contains methods that are common for interacting with the web elements such as filling in textboxes.   \n+  \n+  \n+## Things to avoid when writing E2E \n+  \n+1. **Testing based on implementation** - The focus should be on user actions instead of implementation details. Therefore, black box testing should be adopted and test cases should be designed around use cases.   \n+1. **Exception testing** - Testing edge cases with E2E tests should be avoided. This is because E2E tests are expensive to run and not that effective for isolating bugs. Hence it is not the optimal to use E2E tests to look for exceptions.   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUyODg3MQ==", "bodyText": "Thus For each page, we:", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511528871", "createdAt": "2020-10-25T00:20:57Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+To set up and run E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/development.md#testing).  \n+\n+## Creating E2E tests\n+  \n+As E2E tests should be written from the end user perspective, each test case should reflect some user workflow.   \n+  \n+In TEAMMATES, E2E test cases are organized by page. Thus, for each page:  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUyODkzNw==", "bodyText": "Another important component for this E2E test is the BackDoor class. This should be mentioned somewhere.", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511528937", "createdAt": "2020-10-25T00:21:41Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+To set up and run E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/development.md#testing).  \n+\n+## Creating E2E tests\n+  \n+As E2E tests should be written from the end user perspective, each test case should reflect some user workflow.   \n+  \n+In TEAMMATES, E2E test cases are organized by page. Thus, for each page:  \n+1. Identify the important user workflows  \n+1. Simulate the user actions involved in the workflow by interacting with the UI elements.  \n+1. Assert the expected conditions are present after the interaction.  \n+  \n+[Selenium](https://www.selenium.dev/) is used to locate and interact with elements in the UI.   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUyOTYwNQ==", "bodyText": "I still don't think \"one at a time\" is a necessary condition. If the reason is because of the tests that are injected with real accounts, then the solution is to make those tests sequential. Reference: https://github.com/TEAMMATES/teammates/blob/9c60e07c260c3f4fd1b268d627f0cd4b9cda24da/src/test/testng-ci.xml, take a look at the sequential-ui-tests part.", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511529605", "createdAt": "2020-10-25T00:31:02Z", "author": {"login": "wkurniawan07"}, "path": "docs/development.md", "diffHunk": "@@ -246,7 +253,7 @@ If you are testing against a production server (staging server or live server),\n 1. Edit `src/e2e/resources/test.properties` as instructed is in its comments.\n    * In particular, you will need legitimate Google accounts to be used for testing.\n \n-1. Run the full test suite or any subset of it as how you would have done it in dev server.\n+1. Login manually to TEAMMATES on the browser used for testing before running any E2E test one at a time. This is required as Google does not allow login by automated software.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUyOTY2Mg==", "bodyText": "not the optimal", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511529662", "createdAt": "2020-10-25T00:31:45Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+To set up and run E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/development.md#testing).  \n+\n+## Creating E2E tests\n+  \n+As E2E tests should be written from the end user perspective, each test case should reflect some user workflow.   \n+  \n+In TEAMMATES, E2E test cases are organized by page. Thus, for each page:  \n+1. Identify the important user workflows  \n+1. Simulate the user actions involved in the workflow by interacting with the UI elements.  \n+1. Assert the expected conditions are present after the interaction.  \n+  \n+[Selenium](https://www.selenium.dev/) is used to locate and interact with elements in the UI.   \n+  \n+All E2E test classes inherit from `BaseE2ETestCase` which contains methods that are common to most test cases, such as preparing the `Browser` object used for testing.   \n+  \n+  \n+## Page Object Pattern\n+  \n+In order to make E2E testing more robust to UI changes, the Page Object Pattern is adopted.  \n+  \n+Each page in TEAMMATES is represented by a page object class. The page object class abstracts interactions with UI elements and only exposes the functionality of each page as methods.   \n+- This way only the page object classes require updating when there are UI changes  \n+- Without Page Object Pattern, all test cases that use the changed UI element would require updating  \n+  \n+To maximise the effectiveness of Page Object Pattern, interaction with UI elements should not occur outside the page objects.   \n+  \n+  \n+## Creating Page Objects\n+  \n+The page object should have methods to represent the main functionality of the page that testers can use to simulate user actions.   \n+- The public methods for page objects should avoid exposing the UI elements it interacts with and instead focus on the functionality of the webpage.   \n+- For example, instead of having methods like `fillSearchBox` and `clickSearchButton`, it is better to have a method `searchForInstructor` which hides the UI elements used.    \n+\n+All Page Object classes inherit from `AppPage` which contains methods that are common for interacting with the web elements such as filling in textboxes.   \n+  \n+  \n+## Things to avoid when writing E2E \n+  \n+1. **Testing based on implementation** - The focus should be on user actions instead of implementation details. Therefore, black box testing should be adopted and test cases should be designed around use cases.   \n+1. **Exception testing** - Testing edge cases with E2E tests should be avoided. This is because E2E tests are expensive to run and not that effective for isolating bugs. Hence it is not the optimal to use E2E tests to look for exceptions.   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b06897f3d261416aad315a45b204b460732057", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/22b06897f3d261416aad315a45b204b460732057", "committedDate": "2020-10-25T05:39:08Z", "message": "Edit e2e testing doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f9ad8ba69635808ec32a32dec2a3d98ac8ae78f", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/7f9ad8ba69635808ec32a32dec2a3d98ac8ae78f", "committedDate": "2020-10-25T05:39:19Z", "message": "Update README"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7dad57341d0a0e27610c44c23295d98d4964f6b6", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/7dad57341d0a0e27610c44c23295d98d4964f6b6", "committedDate": "2020-10-25T05:58:38Z", "message": "Merge branch 'master' into e2e-docs"}, "afterCommit": {"oid": "1907bd0eee230ebf6505b9182de8a19206d04ec6", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/1907bd0eee230ebf6505b9182de8a19206d04ec6", "committedDate": "2020-10-25T07:28:20Z", "message": "Add abstract method testAll"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b92cb0bae3d5f79f4abe2a8efe64d469052fc3d9", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/b92cb0bae3d5f79f4abe2a8efe64d469052fc3d9", "committedDate": "2020-10-25T08:43:43Z", "message": "Add abstract method testAll"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71aa49f40ce716fb0cc4b68a636dad2868410755", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/71aa49f40ce716fb0cc4b68a636dad2868410755", "committedDate": "2020-10-25T07:30:42Z", "message": "Merge branch 'master' into e2e-docs"}, "afterCommit": {"oid": "f28662343f36ba7dda6a922e33e6501c8c03354c", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/f28662343f36ba7dda6a922e33e6501c8c03354c", "committedDate": "2020-10-25T08:44:06Z", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into e2e-docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzgyMTEx", "url": "https://github.com/TEAMMATES/teammates/pull/10812#pullrequestreview-516382111", "createdAt": "2020-10-25T17:47:34Z", "commit": {"oid": "d538d906b7ef01697e2056cd6bb5e42d07e95961"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxNzo0NzozNFrOHn7QTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjoyMzoxNVrOHoCFaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYyNzM0MA==", "bodyText": "This part can actually be removed. Angular dev server bypasses caching always. Same for the part in Chrome.", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511627340", "createdAt": "2020-10-25T17:47:34Z", "author": {"login": "wkurniawan07"}, "path": "docs/development.md", "diffHunk": "@@ -176,6 +176,10 @@ Before running tests, modify `src/e2e/resources/test.properties` if necessary, e\n \n * If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n \n+* If you are planning to test against a production server, specify the Firefox profile to be used in `test.firefox.profile.name` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+    *  You can enter `about:profiles` into Firefox address bar to identify the profile being used.\n+\n * If you are planning to test changes to JavaScript code, disable JavaScript caching for Firefox:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d538d906b7ef01697e2056cd6bb5e42d07e95961"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYyNzc0MA==", "bodyText": "The above two are not really necessary, i.e. they are implementation details. BackDoor (capital \"D\" by the way) on the other hand is the crucial tool for making the API calls, so it is more apt to include.", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511627740", "createdAt": "2020-10-25T17:51:17Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+To set up and run E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/development.md#testing).  \n+\n+## Creating E2E tests\n+  \n+As E2E tests should be written from the end user perspective, each test case should reflect some user workflow.   \n+  \n+In TEAMMATES, E2E test cases are organized by page. For each page, we:  \n+1. Identify the important user workflows  \n+1. Simulate the user actions involved in the workflow by interacting with the UI elements.  \n+1. Assert the expected conditions are present after the interaction.  \n+  \n+[Selenium](https://www.selenium.dev/) is used to locate and interact with elements in the UI.   \n+  \n+All E2E test classes inherit from `BaseE2ETestCase` which contains methods that are common to most test cases, such as preparing the `Browser` object used for testing.   \n+  \n+To help verify the state of the datastore, \n+- `BaseTestCaseWithDatastoreAccess` contains methods to compare datastore entities like `verifyPresentInDatastore`\n+- `BaseTestCaseWithBackDoorApiAccess` contains methods that make use of `Backdoor` to access the datastore  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d538d906b7ef01697e2056cd6bb5e42d07e95961"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczODk3Mw==", "bodyText": "we do not close the windows of test that fail\n\nThis is determined by a flag in test.properties. It does, however, become a requirement, from the sound of it.\n\nFirefox is ok.\n\nIf the problem is specific to Chrome, we need to mention as such.\n\nif we decide that running all the test sequentially for production server e2e is ok.\n\nWe'll assess the need once we get more understanding. There is nothing inherently better in either option (parallel vs sequential) other than parallel may save up some time, but if sequential promises more stability, then it is an important consideration.", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511738973", "createdAt": "2020-10-26T06:22:10Z", "author": {"login": "wkurniawan07"}, "path": "docs/development.md", "diffHunk": "@@ -246,7 +253,7 @@ If you are testing against a production server (staging server or live server),\n 1. Edit `src/e2e/resources/test.properties` as instructed is in its comments.\n    * In particular, you will need legitimate Google accounts to be used for testing.\n \n-1. Run the full test suite or any subset of it as how you would have done it in dev server.\n+1. Login manually to TEAMMATES on the browser used for testing before running any E2E test one at a time. This is required as Google does not allow login by automated software.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUyOTYwNQ=="}, "originalCommit": {"oid": "4db2cec53f074bce17d03b058a88b377eb781e19"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczOTI0MA==", "bodyText": "We don't really need to abstract these into separate methods; just include everything under the testAll block", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r511739240", "createdAt": "2020-10-26T06:23:15Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/e2e/TimezoneSyncerTest.java", "diffHunk": "@@ -37,14 +36,18 @@ public void classSetup() {\n         loginAdmin();\n     }\n \n-    @BeforeMethod\n-    public void navigateToTimezonePage() {\n+    @Test\n+    @Override\n+    public void testAll() {\n+        testFrontendBackendTimezoneDatabasesAreConsistent();\n+        testTimezoneDatabasesAreUpToDate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d538d906b7ef01697e2056cd6bb5e42d07e95961"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTU0MTE2", "url": "https://github.com/TEAMMATES/teammates/pull/10812#pullrequestreview-516954116", "createdAt": "2020-10-26T16:25:06Z", "commit": {"oid": "d538d906b7ef01697e2056cd6bb5e42d07e95961"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoyNTowN1rOHoXtyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoyNTowN1rOHoXtyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MzY0MQ==", "bodyText": "Link to an explanation of the page object pattern?", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r512093641", "createdAt": "2020-10-26T16:25:07Z", "author": {"login": "damithc"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+To set up and run E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/development.md#testing).  \n+\n+## Creating E2E tests\n+  \n+As E2E tests should be written from the end user perspective, each test case should reflect some user workflow.   \n+  \n+In TEAMMATES, E2E test cases are organized by page. For each page, we:  \n+1. Identify the important user workflows  \n+1. Simulate the user actions involved in the workflow by interacting with the UI elements.  \n+1. Assert the expected conditions are present after the interaction.  \n+  \n+[Selenium](https://www.selenium.dev/) is used to locate and interact with elements in the UI.   \n+  \n+All E2E test classes inherit from `BaseE2ETestCase` which contains methods that are common to most test cases, such as preparing the `Browser` object used for testing.   \n+  \n+To help verify the state of the datastore, \n+- `BaseTestCaseWithDatastoreAccess` contains methods to compare datastore entities like `verifyPresentInDatastore`\n+- `BaseTestCaseWithBackDoorApiAccess` contains methods that make use of `Backdoor` to access the datastore  \n+- `Backdoor` contains methods to create API calls to the back-end without going through the UI. \n+  \n+## Page Object Pattern\n+  \n+In order to make E2E testing more robust to UI changes, the Page Object Pattern is adopted.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d538d906b7ef01697e2056cd6bb5e42d07e95961"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63e1bfd41d60192f061b739bebadc45a603e97ac", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/63e1bfd41d60192f061b739bebadc45a603e97ac", "committedDate": "2020-10-27T04:28:39Z", "message": "Clean up docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "965da3461e21720321abd8d0c6c7068b80e6c32d", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/965da3461e21720321abd8d0c6c7068b80e6c32d", "committedDate": "2020-10-27T04:28:53Z", "message": "Clean up TimezoneSyncerTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "500b068f0eff6722fbeb555ffd1d66d63e5a7a3e", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/500b068f0eff6722fbeb555ffd1d66d63e5a7a3e", "committedDate": "2020-10-27T04:29:02Z", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into e2e-docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d538d906b7ef01697e2056cd6bb5e42d07e95961", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/d538d906b7ef01697e2056cd6bb5e42d07e95961", "committedDate": "2020-10-25T13:59:56Z", "message": "Merge branch 'master' into e2e-docs"}, "afterCommit": {"oid": "500b068f0eff6722fbeb555ffd1d66d63e5a7a3e", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/500b068f0eff6722fbeb555ffd1d66d63e5a7a3e", "committedDate": "2020-10-27T04:29:02Z", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into e2e-docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzI4NjQ1", "url": "https://github.com/TEAMMATES/teammates/pull/10812#pullrequestreview-518328645", "createdAt": "2020-10-28T05:11:52Z", "commit": {"oid": "500b068f0eff6722fbeb555ffd1d66d63e5a7a3e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNToxMTo1MlrOHpaTMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNToxMzowNFrOHpaUew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE4NDU2Mw==", "bodyText": "It actually makes sense to shift the entire information about E2E testing here, especially now that E2E test is not a hard requirement for development (we only expect them to be sparingly modified e.g. when there is major feature change). Don't need to do on this PR though. What do you think?", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r513184563", "createdAt": "2020-10-28T05:11:52Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,60 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+To set up and run E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/development.md#testing).  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "500b068f0eff6722fbeb555ffd1d66d63e5a7a3e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE4NDg5MQ==", "bodyText": "Login manually to TEAMMATES on the browser used for testing\n\nIs this useful? The browsers are configured to be in private mode when opened. I realized it was done wrongly for Firefox (should be options.addArguments(\"-private\") instead of whatever's being done now), but once fixed I'm not sure if this part is actually useful.", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r513184891", "createdAt": "2020-10-28T05:13:04Z", "author": {"login": "wkurniawan07"}, "path": "docs/development.md", "diffHunk": "@@ -246,8 +245,12 @@ If you are testing against a production server (staging server or live server),\n 1. Edit `src/e2e/resources/test.properties` as instructed is in its comments.\n    * In particular, you will need legitimate Google accounts to be used for testing.\n \n-1. Run the full test suite or any subset of it as how you would have done it in dev server.\n+1. Login manually to TEAMMATES on the browser used for testing. This is required as Google does not allow login by automated software.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "500b068f0eff6722fbeb555ffd1d66d63e5a7a3e"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ad959d9b6bf649cae5017c0c1a8149642a1c693", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/1ad959d9b6bf649cae5017c0c1a8149642a1c693", "committedDate": "2020-11-01T06:44:54Z", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into e2e-docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "996de6b4d2e70b52d5bc29df42c43548ffdb7deb", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/996de6b4d2e70b52d5bc29df42c43548ffdb7deb", "committedDate": "2020-11-01T07:16:08Z", "message": "Shift E2E running details to e2e-testing.md"}, "afterCommit": {"oid": "5304f0ef78ef63f4f5564153144925dedf96cc3c", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/5304f0ef78ef63f4f5564153144925dedf96cc3c", "committedDate": "2020-11-01T07:19:13Z", "message": "Shift E2E running details to e2e-testing.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/8d133dcc5c80012fdf1925d16eeb02c6e454d74f", "committedDate": "2020-11-01T07:29:54Z", "message": "Shift E2E running details to e2e-testing.md"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5304f0ef78ef63f4f5564153144925dedf96cc3c", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/5304f0ef78ef63f4f5564153144925dedf96cc3c", "committedDate": "2020-11-01T07:19:13Z", "message": "Shift E2E running details to e2e-testing.md"}, "afterCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/8d133dcc5c80012fdf1925d16eeb02c6e454d74f", "committedDate": "2020-11-01T07:29:54Z", "message": "Shift E2E running details to e2e-testing.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjgxMTEy", "url": "https://github.com/TEAMMATES/teammates/pull/10812#pullrequestreview-521281112", "createdAt": "2020-11-02T00:40:28Z", "commit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDo0MDoyOFrOHrzkkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMToxNzowOFrOHrz3YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NTc2MA==", "bodyText": "This document is now big enough to have a table of contents.", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515695760", "createdAt": "2020-11-02T00:40:28Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,139 @@\n+# E2E Testing  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NTk0MA==", "bodyText": "Nitpicking:\n\nDouble space between * and Y (similarly T)\nToo much indentation; see other parts", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515695940", "createdAt": "2020-11-02T00:42:07Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,139 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+## Running E2E tests\n+\n+### Configuring browsers for E2E Testing\n+\n+TEAMMATES E2E testing requires Firefox or Chrome.\n+\n+Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.\n+\n+#### Using Firefox\n+\n+* You need to use geckodriver for testing with Firefox.\n+  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).\n+    The site will also inform the versions of Firefox that can be used with the driver.\n+  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.\n+\n+* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the Firefox profile to be used in `test.firefox.profile.name` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+    *  You can enter `about:profiles` into Firefox address bar to identify the profile being used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NTk1OQ==", "bodyText": "Similar nitpicking here", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515695959", "createdAt": "2020-11-02T00:42:14Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,139 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+## Running E2E tests\n+\n+### Configuring browsers for E2E Testing\n+\n+TEAMMATES E2E testing requires Firefox or Chrome.\n+\n+Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.\n+\n+#### Using Firefox\n+\n+* You need to use geckodriver for testing with Firefox.\n+  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).\n+    The site will also inform the versions of Firefox that can be used with the driver.\n+  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.\n+\n+* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the Firefox profile to be used in `test.firefox.profile.name` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+    *  You can enter `about:profiles` into Firefox address bar to identify the profile being used.\n+\n+#### Using Chrome\n+\n+* You need to use chromedriver for testing with Chrome.\n+  * Download the latest stable chromedriver from [here](https://sites.google.com/a/chromium.org/chromedriver/downloads).\n+    The site will also inform the versions of Chrome that can be used with the driver.\n+  * Specify the path to the chromedriver executable in `test.chromedriver.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the path to Chrome's user data directory in `test.chrome.userdata.path` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NjA5Mg==", "bodyText": "This header should now change to ### Running the tests", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515696092", "createdAt": "2020-11-02T00:43:24Z", "author": {"login": "wkurniawan07"}, "path": "docs/development.md", "diffHunk": "@@ -159,46 +159,7 @@ POST http://localhost:8080/_ah/login?action=Log+Out\n \n There are two big categories of testing in TEAMMATES:\n - **Component tests**: white-box unit and integration tests, i.e. they test the application components with full knowledge of the components' internal workings. This is configured in `src/test/resources/testng-component.xml` (back-end) and `src/web/jest.config.js` (front-end).\n-- **E2E (end-to-end) tests**: black-box tests, i.e. they test the application as a whole without knowing any internal working. This is configured in `src/e2e/resources/testng-e2e.xml`.\n-\n-### Configuring browsers for E2E Testing\n-\n-TEAMMATES E2E testing requires Firefox or Chrome.\n-\n-Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.\n-\n-#### Using Firefox\n-\n-* You need to use geckodriver for testing with Firefox.\n-  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).\n-    The site will also inform the versions of Firefox that can be used with the driver.\n-  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.\n-\n-* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n-\n-* If you are planning to test changes to JavaScript code, disable JavaScript caching for Firefox:\n-  * Enter `about:config` into the Firefox address bar and set `network.http.use-cache` (or `browser.cache.disk.enable` in newer versions of Firefox) to `false`.\n-\n-#### Using Chrome\n-\n-* You need to use chromedriver for testing with Chrome.\n-  * Download the latest stable chromedriver from [here](https://sites.google.com/a/chromium.org/chromedriver/downloads).\n-    The site will also inform the versions of Chrome that can be used with the driver.\n-  * Specify the path to the chromedriver executable in `test.chromedriver.path` value in `test.properties`.\n-\n-* If you are planning to test changes to JavaScript code, disable JavaScript caching for Chrome:\n-  * Press Ctrl+Shift+J to bring up the Web Console.\n-  * Click on the settings button at the bottom right corner.\n-  * Under the General tab, check \"Disable Cache\".\n-\n-* The chromedriver process started by the test suite will not automatically get killed after the tests have finished executing.<br>\n-  You will need to manually kill these processes after the tests are done.\n-  * On Windows, use the Task Manager or `taskkill /f /im chromedriver.exe` command.\n-  * On OS X, use the Activity Monitor or `sudo killall chromedriver` command.\n-\n-### Running the tests\n-\n-- When running the test cases, a few cases may fail (this can happen due to timing issues). They can be re-run until they pass without affecting the accuracy of the tests.\n+- **E2E (end-to-end) tests**: black-box tests, i.e. they test the application as a whole without knowing any internal working. This is configured in `src/e2e/resources/testng-e2e.xml`. To learn more about E2E tests, refer to this [document](https://github.com/TEAMMATES/teammates/blob/master/docs/e2e-testing.md).  \n \n #### Running the tests with command line", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NjI0NQ==", "bodyText": "Let's put this to the part after \"Before running ...\"", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515696245", "createdAt": "2020-11-02T00:44:30Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,139 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+## Running E2E tests\n+\n+### Configuring browsers for E2E Testing\n+\n+TEAMMATES E2E testing requires Firefox or Chrome.\n+\n+Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.\n+\n+#### Using Firefox\n+\n+* You need to use geckodriver for testing with Firefox.\n+  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).\n+    The site will also inform the versions of Firefox that can be used with the driver.\n+  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.\n+\n+* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the Firefox profile to be used in `test.firefox.profile.name` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+    *  You can enter `about:profiles` into Firefox address bar to identify the profile being used.\n+\n+#### Using Chrome\n+\n+* You need to use chromedriver for testing with Chrome.\n+  * Download the latest stable chromedriver from [here](https://sites.google.com/a/chromium.org/chromedriver/downloads).\n+    The site will also inform the versions of Chrome that can be used with the driver.\n+  * Specify the path to the chromedriver executable in `test.chromedriver.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the path to Chrome's user data directory in `test.chrome.userdata.path` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+\n+* The chromedriver process started by the test suite will not automatically get killed after the tests have finished executing.<br>\n+  You will need to manually kill these processes after the tests are done.\n+  * On Windows, use the Task Manager or `taskkill /f /im chromedriver.exe` command.\n+  * On OS X, use the Activity Monitor or `sudo killall chromedriver` command.\n+\n+### Running the tests\n+- When running the test cases, a few cases may fail (this can happen due to timing issues). They can be re-run until they pass without affecting the accuracy of the tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NjI3Ng==", "bodyText": "This subheader should not be necessary anymore.", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515696276", "createdAt": "2020-11-02T00:44:46Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,139 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+## Running E2E tests\n+\n+### Configuring browsers for E2E Testing\n+\n+TEAMMATES E2E testing requires Firefox or Chrome.\n+\n+Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.\n+\n+#### Using Firefox\n+\n+* You need to use geckodriver for testing with Firefox.\n+  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).\n+    The site will also inform the versions of Firefox that can be used with the driver.\n+  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.\n+\n+* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the Firefox profile to be used in `test.firefox.profile.name` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+    *  You can enter `about:profiles` into Firefox address bar to identify the profile being used.\n+\n+#### Using Chrome\n+\n+* You need to use chromedriver for testing with Chrome.\n+  * Download the latest stable chromedriver from [here](https://sites.google.com/a/chromium.org/chromedriver/downloads).\n+    The site will also inform the versions of Chrome that can be used with the driver.\n+  * Specify the path to the chromedriver executable in `test.chromedriver.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the path to Chrome's user data directory in `test.chrome.userdata.path` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+\n+* The chromedriver process started by the test suite will not automatically get killed after the tests have finished executing.<br>\n+  You will need to manually kill these processes after the tests are done.\n+  * On Windows, use the Task Manager or `taskkill /f /im chromedriver.exe` command.\n+  * On OS X, use the Activity Monitor or `sudo killall chromedriver` command.\n+\n+### Running the tests\n+- When running the test cases, a few cases may fail (this can happen due to timing issues). They can be re-run until they pass without affecting the accuracy of the tests.\n+\n+#### Running the tests with command line", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NjU0Mw==", "bodyText": "Code coverage doesn't work for black box tests, so this part should not be here.", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515696543", "createdAt": "2020-11-02T00:46:52Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,139 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+## Running E2E tests\n+\n+### Configuring browsers for E2E Testing\n+\n+TEAMMATES E2E testing requires Firefox or Chrome.\n+\n+Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.\n+\n+#### Using Firefox\n+\n+* You need to use geckodriver for testing with Firefox.\n+  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).\n+    The site will also inform the versions of Firefox that can be used with the driver.\n+  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.\n+\n+* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the Firefox profile to be used in `test.firefox.profile.name` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+    *  You can enter `about:profiles` into Firefox address bar to identify the profile being used.\n+\n+#### Using Chrome\n+\n+* You need to use chromedriver for testing with Chrome.\n+  * Download the latest stable chromedriver from [here](https://sites.google.com/a/chromium.org/chromedriver/downloads).\n+    The site will also inform the versions of Chrome that can be used with the driver.\n+  * Specify the path to the chromedriver executable in `test.chromedriver.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the path to Chrome's user data directory in `test.chrome.userdata.path` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+\n+* The chromedriver process started by the test suite will not automatically get killed after the tests have finished executing.<br>\n+  You will need to manually kill these processes after the tests are done.\n+  * On Windows, use the Task Manager or `taskkill /f /im chromedriver.exe` command.\n+  * On OS X, use the Activity Monitor or `sudo killall chromedriver` command.\n+\n+### Running the tests\n+- When running the test cases, a few cases may fail (this can happen due to timing issues). They can be re-run until they pass without affecting the accuracy of the tests.\n+\n+#### Running the tests with command line\n+E2E tests follow this configuration:\n+\n+Test suite | Command | Results can be viewed in\n+---|---|---\n+`E2E tests` | `./gradlew e2eTests` | `{project folder}/build/reports/e2e-test-try-{n}/index.html`, where `{n}` is the sequence number of the test run\n+Any individual E2E test | `./gradlew e2eTestTry1 --tests TestClassName` | `{project folder}/build/reports/e2e-test-try-1/index.html`\n+\n+\n+- `E2E tests` will be run in their entirety once and the failed tests will be re-run a few times. \n+- Before running `E2E tests`, it is important to have the both front-end and back-end dev servers running locally first if you are testing against them.\n+\n+You can generate the coverage data with `jacocoReport` task after running tests, e.g.:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NjczMw==", "bodyText": "It's only one singular account now, so let's change it to reflect the current situation.\na legitimate Google Gmail accounts", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515696733", "createdAt": "2020-11-02T00:48:39Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,139 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+## Running E2E tests\n+\n+### Configuring browsers for E2E Testing\n+\n+TEAMMATES E2E testing requires Firefox or Chrome.\n+\n+Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.\n+\n+#### Using Firefox\n+\n+* You need to use geckodriver for testing with Firefox.\n+  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).\n+    The site will also inform the versions of Firefox that can be used with the driver.\n+  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.\n+\n+* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the Firefox profile to be used in `test.firefox.profile.name` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+    *  You can enter `about:profiles` into Firefox address bar to identify the profile being used.\n+\n+#### Using Chrome\n+\n+* You need to use chromedriver for testing with Chrome.\n+  * Download the latest stable chromedriver from [here](https://sites.google.com/a/chromium.org/chromedriver/downloads).\n+    The site will also inform the versions of Chrome that can be used with the driver.\n+  * Specify the path to the chromedriver executable in `test.chromedriver.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the path to Chrome's user data directory in `test.chrome.userdata.path` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+\n+* The chromedriver process started by the test suite will not automatically get killed after the tests have finished executing.<br>\n+  You will need to manually kill these processes after the tests are done.\n+  * On Windows, use the Task Manager or `taskkill /f /im chromedriver.exe` command.\n+  * On OS X, use the Activity Monitor or `sudo killall chromedriver` command.\n+\n+### Running the tests\n+- When running the test cases, a few cases may fail (this can happen due to timing issues). They can be re-run until they pass without affecting the accuracy of the tests.\n+\n+#### Running the tests with command line\n+E2E tests follow this configuration:\n+\n+Test suite | Command | Results can be viewed in\n+---|---|---\n+`E2E tests` | `./gradlew e2eTests` | `{project folder}/build/reports/e2e-test-try-{n}/index.html`, where `{n}` is the sequence number of the test run\n+Any individual E2E test | `./gradlew e2eTestTry1 --tests TestClassName` | `{project folder}/build/reports/e2e-test-try-1/index.html`\n+\n+\n+- `E2E tests` will be run in their entirety once and the failed tests will be re-run a few times. \n+- Before running `E2E tests`, it is important to have the both front-end and back-end dev servers running locally first if you are testing against them.\n+\n+You can generate the coverage data with `jacocoReport` task after running tests, e.g.:\n+```sh\n+./gradlew e2eTests jacocoReport\n+```\n+The report can be found in the `build/reports/jacoco/jacocoReport/` directory.\n+\n+### Testing against production server\n+\n+If you are testing against a production server (staging server or live server), some additional tasks need to be done.\n+\n+1. You need to setup a `Gmail API`<sup>1</sup> as follows:\n+   * [Obtain a Gmail API credentials](https://github.com/TEAMMATES/teammates-ops/blob/master/platform-guide.md) and download it.\n+   * Copy the file to `src/e2e/resources/gmail-api` (create the `gmail-api` folder) of your project and rename it to `client_secret.json`.\n+   * It is also possible to use the Gmail API credentials from any other Google Cloud Platform project for this purpose.\n+\n+1. Edit `src/e2e/resources/test.properties` as instructed is in its comments.\n+   * In particular, you will need legitimate Google accounts to be used for testing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NjgwMQ==", "bodyText": "\ud83d\udc4d\nMinor rephrase: This profile is will be added", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515696801", "createdAt": "2020-11-02T00:49:15Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,139 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+## Running E2E tests\n+\n+### Configuring browsers for E2E Testing\n+\n+TEAMMATES E2E testing requires Firefox or Chrome.\n+\n+Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.\n+\n+#### Using Firefox\n+\n+* You need to use geckodriver for testing with Firefox.\n+  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).\n+    The site will also inform the versions of Firefox that can be used with the driver.\n+  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.\n+\n+* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the Firefox profile to be used in `test.firefox.profile.name` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+    *  You can enter `about:profiles` into Firefox address bar to identify the profile being used.\n+\n+#### Using Chrome\n+\n+* You need to use chromedriver for testing with Chrome.\n+  * Download the latest stable chromedriver from [here](https://sites.google.com/a/chromium.org/chromedriver/downloads).\n+    The site will also inform the versions of Chrome that can be used with the driver.\n+  * Specify the path to the chromedriver executable in `test.chromedriver.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the path to Chrome's user data directory in `test.chrome.userdata.path` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+\n+* The chromedriver process started by the test suite will not automatically get killed after the tests have finished executing.<br>\n+  You will need to manually kill these processes after the tests are done.\n+  * On Windows, use the Task Manager or `taskkill /f /im chromedriver.exe` command.\n+  * On OS X, use the Activity Monitor or `sudo killall chromedriver` command.\n+\n+### Running the tests\n+- When running the test cases, a few cases may fail (this can happen due to timing issues). They can be re-run until they pass without affecting the accuracy of the tests.\n+\n+#### Running the tests with command line\n+E2E tests follow this configuration:\n+\n+Test suite | Command | Results can be viewed in\n+---|---|---\n+`E2E tests` | `./gradlew e2eTests` | `{project folder}/build/reports/e2e-test-try-{n}/index.html`, where `{n}` is the sequence number of the test run\n+Any individual E2E test | `./gradlew e2eTestTry1 --tests TestClassName` | `{project folder}/build/reports/e2e-test-try-1/index.html`\n+\n+\n+- `E2E tests` will be run in their entirety once and the failed tests will be re-run a few times. \n+- Before running `E2E tests`, it is important to have the both front-end and back-end dev servers running locally first if you are testing against them.\n+\n+You can generate the coverage data with `jacocoReport` task after running tests, e.g.:\n+```sh\n+./gradlew e2eTests jacocoReport\n+```\n+The report can be found in the `build/reports/jacoco/jacocoReport/` directory.\n+\n+### Testing against production server\n+\n+If you are testing against a production server (staging server or live server), some additional tasks need to be done.\n+\n+1. You need to setup a `Gmail API`<sup>1</sup> as follows:\n+   * [Obtain a Gmail API credentials](https://github.com/TEAMMATES/teammates-ops/blob/master/platform-guide.md) and download it.\n+   * Copy the file to `src/e2e/resources/gmail-api` (create the `gmail-api` folder) of your project and rename it to `client_secret.json`.\n+   * It is also possible to use the Gmail API credentials from any other Google Cloud Platform project for this purpose.\n+\n+1. Edit `src/e2e/resources/test.properties` as instructed is in its comments.\n+   * In particular, you will need legitimate Google accounts to be used for testing.\n+\n+1. Login manually to TEAMMATES on the browser used for testing to add cookie with login details to the browser profile.\n+   * This profile is added to the web driver so that E2E tests will start with user already logged in. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NzE4Ng==", "bodyText": "Minor rephrase suggestion:\nWe can test more exhaustively with We should leave more exhaustive testing to", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515697186", "createdAt": "2020-11-02T00:52:15Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,139 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+## Running E2E tests\n+\n+### Configuring browsers for E2E Testing\n+\n+TEAMMATES E2E testing requires Firefox or Chrome.\n+\n+Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.\n+\n+#### Using Firefox\n+\n+* You need to use geckodriver for testing with Firefox.\n+  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).\n+    The site will also inform the versions of Firefox that can be used with the driver.\n+  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.\n+\n+* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the Firefox profile to be used in `test.firefox.profile.name` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+    *  You can enter `about:profiles` into Firefox address bar to identify the profile being used.\n+\n+#### Using Chrome\n+\n+* You need to use chromedriver for testing with Chrome.\n+  * Download the latest stable chromedriver from [here](https://sites.google.com/a/chromium.org/chromedriver/downloads).\n+    The site will also inform the versions of Chrome that can be used with the driver.\n+  * Specify the path to the chromedriver executable in `test.chromedriver.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the path to Chrome's user data directory in `test.chrome.userdata.path` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+\n+* The chromedriver process started by the test suite will not automatically get killed after the tests have finished executing.<br>\n+  You will need to manually kill these processes after the tests are done.\n+  * On Windows, use the Task Manager or `taskkill /f /im chromedriver.exe` command.\n+  * On OS X, use the Activity Monitor or `sudo killall chromedriver` command.\n+\n+### Running the tests\n+- When running the test cases, a few cases may fail (this can happen due to timing issues). They can be re-run until they pass without affecting the accuracy of the tests.\n+\n+#### Running the tests with command line\n+E2E tests follow this configuration:\n+\n+Test suite | Command | Results can be viewed in\n+---|---|---\n+`E2E tests` | `./gradlew e2eTests` | `{project folder}/build/reports/e2e-test-try-{n}/index.html`, where `{n}` is the sequence number of the test run\n+Any individual E2E test | `./gradlew e2eTestTry1 --tests TestClassName` | `{project folder}/build/reports/e2e-test-try-1/index.html`\n+\n+\n+- `E2E tests` will be run in their entirety once and the failed tests will be re-run a few times. \n+- Before running `E2E tests`, it is important to have the both front-end and back-end dev servers running locally first if you are testing against them.\n+\n+You can generate the coverage data with `jacocoReport` task after running tests, e.g.:\n+```sh\n+./gradlew e2eTests jacocoReport\n+```\n+The report can be found in the `build/reports/jacoco/jacocoReport/` directory.\n+\n+### Testing against production server\n+\n+If you are testing against a production server (staging server or live server), some additional tasks need to be done.\n+\n+1. You need to setup a `Gmail API`<sup>1</sup> as follows:\n+   * [Obtain a Gmail API credentials](https://github.com/TEAMMATES/teammates-ops/blob/master/platform-guide.md) and download it.\n+   * Copy the file to `src/e2e/resources/gmail-api` (create the `gmail-api` folder) of your project and rename it to `client_secret.json`.\n+   * It is also possible to use the Gmail API credentials from any other Google Cloud Platform project for this purpose.\n+\n+1. Edit `src/e2e/resources/test.properties` as instructed is in its comments.\n+   * In particular, you will need legitimate Google accounts to be used for testing.\n+\n+1. Login manually to TEAMMATES on the browser used for testing to add cookie with login details to the browser profile.\n+   * This profile is added to the web driver so that E2E tests will start with user already logged in. \n+   * This is required as Google does not allow login by automated software.\n+\n+1. For Firefox, run the full test suite or any subset of it as how you would have done it in dev server. \n+   * Do note that the GAE daily quota is usually not enough to run the full test suite, in particular for accounts with no billing enabled.\n+   \n+1. For Chrome, you may have to run tests one at a time as multiple ChromeDriver instances cannot be opened with the same user data.\n+\n+<sup>1</sup> This setup is necessary because our test suite uses the Gmail API to access Gmail accounts used for testing (these accounts are specified in `test.properties`) to confirm that those accounts receive the expected emails from TEAMMATES.\n+This is needed only when testing against a production server because no actual emails are sent by the dev server and therefore delivery of emails is not tested when testing against the dev server.\n+\n+## Creating E2E tests\n+  \n+As E2E tests should be written from the end user perspective, each test case should reflect some user workflow.   \n+  \n+In TEAMMATES, E2E test cases are organized by page. For each page, we:  \n+1. Identify the important user workflows  \n+1. Simulate the user actions involved in the workflow by interacting with the UI elements.  \n+1. Assert the expected conditions are present after the interaction.  \n+  \n+[Selenium](https://www.selenium.dev/) is used to locate and interact with elements in the UI.   \n+  \n+All E2E test classes inherit from `BaseE2ETestCase` which contains methods that are common to most test cases, such as preparing the `Browser` object used for testing.   \n+  \n+To help verify the state of the datastore, `BackDoor` contains methods to create API calls to the back-end without going through the UI. \n+  \n+### Page Object Pattern\n+  \n+In order to make E2E testing more robust to UI changes, the [Page Object Pattern](https://martinfowler.com/bliki/PageObject.html) is adopted.  \n+  \n+Each page in TEAMMATES is represented by a page object class. The page object class abstracts interactions with UI elements and only exposes the functionality of each page as methods.   \n+- This way only the page object classes require updating when there are UI changes  \n+- Without Page Object Pattern, all test cases that use the changed UI element would require updating  \n+  \n+To maximise the effectiveness of Page Object Pattern, interaction with UI elements should not occur outside the page objects.   \n+  \n+  \n+### Creating Page Objects\n+  \n+The page object should have methods to represent the main functionality of the page that testers can use to simulate user actions.   \n+- The public methods for page objects should avoid exposing the UI elements it interacts with and instead focus on the functionality of the webpage.   \n+- For example, instead of having methods like `fillSearchBox` and `clickSearchButton`, it is better to have a method `searchForInstructor` which hides the UI elements used.    \n+\n+All Page Object classes inherit from `AppPage` which contains methods that are common for interacting with the web elements such as filling in textboxes.   \n+  \n+  \n+### Things to avoid when writing E2E tests\n+  \n+1. **Testing based on implementation** - The focus should be on user actions instead of implementation details. Therefore, black box testing should be adopted and test cases should be designed around use cases.   \n+1. **Excessive exception testing** - Testing edge cases with E2E tests should be avoided. This is because E2E tests are expensive to run and not that effective for isolating bugs. Hence we should focus on the happy path and exception paths that are more common. We can test more exhaustively with lower-level unit or integration tests.   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5OTgzNQ==", "bodyText": "It is mentioned like this before, but this part is not 100% accurate. Only the back-end dev server is absolutely necessary, in particular if the front-end has been built. I suggest to shorten the term to just \"dev server\"; anyone who is advanced enough to run E2E tests should be able to figure this out on their own.\nit is important to have the both front-end and back-end dev servers running locally first if you are testing against them it.", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515699835", "createdAt": "2020-11-02T01:12:12Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,139 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+## Running E2E tests\n+\n+### Configuring browsers for E2E Testing\n+\n+TEAMMATES E2E testing requires Firefox or Chrome.\n+\n+Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.\n+\n+#### Using Firefox\n+\n+* You need to use geckodriver for testing with Firefox.\n+  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).\n+    The site will also inform the versions of Firefox that can be used with the driver.\n+  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.\n+\n+* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the Firefox profile to be used in `test.firefox.profile.name` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+    *  You can enter `about:profiles` into Firefox address bar to identify the profile being used.\n+\n+#### Using Chrome\n+\n+* You need to use chromedriver for testing with Chrome.\n+  * Download the latest stable chromedriver from [here](https://sites.google.com/a/chromium.org/chromedriver/downloads).\n+    The site will also inform the versions of Chrome that can be used with the driver.\n+  * Specify the path to the chromedriver executable in `test.chromedriver.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the path to Chrome's user data directory in `test.chrome.userdata.path` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+\n+* The chromedriver process started by the test suite will not automatically get killed after the tests have finished executing.<br>\n+  You will need to manually kill these processes after the tests are done.\n+  * On Windows, use the Task Manager or `taskkill /f /im chromedriver.exe` command.\n+  * On OS X, use the Activity Monitor or `sudo killall chromedriver` command.\n+\n+### Running the tests\n+- When running the test cases, a few cases may fail (this can happen due to timing issues). They can be re-run until they pass without affecting the accuracy of the tests.\n+\n+#### Running the tests with command line\n+E2E tests follow this configuration:\n+\n+Test suite | Command | Results can be viewed in\n+---|---|---\n+`E2E tests` | `./gradlew e2eTests` | `{project folder}/build/reports/e2e-test-try-{n}/index.html`, where `{n}` is the sequence number of the test run\n+Any individual E2E test | `./gradlew e2eTestTry1 --tests TestClassName` | `{project folder}/build/reports/e2e-test-try-1/index.html`\n+\n+\n+- `E2E tests` will be run in their entirety once and the failed tests will be re-run a few times. \n+- Before running `E2E tests`, it is important to have the both front-end and back-end dev servers running locally first if you are testing against them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwMDU3Nw==", "bodyText": "Again, since now only one singular account is used:\nto access the Gmail accounts used for testing (these accounts are is specified in test.properties) to confirm that those accounts receives the expected emails from TEAMMATES", "url": "https://github.com/TEAMMATES/teammates/pull/10812#discussion_r515700577", "createdAt": "2020-11-02T01:17:08Z", "author": {"login": "wkurniawan07"}, "path": "docs/e2e-testing.md", "diffHunk": "@@ -0,0 +1,139 @@\n+# E2E Testing  \n+  \n+## What is E2E Testing?\n+  \n+E2E (End-to-end) testing is a testing methodology where the objective is to test the application as a whole.   \n+- It aims to ensure all integrated components of the application work together as expected when it is being used by the end user.   \n+- This is done by simulating user scenarios on the fully built product.  \n+  \n+E2E tests in TEAMMATES can be found in the package `teammates.e2e`. \n+\n+## Running E2E tests\n+\n+### Configuring browsers for E2E Testing\n+\n+TEAMMATES E2E testing requires Firefox or Chrome.\n+\n+Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.\n+\n+#### Using Firefox\n+\n+* You need to use geckodriver for testing with Firefox.\n+  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).\n+    The site will also inform the versions of Firefox that can be used with the driver.\n+  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.\n+\n+* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the Firefox profile to be used in `test.firefox.profile.name` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+    *  You can enter `about:profiles` into Firefox address bar to identify the profile being used.\n+\n+#### Using Chrome\n+\n+* You need to use chromedriver for testing with Chrome.\n+  * Download the latest stable chromedriver from [here](https://sites.google.com/a/chromium.org/chromedriver/downloads).\n+    The site will also inform the versions of Chrome that can be used with the driver.\n+  * Specify the path to the chromedriver executable in `test.chromedriver.path` value in `test.properties`.\n+\n+* If you are planning to test against a production server, specify the path to Chrome's user data directory in `test.chrome.userdata.path` value in `test.properties`.\n+    *  This is used to bypass login by using previous login data.\n+\n+* The chromedriver process started by the test suite will not automatically get killed after the tests have finished executing.<br>\n+  You will need to manually kill these processes after the tests are done.\n+  * On Windows, use the Task Manager or `taskkill /f /im chromedriver.exe` command.\n+  * On OS X, use the Activity Monitor or `sudo killall chromedriver` command.\n+\n+### Running the tests\n+- When running the test cases, a few cases may fail (this can happen due to timing issues). They can be re-run until they pass without affecting the accuracy of the tests.\n+\n+#### Running the tests with command line\n+E2E tests follow this configuration:\n+\n+Test suite | Command | Results can be viewed in\n+---|---|---\n+`E2E tests` | `./gradlew e2eTests` | `{project folder}/build/reports/e2e-test-try-{n}/index.html`, where `{n}` is the sequence number of the test run\n+Any individual E2E test | `./gradlew e2eTestTry1 --tests TestClassName` | `{project folder}/build/reports/e2e-test-try-1/index.html`\n+\n+\n+- `E2E tests` will be run in their entirety once and the failed tests will be re-run a few times. \n+- Before running `E2E tests`, it is important to have the both front-end and back-end dev servers running locally first if you are testing against them.\n+\n+You can generate the coverage data with `jacocoReport` task after running tests, e.g.:\n+```sh\n+./gradlew e2eTests jacocoReport\n+```\n+The report can be found in the `build/reports/jacoco/jacocoReport/` directory.\n+\n+### Testing against production server\n+\n+If you are testing against a production server (staging server or live server), some additional tasks need to be done.\n+\n+1. You need to setup a `Gmail API`<sup>1</sup> as follows:\n+   * [Obtain a Gmail API credentials](https://github.com/TEAMMATES/teammates-ops/blob/master/platform-guide.md) and download it.\n+   * Copy the file to `src/e2e/resources/gmail-api` (create the `gmail-api` folder) of your project and rename it to `client_secret.json`.\n+   * It is also possible to use the Gmail API credentials from any other Google Cloud Platform project for this purpose.\n+\n+1. Edit `src/e2e/resources/test.properties` as instructed is in its comments.\n+   * In particular, you will need legitimate Google accounts to be used for testing.\n+\n+1. Login manually to TEAMMATES on the browser used for testing to add cookie with login details to the browser profile.\n+   * This profile is added to the web driver so that E2E tests will start with user already logged in. \n+   * This is required as Google does not allow login by automated software.\n+\n+1. For Firefox, run the full test suite or any subset of it as how you would have done it in dev server. \n+   * Do note that the GAE daily quota is usually not enough to run the full test suite, in particular for accounts with no billing enabled.\n+   \n+1. For Chrome, you may have to run tests one at a time as multiple ChromeDriver instances cannot be opened with the same user data.\n+\n+<sup>1</sup> This setup is necessary because our test suite uses the Gmail API to access Gmail accounts used for testing (these accounts are specified in `test.properties`) to confirm that those accounts receive the expected emails from TEAMMATES.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d133dcc5c80012fdf1925d16eeb02c6e454d74f"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d7c93a794a7a38a216e0a697b3759c9fee619e8", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/6d7c93a794a7a38a216e0a697b3759c9fee619e8", "committedDate": "2020-11-02T06:58:08Z", "message": "Improve document layout and wording"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3b5140877581a2a21088c6ab9e9d285514e3c90", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/a3b5140877581a2a21088c6ab9e9d285514e3c90", "committedDate": "2020-11-02T06:56:16Z", "message": "Improve document layout and wording"}, "afterCommit": {"oid": "4573535520ccbc4b9cf851f5e40405df5f41885c", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/4573535520ccbc4b9cf851f5e40405df5f41885c", "committedDate": "2020-11-02T06:58:36Z", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into e2e-docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e7df37691076f04a54ac6a88943d5c9123c50f3", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/8e7df37691076f04a54ac6a88943d5c9123c50f3", "committedDate": "2020-11-02T17:58:18Z", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into e2e-docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4573535520ccbc4b9cf851f5e40405df5f41885c", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/4573535520ccbc4b9cf851f5e40405df5f41885c", "committedDate": "2020-11-02T06:58:36Z", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into e2e-docs"}, "afterCommit": {"oid": "8e7df37691076f04a54ac6a88943d5c9123c50f3", "author": {"user": {"login": "jtankw3", "name": "Tan Kian Wei Jason"}}, "url": "https://github.com/TEAMMATES/teammates/commit/8e7df37691076f04a54ac6a88943d5c9123c50f3", "committedDate": "2020-11-02T17:58:18Z", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into e2e-docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTQ1ODYw", "url": "https://github.com/TEAMMATES/teammates/pull/10812#pullrequestreview-522145860", "createdAt": "2020-11-03T01:43:30Z", "commit": {"oid": "8e7df37691076f04a54ac6a88943d5c9123c50f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64e27792919d7e5c062d004bb83d5b54e67e634c", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/64e27792919d7e5c062d004bb83d5b54e67e634c", "committedDate": "2020-11-03T01:50:22Z", "message": "Merge branch 'master' into e2e-docs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4207, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}