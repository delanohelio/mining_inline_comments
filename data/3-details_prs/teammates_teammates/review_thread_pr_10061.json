{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NTI2NTYy", "number": 10061, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjoxMDoyM1rOD82IiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyNzoyM1rOD9InSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTI4MDcyOnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/webapi/GetCourseSectionNamesActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjoxMDoyM1rOGWCNiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjoxMDoyM1rOGWCNiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1ODA5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void testExecute_nonexistCourse_shouldFail() throws Exception {\n          \n          \n            \n                protected void testExecute_nonExistCourse_shouldFail() throws Exception {", "url": "https://github.com/TEAMMATES/teammates/pull/10061#discussion_r425758091", "createdAt": "2020-05-15T12:10:23Z", "author": {"login": "madanalogy"}, "path": "src/test/java/teammates/test/cases/webapi/GetCourseSectionNamesActionTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package teammates.test.cases.webapi;\n+\n+import java.util.List;\n+\n+import org.apache.http.HttpStatus;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.EntityDoesNotExistException;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.util.Const;\n+import teammates.ui.webapi.action.GetCourseSectionNamesAction;\n+import teammates.ui.webapi.action.JsonResult;\n+import teammates.ui.webapi.output.CourseSectionNamesData;\n+\n+/**\n+ * SUT: {@link GetCourseSectionNamesAction}.\n+ */\n+public class GetCourseSectionNamesActionTest extends BaseActionTest<GetCourseSectionNamesAction> {\n+\n+    @Override\n+    protected String getActionUri() {\n+        return Const.ResourceURIs.COURSE_SECTIONS;\n+    }\n+\n+    @Override\n+    protected String getRequestMethod() {\n+        return GET;\n+    }\n+\n+    @Test\n+    @Override\n+    protected void testExecute() throws Exception {\n+        //See test cases below\n+    }\n+\n+    @Test\n+    protected void testExecute_typicalUsage_shouldPass() throws Exception {\n+        InstructorAttributes instructor1OfCourse1 = typicalBundle.instructors.get(\"instructor1OfCourse1\");\n+        List<String> expectedSectionNames = logic.getSectionNamesForCourse(instructor1OfCourse1.getCourseId());\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        ______TS(\"typical success case for instructor\");\n+\n+        String[] params = {\n+                Const.ParamsNames.COURSE_ID, instructor1OfCourse1.getCourseId(),\n+        };\n+        GetCourseSectionNamesAction getCourseSectionNamesAction = getAction(params);\n+        JsonResult response = getJsonResult(getCourseSectionNamesAction);\n+\n+        assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n+\n+        CourseSectionNamesData courseSectionNamesData = (CourseSectionNamesData) response.getOutput();\n+        assertEquals(expectedSectionNames, courseSectionNamesData.getSectionNames());\n+    }\n+\n+    @Test\n+    protected void testExecute_nonexistCourse_shouldFail() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc00b68f7350b4bff67c91eafd2a0c785bb538c4"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDMwODU2OnYy", "diffSide": "RIGHT", "path": "src/test/java/teammates/test/cases/webapi/GetCourseSectionNamesActionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoyNzoyM1rOGWeJ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzo0MDo0NVrOGXOwgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTkwMg==", "bodyText": "Shouldn't we add other verifications like verifyInaccessibleWithoutLogin?\nYou can check examples in other test cases.", "url": "https://github.com/TEAMMATES/teammates/pull/10061#discussion_r426215902", "createdAt": "2020-05-17T04:27:23Z", "author": {"login": "xpdavid"}, "path": "src/test/java/teammates/test/cases/webapi/GetCourseSectionNamesActionTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package teammates.test.cases.webapi;\n+\n+import java.util.List;\n+\n+import org.apache.http.HttpStatus;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.EntityDoesNotExistException;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.util.Const;\n+import teammates.ui.webapi.action.GetCourseSectionNamesAction;\n+import teammates.ui.webapi.action.JsonResult;\n+import teammates.ui.webapi.output.CourseSectionNamesData;\n+\n+/**\n+ * SUT: {@link GetCourseSectionNamesAction}.\n+ */\n+public class GetCourseSectionNamesActionTest extends BaseActionTest<GetCourseSectionNamesAction> {\n+\n+    @Override\n+    protected String getActionUri() {\n+        return Const.ResourceURIs.COURSE_SECTIONS;\n+    }\n+\n+    @Override\n+    protected String getRequestMethod() {\n+        return GET;\n+    }\n+\n+    @Test\n+    @Override\n+    protected void testExecute() throws Exception {\n+        //See test cases below\n+    }\n+\n+    @Test\n+    protected void testExecute_typicalUsage_shouldPass() throws Exception {\n+        InstructorAttributes instructor1OfCourse1 = typicalBundle.instructors.get(\"instructor1OfCourse1\");\n+        List<String> expectedSectionNames = logic.getSectionNamesForCourse(instructor1OfCourse1.getCourseId());\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        ______TS(\"typical success case for instructor\");\n+\n+        String[] params = {\n+                Const.ParamsNames.COURSE_ID, instructor1OfCourse1.getCourseId(),\n+        };\n+        GetCourseSectionNamesAction getCourseSectionNamesAction = getAction(params);\n+        JsonResult response = getJsonResult(getCourseSectionNamesAction);\n+\n+        assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n+\n+        CourseSectionNamesData courseSectionNamesData = (CourseSectionNamesData) response.getOutput();\n+        assertEquals(expectedSectionNames, courseSectionNamesData.getSectionNames());\n+    }\n+\n+    @Test\n+    protected void testExecute_nonExistCourse_shouldFail() throws Exception {\n+        InstructorAttributes instructor1OfCourse1 = typicalBundle.instructors.get(\"instructor1OfCourse1\");\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        ______TS(\"failed case for non-existent course\");\n+\n+        String[] params = {\n+                Const.ParamsNames.COURSE_ID, \"dummy-course\",\n+        };\n+        assertThrows(EntityDoesNotExistException.class, () -> logic.getSectionNamesForCourse(\"dummy-course\"));\n+\n+        GetCourseSectionNamesAction getCourseSectionNamesAction = getAction(params);\n+        assertThrows(EntityNotFoundException.class, () -> getJsonResult(getCourseSectionNamesAction));\n+    }\n+\n+    @Test\n+    @Override\n+    protected void testAccessControl() throws Exception {\n+        InstructorAttributes instructor1OfCourse1 = typicalBundle.instructors.get(\"instructor1OfCourse1\");\n+\n+        String[] submissionParams = new String[] {\n+                Const.ParamsNames.COURSE_ID, instructor1OfCourse1.getCourseId(),\n+                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,\n+        };\n+\n+        verifyOnlyInstructorsOfTheSameCourseCanAccess(submissionParams);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f25911210f0e10bcdf5b5b2bde8bda9ede8c72"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxMjIyNQ==", "bodyText": "Additional verifications are added.", "url": "https://github.com/TEAMMATES/teammates/pull/10061#discussion_r427012225", "createdAt": "2020-05-19T03:40:45Z", "author": {"login": "Derek-Hardy"}, "path": "src/test/java/teammates/test/cases/webapi/GetCourseSectionNamesActionTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package teammates.test.cases.webapi;\n+\n+import java.util.List;\n+\n+import org.apache.http.HttpStatus;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.exception.EntityDoesNotExistException;\n+import teammates.common.exception.EntityNotFoundException;\n+import teammates.common.util.Const;\n+import teammates.ui.webapi.action.GetCourseSectionNamesAction;\n+import teammates.ui.webapi.action.JsonResult;\n+import teammates.ui.webapi.output.CourseSectionNamesData;\n+\n+/**\n+ * SUT: {@link GetCourseSectionNamesAction}.\n+ */\n+public class GetCourseSectionNamesActionTest extends BaseActionTest<GetCourseSectionNamesAction> {\n+\n+    @Override\n+    protected String getActionUri() {\n+        return Const.ResourceURIs.COURSE_SECTIONS;\n+    }\n+\n+    @Override\n+    protected String getRequestMethod() {\n+        return GET;\n+    }\n+\n+    @Test\n+    @Override\n+    protected void testExecute() throws Exception {\n+        //See test cases below\n+    }\n+\n+    @Test\n+    protected void testExecute_typicalUsage_shouldPass() throws Exception {\n+        InstructorAttributes instructor1OfCourse1 = typicalBundle.instructors.get(\"instructor1OfCourse1\");\n+        List<String> expectedSectionNames = logic.getSectionNamesForCourse(instructor1OfCourse1.getCourseId());\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        ______TS(\"typical success case for instructor\");\n+\n+        String[] params = {\n+                Const.ParamsNames.COURSE_ID, instructor1OfCourse1.getCourseId(),\n+        };\n+        GetCourseSectionNamesAction getCourseSectionNamesAction = getAction(params);\n+        JsonResult response = getJsonResult(getCourseSectionNamesAction);\n+\n+        assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n+\n+        CourseSectionNamesData courseSectionNamesData = (CourseSectionNamesData) response.getOutput();\n+        assertEquals(expectedSectionNames, courseSectionNamesData.getSectionNames());\n+    }\n+\n+    @Test\n+    protected void testExecute_nonExistCourse_shouldFail() throws Exception {\n+        InstructorAttributes instructor1OfCourse1 = typicalBundle.instructors.get(\"instructor1OfCourse1\");\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        ______TS(\"failed case for non-existent course\");\n+\n+        String[] params = {\n+                Const.ParamsNames.COURSE_ID, \"dummy-course\",\n+        };\n+        assertThrows(EntityDoesNotExistException.class, () -> logic.getSectionNamesForCourse(\"dummy-course\"));\n+\n+        GetCourseSectionNamesAction getCourseSectionNamesAction = getAction(params);\n+        assertThrows(EntityNotFoundException.class, () -> getJsonResult(getCourseSectionNamesAction));\n+    }\n+\n+    @Test\n+    @Override\n+    protected void testAccessControl() throws Exception {\n+        InstructorAttributes instructor1OfCourse1 = typicalBundle.instructors.get(\"instructor1OfCourse1\");\n+\n+        String[] submissionParams = new String[] {\n+                Const.ParamsNames.COURSE_ID, instructor1OfCourse1.getCourseId(),\n+                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,\n+        };\n+\n+        verifyOnlyInstructorsOfTheSameCourseCanAccess(submissionParams);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTkwMg=="}, "originalCommit": {"oid": "47f25911210f0e10bcdf5b5b2bde8bda9ede8c72"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3972, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}