{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTM4Njkx", "number": 10269, "title": "[#10221] Add instructor update LNP test case", "bodyText": "Part of #10221\nOutline of Solution\n\nadd new InstructorUpdateLNPTest class\ntarget the backend API endpoint updateInstructorByGoogleIdCascade\ntest the update cascade of instructor name/email to related response & responseComment.\n\nTest endpoint:\nwebapi/instructor?courseid=${courseId}\n\nTest http payload:\nInstructorCreateRequest instructorCreateRequest =\n        new InstructorCreateRequest(\n            INSTRUCTOR_ID,\n            INSTRUCTOR_NAME,\n            UPDATE_INSTRUCTOR_EMAIL,\n            \"Co-owner\",\n            \"Co-owner\", true);\n\nString updateData = sanitizeForCsv(JsonUtils.toJson(instructorCreateRequest));", "createdAt": "2020-07-01T08:42:23Z", "url": "https://github.com/TEAMMATES/teammates/pull/10269", "merged": true, "mergeCommit": {"oid": "a930e94b60533e3dcb2251f80038bbbe9595a85a"}, "closed": true, "closedAt": "2020-07-04T12:38:29Z", "author": {"login": "Derek-Hardy"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwl4vxgH2gAyNDQyNTM4NjkxOjgzN2YxN2MzNmUyNzE5MWNkYWE5MTQ4MzI2NWM5YzUyNTU3MTkwYmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxjF97AH2gAyNDQyNTM4NjkxOjg2ZDE3YjA5NmQwZGY2ZjMxY2FhYjQ1ZDA5MGQyMTc3NDc4Njk1NDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "837f17c36e27191cdaa91483265c9c52557190bf", "author": {"user": {"login": "Derek-Hardy", "name": "Derek-Hardy"}}, "url": "https://github.com/TEAMMATES/teammates/commit/837f17c36e27191cdaa91483265c9c52557190bf", "committedDate": "2020-07-01T08:22:55Z", "message": "add instructor update LNP test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjgzOTg1", "url": "https://github.com/TEAMMATES/teammates/pull/10269#pullrequestreview-441283985", "createdAt": "2020-07-02T01:01:02Z", "commit": {"oid": "837f17c36e27191cdaa91483265c9c52557190bf"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTowMTowMlrOGr59zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTowMzowOVrOGr5_9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MTY2MQ==", "bodyText": "Here is the mistake.\nThe feedback question ID is randomly generated and thus cannot be guessed beforehand. To circumvent that problem, the DataBundleLogic is designed such that it will read the existing feedback question by using the course ID, feedback session name, and question number which is hacked (in a way) to be the feedback question ID field in the JSON data.\nSo here the value you should use is \"1\", as you have only added one feedback question.", "url": "https://github.com/TEAMMATES/teammates/pull/10269#discussion_r448691661", "createdAt": "2020-07-02T01:01:02Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/lnp/InstructorUpdateLNPTest.java", "diffHunk": "@@ -0,0 +1,367 @@\n+package teammates.e2e.cases.lnp;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.jmeter.protocol.http.control.HeaderManager;\n+import org.apache.jorphan.collections.HashTree;\n+import org.apache.jorphan.collections.ListedHashTree;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.DataBundle;\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.InstructorPrivileges;\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextResponseDetails;\n+import teammates.common.util.Const;\n+import teammates.common.util.JsonUtils;\n+import teammates.e2e.util.JMeterElements;\n+import teammates.e2e.util.LNPSpecification;\n+import teammates.e2e.util.LNPTestData;\n+import teammates.ui.webapi.request.InstructorCreateRequest;\n+\n+/**\n+* L&P Test Case for instructor update cascade API.\n+*/\n+public class InstructorUpdateLNPTest extends BaseLNPTestCase {\n+    private static final int NUM_INSTRUCTORS = 1;\n+    private static final int RAMP_UP_PERIOD = NUM_INSTRUCTORS * 2;\n+\n+    private static final int NUMBER_OF_FEEDBACK_RESPONSE_COMMENTS = 100;\n+\n+    private static final String COURSE_ID = \"TestData.CS101\";\n+    private static final String COURSE_NAME = \"LnPCourse\";\n+    private static final String COURSE_TIME_ZONE = \"UTC\";\n+\n+    private static final String INSTRUCTOR_ID = \"LnPInstructor_id\";\n+    private static final String INSTRUCTOR_NAME = \"LnPInstructor\";\n+    private static final String INSTRUCTOR_EMAIL = \"tmms.test@gmail.tmt\";\n+\n+    private static final String UPDATE_INSTRUCTOR_EMAIL = \"update.test@gmail.tmt\";\n+\n+    private static final String HAS_ADMIN_PRIVILEGE = \"no\";\n+\n+    private static final String STUDENT_ID = \"LnPStudent.tmms\";\n+    private static final String STUDENT_NAME = \"LnPStudent\";\n+    private static final String STUDENT_EMAIL = \"studentEmail@gmail.tmt\";\n+\n+    private static final String TEAM_NAME = \"Team 1\";\n+    private static final String GIVER_SECTION_NAME = \"Section 1\";\n+    private static final String RECEIVER_SECTION_NAME = \"Section 1\";\n+\n+    private static final String FEEDBACK_SESSION_NAME = \"Test Feedback Session\";\n+\n+    private static final String FEEDBACK_RESPONSE_ID = \"ResponseForQ\";\n+\n+    private static final String FEEDBACK_RESPONSE_COMMENT_ID = \"TestComment\";\n+\n+    private static final String FEEDBACK_QUESTION_ID = \"QuestionTest\";\n+    private static final String FEEDBACK_QUESTION_TEXT = \"Test Question\";\n+\n+    private static final double ERROR_RATE_LIMIT = 0.01;\n+    private static final double MEAN_RESP_TIME_LIMIT = 10;\n+\n+    @Override\n+    protected LNPTestData getTestData() {\n+        return new LNPTestData() {\n+            @Override\n+            protected Map<String, AccountAttributes> generateAccounts() {\n+                return new HashMap<>();\n+            }\n+\n+            @Override\n+            protected Map<String, CourseAttributes> generateCourses() {\n+                Map<String, CourseAttributes> courses = new HashMap<>();\n+\n+                courses.put(COURSE_NAME, CourseAttributes.builder(COURSE_ID)\n+                        .withName(COURSE_NAME)\n+                        .withTimezone(ZoneId.of(COURSE_TIME_ZONE))\n+                        .build());\n+\n+                return courses;\n+            }\n+\n+            @Override\n+            protected Map<String, InstructorAttributes> generateInstructors() {\n+                Map<String, InstructorAttributes> instructors = new HashMap<>();\n+\n+                instructors.put(INSTRUCTOR_NAME,\n+                        InstructorAttributes.builder(COURSE_ID, INSTRUCTOR_EMAIL)\n+                            .withGoogleId(INSTRUCTOR_ID)\n+                            .withName(INSTRUCTOR_NAME)\n+                            .withRole(\"Co-owner\")\n+                            .withIsDisplayedToStudents(true)\n+                            .withDisplayedName(\"Co-owner\")\n+                            .withPrivileges(new InstructorPrivileges(\n+                                    Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER))\n+                            .build()\n+                );\n+\n+                return instructors;\n+            }\n+\n+            @Override\n+            protected Map<String, StudentAttributes> generateStudents() {\n+                Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+                StudentAttributes studentAttribute;\n+\n+                studentAttribute = StudentAttributes.builder(COURSE_ID, STUDENT_EMAIL)\n+                        .withGoogleId(STUDENT_ID)\n+                        .withName(STUDENT_NAME)\n+                        .withComment(\"This student's name is \" + STUDENT_NAME)\n+                        .withSectionName(GIVER_SECTION_NAME)\n+                        .withTeamName(TEAM_NAME)\n+                        .build();\n+\n+                students.put(STUDENT_NAME, studentAttribute);\n+\n+                return students;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackSessionAttributes> generateFeedbackSessions() {\n+                Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+                FeedbackSessionAttributes session = FeedbackSessionAttributes\n+                        .builder(FEEDBACK_SESSION_NAME, COURSE_ID)\n+                        .withCreatorEmail(INSTRUCTOR_EMAIL)\n+                        .withStartTime(Instant.now())\n+                        .withEndTime(Instant.now().plusSeconds(500))\n+                        .withSessionVisibleFromTime(Instant.now())\n+                        .withResultsVisibleFromTime(Instant.now())\n+                        .build();\n+\n+                feedbackSessions.put(FEEDBACK_SESSION_NAME, session);\n+\n+                return feedbackSessions;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackQuestionAttributes> generateFeedbackQuestions() {\n+                ArrayList<FeedbackParticipantType> showResponses = new ArrayList<>();\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                showResponses.add(FeedbackParticipantType.INSTRUCTORS);\n+\n+                ArrayList<FeedbackParticipantType> showGiverName = new ArrayList<>();\n+                showGiverName.add(FeedbackParticipantType.INSTRUCTORS);\n+\n+                ArrayList<FeedbackParticipantType> showRecepientName = new ArrayList<>();\n+                showRecepientName.add(FeedbackParticipantType.INSTRUCTORS);\n+\n+                Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+                FeedbackQuestionDetails details = new FeedbackTextQuestionDetails(FEEDBACK_QUESTION_TEXT);\n+\n+                feedbackQuestions.put(FEEDBACK_QUESTION_ID,\n+                        FeedbackQuestionAttributes.builder()\n+                                .withFeedbackSessionName(FEEDBACK_SESSION_NAME)\n+                                .withQuestionDescription(FEEDBACK_QUESTION_TEXT)\n+                                .withCourseId(COURSE_ID)\n+                                .withQuestionDetails(details)\n+                                .withQuestionNumber(1)\n+                                .withGiverType(FeedbackParticipantType.INSTRUCTORS)\n+                                .withRecipientType(FeedbackParticipantType.STUDENTS)\n+                                .withShowResponsesTo(showResponses)\n+                                .withShowGiverNameTo(showGiverName)\n+                                .withShowRecipientNameTo(showRecepientName)\n+                                .build()\n+                );\n+\n+                return feedbackQuestions;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackResponseAttributes> generateFeedbackResponses() {\n+                Map<String, FeedbackResponseAttributes> feedbackResponses = new HashMap<>();\n+                FeedbackTextResponseDetails details =\n+                        new FeedbackTextResponseDetails(FEEDBACK_RESPONSE_ID);\n+\n+                feedbackResponses.put(FEEDBACK_RESPONSE_ID,\n+                        FeedbackResponseAttributes.builder(FEEDBACK_QUESTION_ID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "837f17c36e27191cdaa91483265c9c52557190bf"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MjIxMg==", "bodyText": "Similarly here.\nFor feedback response ID, the convention is (feedback_question_id)%(giver_email)%(recipient_email), but I don't think this one matters for now.", "url": "https://github.com/TEAMMATES/teammates/pull/10269#discussion_r448692212", "createdAt": "2020-07-02T01:03:09Z", "author": {"login": "wkurniawan07"}, "path": "src/e2e/java/teammates/e2e/cases/lnp/InstructorUpdateLNPTest.java", "diffHunk": "@@ -0,0 +1,367 @@\n+package teammates.e2e.cases.lnp;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.jmeter.protocol.http.control.HeaderManager;\n+import org.apache.jorphan.collections.HashTree;\n+import org.apache.jorphan.collections.ListedHashTree;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.DataBundle;\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.InstructorPrivileges;\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextResponseDetails;\n+import teammates.common.util.Const;\n+import teammates.common.util.JsonUtils;\n+import teammates.e2e.util.JMeterElements;\n+import teammates.e2e.util.LNPSpecification;\n+import teammates.e2e.util.LNPTestData;\n+import teammates.ui.webapi.request.InstructorCreateRequest;\n+\n+/**\n+* L&P Test Case for instructor update cascade API.\n+*/\n+public class InstructorUpdateLNPTest extends BaseLNPTestCase {\n+    private static final int NUM_INSTRUCTORS = 1;\n+    private static final int RAMP_UP_PERIOD = NUM_INSTRUCTORS * 2;\n+\n+    private static final int NUMBER_OF_FEEDBACK_RESPONSE_COMMENTS = 100;\n+\n+    private static final String COURSE_ID = \"TestData.CS101\";\n+    private static final String COURSE_NAME = \"LnPCourse\";\n+    private static final String COURSE_TIME_ZONE = \"UTC\";\n+\n+    private static final String INSTRUCTOR_ID = \"LnPInstructor_id\";\n+    private static final String INSTRUCTOR_NAME = \"LnPInstructor\";\n+    private static final String INSTRUCTOR_EMAIL = \"tmms.test@gmail.tmt\";\n+\n+    private static final String UPDATE_INSTRUCTOR_EMAIL = \"update.test@gmail.tmt\";\n+\n+    private static final String HAS_ADMIN_PRIVILEGE = \"no\";\n+\n+    private static final String STUDENT_ID = \"LnPStudent.tmms\";\n+    private static final String STUDENT_NAME = \"LnPStudent\";\n+    private static final String STUDENT_EMAIL = \"studentEmail@gmail.tmt\";\n+\n+    private static final String TEAM_NAME = \"Team 1\";\n+    private static final String GIVER_SECTION_NAME = \"Section 1\";\n+    private static final String RECEIVER_SECTION_NAME = \"Section 1\";\n+\n+    private static final String FEEDBACK_SESSION_NAME = \"Test Feedback Session\";\n+\n+    private static final String FEEDBACK_RESPONSE_ID = \"ResponseForQ\";\n+\n+    private static final String FEEDBACK_RESPONSE_COMMENT_ID = \"TestComment\";\n+\n+    private static final String FEEDBACK_QUESTION_ID = \"QuestionTest\";\n+    private static final String FEEDBACK_QUESTION_TEXT = \"Test Question\";\n+\n+    private static final double ERROR_RATE_LIMIT = 0.01;\n+    private static final double MEAN_RESP_TIME_LIMIT = 10;\n+\n+    @Override\n+    protected LNPTestData getTestData() {\n+        return new LNPTestData() {\n+            @Override\n+            protected Map<String, AccountAttributes> generateAccounts() {\n+                return new HashMap<>();\n+            }\n+\n+            @Override\n+            protected Map<String, CourseAttributes> generateCourses() {\n+                Map<String, CourseAttributes> courses = new HashMap<>();\n+\n+                courses.put(COURSE_NAME, CourseAttributes.builder(COURSE_ID)\n+                        .withName(COURSE_NAME)\n+                        .withTimezone(ZoneId.of(COURSE_TIME_ZONE))\n+                        .build());\n+\n+                return courses;\n+            }\n+\n+            @Override\n+            protected Map<String, InstructorAttributes> generateInstructors() {\n+                Map<String, InstructorAttributes> instructors = new HashMap<>();\n+\n+                instructors.put(INSTRUCTOR_NAME,\n+                        InstructorAttributes.builder(COURSE_ID, INSTRUCTOR_EMAIL)\n+                            .withGoogleId(INSTRUCTOR_ID)\n+                            .withName(INSTRUCTOR_NAME)\n+                            .withRole(\"Co-owner\")\n+                            .withIsDisplayedToStudents(true)\n+                            .withDisplayedName(\"Co-owner\")\n+                            .withPrivileges(new InstructorPrivileges(\n+                                    Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER))\n+                            .build()\n+                );\n+\n+                return instructors;\n+            }\n+\n+            @Override\n+            protected Map<String, StudentAttributes> generateStudents() {\n+                Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+                StudentAttributes studentAttribute;\n+\n+                studentAttribute = StudentAttributes.builder(COURSE_ID, STUDENT_EMAIL)\n+                        .withGoogleId(STUDENT_ID)\n+                        .withName(STUDENT_NAME)\n+                        .withComment(\"This student's name is \" + STUDENT_NAME)\n+                        .withSectionName(GIVER_SECTION_NAME)\n+                        .withTeamName(TEAM_NAME)\n+                        .build();\n+\n+                students.put(STUDENT_NAME, studentAttribute);\n+\n+                return students;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackSessionAttributes> generateFeedbackSessions() {\n+                Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+                FeedbackSessionAttributes session = FeedbackSessionAttributes\n+                        .builder(FEEDBACK_SESSION_NAME, COURSE_ID)\n+                        .withCreatorEmail(INSTRUCTOR_EMAIL)\n+                        .withStartTime(Instant.now())\n+                        .withEndTime(Instant.now().plusSeconds(500))\n+                        .withSessionVisibleFromTime(Instant.now())\n+                        .withResultsVisibleFromTime(Instant.now())\n+                        .build();\n+\n+                feedbackSessions.put(FEEDBACK_SESSION_NAME, session);\n+\n+                return feedbackSessions;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackQuestionAttributes> generateFeedbackQuestions() {\n+                ArrayList<FeedbackParticipantType> showResponses = new ArrayList<>();\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                showResponses.add(FeedbackParticipantType.INSTRUCTORS);\n+\n+                ArrayList<FeedbackParticipantType> showGiverName = new ArrayList<>();\n+                showGiverName.add(FeedbackParticipantType.INSTRUCTORS);\n+\n+                ArrayList<FeedbackParticipantType> showRecepientName = new ArrayList<>();\n+                showRecepientName.add(FeedbackParticipantType.INSTRUCTORS);\n+\n+                Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+                FeedbackQuestionDetails details = new FeedbackTextQuestionDetails(FEEDBACK_QUESTION_TEXT);\n+\n+                feedbackQuestions.put(FEEDBACK_QUESTION_ID,\n+                        FeedbackQuestionAttributes.builder()\n+                                .withFeedbackSessionName(FEEDBACK_SESSION_NAME)\n+                                .withQuestionDescription(FEEDBACK_QUESTION_TEXT)\n+                                .withCourseId(COURSE_ID)\n+                                .withQuestionDetails(details)\n+                                .withQuestionNumber(1)\n+                                .withGiverType(FeedbackParticipantType.INSTRUCTORS)\n+                                .withRecipientType(FeedbackParticipantType.STUDENTS)\n+                                .withShowResponsesTo(showResponses)\n+                                .withShowGiverNameTo(showGiverName)\n+                                .withShowRecipientNameTo(showRecepientName)\n+                                .build()\n+                );\n+\n+                return feedbackQuestions;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackResponseAttributes> generateFeedbackResponses() {\n+                Map<String, FeedbackResponseAttributes> feedbackResponses = new HashMap<>();\n+                FeedbackTextResponseDetails details =\n+                        new FeedbackTextResponseDetails(FEEDBACK_RESPONSE_ID);\n+\n+                feedbackResponses.put(FEEDBACK_RESPONSE_ID,\n+                        FeedbackResponseAttributes.builder(FEEDBACK_QUESTION_ID,\n+                            INSTRUCTOR_EMAIL,\n+                            STUDENT_EMAIL)\n+                            .withCourseId(COURSE_ID)\n+                            .withFeedbackSessionName(FEEDBACK_SESSION_NAME)\n+                            .withGiverSection(GIVER_SECTION_NAME)\n+                            .withRecipientSection(RECEIVER_SECTION_NAME)\n+                            .withResponseDetails(details)\n+                            .build());\n+\n+                return feedbackResponses;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackResponseCommentAttributes> generateFeedbackResponseComments() {\n+                ArrayList<FeedbackParticipantType> showComments = new ArrayList<>();\n+                showComments.add(FeedbackParticipantType.RECEIVER);\n+                showComments.add(FeedbackParticipantType.INSTRUCTORS);\n+\n+                ArrayList<FeedbackParticipantType> showGiverName = new ArrayList<>();\n+                showGiverName.add(FeedbackParticipantType.INSTRUCTORS);\n+\n+                Map<String, FeedbackResponseCommentAttributes> feedbackResponseComments = new HashMap<>();\n+\n+                for (int i = 1; i <= NUMBER_OF_FEEDBACK_RESPONSE_COMMENTS; i++) {\n+                    String responseCommentText = FEEDBACK_RESPONSE_COMMENT_ID + i;\n+                    feedbackResponseComments.put(responseCommentText,\n+                            FeedbackResponseCommentAttributes.builder()\n+                                .withCourseId(COURSE_ID)\n+                                .withFeedbackResponseId(FEEDBACK_RESPONSE_ID)\n+                                .withFeedbackQuestionId(FEEDBACK_QUESTION_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "837f17c36e27191cdaa91483265c9c52557190bf"}, "originalPosition": 226}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d7c5c62b6a75a6d5a5473fa43cfe8e1b13279b", "author": {"user": {"login": "Derek-Hardy", "name": "Derek-Hardy"}}, "url": "https://github.com/TEAMMATES/teammates/commit/32d7c5c62b6a75a6d5a5473fa43cfe8e1b13279b", "committedDate": "2020-07-02T01:49:51Z", "message": "fixed wrong question id in FeedbackResponseAttributes builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a6a1ce4f623e19fea51caf6ced9e9ef025c061b", "author": {"user": {"login": "Derek-Hardy", "name": "Derek-Hardy"}}, "url": "https://github.com/TEAMMATES/teammates/commit/4a6a1ce4f623e19fea51caf6ced9e9ef025c061b", "committedDate": "2020-07-02T03:08:16Z", "message": "Merge branch 'master' into lnp-instructor-update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjk5NTk3", "url": "https://github.com/TEAMMATES/teammates/pull/10269#pullrequestreview-442299597", "createdAt": "2020-07-03T09:59:19Z", "commit": {"oid": "4a6a1ce4f623e19fea51caf6ced9e9ef025c061b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTkwMDI2", "url": "https://github.com/TEAMMATES/teammates/pull/10269#pullrequestreview-442590026", "createdAt": "2020-07-04T06:03:24Z", "commit": {"oid": "4a6a1ce4f623e19fea51caf6ced9e9ef025c061b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86d17b096d0df6f31caab45d090d217747869549", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/TEAMMATES/teammates/commit/86d17b096d0df6f31caab45d090d217747869549", "committedDate": "2020-07-04T07:41:34Z", "message": "Merge branch 'master' into lnp-instructor-update"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4267, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}