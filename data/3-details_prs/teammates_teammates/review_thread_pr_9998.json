{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NTIxNjAw", "number": 9998, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOToyNzoyNFrODvRdSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNToxNzo1NlrODwxpsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODk1Njg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/SearchInstructorsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOToyNzoyNFrOGBmnRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOToyNzoyNFrOGBmnRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzNDQwNw==", "bodyText": "Might be good to put the string literal in const.java since it is used in multiple places", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r404334407", "createdAt": "2020-04-06T19:27:24Z", "author": {"login": "tiuweehan"}, "path": "src/main/java/teammates/ui/webapi/action/SearchInstructorsAction.java", "diffHunk": "@@ -26,13 +28,30 @@ public void checkSpecificAccessControl() {\n         }\n     }\n \n+    private void addAdditionalSearchFields(InstructorsData instructorsData, List<InstructorAttributes> instructors) {\n+        instructorsData.getInstructors()\n+                .forEach((InstructorData instructor) -> {\n+                    if (instructor.getGoogleId() != null) {\n+                        AccountAttributes account = logic.getAccount(instructor.getGoogleId());\n+                        if (account != null) {\n+                            String institute = StringHelper.isEmpty(account.institute) ? \"None\" : account.institute;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22efc66a8641c5a510429e6c8a0cea2af6af9b85"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODk1OTU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/action/SearchStudentsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOToyODowN1rOGBmo1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOToyODowN1rOGBmo1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzNDgwNA==", "bodyText": "Same here", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r404334804", "createdAt": "2020-04-06T19:28:07Z", "author": {"login": "tiuweehan"}, "path": "src/main/java/teammates/ui/webapi/action/SearchStudentsAction.java", "diffHunk": "@@ -26,6 +36,44 @@ public void checkSpecificAccessControl() {\n         }\n     }\n \n+    private void populateCourseIdToInstituteMap() {\n+        for (String courseId : courseIds) {\n+            String instructorForCourseGoogleId = findAvailableInstructorGoogleIdForCourse(courseId);\n+            AccountAttributes account = logic.getAccount(instructorForCourseGoogleId);\n+            if (account == null) {\n+                continue;\n+            }\n+\n+            String institute = StringHelper.isEmpty(account.institute) ? \"None\" : account.institute;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22efc66a8641c5a510429e6c8a0cea2af6af9b85"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODk4MjYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/output/InstructorData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTozNDozM1rOGBm3Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTozNDozM1rOGBm3Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzODQ3NQ==", "bodyText": "Probably not necessary but you can assert that the resulting list is not empty", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r404338475", "createdAt": "2020-04-06T19:34:33Z", "author": {"login": "tiuweehan"}, "path": "src/main/java/teammates/ui/webapi/output/InstructorData.java", "diffHunk": "@@ -85,6 +93,25 @@ public void setJoinState(JoinState joinState) {\n         this.joinState = joinState;\n     }\n \n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(List<InstructorAttributes> instructorAttributes) {\n+        this.key = StringHelper.encrypt(instructorAttributes.stream()\n+                .filter((InstructorAttributes instructorAttribute)\n+                        -> this.googleId.equals(instructorAttribute.getGoogleId()))\n+                .collect(Collectors.toList()).get(0).getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22efc66a8641c5a510429e6c8a0cea2af6af9b85"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTAwMDczOnYy", "diffSide": "RIGHT", "path": "src/web/services/link.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTozOTo0OFrOGBnCTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTozOTo0OFrOGBnCTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0MTMyNA==", "bodyText": "The URIs here can be added to java/teammates/ui/webapi/endpoints/ResourceEndpoints in the backend, and imported from api-endpoints.ts after you run generateTypes. This will ensure consistency between frontend and backend.", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r404341324", "createdAt": "2020-04-06T19:39:48Z", "author": {"login": "tiuweehan"}, "path": "src/web/services/link.service.ts", "diffHunk": "@@ -0,0 +1,139 @@\n+import { Injectable } from '@angular/core';\n+\n+import { Instructor, Student } from '../types/api-output';\n+import { environment } from './../environments/environment';\n+import { NavigationService } from './navigation.service';\n+\n+/**\n+ * Handles the logic for generating links on the client.\n+ */\n+\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class LinkService {\n+\n+  URI_PREFIX: string = 'web';\n+  JOIN_PAGE: string = 'join';\n+  STUDENT_HOME_PAGE: string = 'student/home';\n+  INSTRUCTOR_HOME_PAGE: string = 'instuctor/home';\n+  ADMIN_ACCOUNTS_PAGE: string = 'admin/accounts';\n+  INSTRUCTOR_STUDENT_RECORDS_PAGE: string = 'instructor/students/records';\n+  SESSIONS_SUBMISSION_PAGE: string = 'sessions/submission';\n+  SESSIONS_RESULT_PAGE: string = 'sessions/result';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22efc66a8641c5a510429e6c8a0cea2af6af9b85"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzU2MjU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/teammates/ui/webapi/endpoints/WebPageEndpoints.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTozNzo1M1rOGCTIAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToyNjoxNVrOGD4Ccg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzY4MA==", "bodyText": "You know the file will be auto-sync to the frontend right? Don't you think it is a bit weird for the backend to control what the frontend URL would be?", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405063680", "createdAt": "2020-04-07T19:37:53Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/endpoints/WebPageEndpoints.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.WebPageURIs;\n+\n+/**\n+ * API endpoints for web pages.\n+ */\n+public enum WebPageEndpoints {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNDM3OA==", "bodyText": "Actually could I ask what this auto-sync means? I was trying to follow Wee Han's ResourceEndpoints format because previously i was hardcoding the raw string which felt a little wrong", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405234378", "createdAt": "2020-04-08T03:15:54Z", "author": {"login": "hcwong"}, "path": "src/main/java/teammates/ui/webapi/endpoints/WebPageEndpoints.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.WebPageURIs;\n+\n+/**\n+ * API endpoints for web pages.\n+ */\n+public enum WebPageEndpoints {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzY4MA=="}, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0NDc1Nw==", "bodyText": "@tiuweehan You might want to explain?", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405244757", "createdAt": "2020-04-08T03:59:44Z", "author": {"login": "xpdavid"}, "path": "src/main/java/teammates/ui/webapi/endpoints/WebPageEndpoints.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.WebPageURIs;\n+\n+/**\n+ * API endpoints for web pages.\n+ */\n+public enum WebPageEndpoints {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzY4MA=="}, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxNzA0Mg==", "bodyText": "The URIs for navigation should stay in the frontend - only the URIs for API calls should be synced in both frontend and backend", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r406717042", "createdAt": "2020-04-10T11:26:15Z", "author": {"login": "tiuweehan"}, "path": "src/main/java/teammates/ui/webapi/endpoints/WebPageEndpoints.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package teammates.ui.webapi.endpoints;\n+\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import teammates.common.util.Const.WebPageURIs;\n+\n+/**\n+ * API endpoints for web pages.\n+ */\n+public enum WebPageEndpoints {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzY4MA=="}, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzYwMTU3OnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0OTozNlrOGCTg-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0OTozNlrOGCTg-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3MDA3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              getStudents(searchKey: string): Observable<Students> {\n          \n          \n            \n              searchStudents(searchKey: string): Observable<Students> {", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405070075", "createdAt": "2020-04-07T19:49:36Z", "author": {"login": "xpdavid"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,277 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { flatMap, map } from 'rxjs/operators';\n+import { WebPageEndpoints } from '../types/api-endpoints';\n+import {\n+  Course,\n+  FeedbackSessions,\n+  Instructor,\n+  InstructorPermissionRole,\n+  InstructorPrivilege,\n+  Instructors,\n+  Student,\n+  Students,\n+} from '../types/api-output';\n+import { Intent } from '../types/api-request';\n+import { CourseService } from './course.service';\n+import { FeedbackSessionsService } from './feedback-sessions.service';\n+import { HttpRequestService } from './http-request.service';\n+import { InstructorService } from './instructor.service';\n+import { LinkService } from './link.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+\n+  constructor(\n+    private instructorService: InstructorService,\n+    private httpRequestService: HttpRequestService,\n+    private feedbackSessionService: FeedbackSessionsService,\n+    private courseService: CourseService,\n+    private linkService: LinkService) {\n+  }\n+\n+  searchAdmin(searchKey: string): Observable<AdminSearchResult> {\n+    return forkJoin(\n+      this.getStudents(searchKey).pipe(\n+        map((students: Students) => students.students),\n+        flatMap((studentsArray: Student[]) =>\n+                studentsArray.length !== 0\n+                  ? forkJoin(studentsArray.map((student: Student) => this.createStudentAccountSearchResult(student)))\n+                  // Returning an empty array observable in the event studentsArray is empty\n+                  // else the outer forkJoin will not complete\n+                  : of([])),\n+      ),\n+      this.getInstructors(searchKey).pipe(\n+        map((instructors: Instructors) => instructors.instructors),\n+        flatMap((instructorsArray: Instructor[]) =>\n+                instructorsArray.length !== 0\n+                  ? forkJoin(instructorsArray.map((instructor: Instructor) =>\n+                                                  this.createInstructorAccountSearchResult(instructor)))\n+                  // Returning an empty array observable in the event instructorsArray is empty.\n+                  // else the outer forkjoin will not complete\n+                  : of([])),\n+      ),\n+    ).pipe(\n+      map((resp: [StudentAccountSearchResult[], InstructorAccountSearchResult[]]) => ({\n+        students: resp[0],\n+        instructors: resp[1],\n+      })),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzYwMjkwOnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0OTo1NVrOGCThxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0OTo1NVrOGCThxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3MDI3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              getInstructors(searchKey: string): Observable<Instructors> {\n          \n          \n            \n              searchInstructors(searchKey: string): Observable<Instructors> {", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405070276", "createdAt": "2020-04-07T19:49:55Z", "author": {"login": "xpdavid"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,277 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { flatMap, map } from 'rxjs/operators';\n+import { WebPageEndpoints } from '../types/api-endpoints';\n+import {\n+  Course,\n+  FeedbackSessions,\n+  Instructor,\n+  InstructorPermissionRole,\n+  InstructorPrivilege,\n+  Instructors,\n+  Student,\n+  Students,\n+} from '../types/api-output';\n+import { Intent } from '../types/api-request';\n+import { CourseService } from './course.service';\n+import { FeedbackSessionsService } from './feedback-sessions.service';\n+import { HttpRequestService } from './http-request.service';\n+import { InstructorService } from './instructor.service';\n+import { LinkService } from './link.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+\n+  constructor(\n+    private instructorService: InstructorService,\n+    private httpRequestService: HttpRequestService,\n+    private feedbackSessionService: FeedbackSessionsService,\n+    private courseService: CourseService,\n+    private linkService: LinkService) {\n+  }\n+\n+  searchAdmin(searchKey: string): Observable<AdminSearchResult> {\n+    return forkJoin(\n+      this.getStudents(searchKey).pipe(\n+        map((students: Students) => students.students),\n+        flatMap((studentsArray: Student[]) =>\n+                studentsArray.length !== 0\n+                  ? forkJoin(studentsArray.map((student: Student) => this.createStudentAccountSearchResult(student)))\n+                  // Returning an empty array observable in the event studentsArray is empty\n+                  // else the outer forkJoin will not complete\n+                  : of([])),\n+      ),\n+      this.getInstructors(searchKey).pipe(\n+        map((instructors: Instructors) => instructors.instructors),\n+        flatMap((instructorsArray: Instructor[]) =>\n+                instructorsArray.length !== 0\n+                  ? forkJoin(instructorsArray.map((instructor: Instructor) =>\n+                                                  this.createInstructorAccountSearchResult(instructor)))\n+                  // Returning an empty array observable in the event instructorsArray is empty.\n+                  // else the outer forkjoin will not complete\n+                  : of([])),\n+      ),\n+    ).pipe(\n+      map((resp: [StudentAccountSearchResult[], InstructorAccountSearchResult[]]) => ({\n+        students: resp[0],\n+        instructors: resp[1],\n+      })),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getInstructors(searchKey: string): Observable<Instructors> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzYxOTk1OnYy", "diffSide": "RIGHT", "path": "src/web/services/link.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo1NDo0MlrOGCTsZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo1NDo0MlrOGCTsZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3Mjk5Ng==", "bodyText": "instructorGoogleId -> masqueradeGoolgeId / masqueradeInstructorGoolgeId", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405072996", "createdAt": "2020-04-07T19:54:42Z", "author": {"login": "xpdavid"}, "path": "src/web/services/link.service.ts", "diffHunk": "@@ -0,0 +1,131 @@\n+import { Injectable } from '@angular/core';\n+\n+import { WebPageEndpoints } from '../types/api-endpoints';\n+import { Instructor, Student } from '../types/api-output';\n+import { environment } from './../environments/environment';\n+import { NavigationService } from './navigation.service';\n+\n+/**\n+ * Handles the logic for generating links on the client.\n+ */\n+\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class LinkService {\n+\n+  constructor(private navigationService: NavigationService) {}\n+\n+  /**\n+   * Generates course join link for student.\n+   */\n+  generateCourseJoinLinkStudent(student: Student): string {\n+    const { frontendUrl }: { frontendUrl: string } = environment;\n+    const { key = '', email: studentemail, courseId: courseid }: Student = student;\n+    const params: {\n+      [key: string]: string,\n+    } = {\n+      key,\n+      studentemail,\n+      courseid,\n+      entitytype: 'student',\n+    };\n+    const encodedParams: string = this.navigationService.encodeParams(params);\n+    return `${frontendUrl}${WebPageEndpoints.JOIN_PAGE}${encodedParams}`;\n+  }\n+\n+  /**\n+   * Generates course join link for instructor.\n+   */\n+  generateCourseJoinLinkInstructor(instructor: Instructor): string {\n+    const { frontendUrl }: { frontendUrl: string } = environment;\n+    const { key = '' }: Instructor = instructor;\n+    const params: {\n+      [key: string]: string,\n+    } = {\n+      key,\n+      entitytype: 'instructor',\n+    };\n+    const encodedParams: string = this.navigationService.encodeParams(params);\n+    return `${frontendUrl}${WebPageEndpoints.JOIN_PAGE}${encodedParams}`;\n+  }\n+\n+  /**\n+   * Generates home page link.\n+   */\n+  generateHomePageLink(googleId: string, homePage: string): string {\n+    const params: {[key: string]: string} = {\n+      user: googleId,\n+    };\n+\n+    const encodedParams: string = this.navigationService.encodeParams(params);\n+    return `${homePage}${encodedParams}`;\n+  }\n+\n+  /**\n+   * Generates manage account link.\n+   */\n+  generateManageAccountLink(googleId: string, accountsPage: string): string {\n+    const params: {\n+      [key: string]: string,\n+    } = {\n+      instructorid: googleId,\n+    };\n+    const encodedParams: string = this.navigationService.encodeParams(params);\n+    return `${accountsPage}${encodedParams}`;\n+  }\n+\n+  /**\n+   * Generates record page link.\n+   * If the instructor id is not valid, return empty string.\n+   */\n+  generateRecordsPageLink(student: Student, instructorGoogleId: string): string {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzYyNjk3OnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo1Njo0MFrOGCTw4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo1Njo0MFrOGCTw4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NDE0Ng==", "bodyText": "I don't think this will work. The result is the privilege of courseId for the current user (even if he is the admin) as the instructor of the course.", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405074146", "createdAt": "2020-04-07T19:56:40Z", "author": {"login": "xpdavid"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,277 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { flatMap, map } from 'rxjs/operators';\n+import { WebPageEndpoints } from '../types/api-endpoints';\n+import {\n+  Course,\n+  FeedbackSessions,\n+  Instructor,\n+  InstructorPermissionRole,\n+  InstructorPrivilege,\n+  Instructors,\n+  Student,\n+  Students,\n+} from '../types/api-output';\n+import { Intent } from '../types/api-request';\n+import { CourseService } from './course.service';\n+import { FeedbackSessionsService } from './feedback-sessions.service';\n+import { HttpRequestService } from './http-request.service';\n+import { InstructorService } from './instructor.service';\n+import { LinkService } from './link.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+\n+  constructor(\n+    private instructorService: InstructorService,\n+    private httpRequestService: HttpRequestService,\n+    private feedbackSessionService: FeedbackSessionsService,\n+    private courseService: CourseService,\n+    private linkService: LinkService) {\n+  }\n+\n+  searchAdmin(searchKey: string): Observable<AdminSearchResult> {\n+    return forkJoin(\n+      this.getStudents(searchKey).pipe(\n+        map((students: Students) => students.students),\n+        flatMap((studentsArray: Student[]) =>\n+                studentsArray.length !== 0\n+                  ? forkJoin(studentsArray.map((student: Student) => this.createStudentAccountSearchResult(student)))\n+                  // Returning an empty array observable in the event studentsArray is empty\n+                  // else the outer forkJoin will not complete\n+                  : of([])),\n+      ),\n+      this.getInstructors(searchKey).pipe(\n+        map((instructors: Instructors) => instructors.instructors),\n+        flatMap((instructorsArray: Instructor[]) =>\n+                instructorsArray.length !== 0\n+                  ? forkJoin(instructorsArray.map((instructor: Instructor) =>\n+                                                  this.createInstructorAccountSearchResult(instructor)))\n+                  // Returning an empty array observable in the event instructorsArray is empty.\n+                  // else the outer forkjoin will not complete\n+                  : of([])),\n+      ),\n+    ).pipe(\n+      map((resp: [StudentAccountSearchResult[], InstructorAccountSearchResult[]]) => ({\n+        students: resp[0],\n+        instructors: resp[1],\n+      })),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getInstructors(searchKey: string): Observable<Instructors> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/instructors', paramMap);\n+  }\n+\n+  createStudentAccountSearchResult(student: Student): Observable<StudentAccountSearchResult> {\n+    const { courseId }: {courseId: string} = student;\n+    return forkJoin(\n+      this.feedbackSessionService.getFeedbackSessionsForStudent(courseId),\n+      this.courseService.getCourseAsStudent(courseId),\n+      this.instructorService.loadInstructors({ courseId, intent: Intent.FULL_DETAIL }),\n+      this.instructorService.loadInstructorPrivilege({ courseId }),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzYyOTg0OnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo1NzoyNVrOGCTymg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzo1OTo1OFrOGCeLjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NDU4Ng==", "bodyText": "I think the logic is a bit wrong. This is to pick a masquerade user so that we can access the record page. I think filter the instructorList is enough.\nI don't understand why instructorPrivilege gets involved here (refer to my previous)", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405074586", "createdAt": "2020-04-07T19:57:25Z", "author": {"login": "xpdavid"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,277 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { flatMap, map } from 'rxjs/operators';\n+import { WebPageEndpoints } from '../types/api-endpoints';\n+import {\n+  Course,\n+  FeedbackSessions,\n+  Instructor,\n+  InstructorPermissionRole,\n+  InstructorPrivilege,\n+  Instructors,\n+  Student,\n+  Students,\n+} from '../types/api-output';\n+import { Intent } from '../types/api-request';\n+import { CourseService } from './course.service';\n+import { FeedbackSessionsService } from './feedback-sessions.service';\n+import { HttpRequestService } from './http-request.service';\n+import { InstructorService } from './instructor.service';\n+import { LinkService } from './link.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+\n+  constructor(\n+    private instructorService: InstructorService,\n+    private httpRequestService: HttpRequestService,\n+    private feedbackSessionService: FeedbackSessionsService,\n+    private courseService: CourseService,\n+    private linkService: LinkService) {\n+  }\n+\n+  searchAdmin(searchKey: string): Observable<AdminSearchResult> {\n+    return forkJoin(\n+      this.getStudents(searchKey).pipe(\n+        map((students: Students) => students.students),\n+        flatMap((studentsArray: Student[]) =>\n+                studentsArray.length !== 0\n+                  ? forkJoin(studentsArray.map((student: Student) => this.createStudentAccountSearchResult(student)))\n+                  // Returning an empty array observable in the event studentsArray is empty\n+                  // else the outer forkJoin will not complete\n+                  : of([])),\n+      ),\n+      this.getInstructors(searchKey).pipe(\n+        map((instructors: Instructors) => instructors.instructors),\n+        flatMap((instructorsArray: Instructor[]) =>\n+                instructorsArray.length !== 0\n+                  ? forkJoin(instructorsArray.map((instructor: Instructor) =>\n+                                                  this.createInstructorAccountSearchResult(instructor)))\n+                  // Returning an empty array observable in the event instructorsArray is empty.\n+                  // else the outer forkjoin will not complete\n+                  : of([])),\n+      ),\n+    ).pipe(\n+      map((resp: [StudentAccountSearchResult[], InstructorAccountSearchResult[]]) => ({\n+        students: resp[0],\n+        instructors: resp[1],\n+      })),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getInstructors(searchKey: string): Observable<Instructors> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/instructors', paramMap);\n+  }\n+\n+  createStudentAccountSearchResult(student: Student): Observable<StudentAccountSearchResult> {\n+    const { courseId }: {courseId: string} = student;\n+    return forkJoin(\n+      this.feedbackSessionService.getFeedbackSessionsForStudent(courseId),\n+      this.courseService.getCourseAsStudent(courseId),\n+      this.instructorService.loadInstructors({ courseId, intent: Intent.FULL_DETAIL }),\n+      this.instructorService.loadInstructorPrivilege({ courseId }),\n+    ).pipe(\n+      map((resp: [FeedbackSessions, Course, Instructors, InstructorPrivilege]) => this.joinAdminStudent(resp, student)),\n+    );\n+  }\n+\n+  joinAdminStudent(\n+    resp: [FeedbackSessions, Course, Instructors, InstructorPrivilege], student: Student,\n+  ): StudentAccountSearchResult {\n+    const [feedbackSessions, course, instructors, instructorPrivilege]: [\n+      FeedbackSessions, Course, Instructors, InstructorPrivilege\n+    ] = resp;\n+    let studentResult: StudentAccountSearchResult = {\n+      email: '',\n+      name: '',\n+      comments: '',\n+      team: '',\n+      section: '',\n+      openSessions: {},\n+      notOpenSessions: {},\n+      publishedSessions: {},\n+      courseId: '',\n+      courseName: '',\n+      institute: '',\n+      manageAccountLink: '',\n+      homePageLink: '',\n+      recordsPageLink: '',\n+      courseJoinLink: '',\n+      googleId: '',\n+      showLinks: false,\n+    };\n+    const {\n+      email,\n+      name,\n+      comments = '',\n+      teamName: team,\n+      sectionName: section,\n+      googleId = '',\n+      institute = '',\n+    }: Student = student;\n+    studentResult = { ...studentResult, email, name, comments, team, section, googleId, institute };\n+\n+    const { courseId, courseName }: Course = course;\n+    studentResult = { ...studentResult, courseId, courseName };\n+\n+    let instructorGoogleId: string = '';\n+    // Get instructors with a valid google id.\n+    const instructorsWithGoogleIds: Instructor[] = instructors.instructors\n+      .filter((instructor: Instructor) => instructor.googleId != null);\n+    const isAllowedToModifyInstructor: boolean = instructorPrivilege.canModifyInstructor;\n+\n+    // If allowed to modify instructor for course, just pick the first valid instructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNDAyMQ==", "bodyText": "Right, got it thanks. I think I misunderstood the privilege code that was on the backend when I tried to port it over\n for (InstructorAttributes instructor : instructorList) {\n            if (instructor.isRegistered()\n                    && (instructor.hasCoownerPrivileges()\n                    || instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_INSTRUCTOR))) {\n                courseIdToInstructorGoogleIdMap.put(courseId, instructor.googleId);\n                return instructor.googleId;\n            }\n\n        }\n\nThink I will have to call privilege for each instructor instead?", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405234021", "createdAt": "2020-04-08T03:14:22Z", "author": {"login": "hcwong"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,277 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { flatMap, map } from 'rxjs/operators';\n+import { WebPageEndpoints } from '../types/api-endpoints';\n+import {\n+  Course,\n+  FeedbackSessions,\n+  Instructor,\n+  InstructorPermissionRole,\n+  InstructorPrivilege,\n+  Instructors,\n+  Student,\n+  Students,\n+} from '../types/api-output';\n+import { Intent } from '../types/api-request';\n+import { CourseService } from './course.service';\n+import { FeedbackSessionsService } from './feedback-sessions.service';\n+import { HttpRequestService } from './http-request.service';\n+import { InstructorService } from './instructor.service';\n+import { LinkService } from './link.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+\n+  constructor(\n+    private instructorService: InstructorService,\n+    private httpRequestService: HttpRequestService,\n+    private feedbackSessionService: FeedbackSessionsService,\n+    private courseService: CourseService,\n+    private linkService: LinkService) {\n+  }\n+\n+  searchAdmin(searchKey: string): Observable<AdminSearchResult> {\n+    return forkJoin(\n+      this.getStudents(searchKey).pipe(\n+        map((students: Students) => students.students),\n+        flatMap((studentsArray: Student[]) =>\n+                studentsArray.length !== 0\n+                  ? forkJoin(studentsArray.map((student: Student) => this.createStudentAccountSearchResult(student)))\n+                  // Returning an empty array observable in the event studentsArray is empty\n+                  // else the outer forkJoin will not complete\n+                  : of([])),\n+      ),\n+      this.getInstructors(searchKey).pipe(\n+        map((instructors: Instructors) => instructors.instructors),\n+        flatMap((instructorsArray: Instructor[]) =>\n+                instructorsArray.length !== 0\n+                  ? forkJoin(instructorsArray.map((instructor: Instructor) =>\n+                                                  this.createInstructorAccountSearchResult(instructor)))\n+                  // Returning an empty array observable in the event instructorsArray is empty.\n+                  // else the outer forkjoin will not complete\n+                  : of([])),\n+      ),\n+    ).pipe(\n+      map((resp: [StudentAccountSearchResult[], InstructorAccountSearchResult[]]) => ({\n+        students: resp[0],\n+        instructors: resp[1],\n+      })),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getInstructors(searchKey: string): Observable<Instructors> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/instructors', paramMap);\n+  }\n+\n+  createStudentAccountSearchResult(student: Student): Observable<StudentAccountSearchResult> {\n+    const { courseId }: {courseId: string} = student;\n+    return forkJoin(\n+      this.feedbackSessionService.getFeedbackSessionsForStudent(courseId),\n+      this.courseService.getCourseAsStudent(courseId),\n+      this.instructorService.loadInstructors({ courseId, intent: Intent.FULL_DETAIL }),\n+      this.instructorService.loadInstructorPrivilege({ courseId }),\n+    ).pipe(\n+      map((resp: [FeedbackSessions, Course, Instructors, InstructorPrivilege]) => this.joinAdminStudent(resp, student)),\n+    );\n+  }\n+\n+  joinAdminStudent(\n+    resp: [FeedbackSessions, Course, Instructors, InstructorPrivilege], student: Student,\n+  ): StudentAccountSearchResult {\n+    const [feedbackSessions, course, instructors, instructorPrivilege]: [\n+      FeedbackSessions, Course, Instructors, InstructorPrivilege\n+    ] = resp;\n+    let studentResult: StudentAccountSearchResult = {\n+      email: '',\n+      name: '',\n+      comments: '',\n+      team: '',\n+      section: '',\n+      openSessions: {},\n+      notOpenSessions: {},\n+      publishedSessions: {},\n+      courseId: '',\n+      courseName: '',\n+      institute: '',\n+      manageAccountLink: '',\n+      homePageLink: '',\n+      recordsPageLink: '',\n+      courseJoinLink: '',\n+      googleId: '',\n+      showLinks: false,\n+    };\n+    const {\n+      email,\n+      name,\n+      comments = '',\n+      teamName: team,\n+      sectionName: section,\n+      googleId = '',\n+      institute = '',\n+    }: Student = student;\n+    studentResult = { ...studentResult, email, name, comments, team, section, googleId, institute };\n+\n+    const { courseId, courseName }: Course = course;\n+    studentResult = { ...studentResult, courseId, courseName };\n+\n+    let instructorGoogleId: string = '';\n+    // Get instructors with a valid google id.\n+    const instructorsWithGoogleIds: Instructor[] = instructors.instructors\n+      .filter((instructor: Instructor) => instructor.googleId != null);\n+    const isAllowedToModifyInstructor: boolean = instructorPrivilege.canModifyInstructor;\n+\n+    // If allowed to modify instructor for course, just pick the first valid instructor.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NDU4Ng=="}, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0NDgxNA==", "bodyText": "Yup.", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405244814", "createdAt": "2020-04-08T03:59:58Z", "author": {"login": "xpdavid"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,277 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { flatMap, map } from 'rxjs/operators';\n+import { WebPageEndpoints } from '../types/api-endpoints';\n+import {\n+  Course,\n+  FeedbackSessions,\n+  Instructor,\n+  InstructorPermissionRole,\n+  InstructorPrivilege,\n+  Instructors,\n+  Student,\n+  Students,\n+} from '../types/api-output';\n+import { Intent } from '../types/api-request';\n+import { CourseService } from './course.service';\n+import { FeedbackSessionsService } from './feedback-sessions.service';\n+import { HttpRequestService } from './http-request.service';\n+import { InstructorService } from './instructor.service';\n+import { LinkService } from './link.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+\n+  constructor(\n+    private instructorService: InstructorService,\n+    private httpRequestService: HttpRequestService,\n+    private feedbackSessionService: FeedbackSessionsService,\n+    private courseService: CourseService,\n+    private linkService: LinkService) {\n+  }\n+\n+  searchAdmin(searchKey: string): Observable<AdminSearchResult> {\n+    return forkJoin(\n+      this.getStudents(searchKey).pipe(\n+        map((students: Students) => students.students),\n+        flatMap((studentsArray: Student[]) =>\n+                studentsArray.length !== 0\n+                  ? forkJoin(studentsArray.map((student: Student) => this.createStudentAccountSearchResult(student)))\n+                  // Returning an empty array observable in the event studentsArray is empty\n+                  // else the outer forkJoin will not complete\n+                  : of([])),\n+      ),\n+      this.getInstructors(searchKey).pipe(\n+        map((instructors: Instructors) => instructors.instructors),\n+        flatMap((instructorsArray: Instructor[]) =>\n+                instructorsArray.length !== 0\n+                  ? forkJoin(instructorsArray.map((instructor: Instructor) =>\n+                                                  this.createInstructorAccountSearchResult(instructor)))\n+                  // Returning an empty array observable in the event instructorsArray is empty.\n+                  // else the outer forkjoin will not complete\n+                  : of([])),\n+      ),\n+    ).pipe(\n+      map((resp: [StudentAccountSearchResult[], InstructorAccountSearchResult[]]) => ({\n+        students: resp[0],\n+        instructors: resp[1],\n+      })),\n+    );\n+  }\n+\n+  getStudents(searchKey: string): Observable<Students> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/students', paramMap);\n+  }\n+\n+  getInstructors(searchKey: string): Observable<Instructors> {\n+    const paramMap: { [key: string]: string } = {\n+      searchkey: searchKey,\n+    };\n+    return this.httpRequestService.get('/search/instructors', paramMap);\n+  }\n+\n+  createStudentAccountSearchResult(student: Student): Observable<StudentAccountSearchResult> {\n+    const { courseId }: {courseId: string} = student;\n+    return forkJoin(\n+      this.feedbackSessionService.getFeedbackSessionsForStudent(courseId),\n+      this.courseService.getCourseAsStudent(courseId),\n+      this.instructorService.loadInstructors({ courseId, intent: Intent.FULL_DETAIL }),\n+      this.instructorService.loadInstructorPrivilege({ courseId }),\n+    ).pipe(\n+      map((resp: [FeedbackSessions, Course, Instructors, InstructorPrivilege]) => this.joinAdminStudent(resp, student)),\n+    );\n+  }\n+\n+  joinAdminStudent(\n+    resp: [FeedbackSessions, Course, Instructors, InstructorPrivilege], student: Student,\n+  ): StudentAccountSearchResult {\n+    const [feedbackSessions, course, instructors, instructorPrivilege]: [\n+      FeedbackSessions, Course, Instructors, InstructorPrivilege\n+    ] = resp;\n+    let studentResult: StudentAccountSearchResult = {\n+      email: '',\n+      name: '',\n+      comments: '',\n+      team: '',\n+      section: '',\n+      openSessions: {},\n+      notOpenSessions: {},\n+      publishedSessions: {},\n+      courseId: '',\n+      courseName: '',\n+      institute: '',\n+      manageAccountLink: '',\n+      homePageLink: '',\n+      recordsPageLink: '',\n+      courseJoinLink: '',\n+      googleId: '',\n+      showLinks: false,\n+    };\n+    const {\n+      email,\n+      name,\n+      comments = '',\n+      teamName: team,\n+      sectionName: section,\n+      googleId = '',\n+      institute = '',\n+    }: Student = student;\n+    studentResult = { ...studentResult, email, name, comments, team, section, googleId, institute };\n+\n+    const { courseId, courseName }: Course = course;\n+    studentResult = { ...studentResult, courseId, courseName };\n+\n+    let instructorGoogleId: string = '';\n+    // Get instructors with a valid google id.\n+    const instructorsWithGoogleIds: Instructor[] = instructors.instructors\n+      .filter((instructor: Instructor) => instructor.googleId != null);\n+    const isAllowedToModifyInstructor: boolean = instructorPrivilege.canModifyInstructor;\n+\n+    // If allowed to modify instructor for course, just pick the first valid instructor.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NDU4Ng=="}, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzY0MjYxOnYy", "diffSide": "RIGHT", "path": "src/web/services/search.service.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDowMTowMFrOGCT6og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNToxMzoyN1rOGD9PDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NjY0Mg==", "bodyText": "If you have time, consider how many redundant requests you may have send through the request.", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405076642", "createdAt": "2020-04-07T20:01:00Z", "author": {"login": "xpdavid"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,277 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { flatMap, map } from 'rxjs/operators';\n+import { WebPageEndpoints } from '../types/api-endpoints';\n+import {\n+  Course,\n+  FeedbackSessions,\n+  Instructor,\n+  InstructorPermissionRole,\n+  InstructorPrivilege,\n+  Instructors,\n+  Student,\n+  Students,\n+} from '../types/api-output';\n+import { Intent } from '../types/api-request';\n+import { CourseService } from './course.service';\n+import { FeedbackSessionsService } from './feedback-sessions.service';\n+import { HttpRequestService } from './http-request.service';\n+import { InstructorService } from './instructor.service';\n+import { LinkService } from './link.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+\n+  constructor(\n+    private instructorService: InstructorService,\n+    private httpRequestService: HttpRequestService,\n+    private feedbackSessionService: FeedbackSessionsService,\n+    private courseService: CourseService,\n+    private linkService: LinkService) {\n+  }\n+\n+  searchAdmin(searchKey: string): Observable<AdminSearchResult> {\n+    return forkJoin(\n+      this.getStudents(searchKey).pipe(\n+        map((students: Students) => students.students),\n+        flatMap((studentsArray: Student[]) =>\n+                studentsArray.length !== 0\n+                  ? forkJoin(studentsArray.map((student: Student) => this.createStudentAccountSearchResult(student)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2NzYzMA==", "bodyText": "The two ways I can think of:\n\nDo some sort of caching for common routes like courses, so we dont make the same call for the course ids, or maybe do a set\nOpen up new endpoints, such as on privilege, so we can pass it an array of ids instead of calling it one by one.\n\nNumber 2 can probably be an issue of its own", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r405267630", "createdAt": "2020-04-08T05:34:04Z", "author": {"login": "hcwong"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,277 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { flatMap, map } from 'rxjs/operators';\n+import { WebPageEndpoints } from '../types/api-endpoints';\n+import {\n+  Course,\n+  FeedbackSessions,\n+  Instructor,\n+  InstructorPermissionRole,\n+  InstructorPrivilege,\n+  Instructors,\n+  Student,\n+  Students,\n+} from '../types/api-output';\n+import { Intent } from '../types/api-request';\n+import { CourseService } from './course.service';\n+import { FeedbackSessionsService } from './feedback-sessions.service';\n+import { HttpRequestService } from './http-request.service';\n+import { InstructorService } from './instructor.service';\n+import { LinkService } from './link.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+\n+  constructor(\n+    private instructorService: InstructorService,\n+    private httpRequestService: HttpRequestService,\n+    private feedbackSessionService: FeedbackSessionsService,\n+    private courseService: CourseService,\n+    private linkService: LinkService) {\n+  }\n+\n+  searchAdmin(searchKey: string): Observable<AdminSearchResult> {\n+    return forkJoin(\n+      this.getStudents(searchKey).pipe(\n+        map((students: Students) => students.students),\n+        flatMap((studentsArray: Student[]) =>\n+                studentsArray.length !== 0\n+                  ? forkJoin(studentsArray.map((student: Student) => this.createStudentAccountSearchResult(student)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NjY0Mg=="}, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMjE5MQ==", "bodyText": "Fixed the redundant calls issues by aggregating all the course ids in a set, to generate a map of course ids to the various api responses", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r406802191", "createdAt": "2020-04-10T15:13:27Z", "author": {"login": "hcwong"}, "path": "src/web/services/search.service.ts", "diffHunk": "@@ -0,0 +1,277 @@\n+import { Injectable } from '@angular/core';\n+import { forkJoin, Observable, of } from 'rxjs';\n+import { flatMap, map } from 'rxjs/operators';\n+import { WebPageEndpoints } from '../types/api-endpoints';\n+import {\n+  Course,\n+  FeedbackSessions,\n+  Instructor,\n+  InstructorPermissionRole,\n+  InstructorPrivilege,\n+  Instructors,\n+  Student,\n+  Students,\n+} from '../types/api-output';\n+import { Intent } from '../types/api-request';\n+import { CourseService } from './course.service';\n+import { FeedbackSessionsService } from './feedback-sessions.service';\n+import { HttpRequestService } from './http-request.service';\n+import { InstructorService } from './instructor.service';\n+import { LinkService } from './link.service';\n+\n+/**\n+ * Handles the logic for search.\n+ */\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class SearchService {\n+\n+  constructor(\n+    private instructorService: InstructorService,\n+    private httpRequestService: HttpRequestService,\n+    private feedbackSessionService: FeedbackSessionsService,\n+    private courseService: CourseService,\n+    private linkService: LinkService) {\n+  }\n+\n+  searchAdmin(searchKey: string): Observable<AdminSearchResult> {\n+    return forkJoin(\n+      this.getStudents(searchKey).pipe(\n+        map((students: Students) => students.students),\n+        flatMap((studentsArray: Student[]) =>\n+                studentsArray.length !== 0\n+                  ? forkJoin(studentsArray.map((student: Student) => this.createStudentAccountSearchResult(student)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NjY0Mg=="}, "originalCommit": {"oid": "074208ffbb06b9c41fbe1a69a381aadb323660fd"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDcxNzMwOnYy", "diffSide": "RIGHT", "path": "src/web/services/link.service.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNToxNzo1NlrOGD9XLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNToxNzo1NlrOGD9XLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwNDI3MQ==", "bodyText": "\ud83d\udc4d Nice work.", "url": "https://github.com/TEAMMATES/teammates/pull/9998#discussion_r406804271", "createdAt": "2020-04-10T15:17:56Z", "author": {"login": "xpdavid"}, "path": "src/web/services/link.service.ts", "diffHunk": "@@ -0,0 +1,138 @@\n+import { Injectable } from '@angular/core';\n+\n+import { Instructor, Student } from '../types/api-output';\n+import { environment } from './../environments/environment';\n+import { NavigationService } from './navigation.service';\n+\n+/**\n+ * Handles the logic for generating links on the client.\n+ */\n+\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class LinkService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72655e035295c5ae97080d3e74a9710fd3dc83b2"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3928, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}