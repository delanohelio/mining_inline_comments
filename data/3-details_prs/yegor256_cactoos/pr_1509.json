{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NTg2NDI2", "number": 1509, "title": "#1510 add Xor class to allow exclusive disjunction", "bodyText": "Hi\nI would like to propose to add new class which allow logical operation Xor.", "createdAt": "2020-11-27T12:29:10Z", "url": "https://github.com/yegor256/cactoos/pull/1509", "merged": true, "mergeCommit": {"oid": "ecb0cf4707ff1e0688bd545ffebb4a85b2c836f7"}, "closed": true, "closedAt": "2021-01-15T17:57:36Z", "author": {"login": "kokodyn"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgXqVSAH2gAyNTI4NTg2NDI2OjhjNDA4YmRiZjA5MjI5MDM2ZWMxMDA4ZjhkMDc2MDFhZmI0Yjk3NWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdwcEAVgH2gAyNTI4NTg2NDI2Ojk3NDYwMjg4MmM0NmJjZTFmMDNhY2E4OWIwMjg5OGMxNDQ0MGIwYTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8c408bdbf09229036ec1008f8d07601afb4b975a", "author": {"user": {"login": "kokodyn", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/8c408bdbf09229036ec1008f8d07601afb4b975a", "committedDate": "2020-11-26T18:56:52Z", "message": "add Xor -> Logical exclusive or\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d9cfe3b85156b41708c2a972acbc4e159408338", "author": {"user": {"login": "kokodyn", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/3d9cfe3b85156b41708c2a972acbc4e159408338", "committedDate": "2020-11-27T12:24:36Z", "message": "Xor add unit tests + fixes\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTI3Mzc2", "url": "https://github.com/yegor256/cactoos/pull/1509#pullrequestreview-544527376", "createdAt": "2020-12-03T22:49:47Z", "commit": {"oid": "3d9cfe3b85156b41708c2a972acbc4e159408338"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo0OTo0N1rOH-4sVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MjowNlrOH-40Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMjYxNQ==", "bodyText": "@kokodyn This implementation seems to be not  \"short-circuit\".\nLet's use Folded instead of Stream API here", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r535702615", "createdAt": "2020-12-03T22:49:47Z", "author": {"login": "andreoss"}, "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+\n+/**\n+ * Logical exclusive or.\n+ * This class performs short-circuit evaluation in which arguments are\n+ * executed only if the preceding argument does not suffice to determine\n+ * the value of the expression.\n+ *\n+ * <p>This class could be also used for matching multiple boolean\n+ * expressions:</p>\n+ *\n+ * {@code\n+ * new Xor(\n+ *    new True(),\n+ *    new True(),\n+ *    new True()\n+ * ).value(); // the result is true\n+ *\n+ * new Xor(\n+ *    new True(),\n+ *    new False(),\n+ *    new True()\n+ * ).value(); // the result is false\n+ * }\n+ *\n+ * <p>This class implements {@link Scalar}, which throws a checked\n+ * {@link Exception}. This may not be convenient in many cases. To make\n+ * it more convenient and get rid of the checked exception you can\n+ * use the {@link Unchecked} decorator. Or you may use\n+ * {@link IoChecked} to wrap it in an IOException.</p>\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @see Unchecked\n+ * @see IoChecked\n+ * @since 0.49\n+ */\n+public final class Xor implements Scalar<Boolean> {\n+\n+    /**\n+     * The iterable.\n+     */\n+    private final Iterable<Scalar<Boolean>> origin;\n+\n+    /**\n+     * Ctor.\n+     * @param scalar The Scalar.\n+     */\n+    @SafeVarargs\n+    public Xor(final Scalar<Boolean>... scalar) {\n+        this(new IterableOf<>(scalar));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param iterable The iterable.\n+     */\n+    public Xor(final Iterable<Scalar<Boolean>> iterable) {\n+        this.origin = iterable;\n+    }\n+\n+    @Override\n+    public Boolean value() throws Exception {\n+        return new ListOf<Scalar<Boolean>>(this.origin)\n+            .stream().reduce(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d9cfe3b85156b41708c2a972acbc4e159408338"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMzgxOQ==", "bodyText": "@kokodyn Does it belong here?", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r535703819", "createdAt": "2020-12-03T22:51:09Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/scalar/XorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.ScalarHasValue;\n+\n+/**\n+ * Test case for {@link Xor}.\n+ * @since 0.48\n+ */\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\", \"PMD.TooManyMethods\"})\n+final class XorTest {\n+\n+    @Test\n+    void trueTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void treuFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleTrue() throws Exception {\n+        new Assertion<>(\n+            \"Single True must be True\",\n+            new Xor(\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleFalse() throws Exception {\n+        new Assertion<>(\n+            \"Single False must be False\",\n+            new Xor(\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyIterator() throws Exception {\n+        new Assertion<>(\n+            \"Empty iterator must be true\",\n+            new And(new IterableOf<Scalar<Boolean>>()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d9cfe3b85156b41708c2a972acbc4e159408338"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNDYxMQ==", "bodyText": "@kokodyn Couple of tests needed for actual short-circuit evaluation.", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r535704611", "createdAt": "2020-12-03T22:52:06Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/scalar/XorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.ScalarHasValue;\n+\n+/**\n+ * Test case for {@link Xor}.\n+ * @since 0.48\n+ */\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\", \"PMD.TooManyMethods\"})\n+final class XorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d9cfe3b85156b41708c2a972acbc4e159408338"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dca7fcc3f67d6c37b4c6a53819e5e6d82865346", "author": {"user": {"login": "kokodyn", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/0dca7fcc3f67d6c37b4c6a53819e5e6d82865346", "committedDate": "2020-12-04T18:20:32Z", "message": "change impl of Xor and unit test fix\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjYwNzQ3", "url": "https://github.com/yegor256/cactoos/pull/1509#pullrequestreview-545660747", "createdAt": "2020-12-06T00:51:26Z", "commit": {"oid": "0dca7fcc3f67d6c37b4c6a53819e5e6d82865346"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMDo1MToyNlrOIADQBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMDo1MToyNlrOIADQBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNDE2NA==", "bodyText": "@kokodyn I believe this is not correct description of xor, all arguments should be executed", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r536924164", "createdAt": "2020-12-06T00:51:26Z", "author": {"login": "andreoss"}, "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dca7fcc3f67d6c37b4c6a53819e5e6d82865346"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c85a4beb66ec6b781c1907767c96ff7db66020", "author": {"user": {"login": "kokodyn", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/d1c85a4beb66ec6b781c1907767c96ff7db66020", "committedDate": "2020-12-10T18:55:11Z", "message": "Xor -> fix javadoc\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTI4NjU5", "url": "https://github.com/yegor256/cactoos/pull/1509#pullrequestreview-550928659", "createdAt": "2020-12-13T14:58:59Z", "commit": {"oid": "d1c85a4beb66ec6b781c1907767c96ff7db66020"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNDo1ODo1OVrOIE1f9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNTowMTowM1rOIE1hUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MTc0OA==", "bodyText": "@kokodyn there is a problem with the indentation here", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r541941748", "createdAt": "2020-12-13T14:58:59Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.\n+\n+ * For no elements in {@code origin} it returns {@link True}, otherwise\n+ * returns {@link True} only when an odd number of elements have value true.\n+ *\n+ * <p>This class could be also used for matching multiple boolean\n+ * expressions:</p>\n+ *\n+ * {@code\n+ * new Xor(\n+ *    new True(),\n+ *    new True(),\n+ *    new True()\n+ * ).value(); // the result is true\n+ *\n+ * new Xor(\n+ *    new True(),\n+ *    new False(),\n+ *    new True()\n+ * ).value(); // the result is false\n+ * }\n+ *\n+ * <p>This class implements {@link Scalar}, which throws a checked\n+ * {@link Exception}. This may not be convenient in many cases. To make\n+ * it more convenient and get rid of the checked exception you can\n+ * use the {@link Unchecked} decorator. Or you may use\n+ * {@link IoChecked} to wrap it in an IOException.</p>\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @see Unchecked\n+ * @see IoChecked\n+ * @since 0.49\n+ */\n+public final class Xor implements Scalar<Boolean> {\n+\n+    /**\n+     * The iterable.\n+     */\n+    private final Iterable<Scalar<Boolean>> origin;\n+\n+    /**\n+     * Ctor.\n+     * @param scalar The Scalar.\n+     */\n+    @SafeVarargs\n+    public Xor(final Scalar<Boolean>... scalar) {\n+        this(new IterableOf<>(scalar));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param iterable The iterable.\n+     */\n+    public Xor(final Iterable<Scalar<Boolean>> iterable) {\n+        this.origin = iterable;\n+    }\n+\n+    @Override\n+    public Boolean value() throws Exception {\n+        return new Ternary<>(\n+            new LengthOf(this.origin).value() > 0,\n+            new Reduced<Boolean>((a, b) -> a ^ b, this.origin),\n+            new True()\n+            )\n+            .value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c85a4beb66ec6b781c1907767c96ff7db66020"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MjAyOA==", "bodyText": "@kokodyn iterable, not iterator :) same with the test name", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r541942028", "createdAt": "2020-12-13T15:00:31Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/scalar/XorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.ScalarHasValue;\n+\n+/**\n+ * Test case for {@link Xor}.\n+ * @since 0.48\n+ */\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\", \"PMD.TooManyMethods\"})\n+final class XorTest {\n+\n+    @Test\n+    void trueTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void treuFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleTrue() throws Exception {\n+        new Assertion<>(\n+            \"Single True must be True\",\n+            new Xor(\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleFalse() throws Exception {\n+        new Assertion<>(\n+            \"Single False must be False\",\n+            new Xor(\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyIterator() throws Exception {\n+        new Assertion<>(\n+            \"Empty iterator must be true\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c85a4beb66ec6b781c1907767c96ff7db66020"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0MjA5OA==", "bodyText": "@kokodyn the message is incorrect here I\u00a0think", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r541942098", "createdAt": "2020-12-13T15:01:03Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/scalar/XorTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.ScalarHasValue;\n+\n+/**\n+ * Test case for {@link Xor}.\n+ * @since 0.48\n+ */\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\", \"PMD.TooManyMethods\"})\n+final class XorTest {\n+\n+    @Test\n+    void trueTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseTrue() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void treuFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new True(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void falseFalse() throws Exception {\n+        new Assertion<>(\n+            \"Either one, but not both nor none\",\n+            new Xor(\n+                new False(),\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleTrue() throws Exception {\n+        new Assertion<>(\n+            \"Single True must be True\",\n+            new Xor(\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void singleFalse() throws Exception {\n+        new Assertion<>(\n+            \"Single False must be False\",\n+            new Xor(\n+                new False()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyIterator() throws Exception {\n+        new Assertion<>(\n+            \"Empty iterator must be true\",\n+            new Xor(new IterableOf<Scalar<Boolean>>()),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void oddNumberOfTrue() throws Exception {\n+        new Assertion<>(\n+            \"Odd number of True must be True\",\n+            new Xor(\n+                new False(),\n+                new False(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(true)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void evenNumberOfTrue() throws Exception {\n+        new Assertion<>(\n+            \"Even number of True must be False\",\n+            new Xor(\n+                new False(),\n+                new True(),\n+                new True()\n+            ),\n+            new ScalarHasValue<>(false)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void allFalse() throws Exception {\n+        new Assertion<>(\n+            \"Even number of True must be False\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c85a4beb66ec6b781c1907767c96ff7db66020"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a890e35b19b4d1cfcb6f6a364eb5ba479064542e", "author": {"user": {"login": "kokodyn", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/a890e35b19b4d1cfcb6f6a364eb5ba479064542e", "committedDate": "2020-12-15T19:27:39Z", "message": "fixed indentation and tests\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5edeb4b654ba7f9553ce71a718619d8623ef8a3f", "author": {"user": {"login": "kokodyn", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/5edeb4b654ba7f9553ce71a718619d8623ef8a3f", "committedDate": "2020-12-22T17:07:20Z", "message": "Fixed XorTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NDQxMzIx", "url": "https://github.com/yegor256/cactoos/pull/1509#pullrequestreview-558441321", "createdAt": "2020-12-24T10:01:05Z", "commit": {"oid": "5edeb4b654ba7f9553ce71a718619d8623ef8a3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMDowMTowNVrOILEUNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMDowMTowNVrOILEUNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ3NTk1Nw==", "bodyText": "@kokodyn why is xor true if the list is empty? I would have said false, but purely intuitively, because there is nothing, so it can't be true\u2026 maybe you have some sources that recommends to do that?", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r548475957", "createdAt": "2020-12-24T10:01:05Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.\n+\n+ * For no elements in {@code origin} it returns {@link True}, otherwise\n+ * returns {@link True} only when an odd number of elements have value true.\n+ *\n+ * <p>This class could be also used for matching multiple boolean\n+ * expressions:</p>\n+ *\n+ * {@code\n+ * new Xor(\n+ *    new True(),\n+ *    new True(),\n+ *    new True()\n+ * ).value(); // the result is true\n+ *\n+ * new Xor(\n+ *    new True(),\n+ *    new False(),\n+ *    new True()\n+ * ).value(); // the result is false\n+ * }\n+ *\n+ * <p>This class implements {@link Scalar}, which throws a checked\n+ * {@link Exception}. This may not be convenient in many cases. To make\n+ * it more convenient and get rid of the checked exception you can\n+ * use the {@link Unchecked} decorator. Or you may use\n+ * {@link IoChecked} to wrap it in an IOException.</p>\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @see Unchecked\n+ * @see IoChecked\n+ * @since 0.49\n+ */\n+public final class Xor implements Scalar<Boolean> {\n+\n+    /**\n+     * The iterable.\n+     */\n+    private final Iterable<Scalar<Boolean>> origin;\n+\n+    /**\n+     * Ctor.\n+     * @param scalar The Scalar.\n+     */\n+    @SafeVarargs\n+    public Xor(final Scalar<Boolean>... scalar) {\n+        this(new IterableOf<>(scalar));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param iterable The iterable.\n+     */\n+    public Xor(final Iterable<Scalar<Boolean>> iterable) {\n+        this.origin = iterable;\n+    }\n+\n+    @Override\n+    public Boolean value() throws Exception {\n+        return new Ternary<>(\n+            new LengthOf(this.origin).value() > 0,\n+            new Reduced<Boolean>((a, b) -> a ^ b, this.origin),\n+            new True()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5edeb4b654ba7f9553ce71a718619d8623ef8a3f"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NDQ2MTQy", "url": "https://github.com/yegor256/cactoos/pull/1509#pullrequestreview-558446142", "createdAt": "2020-12-24T10:14:21Z", "commit": {"oid": "5edeb4b654ba7f9553ce71a718619d8623ef8a3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMDoxNDoyMVrOILEjvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMDoxNDoyMVrOILEjvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ3OTkzNA==", "bodyText": "@kokodyn make Xor extend ScalarEnvelope and call super(new Ternary...) here", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r548479934", "createdAt": "2020-12-24T10:14:21Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.\n+\n+ * For no elements in {@code origin} it returns {@link True}, otherwise\n+ * returns {@link True} only when an odd number of elements have value true.\n+ *\n+ * <p>This class could be also used for matching multiple boolean\n+ * expressions:</p>\n+ *\n+ * {@code\n+ * new Xor(\n+ *    new True(),\n+ *    new True(),\n+ *    new True()\n+ * ).value(); // the result is true\n+ *\n+ * new Xor(\n+ *    new True(),\n+ *    new False(),\n+ *    new True()\n+ * ).value(); // the result is false\n+ * }\n+ *\n+ * <p>This class implements {@link Scalar}, which throws a checked\n+ * {@link Exception}. This may not be convenient in many cases. To make\n+ * it more convenient and get rid of the checked exception you can\n+ * use the {@link Unchecked} decorator. Or you may use\n+ * {@link IoChecked} to wrap it in an IOException.</p>\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @see Unchecked\n+ * @see IoChecked\n+ * @since 0.49\n+ */\n+public final class Xor implements Scalar<Boolean> {\n+\n+    /**\n+     * The iterable.\n+     */\n+    private final Iterable<Scalar<Boolean>> origin;\n+\n+    /**\n+     * Ctor.\n+     * @param scalar The Scalar.\n+     */\n+    @SafeVarargs\n+    public Xor(final Scalar<Boolean>... scalar) {\n+        this(new IterableOf<>(scalar));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param iterable The iterable.\n+     */\n+    public Xor(final Iterable<Scalar<Boolean>> iterable) {\n+        this.origin = iterable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5edeb4b654ba7f9553ce71a718619d8623ef8a3f"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c95275e863799f394dc3e2efee899cdd18a3eda", "author": {"user": {"login": "kokodyn", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/8c95275e863799f394dc3e2efee899cdd18a3eda", "committedDate": "2021-01-14T17:20:02Z", "message": "Xor extends ScalarEnvelope and returns false for empty iterable\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NDk2Mjcx", "url": "https://github.com/yegor256/cactoos/pull/1509#pullrequestreview-568496271", "createdAt": "2021-01-14T18:11:04Z", "commit": {"oid": "8c95275e863799f394dc3e2efee899cdd18a3eda"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxODoxMTowNFrOITwzPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxODoxMjozMFrOITw2Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU5MzQwNQ==", "bodyText": "@kokodyn this needs to be updated", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r557593405", "createdAt": "2021-01-14T18:11:04Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.\n+\n+ * For no elements in {@code origin} it returns {@link True}, otherwise\n+ * returns {@link True} only when an odd number of elements have value true.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c95275e863799f394dc3e2efee899cdd18a3eda"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU5NDIxNQ==", "bodyText": "@kokodyn I believe you should be able to simply use: new Reduced<>((a, b) -> a ^ b, new Joined<>(new False(), iterable)) here", "url": "https://github.com/yegor256/cactoos/pull/1509#discussion_r557594215", "createdAt": "2021-01-14T18:12:30Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/scalar/Xor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.scalar;\n+\n+import org.cactoos.Scalar;\n+import org.cactoos.iterable.IterableOf;\n+\n+/**\n+ * Logical exclusive or.\n+\n+ * For no elements in {@code origin} it returns {@link True}, otherwise\n+ * returns {@link True} only when an odd number of elements have value true.\n+ *\n+ * <p>This class could be also used for matching multiple boolean\n+ * expressions:</p>\n+ *\n+ * {@code\n+ * new Xor(\n+ *    new True(),\n+ *    new True(),\n+ *    new True()\n+ * ).value(); // the result is true\n+ *\n+ * new Xor(\n+ *    new True(),\n+ *    new False(),\n+ *    new True()\n+ * ).value(); // the result is false\n+ * }\n+ *\n+ * <p>This class implements {@link Scalar}, which throws a checked\n+ * {@link Exception}. This may not be convenient in many cases. To make\n+ * it more convenient and get rid of the checked exception you can\n+ * use the {@link Unchecked} decorator. Or you may use\n+ * {@link IoChecked} to wrap it in an IOException.</p>\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @see Unchecked\n+ * @see IoChecked\n+ * @since 0.49\n+ */\n+public final class Xor extends ScalarEnvelope<Boolean> {\n+\n+    /**\n+     * Ctor.\n+     * @param scalar The Scalar.\n+     */\n+    @SafeVarargs\n+    public Xor(final Scalar<Boolean>... scalar) {\n+        this(new IterableOf<>(scalar));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param iterable The iterable.\n+     */\n+    public Xor(final Iterable<Scalar<Boolean>> iterable) {\n+        super(\n+            new Ternary<>(\n+                () -> new LengthOf(iterable).value() > 0,\n+                new Reduced<Boolean>((a, b) -> a ^ b, iterable),\n+                new False()\n+            )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c95275e863799f394dc3e2efee899cdd18a3eda"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "974602882c46bce1f03aca89b02898c14440b0a0", "author": {"user": {"login": "kokodyn", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/974602882c46bce1f03aca89b02898c14440b0a0", "committedDate": "2021-01-15T17:07:19Z", "message": "Xor doc updated and code simplified\n\nSigned-off-by: kokodyn <kokodyn@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 539, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}