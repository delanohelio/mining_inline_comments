{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTI2NDEw", "number": 1492, "title": "#1481: Introduce iterator.Matched", "bodyText": "Per #1481\n\nAdd iterator.Matched\nBase iterable.Matched on it", "createdAt": "2020-11-01T01:59:40Z", "url": "https://github.com/yegor256/cactoos/pull/1492", "merged": true, "mergeCommit": {"oid": "11c5492fe4e3ea988b1705d51dbb9a858f341aba"}, "closed": true, "closedAt": "2020-11-07T16:15:19Z", "author": {"login": "andreoss"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYF1jLAH2gAyNTEzNTI2NDEwOjNlNTU2NDQ1MDQ4ZDlmOTk4Yjc0M2NkODIzYTNkYmY1ZmJkZDU4ZDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY2tETgFqTUyMjM2NjIzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3e556445048d9f998b743cd823a3dbf5fbdd58d8", "author": {"user": {"login": "andreoss", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/3e556445048d9f998b743cd823a3dbf5fbdd58d8", "committedDate": "2020-11-01T01:39:26Z", "message": "(#1481) Add `iterator.Matched'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f8e12bb95ee3390da49b89efa2b5b62ca005e24", "author": {"user": {"login": "andreoss", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/1f8e12bb95ee3390da49b89efa2b5b62ca005e24", "committedDate": "2020-11-01T01:57:37Z", "message": "(#1481) Use `iterator.Matched' in `iterable.Matched'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12", "author": {"user": {"login": "andreoss", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/b67dd214768125f40ca86320b64f43b6c6797d12", "committedDate": "2020-11-01T01:57:56Z", "message": "(#1481) Add license"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjY5MTMx", "url": "https://github.com/yegor256/cactoos/pull/1492#pullrequestreview-521269131", "createdAt": "2020-11-01T22:38:38Z", "commit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjozODozOFrOHryufw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjo1Mjo0N1rOHry09g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MTkxOQ==", "bodyText": "@andreoss Fix the message: \"There is no...\"", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515681919", "createdAt": "2020-11-01T22:38:38Z", "author": {"login": "fabriciofx"}, "path": "src/main/java/org/cactoos/iterator/Matched.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Iterator;\n+import org.cactoos.BiFunc;\n+import org.cactoos.func.UncheckedBiFunc;\n+import org.cactoos.text.FormattedText;\n+\n+/**\n+ * Matched iterator.\n+ *\n+ * Iterates over 2 iterators at the same time and verify that elements with the\n+ * same position has correlation by the function. The function might be equals,\n+ * endsWith, greaterThen, nonNull, empty, negative, positive, etc.\n+ *\n+ * @param <X> Type of item in first iterator.\n+ * @param <Y> Type of item in second iterator.\n+ * @since 0.47\n+ */\n+public final class Matched<X, Y> implements Iterator<X> {\n+\n+    /**\n+     * The correlation function.\n+     */\n+    private final UncheckedBiFunc<? super X, ? super Y, Boolean> func;\n+\n+    /**\n+     * First iterator.\n+     */\n+    private final Iterator<? extends X> first;\n+\n+    /**\n+     * Second iterator.\n+     */\n+    private final Iterator<? extends Y> second;\n+\n+    /**\n+     * Ctor.\n+     * @param fnc The function to detect the correlation between elements.\n+     * @param fst The first part of duplex iterator.\n+     * @param snd The second part of duplex iterator.\n+     */\n+    public Matched(\n+        final BiFunc<? super X, ? super Y, Boolean> fnc,\n+        final Iterator<? extends X> fst,\n+        final Iterator<? extends Y> snd\n+    ) {\n+        this.func = new UncheckedBiFunc<>(fnc);\n+        this.first = fst;\n+        this.second = snd;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        return this.first.hasNext() || this.second.hasNext();\n+    }\n+\n+    @Override\n+    public X next() {\n+        if (!this.first.hasNext() || !this.second.hasNext()) {\n+            throw new IllegalStateException(\"Size mismatch of iterators\");\n+        }\n+        final X fvl = this.first.next();\n+        final Y svl = this.second.next();\n+        if (this.func.apply(fvl, svl)) {\n+            return fvl;\n+        } else {\n+            throw new IllegalStateException(\n+                new FormattedText(\n+                    \"The is no correlation between `%s` and `%s`.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MjE5Nw==", "bodyText": "@andreoss I think will be more readable if use:\nif (!this.func.apply(fvl, svl)) {\n  throw new IllegalStatementException(...);\n}\nreturn fvl;", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682197", "createdAt": "2020-11-01T22:40:57Z", "author": {"login": "fabriciofx"}, "path": "src/main/java/org/cactoos/iterator/Matched.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Iterator;\n+import org.cactoos.BiFunc;\n+import org.cactoos.func.UncheckedBiFunc;\n+import org.cactoos.text.FormattedText;\n+\n+/**\n+ * Matched iterator.\n+ *\n+ * Iterates over 2 iterators at the same time and verify that elements with the\n+ * same position has correlation by the function. The function might be equals,\n+ * endsWith, greaterThen, nonNull, empty, negative, positive, etc.\n+ *\n+ * @param <X> Type of item in first iterator.\n+ * @param <Y> Type of item in second iterator.\n+ * @since 0.47\n+ */\n+public final class Matched<X, Y> implements Iterator<X> {\n+\n+    /**\n+     * The correlation function.\n+     */\n+    private final UncheckedBiFunc<? super X, ? super Y, Boolean> func;\n+\n+    /**\n+     * First iterator.\n+     */\n+    private final Iterator<? extends X> first;\n+\n+    /**\n+     * Second iterator.\n+     */\n+    private final Iterator<? extends Y> second;\n+\n+    /**\n+     * Ctor.\n+     * @param fnc The function to detect the correlation between elements.\n+     * @param fst The first part of duplex iterator.\n+     * @param snd The second part of duplex iterator.\n+     */\n+    public Matched(\n+        final BiFunc<? super X, ? super Y, Boolean> fnc,\n+        final Iterator<? extends X> fst,\n+        final Iterator<? extends Y> snd\n+    ) {\n+        this.func = new UncheckedBiFunc<>(fnc);\n+        this.first = fst;\n+        this.second = snd;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        return this.first.hasNext() || this.second.hasNext();\n+    }\n+\n+    @Override\n+    public X next() {\n+        if (!this.first.hasNext() || !this.second.hasNext()) {\n+            throw new IllegalStateException(\"Size mismatch of iterators\");\n+        }\n+        final X fvl = this.first.next();\n+        final Y svl = this.second.next();\n+        if (this.func.apply(fvl, svl)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MjMzNg==", "bodyText": "@andreoss Please, change ```  for '.", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682336", "createdAt": "2020-11-01T22:42:11Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/iterable/MatchedTest.java", "diffHunk": "@@ -56,11 +57,13 @@ public void iterator() {\n     public void noCorrelationWithBiggerSecondIterable() {\n         new Assertion<>(\n             \"All elements have correlation function as `endsWith`\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MjcyNg==", "bodyText": "@andreoss the same above.", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682726", "createdAt": "2020-11-01T22:45:47Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/iterable/MatchedTest.java", "diffHunk": "@@ -56,11 +57,13 @@ public void iterator() {\n     public void noCorrelationWithBiggerSecondIterable() {\n         new Assertion<>(\n             \"All elements have correlation function as `endsWith`\",\n-            () -> new Matched<>(\n-                (fst, snd) -> fst.endsWith(\"elem\") && snd.endsWith(\"elem\"),\n-                new IterableOf<>(\"1st elem\", \"2nd elem\"),\n-                new IterableOf<>(\"`A` elem\", \"`B` elem\", \"'C' elem\")\n-            ).iterator(),\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    (fst, snd) -> fst.endsWith(\"elem\") && snd.endsWith(\"elem\"),\n+                    new IterableOf<>(\"1st elem\", \"2nd elem\"),\n+                    new IterableOf<>(\"`A` elem\", \"`B` elem\", \"'C' elem\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4Mjc0OA==", "bodyText": "@andreoss the same above.", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682748", "createdAt": "2020-11-01T22:45:56Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/iterable/MatchedTest.java", "diffHunk": "@@ -69,11 +72,13 @@ public void noCorrelationWithBiggerSecondIterable() {\n     public void noCorrelationWithSmallerSecondIterable() {\n         new Assertion<>(\n             \"All elements have correlation function as `endsWith`\",\n-            () -> new Matched<>(\n-                (fst, snd) -> fst.endsWith(\"elem\") && snd.endsWith(\"elem\"),\n-                new IterableOf<>(\"1st elem\", \"2nd elem\", \"3rd elem\"),\n-                new IterableOf<>(\"`A` elem\", \"`B` elem\")\n-            ).iterator(),\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    (fst, snd) -> fst.endsWith(\"elem\") && snd.endsWith(\"elem\"),\n+                    new IterableOf<>(\"1st elem\", \"2nd elem\", \"3rd elem\"),\n+                    new IterableOf<>(\"`A` elem\", \"`B` elem\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4Mjc1Nw==", "bodyText": "@andreoss the same above.", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682757", "createdAt": "2020-11-01T22:46:02Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/iterable/MatchedTest.java", "diffHunk": "@@ -69,11 +72,13 @@ public void noCorrelationWithBiggerSecondIterable() {\n     public void noCorrelationWithSmallerSecondIterable() {\n         new Assertion<>(\n             \"All elements have correlation function as `endsWith`\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4Mjc4Nw==", "bodyText": "@andreoss the same above and fix the message as 'equals'.", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682787", "createdAt": "2020-11-01T22:46:17Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/iterator/MatchedTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Objects;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.HasValues;\n+import org.llorllale.cactoos.matchers.Throws;\n+\n+/**\n+ * Test case for {@link Mapped}.\n+ * @since 0.47\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+final class MatchedTest {\n+    @Test\n+    void failsWhenElementsNotMatch() {\n+        new Assertion<>(\n+            \"All elements have correlation function as `equal`\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MjgyOQ==", "bodyText": "@andreoss the same above and fix the message \"There is no...\"", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515682829", "createdAt": "2020-11-01T22:46:39Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/iterator/MatchedTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Objects;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.HasValues;\n+import org.llorllale.cactoos.matchers.Throws;\n+\n+/**\n+ * Test case for {@link Mapped}.\n+ * @since 0.47\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+final class MatchedTest {\n+    @Test\n+    void failsWhenElementsNotMatch() {\n+        new Assertion<>(\n+            \"All elements have correlation function as `equal`\",\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    Objects::equals,\n+                    new IteratorOf<>(1),\n+                    new IteratorOf<>(0)\n+                )\n+            ),\n+            new Throws<>(\n+                new IsEqual<>(\n+                    \"The is no correlation between `1` and `0`.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MzQ2Ng==", "bodyText": "@andreoss Please, be more specific: sizes are different.... sizes of what?", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515683466", "createdAt": "2020-11-01T22:52:23Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/iterator/MatchedTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Objects;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.HasValues;\n+import org.llorllale.cactoos.matchers.Throws;\n+\n+/**\n+ * Test case for {@link Mapped}.\n+ * @since 0.47\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+final class MatchedTest {\n+    @Test\n+    void failsWhenElementsNotMatch() {\n+        new Assertion<>(\n+            \"All elements have correlation function as `equal`\",\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    Objects::equals,\n+                    new IteratorOf<>(1),\n+                    new IteratorOf<>(0)\n+                )\n+            ),\n+            new Throws<>(\n+                new IsEqual<>(\n+                    \"The is no correlation between `1` and `0`.\"\n+                ),\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void failsOnSizeMismatch() {\n+        new Assertion<>(\n+            \"must fail if sizes are different\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MzU3NA==", "bodyText": "@andreoss The same above.", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r515683574", "createdAt": "2020-11-01T22:52:47Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/iterator/MatchedTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Objects;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.HasValues;\n+import org.llorllale.cactoos.matchers.Throws;\n+\n+/**\n+ * Test case for {@link Mapped}.\n+ * @since 0.47\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+final class MatchedTest {\n+    @Test\n+    void failsWhenElementsNotMatch() {\n+        new Assertion<>(\n+            \"All elements have correlation function as `equal`\",\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    Objects::equals,\n+                    new IteratorOf<>(1),\n+                    new IteratorOf<>(0)\n+                )\n+            ),\n+            new Throws<>(\n+                new IsEqual<>(\n+                    \"The is no correlation between `1` and `0`.\"\n+                ),\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void failsOnSizeMismatch() {\n+        new Assertion<>(\n+            \"must fail if sizes are different\",\n+            () -> new ListOf<>(\n+                new Matched<>(\n+                    Objects::equals,\n+                    new IteratorOf<>(1),\n+                    new IteratorOf<>()\n+                )\n+            ),\n+            new Throws<>(\n+                new IsEqual<>(\"Size mismatch of iterators\"),\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void shouldProduceValuesOfFirstIterator() {\n+        new Assertion<>(\n+            \"must correlate all items\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67dd214768125f40ca86320b64f43b6c6797d12"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4649e746ca0b41035601ca8de0d0b99d9e3d8856", "author": {"user": {"login": "andreoss", "name": null}}, "url": "https://github.com/yegor256/cactoos/commit/4649e746ca0b41035601ca8de0d0b99d9e3d8856", "committedDate": "2020-11-02T01:50:00Z", "message": "(#1481) Fix quotes & typo in message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTU2MjQy", "url": "https://github.com/yegor256/cactoos/pull/1492#pullrequestreview-521956242", "createdAt": "2020-11-02T20:07:06Z", "commit": {"oid": "4649e746ca0b41035601ca8de0d0b99d9e3d8856"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMzY2MjM2", "url": "https://github.com/yegor256/cactoos/pull/1492#pullrequestreview-522366236", "createdAt": "2020-11-03T10:34:19Z", "commit": {"oid": "4649e746ca0b41035601ca8de0d0b99d9e3d8856"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNDoxOVrOHsoyJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNDoxOVrOHsoyJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzU5MA==", "bodyText": "@andreoss from previous discussions, I thought the Y parameter could be moved at the constructor level", "url": "https://github.com/yegor256/cactoos/pull/1492#discussion_r516567590", "createdAt": "2020-11-03T10:34:19Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/iterator/Matched.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.Iterator;\n+import org.cactoos.BiFunc;\n+import org.cactoos.func.UncheckedBiFunc;\n+import org.cactoos.text.FormattedText;\n+\n+/**\n+ * Matched iterator.\n+ *\n+ * Iterates over 2 iterators at the same time and verify that elements with the\n+ * same position has correlation by the function. The function might be equals,\n+ * endsWith, greaterThen, nonNull, empty, negative, positive, etc.\n+ *\n+ * @param <X> Type of item in first iterator.\n+ * @param <Y> Type of item in second iterator.\n+ * @since 0.47\n+ */\n+public final class Matched<X, Y> implements Iterator<X> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4649e746ca0b41035601ca8de0d0b99d9e3d8856"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 530, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}