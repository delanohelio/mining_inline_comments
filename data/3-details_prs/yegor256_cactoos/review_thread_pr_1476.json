{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNzI3MTUy", "number": 1476, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNjozNzo0MFrOEn2kHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNjo0MDo1NVrOEn2lNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjIzOTAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/scalar/TernaryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNjozNzo0MFrOHYodcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwOTowMzo1OVrOHcGJ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MDc3MA==", "bodyText": "@victornoel It would be better as String.format(\"else: %d\") here and in other pleases where + is used for concatenation.", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r495590770", "createdAt": "2020-09-27T16:37:40Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/scalar/TernaryTest.java", "diffHunk": "@@ -73,14 +76,40 @@ void conditionBoolean() throws Exception {\n \n     @Test\n     void conditionFunc() throws Exception {\n-        MatcherAssert.assertThat(\n+        new Assertion<>(\n+            \"Must call the Func with the input\",\n             new Ternary<>(\n                 5,\n                 input -> input > 3,\n-                input -> input = 8,\n-                input -> input = 2\n-            ).value(),\n-            Matchers.equalTo(8)\n-        );\n+                input -> input + 1,\n+                input -> input + 2\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void conditionSticky() throws Exception {\n+        final AtomicInteger counter = new AtomicInteger(0);\n+        new Assertion<>(\n+            \"Must conserve the same value for the whole evaluation\",\n+            new Ternary<String>(\n+                counter::incrementAndGet,\n+                i -> i == 1,\n+                i ->  i + \" equals \" + 1,\n+                i -> \"else: \" + i", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1a06ce4f8686f941eda421daa545f521f473d7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMzAxMQ==", "bodyText": "@andreoss I replaced all of this with FormattedText", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r499223011", "createdAt": "2020-10-04T09:03:59Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/scalar/TernaryTest.java", "diffHunk": "@@ -73,14 +76,40 @@ void conditionBoolean() throws Exception {\n \n     @Test\n     void conditionFunc() throws Exception {\n-        MatcherAssert.assertThat(\n+        new Assertion<>(\n+            \"Must call the Func with the input\",\n             new Ternary<>(\n                 5,\n                 input -> input > 3,\n-                input -> input = 8,\n-                input -> input = 2\n-            ).value(),\n-            Matchers.equalTo(8)\n-        );\n+                input -> input + 1,\n+                input -> input + 2\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void conditionSticky() throws Exception {\n+        final AtomicInteger counter = new AtomicInteger(0);\n+        new Assertion<>(\n+            \"Must conserve the same value for the whole evaluation\",\n+            new Ternary<String>(\n+                counter::incrementAndGet,\n+                i -> i == 1,\n+                i ->  i + \" equals \" + 1,\n+                i -> \"else: \" + i", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MDc3MA=="}, "originalCommit": {"oid": "8f1a06ce4f8686f941eda421daa545f521f473d7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjI0MDIyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/scalar/TernaryTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNjozOToyNlrOHYoeDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwOTowMzozOFrOHcGJrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MDkyNw==", "bodyText": "@victornoel It's not clear here what should be conserved. Shouldn't Ternary be assigned to a variable for Sticky to have any effect?", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r495590927", "createdAt": "2020-09-27T16:39:26Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/scalar/TernaryTest.java", "diffHunk": "@@ -73,14 +76,40 @@ void conditionBoolean() throws Exception {\n \n     @Test\n     void conditionFunc() throws Exception {\n-        MatcherAssert.assertThat(\n+        new Assertion<>(\n+            \"Must call the Func with the input\",\n             new Ternary<>(\n                 5,\n                 input -> input > 3,\n-                input -> input = 8,\n-                input -> input = 2\n-            ).value(),\n-            Matchers.equalTo(8)\n-        );\n+                input -> input + 1,\n+                input -> input + 2\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void conditionSticky() throws Exception {\n+        final AtomicInteger counter = new AtomicInteger(0);\n+        new Assertion<>(\n+            \"Must conserve the same value for the whole evaluation\",\n+            new Ternary<String>(\n+                counter::incrementAndGet,\n+                i -> i == 1,\n+                i ->  i + \" equals \" + 1,\n+                i -> \"else: \" + i\n+            ),\n+            new ScalarHasValue<>(\"1 equals 1\")\n+        ).affirm();\n+        new Assertion<>(\n+            \"Must conserve the same new value for the whole evaluation\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1a06ce4f8686f941eda421daa545f521f473d7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNTUzNg==", "bodyText": "@andreoss ok, I see it's not clear. I thought the purpose of the PR was clear based on the ticket description, but maybe it's only clear in my head ^^ I will try to explain here and then once it's clear also for you, I will imrpove the code.\nBasically, when you can new Ternary(xxx).value(), you want that for every branches of the ternary, the value used to be the same. So for example in the test, each call to the provided scalar.value will return a new value, but you want that each call to ternary.value gives you the result for one given value of the provided scalar.value. Like this it makes behaviour much closer to the expected one by someone discovering the class ternary.\nAlso it allows to express things that were not possible before, we will see that in the PR for #1460: it will allow to write it only by pure object composition without imperative intermediate values:\n     public Abbreviated(final Text text, final int max) {\n         super(\n             new Flatten(\n                new Ternary<Text>(\n                    () -> new Sticky(text),\n                    t -> t.asString().length() <= max,\n                    t -> t,\n                    t -> new FormattedText(\n                        \"%s%s\",\n                        new Sub(\n                            t,\n                            0,\n                            max - Abbreviated.ELLIPSES.length()\n                        ),\n                        Abbreviated.ELLIPSES\n                    )\n                )\n             )\n        )\n    }", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r496135536", "createdAt": "2020-09-28T18:00:27Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/scalar/TernaryTest.java", "diffHunk": "@@ -73,14 +76,40 @@ void conditionBoolean() throws Exception {\n \n     @Test\n     void conditionFunc() throws Exception {\n-        MatcherAssert.assertThat(\n+        new Assertion<>(\n+            \"Must call the Func with the input\",\n             new Ternary<>(\n                 5,\n                 input -> input > 3,\n-                input -> input = 8,\n-                input -> input = 2\n-            ).value(),\n-            Matchers.equalTo(8)\n-        );\n+                input -> input + 1,\n+                input -> input + 2\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void conditionSticky() throws Exception {\n+        final AtomicInteger counter = new AtomicInteger(0);\n+        new Assertion<>(\n+            \"Must conserve the same value for the whole evaluation\",\n+            new Ternary<String>(\n+                counter::incrementAndGet,\n+                i -> i == 1,\n+                i ->  i + \" equals \" + 1,\n+                i -> \"else: \" + i\n+            ),\n+            new ScalarHasValue<>(\"1 equals 1\")\n+        ).affirm();\n+        new Assertion<>(\n+            \"Must conserve the same new value for the whole evaluation\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MDkyNw=="}, "originalCommit": {"oid": "8f1a06ce4f8686f941eda421daa545f521f473d7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMjk1OQ==", "bodyText": "@andreoss actually, thank you for your comment because I realised afterward that it's not that it was clear, but as you said, that the test was incorrect: ternary should be assigned to a variable to be reused in the two assertions. And when I tried, it showed that my implementation was indeed incorrect :)\nI've fixed that in my last push!", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r499222959", "createdAt": "2020-10-04T09:03:38Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/scalar/TernaryTest.java", "diffHunk": "@@ -73,14 +76,40 @@ void conditionBoolean() throws Exception {\n \n     @Test\n     void conditionFunc() throws Exception {\n-        MatcherAssert.assertThat(\n+        new Assertion<>(\n+            \"Must call the Func with the input\",\n             new Ternary<>(\n                 5,\n                 input -> input > 3,\n-                input -> input = 8,\n-                input -> input = 2\n-            ).value(),\n-            Matchers.equalTo(8)\n-        );\n+                input -> input + 1,\n+                input -> input + 2\n+            ),\n+            new ScalarHasValue<>(6)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void conditionSticky() throws Exception {\n+        final AtomicInteger counter = new AtomicInteger(0);\n+        new Assertion<>(\n+            \"Must conserve the same value for the whole evaluation\",\n+            new Ternary<String>(\n+                counter::incrementAndGet,\n+                i -> i == 1,\n+                i ->  i + \" equals \" + 1,\n+                i -> \"else: \" + i\n+            ),\n+            new ScalarHasValue<>(\"1 equals 1\")\n+        ).affirm();\n+        new Assertion<>(\n+            \"Must conserve the same new value for the whole evaluation\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MDkyNw=="}, "originalCommit": {"oid": "8f1a06ce4f8686f941eda421daa545f521f473d7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjI0MTgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/scalar/Ternary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNjo0MDo1NVrOHYoezw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwOTowNDoxMlrOHcGKBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MTExOQ==", "bodyText": "@victornoel Camel-cased variables are against the current code style, probably we should not have them in examples too.", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r495591119", "createdAt": "2020-09-27T16:40:55Z", "author": {"login": "andreoss"}, "path": "src/main/java/org/cactoos/scalar/Ternary.java", "diffHunk": "@@ -39,10 +39,10 @@\n  *\n  * <pre>{@code\n  * new Ternary<>(\n- *     5,\n+ *     someScalarOfInteger,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1a06ce4f8686f941eda421daa545f521f473d7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMzA0Ng==", "bodyText": "@andreoss right, I also simplified the example", "url": "https://github.com/yegor256/cactoos/pull/1476#discussion_r499223046", "createdAt": "2020-10-04T09:04:12Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/scalar/Ternary.java", "diffHunk": "@@ -39,10 +39,10 @@\n  *\n  * <pre>{@code\n  * new Ternary<>(\n- *     5,\n+ *     someScalarOfInteger,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MTExOQ=="}, "originalCommit": {"oid": "8f1a06ce4f8686f941eda421daa545f521f473d7"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 764, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}