{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ3MDA0OTg4", "number": 1522, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODozMDoyM1rOFKJTLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODozMzo0NFrOFKJVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTgyNDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/func/RunnableOf.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODozMDoyM1rOIMy3VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxMzoxODo1MVrOINer4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4NzE4OQ==", "bodyText": "@victornoel  Why is it a Scalar and not a Runnable?", "url": "https://github.com/yegor256/cactoos/pull/1522#discussion_r550287189", "createdAt": "2020-12-30T18:30:23Z", "author": {"login": "andreoss"}, "path": "src/main/java/org/cactoos/func/RunnableOf.java", "diffHunk": "@@ -23,79 +23,61 @@\n  */\n package org.cactoos.func;\n \n-import java.util.concurrent.Callable;\n import org.cactoos.Func;\n import org.cactoos.Proc;\n+import org.cactoos.Scalar;\n import org.cactoos.proc.ProcOf;\n-import org.cactoos.proc.UncheckedProc;\n+import org.cactoos.scalar.Unchecked;\n \n /**\n  * Func as Runnable.\n  *\n  * <p>There is no thread-safety guarantee.\n  *\n- * @param <X> Type of input\n  * @since 0.12\n  */\n-public final class RunnableOf<X> implements Runnable {\n+public final class RunnableOf implements Runnable {\n \n     /**\n-     * Original proc.\n+     * Runnable.\n      */\n-    private final Proc<X> proc;\n-\n-    /**\n-     * The input.\n-     */\n-    private final X input;\n-\n-    /**\n-     * Ctor.\n-     * @param proc Encapsulated proc\n-     * @since 0.11\n-     */\n-    public RunnableOf(final Callable<X> proc) {\n-        this(new FuncOf<>(proc));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param proc Encapsulated proc\n-     */\n-    public RunnableOf(final Proc<X> proc) {\n-        this(proc, null);\n-    }\n+    private final Scalar<?> scalar;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026638e2291ed51498d57b3a46fae9786a3e8dd8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwNTE1Mw==", "bodyText": "@andreoss Runnable.run does not throw an exception so it makes it awkward to assign a scalar (from the constructor) into a  runnable (while the opposite is acceptable). Now that I think about it, I could have wrapped the scalar into unchecked at the constructor level. I will do that for consistency sake with other similar classes.", "url": "https://github.com/yegor256/cactoos/pull/1522#discussion_r551005153", "createdAt": "2021-01-03T13:18:51Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/func/RunnableOf.java", "diffHunk": "@@ -23,79 +23,61 @@\n  */\n package org.cactoos.func;\n \n-import java.util.concurrent.Callable;\n import org.cactoos.Func;\n import org.cactoos.Proc;\n+import org.cactoos.Scalar;\n import org.cactoos.proc.ProcOf;\n-import org.cactoos.proc.UncheckedProc;\n+import org.cactoos.scalar.Unchecked;\n \n /**\n  * Func as Runnable.\n  *\n  * <p>There is no thread-safety guarantee.\n  *\n- * @param <X> Type of input\n  * @since 0.12\n  */\n-public final class RunnableOf<X> implements Runnable {\n+public final class RunnableOf implements Runnable {\n \n     /**\n-     * Original proc.\n+     * Runnable.\n      */\n-    private final Proc<X> proc;\n-\n-    /**\n-     * The input.\n-     */\n-    private final X input;\n-\n-    /**\n-     * Ctor.\n-     * @param proc Encapsulated proc\n-     * @since 0.11\n-     */\n-    public RunnableOf(final Callable<X> proc) {\n-        this(new FuncOf<>(proc));\n-    }\n-\n-    /**\n-     * Ctor.\n-     * @param proc Encapsulated proc\n-     */\n-    public RunnableOf(final Proc<X> proc) {\n-        this(proc, null);\n-    }\n+    private final Scalar<?> scalar;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4NzE4OQ=="}, "originalCommit": {"oid": "026638e2291ed51498d57b3a46fae9786a3e8dd8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTgyNjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/proc/ProcOf.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODozMToxOVrOIMy4RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxMzoyMDowM1rOINesTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4NzQyOQ==", "bodyText": "@victornoel This type of ctor doesn't make much sense, why would one want to wrap pre-existing Proc with ProcOf?", "url": "https://github.com/yegor256/cactoos/pull/1522#discussion_r550287429", "createdAt": "2020-12-30T18:31:19Z", "author": {"login": "andreoss"}, "path": "src/main/java/org/cactoos/proc/ProcOf.java", "diffHunk": "@@ -70,7 +53,7 @@ public ProcOf(final Func<X, ?> fnc) {\n      * Ctor.\n      * @param prc The proc\n      */\n-    private ProcOf(final Proc<X> prc) {\n+    public ProcOf(final Proc<X> prc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026638e2291ed51498d57b3a46fae9786a3e8dd8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwNTI2Mg==", "bodyText": "@andreoss it's mainly useful to force type a lambda: new ProcOf(x -> { /* do something with x */ ; })", "url": "https://github.com/yegor256/cactoos/pull/1522#discussion_r551005262", "createdAt": "2021-01-03T13:20:03Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/proc/ProcOf.java", "diffHunk": "@@ -70,7 +53,7 @@ public ProcOf(final Func<X, ?> fnc) {\n      * Ctor.\n      * @param prc The proc\n      */\n-    private ProcOf(final Proc<X> prc) {\n+    public ProcOf(final Proc<X> prc) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4NzQyOQ=="}, "originalCommit": {"oid": "026638e2291ed51498d57b3a46fae9786a3e8dd8"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTgzMDQ0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/experimental/TimedTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODozMzo0NFrOIMy61g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxMzo0MDozOVrOINe1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4ODA4Ng==", "bodyText": "@victornoel Can this type of test be migrated to @RepeatedTest annotation?", "url": "https://github.com/yegor256/cactoos/pull/1522#discussion_r550288086", "createdAt": "2020-12-30T18:33:44Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/experimental/TimedTest.java", "diffHunk": "@@ -84,7 +84,7 @@\n         \"PMD.AvoidThrowingRawExceptionTypes\", \"PMD.DoNotThrowExceptionInFinally\"\n     })\n     void containsResults() throws Exception {\n-        new RepeatedCallable<>(\n+        new Repeated<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026638e2291ed51498d57b3a46fae9786a3e8dd8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwNzU0MQ==", "bodyText": "@andreoss I've added a todo, thx for the idea", "url": "https://github.com/yegor256/cactoos/pull/1522#discussion_r551007541", "createdAt": "2021-01-03T13:40:39Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/experimental/TimedTest.java", "diffHunk": "@@ -84,7 +84,7 @@\n         \"PMD.AvoidThrowingRawExceptionTypes\", \"PMD.DoNotThrowExceptionInFinally\"\n     })\n     void containsResults() throws Exception {\n-        new RepeatedCallable<>(\n+        new Repeated<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4ODA4Ng=="}, "originalCommit": {"oid": "026638e2291ed51498d57b3a46fae9786a3e8dd8"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 786, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}