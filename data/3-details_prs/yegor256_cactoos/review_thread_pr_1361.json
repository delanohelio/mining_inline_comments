{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDgxNzM2", "number": 1361, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToxMTowM1rOD3lEwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToxMTowM1rOD3lEwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjA1Njk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/iterator/ReversedTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToxMTowM1rOGN6E1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNjo0NjozMlrOGOb2Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNjE4MQ==", "bodyText": "@marceloamadeu can't we directly compare iterators? or maybe use an existing matcher that allows to compare iterator?", "url": "https://github.com/yegor256/cactoos/pull/1361#discussion_r417236181", "createdAt": "2020-04-29T11:11:03Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/iterator/ReversedTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyCollection;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.HasSize;\n+\n+/**\n+ * Test case for {@link Reversed}.\n+ *\n+ * @since 0.45\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+public final class ReversedTest {\n+\n+    @Test\n+    public void reversesIterator() {\n+        new Assertion<>(\n+            \"Must reverse the iterator\",\n+            new ListOf<>(\n+                new Reversed<>(\n+                    new IteratorOf<>(\"c\", \"a\", \"c\", \"t\", \"o\", \"o\", \"s\")\n+                )\n+            ),\n+            new IsEqual<>(\n+                new ListOf<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fca626a96b22dbff1fe88ef08d507784e2bb32"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczNDcwOA==", "bodyText": "@victornoel I couldn't find another way to resolve it. Do you have any suggestion?\nThank!!!", "url": "https://github.com/yegor256/cactoos/pull/1361#discussion_r417734708", "createdAt": "2020-04-30T03:34:51Z", "author": {"login": "marceloamadeu"}, "path": "src/test/java/org/cactoos/iterator/ReversedTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyCollection;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.HasSize;\n+\n+/**\n+ * Test case for {@link Reversed}.\n+ *\n+ * @since 0.45\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+public final class ReversedTest {\n+\n+    @Test\n+    public void reversesIterator() {\n+        new Assertion<>(\n+            \"Must reverse the iterator\",\n+            new ListOf<>(\n+                new Reversed<>(\n+                    new IteratorOf<>(\"c\", \"a\", \"c\", \"t\", \"o\", \"o\", \"s\")\n+                )\n+            ),\n+            new IsEqual<>(\n+                new ListOf<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNjE4MQ=="}, "originalCommit": {"oid": "f3fca626a96b22dbff1fe88ef08d507784e2bb32"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4OTUwMw==", "bodyText": "@marceloamadeu let's forget about it, thank you for trying :)", "url": "https://github.com/yegor256/cactoos/pull/1361#discussion_r417789503", "createdAt": "2020-04-30T06:46:32Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/iterator/ReversedTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyCollection;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.HasSize;\n+\n+/**\n+ * Test case for {@link Reversed}.\n+ *\n+ * @since 0.45\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+public final class ReversedTest {\n+\n+    @Test\n+    public void reversesIterator() {\n+        new Assertion<>(\n+            \"Must reverse the iterator\",\n+            new ListOf<>(\n+                new Reversed<>(\n+                    new IteratorOf<>(\"c\", \"a\", \"c\", \"t\", \"o\", \"o\", \"s\")\n+                )\n+            ),\n+            new IsEqual<>(\n+                new ListOf<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNjE4MQ=="}, "originalCommit": {"oid": "f3fca626a96b22dbff1fe88ef08d507784e2bb32"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 824, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}