{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNDQ5ODU4", "number": 1329, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMToxMToxOFrODqE5Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMToxMzo1MVrODqE5zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDQ2OTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/set/Sorted.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMToxMToxOFrOF5o7mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo1Njo0NFrOF857NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzc2OQ==", "bodyText": "@vzurauskas can you introduce a SortedSetEnvelope (that extends SetEnvelope) responsible of delegating to a wrapped set and have Sorted only responsible of handling the Iterable-based constructor.", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r395983769", "createdAt": "2020-03-21T11:11:18Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/set/Sorted.java", "diffHunk": "@@ -35,11 +36,14 @@\n  *\n  * @param <T> Set type\n  * @since 1.0.0\n- * @todo #1292:30min This class should also implements SortedSet\n- *  from the java collection framework by delegating to the\n- *  wrapped set. Some tests must be added for it.\n  */\n-public final class Sorted<T> extends SetEnvelope<T> {\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n+public final class Sorted<T> extends SetEnvelope<T> implements SortedSet<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwNzkyNQ==", "bodyText": "@victornoel Yes, good idea.", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399407925", "createdAt": "2020-03-27T16:56:44Z", "author": {"login": "vzurauskas"}, "path": "src/main/java/org/cactoos/set/Sorted.java", "diffHunk": "@@ -35,11 +36,14 @@\n  *\n  * @param <T> Set type\n  * @since 1.0.0\n- * @todo #1292:30min This class should also implements SortedSet\n- *  from the java collection framework by delegating to the\n- *  wrapped set. Some tests must be added for it.\n  */\n-public final class Sorted<T> extends SetEnvelope<T> {\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n+public final class Sorted<T> extends SetEnvelope<T> implements SortedSet<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzc2OQ=="}, "originalCommit": {"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDQ3MDA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/set/Sorted.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMToxMTozN1rOF5o7rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo1NzowMFrOF8577Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzc4OA==", "bodyText": "@vzurauskas this can be removed if you introduce the SortedSetEnvelope as proposer in the other comment", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r395983788", "createdAt": "2020-03-21T11:11:37Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/set/Sorted.java", "diffHunk": "@@ -35,11 +36,14 @@\n  *\n  * @param <T> Set type\n  * @since 1.0.0\n- * @todo #1292:30min This class should also implements SortedSet\n- *  from the java collection framework by delegating to the\n- *  wrapped set. Some tests must be added for it.\n  */\n-public final class Sorted<T> extends SetEnvelope<T> {\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwODEwOQ==", "bodyText": "@victornoel Right.", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399408109", "createdAt": "2020-03-27T16:57:00Z", "author": {"login": "vzurauskas"}, "path": "src/main/java/org/cactoos/set/Sorted.java", "diffHunk": "@@ -35,11 +36,14 @@\n  *\n  * @param <T> Set type\n  * @since 1.0.0\n- * @todo #1292:30min This class should also implements SortedSet\n- *  from the java collection framework by delegating to the\n- *  wrapped set. Some tests must be added for it.\n  */\n-public final class Sorted<T> extends SetEnvelope<T> {\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzc4OA=="}, "originalCommit": {"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDQ3MDg5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/set/SortedTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMToxMzoxNlrOF5o8Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzowOToyNlrOF86aqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzg5OA==", "bodyText": "@vzurauskas I think you can use directly IsEqual with a new SetOf.", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r395983898", "createdAt": "2020-03-21T11:13:16Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/set/SortedTest.java", "diffHunk": "@@ -125,4 +125,75 @@ public void mustNotBeEqualToSortedSet() {\n                 ))\n         ).affirm();\n     }\n+\n+    @Test\n+    public void returnsCorrectComparator() {\n+        final Comparator<Integer> comparator = Integer::compareTo;\n+        new Assertion<>(\n+            \"Comparator must be the same\",\n+            new Sorted<>(comparator, 1, 2, 3).comparator(),\n+            new IsEqual<>(comparator)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsSubset() {\n+        new Assertion<>(\n+            \"Must return sorted subset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).subSet(3, 9),\n+            new IsIterableContainingInOrder<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwOTA2OA==", "bodyText": "@victornoel It will ignore order, since normal sets are unordered. I need to make sure the order is right here.", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399409068", "createdAt": "2020-03-27T16:58:31Z", "author": {"login": "vzurauskas"}, "path": "src/test/java/org/cactoos/set/SortedTest.java", "diffHunk": "@@ -125,4 +125,75 @@ public void mustNotBeEqualToSortedSet() {\n                 ))\n         ).affirm();\n     }\n+\n+    @Test\n+    public void returnsCorrectComparator() {\n+        final Comparator<Integer> comparator = Integer::compareTo;\n+        new Assertion<>(\n+            \"Comparator must be the same\",\n+            new Sorted<>(comparator, 1, 2, 3).comparator(),\n+            new IsEqual<>(comparator)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsSubset() {\n+        new Assertion<>(\n+            \"Must return sorted subset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).subSet(3, 9),\n+            new IsIterableContainingInOrder<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzg5OA=="}, "originalCommit": {"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxNTk3Nw==", "bodyText": "@vzurauskas ah yes of course!", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399415977", "createdAt": "2020-03-27T17:09:26Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/set/SortedTest.java", "diffHunk": "@@ -125,4 +125,75 @@ public void mustNotBeEqualToSortedSet() {\n                 ))\n         ).affirm();\n     }\n+\n+    @Test\n+    public void returnsCorrectComparator() {\n+        final Comparator<Integer> comparator = Integer::compareTo;\n+        new Assertion<>(\n+            \"Comparator must be the same\",\n+            new Sorted<>(comparator, 1, 2, 3).comparator(),\n+            new IsEqual<>(comparator)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsSubset() {\n+        new Assertion<>(\n+            \"Must return sorted subset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).subSet(3, 9),\n+            new IsIterableContainingInOrder<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4Mzg5OA=="}, "originalCommit": {"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDQ3MTE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/set/SortedTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMToxMzo0NlrOF5o8QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo1ODo0NVrOF86AWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MzkzNg==", "bodyText": "@vzurauskas same here, IsEqual with a new SetOf.", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r395983936", "createdAt": "2020-03-21T11:13:46Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/set/SortedTest.java", "diffHunk": "@@ -125,4 +125,75 @@ public void mustNotBeEqualToSortedSet() {\n                 ))\n         ).affirm();\n     }\n+\n+    @Test\n+    public void returnsCorrectComparator() {\n+        final Comparator<Integer> comparator = Integer::compareTo;\n+        new Assertion<>(\n+            \"Comparator must be the same\",\n+            new Sorted<>(comparator, 1, 2, 3).comparator(),\n+            new IsEqual<>(comparator)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsSubset() {\n+        new Assertion<>(\n+            \"Must return sorted subset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).subSet(3, 9),\n+            new IsIterableContainingInOrder<>(\n+                new ListOf<Matcher<? super Integer>>(\n+                    new IsEqual<>(3),\n+                    new IsEqual<>(6)\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsHeadset() {\n+        new Assertion<>(\n+            \"Must return sorted headset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).headSet(9),\n+            new IsIterableContainingInOrder<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwOTI0Mg==", "bodyText": "@victornoel Same answer.", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399409242", "createdAt": "2020-03-27T16:58:45Z", "author": {"login": "vzurauskas"}, "path": "src/test/java/org/cactoos/set/SortedTest.java", "diffHunk": "@@ -125,4 +125,75 @@ public void mustNotBeEqualToSortedSet() {\n                 ))\n         ).affirm();\n     }\n+\n+    @Test\n+    public void returnsCorrectComparator() {\n+        final Comparator<Integer> comparator = Integer::compareTo;\n+        new Assertion<>(\n+            \"Comparator must be the same\",\n+            new Sorted<>(comparator, 1, 2, 3).comparator(),\n+            new IsEqual<>(comparator)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsSubset() {\n+        new Assertion<>(\n+            \"Must return sorted subset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).subSet(3, 9),\n+            new IsIterableContainingInOrder<>(\n+                new ListOf<Matcher<? super Integer>>(\n+                    new IsEqual<>(3),\n+                    new IsEqual<>(6)\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsHeadset() {\n+        new Assertion<>(\n+            \"Must return sorted headset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).headSet(9),\n+            new IsIterableContainingInOrder<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MzkzNg=="}, "originalCommit": {"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDQ3MTE4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/set/SortedTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMToxMzo1MVrOF5o8Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo1OTowOVrOF86BUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MzkzOQ==", "bodyText": "@vzurauskas same here, IsEqual with a new SetOf.", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r395983939", "createdAt": "2020-03-21T11:13:51Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/set/SortedTest.java", "diffHunk": "@@ -125,4 +125,75 @@ public void mustNotBeEqualToSortedSet() {\n                 ))\n         ).affirm();\n     }\n+\n+    @Test\n+    public void returnsCorrectComparator() {\n+        final Comparator<Integer> comparator = Integer::compareTo;\n+        new Assertion<>(\n+            \"Comparator must be the same\",\n+            new Sorted<>(comparator, 1, 2, 3).comparator(),\n+            new IsEqual<>(comparator)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsSubset() {\n+        new Assertion<>(\n+            \"Must return sorted subset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).subSet(3, 9),\n+            new IsIterableContainingInOrder<>(\n+                new ListOf<Matcher<? super Integer>>(\n+                    new IsEqual<>(3),\n+                    new IsEqual<>(6)\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsHeadset() {\n+        new Assertion<>(\n+            \"Must return sorted headset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).headSet(9),\n+            new IsIterableContainingInOrder<>(\n+                new ListOf<Matcher<? super Integer>>(\n+                    new IsEqual<>(1),\n+                    new IsEqual<>(3),\n+                    new IsEqual<>(6)\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsTailset() {\n+        new Assertion<>(\n+            \"Must return sorted tailset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).tailSet(6),\n+            new IsIterableContainingInOrder<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwOTQ5MQ==", "bodyText": "@victornoel Same answer.", "url": "https://github.com/yegor256/cactoos/pull/1329#discussion_r399409491", "createdAt": "2020-03-27T16:59:09Z", "author": {"login": "vzurauskas"}, "path": "src/test/java/org/cactoos/set/SortedTest.java", "diffHunk": "@@ -125,4 +125,75 @@ public void mustNotBeEqualToSortedSet() {\n                 ))\n         ).affirm();\n     }\n+\n+    @Test\n+    public void returnsCorrectComparator() {\n+        final Comparator<Integer> comparator = Integer::compareTo;\n+        new Assertion<>(\n+            \"Comparator must be the same\",\n+            new Sorted<>(comparator, 1, 2, 3).comparator(),\n+            new IsEqual<>(comparator)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsSubset() {\n+        new Assertion<>(\n+            \"Must return sorted subset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).subSet(3, 9),\n+            new IsIterableContainingInOrder<>(\n+                new ListOf<Matcher<? super Integer>>(\n+                    new IsEqual<>(3),\n+                    new IsEqual<>(6)\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsHeadset() {\n+        new Assertion<>(\n+            \"Must return sorted headset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).headSet(9),\n+            new IsIterableContainingInOrder<>(\n+                new ListOf<Matcher<? super Integer>>(\n+                    new IsEqual<>(1),\n+                    new IsEqual<>(3),\n+                    new IsEqual<>(6)\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void returnsTailset() {\n+        new Assertion<>(\n+            \"Must return sorted tailset\",\n+            new Sorted<>(Integer::compareTo, 3, 6, 1, 9, 3).tailSet(6),\n+            new IsIterableContainingInOrder<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MzkzOQ=="}, "originalCommit": {"oid": "37f2408ea3d399879278db9264b8f4f4ed2bdc39"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 805, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}