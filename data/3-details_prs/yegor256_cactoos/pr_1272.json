{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMzEyMzg4", "number": 1272, "title": "(#1226) Delete Andand introduce ForEach", "bodyText": "This is for issue (#1226)\nExtracted ForEach from And\nAdded ForEachTest\nExtracted ForEachInThreads from AndInThreads\nAdded ForEachInThreadsTest\nUpdated README.md accordingly", "createdAt": "2020-01-08T07:04:52Z", "url": "https://github.com/yegor256/cactoos/pull/1272", "merged": true, "mergeCommit": {"oid": "790f943b43246e540b6011cfc08cd844932e5cc0"}, "closed": true, "closedAt": "2020-01-29T03:09:07Z", "author": {"login": "ryoku"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2OOB1AH2gAyMzYwMzEyMzg4Ojk0ZDdmNWFlODNmOTc3N2ZlZjZmNTA4ZTVjMDAzZTc0MWJiNmM2NjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb42nLIgFqTM0MDk0NjQwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "94d7f5ae83f9777fef6f508e5c003e741bb6c663", "author": {"user": {"login": "ryoku", "name": "Riccardo Ianniello"}}, "url": "https://github.com/yegor256/cactoos/commit/94d7f5ae83f9777fef6f508e5c003e741bb6c663", "committedDate": "2020-01-02T00:00:50Z", "message": "(#1226) Replaced And(Proc, ...) with ForEach(Proc, ...)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21e9e861fc5b4a7625f8bf7e6d10dfc93dc31bcc", "author": {"user": {"login": "ryoku", "name": "Riccardo Ianniello"}}, "url": "https://github.com/yegor256/cactoos/commit/21e9e861fc5b4a7625f8bf7e6d10dfc93dc31bcc", "committedDate": "2020-01-02T00:30:28Z", "message": "(#1226) Replaced AndInThreads(Proc, ...) with ForEachInThreads"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65", "author": {"user": {"login": "ryoku", "name": "Riccardo Ianniello"}}, "url": "https://github.com/yegor256/cactoos/commit/1b80caffc3a76f173acf6c5617d3596b84bfdd65", "committedDate": "2020-01-02T12:05:41Z", "message": "(#1226) Fixed documentation of ForEachInThreads"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMDE3MDM2", "url": "https://github.com/yegor256/cactoos/pull/1272#pullrequestreview-340017036", "createdAt": "2020-01-08T17:16:16Z", "commit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzoxNjoxN1rOFbd8IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMzozODo0NlrOFbqMBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM0NjQwMQ==", "bodyText": "@ryoku I think the version is not correct here. Take a look into pom.xml.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364346401", "createdAt": "2020-01-08T17:16:17Z", "author": {"login": "fanifieiev"}, "path": "src/main/java/org/cactoos/iterator/ForEach.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import org.cactoos.Func;\n+import org.cactoos.Proc;\n+import org.cactoos.func.FuncOf;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.scalar.And;\n+\n+/**\n+ * Executes a {@link org.cactoos.Proc} for each element of an\n+ * {@link java.lang.Iterable}\n+ *\n+ * <p>\n+ * This class can be effectively used to iterate through a collection, just like\n+ * {@link java.util.stream.Stream#forEach(java.util.function.Consumer)} works:\n+ * </p>\n+ *\n+ * {@code\n+ * new ForEach(\n+ *    new ProcOf<>(input -> System.out.printf(\"\\'%s\\' \", input)),\n+ * ).execute(\n+ *    new IterableOf<>(\"Mary\", \"John\", \"William\", \"Napkin\")\n+ * ); // will print 'Mary' 'John' 'William' 'Napkin' to standard output\n+ * }\n+ * <p>\n+ * There is no thread-safety guarantee.\n+ *\n+ * @param <X> The type to itetare over\n+ * @since 0.44", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2NDYxNQ==", "bodyText": "@ryoku Public methods in a class should only exist if the underlying interface has it. Please remove it.\nRead https://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html#2-he-works-by-contracts", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364464615", "createdAt": "2020-01-08T22:00:44Z", "author": {"login": "fanifieiev"}, "path": "src/main/java/org/cactoos/iterator/ForEach.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import org.cactoos.Func;\n+import org.cactoos.Proc;\n+import org.cactoos.func.FuncOf;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.scalar.And;\n+\n+/**\n+ * Executes a {@link org.cactoos.Proc} for each element of an\n+ * {@link java.lang.Iterable}\n+ *\n+ * <p>\n+ * This class can be effectively used to iterate through a collection, just like\n+ * {@link java.util.stream.Stream#forEach(java.util.function.Consumer)} works:\n+ * </p>\n+ *\n+ * {@code\n+ * new ForEach(\n+ *    new ProcOf<>(input -> System.out.printf(\"\\'%s\\' \", input)),\n+ * ).execute(\n+ *    new IterableOf<>(\"Mary\", \"John\", \"William\", \"Napkin\")\n+ * ); // will print 'Mary' 'John' 'William' 'Napkin' to standard output\n+ * }\n+ * <p>\n+ * There is no thread-safety guarantee.\n+ *\n+ * @param <X> The type to itetare over\n+ * @since 0.44\n+ */\n+public final class ForEach<X> implements Proc<Iterable<X>> {\n+\n+    /**\n+     * The proc.\n+     */\n+    private final Func<X, Boolean> wrapped;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param proc The proc to execute\n+     */\n+    public ForEach(final Proc<X> proc) {\n+        this.wrapped = new FuncOf<>(\n+            proc, true\n+        );\n+    }\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param src The iterable\n+     * @exception Exception If fails\n+     */\n+    @SafeVarargs\n+    public final void exec(final X... src) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNjAyNQ==", "bodyText": "@ryoku I think the version is not correct here. Take a look into pom.xml.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364536025", "createdAt": "2020-01-09T02:35:19Z", "author": {"login": "fanifieiev"}, "path": "src/main/java/org/cactoos/iterator/ForEachInThreads.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import org.cactoos.Func;\n+import org.cactoos.Proc;\n+import org.cactoos.func.FuncOf;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.scalar.AndInThreads;\n+\n+/**\n+ * Executes a {@link org.cactoos.Proc} in a new Thread for each element of an\n+ * {@link java.lang.Iterable}\n+ *\n+ * <p>\n+ * This class can be effectively used to iterate through a collection, just like\n+ * {@link java.util.stream.Stream#forEach(java.util.function.Consumer)} works,\n+ * but with no guarantee on the output sorting:\n+ * </p>\n+ *\n+ * {@code\n+ * new ForEachInThreads(\n+ *    new ProcOf<>(input -> System.out.printf(\"\\'%s\\' \", input)),\n+ * ).execute(\n+ *    new IterableOf<>(\"Mary\", \"John\", \"William\", \"Napkin\")\n+ * ); // will print 'Mary' 'John' 'William' 'Napkin' to standard output. Sorting is not guaranteed.\n+ * }\n+ * <p>\n+ * There is no thread-safety guarantee.\n+ *\n+ * @param <X> The type to itetare over\n+ * @since 0.44", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNjYxMw==", "bodyText": "@ryoku I think the version is not correct here. Take a look into pom.xml.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364536613", "createdAt": "2020-01-09T02:38:39Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterator/ForEachInThreadsTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.cactoos.Proc;\n+import org.cactoos.func.ProcNoNulls;\n+import org.cactoos.list.ListOf;\n+import org.cactoos.list.Synced;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.collection.IsIterableContainingInAnyOrder;\n+import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.MatcherOf;\n+\n+/**\n+ * Test case for {@link ForEachInThreads}.\n+ *\n+ * @since 0.44", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNjY4NA==", "bodyText": "@ryoku I think the version is not correct here. Take a look into pom.xml.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364536684", "createdAt": "2020-01-09T02:38:59Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterator/ForEachTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.cactoos.Proc;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+\n+/**\n+ * Test case for {@link ForEach}.\n+ *\n+ * @since 0.44", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNzQ1Mw==", "bodyText": "@ryoku Change will print 'Mary' 'John' 'William' 'Napkin' to standard output. Sorting is not guaranteed. to `will print 'Mary' 'John' 'William' 'Napkin' to standard output. Order of printing can be random.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364537453", "createdAt": "2020-01-09T02:43:07Z", "author": {"login": "fanifieiev"}, "path": "src/main/java/org/cactoos/iterator/ForEachInThreads.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import org.cactoos.Func;\n+import org.cactoos.Proc;\n+import org.cactoos.func.FuncOf;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.scalar.AndInThreads;\n+\n+/**\n+ * Executes a {@link org.cactoos.Proc} in a new Thread for each element of an\n+ * {@link java.lang.Iterable}\n+ *\n+ * <p>\n+ * This class can be effectively used to iterate through a collection, just like\n+ * {@link java.util.stream.Stream#forEach(java.util.function.Consumer)} works,\n+ * but with no guarantee on the output sorting:\n+ * </p>\n+ *\n+ * {@code\n+ * new ForEachInThreads(\n+ *    new ProcOf<>(input -> System.out.printf(\"\\'%s\\' \", input)),\n+ * ).execute(\n+ *    new IterableOf<>(\"Mary\", \"John\", \"William\", \"Napkin\")\n+ * ); // will print 'Mary' 'John' 'William' 'Napkin' to standard output. Sorting is not guaranteed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNzY2Nw==", "bodyText": "@ryoku Public methods in a class should only exist if the underlying interface has it. Please remove it.\nRead https://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html#2-he-works-by-contracts", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364537667", "createdAt": "2020-01-09T02:44:16Z", "author": {"login": "fanifieiev"}, "path": "src/main/java/org/cactoos/iterator/ForEachInThreads.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import org.cactoos.Func;\n+import org.cactoos.Proc;\n+import org.cactoos.func.FuncOf;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.scalar.AndInThreads;\n+\n+/**\n+ * Executes a {@link org.cactoos.Proc} in a new Thread for each element of an\n+ * {@link java.lang.Iterable}\n+ *\n+ * <p>\n+ * This class can be effectively used to iterate through a collection, just like\n+ * {@link java.util.stream.Stream#forEach(java.util.function.Consumer)} works,\n+ * but with no guarantee on the output sorting:\n+ * </p>\n+ *\n+ * {@code\n+ * new ForEachInThreads(\n+ *    new ProcOf<>(input -> System.out.printf(\"\\'%s\\' \", input)),\n+ * ).execute(\n+ *    new IterableOf<>(\"Mary\", \"John\", \"William\", \"Napkin\")\n+ * ); // will print 'Mary' 'John' 'William' 'Napkin' to standard output. Sorting is not guaranteed.\n+ * }\n+ * <p>\n+ * There is no thread-safety guarantee.\n+ *\n+ * @param <X> The type to itetare over\n+ * @since 0.44\n+ */\n+public final class ForEachInThreads<X> implements Proc<Iterable<X>> {\n+\n+    /**\n+     * The proc.\n+     */\n+    private final Func<X, Boolean> wrapped;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param proc The proc to execute\n+     */\n+    public ForEachInThreads(final Proc<X> proc) {\n+        this.wrapped = new FuncOf<>(\n+            proc, true\n+        );\n+    }\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param src The iterable\n+     * @exception Exception If fails\n+     */\n+    @SafeVarargs\n+    public final void exec(final X... src) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzODMyNg==", "bodyText": "@ryoku Fix the indention here.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364538326", "createdAt": "2020-01-09T02:48:00Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterator/ForEachTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.cactoos.Proc;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+\n+/**\n+ * Test case for {@link ForEach}.\n+ *\n+ * @since 0.44\n+ * @checkstyle JavadocMethodCheck (500 lines)\n+ */\n+public class ForEachTest {\n+\n+    @Test\n+    public void testProcIterable() throws Exception {\n+        final List<Integer> list = new LinkedList<>();\n+        new ForEach<Integer>(\n+            (Proc<Integer>) list::add\n+        ).exec(\n+            new IterableOf<>(\n+                1, 1\n+            )\n+        );\n+        new Assertion<>(\n+            \"List does not contain mapped Iterable elements (1)\", list, new IsEqual<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzODM4MQ==", "bodyText": "@ryoku Fix the indention here.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364538381", "createdAt": "2020-01-09T02:48:10Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterator/ForEachTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.cactoos.Proc;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+\n+/**\n+ * Test case for {@link ForEach}.\n+ *\n+ * @since 0.44\n+ * @checkstyle JavadocMethodCheck (500 lines)\n+ */\n+public class ForEachTest {\n+\n+    @Test\n+    public void testProcIterable() throws Exception {\n+        final List<Integer> list = new LinkedList<>();\n+        new ForEach<Integer>(\n+            (Proc<Integer>) list::add\n+        ).exec(\n+            new IterableOf<>(\n+                1, 1\n+            )\n+        );\n+        new Assertion<>(\n+            \"List does not contain mapped Iterable elements (1)\", list, new IsEqual<>(\n+                new ListOf<>(\n+                    1, 1\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void testProcVarargs() throws Exception {\n+        final List<Integer> list = new LinkedList<>();\n+        new ForEach<Integer>(\n+            (Proc<Integer>) list::add\n+        ).exec(1, 1);\n+        new Assertion<>(\n+            \"List does not contain mapped Iterable elements (2)\", list, new IsEqual<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0Njc0NA==", "bodyText": "@ryoku The class should be located in org.cactoos.func package.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364546744", "createdAt": "2020-01-09T03:36:45Z", "author": {"login": "fanifieiev"}, "path": "src/main/java/org/cactoos/iterator/ForEach.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0NjgxOQ==", "bodyText": "@ryoku The class should be located in org.cactoos.func package.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364546819", "createdAt": "2020-01-09T03:37:13Z", "author": {"login": "fanifieiev"}, "path": "src/main/java/org/cactoos/iterator/ForEachInThreads.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0NjkzOA==", "bodyText": "@ryoku The class should be located in org.cactoos.func package.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364546938", "createdAt": "2020-01-09T03:37:56Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterator/ForEachInThreadsTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0NzA3Nw==", "bodyText": "@ryoku The class should be located in org.cactoos.func package.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364547077", "createdAt": "2020-01-09T03:38:46Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterator/ForEachTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMjgyMDM3", "url": "https://github.com/yegor256/cactoos/pull/1272#pullrequestreview-340282037", "createdAt": "2020-01-09T04:17:49Z", "commit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNDoxNzo0OVrOFbqkjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNDoxNzo0OVrOFbqkjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MzM1Ng==", "bodyText": "@ryoku Please change wrapped variable name to func", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364553356", "createdAt": "2020-01-09T04:17:49Z", "author": {"login": "fanifieiev"}, "path": "src/main/java/org/cactoos/iterator/ForEach.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import org.cactoos.Func;\n+import org.cactoos.Proc;\n+import org.cactoos.func.FuncOf;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.scalar.And;\n+\n+/**\n+ * Executes a {@link org.cactoos.Proc} for each element of an\n+ * {@link java.lang.Iterable}\n+ *\n+ * <p>\n+ * This class can be effectively used to iterate through a collection, just like\n+ * {@link java.util.stream.Stream#forEach(java.util.function.Consumer)} works:\n+ * </p>\n+ *\n+ * {@code\n+ * new ForEach(\n+ *    new ProcOf<>(input -> System.out.printf(\"\\'%s\\' \", input)),\n+ * ).execute(\n+ *    new IterableOf<>(\"Mary\", \"John\", \"William\", \"Napkin\")\n+ * ); // will print 'Mary' 'John' 'William' 'Napkin' to standard output\n+ * }\n+ * <p>\n+ * There is no thread-safety guarantee.\n+ *\n+ * @param <X> The type to itetare over\n+ * @since 0.44\n+ */\n+public final class ForEach<X> implements Proc<Iterable<X>> {\n+\n+    /**\n+     * The proc.\n+     */\n+    private final Func<X, Boolean> wrapped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMjgyMDg0", "url": "https://github.com/yegor256/cactoos/pull/1272#pullrequestreview-340282084", "createdAt": "2020-01-09T04:18:06Z", "commit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNDoxODowNlrOFbqkrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNDoxODowNlrOFbqkrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MzM4OA==", "bodyText": "@ryoku Please change wrapped variable name to func", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364553388", "createdAt": "2020-01-09T04:18:06Z", "author": {"login": "fanifieiev"}, "path": "src/main/java/org/cactoos/iterator/ForEachInThreads.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterator;\n+\n+import org.cactoos.Func;\n+import org.cactoos.Proc;\n+import org.cactoos.func.FuncOf;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.scalar.AndInThreads;\n+\n+/**\n+ * Executes a {@link org.cactoos.Proc} in a new Thread for each element of an\n+ * {@link java.lang.Iterable}\n+ *\n+ * <p>\n+ * This class can be effectively used to iterate through a collection, just like\n+ * {@link java.util.stream.Stream#forEach(java.util.function.Consumer)} works,\n+ * but with no guarantee on the output sorting:\n+ * </p>\n+ *\n+ * {@code\n+ * new ForEachInThreads(\n+ *    new ProcOf<>(input -> System.out.printf(\"\\'%s\\' \", input)),\n+ * ).execute(\n+ *    new IterableOf<>(\"Mary\", \"John\", \"William\", \"Napkin\")\n+ * ); // will print 'Mary' 'John' 'William' 'Napkin' to standard output. Sorting is not guaranteed.\n+ * }\n+ * <p>\n+ * There is no thread-safety guarantee.\n+ *\n+ * @param <X> The type to itetare over\n+ * @since 0.44\n+ */\n+public final class ForEachInThreads<X> implements Proc<Iterable<X>> {\n+\n+    /**\n+     * The proc.\n+     */\n+    private final Func<X, Boolean> wrapped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b80caffc3a76f173acf6c5617d3596b84bfdd65"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d92476ab8896570d110f7ed689e615c5fcb842d1", "author": {"user": {"login": "ryoku", "name": "Riccardo Ianniello"}}, "url": "https://github.com/yegor256/cactoos/commit/d92476ab8896570d110f7ed689e615c5fcb842d1", "committedDate": "2020-01-09T14:24:44Z", "message": "(#1226) Moved ForEach primitives to func package"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNjM1ODkw", "url": "https://github.com/yegor256/cactoos/pull/1272#pullrequestreview-340635890", "createdAt": "2020-01-09T16:10:26Z", "commit": {"oid": "d92476ab8896570d110f7ed689e615c5fcb842d1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNjoxMDoyNlrOFb7Qsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNjo1NTo0NlrOFb81IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNjgwMw==", "bodyText": "@ryoku Please change to input -> System.out.printf(", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364826803", "createdAt": "2020-01-09T16:10:26Z", "author": {"login": "fanifieiev"}, "path": "README.md", "diffHunk": "@@ -171,18 +171,19 @@ new And(\n         System.out.printf(\"Item: %s\\n\", input);\n       }\n     ),\n-    new IterableOf<>(\"how\", \"are\", \"you\")\n+    new IterableOf<>(\"how\", \"are\", \"you\", \"?\")\n   )\n ).value();\n ```\n \n Or even more compact:\n \n ```java\n-new And(\n-  (String input) -> System.out.printf(\"Item: %s\\n\", input),\n-  \"how\", \"are\", \"you\"\n-).value();\n+new ForEach<String>(\n+    (String input) -> System.out.printf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d92476ab8896570d110f7ed689e615c5fcb842d1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNzU0MQ==", "bodyText": "@ryoku Please change to list:add only", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364827541", "createdAt": "2020-01-09T16:11:45Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/func/ForEachTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.func;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.cactoos.Proc;\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+\n+/**\n+ * Test case for {@link ForEach}.\n+ *\n+ * @since 1.0\n+ * @checkstyle JavadocMethodCheck (500 lines)\n+ */\n+public class ForEachTest {\n+\n+    @Test\n+    public void testProcIterable() throws Exception {\n+        final List<Integer> list = new LinkedList<>();\n+        new ForEach<Integer>(\n+            (Proc<Integer>) list::add", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d92476ab8896570d110f7ed689e615c5fcb842d1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg1MTQxNQ==", "bodyText": "@ryoku Please move list to new line", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364851415", "createdAt": "2020-01-09T16:53:55Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/func/ForEachInThreadsTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.func;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.cactoos.list.ListOf;\n+import org.cactoos.list.Synced;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.collection.IsIterableContainingInAnyOrder;\n+import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.MatcherOf;\n+\n+/**\n+ * Test case for {@link ForEachInThreads}.\n+ *\n+ * @since 1.0\n+ * @checkstyle JavadocMethodCheck (500 lines)\n+ */\n+public class ForEachInThreadsTest {\n+\n+    @Test\n+    public void testProcIterable() throws Exception {\n+        final List<Integer> list = new Synced<>(\n+            new ArrayList<>(\n+                2\n+            )\n+        );\n+        new ForEachInThreads<Integer>(\n+            new ProcNoNulls<Integer>(\n+                list::add\n+            )\n+        ).exec(\n+            new ListOf<>(\n+                1, 2\n+            )\n+        );\n+        new Assertion<>(\n+            \"List does not contain mapped Iterable elements (1)\", list,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d92476ab8896570d110f7ed689e615c5fcb842d1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg1MjUxMg==", "bodyText": "@ryoku Please replace <Matcher<? super Integer>> with <>. It is redundant.", "url": "https://github.com/yegor256/cactoos/pull/1272#discussion_r364852512", "createdAt": "2020-01-09T16:55:46Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/func/ForEachInThreadsTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2019 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.func;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.cactoos.list.ListOf;\n+import org.cactoos.list.Synced;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.collection.IsIterableContainingInAnyOrder;\n+import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+import org.llorllale.cactoos.matchers.MatcherOf;\n+\n+/**\n+ * Test case for {@link ForEachInThreads}.\n+ *\n+ * @since 1.0\n+ * @checkstyle JavadocMethodCheck (500 lines)\n+ */\n+public class ForEachInThreadsTest {\n+\n+    @Test\n+    public void testProcIterable() throws Exception {\n+        final List<Integer> list = new Synced<>(\n+            new ArrayList<>(\n+                2\n+            )\n+        );\n+        new ForEachInThreads<Integer>(\n+            new ProcNoNulls<Integer>(\n+                list::add\n+            )\n+        ).exec(\n+            new ListOf<>(\n+                1, 2\n+            )\n+        );\n+        new Assertion<>(\n+            \"List does not contain mapped Iterable elements (1)\", list,\n+            new IsIterableContainingInAnyOrder<Integer>(\n+                new ListOf<Matcher<? super Integer>>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d92476ab8896570d110f7ed689e615c5fcb842d1"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNzc4NjMz", "url": "https://github.com/yegor256/cactoos/pull/1272#pullrequestreview-340778633", "createdAt": "2020-01-09T19:58:22Z", "commit": {"oid": "d92476ab8896570d110f7ed689e615c5fcb842d1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "790f943b43246e540b6011cfc08cd844932e5cc0", "author": {"user": {"login": "ryoku", "name": "Riccardo Ianniello"}}, "url": "https://github.com/yegor256/cactoos/commit/790f943b43246e540b6011cfc08cd844932e5cc0", "committedDate": "2020-01-09T23:48:39Z", "message": "(#1226) Removed redundant type declarations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwOTQ2NDA2", "url": "https://github.com/yegor256/cactoos/pull/1272#pullrequestreview-340946406", "createdAt": "2020-01-10T04:12:21Z", "commit": {"oid": "790f943b43246e540b6011cfc08cd844932e5cc0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 552, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}