{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1ODIyNjc5", "number": 1515, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMDo0NDoyNVrOFJaSiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMDo0NDoyNVrOFJaSiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDEyMjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/text/Abbreviated.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMDo0NDoyNVrOILvbMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDoyMzo1NFrOIL6mkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE4MjI1OA==", "bodyText": "@victornoel LengthOf could be used here.", "url": "https://github.com/yegor256/cactoos/pull/1515#discussion_r549182258", "createdAt": "2020-12-28T00:44:25Z", "author": {"login": "andreoss"}, "path": "src/main/java/org/cactoos/text/Abbreviated.java", "diffHunk": "@@ -80,32 +82,24 @@ public Abbreviated(final String text, final int max) {\n      * Ctor.\n      * @param text The Text\n      * @param max Max width of the result string\n-     * @todo #1287:30min Introduce `text.Flatten` that takes a `Scalar` of `Text`\n-     *  and call `value()` then `asString()` on it. Add some tests for it (including\n-     *  for `equals`). Then replace the code below by a composition of `text.Flatten`\n-     *  and `scalar.Ternary`. Then do the same for `PrefixOf` and `SuffixOf` using\n-     *  `text.Sub`.\n      */\n     public Abbreviated(final Text text, final int max) {\n         super(\n-            new TextOf(\n-                () -> {\n-                    final Text abbreviated;\n-                    if (text.asString().length() <= max) {\n-                        abbreviated = text;\n-                    } else {\n-                        abbreviated = new FormattedText(\n-                            \"%s%s\",\n-                            new Sub(\n-                                text,\n-                                0,\n-                                max - Abbreviated.ELLIPSES.length()\n-                            ).asString(),\n-                            Abbreviated.ELLIPSES\n-                        );\n-                    }\n-                    return abbreviated.asString();\n-                }\n+            new Flattened(\n+                new Ternary<>(\n+                    new ScalarOf<>(() -> new Sticky(text)),\n+                    (Text t) -> t.asString().length() <= max,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28d6e86c9a43019379979cace3da95493b202b8b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2NTM5NQ==", "bodyText": "@andreoss done, thx", "url": "https://github.com/yegor256/cactoos/pull/1515#discussion_r549365395", "createdAt": "2020-12-28T14:23:54Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/text/Abbreviated.java", "diffHunk": "@@ -80,32 +82,24 @@ public Abbreviated(final String text, final int max) {\n      * Ctor.\n      * @param text The Text\n      * @param max Max width of the result string\n-     * @todo #1287:30min Introduce `text.Flatten` that takes a `Scalar` of `Text`\n-     *  and call `value()` then `asString()` on it. Add some tests for it (including\n-     *  for `equals`). Then replace the code below by a composition of `text.Flatten`\n-     *  and `scalar.Ternary`. Then do the same for `PrefixOf` and `SuffixOf` using\n-     *  `text.Sub`.\n      */\n     public Abbreviated(final Text text, final int max) {\n         super(\n-            new TextOf(\n-                () -> {\n-                    final Text abbreviated;\n-                    if (text.asString().length() <= max) {\n-                        abbreviated = text;\n-                    } else {\n-                        abbreviated = new FormattedText(\n-                            \"%s%s\",\n-                            new Sub(\n-                                text,\n-                                0,\n-                                max - Abbreviated.ELLIPSES.length()\n-                            ).asString(),\n-                            Abbreviated.ELLIPSES\n-                        );\n-                    }\n-                    return abbreviated.asString();\n-                }\n+            new Flattened(\n+                new Ternary<>(\n+                    new ScalarOf<>(() -> new Sticky(text)),\n+                    (Text t) -> t.asString().length() <= max,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE4MjI1OA=="}, "originalCommit": {"oid": "28d6e86c9a43019379979cace3da95493b202b8b"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 781, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}