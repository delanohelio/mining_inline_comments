{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NTYyMTA4", "number": 1504, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowMjo1NlrOE3XxDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToxMTowMVrOE3X8Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk2NTI2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/ImmutableTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowMjo1NlrOHwrc4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTo1NjoyOVrOHwtVtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNTYwMA==", "bodyText": "@andreoss Please, use LengthOf instead of calling #size().", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520805600", "createdAt": "2020-11-10T19:02:56Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/ImmutableTest.java", "diffHunk": "@@ -48,8 +47,8 @@ void size() {\n             \"size() must be equals to original\",\n             new Immutable<>(\n                 new ListOf<>(1, 2)\n-            ),\n-            new HasSize(2)\n+            ).size(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzNjUzNA==", "bodyText": "@fabriciofx #size() is used explicitly for coverage, LengthOf  has the same problem as HasSize (i.e counting elements via #iterator())", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520836534", "createdAt": "2020-11-10T19:56:29Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/collection/ImmutableTest.java", "diffHunk": "@@ -48,8 +47,8 @@ void size() {\n             \"size() must be equals to original\",\n             new Immutable<>(\n                 new ListOf<>(1, 2)\n-            ),\n-            new HasSize(2)\n+            ).size(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNTYwMA=="}, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk3ODE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNjoyMFrOHwrlLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNjoyMFrOHwrlLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNzcyNg==", "bodyText": "@andreoss I think we must improve this message to something like Must behave as a no null collection\" to emphasize the no nulls capability. WDYT?", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520807726", "createdAt": "2020-11-10T19:06:20Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk3OTI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNjozN1rOHwrl0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNjozN1rOHwrl0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNzg5MA==", "bodyText": "@Andress the same above.", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520807890", "createdAt": "2020-11-10T19:06:37Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk4MDU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzowMlrOHwrmqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzowMlrOHwrmqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODEwNw==", "bodyText": "@Andress the same above.", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808107", "createdAt": "2020-11-10T19:07:02Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk4MTA5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzoxMVrOHwrnAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzoxMVrOHwrnAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODE5NQ==", "bodyText": "@Andress the same above.", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808195", "createdAt": "2020-11-10T19:07:11Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk4MTgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzoyNFrOHwrndQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzoyNFrOHwrndQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODMwOQ==", "bodyText": "@Andress the same above.", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808309", "createdAt": "2020-11-10T19:07:24Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk4Mjg3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzo0M1rOHwroHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzo0M1rOHwroHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODQ3OQ==", "bodyText": "@Andress the same above.", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808479", "createdAt": "2020-11-10T19:07:43Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",\n+            col,\n+            new IsEqual<>(new ListOf<>(1, 2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToAddNull() {\n+        new Assertion<>(\n+            \"Must throw exception when add NULL\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk4MzQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzo1MFrOHwrobA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzo1MFrOHwrobA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODU1Ng==", "bodyText": "@Andress the same above.", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808556", "createdAt": "2020-11-10T19:07:50Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",\n+            col,\n+            new IsEqual<>(new ListOf<>(1, 2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToAddNull() {\n+        new Assertion<>(\n+            \"Must throw exception when add NULL\",\n+            () -> new NoNulls<>(\n+                new ListOf<>(1, 3)\n+            ).add(null),\n+            new Throws<>(\n+                \"Item of #add(T) is NULL\",\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void removesAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.removeAll(new ListOf<>(1, null));\n+        new Assertion<>(\n+            \"Must have an item removed\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk4Mzg1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzo1N1rOHwroqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowNzo1N1rOHwroqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODYxOA==", "bodyText": "@Andress the same above.", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808618", "createdAt": "2020-11-10T19:07:57Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",\n+            col,\n+            new IsEqual<>(new ListOf<>(1, 2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToAddNull() {\n+        new Assertion<>(\n+            \"Must throw exception when add NULL\",\n+            () -> new NoNulls<>(\n+                new ListOf<>(1, 3)\n+            ).add(null),\n+            new Throws<>(\n+                \"Item of #add(T) is NULL\",\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void removesAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.removeAll(new ListOf<>(1, null));\n+        new Assertion<>(\n+            \"Must have an item removed\",\n+            col,\n+            new HasValues<>(2, 3)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void retainsAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        new Assertion<>(\n+            \"Must return false for the same collection\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk4NDI0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowODowN1rOHwro7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowODowN1rOHwro7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODY4Nw==", "bodyText": "@Andress the same above.", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808687", "createdAt": "2020-11-10T19:08:07Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",\n+            col,\n+            new IsEqual<>(new ListOf<>(1, 2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToAddNull() {\n+        new Assertion<>(\n+            \"Must throw exception when add NULL\",\n+            () -> new NoNulls<>(\n+                new ListOf<>(1, 3)\n+            ).add(null),\n+            new Throws<>(\n+                \"Item of #add(T) is NULL\",\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void removesAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.removeAll(new ListOf<>(1, null));\n+        new Assertion<>(\n+            \"Must have an item removed\",\n+            col,\n+            new HasValues<>(2, 3)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void retainsAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        new Assertion<>(\n+            \"Must return false for the same collection\",\n+            col.retainAll(new ListOf<>(1, 2, 3)),\n+            new IsNot<>(new IsTrue())\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void retainsAllWithNulls() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        new Assertion<>(\n+            \"Must return false for a different collection\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk4NDYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowODoxNVrOHwrpJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTowODoxNVrOHwrpJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODc0MQ==", "bodyText": "@Andress the same above.", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520808741", "createdAt": "2020-11-10T19:08:15Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+\n+    @Test\n+    void behavesAsCollection() {\n+        new Assertion<>(\n+            \"Must behave as collection\",\n+            new NoNulls<>(\n+                new ListOf<>(1)\n+            ),\n+            new BehavesAsCollection<>(1)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void hasToString() {\n+        new Assertion<>(\n+            \"Must have correct toString\",\n+            new NoNulls<>(\n+                new ListOf<>(1, 2, 3)\n+            ),\n+            new HasToString<>(\n+                new StringContainsInOrder(new IterableOf<>(\"1\", \"2\", \"3\"))\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void emptyWhenCleared() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.clear();\n+        new Assertion<>(\n+            \"Must be empty after #clear()\",\n+            col,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemRemoved() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.remove(1);\n+        new Assertion<>(\n+            \"Must have item removed\",\n+            col,\n+            new IsEqual<>(new ListOf<>(2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void whenItemAdded() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2)\n+        );\n+        col.add(3);\n+        new Assertion<>(\n+            \"Must have item added\",\n+            col,\n+            new IsEqual<>(new ListOf<>(1, 2, 3))\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToAddNull() {\n+        new Assertion<>(\n+            \"Must throw exception when add NULL\",\n+            () -> new NoNulls<>(\n+                new ListOf<>(1, 3)\n+            ).add(null),\n+            new Throws<>(\n+                \"Item of #add(T) is NULL\",\n+                IllegalStateException.class\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void removesAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        col.removeAll(new ListOf<>(1, null));\n+        new Assertion<>(\n+            \"Must have an item removed\",\n+            col,\n+            new HasValues<>(2, 3)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void retainsAll() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        new Assertion<>(\n+            \"Must return false for the same collection\",\n+            col.retainAll(new ListOf<>(1, 2, 3)),\n+            new IsNot<>(new IsTrue())\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void retainsAllWithNulls() {\n+        final Collection<Integer> col = new NoNulls<>(\n+            new ListOf<>(1, 2, 3)\n+        );\n+        new Assertion<>(\n+            \"Must return false for a different collection\",\n+            col.retainAll(new ListOf<>(1, null, 3)),\n+            new IsTrue()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    void throwsAtAttemptToRemoveNull() {\n+        new Assertion<>(\n+            \"Must throw exception when removing NULL\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk5NDAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToxMTowMVrOHwrvDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODoxNjowOFrOHxCucA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMDI1NQ==", "bodyText": "@andreoss Please, add a test to check a new NoNulls(new ListOf<>()) (a list already created empty).", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r520810255", "createdAt": "2020-11-10T19:11:01Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4NjkyOA==", "bodyText": "@fabriciofx Added", "url": "https://github.com/yegor256/cactoos/pull/1504#discussion_r521186928", "createdAt": "2020-11-11T08:16:08Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/collection/NoNullsTest.java", "diffHunk": "@@ -120,4 +130,145 @@ void throwsErrorIfNullInAddAll() {\n             )\n         ).affirm();\n     }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMDI1NQ=="}, "originalCommit": {"oid": "4f3a6cf2baa9819ae0382fbd5214dafeb6bb65e1"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 773, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}