{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNDg2NDIw", "number": 1436, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo0NzozOVrOEgpzmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1ODoyNlrOEgp2Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc0ODQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ImmutableTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo0NzozOVrOHNl0CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxMzozNTozN1rOHNpWdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzA2NA==", "bodyText": "@andreoss subList from who? Maybe you can be more explicit here.", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013064", "createdAt": "2020-09-06T02:47:39Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ImmutableTest.java", "diffHunk": "@@ -560,4 +560,30 @@ public void testToString() {\n             new IsEqual<>(new ListOf<>(\"a\", \"b\", \"c\").toString())\n         ).affirm();\n     }\n+\n+    @Test\n+    public void subListReturnsListIteratorWithSupportedSet() {\n+        new Assertion<>(\n+            \"subList.listIterator().set() must throw exception\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA3MTAyOA==", "bodyText": "@fabriciofx Done.", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484071028", "createdAt": "2020-09-06T13:35:37Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/list/ImmutableTest.java", "diffHunk": "@@ -560,4 +560,30 @@ public void testToString() {\n             new IsEqual<>(new ListOf<>(\"a\", \"b\", \"c\").toString())\n         ).affirm();\n     }\n+\n+    @Test\n+    public void subListReturnsListIteratorWithSupportedSet() {\n+        new Assertion<>(\n+            \"subList.listIterator().set() must throw exception\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzA2NA=="}, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1MDE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ImmutableTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1MDozOFrOHNl0wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxMzozNToyNFrOHNpWXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzI1MA==", "bodyText": "@andreoss please, fix ident here.", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013250", "createdAt": "2020-09-06T02:50:38Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ImmutableTest.java", "diffHunk": "@@ -560,4 +560,30 @@ public void testToString() {\n             new IsEqual<>(new ListOf<>(\"a\", \"b\", \"c\").toString())\n         ).affirm();\n     }\n+\n+    @Test\n+    public void subListReturnsListIteratorWithSupportedSet() {\n+        new Assertion<>(\n+            \"subList.listIterator().set() must throw exception\",\n+            () -> {\n+                final ListIterator<String> iterator = new Immutable<>(\n+                    new ListOf<String>(\"one\", \"two\", \"three\")\n+                )\n+                    .subList(0, 2)\n+                    .listIterator(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA3MTAwNA==", "bodyText": "@fabriciofx I believe the ident is fine, at least qulice does not allow it to be shifted either left or right here.", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484071004", "createdAt": "2020-09-06T13:35:24Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/list/ImmutableTest.java", "diffHunk": "@@ -560,4 +560,30 @@ public void testToString() {\n             new IsEqual<>(new ListOf<>(\"a\", \"b\", \"c\").toString())\n         ).affirm();\n     }\n+\n+    @Test\n+    public void subListReturnsListIteratorWithSupportedSet() {\n+        new Assertion<>(\n+            \"subList.listIterator().set() must throw exception\",\n+            () -> {\n+                final ListIterator<String> iterator = new Immutable<>(\n+                    new ListOf<String>(\"one\", \"two\", \"three\")\n+                )\n+                    .subList(0, 2)\n+                    .listIterator(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzI1MA=="}, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1MDcyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ImmutableTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1MToyN1rOHNl0_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxMzoyODo1OVrOHNpT0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzMwOQ==", "bodyText": "@andreoss ListIterator instead of List Iterator", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013309", "createdAt": "2020-09-06T02:51:27Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ImmutableTest.java", "diffHunk": "@@ -560,4 +560,30 @@ public void testToString() {\n             new IsEqual<>(new ListOf<>(\"a\", \"b\", \"c\").toString())\n         ).affirm();\n     }\n+\n+    @Test\n+    public void subListReturnsListIteratorWithSupportedSet() {\n+        new Assertion<>(\n+            \"subList.listIterator().set() must throw exception\",\n+            () -> {\n+                final ListIterator<String> iterator = new Immutable<>(\n+                    new ListOf<String>(\"one\", \"two\", \"three\")\n+                )\n+                    .subList(0, 2)\n+                    .listIterator(0);\n+                iterator.next();\n+                iterator.set(\"zero\");\n+                return new Object();\n+            },\n+            new Throws<>(\n+                new MatcherOf<>(\n+                    (String msg) -> msg.equals(\n+                        \"List Iterator is read-only and doesn't allow rewriting items\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA3MDM1Mw==", "bodyText": "@fabriciofx It's the exception message that comes from ImmutableListIterator.\nThe space indeed seems unnecessary here.", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484070353", "createdAt": "2020-09-06T13:28:59Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/list/ImmutableTest.java", "diffHunk": "@@ -560,4 +560,30 @@ public void testToString() {\n             new IsEqual<>(new ListOf<>(\"a\", \"b\", \"c\").toString())\n         ).affirm();\n     }\n+\n+    @Test\n+    public void subListReturnsListIteratorWithSupportedSet() {\n+        new Assertion<>(\n+            \"subList.listIterator().set() must throw exception\",\n+            () -> {\n+                final ListIterator<String> iterator = new Immutable<>(\n+                    new ListOf<String>(\"one\", \"two\", \"three\")\n+                )\n+                    .subList(0, 2)\n+                    .listIterator(0);\n+                iterator.next();\n+                iterator.set(\"zero\");\n+                return new Object();\n+            },\n+            new Throws<>(\n+                new MatcherOf<>(\n+                    (String msg) -> msg.equals(\n+                        \"List Iterator is read-only and doesn't allow rewriting items\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzMwOQ=="}, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1MTE4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1MjoyM1rOHNl1NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxMzozNTo1MlrOHNpWiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzM2NQ==", "bodyText": "@andreoss Which must be empty? Please, add more detail here.", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013365", "createdAt": "2020-09-06T02:52:23Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA3MTA1MQ==", "bodyText": "@fabriciofx Done", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484071051", "createdAt": "2020-09-06T13:35:52Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzM2NQ=="}, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1MTY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1MzoyMVrOHNl1cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1MzoyMVrOHNl1cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzQyNg==", "bodyText": "@andreoss Return corrent index of what? Please, add more detail here.", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013426", "createdAt": "2020-09-06T02:53:21Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",\n+            list,\n+            new IsEmptyCollection<>()\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedAdd() {\n+    @Test\n+    public void indexOfIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n+        new Assertion<>(\n+            \"must return corrent index\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1MjEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1NDoxOVrOHNl1pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0MjoxM1rOHN4btw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzQ3Ng==", "bodyText": "@andreoss Must be empty? Is it really correct?", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013476", "createdAt": "2020-09-06T02:54:19Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",\n+            list,\n+            new IsEmptyCollection<>()\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedAdd() {\n+    @Test\n+    public void indexOfIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n+        new Assertion<>(\n+            \"must return corrent index\",\n+            list.indexOf(\"one\"),\n+            new IsEqual<>(0)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void removeIsNotSupported() {\n+    @Test\n+    public void addAllIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.remove(0);\n+        list.addAll(0, new StringList(\"two\"));\n+        new Assertion<>(\n+            \"must be empty\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxODEzNQ==", "bodyText": "@andreoss what about this?", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484318135", "createdAt": "2020-09-07T09:42:13Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",\n+            list,\n+            new IsEmptyCollection<>()\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedAdd() {\n+    @Test\n+    public void indexOfIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n+        new Assertion<>(\n+            \"must return corrent index\",\n+            list.indexOf(\"one\"),\n+            new IsEqual<>(0)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void removeIsNotSupported() {\n+    @Test\n+    public void addAllIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.remove(0);\n+        list.addAll(0, new StringList(\"two\"));\n+        new Assertion<>(\n+            \"must be empty\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzQ3Ng=="}, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1MjM0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1NDo0NFrOHNl1uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1NDo0NFrOHNl1uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzQ5OQ==", "bodyText": "@andreoss Which value must be changed? Please, add more detail here.", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013499", "createdAt": "2020-09-06T02:54:44Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",\n+            list,\n+            new IsEmptyCollection<>()\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedAdd() {\n+    @Test\n+    public void indexOfIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n+        new Assertion<>(\n+            \"must return corrent index\",\n+            list.indexOf(\"one\"),\n+            new IsEqual<>(0)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void removeIsNotSupported() {\n+    @Test\n+    public void addAllIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.remove(0);\n+        list.addAll(0, new StringList(\"two\"));\n+        new Assertion<>(\n+            \"must be empty\",\n+            list,\n+            new IsEqual<>(new ListOf<>(\"two\", \"one\"))\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void setIsNotSupported() {\n+    @Test\n+    public void setIsDelegatedToTheOriginal() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.set(0, \"zero\");\n+        new Assertion<>(\n+            \"value must be changed\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1Mzg2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1Njo1MVrOHNl2cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1Njo1MVrOHNl2cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzY4MA==", "bodyText": "@andreoss Please, add more detail in this assertion message (as explained before).", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013680", "createdAt": "2020-09-06T02:56:51Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",\n+            list,\n+            new IsEmptyCollection<>()\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedAdd() {\n+    @Test\n+    public void indexOfIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n+        new Assertion<>(\n+            \"must return corrent index\",\n+            list.indexOf(\"one\"),\n+            new IsEqual<>(0)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void removeIsNotSupported() {\n+    @Test\n+    public void addAllIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.remove(0);\n+        list.addAll(0, new StringList(\"two\"));\n+        new Assertion<>(\n+            \"must be empty\",\n+            list,\n+            new IsEqual<>(new ListOf<>(\"two\", \"one\"))\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void setIsNotSupported() {\n+    @Test\n+    public void setIsDelegatedToTheOriginal() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.set(0, \"zero\");\n+        new Assertion<>(\n+            \"value must be changed\",\n+            list,\n+            new HasValues<>(\"zero\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addIsNotSupported() {\n+    @Test\n+    public void addIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.add(\"two\");\n+        new Assertion<>(\n+            \"value must be added\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1Mzg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1Njo1OVrOHNl2cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1Njo1OVrOHNl2cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzY4Mw==", "bodyText": "@andreoss Please, add more detail in this assertion message (as explained before).", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013683", "createdAt": "2020-09-06T02:56:59Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",\n+            list,\n+            new IsEmptyCollection<>()\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedAdd() {\n+    @Test\n+    public void indexOfIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n+        new Assertion<>(\n+            \"must return corrent index\",\n+            list.indexOf(\"one\"),\n+            new IsEqual<>(0)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void removeIsNotSupported() {\n+    @Test\n+    public void addAllIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.remove(0);\n+        list.addAll(0, new StringList(\"two\"));\n+        new Assertion<>(\n+            \"must be empty\",\n+            list,\n+            new IsEqual<>(new ListOf<>(\"two\", \"one\"))\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void setIsNotSupported() {\n+    @Test\n+    public void setIsDelegatedToTheOriginal() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.set(0, \"zero\");\n+        new Assertion<>(\n+            \"value must be changed\",\n+            list,\n+            new HasValues<>(\"zero\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addIsNotSupported() {\n+    @Test\n+    public void addIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.add(\"two\");\n+        new Assertion<>(\n+            \"value must be added\",\n+            list,\n+            new HasValues<>(\"one\", \"two\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsSubListWithUnsupportedRemove() {\n+    public void returnsSubListWithRemove() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.subList(0, 1).remove(0);\n+        new Assertion<>(\n+            \"must be empty after removal\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1NDMwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1Nzo0NVrOHNl2pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1Nzo0NVrOHNl2pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzczMw==", "bodyText": "@andreoss List().subList().set()", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013733", "createdAt": "2020-09-06T02:57:45Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",\n+            list,\n+            new IsEmptyCollection<>()\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedAdd() {\n+    @Test\n+    public void indexOfIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n+        new Assertion<>(\n+            \"must return corrent index\",\n+            list.indexOf(\"one\"),\n+            new IsEqual<>(0)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void removeIsNotSupported() {\n+    @Test\n+    public void addAllIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.remove(0);\n+        list.addAll(0, new StringList(\"two\"));\n+        new Assertion<>(\n+            \"must be empty\",\n+            list,\n+            new IsEqual<>(new ListOf<>(\"two\", \"one\"))\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void setIsNotSupported() {\n+    @Test\n+    public void setIsDelegatedToTheOriginal() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.set(0, \"zero\");\n+        new Assertion<>(\n+            \"value must be changed\",\n+            list,\n+            new HasValues<>(\"zero\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addIsNotSupported() {\n+    @Test\n+    public void addIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.add(\"two\");\n+        new Assertion<>(\n+            \"value must be added\",\n+            list,\n+            new HasValues<>(\"one\", \"two\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsSubListWithUnsupportedRemove() {\n+    public void returnsSubListWithRemove() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.subList(0, 1).remove(0);\n+        new Assertion<>(\n+            \"must be empty after removal\",\n+            list,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n     }\n \n-    @Test()\n+    @Test\n     public void returnsSubListWithSupportedSet() {\n+        final List<String> list = new StringList(\"one\");\n+        list.subList(0, 1).set(0, \"zero\");\n         new Assertion<>(\n-            \"subList.set() must throw exception\",\n-            () -> new StringList(\"one\").subList(0, 1).set(0, \"zero\"),\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\"#set(): the list is read-only\")\n-                ),\n-                UnsupportedOperationException.class\n+            \"subList.set() must change the original list\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1NDQ3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1ODowMVrOHNl2uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1ODowMVrOHNl2uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzc1Mg==", "bodyText": "@andreoss Please, add more detail in this assertion message (as explained before).", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013752", "createdAt": "2020-09-06T02:58:01Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",\n+            list,\n+            new IsEmptyCollection<>()\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedAdd() {\n+    @Test\n+    public void indexOfIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n+        new Assertion<>(\n+            \"must return corrent index\",\n+            list.indexOf(\"one\"),\n+            new IsEqual<>(0)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void removeIsNotSupported() {\n+    @Test\n+    public void addAllIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.remove(0);\n+        list.addAll(0, new StringList(\"two\"));\n+        new Assertion<>(\n+            \"must be empty\",\n+            list,\n+            new IsEqual<>(new ListOf<>(\"two\", \"one\"))\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void setIsNotSupported() {\n+    @Test\n+    public void setIsDelegatedToTheOriginal() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.set(0, \"zero\");\n+        new Assertion<>(\n+            \"value must be changed\",\n+            list,\n+            new HasValues<>(\"zero\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addIsNotSupported() {\n+    @Test\n+    public void addIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.add(\"two\");\n+        new Assertion<>(\n+            \"value must be added\",\n+            list,\n+            new HasValues<>(\"one\", \"two\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsSubListWithUnsupportedRemove() {\n+    public void returnsSubListWithRemove() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.subList(0, 1).remove(0);\n+        new Assertion<>(\n+            \"must be empty after removal\",\n+            list,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n     }\n \n-    @Test()\n+    @Test\n     public void returnsSubListWithSupportedSet() {\n+        final List<String> list = new StringList(\"one\");\n+        list.subList(0, 1).set(0, \"zero\");\n         new Assertion<>(\n-            \"subList.set() must throw exception\",\n-            () -> new StringList(\"one\").subList(0, 1).set(0, \"zero\"),\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\"#set(): the list is read-only\")\n-                ),\n-                UnsupportedOperationException.class\n+            \"subList.set() must change the original list\",\n+            list,\n+            new HasValues<>(\n+                \"zero\"\n             )\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsSubListWithUnsupportedAdd() {\n+    @Test\n+    public void addsAtGivenIndex() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.subList(0, 1).add(\"two\");\n+        list.add(0, \"two\");\n+        new Assertion<>(\n+            \"must add value\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1NDUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1ODoxN1rOHNl2vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1ODoxN1rOHNl2vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzc1OQ==", "bodyText": "@andreoss Please, add more detail in this assertion message (as explained before).", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013759", "createdAt": "2020-09-06T02:58:17Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",\n+            list,\n+            new IsEmptyCollection<>()\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedAdd() {\n+    @Test\n+    public void indexOfIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n+        new Assertion<>(\n+            \"must return corrent index\",\n+            list.indexOf(\"one\"),\n+            new IsEqual<>(0)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void removeIsNotSupported() {\n+    @Test\n+    public void addAllIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.remove(0);\n+        list.addAll(0, new StringList(\"two\"));\n+        new Assertion<>(\n+            \"must be empty\",\n+            list,\n+            new IsEqual<>(new ListOf<>(\"two\", \"one\"))\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void setIsNotSupported() {\n+    @Test\n+    public void setIsDelegatedToTheOriginal() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.set(0, \"zero\");\n+        new Assertion<>(\n+            \"value must be changed\",\n+            list,\n+            new HasValues<>(\"zero\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addIsNotSupported() {\n+    @Test\n+    public void addIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.add(\"two\");\n+        new Assertion<>(\n+            \"value must be added\",\n+            list,\n+            new HasValues<>(\"one\", \"two\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsSubListWithUnsupportedRemove() {\n+    public void returnsSubListWithRemove() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.subList(0, 1).remove(0);\n+        new Assertion<>(\n+            \"must be empty after removal\",\n+            list,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n     }\n \n-    @Test()\n+    @Test\n     public void returnsSubListWithSupportedSet() {\n+        final List<String> list = new StringList(\"one\");\n+        list.subList(0, 1).set(0, \"zero\");\n         new Assertion<>(\n-            \"subList.set() must throw exception\",\n-            () -> new StringList(\"one\").subList(0, 1).set(0, \"zero\"),\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\"#set(): the list is read-only\")\n-                ),\n-                UnsupportedOperationException.class\n+            \"subList.set() must change the original list\",\n+            list,\n+            new HasValues<>(\n+                \"zero\"\n             )\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsSubListWithUnsupportedAdd() {\n+    @Test\n+    public void addsAtGivenIndex() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.subList(0, 1).add(\"two\");\n+        list.add(0, \"two\");\n+        new Assertion<>(\n+            \"must add value\",\n+            list,\n+            new HasValues<>(\"two\")\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void getsAtGivenIndex() {\n+        final ListEnvelope<String> list = new StringList(\"one\");\n+        new Assertion<>(\n+            \"must add value\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjc1NDYzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1ODoyNlrOHNl2zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwMjo1ODoyNlrOHNl2zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxMzc3Mw==", "bodyText": "@andreoss Please, add more detail in this assertion message (as explained before).", "url": "https://github.com/yegor256/cactoos/pull/1436#discussion_r484013773", "createdAt": "2020-09-06T02:58:26Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/list/ListEnvelopeTest.java", "diffHunk": "@@ -73,97 +61,113 @@ public void returnsListIteratorWithSupportedSet() {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsListIteratorWithUnsupportedAdd() {\n-        final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedRemove() {\n+    @Test\n+    public void removeIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final Iterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.remove();\n-    }\n-\n-    @Test()\n-    public void subListReturnsListIteratorWithSupportedSet() {\n+        list.remove(0);\n         new Assertion<>(\n-            \"subList.listIterator().set() must throw exception\",\n-            () -> {\n-                final ListIterator<String> iterator = new StringList(\"one\", \"two\", \"three\")\n-                    .subList(0, 2)\n-                    .listIterator(0);\n-                iterator.next();\n-                iterator.set(\"zero\");\n-                return new Object();\n-            },\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\n-                        \"List Iterator is read-only and doesn't allow rewriting items\"\n-                    )\n-                ),\n-                UnsupportedOperationException.class\n-            )\n+            \"must be empty\",\n+            list,\n+            new IsEmptyCollection<>()\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void subListReturnsListIteratorWithUnsupportedAdd() {\n+    @Test\n+    public void indexOfIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        final ListIterator<String> iterator = list.subList(0, 1)\n-            .listIterator();\n-        iterator.next();\n-        iterator.add(\"two\");\n+        new Assertion<>(\n+            \"must return corrent index\",\n+            list.indexOf(\"one\"),\n+            new IsEqual<>(0)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void removeIsNotSupported() {\n+    @Test\n+    public void addAllIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.remove(0);\n+        list.addAll(0, new StringList(\"two\"));\n+        new Assertion<>(\n+            \"must be empty\",\n+            list,\n+            new IsEqual<>(new ListOf<>(\"two\", \"one\"))\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void setIsNotSupported() {\n+    @Test\n+    public void setIsDelegatedToTheOriginal() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.set(0, \"zero\");\n+        new Assertion<>(\n+            \"value must be changed\",\n+            list,\n+            new HasValues<>(\"zero\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addIsNotSupported() {\n+    @Test\n+    public void addIsDelegated() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.add(\"two\");\n+        new Assertion<>(\n+            \"value must be added\",\n+            list,\n+            new HasValues<>(\"one\", \"two\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsSubListWithUnsupportedRemove() {\n+    public void returnsSubListWithRemove() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n         list.subList(0, 1).remove(0);\n+        new Assertion<>(\n+            \"must be empty after removal\",\n+            list,\n+            new IsEmptyCollection<>()\n+        ).affirm();\n     }\n \n-    @Test()\n+    @Test\n     public void returnsSubListWithSupportedSet() {\n+        final List<String> list = new StringList(\"one\");\n+        list.subList(0, 1).set(0, \"zero\");\n         new Assertion<>(\n-            \"subList.set() must throw exception\",\n-            () -> new StringList(\"one\").subList(0, 1).set(0, \"zero\"),\n-            new Throws<>(\n-                new MatcherOf<>(\n-                    (String msg) -> msg.equals(\"#set(): the list is read-only\")\n-                ),\n-                UnsupportedOperationException.class\n+            \"subList.set() must change the original list\",\n+            list,\n+            new HasValues<>(\n+                \"zero\"\n             )\n         ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void returnsSubListWithUnsupportedAdd() {\n+    @Test\n+    public void addsAtGivenIndex() {\n         final ListEnvelope<String> list = new StringList(\"one\");\n-        list.subList(0, 1).add(\"two\");\n+        list.add(0, \"two\");\n+        new Assertion<>(\n+            \"must add value\",\n+            list,\n+            new HasValues<>(\"two\")\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void getsAtGivenIndex() {\n+        final ListEnvelope<String> list = new StringList(\"one\");\n+        new Assertion<>(\n+            \"must add value\",\n+            list.get(0),\n+            new IsEqual<>(\"one\")\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void getsLastIndexOfValue() {\n+        final ListEnvelope<String> list = new StringList(\"one\");\n+        list.add(1, \"one\");\n+        new Assertion<>(\n+            \"must be last index\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7bb832c9ab1961f2c1236df903b8f7c9fe4f48"}, "originalPosition": 215}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 754, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}