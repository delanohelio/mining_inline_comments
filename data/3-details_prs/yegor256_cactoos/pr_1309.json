{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTEwODgy", "number": 1309, "title": "(#1291) Joined list can be mutable", "bodyText": "This PR is for #1291", "createdAt": "2020-02-19T00:58:31Z", "url": "https://github.com/yegor256/cactoos/pull/1309", "merged": true, "mergeCommit": {"oid": "cf51816c768c9be76d8d81d3be59139bdc396f97"}, "closed": true, "closedAt": "2020-02-27T16:32:03Z", "author": {"login": "fanifieiev"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFry0qAH2gAyMzc2OTEwODgyOjU4Yjc2ZDcxNzA0ZTcyNTE5N2UxNTVmOTVhZTFkNjQ0YjM0OWQ2MWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcId1HCAFqTM2NTgwMDY4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "58b76d71704e725197e155f95ae1d644b349d61c", "author": {"user": {"login": "fanifieiev", "name": "Fevzi Anifieiev"}}, "url": "https://github.com/yegor256/cactoos/commit/58b76d71704e725197e155f95ae1d644b349d61c", "committedDate": "2020-02-19T00:57:08Z", "message": "(#1291) Joined list can be mutable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6f0257680c96379c6f220a1fb802c06f7f9cc14", "author": {"user": {"login": "fanifieiev", "name": "Fevzi Anifieiev"}}, "url": "https://github.com/yegor256/cactoos/commit/f6f0257680c96379c6f220a1fb802c06f7f9cc14", "committedDate": "2020-02-19T01:17:31Z", "message": "(#1291) Removed todo decription"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDA1NDE4", "url": "https://github.com/yegor256/cactoos/pull/1309#pullrequestreview-363005418", "createdAt": "2020-02-22T03:04:49Z", "commit": {"oid": "f6f0257680c96379c6f220a1fb802c06f7f9cc14"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMzowNDo1MFrOFtJLbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMzoxMDo0N1rOFtJM3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDYyMw==", "bodyText": "@fanifieiev Please put the values used in the tests into constants, to avoid this supression", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880623", "createdAt": "2020-02-22T03:04:50Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -34,8 +36,9 @@\n  * @since 0.20\n  * @checkstyle JavadocMethodCheck (500 lines)\n  * @checkstyle MagicNumber (500 line)\n+ * @checkstyle DiamondOperatorCheck (500 lines)\n  */\n-@SuppressWarnings(\"PMD.TooManyMethods\")\n+@SuppressWarnings({\"PMD.TooManyMethods\", \"PMD.AvoidDuplicateLiterals\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f0257680c96379c6f220a1fb802c06f7f9cc14"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDc1MQ==", "bodyText": "@fanifieiev It is better to assure if the new list was properly joined by looking into its elements than just counting them in this case", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880751", "createdAt": "2020-02-22T03:06:31Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -96,24 +99,31 @@ public void iterator() throws Exception {\n     }\n \n     @Test\n-    public void toArray() throws Exception {\n-        MatcherAssert.assertThat(\n-            new Joined<Integer>(\n-                new ListOf<>(11, 12),\n-                new ListOf<>(13, 14)\n-            ).toArray(),\n-            new IsEqual<>(new ListOf<>(11, 12, 13, 14).toArray())\n-        );\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n     public void add() throws Exception {\n-        new Joined<String>(new ListOf<String>(\"add0\")).add(\"new add0\");\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.add(\"Three\");\n+        new Assertion<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f0257680c96379c6f220a1fb802c06f7f9cc14"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDc5Mw==", "bodyText": "@fanifieiev Here we should also test for the list values, not for its size", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880793", "createdAt": "2020-02-22T03:07:20Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -96,24 +99,31 @@ public void iterator() throws Exception {\n     }\n \n     @Test\n-    public void toArray() throws Exception {\n-        MatcherAssert.assertThat(\n-            new Joined<Integer>(\n-                new ListOf<>(11, 12),\n-                new ListOf<>(13, 14)\n-            ).toArray(),\n-            new IsEqual<>(new ListOf<>(11, 12, 13, 14).toArray())\n-        );\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n     public void add() throws Exception {\n-        new Joined<String>(new ListOf<String>(\"add0\")).add(\"new add0\");\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.add(\"Three\");\n+        new Assertion<>(\n+            \"must be able to add element specified\",\n+            joined.size(),\n+            new IsEqual<>(3)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void remove() throws Exception {\n-        new Joined<String>(new ListOf<String>(\"remove\")).remove(\"new remove\");\n+        final List<String> joined = new Joined<String>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f0257680c96379c6f220a1fb802c06f7f9cc14"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDg2Ng==", "bodyText": "@fanifieiev This one is a little bit trickier: first, I think that we should add a list with more than one element to get certain that we are effectively joining two lists; also, we should check for the elements, not just the size", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880866", "createdAt": "2020-02-22T03:08:37Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -129,35 +139,83 @@ public void containsAll() throws Exception {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void addAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll\")\n-        ).addAll(new ListOf<>(\"new addAll\"));\n+        final List<String> joined = new Joined<String>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f0257680c96379c6f220a1fb802c06f7f9cc14"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDkyMQ==", "bodyText": "@fanifieiev Here also: better all the elements to see if they are the correct order", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880921", "createdAt": "2020-02-22T03:09:40Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -129,35 +139,83 @@ public void containsAll() throws Exception {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void addAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll\")\n-        ).addAll(new ListOf<>(\"new addAll\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.addAll(\n+            new ListOf<>(\"Three\")\n+        );\n+        new Assertion<>(\n+            \"must be able to addAll elements specified\",\n+            joined.get(2),\n+            new IsEqual<>(\"Three\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addAllSecond() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll1\")\n-        ).addAll(22, new ListOf<>(\"new addAll1\"));\n+    @Test\n+    public void addAllInFront() throws Exception {\n+        final List<String> joined = new Joined<String>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f0257680c96379c6f220a1fb802c06f7f9cc14"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDk2MQ==", "bodyText": "@fanifieiev Here too, let's check the resulting list", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880961", "createdAt": "2020-02-22T03:10:09Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -129,35 +139,83 @@ public void containsAll() throws Exception {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void addAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll\")\n-        ).addAll(new ListOf<>(\"new addAll\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.addAll(\n+            new ListOf<>(\"Three\")\n+        );\n+        new Assertion<>(\n+            \"must be able to addAll elements specified\",\n+            joined.get(2),\n+            new IsEqual<>(\"Three\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addAllSecond() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll1\")\n-        ).addAll(22, new ListOf<>(\"new addAll1\"));\n+    @Test\n+    public void addAllInFront() throws Exception {\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.addAll(\n+            0,\n+            new ListOf<>(\"Three\")\n+        );\n+        new Assertion<>(\n+            \"must be able to addAll elements specified\",\n+            joined.get(0),\n+            new IsEqual<>(\"Three\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void removeAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"removeAll\")\n-        ).removeAll(new ListOf<>(\"new removeAll\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.removeAll(\n+            new ListOf<>(\"Two\")\n+        );\n+        new Assertion<>(\n+            \"must be able to removeAll elements specified\",\n+            joined.size(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f0257680c96379c6f220a1fb802c06f7f9cc14"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDk4OA==", "bodyText": "@fanifieiev Check the list elements here too, please", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880988", "createdAt": "2020-02-22T03:10:47Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -129,35 +139,83 @@ public void containsAll() throws Exception {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void addAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll\")\n-        ).addAll(new ListOf<>(\"new addAll\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.addAll(\n+            new ListOf<>(\"Three\")\n+        );\n+        new Assertion<>(\n+            \"must be able to addAll elements specified\",\n+            joined.get(2),\n+            new IsEqual<>(\"Three\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addAllSecond() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll1\")\n-        ).addAll(22, new ListOf<>(\"new addAll1\"));\n+    @Test\n+    public void addAllInFront() throws Exception {\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.addAll(\n+            0,\n+            new ListOf<>(\"Three\")\n+        );\n+        new Assertion<>(\n+            \"must be able to addAll elements specified\",\n+            joined.get(0),\n+            new IsEqual<>(\"Three\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void removeAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"removeAll\")\n-        ).removeAll(new ListOf<>(\"new removeAll\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.removeAll(\n+            new ListOf<>(\"Two\")\n+        );\n+        new Assertion<>(\n+            \"must be able to removeAll elements specified\",\n+            joined.size(),\n+            new IsEqual<>(1)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void retainAll() throws Exception {\n-        new Joined<String>().retainAll(new ListOf<>(\"retain\", \"All\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\", \"Three\")\n+        );\n+        joined.retainAll(\n+            new ListOf<>(\"One\", \"Two\")\n+        );\n+        new Assertion<>(\n+            \"must be able to retain all\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f0257680c96379c6f220a1fb802c06f7f9cc14"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9700ed2e8aea8f4a3a9689fb0a3cd1edce473aae", "author": {"user": {"login": "fanifieiev", "name": "Fevzi Anifieiev"}}, "url": "https://github.com/yegor256/cactoos/commit/9700ed2e8aea8f4a3a9689fb0a3cd1edce473aae", "committedDate": "2020-02-24T02:48:17Z", "message": "(#1291) After review test fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8abb2f4108ef2a22a251bbe4b250dbed672845ff", "author": {"user": {"login": "fanifieiev", "name": "Fevzi Anifieiev"}}, "url": "https://github.com/yegor256/cactoos/commit/8abb2f4108ef2a22a251bbe4b250dbed672845ff", "committedDate": "2020-02-24T03:02:37Z", "message": "(#1291) After review test fixes, attempt 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e22c82143d1745d975298a3d0eb6342da7af749d", "author": {"user": {"login": "fanifieiev", "name": "Fevzi Anifieiev"}}, "url": "https://github.com/yegor256/cactoos/commit/e22c82143d1745d975298a3d0eb6342da7af749d", "committedDate": "2020-02-24T03:12:39Z", "message": "(#1291) After review test fixes, attempt 3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODAwNjg0", "url": "https://github.com/yegor256/cactoos/pull/1309#pullrequestreview-365800684", "createdAt": "2020-02-27T16:22:44Z", "commit": {"oid": "e22c82143d1745d975298a3d0eb6342da7af749d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 558, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}