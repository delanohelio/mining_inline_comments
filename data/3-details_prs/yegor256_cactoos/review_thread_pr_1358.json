{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODQ4OTE0", "number": 1358, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODoxOToxNVrOD3FFAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwODo0NTo0NlrOD4oufg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDgxNDc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODoxOToxNVrOGNIZFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDoyNDoxN1rOGNNSYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQyMjE2NA==", "bodyText": "@lxpdd even though this seems technically correct (judging by the test), this is not well readable and maintainable. I propose to add a todo here to transform this code in something more object oriented. I'm not sure how though, but there must be more declarative solutions that that.", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r416422164", "createdAt": "2020-04-28T08:19:15Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -155,13 +155,13 @@ public boolean equals(final Object other) {\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n                         final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n-                            new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n-                            )\n-                        ).value();\n+                        final Iterator<X> ftr = this.iterator();\n+                        final Iterator<?> str = compared.iterator();\n+                        boolean failed = false;\n+                        while (ftr.hasNext() && str.hasNext() && (!failed)) {\n+                            failed = !ftr.next().equals(str.next());\n+                        }\n+                        return !failed && !ftr.hasNext() && !str.hasNext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91784509897858626f6ab11a7f0ba949de245599"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5Nzk2NQ==", "bodyText": "@victornoel True, I have another solution with Matched object, but I am not sure if it's correct.\nCould I create one more PR for the same issue?", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r416497965", "createdAt": "2020-04-28T10:17:01Z", "author": {"login": "lxpdd"}, "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -155,13 +155,13 @@ public boolean equals(final Object other) {\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n                         final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n-                            new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n-                            )\n-                        ).value();\n+                        final Iterator<X> ftr = this.iterator();\n+                        final Iterator<?> str = compared.iterator();\n+                        boolean failed = false;\n+                        while (ftr.hasNext() && str.hasNext() && (!failed)) {\n+                            failed = !ftr.next().equals(str.next());\n+                        }\n+                        return !failed && !ftr.hasNext() && !str.hasNext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQyMjE2NA=="}, "originalCommit": {"oid": "91784509897858626f6ab11a7f0ba949de245599"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwMjM2OA==", "bodyText": "@lxpdd you can simply modify this one I think. If you desire so, you can close this PR and open a new one, but there is no need IMHO.\nAlso can you edit your comment to specify who you are addressing in your comment as per Zerocracy policy: http://www.zerocracy.com/policy.html#42", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r416502368", "createdAt": "2020-04-28T10:24:17Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -155,13 +155,13 @@ public boolean equals(final Object other) {\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n                         final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n-                            new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n-                            )\n-                        ).value();\n+                        final Iterator<X> ftr = this.iterator();\n+                        final Iterator<?> str = compared.iterator();\n+                        boolean failed = false;\n+                        while (ftr.hasNext() && str.hasNext() && (!failed)) {\n+                            failed = !ftr.next().equals(str.next());\n+                        }\n+                        return !failed && !ftr.hasNext() && !str.hasNext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQyMjE2NA=="}, "originalCommit": {"oid": "91784509897858626f6ab11a7f0ba949de245599"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mjg4OTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoyMzowOVrOGNcaRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTozOToyNFrOGNoAtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1MDE1MA==", "bodyText": "@lxpdd in that case let's use ScalarWithFallback instead of Checked so that we don't have to handle the exception catching.", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r416750150", "createdAt": "2020-04-28T16:23:09Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -154,14 +158,22 @@ public boolean equals(final Object other) {\n                     () -> other != null,\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n-                        final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n-                            new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n-                            )\n-                        ).value();\n+                        final Iterable<X> compared = (Iterable<X>) other;\n+                        boolean equals;\n+                        try {\n+                            equals = new Checked<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570009949e156d040061d2c498ef8512e16a93ea"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0MDIxMg==", "bodyText": "@victornoel Thanks. That's what I've been looking for", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r416940212", "createdAt": "2020-04-28T21:39:24Z", "author": {"login": "lxpdd"}, "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -154,14 +158,22 @@ public boolean equals(final Object other) {\n                     () -> other != null,\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n-                        final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n-                            new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n-                            )\n-                        ).value();\n+                        final Iterable<X> compared = (Iterable<X>) other;\n+                        boolean equals;\n+                        try {\n+                            equals = new Checked<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1MDE1MA=="}, "originalCommit": {"oid": "570009949e156d040061d2c498ef8512e16a93ea"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjA2NzQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToxNDoyOVrOGN6LaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMjowNjo1NFrOGPW9-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNzg2NA==", "bodyText": "@lxpdd I think you can use directly true and false, no need to go through an extra layer of indirection", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r417237864", "createdAt": "2020-04-29T11:14:29Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -154,12 +159,20 @@ public boolean equals(final Object other) {\n                     () -> other != null,\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n-                        final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n+                        final Iterable<X> compared = (Iterable<X>) other;\n+                        return new ScalarWithFallback<>(\n                             new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n+                                (X value) -> new True().value(),\n+                                new Matched<>(\n+                                    this,\n+                                    compared\n+                                )\n+                            ),\n+                            new IterableOf<>(\n+                                new FallbackFrom<>(\n+                                    IllegalStateException.class,\n+                                    ex -> new False().value()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7584ff817093dee60d1a8cb19eb9707c623577d5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1ODEzNg==", "bodyText": "@victornoel Yes, I missed that comment. I will fix it.", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r418758136", "createdAt": "2020-05-01T22:06:54Z", "author": {"login": "lxpdd"}, "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -154,12 +159,20 @@ public boolean equals(final Object other) {\n                     () -> other != null,\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n-                        final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n+                        final Iterable<X> compared = (Iterable<X>) other;\n+                        return new ScalarWithFallback<>(\n                             new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n+                                (X value) -> new True().value(),\n+                                new Matched<>(\n+                                    this,\n+                                    compared\n+                                )\n+                            ),\n+                            new IterableOf<>(\n+                                new FallbackFrom<>(\n+                                    IllegalStateException.class,\n+                                    ex -> new False().value()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNzg2NA=="}, "originalCommit": {"oid": "7584ff817093dee60d1a8cb19eb9707c623577d5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzE0MTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwODo0NTo0NlrOGPhmkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNDo0MjoxOVrOGPsouQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMjM2OA==", "bodyText": "@lxpdd sorry, I just realized there is something strange here, I don't see how that would implement equals, can you add 2 tests of equals for iterables of equal length : one when the two iterables are equals, and one when they are not?", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r418932368", "createdAt": "2020-05-02T08:45:46Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -154,12 +159,20 @@ public boolean equals(final Object other) {\n                     () -> other != null,\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n-                        final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n+                        final Iterable<X> compared = (Iterable<X>) other;\n+                        return new ScalarWithFallback<>(\n                             new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n+                                (X value) -> true,\n+                                new Matched<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0603544522c762faf5b42faf2fb1930314500749"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExMTYxMg==", "bodyText": "@victornoel\nThere is two tests that cover it:\nnotEqualsToIterableWithDifferentElements comparing iterables (1, 2) and (1,0) and\nisEqualToIterableWithTheSameElements comparing iterables (1,2) and (1,2)", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r419111612", "createdAt": "2020-05-03T14:30:11Z", "author": {"login": "lxpdd"}, "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -154,12 +159,20 @@ public boolean equals(final Object other) {\n                     () -> other != null,\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n-                        final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n+                        final Iterable<X> compared = (Iterable<X>) other;\n+                        return new ScalarWithFallback<>(\n                             new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n+                                (X value) -> true,\n+                                new Matched<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMjM2OA=="}, "originalCommit": {"oid": "0603544522c762faf5b42faf2fb1930314500749"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExMzE0NQ==", "bodyText": "@lxpdd ok, thanks, I re-read the code from Matched and now I understand the logical mistake I made, all is good :) thx!", "url": "https://github.com/yegor256/cactoos/pull/1358#discussion_r419113145", "createdAt": "2020-05-03T14:42:19Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/iterable/IterableOf.java", "diffHunk": "@@ -154,12 +159,20 @@ public boolean equals(final Object other) {\n                     () -> other != null,\n                     () -> Iterable.class.isAssignableFrom(other.getClass()),\n                     () -> {\n-                        final Iterable<?> compared = (Iterable<?>) other;\n-                        final Iterator<?> iterator = compared.iterator();\n-                        return new Unchecked<>(\n+                        final Iterable<X> compared = (Iterable<X>) other;\n+                        return new ScalarWithFallback<>(\n                             new And(\n-                                (X input) -> input.equals(iterator.next()),\n-                                this\n+                                (X value) -> true,\n+                                new Matched<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMjM2OA=="}, "originalCommit": {"oid": "0603544522c762faf5b42faf2fb1930314500749"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 821, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}