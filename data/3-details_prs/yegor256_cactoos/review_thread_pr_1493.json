{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTI3MDAx", "number": 1493, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzoxODozMFrOE0Gnuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNzoyNlrOE0v2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDY5ODgzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzoxODozMFrOHrr2mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNzozNzowMVrOHrwwrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2OTMwNA==", "bodyText": "@andreoss Please, add a test when the string is empty.", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r515569304", "createdAt": "2020-11-01T03:18:30Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +186,15 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb160bf7a32160897ec3851e196598b68e57081b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0OTcxMQ==", "bodyText": "@fabriciofx Added a test", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r515649711", "createdAt": "2020-11-01T17:37:01Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +186,15 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2OTMwNA=="}, "originalCommit": {"oid": "eb160bf7a32160897ec3851e196598b68e57081b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDY5OTI2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzoxOToxNVrOHrr2yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNzozNjo1NFrOHrwwmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2OTM1NQ==", "bodyText": "@andreoss please, fix this message, because the string isn't empty.", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r515569355", "createdAt": "2020-11-01T03:19:15Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +186,15 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty iterator\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb160bf7a32160897ec3851e196598b68e57081b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0OTY4OQ==", "bodyText": "@fabriciofx Fixed", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r515649689", "createdAt": "2020-11-01T17:36:54Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +186,15 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty iterator\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2OTM1NQ=="}, "originalCommit": {"oid": "eb160bf7a32160897ec3851e196598b68e57081b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDcwMDg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwMzoyMTozMFrOHrr3dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowOTowOVrOHu6MrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2OTUyNw==", "bodyText": "@andreoss please, add a test to LengthOf(...).longValue(), LengthOf(...).floatValue()and LengthOf(...).doubleValue()", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r515569527", "createdAt": "2020-11-01T03:21:30Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +186,15 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty iterator\",\n+            new LengthOf(\n+                new TextOf(\"abcd\")\n+            ).intValue(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb160bf7a32160897ec3851e196598b68e57081b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0OTY3MQ==", "bodyText": "@fabriciofx I did so, but kept it in a single test. Perhaps there could be IsNumber matcher for that.", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r515649671", "createdAt": "2020-11-01T17:36:46Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +186,15 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty iterator\",\n+            new LengthOf(\n+                new TextOf(\"abcd\")\n+            ).intValue(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2OTUyNw=="}, "originalCommit": {"oid": "eb160bf7a32160897ec3851e196598b68e57081b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2ODA4Mw==", "bodyText": "@andreoss Please, can you open an issue in cactoos-matchers suggesting something like this isNumber?", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r515668083", "createdAt": "2020-11-01T20:29:15Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +186,15 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty iterator\",\n+            new LengthOf(\n+                new TextOf(\"abcd\")\n+            ).intValue(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2OTUyNw=="}, "originalCommit": {"oid": "eb160bf7a32160897ec3851e196598b68e57081b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4MzQwOA==", "bodyText": "@fabriciofx Filed. llorllale/cactoos-matchers#207", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r517883408", "createdAt": "2020-11-05T08:51:36Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +186,15 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty iterator\",\n+            new LengthOf(\n+                new TextOf(\"abcd\")\n+            ).intValue(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2OTUyNw=="}, "originalCommit": {"oid": "eb160bf7a32160897ec3851e196598b68e57081b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1MDA2MA==", "bodyText": "@andreoss thanks!", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r518950060", "createdAt": "2020-11-06T19:09:09Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +186,15 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty iterator\",\n+            new LengthOf(\n+                new TextOf(\"abcd\")\n+            ).intValue(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU2OTUyNw=="}, "originalCommit": {"oid": "eb160bf7a32160897ec3851e196598b68e57081b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQ1MzI4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNzoyNlrOHso5sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNTozODo1M1rOHvIzgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTUyMg==", "bodyText": "@andreoss can we add a test with some utf8 characters that does not translate directly to one byte? :)", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r516569522", "createdAt": "2020-11-03T10:37:26Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +188,28 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfEmptyText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty string\",\n+            new LengthOf(new TextOf(\"\")).intValue(),\n+            new IsEqual<>(0)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void lengthOfText() {\n+        final Number num = new LengthOf(new TextOf(\"abcd\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac207da31615b92c51892852fb7ed2a332394625"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4Mjk3NA==", "bodyText": "@victornoel You're suggestging that LengthOf should return a character-length for Text, not a byte-length? It seems inconsistent with how Input is handled.", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r517882974", "createdAt": "2020-11-05T08:50:53Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +188,28 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfEmptyText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty string\",\n+            new LengthOf(new TextOf(\"\")).intValue(),\n+            new IsEqual<>(0)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void lengthOfText() {\n+        final Number num = new LengthOf(new TextOf(\"abcd\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTUyMg=="}, "originalCommit": {"oid": "ac207da31615b92c51892852fb7ed2a332394625"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4NzQ1MQ==", "bodyText": "@andreoss exactly, that was a sneaky way of raising this problem in your solution, sorry about that ^^ We need to thus change the design to support both cases.\nOne possible solution is to have two classes (maybe as private inner class for now) for Input and Text and then have LengthOf delegate to them.", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r517887451", "createdAt": "2020-11-05T08:57:37Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +188,28 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfEmptyText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty string\",\n+            new LengthOf(new TextOf(\"\")).intValue(),\n+            new IsEqual<>(0)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void lengthOfText() {\n+        final Number num = new LengthOf(new TextOf(\"abcd\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTUyMg=="}, "originalCommit": {"oid": "ac207da31615b92c51892852fb7ed2a332394625"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyODExOQ==", "bodyText": "@victornoel Done. It calls asString().length() for Text now (as the issue proposes).", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r517928119", "createdAt": "2020-11-05T10:01:06Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +188,28 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfEmptyText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty string\",\n+            new LengthOf(new TextOf(\"\")).intValue(),\n+            new IsEqual<>(0)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void lengthOfText() {\n+        final Number num = new LengthOf(new TextOf(\"abcd\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTUyMg=="}, "originalCommit": {"oid": "ac207da31615b92c51892852fb7ed2a332394625"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4OTM3Ng==", "bodyText": "@andreoss hehe this was much simpler than what I had in mind :) thx", "url": "https://github.com/yegor256/cactoos/pull/1493#discussion_r519189376", "createdAt": "2020-11-07T15:38:53Z", "author": {"login": "victornoel"}, "path": "src/test/java/org/cactoos/scalar/LengthOfTest.java", "diffHunk": "@@ -185,4 +188,28 @@ public void lengthOfEmptyIterator() {\n             new IsEqual<>(0)\n         ).affirm();\n     }\n+\n+    @Test\n+    public void lengthOfEmptyText() {\n+        new Assertion<>(\n+            \"Must calculate length of empty string\",\n+            new LengthOf(new TextOf(\"\")).intValue(),\n+            new IsEqual<>(0)\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void lengthOfText() {\n+        final Number num = new LengthOf(new TextOf(\"abcd\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2OTUyMg=="}, "originalCommit": {"oid": "ac207da31615b92c51892852fb7ed2a332394625"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 772, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}