{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMzAwMTUw", "number": 1448, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjozNjo0MVrOEhwtTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNzowNTowM1rOEiyzCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODM2NDk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/iterable/Paged.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjozNjo0MVrOHPQViw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTowNzowOVrOHPaWTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1ODM0Nw==", "bodyText": "@andreoss could you either create a iterator.Paged class that contains this code or add a todo to do so? This class would then be used here to implement iterable.Paged.", "url": "https://github.com/yegor256/cactoos/pull/1448#discussion_r485758347", "createdAt": "2020-09-09T16:36:41Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/iterable/Paged.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterable;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import org.cactoos.Func;\n+import org.cactoos.Scalar;\n+import org.cactoos.func.UncheckedFunc;\n+import org.cactoos.scalar.Sticky;\n+import org.cactoos.scalar.Unchecked;\n+\n+/**\n+ * Paged iterable.\n+ * Elements will continue to be provided so long as {@code next} produces\n+ * non-empty iterators.\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @param <X> Type of item\n+ * @since 0.47\n+ */\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n+public final class Paged<X> extends IterableEnvelope<X> {\n+\n+    /**\n+     * Ctor.\n+     * <p>\n+     * @param first First bag of elements\n+     * @param next Subsequent bags of elements\n+     * @param <I> Custom iterator\n+     */\n+    @SuppressWarnings(\"PMD.ConstructorOnlyInitializesOrCallOtherConstructors\")\n+    public <I extends Iterator<X>> Paged(\n+        final Scalar<I> first, final Func<I, I> next\n+    ) {\n+        // @checkstyle AnonInnerLengthCheck (30 lines)\n+        super(\n+            new IterableOf<>(\n+                () -> new Iterator<X>() {\n+                    private Unchecked<I> current = new Unchecked<>(\n+                        new Sticky<>(first)\n+                    );\n+\n+                    private final UncheckedFunc<I, I> subsequent =\n+                        new UncheckedFunc<>(next);\n+\n+                    @Override\n+                    public boolean hasNext() {\n+                        if (!this.current.value().hasNext()) {\n+                            final I next = this.subsequent.apply(\n+                                this.current.value()\n+                            );\n+                            this.current = new Unchecked<>(\n+                                new Sticky<>(() -> next)\n+                            );\n+                        }\n+                        return this.current.value().hasNext();\n+                    }\n+\n+                    @Override\n+                    public X next() {\n+                        if (this.hasNext()) {\n+                            return this.current.value().next();\n+                        }\n+                        throw new NoSuchElementException();\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37696119750c33cd0311f69cff9c280dbe7c304"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMjM4Mw==", "bodyText": "@victornoel Todo added.", "url": "https://github.com/yegor256/cactoos/pull/1448#discussion_r485922383", "createdAt": "2020-09-09T21:07:09Z", "author": {"login": "andreoss"}, "path": "src/main/java/org/cactoos/iterable/Paged.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterable;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import org.cactoos.Func;\n+import org.cactoos.Scalar;\n+import org.cactoos.func.UncheckedFunc;\n+import org.cactoos.scalar.Sticky;\n+import org.cactoos.scalar.Unchecked;\n+\n+/**\n+ * Paged iterable.\n+ * Elements will continue to be provided so long as {@code next} produces\n+ * non-empty iterators.\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @param <X> Type of item\n+ * @since 0.47\n+ */\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n+public final class Paged<X> extends IterableEnvelope<X> {\n+\n+    /**\n+     * Ctor.\n+     * <p>\n+     * @param first First bag of elements\n+     * @param next Subsequent bags of elements\n+     * @param <I> Custom iterator\n+     */\n+    @SuppressWarnings(\"PMD.ConstructorOnlyInitializesOrCallOtherConstructors\")\n+    public <I extends Iterator<X>> Paged(\n+        final Scalar<I> first, final Func<I, I> next\n+    ) {\n+        // @checkstyle AnonInnerLengthCheck (30 lines)\n+        super(\n+            new IterableOf<>(\n+                () -> new Iterator<X>() {\n+                    private Unchecked<I> current = new Unchecked<>(\n+                        new Sticky<>(first)\n+                    );\n+\n+                    private final UncheckedFunc<I, I> subsequent =\n+                        new UncheckedFunc<>(next);\n+\n+                    @Override\n+                    public boolean hasNext() {\n+                        if (!this.current.value().hasNext()) {\n+                            final I next = this.subsequent.apply(\n+                                this.current.value()\n+                            );\n+                            this.current = new Unchecked<>(\n+                                new Sticky<>(() -> next)\n+                            );\n+                        }\n+                        return this.current.value().hasNext();\n+                    }\n+\n+                    @Override\n+                    public X next() {\n+                        if (this.hasNext()) {\n+                            return this.current.value().next();\n+                        }\n+                        throw new NoSuchElementException();\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1ODM0Nw=="}, "originalCommit": {"oid": "d37696119750c33cd0311f69cff9c280dbe7c304"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI4NjIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/iterable/Paged.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjowNTozMVrOHQcH9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo1Mjo1NVrOHQkc1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMDA1Mg==", "bodyText": "@andreoss I prefer all object's attributes declared as final. As this attribute needs change, you can use AtomicReference to achieve it.", "url": "https://github.com/yegor256/cactoos/pull/1448#discussion_r487000052", "createdAt": "2020-09-11T12:05:31Z", "author": {"login": "fabriciofx"}, "path": "src/main/java/org/cactoos/iterable/Paged.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterable;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import org.cactoos.Func;\n+import org.cactoos.Scalar;\n+import org.cactoos.func.UncheckedFunc;\n+import org.cactoos.scalar.Sticky;\n+import org.cactoos.scalar.Unchecked;\n+\n+/**\n+ * Paged iterable.\n+ * Elements will continue to be provided so long as {@code next} produces\n+ * non-empty iterators.\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @param <X> Type of item\n+ * @since 0.47\n+ * @todo #1183:30m Continue refactoring and add `iterator.Paged` by\n+ *  extracting inner anon class from this class. The checkstyle suppression\n+ *  should be removed after that.\n+ */\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n+public final class Paged<X> extends IterableEnvelope<X> {\n+\n+    /**\n+     * Ctor.\n+     * <p>\n+     * @param first First bag of elements\n+     * @param next Subsequent bags of elements\n+     * @param <I> Custom iterator\n+     */\n+    @SuppressWarnings(\"PMD.ConstructorOnlyInitializesOrCallOtherConstructors\")\n+    public <I extends Iterator<X>> Paged(\n+        final Scalar<I> first, final Func<I, I> next\n+    ) {\n+        // @checkstyle AnonInnerLengthCheck (30 lines)\n+        super(\n+            new IterableOf<>(\n+                () -> new Iterator<X>() {\n+                    private Unchecked<I> current = new Unchecked<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78bb614665684c086ee81d243ad71b841ed7b288"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNjQ2OA==", "bodyText": "@victornoel Done.", "url": "https://github.com/yegor256/cactoos/pull/1448#discussion_r487136468", "createdAt": "2020-09-11T15:52:55Z", "author": {"login": "andreoss"}, "path": "src/main/java/org/cactoos/iterable/Paged.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterable;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import org.cactoos.Func;\n+import org.cactoos.Scalar;\n+import org.cactoos.func.UncheckedFunc;\n+import org.cactoos.scalar.Sticky;\n+import org.cactoos.scalar.Unchecked;\n+\n+/**\n+ * Paged iterable.\n+ * Elements will continue to be provided so long as {@code next} produces\n+ * non-empty iterators.\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @param <X> Type of item\n+ * @since 0.47\n+ * @todo #1183:30m Continue refactoring and add `iterator.Paged` by\n+ *  extracting inner anon class from this class. The checkstyle suppression\n+ *  should be removed after that.\n+ */\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n+public final class Paged<X> extends IterableEnvelope<X> {\n+\n+    /**\n+     * Ctor.\n+     * <p>\n+     * @param first First bag of elements\n+     * @param next Subsequent bags of elements\n+     * @param <I> Custom iterator\n+     */\n+    @SuppressWarnings(\"PMD.ConstructorOnlyInitializesOrCallOtherConstructors\")\n+    public <I extends Iterator<X>> Paged(\n+        final Scalar<I> first, final Func<I, I> next\n+    ) {\n+        // @checkstyle AnonInnerLengthCheck (30 lines)\n+        super(\n+            new IterableOf<>(\n+                () -> new Iterator<X>() {\n+                    private Unchecked<I> current = new Unchecked<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMDA1Mg=="}, "originalCommit": {"oid": "78bb614665684c086ee81d243ad71b841ed7b288"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI5ODUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/iterable/PagedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjowOToyN1rOHQcPWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo1Mjo0NVrOHQkccA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMTk0NA==", "bodyText": "@andreoss I think you can substitute the literals and remove PMD.AvoidDuplicateLiterals suppress.", "url": "https://github.com/yegor256/cactoos/pull/1448#discussion_r487001944", "createdAt": "2020-09-11T12:09:27Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/iterable/PagedTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterable;\n+\n+import java.util.Iterator;\n+import org.cactoos.iterator.IteratorOf;\n+import org.cactoos.scalar.LengthOf;\n+import org.cactoos.scalar.Ternary;\n+import org.hamcrest.collection.IsIterableWithSize;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+\n+/**\n+ * Test case for {@link Paged}.\n+ * @since 0.47\n+ * @checkstyle ClassDataAbstractionCoupling (2 lines)\n+ */\n+final class PagedTest {\n+\n+    @Test\n+    @SuppressWarnings({\"unchecked\", \"PMD.AvoidDuplicateLiterals\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78bb614665684c086ee81d243ad71b841ed7b288"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNjM2OA==", "bodyText": "@fabriciofx Done.", "url": "https://github.com/yegor256/cactoos/pull/1448#discussion_r487136368", "createdAt": "2020-09-11T15:52:45Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/iterable/PagedTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterable;\n+\n+import java.util.Iterator;\n+import org.cactoos.iterator.IteratorOf;\n+import org.cactoos.scalar.LengthOf;\n+import org.cactoos.scalar.Ternary;\n+import org.hamcrest.collection.IsIterableWithSize;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+\n+/**\n+ * Test case for {@link Paged}.\n+ * @since 0.47\n+ * @checkstyle ClassDataAbstractionCoupling (2 lines)\n+ */\n+final class PagedTest {\n+\n+    @Test\n+    @SuppressWarnings({\"unchecked\", \"PMD.AvoidDuplicateLiterals\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMTk0NA=="}, "originalCommit": {"oid": "78bb614665684c086ee81d243ad71b841ed7b288"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjMxOTU2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/cactoos/iterable/PagedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoxNTo1MVrOHQcbiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo1Mjo0MFrOHQkcLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwNTA2Nw==", "bodyText": "@andreoss please, can you add a test when pages.iterator().next() throw  NoSuchElementException?", "url": "https://github.com/yegor256/cactoos/pull/1448#discussion_r487005067", "createdAt": "2020-09-11T12:15:51Z", "author": {"login": "fabriciofx"}, "path": "src/test/java/org/cactoos/iterable/PagedTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterable;\n+\n+import java.util.Iterator;\n+import org.cactoos.iterator.IteratorOf;\n+import org.cactoos.scalar.LengthOf;\n+import org.cactoos.scalar.Ternary;\n+import org.hamcrest.collection.IsIterableWithSize;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+\n+/**\n+ * Test case for {@link Paged}.\n+ * @since 0.47\n+ * @checkstyle ClassDataAbstractionCoupling (2 lines)\n+ */\n+final class PagedTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78bb614665684c086ee81d243ad71b841ed7b288"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNjMwMg==", "bodyText": "@fabriciofx Done.", "url": "https://github.com/yegor256/cactoos/pull/1448#discussion_r487136302", "createdAt": "2020-09-11T15:52:40Z", "author": {"login": "andreoss"}, "path": "src/test/java/org/cactoos/iterable/PagedTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterable;\n+\n+import java.util.Iterator;\n+import org.cactoos.iterator.IteratorOf;\n+import org.cactoos.scalar.LengthOf;\n+import org.cactoos.scalar.Ternary;\n+import org.hamcrest.collection.IsIterableWithSize;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n+\n+/**\n+ * Test case for {@link Paged}.\n+ * @since 0.47\n+ * @checkstyle ClassDataAbstractionCoupling (2 lines)\n+ */\n+final class PagedTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwNTA2Nw=="}, "originalCommit": {"oid": "78bb614665684c086ee81d243ad71b841ed7b288"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTE5MzA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/iterable/Paged.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNzowNTowM1rOHQ2SnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxMDoxMzoxN1rOHQ7PVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyODc2NA==", "bodyText": "@andreoss let's extract this in its own Paged iterator implementation and use it here", "url": "https://github.com/yegor256/cactoos/pull/1448#discussion_r487428764", "createdAt": "2020-09-12T17:05:03Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/iterable/Paged.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterable;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.cactoos.Func;\n+import org.cactoos.Scalar;\n+import org.cactoos.func.UncheckedFunc;\n+import org.cactoos.scalar.Sticky;\n+import org.cactoos.scalar.Unchecked;\n+\n+/**\n+ * Paged iterable.\n+ * Elements will continue to be provided so long as {@code next} produces\n+ * non-empty iterators.\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @param <X> Type of item\n+ * @since 0.47\n+ * @todo #1183:30m Continue refactoring and add `iterator.Paged` by\n+ *  extracting inner anon class from this class. The checkstyle suppression\n+ *  should be removed after that.\n+ */\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n+public final class Paged<X> extends IterableEnvelope<X> {\n+\n+    /**\n+     * Ctor.\n+     * <p>\n+     * @param first First bag of elements\n+     * @param next Subsequent bags of elements\n+     * @param <I> Custom iterator\n+     */\n+    @SuppressWarnings(\"PMD.ConstructorOnlyInitializesOrCallOtherConstructors\")\n+    public <I extends Iterator<X>> Paged(\n+        final Scalar<I> first, final Func<I, I> next\n+    ) {\n+        // @checkstyle AnonInnerLengthCheck (30 lines)\n+        super(\n+            new IterableOf<>(\n+                () -> new Iterator<X>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7277f187d4697e8f412c8cb4d5b02ca6de54cc71"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNjYxMA==", "bodyText": "@victornoel iterator.Paged added as a todo note, as discussed here #1448 (comment)", "url": "https://github.com/yegor256/cactoos/pull/1448#discussion_r487436610", "createdAt": "2020-09-12T18:39:25Z", "author": {"login": "andreoss"}, "path": "src/main/java/org/cactoos/iterable/Paged.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterable;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.cactoos.Func;\n+import org.cactoos.Scalar;\n+import org.cactoos.func.UncheckedFunc;\n+import org.cactoos.scalar.Sticky;\n+import org.cactoos.scalar.Unchecked;\n+\n+/**\n+ * Paged iterable.\n+ * Elements will continue to be provided so long as {@code next} produces\n+ * non-empty iterators.\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @param <X> Type of item\n+ * @since 0.47\n+ * @todo #1183:30m Continue refactoring and add `iterator.Paged` by\n+ *  extracting inner anon class from this class. The checkstyle suppression\n+ *  should be removed after that.\n+ */\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n+public final class Paged<X> extends IterableEnvelope<X> {\n+\n+    /**\n+     * Ctor.\n+     * <p>\n+     * @param first First bag of elements\n+     * @param next Subsequent bags of elements\n+     * @param <I> Custom iterator\n+     */\n+    @SuppressWarnings(\"PMD.ConstructorOnlyInitializesOrCallOtherConstructors\")\n+    public <I extends Iterator<X>> Paged(\n+        final Scalar<I> first, final Func<I, I> next\n+    ) {\n+        // @checkstyle AnonInnerLengthCheck (30 lines)\n+        super(\n+            new IterableOf<>(\n+                () -> new Iterator<X>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyODc2NA=="}, "originalCommit": {"oid": "7277f187d4697e8f412c8cb4d5b02ca6de54cc71"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUwOTg0Ng==", "bodyText": "@andreoss haha, indeed, sorry, at least I am consistent :)", "url": "https://github.com/yegor256/cactoos/pull/1448#discussion_r487509846", "createdAt": "2020-09-13T10:13:17Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/iterable/Paged.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.iterable;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.cactoos.Func;\n+import org.cactoos.Scalar;\n+import org.cactoos.func.UncheckedFunc;\n+import org.cactoos.scalar.Sticky;\n+import org.cactoos.scalar.Unchecked;\n+\n+/**\n+ * Paged iterable.\n+ * Elements will continue to be provided so long as {@code next} produces\n+ * non-empty iterators.\n+ *\n+ * <p>There is no thread-safety guarantee.\n+ *\n+ * @param <X> Type of item\n+ * @since 0.47\n+ * @todo #1183:30m Continue refactoring and add `iterator.Paged` by\n+ *  extracting inner anon class from this class. The checkstyle suppression\n+ *  should be removed after that.\n+ */\n+@SuppressWarnings(\"PMD.OnlyOneConstructorShouldDoInitialization\")\n+public final class Paged<X> extends IterableEnvelope<X> {\n+\n+    /**\n+     * Ctor.\n+     * <p>\n+     * @param first First bag of elements\n+     * @param next Subsequent bags of elements\n+     * @param <I> Custom iterator\n+     */\n+    @SuppressWarnings(\"PMD.ConstructorOnlyInitializesOrCallOtherConstructors\")\n+    public <I extends Iterator<X>> Paged(\n+        final Scalar<I> first, final Func<I, I> next\n+    ) {\n+        // @checkstyle AnonInnerLengthCheck (30 lines)\n+        super(\n+            new IterableOf<>(\n+                () -> new Iterator<X>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyODc2NA=="}, "originalCommit": {"oid": "7277f187d4697e8f412c8cb4d5b02ca6de54cc71"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 757, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}