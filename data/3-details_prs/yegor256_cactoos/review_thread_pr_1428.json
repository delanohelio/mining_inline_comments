{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwOTMzOTEw", "number": 1428, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyODo0NVrOEcJfVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjo1NzozMVrOEdFlMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTUxMDYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/RepeatedCallable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyODo0NVrOHGgHuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMzowNzo1N1rOHH3RVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTc2OQ==", "bodyText": "@fabriciofx let's move all of that to the func package", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r476579769", "createdAt": "2020-08-25T16:28:45Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/RepeatedCallable.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e667f523ac4911f9309d07dce18b45a6dc43ec76"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODAwNzYzNw==", "bodyText": "@victornoel done!", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r478007637", "createdAt": "2020-08-27T03:07:57Z", "author": {"login": "fabriciofx"}, "path": "src/main/java/org/cactoos/RepeatedCallable.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTc2OQ=="}, "originalCommit": {"oid": "e667f523ac4911f9309d07dce18b45a6dc43ec76"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTUyMDQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/RepeatedCallable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozMTowOFrOHGgNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMzowOToyMFrOHH3Yow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MTMwNg==", "bodyText": "@fabriciofx instead of reimplementing this here, reuse Repeated here and for example call it with true and a Func that calls the callable and returns true also. just instantiate it and call it from here", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r476581306", "createdAt": "2020-08-25T16:31:08Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/RepeatedCallable.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos;\n+\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Callable that runs repeatedly for a number of times.\n+ *\n+ * @param <T> Type of output\n+ * @since 0.49.2\n+ */\n+public final class RepeatedCallable<T> implements Callable<T> {\n+\n+    /**\n+     * Original callable.\n+     */\n+    private final Callable<T> callable;\n+\n+    /**\n+     * How many times to run.\n+     */\n+    private final int times;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * <p>If {@code max} is equal or less than zero {@link #call()} will return\n+     * an exception.</p>\n+     *\n+     * @param cllbl Callable to repeat.\n+     * @param max How many times.\n+     */\n+    public RepeatedCallable(final Callable<T> cllbl, final int max) {\n+        this.callable = cllbl;\n+        this.times = max;\n+    }\n+\n+    @Override\n+    public T call() throws Exception {\n+        if (this.times <= 0) {\n+            throw new IllegalArgumentException(\n+                \"The number of repetitions must be at least 1\"\n+            );\n+        }\n+        T result = null;\n+        for (int idx = 0; idx < this.times; ++idx) {\n+            result = this.callable.call();\n+        }\n+        return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e667f523ac4911f9309d07dce18b45a6dc43ec76"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODAwOTUwNw==", "bodyText": "@victornoel I tried to do this before, but I couldn't. But now I did! Thanks!", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r478009507", "createdAt": "2020-08-27T03:09:20Z", "author": {"login": "fabriciofx"}, "path": "src/main/java/org/cactoos/RepeatedCallable.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos;\n+\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Callable that runs repeatedly for a number of times.\n+ *\n+ * @param <T> Type of output\n+ * @since 0.49.2\n+ */\n+public final class RepeatedCallable<T> implements Callable<T> {\n+\n+    /**\n+     * Original callable.\n+     */\n+    private final Callable<T> callable;\n+\n+    /**\n+     * How many times to run.\n+     */\n+    private final int times;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * <p>If {@code max} is equal or less than zero {@link #call()} will return\n+     * an exception.</p>\n+     *\n+     * @param cllbl Callable to repeat.\n+     * @param max How many times.\n+     */\n+    public RepeatedCallable(final Callable<T> cllbl, final int max) {\n+        this.callable = cllbl;\n+        this.times = max;\n+    }\n+\n+    @Override\n+    public T call() throws Exception {\n+        if (this.times <= 0) {\n+            throw new IllegalArgumentException(\n+                \"The number of repetitions must be at least 1\"\n+            );\n+        }\n+        T result = null;\n+        for (int idx = 0; idx < this.times; ++idx) {\n+            result = this.callable.call();\n+        }\n+        return result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MTMwNg=="}, "originalCommit": {"oid": "e667f523ac4911f9309d07dce18b45a6dc43ec76"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTM1NjAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/cactoos/func/RepeatedCallable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjo1NzozMVrOHIC4oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTo1ODo1OFrOHIitDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5NzkyMQ==", "bodyText": "@fabriciofx I think this should not return the callable itself, because here you are repeating the returning of the the callable, not its execution! You want to use FuncOf(final Callable<Y> callable), not public FuncOf(final Y result) :)\nAlso, please simply move the instantiation of Repeated directly in call, I believe it would be simpler to read and understand what's happening.", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r478197921", "createdAt": "2020-08-27T06:57:31Z", "author": {"login": "victornoel"}, "path": "src/main/java/org/cactoos/func/RepeatedCallable.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.func;\n+\n+import java.util.concurrent.Callable;\n+import org.cactoos.Func;\n+\n+/**\n+ * Callable that runs repeatedly for a number of times.\n+ *\n+ * @param <X> Type of output\n+ * @since 0.49.2\n+ */\n+public final class RepeatedCallable<X> implements Callable<X> {\n+\n+    /**\n+     * The repeated func.\n+     */\n+    private final Func<Boolean, Callable<X>> func;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * <p>If {@code max} is equal or less than zero {@link #call()} will return\n+     * an exception.</p>\n+     *\n+     * @param cllbl Callable to repeat.\n+     * @param count How many times.\n+     */\n+    public RepeatedCallable(final Callable<X> cllbl, final int count) {\n+        this.func = new Repeated<>(\n+            new FuncOf<Boolean, Callable<X>>(cllbl),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f35602fdc06979ea3a10d623deae2dd38732fb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxOTI0NQ==", "bodyText": "@victornoel I hope it's correct now! :) Thanks for your patience!", "url": "https://github.com/yegor256/cactoos/pull/1428#discussion_r478719245", "createdAt": "2020-08-27T21:58:58Z", "author": {"login": "fabriciofx"}, "path": "src/main/java/org/cactoos/func/RepeatedCallable.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2017-2020 Yegor Bugayenko\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.cactoos.func;\n+\n+import java.util.concurrent.Callable;\n+import org.cactoos.Func;\n+\n+/**\n+ * Callable that runs repeatedly for a number of times.\n+ *\n+ * @param <X> Type of output\n+ * @since 0.49.2\n+ */\n+public final class RepeatedCallable<X> implements Callable<X> {\n+\n+    /**\n+     * The repeated func.\n+     */\n+    private final Func<Boolean, Callable<X>> func;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * <p>If {@code max} is equal or less than zero {@link #call()} will return\n+     * an exception.</p>\n+     *\n+     * @param cllbl Callable to repeat.\n+     * @param count How many times.\n+     */\n+    public RepeatedCallable(final Callable<X> cllbl, final int count) {\n+        this.func = new Repeated<>(\n+            new FuncOf<Boolean, Callable<X>>(cllbl),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5NzkyMQ=="}, "originalCommit": {"oid": "01f35602fdc06979ea3a10d623deae2dd38732fb"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 852, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}