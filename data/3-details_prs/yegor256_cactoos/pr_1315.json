{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxODgwOTQx", "number": 1315, "title": "Remove some collection decorators", "bodyText": "This is for #1299 and #1304.\nChanges:\n\nI moved when possible the tests from collection to iterable tests\nI added some of the test that were removed in #1311 for #1303 to iterable's Skipped since it seemed a good idea", "createdAt": "2020-02-29T16:49:01Z", "url": "https://github.com/yegor256/cactoos/pull/1315", "merged": true, "mergeCommit": {"oid": "41a409c98fee60e727052dfed7daf5edf4794d9a"}, "closed": true, "closedAt": "2020-03-17T03:48:39Z", "author": {"login": "victornoel"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJw5AzgFqTM2NzM3MDgyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOZ4K0AFqTM3NTcxMzE0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzcwODI1", "url": "https://github.com/yegor256/cactoos/pull/1315#pullrequestreview-367370825", "createdAt": "2020-03-02T17:07:13Z", "commit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzowNzoxM1rOFwnr9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzowODo1NFrOFwnvng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjE5Ng==", "bodyText": "@victornoel Please extract these values into constants.", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526196", "createdAt": "2020-03-02T17:07:13Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjM3Mw==", "bodyText": "@victornoel Please extract these values into constants.", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526373", "createdAt": "2020-03-02T17:07:32Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjQzMQ==", "bodyText": "@victornoel Please extract these values into constants.", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526431", "createdAt": "2020-03-02T17:07:39Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjQ2Mg==", "bodyText": "@victornoel Please extract these values into constants.", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526462", "createdAt": "2020-03-02T17:07:42Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjU1Mg==", "bodyText": "@victornoel Please extract these values into constants.", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526552", "createdAt": "2020-03-02T17:07:51Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjU2MQ==", "bodyText": "@victornoel Please extract these values into constants.", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526561", "createdAt": "2020-03-02T17:07:53Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjY0MQ==", "bodyText": "@victornoel Please extract these values into constants.", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526641", "createdAt": "2020-03-02T17:08:02Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedAllElements() {\n+        new Assertion<>(\n+            \"Must skip all elements\",\n             new Skipped<>(\n                 2,\n+                \"one\", \"two\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjcwMQ==", "bodyText": "@victornoel Please extract these values into constants.", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526701", "createdAt": "2020-03-02T17:08:08Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedAllElements() {\n+        new Assertion<>(\n+            \"Must skip all elements\",\n             new Skipped<>(\n                 2,\n+                \"one\", \"two\"\n+            ),\n+            new IsEmptyIterable<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedMoreThanExists() {\n+        new Assertion<>(\n+            \"Can't skip more than exists\",\n+            new Skipped<>(\n+                Integer.MAX_VALUE,\n+                \"one\", \"two\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjc4Mw==", "bodyText": "@victornoel Please extract these values into constants.", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526783", "createdAt": "2020-03-02T17:08:17Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedAllElements() {\n+        new Assertion<>(\n+            \"Must skip all elements\",\n             new Skipped<>(\n                 2,\n+                \"one\", \"two\"\n+            ),\n+            new IsEmptyIterable<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedMoreThanExists() {\n+        new Assertion<>(\n+            \"Can't skip more than exists\",\n+            new Skipped<>(\n+                Integer.MAX_VALUE,\n+                \"one\", \"two\"\n+            ),\n+            new IsEmptyIterable<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+    public void skippedNegativeSize() {\n+        new Assertion<>(\n+            \"Must process negative skipped size\",\n+            new Skipped<>(\n+                -1,\n                 \"one\", \"two\", \"three\", \"four\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjgyNg==", "bodyText": "@victornoel Please extract these values into constants.", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526826", "createdAt": "2020-03-02T17:08:22Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedAllElements() {\n+        new Assertion<>(\n+            \"Must skip all elements\",\n             new Skipped<>(\n                 2,\n+                \"one\", \"two\"\n+            ),\n+            new IsEmptyIterable<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedMoreThanExists() {\n+        new Assertion<>(\n+            \"Can't skip more than exists\",\n+            new Skipped<>(\n+                Integer.MAX_VALUE,\n+                \"one\", \"two\"\n+            ),\n+            new IsEmptyIterable<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+    public void skippedNegativeSize() {\n+        new Assertion<>(\n+            \"Must process negative skipped size\",\n+            new Skipped<>(\n+                -1,\n                 \"one\", \"two\", \"three\", \"four\"\n             ),\n-            Matchers.contains(\n-                \"three\",\n-                \"four\"\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"one\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNzEzNA==", "bodyText": "@victornoel Please remove this one after extracting values into constants", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386527134", "createdAt": "2020-03-02T17:08:54Z", "author": {"login": "fanifieiev"}, "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d824991ee45db581107ba8a5e45656945015f96", "author": {"user": {"login": "victornoel", "name": "Victor No\u00ebl"}}, "url": "https://github.com/yegor256/cactoos/commit/4d824991ee45db581107ba8a5e45656945015f96", "committedDate": "2020-03-15T10:03:23Z", "message": "(#1299) Removed collection's Filtered"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5f70f4141826c48f741cc7b9b7c3d4c235d5af4", "author": {"user": {"login": "victornoel", "name": "Victor No\u00ebl"}}, "url": "https://github.com/yegor256/cactoos/commit/a5f70f4141826c48f741cc7b9b7c3d4c235d5af4", "committedDate": "2020-03-15T10:03:23Z", "message": "(#1304) Removed collection's TailOf"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "author": {"user": {"login": "victornoel", "name": "Victor No\u00ebl"}}, "url": "https://github.com/yegor256/cactoos/commit/54a31e3cdfa4ed380a40fd28b3778d79196c0140", "committedDate": "2020-02-29T16:47:28Z", "message": "(#1303) Added more tests to iterable's Skipped"}, "afterCommit": {"oid": "a9a10c3f299d5e09940680b190c88cc92198a793", "author": {"user": {"login": "victornoel", "name": "Victor No\u00ebl"}}, "url": "https://github.com/yegor256/cactoos/commit/a9a10c3f299d5e09940680b190c88cc92198a793", "committedDate": "2020-03-15T10:03:23Z", "message": "(#1303) Added more tests to iterable's Skipped"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41a409c98fee60e727052dfed7daf5edf4794d9a", "author": {"user": {"login": "victornoel", "name": "Victor No\u00ebl"}}, "url": "https://github.com/yegor256/cactoos/commit/41a409c98fee60e727052dfed7daf5edf4794d9a", "committedDate": "2020-03-15T10:09:24Z", "message": "(#1303) Added more tests to iterable's Skipped"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9a10c3f299d5e09940680b190c88cc92198a793", "author": {"user": {"login": "victornoel", "name": "Victor No\u00ebl"}}, "url": "https://github.com/yegor256/cactoos/commit/a9a10c3f299d5e09940680b190c88cc92198a793", "committedDate": "2020-03-15T10:03:23Z", "message": "(#1303) Added more tests to iterable's Skipped"}, "afterCommit": {"oid": "41a409c98fee60e727052dfed7daf5edf4794d9a", "author": {"user": {"login": "victornoel", "name": "Victor No\u00ebl"}}, "url": "https://github.com/yegor256/cactoos/commit/41a409c98fee60e727052dfed7daf5edf4794d9a", "committedDate": "2020-03-15T10:09:24Z", "message": "(#1303) Added more tests to iterable's Skipped"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NzEzMTQ4", "url": "https://github.com/yegor256/cactoos/pull/1315#pullrequestreview-375713148", "createdAt": "2020-03-17T03:10:01Z", "commit": {"oid": "41a409c98fee60e727052dfed7daf5edf4794d9a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 561, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}