{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTQ3ODUy", "number": 3093, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowNzozN1rOEEwJ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxNjowMFrOEEwWWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDE4NzM4OnYy", "diffSide": "RIGHT", "path": "rest-client/src/main/java/org/jboss/pnc/restclient/AdvancedSCMRepositoryClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowNzozN1rOGikiRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzowNzo0M1rOGjDSdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMzM2NQ==", "bodyText": "I'd recommend attaching WS listener before making REST requests. You have a guarantee you'll avoid race condition of the WS message coming earlier than WS listeners being registered.", "url": "https://github.com/project-ncl/pnc/pull/3093#discussion_r438903365", "createdAt": "2020-06-11T16:07:37Z", "author": {"login": "michalovjan"}, "path": "rest-client/src/main/java/org/jboss/pnc/restclient/AdvancedSCMRepositoryClient.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.restclient;\n+\n+import org.jboss.pnc.client.ClientException;\n+import org.jboss.pnc.client.Configuration;\n+import org.jboss.pnc.client.RemoteResourceException;\n+import org.jboss.pnc.client.SCMRepositoryClient;\n+import org.jboss.pnc.dto.notification.RepositoryCreationFailure;\n+import org.jboss.pnc.dto.notification.SCMRepositoryCreationSuccess;\n+import org.jboss.pnc.dto.requests.CreateAndSyncSCMRequest;\n+import org.jboss.pnc.dto.response.RepositoryCreationResponse;\n+import org.jboss.pnc.restclient.websocket.VertxWebSocketClient;\n+import org.jboss.pnc.restclient.websocket.WebSocketClient;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withFailedTaskId;\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withSuccessTaskId;\n+\n+public class AdvancedSCMRepositoryClient extends SCMRepositoryClient {\n+\n+    private WebSocketClient webSocketClient = new VertxWebSocketClient();\n+\n+    public AdvancedSCMRepositoryClient(Configuration configuration) {\n+        super(configuration);\n+        webSocketClient.connect(\"ws://\" + configuration.getHost() + \"/pnc-rest-new/notifications\").join();\n+    }\n+\n+    private CompletableFuture<RepositoryCreationFailure> waitForScmCreationFailure(String taskId) {\n+\n+        return webSocketClient.catchRepositoryCreationFailure(withFailedTaskId(taskId))\n+                .whenComplete((x, y) -> webSocketClient.disconnect());\n+    }\n+\n+    private CompletableFuture<SCMRepositoryCreationSuccess> waitForScmCreationSuccess(String taskId) {\n+\n+        return webSocketClient.catchSCMRepositoryCreationSuccess(withSuccessTaskId(taskId))\n+                .whenComplete((x, y) -> webSocketClient.disconnect());\n+    }\n+\n+    /**\n+     * If the scm repository is already created and present in the Orch database, a RemoteResourceException is thrown.\n+     * It's recommended that you check the presence of the repository before creating it.\n+     *\n+     * @param request scm to create\n+     * @return CompletableFuture of the result, whether it was successful or not\n+     * @throws RemoteResourceException Most likely thrown if repository already exists\n+     * @throws ClientException if the response from the server is strange: both task id and scm repository is null\n+     */\n+    public CompletableFuture<SCMCreationResult> createNewAndWait(CreateAndSyncSCMRequest request)\n+            throws RemoteResourceException, ClientException {\n+\n+        RepositoryCreationResponse response = super.createNew(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331926c892021bfc9039323fca7d9c6ec7523549"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1Nzg5NA==", "bodyText": "I cannot do that since I need to listen to the task id :(", "url": "https://github.com/project-ncl/pnc/pull/3093#discussion_r438957894", "createdAt": "2020-06-11T17:41:10Z", "author": {"login": "thescouser89"}, "path": "rest-client/src/main/java/org/jboss/pnc/restclient/AdvancedSCMRepositoryClient.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.restclient;\n+\n+import org.jboss.pnc.client.ClientException;\n+import org.jboss.pnc.client.Configuration;\n+import org.jboss.pnc.client.RemoteResourceException;\n+import org.jboss.pnc.client.SCMRepositoryClient;\n+import org.jboss.pnc.dto.notification.RepositoryCreationFailure;\n+import org.jboss.pnc.dto.notification.SCMRepositoryCreationSuccess;\n+import org.jboss.pnc.dto.requests.CreateAndSyncSCMRequest;\n+import org.jboss.pnc.dto.response.RepositoryCreationResponse;\n+import org.jboss.pnc.restclient.websocket.VertxWebSocketClient;\n+import org.jboss.pnc.restclient.websocket.WebSocketClient;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withFailedTaskId;\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withSuccessTaskId;\n+\n+public class AdvancedSCMRepositoryClient extends SCMRepositoryClient {\n+\n+    private WebSocketClient webSocketClient = new VertxWebSocketClient();\n+\n+    public AdvancedSCMRepositoryClient(Configuration configuration) {\n+        super(configuration);\n+        webSocketClient.connect(\"ws://\" + configuration.getHost() + \"/pnc-rest-new/notifications\").join();\n+    }\n+\n+    private CompletableFuture<RepositoryCreationFailure> waitForScmCreationFailure(String taskId) {\n+\n+        return webSocketClient.catchRepositoryCreationFailure(withFailedTaskId(taskId))\n+                .whenComplete((x, y) -> webSocketClient.disconnect());\n+    }\n+\n+    private CompletableFuture<SCMRepositoryCreationSuccess> waitForScmCreationSuccess(String taskId) {\n+\n+        return webSocketClient.catchSCMRepositoryCreationSuccess(withSuccessTaskId(taskId))\n+                .whenComplete((x, y) -> webSocketClient.disconnect());\n+    }\n+\n+    /**\n+     * If the scm repository is already created and present in the Orch database, a RemoteResourceException is thrown.\n+     * It's recommended that you check the presence of the repository before creating it.\n+     *\n+     * @param request scm to create\n+     * @return CompletableFuture of the result, whether it was successful or not\n+     * @throws RemoteResourceException Most likely thrown if repository already exists\n+     * @throws ClientException if the response from the server is strange: both task id and scm repository is null\n+     */\n+    public CompletableFuture<SCMCreationResult> createNewAndWait(CreateAndSyncSCMRequest request)\n+            throws RemoteResourceException, ClientException {\n+\n+        RepositoryCreationResponse response = super.createNew(request);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMzM2NQ=="}, "originalCommit": {"oid": "331926c892021bfc9039323fca7d9c6ec7523549"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQwNzIyMA==", "bodyText": "shite, you are right...", "url": "https://github.com/project-ncl/pnc/pull/3093#discussion_r439407220", "createdAt": "2020-06-12T13:07:43Z", "author": {"login": "michalovjan"}, "path": "rest-client/src/main/java/org/jboss/pnc/restclient/AdvancedSCMRepositoryClient.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.restclient;\n+\n+import org.jboss.pnc.client.ClientException;\n+import org.jboss.pnc.client.Configuration;\n+import org.jboss.pnc.client.RemoteResourceException;\n+import org.jboss.pnc.client.SCMRepositoryClient;\n+import org.jboss.pnc.dto.notification.RepositoryCreationFailure;\n+import org.jboss.pnc.dto.notification.SCMRepositoryCreationSuccess;\n+import org.jboss.pnc.dto.requests.CreateAndSyncSCMRequest;\n+import org.jboss.pnc.dto.response.RepositoryCreationResponse;\n+import org.jboss.pnc.restclient.websocket.VertxWebSocketClient;\n+import org.jboss.pnc.restclient.websocket.WebSocketClient;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withFailedTaskId;\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withSuccessTaskId;\n+\n+public class AdvancedSCMRepositoryClient extends SCMRepositoryClient {\n+\n+    private WebSocketClient webSocketClient = new VertxWebSocketClient();\n+\n+    public AdvancedSCMRepositoryClient(Configuration configuration) {\n+        super(configuration);\n+        webSocketClient.connect(\"ws://\" + configuration.getHost() + \"/pnc-rest-new/notifications\").join();\n+    }\n+\n+    private CompletableFuture<RepositoryCreationFailure> waitForScmCreationFailure(String taskId) {\n+\n+        return webSocketClient.catchRepositoryCreationFailure(withFailedTaskId(taskId))\n+                .whenComplete((x, y) -> webSocketClient.disconnect());\n+    }\n+\n+    private CompletableFuture<SCMRepositoryCreationSuccess> waitForScmCreationSuccess(String taskId) {\n+\n+        return webSocketClient.catchSCMRepositoryCreationSuccess(withSuccessTaskId(taskId))\n+                .whenComplete((x, y) -> webSocketClient.disconnect());\n+    }\n+\n+    /**\n+     * If the scm repository is already created and present in the Orch database, a RemoteResourceException is thrown.\n+     * It's recommended that you check the presence of the repository before creating it.\n+     *\n+     * @param request scm to create\n+     * @return CompletableFuture of the result, whether it was successful or not\n+     * @throws RemoteResourceException Most likely thrown if repository already exists\n+     * @throws ClientException if the response from the server is strange: both task id and scm repository is null\n+     */\n+    public CompletableFuture<SCMCreationResult> createNewAndWait(CreateAndSyncSCMRequest request)\n+            throws RemoteResourceException, ClientException {\n+\n+        RepositoryCreationResponse response = super.createNew(request);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMzM2NQ=="}, "originalCommit": {"oid": "331926c892021bfc9039323fca7d9c6ec7523549"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDIxOTEyOnYy", "diffSide": "RIGHT", "path": "rest-client/src/main/java/org/jboss/pnc/restclient/AdvancedSCMRepositoryClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxNjowMFrOGik3Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzoxNzowNVrOGjDlPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwODY3OQ==", "bodyText": "With using the join() in the constructor, you theoretically limit reusability. If one of the wait* methods disconnects from the client, then other wait* methods won't work.(not a problem in this case) On the other hand, calling join() more then once is harmless, that's why I've been putting them inside wait* methods.\nIf there is an issue with running join() concurrently, then adding synchronized keyword to join() method should fix that.", "url": "https://github.com/project-ncl/pnc/pull/3093#discussion_r438908679", "createdAt": "2020-06-11T16:16:00Z", "author": {"login": "michalovjan"}, "path": "rest-client/src/main/java/org/jboss/pnc/restclient/AdvancedSCMRepositoryClient.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.restclient;\n+\n+import org.jboss.pnc.client.ClientException;\n+import org.jboss.pnc.client.Configuration;\n+import org.jboss.pnc.client.RemoteResourceException;\n+import org.jboss.pnc.client.SCMRepositoryClient;\n+import org.jboss.pnc.dto.notification.RepositoryCreationFailure;\n+import org.jboss.pnc.dto.notification.SCMRepositoryCreationSuccess;\n+import org.jboss.pnc.dto.requests.CreateAndSyncSCMRequest;\n+import org.jboss.pnc.dto.response.RepositoryCreationResponse;\n+import org.jboss.pnc.restclient.websocket.VertxWebSocketClient;\n+import org.jboss.pnc.restclient.websocket.WebSocketClient;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withFailedTaskId;\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withSuccessTaskId;\n+\n+public class AdvancedSCMRepositoryClient extends SCMRepositoryClient {\n+\n+    private WebSocketClient webSocketClient = new VertxWebSocketClient();\n+\n+    public AdvancedSCMRepositoryClient(Configuration configuration) {\n+        super(configuration);\n+        webSocketClient.connect(\"ws://\" + configuration.getHost() + \"/pnc-rest-new/notifications\").join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331926c892021bfc9039323fca7d9c6ec7523549"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2MDMzNQ==", "bodyText": "Do you recommend I create 2 websocket clients then? one for each wait method?", "url": "https://github.com/project-ncl/pnc/pull/3093#discussion_r438960335", "createdAt": "2020-06-11T17:43:58Z", "author": {"login": "thescouser89"}, "path": "rest-client/src/main/java/org/jboss/pnc/restclient/AdvancedSCMRepositoryClient.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.restclient;\n+\n+import org.jboss.pnc.client.ClientException;\n+import org.jboss.pnc.client.Configuration;\n+import org.jboss.pnc.client.RemoteResourceException;\n+import org.jboss.pnc.client.SCMRepositoryClient;\n+import org.jboss.pnc.dto.notification.RepositoryCreationFailure;\n+import org.jboss.pnc.dto.notification.SCMRepositoryCreationSuccess;\n+import org.jboss.pnc.dto.requests.CreateAndSyncSCMRequest;\n+import org.jboss.pnc.dto.response.RepositoryCreationResponse;\n+import org.jboss.pnc.restclient.websocket.VertxWebSocketClient;\n+import org.jboss.pnc.restclient.websocket.WebSocketClient;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withFailedTaskId;\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withSuccessTaskId;\n+\n+public class AdvancedSCMRepositoryClient extends SCMRepositoryClient {\n+\n+    private WebSocketClient webSocketClient = new VertxWebSocketClient();\n+\n+    public AdvancedSCMRepositoryClient(Configuration configuration) {\n+        super(configuration);\n+        webSocketClient.connect(\"ws://\" + configuration.getHost() + \"/pnc-rest-new/notifications\").join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwODY3OQ=="}, "originalCommit": {"oid": "331926c892021bfc9039323fca7d9c6ec7523549"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQxMjAzMA==", "bodyText": "I've made relevant comment below that could prevent this.", "url": "https://github.com/project-ncl/pnc/pull/3093#discussion_r439412030", "createdAt": "2020-06-12T13:17:05Z", "author": {"login": "michalovjan"}, "path": "rest-client/src/main/java/org/jboss/pnc/restclient/AdvancedSCMRepositoryClient.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.restclient;\n+\n+import org.jboss.pnc.client.ClientException;\n+import org.jboss.pnc.client.Configuration;\n+import org.jboss.pnc.client.RemoteResourceException;\n+import org.jboss.pnc.client.SCMRepositoryClient;\n+import org.jboss.pnc.dto.notification.RepositoryCreationFailure;\n+import org.jboss.pnc.dto.notification.SCMRepositoryCreationSuccess;\n+import org.jboss.pnc.dto.requests.CreateAndSyncSCMRequest;\n+import org.jboss.pnc.dto.response.RepositoryCreationResponse;\n+import org.jboss.pnc.restclient.websocket.VertxWebSocketClient;\n+import org.jboss.pnc.restclient.websocket.WebSocketClient;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withFailedTaskId;\n+import static org.jboss.pnc.restclient.websocket.predicates.SCMRepositoryNotificationPredicates.withSuccessTaskId;\n+\n+public class AdvancedSCMRepositoryClient extends SCMRepositoryClient {\n+\n+    private WebSocketClient webSocketClient = new VertxWebSocketClient();\n+\n+    public AdvancedSCMRepositoryClient(Configuration configuration) {\n+        super(configuration);\n+        webSocketClient.connect(\"ws://\" + configuration.getHost() + \"/pnc-rest-new/notifications\").join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwODY3OQ=="}, "originalCommit": {"oid": "331926c892021bfc9039323fca7d9c6ec7523549"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1822, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}