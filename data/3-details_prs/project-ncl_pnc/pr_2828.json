{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMjI5OTM2", "number": 2828, "title": "Endpoint to get Builds without attributes.", "bodyText": "Checklist:\n\n Have you added a note in the CHANGELOG wiki for your change if user-facing?\n Have you added unit tests for your change?", "createdAt": "2020-02-03T10:09:19Z", "url": "https://github.com/project-ncl/pnc/pull/2828", "merged": true, "mergeCommit": {"oid": "b191a0d40a9d98ba500a6439a7b7baa2904812ee"}, "closed": true, "closedAt": "2020-02-04T10:29:27Z", "author": {"login": "matejonnet"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAurE7AFqTM1MjI1NDY4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcA0Kp5gBqjMwMDM5MzY0ODU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMjU0Njgy", "url": "https://github.com/project-ncl/pnc/pull/2828#pullrequestreview-352254682", "createdAt": "2020-02-03T13:34:37Z", "commit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzozNDozN1rOFkxeFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyNjo1M1rOFk1Tvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwMzU3NQ==", "bodyText": "What about old.ifPresent(attributes::remove);", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374103575", "createdAt": "2020-02-03T13:34:37Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");\n+        }\n+        Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n+        BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n+        if (old.isPresent()) {\n+            attributes.remove(old.get());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwMzk4OQ==", "bodyText": "return old.orElse(null);", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374103989", "createdAt": "2020-02-03T13:35:30Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");\n+        }\n+        Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n+        BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n+        if (old.isPresent()) {\n+            attributes.remove(old.get());\n+        }\n+        attributes.add(attribute);\n+        if (old.isPresent()) {\n+            return old.get().getValue();\n+        } else {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNDk0MQ==", "bodyText": "I guess this is this really necessary and Hibernate can't handle it with null id?", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374104941", "createdAt": "2020-02-03T13:37:26Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNTM1MA==", "bodyText": "return getAttributeEntity(key).orElse(null);", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374105350", "createdAt": "2020-02-03T13:38:16Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNTg0NQ==", "bodyText": "Somebody finds this nicer :)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    attribute.ifPresent(a -> attributes.remove(a));\n          \n          \n            \n                    attribute.ifPresent(attributes::remove);", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374105845", "createdAt": "2020-02-03T13:39:19Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");\n+        }\n+        Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n+        BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n+        if (old.isPresent()) {\n+            attributes.remove(old.get());\n+        }\n+        attributes.add(attribute);\n+        if (old.isPresent()) {\n+            return old.get().getValue();\n+        } else {\n+            return null;\n+        }\n     }\n \n     public void removeAttribute(String key) {\n-        attributes.remove(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        attribute.ifPresent(a -> attributes.remove(a));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDExOTI1Mg==", "bodyText": "We don't want to allow : in the value? If we want then use:\n            String[] kv = attribute.split(\":\", 2);\n            if (kv.length == 2) {\n                map.put(kv[0],kv[1]);\n            } else {\n                map.put(kv[0],\"\");\n            }", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374119252", "createdAt": "2020-02-03T14:05:01Z", "author": {"login": "janinko"}, "path": "rest-new/src/main/java/org/jboss/pnc/rest/endpoints/BuildEndpointImpl.java", "diffHunk": "@@ -119,8 +121,28 @@ public void update(String id, Build build) {\n     }\n \n     @Override\n-    public Page<Build> getAll(PageParameters pageParams, BuildsFilterParameters filterParams, BuildAttributeParameters attributes) {\n-        return provider.getBuilds(toBuildPageInfo(pageParams, filterParams));\n+    public Page<Build> getAll(PageParameters pageParams, BuildsFilterParameters filterParams, List<String> attributes) {\n+        if (attributes != null && !attributes.isEmpty()) {\n+            Map<String,String> attributeConstraints = parseAttributes(attributes);\n+            return provider.getByAttribute(toBuildPageInfo(pageParams, filterParams), attributeConstraints);\n+        } else {\n+            return provider.getBuilds(toBuildPageInfo(pageParams, filterParams));\n+        }\n+    }\n+\n+    private Map<String, String> parseAttributes(List<String> attributes) {\n+        Map<String, String> map = new HashMap<>();\n+        for (String attribute : attributes) {\n+            String[] kv = attribute.split(\":\");\n+            if (kv.length == 2) {\n+                map.put(kv[0],kv[1]);\n+            } else if (kv.length == 1) {\n+                map.put(kv[0],\"\");\n+            } else {\n+                throw new BadRequestException(\"Invalid 'attributes' query parameters.\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMjIwNg==", "bodyText": "Does this result in 400 or 500 error? I think we should give 400 in this (and the key == null) case.", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374122206", "createdAt": "2020-02-03T14:10:47Z", "author": {"login": "janinko"}, "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -213,6 +216,9 @@ public void addAttribute(String id, String key, String value) {\n         if(null == key){\n             throw new IllegalArgumentException(\"Attribute key must not be null\");\n         }\n+        if(!key.matches(\"[a-zA-Z_0-9]+\")){\n+            throw new IllegalArgumentException(\"Attribute key must match [a-zA-Z_0-9]+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2MTI2Ng==", "bodyText": "Should you skip the first character !?", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374161266", "createdAt": "2020-02-03T15:18:35Z", "author": {"login": "janinko"}, "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -599,6 +605,39 @@ public void setDependentArtifacts(String id, List<String> artifactIds) {\n         repository.save(buildRecord);\n     }\n \n+    public Page<Build> getByAttribute(BuildPageInfo buildPageInfo, Map<String, String> attributeConstraints) {\n+        Set<Predicate<BuildRecord>> predicates = new HashSet<>();\n+        for (Map.Entry<String, String> entry : attributeConstraints.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if (key.startsWith(\"!\")) {\n+                withoutAttribute(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2MzkyNw==", "bodyText": "You are ignoring the RSQL query. I think it should be also used.", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374163927", "createdAt": "2020-02-03T15:22:56Z", "author": {"login": "janinko"}, "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -599,6 +605,39 @@ public void setDependentArtifacts(String id, List<String> artifactIds) {\n         repository.save(buildRecord);\n     }\n \n+    public Page<Build> getByAttribute(BuildPageInfo buildPageInfo, Map<String, String> attributeConstraints) {\n+        Set<Predicate<BuildRecord>> predicates = new HashSet<>();\n+        for (Map.Entry<String, String> entry : attributeConstraints.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if (key.startsWith(\"!\")) {\n+                withoutAttribute(key);\n+            } else {\n+                withAttribute(key, value);\n+            }\n+        }\n+\n+        Predicate<BuildRecord>[] predicatesArray = predicates.toArray(new Predicate[predicates.size()]);\n+\n+        PageInfo pageInfo = toPageInfo(buildPageInfo);\n+        SortInfo sortInfo = rsqlPredicateProducer.getSortInfo(type, buildPageInfo.getSort());\n+        List<BuildRecord> resultList = ((BuildRecordRepository) BuildProviderImpl.this.repository)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NDQ2OA==", "bodyText": "There should be new construcotr that does the page count computation, so you don't need to include this line.", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374164468", "createdAt": "2020-02-03T15:23:46Z", "author": {"login": "janinko"}, "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -599,6 +605,39 @@ public void setDependentArtifacts(String id, List<String> artifactIds) {\n         repository.save(buildRecord);\n     }\n \n+    public Page<Build> getByAttribute(BuildPageInfo buildPageInfo, Map<String, String> attributeConstraints) {\n+        Set<Predicate<BuildRecord>> predicates = new HashSet<>();\n+        for (Map.Entry<String, String> entry : attributeConstraints.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if (key.startsWith(\"!\")) {\n+                withoutAttribute(key);\n+            } else {\n+                withAttribute(key, value);\n+            }\n+        }\n+\n+        Predicate<BuildRecord>[] predicatesArray = predicates.toArray(new Predicate[predicates.size()]);\n+\n+        PageInfo pageInfo = toPageInfo(buildPageInfo);\n+        SortInfo sortInfo = rsqlPredicateProducer.getSortInfo(type, buildPageInfo.getSort());\n+        List<BuildRecord> resultList = ((BuildRecordRepository) BuildProviderImpl.this.repository)\n+                .queryWithPredicatesUsingCursor(pageInfo, sortInfo, predicatesArray);\n+\n+        int hits = repository.count(predicatesArray);\n+\n+        return new Page<>(\n+                buildPageInfo.getPageIndex(),\n+                buildPageInfo.getPageSize(),\n+                (int) Math.ceil((double) hits / buildPageInfo.getPageSize()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NTYxOQ==", "bodyText": "Could you add to the addAttribute method mention what are the restrictions on the key format?", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374165619", "createdAt": "2020-02-03T15:25:37Z", "author": {"login": "janinko"}, "path": "rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/BuildEndpoint.java", "diffHunk": "@@ -91,6 +90,10 @@\n     static final String BUILD_STATUS = \"Status of the build\";\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NjQ2Mg==", "bodyText": "private", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374166462", "createdAt": "2020-02-03T15:26:53Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecordAttribute.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2019 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.model;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.Table;\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+@Entity\n+@Table(name = \"build_record_attributes\")\n+@IdClass(BuildRecordAttribute.AttributeId.class)\n+public class BuildRecordAttribute implements Serializable {\n+\n+    @Id\n+    Integer buildRecordId;\n+\n+    @Id\n+    String key;\n+\n+    String value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca", "author": {"user": {"login": "matejonnet", "name": "Matej Lazar"}}, "url": "https://github.com/project-ncl/pnc/commit/51edbff0909746479d85f892c1fe9c5df26495ca", "committedDate": "2020-02-03T10:07:57Z", "message": "NCL-5376 - endpoint to get Builds without attributes."}, "afterCommit": {"oid": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "author": {"user": {"login": "matejonnet", "name": "Matej Lazar"}}, "url": "https://github.com/project-ncl/pnc/commit/5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "committedDate": "2020-02-03T21:43:20Z", "message": "NCL-5376 - endpoint to get Builds without attributes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36ec44c275b1b9d85c72f9ea388a4e4921e59a19", "author": {"user": {"login": "matejonnet", "name": "Matej Lazar"}}, "url": "https://github.com/project-ncl/pnc/commit/36ec44c275b1b9d85c72f9ea388a4e4921e59a19", "committedDate": "2020-02-03T21:52:38Z", "message": "NCL-5376 - endpoint to get Builds without attributes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "author": {"user": {"login": "matejonnet", "name": "Matej Lazar"}}, "url": "https://github.com/project-ncl/pnc/commit/5b8f1777cd81404bfd3c6e7dffc0ced7b7d0ce81", "committedDate": "2020-02-03T21:43:20Z", "message": "NCL-5376 - endpoint to get Builds without attributes."}, "afterCommit": {"oid": "36ec44c275b1b9d85c72f9ea388a4e4921e59a19", "author": {"user": {"login": "matejonnet", "name": "Matej Lazar"}}, "url": "https://github.com/project-ncl/pnc/commit/36ec44c275b1b9d85c72f9ea388a4e4921e59a19", "committedDate": "2020-02-03T21:52:38Z", "message": "NCL-5376 - endpoint to get Builds without attributes."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2706, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}