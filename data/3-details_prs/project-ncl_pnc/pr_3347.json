{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNDEwMDM1", "number": 3347, "title": "[NCL-6163] New endpoint on Artifact with direct filtering for DA", "bodyText": "Checklist:\n\n Have you added a note in the CHANGELOG wiki for your change if user-facing?\n Have you added unit tests for your change?", "createdAt": "2020-10-13T14:44:10Z", "url": "https://github.com/project-ncl/pnc/pull/3347", "merged": true, "mergeCommit": {"oid": "68f1fda33ebf1920790f262bd383428c40f1bd14"}, "closed": true, "closedAt": "2020-10-22T09:25:26Z", "author": {"login": "dominikbrazdil"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSaOkZgFqTUwODE4ODAxOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdU-c7fAFqTUxNDUyNjI0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTg4MDE4", "url": "https://github.com/project-ncl/pnc/pull/3347#pullrequestreview-508188018", "createdAt": "2020-10-14T10:01:13Z", "commit": {"oid": "71d25e349429960fac111ea632c2010fe089360b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowMToxNFrOHhLl2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowMToxNFrOHhLl2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1NDk3MQ==", "bodyText": "What I don't get is why won't we just use RSQL on getArtifacts endpoint instead of creating entire new endpoint. DA needs to prepare request anyway.\nRSQL that should be equivalent example is: q=identifier=like=group:*:version;artifactQuality=in=(DELETED,BLACKLISTED,NEW...);targetRepository.repositoryType==MAVEN\nIf you don't want to use =in= you can group multiple ORs like this: q=identifier=like=group:*:version;(artifactQuality==NEW,artifactQuality==TEMPORARY...);targetRepository.repositoryType==NPM\nRSQL will create just one query to DB.", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r504554971", "createdAt": "2020-10-14T10:01:14Z", "author": {"login": "michalovjan"}, "path": "rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java", "diffHunk": "@@ -113,6 +115,43 @@\n             @Parameter(description = FILTER_MD5_DESC) @QueryParam(\"md5\") String md5,\n             @Parameter(description = FILTER_SHA1_DESC) @QueryParam(\"sha1\") String sha1);\n \n+    static final String GET_ALL_FILTERED_DESC = \"Gets all artifacts according to specified filters.\";\n+    static final String FILTER_IDENTIFIER_DESC = \"Filter by artifact identifier or its part.\";\n+    static final String FILTER_QUALITY_DESC = \"List of artifact qualities to include in result.\";\n+    static final String FILTER_REPOSITORY_TYPE_DESC = \"Type of target repository.\";\n+\n+    /**\n+     * {@value GET_ALL_FILTERED_DESC}\n+     *\n+     * @param pageParameters\n+     * @param identifier {@value FILTER_IDENTIFIER_DESC}\n+     * @param qualities {@value FILTER_QUALITY_DESC}\n+     * @param repoType {@value FILTER_REPOSITORY_TYPE_DESC}\n+     * @return\n+     */\n+    @Operation(\n+            summary = GET_ALL_FILTERED_DESC,\n+            responses = {\n+                    @ApiResponse(\n+                            responseCode = SUCCESS_CODE,\n+                            description = SUCCESS_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ArtifactPage.class))),\n+                    @ApiResponse(\n+                            responseCode = INVALID_CODE,\n+                            description = INVALID_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ErrorResponse.class))),\n+                    @ApiResponse(\n+                            responseCode = SERVER_ERROR_CODE,\n+                            description = SERVER_ERROR_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ErrorResponse.class))) })\n+    @GET\n+    @Path(\"/filter\")\n+    Page<Artifact> getAllFiltered(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d25e349429960fac111ea632c2010fe089360b"}, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71d25e349429960fac111ea632c2010fe089360b", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/71d25e349429960fac111ea632c2010fe089360b", "committedDate": "2020-10-13T14:43:12Z", "message": "[NCL-6163] New endpoint on Artifact with direct filtering for DA"}, "afterCommit": {"oid": "a43902f43da309cc381d5f7fc4489c527f0f5285", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/a43902f43da309cc381d5f7fc4489c527f0f5285", "committedDate": "2020-10-19T16:00:19Z", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a43902f43da309cc381d5f7fc4489c527f0f5285", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/a43902f43da309cc381d5f7fc4489c527f0f5285", "committedDate": "2020-10-19T16:00:19Z", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA"}, "afterCommit": {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/4858f15f05ec0e0091765cb18fc82509fbf7b799", "committedDate": "2020-10-20T07:56:06Z", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNDc5Nzcw", "url": "https://github.com/project-ncl/pnc/pull/3347#pullrequestreview-512479770", "createdAt": "2020-10-20T08:54:20Z", "commit": {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo1NDoyMFrOHkxwDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToxMzozMlrOHkykPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNTkwMA==", "bodyText": "AFAIK DA does not need to know id of the artifacts. Or is this \"in the future\" thing? @janinko", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508325900", "createdAt": "2020-10-20T08:54:20Z", "author": {"login": "michalovjan"}, "path": "dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.dto.response;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Data;\n+import org.jboss.pnc.enums.ArtifactQuality;\n+\n+/**\n+ * Really basic Artifact info for optimized queries.\n+ *\n+ * @author Dominik Br\u00e1zdil &lt;dbrazdil@redhat.com&gt;\n+ */\n+@Data\n+@Builder(builderClassName = \"Builder\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonDeserialize(builder = ArtifactInfo.Builder.class)\n+public class ArtifactInfo {\n+\n+    /**\n+     * ID of the artifact.\n+     */\n+    protected final String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyODEyMA==", "bodyText": "I think there is not need to have the results in order. DA will order the results by itself, based on the best matching version.", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508328120", "createdAt": "2020-10-20T08:57:22Z", "author": {"login": "michalovjan"}, "path": "facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java", "diffHunk": "@@ -288,6 +321,41 @@ public ArtifactRevision getRevision(String id, Integer rev) {\n         return artifactRevisionMapper.toDTO(auditedArtifact);\n     }\n \n+    private CriteriaQuery<Tuple> artifactInfoQuery(\n+            CriteriaBuilder cb,\n+            Optional<String> identifierPattern,\n+            Optional<Set<ArtifactQuality>> qualities,\n+            Optional<RepositoryType> repoType) {\n+\n+        CriteriaQuery<Tuple> query = cb.createTupleQuery();\n+\n+        Root<Artifact> artifact = query.from(org.jboss.pnc.model.Artifact.class);\n+        query.multiselect(\n+                artifact.get(Artifact_.id),\n+                artifact.get(Artifact_.identifier),\n+                artifact.get(Artifact_.artifactQuality));\n+        Predicate withIdentifierLike = identifierPattern.isPresent()\n+                ? cb.like(artifact.get(Artifact_.identifier), \"%\" + identifierPattern.get().replace(\"*\", \"%\") + \"%\")\n+                : cb.and();\n+        Predicate withQualityIn = qualities.isPresent() && !qualities.get().isEmpty()\n+                ? artifact.get(Artifact_.ARTIFACT_QUALITY).in(qualities.get())\n+                : cb.and();\n+        Predicate withRepoType = repoType.isPresent() ? cb\n+                .equal(artifact.join(Artifact_.targetRepository).get(TargetRepository_.REPOSITORY_TYPE), repoType.get())\n+                : cb.and();\n+        query.where(cb.and(withIdentifierLike, withQualityIn, withRepoType));\n+        query.orderBy(cb.desc(artifact.get(Artifact_.id)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNjgxOA==", "bodyText": "Is there a particular reason to surround the identifier with '%'?\nIf you'd asked for \"org.jboss.pnc:pnc:jar:2.0.0.GA-redhat-00001\" specifically. You could potentially get 3 artifacts (or more):\n\norg.jboss.pnc:pnc:jar:2.0.0.GA-redhat-00001\norg.jboss.pnc:pnc:jar:2.0.0.GA-redhat-00001:sources\norg.jboss.pnc:pnc:jar:2.0.0.GA-redhat-00001:javadocs", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508336818", "createdAt": "2020-10-20T09:10:02Z", "author": {"login": "michalovjan"}, "path": "facade/src/main/java/org/jboss/pnc/facade/providers/ArtifactProviderImpl.java", "diffHunk": "@@ -288,6 +321,41 @@ public ArtifactRevision getRevision(String id, Integer rev) {\n         return artifactRevisionMapper.toDTO(auditedArtifact);\n     }\n \n+    private CriteriaQuery<Tuple> artifactInfoQuery(\n+            CriteriaBuilder cb,\n+            Optional<String> identifierPattern,\n+            Optional<Set<ArtifactQuality>> qualities,\n+            Optional<RepositoryType> repoType) {\n+\n+        CriteriaQuery<Tuple> query = cb.createTupleQuery();\n+\n+        Root<Artifact> artifact = query.from(org.jboss.pnc.model.Artifact.class);\n+        query.multiselect(\n+                artifact.get(Artifact_.id),\n+                artifact.get(Artifact_.identifier),\n+                artifact.get(Artifact_.artifactQuality));\n+        Predicate withIdentifierLike = identifierPattern.isPresent()\n+                ? cb.like(artifact.get(Artifact_.identifier), \"%\" + identifierPattern.get().replace(\"*\", \"%\") + \"%\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzODQzNg==", "bodyText": "ArtifactInfoPage.class?", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508338436", "createdAt": "2020-10-20T09:12:22Z", "author": {"login": "michalovjan"}, "path": "rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java", "diffHunk": "@@ -113,6 +116,43 @@\n             @Parameter(description = FILTER_MD5_DESC) @QueryParam(\"md5\") String md5,\n             @Parameter(description = FILTER_SHA1_DESC) @QueryParam(\"sha1\") String sha1);\n \n+    static final String GET_ALL_FILTERED_DESC = \"Gets all artifacts according to specified filters.\";\n+    static final String FILTER_IDENTIFIER_DESC = \"Filter by artifact identifier or its part.\";\n+    static final String FILTER_QUALITY_DESC = \"List of artifact qualities to include in result.\";\n+    static final String FILTER_REPOSITORY_TYPE_DESC = \"Type of target repository.\";\n+\n+    /**\n+     * {@value GET_ALL_FILTERED_DESC}\n+     *\n+     * @param paginationParameters\n+     * @param identifier {@value FILTER_IDENTIFIER_DESC}\n+     * @param qualities {@value FILTER_QUALITY_DESC}\n+     * @param repoType {@value FILTER_REPOSITORY_TYPE_DESC}\n+     * @return\n+     */\n+    @Operation(\n+            summary = GET_ALL_FILTERED_DESC,\n+            responses = {\n+                    @ApiResponse(\n+                            responseCode = SUCCESS_CODE,\n+                            description = SUCCESS_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ArtifactPage.class))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzOTE1Mg==", "bodyText": "left imports", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508339152", "createdAt": "2020-10-20T09:13:22Z", "author": {"login": "michalovjan"}, "path": "spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java", "diffHunk": "@@ -18,12 +18,16 @@\n package org.jboss.pnc.spi.datastore.predicates;\n \n import org.apache.commons.collections.CollectionUtils;\n+import org.jboss.pnc.enums.ArtifactQuality;\n+import org.jboss.pnc.enums.RepositoryType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzOTI2Mg==", "bodyText": "left imports", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508339262", "createdAt": "2020-10-20T09:13:32Z", "author": {"login": "michalovjan"}, "path": "spi/src/main/java/org/jboss/pnc/spi/datastore/predicates/ArtifactPredicates.java", "diffHunk": "@@ -18,12 +18,16 @@\n package org.jboss.pnc.spi.datastore.predicates;\n \n import org.apache.commons.collections.CollectionUtils;\n+import org.jboss.pnc.enums.ArtifactQuality;\n+import org.jboss.pnc.enums.RepositoryType;\n import org.jboss.pnc.model.Artifact;\n import org.jboss.pnc.model.Artifact_;\n import org.jboss.pnc.model.BuildRecord;\n import org.jboss.pnc.model.BuildRecord_;\n import org.jboss.pnc.model.ProductMilestone;\n import org.jboss.pnc.model.ProductMilestone_;\n+import org.jboss.pnc.model.TargetRepository;\n+import org.jboss.pnc.model.TargetRepository_;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNjY4Njk1", "url": "https://github.com/project-ncl/pnc/pull/3347#pullrequestreview-512668695", "createdAt": "2020-10-20T12:48:54Z", "commit": {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjo0ODo1NFrOHk6pTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjo0ODo1NFrOHk6pTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3MTYzMA==", "bodyText": "Do we have artifact type (MVN/NPM) easily available? I guess we know it from the context, but I think that we could have it here so we know how to parse the identifier.", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508471630", "createdAt": "2020-10-20T12:48:54Z", "author": {"login": "janinko"}, "path": "dto/src/main/java/org/jboss/pnc/dto/response/ArtifactInfo.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.dto.response;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Data;\n+import org.jboss.pnc.enums.ArtifactQuality;\n+\n+/**\n+ * Really basic Artifact info for optimized queries.\n+ *\n+ * @author Dominik Br\u00e1zdil &lt;dbrazdil@redhat.com&gt;\n+ */\n+@Data\n+@Builder(builderClassName = \"Builder\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonDeserialize(builder = ArtifactInfo.Builder.class)\n+public class ArtifactInfo {\n+\n+    /**\n+     * ID of the artifact.\n+     */\n+    protected final String id;\n+\n+    /**\n+     * A unique identifier of the artifact in a repository. For example, for a maven artifact this is the GATVC\n+     * (groupId:artifactId:type:version[:classifier] The format of the identifier string is determined by the repository\n+     * type.\n+     */\n+    protected final String identifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4858f15f05ec0e0091765cb18fc82509fbf7b799", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/4858f15f05ec0e0091765cb18fc82509fbf7b799", "committedDate": "2020-10-20T07:56:06Z", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA"}, "afterCommit": {"oid": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "committedDate": "2020-10-20T14:08:01Z", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyODc0ODM1", "url": "https://github.com/project-ncl/pnc/pull/3347#pullrequestreview-512874835", "createdAt": "2020-10-20T15:40:34Z", "commit": {"oid": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyOTA3NjQw", "url": "https://github.com/project-ncl/pnc/pull/3347#pullrequestreview-512907640", "createdAt": "2020-10-20T16:13:49Z", "commit": {"oid": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoxMzo0OVrOHlGMgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoxNjozOVrOHlGYag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MDg2NQ==", "bodyText": "No need to wrap set to Optional:\n\nIf @DefaultValue is not used and the corresponding meta-data is not present in the request, the value will be an empty collection for List, Set or SortedSet, null for other object types, and the Java-defined default for primitive types.\nhttps://docs.oracle.com/javaee/7/api/javax/ws/rs/DefaultValue.html", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508660865", "createdAt": "2020-10-20T16:13:49Z", "author": {"login": "janinko"}, "path": "rest/src/main/java/org/jboss/pnc/rest/endpoints/ArtifactEndpointImpl.java", "diffHunk": "@@ -75,6 +79,20 @@ public void init() {\n                 Optional.ofNullable(sha1));\n     }\n \n+    @Override\n+    public Page<ArtifactInfo> getAllFiltered(\n+            PaginationParameters paginationParameters,\n+            String identifier,\n+            Set<ArtifactQuality> qualities,\n+            RepositoryType repoType) {\n+        return artifactProvider.getAllFiltered(\n+                paginationParameters.getPageIndex(),\n+                paginationParameters.getPageSize(),\n+                Optional.ofNullable(identifier),\n+                Optional.ofNullable(qualities),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzkxNA==", "bodyText": "Why are all the parameters optional? Wouldn't we always want to specify at least the identifier? And I would say repoType too.", "url": "https://github.com/project-ncl/pnc/pull/3347#discussion_r508663914", "createdAt": "2020-10-20T16:16:39Z", "author": {"login": "janinko"}, "path": "rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/ArtifactEndpoint.java", "diffHunk": "@@ -113,6 +117,43 @@\n             @Parameter(description = FILTER_MD5_DESC) @QueryParam(\"md5\") String md5,\n             @Parameter(description = FILTER_SHA1_DESC) @QueryParam(\"sha1\") String sha1);\n \n+    static final String GET_ALL_FILTERED_DESC = \"Gets all artifacts according to specified filters.\";\n+    static final String FILTER_IDENTIFIER_DESC = \"Filter by artifact identifier or its part.\";\n+    static final String FILTER_QUALITY_DESC = \"List of artifact qualities to include in result.\";\n+    static final String FILTER_REPOSITORY_TYPE_DESC = \"Type of target repository.\";\n+\n+    /**\n+     * {@value GET_ALL_FILTERED_DESC}\n+     *\n+     * @param paginationParameters\n+     * @param identifier {@value FILTER_IDENTIFIER_DESC}\n+     * @param qualities {@value FILTER_QUALITY_DESC}\n+     * @param repoType {@value FILTER_REPOSITORY_TYPE_DESC}\n+     * @return\n+     */\n+    @Operation(\n+            summary = GET_ALL_FILTERED_DESC,\n+            responses = {\n+                    @ApiResponse(\n+                            responseCode = SUCCESS_CODE,\n+                            description = SUCCESS_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ArtifactInfoPage.class))),\n+                    @ApiResponse(\n+                            responseCode = INVALID_CODE,\n+                            description = INVALID_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ErrorResponse.class))),\n+                    @ApiResponse(\n+                            responseCode = SERVER_ERROR_CODE,\n+                            description = SERVER_ERROR_DESCRIPTION,\n+                            content = @Content(schema = @Schema(implementation = ErrorResponse.class))) })\n+    @GET\n+    @Path(\"/filter\")\n+    Page<ArtifactInfo> getAllFiltered(\n+            @Valid @BeanParam PaginationParameters paginationParameters,\n+            @Parameter(description = FILTER_IDENTIFIER_DESC) @QueryParam(\"identifier\") String identifier,\n+            @Parameter(description = FILTER_QUALITY_DESC) @QueryParam(\"qualities\") Set<ArtifactQuality> qualities,\n+            @Parameter(description = FILTER_REPOSITORY_TYPE_DESC) @QueryParam(\"repoType\") RepositoryType repoType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e3992771753652b031a1c77af7e10946f3ae7f0", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/4e3992771753652b031a1c77af7e10946f3ae7f0", "committedDate": "2020-10-22T07:25:12Z", "message": "[NCL-6163] New endpoint on Artifact with direct filtering for DA"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/c8adfe91a29f8bfb04761919ca1447fd6dc5b6c1", "committedDate": "2020-10-20T14:08:01Z", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA"}, "afterCommit": {"oid": "a8b770a10ef810526492e39aa75fd58538a88537", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/a8b770a10ef810526492e39aa75fd58538a88537", "committedDate": "2020-10-22T07:25:12Z", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98f7f8099ce4cb0f9bb86afbd8387d2b593d91e9", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/98f7f8099ce4cb0f9bb86afbd8387d2b593d91e9", "committedDate": "2020-10-22T08:15:13Z", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8b770a10ef810526492e39aa75fd58538a88537", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/a8b770a10ef810526492e39aa75fd58538a88537", "committedDate": "2020-10-22T07:25:12Z", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA"}, "afterCommit": {"oid": "98f7f8099ce4cb0f9bb86afbd8387d2b593d91e9", "author": {"user": {"login": "dominikbrazdil", "name": null}}, "url": "https://github.com/project-ncl/pnc/commit/98f7f8099ce4cb0f9bb86afbd8387d2b593d91e9", "committedDate": "2020-10-22T08:15:13Z", "message": "[NCL-6163] Optimize new Artifacts endpoint for DA"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NTI2MjQ2", "url": "https://github.com/project-ncl/pnc/pull/3347#pullrequestreview-514526246", "createdAt": "2020-10-22T09:21:26Z", "commit": {"oid": "98f7f8099ce4cb0f9bb86afbd8387d2b593d91e9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2546, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}