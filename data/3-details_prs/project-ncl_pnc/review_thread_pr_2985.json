{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MzE3MTIz", "number": 2985, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoxNjozNFrOD0NjMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyMDowM1rOD0NpWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDc0NTQ0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/org/jboss/pnc/common/concurrent/Sequence.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoxNjozNFrOGJCjjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoxNjozNFrOGJCjjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMjIzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Map<Integer, Sequence> instance = new ConcurrentHashMap<>();\n          \n          \n            \n                private static final Map<Integer, Sequence> instance = new ConcurrentHashMap<>(1,1.0f);", "url": "https://github.com/project-ncl/pnc/pull/2985#discussion_r412132236", "createdAt": "2020-04-21T12:16:34Z", "author": {"login": "janinko"}, "path": "common/src/main/java/org/jboss/pnc/common/concurrent/Sequence.java", "diffHunk": "@@ -20,13 +20,47 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n+/**\n+ * A class for generating 64-bit unique IDs at high scale. The IDs generated by this service are roughly time sortable.\n+ *\n+ * The ID generation follows Twitter snowflake pattern and the IDs are made up of the following components:\n+ *\n+ * Epoch timestamp in millisecond precision - 41 bits (gives us 69 years with a custom epoch) Configured machine id - 10\n+ * bits (gives us up to 1024 machines) Sequence number - 12 bits (A local counter per machine that rolls over every\n+ * 4096)\n+ */\n public class Sequence {\n \n-    private static final Map<Integer, SequenceGenerator> instance = new ConcurrentHashMap<>();\n-    private static final int INSTANCE_KEY = 0;\n+    private static final Map<Integer, Sequence> instance = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69a995a0ccbe7c041ae0c6fc2093d6d7a8cba60"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDc2MTIyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/org/jboss/pnc/common/concurrent/Sequence.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyMDowM1rOGJCspA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDozNDoxOFrOGJJHcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNDU2NA==", "bodyText": "Make the 0 constant.", "url": "https://github.com/project-ncl/pnc/pull/2985#discussion_r412134564", "createdAt": "2020-04-21T12:20:03Z", "author": {"login": "janinko"}, "path": "common/src/main/java/org/jboss/pnc/common/concurrent/Sequence.java", "diffHunk": "@@ -20,13 +20,47 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n+/**\n+ * A class for generating 64-bit unique IDs at high scale. The IDs generated by this service are roughly time sortable.\n+ *\n+ * The ID generation follows Twitter snowflake pattern and the IDs are made up of the following components:\n+ *\n+ * Epoch timestamp in millisecond precision - 41 bits (gives us 69 years with a custom epoch) Configured machine id - 10\n+ * bits (gives us up to 1024 machines) Sequence number - 12 bits (A local counter per machine that rolls over every\n+ * 4096)\n+ */\n public class Sequence {\n \n-    private static final Map<Integer, SequenceGenerator> instance = new ConcurrentHashMap<>();\n-    private static final int INSTANCE_KEY = 0;\n+    private static final Map<Integer, Sequence> instance = new ConcurrentHashMap<>();\n+\n+    /**\n+     * If nodeId is used, it can be set only once and have to be set before the first nextId() call. If nodeId is not\n+     * explicitly defined it's calculated based on machines mac address.\n+     *\n+     * @param nodeId an int value between (inclusive) 0 and 1023.\n+     */\n+    public static void setNodeId(int nodeId) {\n+        getInstance(nodeId);\n+    }\n \n     public static Long nextId() {\n-        SequenceGenerator sequenceGenerator = instance.computeIfAbsent(INSTANCE_KEY, k -> new SequenceGenerator());\n-        return sequenceGenerator.nextId();\n+        return getInstance(null).sequenceGenerator.nextId();\n+    }\n+\n+    private static Sequence getInstance(Integer nodeId) {\n+        return instance.computeIfAbsent(0, k -> new Sequence(nodeId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69a995a0ccbe7c041ae0c6fc2093d6d7a8cba60"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE4MDY4NQ==", "bodyText": "What the benefit of using the constant, it's used only here and it can be anything ?", "url": "https://github.com/project-ncl/pnc/pull/2985#discussion_r412180685", "createdAt": "2020-04-21T13:23:58Z", "author": {"login": "matejonnet"}, "path": "common/src/main/java/org/jboss/pnc/common/concurrent/Sequence.java", "diffHunk": "@@ -20,13 +20,47 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n+/**\n+ * A class for generating 64-bit unique IDs at high scale. The IDs generated by this service are roughly time sortable.\n+ *\n+ * The ID generation follows Twitter snowflake pattern and the IDs are made up of the following components:\n+ *\n+ * Epoch timestamp in millisecond precision - 41 bits (gives us 69 years with a custom epoch) Configured machine id - 10\n+ * bits (gives us up to 1024 machines) Sequence number - 12 bits (A local counter per machine that rolls over every\n+ * 4096)\n+ */\n public class Sequence {\n \n-    private static final Map<Integer, SequenceGenerator> instance = new ConcurrentHashMap<>();\n-    private static final int INSTANCE_KEY = 0;\n+    private static final Map<Integer, Sequence> instance = new ConcurrentHashMap<>();\n+\n+    /**\n+     * If nodeId is used, it can be set only once and have to be set before the first nextId() call. If nodeId is not\n+     * explicitly defined it's calculated based on machines mac address.\n+     *\n+     * @param nodeId an int value between (inclusive) 0 and 1023.\n+     */\n+    public static void setNodeId(int nodeId) {\n+        getInstance(nodeId);\n+    }\n \n     public static Long nextId() {\n-        SequenceGenerator sequenceGenerator = instance.computeIfAbsent(INSTANCE_KEY, k -> new SequenceGenerator());\n-        return sequenceGenerator.nextId();\n+        return getInstance(null).sequenceGenerator.nextId();\n+    }\n+\n+    private static Sequence getInstance(Integer nodeId) {\n+        return instance.computeIfAbsent(0, k -> new Sequence(nodeId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNDU2NA=="}, "originalCommit": {"oid": "d69a995a0ccbe7c041ae0c6fc2093d6d7a8cba60"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzOTcyOQ==", "bodyText": "readability - giving it a name may be less confusing (\"Why is there zero? Why not one?\")\nnegligible speed - making it Integer constant removes the autoboxing of int.\n\ngcode with autoboxing:\n       3: iconst_0\n       4: invokestatic  #3                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n\ngcode with constant:\n       3: getstatic     #3                  // Field KEY:Ljava/lang/Integer;", "url": "https://github.com/project-ncl/pnc/pull/2985#discussion_r412239729", "createdAt": "2020-04-21T14:34:18Z", "author": {"login": "janinko"}, "path": "common/src/main/java/org/jboss/pnc/common/concurrent/Sequence.java", "diffHunk": "@@ -20,13 +20,47 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n+/**\n+ * A class for generating 64-bit unique IDs at high scale. The IDs generated by this service are roughly time sortable.\n+ *\n+ * The ID generation follows Twitter snowflake pattern and the IDs are made up of the following components:\n+ *\n+ * Epoch timestamp in millisecond precision - 41 bits (gives us 69 years with a custom epoch) Configured machine id - 10\n+ * bits (gives us up to 1024 machines) Sequence number - 12 bits (A local counter per machine that rolls over every\n+ * 4096)\n+ */\n public class Sequence {\n \n-    private static final Map<Integer, SequenceGenerator> instance = new ConcurrentHashMap<>();\n-    private static final int INSTANCE_KEY = 0;\n+    private static final Map<Integer, Sequence> instance = new ConcurrentHashMap<>();\n+\n+    /**\n+     * If nodeId is used, it can be set only once and have to be set before the first nextId() call. If nodeId is not\n+     * explicitly defined it's calculated based on machines mac address.\n+     *\n+     * @param nodeId an int value between (inclusive) 0 and 1023.\n+     */\n+    public static void setNodeId(int nodeId) {\n+        getInstance(nodeId);\n+    }\n \n     public static Long nextId() {\n-        SequenceGenerator sequenceGenerator = instance.computeIfAbsent(INSTANCE_KEY, k -> new SequenceGenerator());\n-        return sequenceGenerator.nextId();\n+        return getInstance(null).sequenceGenerator.nextId();\n+    }\n+\n+    private static Sequence getInstance(Integer nodeId) {\n+        return instance.computeIfAbsent(0, k -> new Sequence(nodeId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNDU2NA=="}, "originalCommit": {"oid": "d69a995a0ccbe7c041ae0c6fc2093d6d7a8cba60"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1855, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}