{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMjI5OTM2", "number": 2828, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzozNDozN1rODcogYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyNjo1M1rODcq90w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzUwMzY4OnYy", "diffSide": "RIGHT", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzozNDozN1rOFkxeFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzozNDozN1rOFkxeFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwMzU3NQ==", "bodyText": "What about old.ifPresent(attributes::remove);", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374103575", "createdAt": "2020-02-03T13:34:37Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");\n+        }\n+        Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n+        BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n+        if (old.isPresent()) {\n+            attributes.remove(old.get());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzUwNjI1OnYy", "diffSide": "RIGHT", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzozNTozMFrOFkxftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1NToxN1rOFk2XoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwMzk4OQ==", "bodyText": "return old.orElse(null);", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374103989", "createdAt": "2020-02-03T13:35:30Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");\n+        }\n+        Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n+        BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n+        if (old.isPresent()) {\n+            attributes.remove(old.get());\n+        }\n+        attributes.add(attribute);\n+        if (old.isPresent()) {\n+            return old.get().getValue();\n+        } else {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4Mzg0MA==", "bodyText": "It have to return the value of the optional object.", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374183840", "createdAt": "2020-02-03T15:55:17Z", "author": {"login": "matejonnet"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");\n+        }\n+        Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n+        BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n+        if (old.isPresent()) {\n+            attributes.remove(old.get());\n+        }\n+        attributes.add(attribute);\n+        if (old.isPresent()) {\n+            return old.get().getValue();\n+        } else {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwMzk4OQ=="}, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzUxMjM3OnYy", "diffSide": "RIGHT", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzozNzoyNlrOFkxjbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1NzowMlrOFk2cEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNDk0MQ==", "bodyText": "I guess this is this really necessary and Hibernate can't handle it with null id?", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374104941", "createdAt": "2020-02-03T13:37:26Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NDk3Ng==", "bodyText": "I did try with PrePersist to set the id but didn't manage to make it work.", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374184976", "createdAt": "2020-02-03T15:57:02Z", "author": {"login": "matejonnet"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNDk0MQ=="}, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzUxNTAzOnYy", "diffSide": "RIGHT", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzozODoxNlrOFkxlBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1NzoyN1rOFk2dGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNTM1MA==", "bodyText": "return getAttributeEntity(key).orElse(null);", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374105350", "createdAt": "2020-02-03T13:38:16Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTI0MQ==", "bodyText": "The value!", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374185241", "createdAt": "2020-02-03T15:57:27Z", "author": {"login": "matejonnet"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNTM1MA=="}, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzUxODQxOnYy", "diffSide": "RIGHT", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzozOToxOVrOFkxm9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzozOToxOVrOFkxm9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNTg0NQ==", "bodyText": "Somebody finds this nicer :)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    attribute.ifPresent(a -> attributes.remove(a));\n          \n          \n            \n                    attribute.ifPresent(attributes::remove);", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374105845", "createdAt": "2020-02-03T13:39:19Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecord.java", "diffHunk": "@@ -673,24 +669,51 @@ public String toString() {\n         return \"BuildRecord [id=\" + id + \", buildConfiguration=\" + buildConfigurationAudited + \", status=\" + status + \"]\";\n     }\n \n-    public Map<String, String> getAttributes() {\n+    public Set<BuildRecordAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(Map<String, String> attributes) {\n+    public Map<String,String> getAttributesMap() {\n+        return attributes.stream().collect(Collectors.toMap(BuildRecordAttribute::getKey, BuildRecordAttribute::getValue));\n+    }\n+\n+    public void setAttributes(Set<BuildRecordAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n     public String getAttribute(String key) {\n-        return attributes.get(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        if (attribute.isPresent()) {\n+            return attribute.get().getValue();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Optional<BuildRecordAttribute> getAttributeEntity(String key) {\n+        return attributes.stream().filter(a -> a.key.equals(key)).findAny();\n     }\n \n     public String putAttribute(String key, String value) {\n-        return attributes.put(key, value);\n+        if (this.id == null) {\n+            throw new PersistenceException(\"Build record id must be set before adding the attributes.\");\n+        }\n+        Optional<BuildRecordAttribute> old = getAttributeEntity(key);\n+        BuildRecordAttribute attribute = new BuildRecordAttribute(this.id, key, value);\n+        if (old.isPresent()) {\n+            attributes.remove(old.get());\n+        }\n+        attributes.add(attribute);\n+        if (old.isPresent()) {\n+            return old.get().getValue();\n+        } else {\n+            return null;\n+        }\n     }\n \n     public void removeAttribute(String key) {\n-        attributes.remove(key);\n+        Optional<BuildRecordAttribute> attribute = getAttributeEntity(key);\n+        attribute.ifPresent(a -> attributes.remove(a));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzYwNTg2OnYy", "diffSide": "RIGHT", "path": "rest-new/src/main/java/org/jboss/pnc/rest/endpoints/BuildEndpointImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDowNTowMVrOFkybVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDowNTowMVrOFkybVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDExOTI1Mg==", "bodyText": "We don't want to allow : in the value? If we want then use:\n            String[] kv = attribute.split(\":\", 2);\n            if (kv.length == 2) {\n                map.put(kv[0],kv[1]);\n            } else {\n                map.put(kv[0],\"\");\n            }", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374119252", "createdAt": "2020-02-03T14:05:01Z", "author": {"login": "janinko"}, "path": "rest-new/src/main/java/org/jboss/pnc/rest/endpoints/BuildEndpointImpl.java", "diffHunk": "@@ -119,8 +121,28 @@ public void update(String id, Build build) {\n     }\n \n     @Override\n-    public Page<Build> getAll(PageParameters pageParams, BuildsFilterParameters filterParams, BuildAttributeParameters attributes) {\n-        return provider.getBuilds(toBuildPageInfo(pageParams, filterParams));\n+    public Page<Build> getAll(PageParameters pageParams, BuildsFilterParameters filterParams, List<String> attributes) {\n+        if (attributes != null && !attributes.isEmpty()) {\n+            Map<String,String> attributeConstraints = parseAttributes(attributes);\n+            return provider.getByAttribute(toBuildPageInfo(pageParams, filterParams), attributeConstraints);\n+        } else {\n+            return provider.getBuilds(toBuildPageInfo(pageParams, filterParams));\n+        }\n+    }\n+\n+    private Map<String, String> parseAttributes(List<String> attributes) {\n+        Map<String, String> map = new HashMap<>();\n+        for (String attribute : attributes) {\n+            String[] kv = attribute.split(\":\");\n+            if (kv.length == 2) {\n+                map.put(kv[0],kv[1]);\n+            } else if (kv.length == 1) {\n+                map.put(kv[0],\"\");\n+            } else {\n+                throw new BadRequestException(\"Invalid 'attributes' query parameters.\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzYyNTMwOnYy", "diffSide": "RIGHT", "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxMDo0N1rOFkym3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxMDo0N1rOFkym3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMjIwNg==", "bodyText": "Does this result in 400 or 500 error? I think we should give 400 in this (and the key == null) case.", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374122206", "createdAt": "2020-02-03T14:10:47Z", "author": {"login": "janinko"}, "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -213,6 +216,9 @@ public void addAttribute(String id, String key, String value) {\n         if(null == key){\n             throw new IllegalArgumentException(\"Attribute key must not be null\");\n         }\n+        if(!key.matches(\"[a-zA-Z_0-9]+\")){\n+            throw new IllegalArgumentException(\"Attribute key must match [a-zA-Z_0-9]+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzg3MzQ3OnYy", "diffSide": "RIGHT", "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToxODozNVrOFk0_cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToxODozNVrOFk0_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2MTI2Ng==", "bodyText": "Should you skip the first character !?", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374161266", "createdAt": "2020-02-03T15:18:35Z", "author": {"login": "janinko"}, "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -599,6 +605,39 @@ public void setDependentArtifacts(String id, List<String> artifactIds) {\n         repository.save(buildRecord);\n     }\n \n+    public Page<Build> getByAttribute(BuildPageInfo buildPageInfo, Map<String, String> attributeConstraints) {\n+        Set<Predicate<BuildRecord>> predicates = new HashSet<>();\n+        for (Map.Entry<String, String> entry : attributeConstraints.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if (key.startsWith(\"!\")) {\n+                withoutAttribute(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzg5MDQyOnYy", "diffSide": "RIGHT", "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyMjo1NlrOFk1J1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyMjo1NlrOFk1J1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2MzkyNw==", "bodyText": "You are ignoring the RSQL query. I think it should be also used.", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374163927", "createdAt": "2020-02-03T15:22:56Z", "author": {"login": "janinko"}, "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -599,6 +605,39 @@ public void setDependentArtifacts(String id, List<String> artifactIds) {\n         repository.save(buildRecord);\n     }\n \n+    public Page<Build> getByAttribute(BuildPageInfo buildPageInfo, Map<String, String> attributeConstraints) {\n+        Set<Predicate<BuildRecord>> predicates = new HashSet<>();\n+        for (Map.Entry<String, String> entry : attributeConstraints.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if (key.startsWith(\"!\")) {\n+                withoutAttribute(key);\n+            } else {\n+                withAttribute(key, value);\n+            }\n+        }\n+\n+        Predicate<BuildRecord>[] predicatesArray = predicates.toArray(new Predicate[predicates.size()]);\n+\n+        PageInfo pageInfo = toPageInfo(buildPageInfo);\n+        SortInfo sortInfo = rsqlPredicateProducer.getSortInfo(type, buildPageInfo.getSort());\n+        List<BuildRecord> resultList = ((BuildRecordRepository) BuildProviderImpl.this.repository)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzg5MzYxOnYy", "diffSide": "RIGHT", "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyMzo0NlrOFk1L9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyMzo0NlrOFk1L9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NDQ2OA==", "bodyText": "There should be new construcotr that does the page count computation, so you don't need to include this line.", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374164468", "createdAt": "2020-02-03T15:23:46Z", "author": {"login": "janinko"}, "path": "facade/src/main/java/org/jboss/pnc/facade/providers/BuildProviderImpl.java", "diffHunk": "@@ -599,6 +605,39 @@ public void setDependentArtifacts(String id, List<String> artifactIds) {\n         repository.save(buildRecord);\n     }\n \n+    public Page<Build> getByAttribute(BuildPageInfo buildPageInfo, Map<String, String> attributeConstraints) {\n+        Set<Predicate<BuildRecord>> predicates = new HashSet<>();\n+        for (Map.Entry<String, String> entry : attributeConstraints.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if (key.startsWith(\"!\")) {\n+                withoutAttribute(key);\n+            } else {\n+                withAttribute(key, value);\n+            }\n+        }\n+\n+        Predicate<BuildRecord>[] predicatesArray = predicates.toArray(new Predicate[predicates.size()]);\n+\n+        PageInfo pageInfo = toPageInfo(buildPageInfo);\n+        SortInfo sortInfo = rsqlPredicateProducer.getSortInfo(type, buildPageInfo.getSort());\n+        List<BuildRecord> resultList = ((BuildRecordRepository) BuildProviderImpl.this.repository)\n+                .queryWithPredicatesUsingCursor(pageInfo, sortInfo, predicatesArray);\n+\n+        int hits = repository.count(predicatesArray);\n+\n+        return new Page<>(\n+                buildPageInfo.getPageIndex(),\n+                buildPageInfo.getPageSize(),\n+                (int) Math.ceil((double) hits / buildPageInfo.getPageSize()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzkwMTMxOnYy", "diffSide": "RIGHT", "path": "rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/BuildEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyNTozN1rOFk1Qcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyNTozN1rOFk1Qcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NTYxOQ==", "bodyText": "Could you add to the addAttribute method mention what are the restrictions on the key format?", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374165619", "createdAt": "2020-02-03T15:25:37Z", "author": {"login": "janinko"}, "path": "rest-api/src/main/java/org/jboss/pnc/rest/api/endpoints/BuildEndpoint.java", "diffHunk": "@@ -91,6 +90,10 @@\n     static final String BUILD_STATUS = \"Status of the build\";\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzkwNjc1OnYy", "diffSide": "RIGHT", "path": "model/src/main/java/org/jboss/pnc/model/BuildRecordAttribute.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyNjo1M1rOFk1Tvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyNjo1M1rOFk1Tvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NjQ2Mg==", "bodyText": "private", "url": "https://github.com/project-ncl/pnc/pull/2828#discussion_r374166462", "createdAt": "2020-02-03T15:26:53Z", "author": {"login": "janinko"}, "path": "model/src/main/java/org/jboss/pnc/model/BuildRecordAttribute.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2019 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.model;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.Table;\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+@Entity\n+@Table(name = \"build_record_attributes\")\n+@IdClass(BuildRecordAttribute.AttributeId.class)\n+public class BuildRecordAttribute implements Serializable {\n+\n+    @Id\n+    Integer buildRecordId;\n+\n+    @Id\n+    String key;\n+\n+    String value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51edbff0909746479d85f892c1fe9c5df26495ca"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1930, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}