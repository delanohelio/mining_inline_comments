{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MDMzMzkw", "number": 3030, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1Njo0NFrOD7_rXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1ODowMVrOD7_tZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjM1ODcwOnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/jboss/pnc/integration_new/endpoint/RestTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1Njo0NFrOGUqTZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1Njo0NFrOGUqTZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMxNzc5Ng==", "bodyText": "extract the common API path to separate constant please (it will change in the future)", "url": "https://github.com/project-ncl/pnc/pull/3030#discussion_r424317796", "createdAt": "2020-05-13T09:56:44Z", "author": {"login": "janinko"}, "path": "integration-test/src/test/java/org/jboss/pnc/integration_new/endpoint/RestTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.integration_new.endpoint;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import org.assertj.core.api.Assertions;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.junit.InSequence;\n+import org.jboss.pnc.AbstractTest;\n+import org.jboss.pnc.common.json.JsonUtils;\n+import org.jboss.pnc.common.util.IoUtils;\n+import org.jboss.pnc.dto.Product;\n+import org.jboss.pnc.dto.Project;\n+import org.jboss.pnc.integration.matchers.JsonMatcher;\n+import org.jboss.pnc.integration_new.setup.Deployments;\n+import org.jboss.pnc.test.category.ContainerTest;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.jboss.pnc.integration.env.IntegrationTestEnv.getHttpPort;\n+\n+/**\n+ * @author <a href=\"mailto:dbrazdil@redhat.com\">Dominik Brazdil</a>\n+ *\n+ * @see org.jboss.pnc.demo.data.DatabaseDataInitializer\n+ */\n+@RunAsClient\n+@RunWith(Arquillian.class)\n+@Category(ContainerTest.class)\n+public class RestTest extends AbstractTest {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+    private static final String USER_REST_ENDPOINT = \"/pnc-rest-new/rest-new/users/\";\n+    private static final String PRODUCT_REST_ENDPOINT = \"/pnc-rest-new/rest-new/products/\";\n+    private static final String PRODUCT_VERSION_REST_ENDPOINT = \"/pnc-rest-new/rest-new/product-versions/\";\n+    private static final String PROJECT_REST_ENDPOINT = \"/pnc-rest-new/rest-new/projects/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14dd546ac9897488572d0c56a2fd7b25494f5a18"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjM2Mzg5OnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/jboss/pnc/integration_new/endpoint/RestTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1ODowMVrOGUqWgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1OToxMlrOGUqZVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMxODU5Mw==", "bodyText": "can this be done in simmilar fashion to the other tests?\n.then().statusCode(201).body(JsonMatcher...", "url": "https://github.com/project-ncl/pnc/pull/3030#discussion_r424318593", "createdAt": "2020-05-13T09:58:01Z", "author": {"login": "janinko"}, "path": "integration-test/src/test/java/org/jboss/pnc/integration_new/endpoint/RestTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.integration_new.endpoint;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import org.assertj.core.api.Assertions;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.junit.InSequence;\n+import org.jboss.pnc.AbstractTest;\n+import org.jboss.pnc.common.json.JsonUtils;\n+import org.jboss.pnc.common.util.IoUtils;\n+import org.jboss.pnc.dto.Product;\n+import org.jboss.pnc.dto.Project;\n+import org.jboss.pnc.integration.matchers.JsonMatcher;\n+import org.jboss.pnc.integration_new.setup.Deployments;\n+import org.jboss.pnc.test.category.ContainerTest;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.jboss.pnc.integration.env.IntegrationTestEnv.getHttpPort;\n+\n+/**\n+ * @author <a href=\"mailto:dbrazdil@redhat.com\">Dominik Brazdil</a>\n+ *\n+ * @see org.jboss.pnc.demo.data.DatabaseDataInitializer\n+ */\n+@RunAsClient\n+@RunWith(Arquillian.class)\n+@Category(ContainerTest.class)\n+public class RestTest extends AbstractTest {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+    private static final String USER_REST_ENDPOINT = \"/pnc-rest-new/rest-new/users/\";\n+    private static final String PRODUCT_REST_ENDPOINT = \"/pnc-rest-new/rest-new/products/\";\n+    private static final String PRODUCT_VERSION_REST_ENDPOINT = \"/pnc-rest-new/rest-new/product-versions/\";\n+    private static final String PROJECT_REST_ENDPOINT = \"/pnc-rest-new/rest-new/projects/\";\n+    private static final String JSON_PATCH = \"application/json-patch+json\";\n+\n+    private static String productId;\n+    private static String productVersionId;\n+    private static String projectId;\n+    private static String newProductId;\n+    private static String newProjectId;\n+\n+    @Deployment\n+    public static EnterpriseArchive deploy() {\n+        return Deployments.testEar();\n+    }\n+\n+    @Test\n+    public void shouldGetAllProducts() {\n+        given().headers(testHeaders)\n+                .contentType(ContentType.JSON)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PRODUCT_REST_ENDPOINT)\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(FIRST_CONTENT_ID, value -> productId = value));\n+    }\n+\n+    @Test\n+    @InSequence(1)\n+    public void shouldGetSpecificProduct() {\n+        given().headers(testHeaders)\n+                .contentType(JSON_PATCH)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PRODUCT_REST_ENDPOINT + productId)\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(\"id\"));\n+    }\n+\n+    @Test\n+    @InSequence(2)\n+    public void shouldGetAllProductsVersionsForSpecificProduct() {\n+        given().headers(testHeaders)\n+                .contentType(ContentType.JSON)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PRODUCT_REST_ENDPOINT + productId + \"/versions\")\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(FIRST_CONTENT_ID, value -> productVersionId = value));\n+    }\n+\n+    @Test\n+    @InSequence(3)\n+    public void shouldGetSpecificProductsVersions() {\n+        given().headers(testHeaders)\n+                .contentType(JSON_PATCH)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PRODUCT_VERSION_REST_ENDPOINT + productVersionId)\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(\"id\", value -> productVersionId = value));\n+    }\n+\n+    @Test\n+    @InSequence(4)\n+    public void shouldGetAllProjects() {\n+        given().headers(testHeaders)\n+                .contentType(ContentType.JSON)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PROJECT_REST_ENDPOINT)\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(FIRST_CONTENT_ID, value -> projectId = value));\n+    }\n+\n+    @Test\n+    @InSequence(5)\n+    public void shouldGetSpecificProject() {\n+        given().headers(testHeaders)\n+                .contentType(JSON_PATCH)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PROJECT_REST_ENDPOINT + projectId)\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(\"id\"));\n+    }\n+\n+    @Test\n+    @InSequence(6)\n+    public void shouldGetCurrentUser() {\n+        given().headers(testHeaders)\n+                .contentType(ContentType.JSON)\n+                .port(getHttpPort())\n+                .when()\n+                .get(USER_REST_ENDPOINT + \"current\")\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(\"id\"));\n+    }\n+\n+    @Test\n+    @InSequence(7)\n+    public void shouldCreateNewProduct() throws IOException {\n+        String rawJson = IoUtils.readFileOrResource(\"product\", \"product.json\", getClass().getClassLoader());\n+\n+        Response response = given().headers(testHeaders)\n+                .body(rawJson)\n+                .contentType(ContentType.JSON)\n+                .port(getHttpPort())\n+                .when()\n+                .post(PRODUCT_REST_ENDPOINT);\n+        Assertions.assertThat(response.statusCode()).isEqualTo(201);\n+\n+        newProductId = response.getBody().jsonPath().get(\"id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14dd546ac9897488572d0c56a2fd7b25494f5a18"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMxOTMxOQ==", "bodyText": "And the same for the following tests too.", "url": "https://github.com/project-ncl/pnc/pull/3030#discussion_r424319319", "createdAt": "2020-05-13T09:59:12Z", "author": {"login": "janinko"}, "path": "integration-test/src/test/java/org/jboss/pnc/integration_new/endpoint/RestTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.integration_new.endpoint;\n+\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import org.assertj.core.api.Assertions;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.junit.InSequence;\n+import org.jboss.pnc.AbstractTest;\n+import org.jboss.pnc.common.json.JsonUtils;\n+import org.jboss.pnc.common.util.IoUtils;\n+import org.jboss.pnc.dto.Product;\n+import org.jboss.pnc.dto.Project;\n+import org.jboss.pnc.integration.matchers.JsonMatcher;\n+import org.jboss.pnc.integration_new.setup.Deployments;\n+import org.jboss.pnc.test.category.ContainerTest;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.jboss.pnc.integration.env.IntegrationTestEnv.getHttpPort;\n+\n+/**\n+ * @author <a href=\"mailto:dbrazdil@redhat.com\">Dominik Brazdil</a>\n+ *\n+ * @see org.jboss.pnc.demo.data.DatabaseDataInitializer\n+ */\n+@RunAsClient\n+@RunWith(Arquillian.class)\n+@Category(ContainerTest.class)\n+public class RestTest extends AbstractTest {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+    private static final String USER_REST_ENDPOINT = \"/pnc-rest-new/rest-new/users/\";\n+    private static final String PRODUCT_REST_ENDPOINT = \"/pnc-rest-new/rest-new/products/\";\n+    private static final String PRODUCT_VERSION_REST_ENDPOINT = \"/pnc-rest-new/rest-new/product-versions/\";\n+    private static final String PROJECT_REST_ENDPOINT = \"/pnc-rest-new/rest-new/projects/\";\n+    private static final String JSON_PATCH = \"application/json-patch+json\";\n+\n+    private static String productId;\n+    private static String productVersionId;\n+    private static String projectId;\n+    private static String newProductId;\n+    private static String newProjectId;\n+\n+    @Deployment\n+    public static EnterpriseArchive deploy() {\n+        return Deployments.testEar();\n+    }\n+\n+    @Test\n+    public void shouldGetAllProducts() {\n+        given().headers(testHeaders)\n+                .contentType(ContentType.JSON)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PRODUCT_REST_ENDPOINT)\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(FIRST_CONTENT_ID, value -> productId = value));\n+    }\n+\n+    @Test\n+    @InSequence(1)\n+    public void shouldGetSpecificProduct() {\n+        given().headers(testHeaders)\n+                .contentType(JSON_PATCH)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PRODUCT_REST_ENDPOINT + productId)\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(\"id\"));\n+    }\n+\n+    @Test\n+    @InSequence(2)\n+    public void shouldGetAllProductsVersionsForSpecificProduct() {\n+        given().headers(testHeaders)\n+                .contentType(ContentType.JSON)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PRODUCT_REST_ENDPOINT + productId + \"/versions\")\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(FIRST_CONTENT_ID, value -> productVersionId = value));\n+    }\n+\n+    @Test\n+    @InSequence(3)\n+    public void shouldGetSpecificProductsVersions() {\n+        given().headers(testHeaders)\n+                .contentType(JSON_PATCH)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PRODUCT_VERSION_REST_ENDPOINT + productVersionId)\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(\"id\", value -> productVersionId = value));\n+    }\n+\n+    @Test\n+    @InSequence(4)\n+    public void shouldGetAllProjects() {\n+        given().headers(testHeaders)\n+                .contentType(ContentType.JSON)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PROJECT_REST_ENDPOINT)\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(FIRST_CONTENT_ID, value -> projectId = value));\n+    }\n+\n+    @Test\n+    @InSequence(5)\n+    public void shouldGetSpecificProject() {\n+        given().headers(testHeaders)\n+                .contentType(JSON_PATCH)\n+                .port(getHttpPort())\n+                .when()\n+                .get(PROJECT_REST_ENDPOINT + projectId)\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(\"id\"));\n+    }\n+\n+    @Test\n+    @InSequence(6)\n+    public void shouldGetCurrentUser() {\n+        given().headers(testHeaders)\n+                .contentType(ContentType.JSON)\n+                .port(getHttpPort())\n+                .when()\n+                .get(USER_REST_ENDPOINT + \"current\")\n+                .then()\n+                .statusCode(200)\n+                .body(JsonMatcher.containsJsonAttribute(\"id\"));\n+    }\n+\n+    @Test\n+    @InSequence(7)\n+    public void shouldCreateNewProduct() throws IOException {\n+        String rawJson = IoUtils.readFileOrResource(\"product\", \"product.json\", getClass().getClassLoader());\n+\n+        Response response = given().headers(testHeaders)\n+                .body(rawJson)\n+                .contentType(ContentType.JSON)\n+                .port(getHttpPort())\n+                .when()\n+                .post(PRODUCT_REST_ENDPOINT);\n+        Assertions.assertThat(response.statusCode()).isEqualTo(201);\n+\n+        newProductId = response.getBody().jsonPath().get(\"id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMxODU5Mw=="}, "originalCommit": {"oid": "14dd546ac9897488572d0c56a2fd7b25494f5a18"}, "originalPosition": 180}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1871, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}