{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MDk0ODAz", "number": 3202, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDo0NzoyOVrOEhMCvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDo0NzoyOVrOEhMCvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjM1NzczOnYy", "diffSide": "RIGHT", "path": "build-coordinator/src/main/java/org/jboss/pnc/coordinator/maintenance/BlacklistAsyncInvoker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDo0NzoyOVrOHOXXIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjo1NjoxNlrOHObi_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgyNDg2Ng==", "bodyText": "Can't we use the internal DA url? It is available via getDaUrl().", "url": "https://github.com/project-ncl/pnc/pull/3202#discussion_r484824866", "createdAt": "2020-09-08T10:47:29Z", "author": {"login": "pkocandr"}, "path": "build-coordinator/src/main/java/org/jboss/pnc/coordinator/maintenance/BlacklistAsyncInvoker.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.coordinator.maintenance;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import org.jboss.pnc.common.concurrent.NamedThreadFactory;\n+import org.jboss.pnc.common.json.GlobalModuleGroup;\n+import org.jboss.pnc.common.util.HttpUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+@Dependent\n+public class BlacklistAsyncInvoker {\n+    private Logger logger = LoggerFactory.getLogger(BlacklistAsyncInvoker.class);\n+\n+    private static final String BLACKLIST_ENDPOINT = \"/listings/blacklist/gav\";\n+\n+    private GlobalModuleGroup globalModuleGroupConfiguration;\n+\n+    private ExecutorService executorService;\n+\n+    @Deprecated // CDI workaround\n+    public BlacklistAsyncInvoker() {\n+    }\n+\n+    @Inject\n+    public BlacklistAsyncInvoker(GlobalModuleGroup globalModuleGroupConfiguration) {\n+        this.globalModuleGroupConfiguration = globalModuleGroupConfiguration;\n+\n+        executorService = Executors\n+                .newSingleThreadExecutor(new NamedThreadFactory(\"build-coordinator.BlacklistAsyncInvoker\"));\n+    }\n+\n+    public void notifyBlacklistToDA(String jsonPayload) {\n+        if (jsonPayload != null && !jsonPayload.isEmpty()) {\n+            executorService.submit(() -> {\n+                try {\n+                    HttpUtils.performHttpPostRequest(\n+                            globalModuleGroupConfiguration.getExternalDaUrl() + BLACKLIST_ENDPOINT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ff5f3ce095e0a2290a93e273d2ee5b626a4634"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5MzQzNg==", "bodyText": "Ah right. Thanks, changed!", "url": "https://github.com/project-ncl/pnc/pull/3202#discussion_r484893436", "createdAt": "2020-09-08T12:56:16Z", "author": {"login": "vibe13"}, "path": "build-coordinator/src/main/java/org/jboss/pnc/coordinator/maintenance/BlacklistAsyncInvoker.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2014-2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.pnc.coordinator.maintenance;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import org.jboss.pnc.common.concurrent.NamedThreadFactory;\n+import org.jboss.pnc.common.json.GlobalModuleGroup;\n+import org.jboss.pnc.common.util.HttpUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+@Dependent\n+public class BlacklistAsyncInvoker {\n+    private Logger logger = LoggerFactory.getLogger(BlacklistAsyncInvoker.class);\n+\n+    private static final String BLACKLIST_ENDPOINT = \"/listings/blacklist/gav\";\n+\n+    private GlobalModuleGroup globalModuleGroupConfiguration;\n+\n+    private ExecutorService executorService;\n+\n+    @Deprecated // CDI workaround\n+    public BlacklistAsyncInvoker() {\n+    }\n+\n+    @Inject\n+    public BlacklistAsyncInvoker(GlobalModuleGroup globalModuleGroupConfiguration) {\n+        this.globalModuleGroupConfiguration = globalModuleGroupConfiguration;\n+\n+        executorService = Executors\n+                .newSingleThreadExecutor(new NamedThreadFactory(\"build-coordinator.BlacklistAsyncInvoker\"));\n+    }\n+\n+    public void notifyBlacklistToDA(String jsonPayload) {\n+        if (jsonPayload != null && !jsonPayload.isEmpty()) {\n+            executorService.submit(() -> {\n+                try {\n+                    HttpUtils.performHttpPostRequest(\n+                            globalModuleGroupConfiguration.getExternalDaUrl() + BLACKLIST_ENDPOINT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgyNDg2Ng=="}, "originalCommit": {"oid": "66ff5f3ce095e0a2290a93e273d2ee5b626a4634"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1793, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}