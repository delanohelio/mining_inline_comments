{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjM1MTc2", "number": 2834, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzoxMTo1N1rODdrSbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzoxMjoxNlrODdrSyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDQ0NTI1OnYy", "diffSide": "RIGHT", "path": "rest-model/src/main/java/org/jboss/pnc/rest/restmodel/TargetRepositoryRest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzoxMTo1N1rOFmagLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNDoyMTowM1rOFmcr_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgyNDQzMA==", "bodyText": "I think, it is redundant as we have a Builder for this class.", "url": "https://github.com/project-ncl/pnc/pull/2834#discussion_r375824430", "createdAt": "2020-02-06T13:11:57Z", "author": {"login": "jbartece"}, "path": "rest-model/src/main/java/org/jboss/pnc/rest/restmodel/TargetRepositoryRest.java", "diffHunk": "@@ -78,6 +78,15 @@\n     @NotNull(groups = {WhenUpdating.class, WhenCreatingNew.class})\n     private Set<Integer> artifactIds = new HashSet<>();\n \n+    public TargetRepositoryRest(Integer id, Boolean temporaryRepo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c2406b70e12c2516598bb625f87a10bc8aa6a2f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg2MDIyMA==", "bodyText": "Fair point, will fix that!", "url": "https://github.com/project-ncl/pnc/pull/2834#discussion_r375860220", "createdAt": "2020-02-06T14:21:03Z", "author": {"login": "vibe13"}, "path": "rest-model/src/main/java/org/jboss/pnc/rest/restmodel/TargetRepositoryRest.java", "diffHunk": "@@ -78,6 +78,15 @@\n     @NotNull(groups = {WhenUpdating.class, WhenCreatingNew.class})\n     private Set<Integer> artifactIds = new HashSet<>();\n \n+    public TargetRepositoryRest(Integer id, Boolean temporaryRepo,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgyNDQzMA=="}, "originalCommit": {"oid": "4c2406b70e12c2516598bb625f87a10bc8aa6a2f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDQ0NjE5OnYy", "diffSide": "RIGHT", "path": "datastore/src/main/java/org/jboss/pnc/datastore/repositories/internal/ArtifactSpringRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzoxMjoxNlrOFmagwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNDoyMzowNFrOFmcwsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgyNDU3Ng==", "bodyText": "What is the reason to set it as nativeQuery?", "url": "https://github.com/project-ncl/pnc/pull/2834#discussion_r375824576", "createdAt": "2020-02-06T13:12:16Z", "author": {"login": "jbartece"}, "path": "datastore/src/main/java/org/jboss/pnc/datastore/repositories/internal/ArtifactSpringRepository.java", "diffHunk": "@@ -18,12 +18,108 @@\n package org.jboss.pnc.datastore.repositories.internal;\n \n import org.jboss.pnc.model.Artifact;\n+import org.jboss.pnc.spi.datastore.repositories.ArtifactRepository.RawArtifact;\n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+import org.springframework.data.jpa.repository.Query;\n+\n+import java.util.List;\n \n import javax.enterprise.context.Dependent;\n \n @Dependent\n public interface ArtifactSpringRepository extends JpaRepository<Artifact, Integer>, JpaSpecificationExecutor<Artifact> {\n \n-}\n+    @Query(\n+            value = \"SELECT DISTINCT \" +\n+                    \" artifact.id, \" +\n+                    \" artifact.artifactQuality, \" +\n+                    \" artifact.deployPath, \" +\n+                    \" artifact.filename, \" +\n+                    \" artifact.identifier, \" +\n+                    \" artifact.importDate, \" +\n+                    \" artifact.md5, \" +\n+                    \" artifact.originUrl, \" +\n+                    \" artifact.sha1, \" +\n+                    \" artifact.sha256, \" +\n+                    \" artifact.size, \" +\n+                    \" artifact.targetRepository_id as targetRepositoryId, \" +\n+                    \" targetRepository.temporaryRepo, \" +\n+                    \" targetRepository.identifier as targetRepositoryIdentifier, \" +\n+                    \" targetRepository.repositoryPath, \" +\n+                    \" targetRepository.repositoryType \" +\n+                    \"FROM Artifact artifact \" +\n+                    \"INNER JOIN build_record_artifact_dependencies_map dependency_artifact \" +\n+                    \"  ON dependency_artifact.dependency_artifact_id = artifact.id \" +\n+                    \"INNER JOIN BuildRecord buildRecord \" +\n+                    \"  ON dependency_artifact.build_record_id = buildRecord.id \" +\n+                    \"INNER JOIN TargetRepository targetRepository \" +\n+                    \"  ON targetRepository.id = artifact.targetRepository_id \" +\n+                    \"WHERE \" +\n+                    \" buildRecord.id = ?1 \" +\n+                    \"ORDER BY \" +\n+                    \" artifact.id ASC LIMIT ?2 OFFSET ?3\",\n+            nativeQuery = true)\n+    List<RawArtifact> getMinimizedDependencyArtifactsForBuildRecord(Integer buildRecordId, int pageSize, int offset);\n+\n+    @Query(\n+            value = \"SELECT COUNT(DISTINCT artifact.id) \" +\n+                    \"FROM Artifact artifact \" +\n+                    \"INNER JOIN build_record_artifact_dependencies_map dependency_artifact \" +\n+                    \"  ON dependency_artifact.dependency_artifact_id = artifact.id \" +\n+                    \"INNER JOIN BuildRecord buildRecord \" +\n+                    \"  ON dependency_artifact.build_record_id = buildRecord.id \" +\n+                    \"INNER JOIN TargetRepository targetRepository \" +\n+                    \"  ON targetRepository.id = artifact.targetRepository_id \" +\n+                    \"WHERE \" +\n+                    \" buildRecord.id = ?1\",\n+            nativeQuery = true)\n+    Object[] countMinimizedDependencyArtifactsForBuildRecord(Integer buildRecordId);\n+\n+    @Query(\n+            value = \"SELECT DISTINCT \" +\n+                    \" artifact.id, \" +\n+                    \" artifact.artifactQuality, \" +\n+                    \" artifact.deployPath, \" +\n+                    \" artifact.filename, \" +\n+                    \" artifact.identifier, \" +\n+                    \" artifact.importDate, \" +\n+                    \" artifact.md5, \" +\n+                    \" artifact.originUrl, \" +\n+                    \" artifact.sha1, \" +\n+                    \" artifact.sha256, \" +\n+                    \" artifact.size, \" +\n+                    \" artifact.targetRepository_id as targetRepositoryId, \" +\n+                    \" targetRepository.temporaryRepo, \" +\n+                    \" targetRepository.identifier as targetRepositoryIdentifier, \" +\n+                    \" targetRepository.repositoryPath, \" +\n+                    \" targetRepository.repositoryType \" +\n+                    \"FROM Artifact artifact \" +\n+                    \"INNER JOIN build_record_built_artifact_map built_artifact \" +\n+                    \"  ON built_artifact.built_artifact_id = artifact.id \" +\n+                    \"INNER JOIN BuildRecord buildRecord \" +\n+                    \"  ON built_artifact.build_record_id = buildRecord.id \" +\n+                    \"INNER JOIN TargetRepository targetRepository \" +\n+                    \"  ON targetRepository.id = artifact.targetRepository_id \" +\n+                    \"WHERE \" +\n+                    \" buildRecord.id = ?1 \" +\n+                    \"ORDER BY \" +\n+                    \" artifact.id ASC LIMIT ?2 OFFSET ?3\",\n+            nativeQuery = true)\n+    List<RawArtifact> getMinimizedBuiltArtifactsForBuildRecord(Integer buildRecordId, int pageSize, int offset);\n+\n+    @Query(\n+            value = \"SELECT COUNT(DISTINCT artifact.id) \" +\n+                    \"FROM Artifact artifact \" +\n+                    \"INNER JOIN build_record_built_artifact_map built_artifact \" +\n+                    \"  ON built_artifact.built_artifact_id = artifact.id \" +\n+                    \"INNER JOIN BuildRecord buildRecord \" +\n+                    \"  ON built_artifact.build_record_id = buildRecord.id \" +\n+                    \"INNER JOIN TargetRepository targetRepository \" +\n+                    \"  ON targetRepository.id = artifact.targetRepository_id \" +\n+                    \"WHERE \" +\n+                    \" buildRecord.id = ?1\",\n+            nativeQuery = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c2406b70e12c2516598bb625f87a10bc8aa6a2f"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg2MTQyNw==", "bodyText": "With standard JPA I could not mange to override at runtime some EAGER fetches, so I had to go to native queries.", "url": "https://github.com/project-ncl/pnc/pull/2834#discussion_r375861427", "createdAt": "2020-02-06T14:23:04Z", "author": {"login": "vibe13"}, "path": "datastore/src/main/java/org/jboss/pnc/datastore/repositories/internal/ArtifactSpringRepository.java", "diffHunk": "@@ -18,12 +18,108 @@\n package org.jboss.pnc.datastore.repositories.internal;\n \n import org.jboss.pnc.model.Artifact;\n+import org.jboss.pnc.spi.datastore.repositories.ArtifactRepository.RawArtifact;\n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+import org.springframework.data.jpa.repository.Query;\n+\n+import java.util.List;\n \n import javax.enterprise.context.Dependent;\n \n @Dependent\n public interface ArtifactSpringRepository extends JpaRepository<Artifact, Integer>, JpaSpecificationExecutor<Artifact> {\n \n-}\n+    @Query(\n+            value = \"SELECT DISTINCT \" +\n+                    \" artifact.id, \" +\n+                    \" artifact.artifactQuality, \" +\n+                    \" artifact.deployPath, \" +\n+                    \" artifact.filename, \" +\n+                    \" artifact.identifier, \" +\n+                    \" artifact.importDate, \" +\n+                    \" artifact.md5, \" +\n+                    \" artifact.originUrl, \" +\n+                    \" artifact.sha1, \" +\n+                    \" artifact.sha256, \" +\n+                    \" artifact.size, \" +\n+                    \" artifact.targetRepository_id as targetRepositoryId, \" +\n+                    \" targetRepository.temporaryRepo, \" +\n+                    \" targetRepository.identifier as targetRepositoryIdentifier, \" +\n+                    \" targetRepository.repositoryPath, \" +\n+                    \" targetRepository.repositoryType \" +\n+                    \"FROM Artifact artifact \" +\n+                    \"INNER JOIN build_record_artifact_dependencies_map dependency_artifact \" +\n+                    \"  ON dependency_artifact.dependency_artifact_id = artifact.id \" +\n+                    \"INNER JOIN BuildRecord buildRecord \" +\n+                    \"  ON dependency_artifact.build_record_id = buildRecord.id \" +\n+                    \"INNER JOIN TargetRepository targetRepository \" +\n+                    \"  ON targetRepository.id = artifact.targetRepository_id \" +\n+                    \"WHERE \" +\n+                    \" buildRecord.id = ?1 \" +\n+                    \"ORDER BY \" +\n+                    \" artifact.id ASC LIMIT ?2 OFFSET ?3\",\n+            nativeQuery = true)\n+    List<RawArtifact> getMinimizedDependencyArtifactsForBuildRecord(Integer buildRecordId, int pageSize, int offset);\n+\n+    @Query(\n+            value = \"SELECT COUNT(DISTINCT artifact.id) \" +\n+                    \"FROM Artifact artifact \" +\n+                    \"INNER JOIN build_record_artifact_dependencies_map dependency_artifact \" +\n+                    \"  ON dependency_artifact.dependency_artifact_id = artifact.id \" +\n+                    \"INNER JOIN BuildRecord buildRecord \" +\n+                    \"  ON dependency_artifact.build_record_id = buildRecord.id \" +\n+                    \"INNER JOIN TargetRepository targetRepository \" +\n+                    \"  ON targetRepository.id = artifact.targetRepository_id \" +\n+                    \"WHERE \" +\n+                    \" buildRecord.id = ?1\",\n+            nativeQuery = true)\n+    Object[] countMinimizedDependencyArtifactsForBuildRecord(Integer buildRecordId);\n+\n+    @Query(\n+            value = \"SELECT DISTINCT \" +\n+                    \" artifact.id, \" +\n+                    \" artifact.artifactQuality, \" +\n+                    \" artifact.deployPath, \" +\n+                    \" artifact.filename, \" +\n+                    \" artifact.identifier, \" +\n+                    \" artifact.importDate, \" +\n+                    \" artifact.md5, \" +\n+                    \" artifact.originUrl, \" +\n+                    \" artifact.sha1, \" +\n+                    \" artifact.sha256, \" +\n+                    \" artifact.size, \" +\n+                    \" artifact.targetRepository_id as targetRepositoryId, \" +\n+                    \" targetRepository.temporaryRepo, \" +\n+                    \" targetRepository.identifier as targetRepositoryIdentifier, \" +\n+                    \" targetRepository.repositoryPath, \" +\n+                    \" targetRepository.repositoryType \" +\n+                    \"FROM Artifact artifact \" +\n+                    \"INNER JOIN build_record_built_artifact_map built_artifact \" +\n+                    \"  ON built_artifact.built_artifact_id = artifact.id \" +\n+                    \"INNER JOIN BuildRecord buildRecord \" +\n+                    \"  ON built_artifact.build_record_id = buildRecord.id \" +\n+                    \"INNER JOIN TargetRepository targetRepository \" +\n+                    \"  ON targetRepository.id = artifact.targetRepository_id \" +\n+                    \"WHERE \" +\n+                    \" buildRecord.id = ?1 \" +\n+                    \"ORDER BY \" +\n+                    \" artifact.id ASC LIMIT ?2 OFFSET ?3\",\n+            nativeQuery = true)\n+    List<RawArtifact> getMinimizedBuiltArtifactsForBuildRecord(Integer buildRecordId, int pageSize, int offset);\n+\n+    @Query(\n+            value = \"SELECT COUNT(DISTINCT artifact.id) \" +\n+                    \"FROM Artifact artifact \" +\n+                    \"INNER JOIN build_record_built_artifact_map built_artifact \" +\n+                    \"  ON built_artifact.built_artifact_id = artifact.id \" +\n+                    \"INNER JOIN BuildRecord buildRecord \" +\n+                    \"  ON built_artifact.build_record_id = buildRecord.id \" +\n+                    \"INNER JOIN TargetRepository targetRepository \" +\n+                    \"  ON targetRepository.id = artifact.targetRepository_id \" +\n+                    \"WHERE \" +\n+                    \" buildRecord.id = ?1\",\n+            nativeQuery = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgyNDU3Ng=="}, "originalCommit": {"oid": "4c2406b70e12c2516598bb625f87a10bc8aa6a2f"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1933, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}