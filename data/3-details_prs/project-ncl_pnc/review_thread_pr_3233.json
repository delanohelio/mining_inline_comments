{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NzA5NjE3", "number": 3233, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToyOTo0OFrOEXre7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToyOTo0OFrOEXre7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjY1MTM1OnYy", "diffSide": "RIGHT", "path": "datastore/src/main/java/org/jboss/pnc/datastore/repositories/internal/AbstractRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToyOTo0OFrOG_moKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTo1Mzo0OFrOG_0LIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0NjM0NQ==", "bodyText": "This will break the TreeSet as if A != B  then A > B && A < B. (or in best case will be as efficient as array list)\nYou would want to use Map<ID, Entity> I think.", "url": "https://github.com/project-ncl/pnc/pull/3233#discussion_r469346345", "createdAt": "2020-08-12T15:29:48Z", "author": {"login": "janinko"}, "path": "datastore/src/main/java/org/jboss/pnc/datastore/repositories/internal/AbstractRepository.java", "diffHunk": "@@ -110,4 +116,54 @@ public int count(Collection<Predicate<T>> andPredicates, Collection<Predicate<T>\n                 .getContent();\n     }\n \n+    /**\n+     * @see Repository#cascadeUpdates) for full docs\n+     * \n+     * @param managedNonOwning current version of entity from DB (MUST be Hibernate managed (due to LAZY fetching))\n+     * @param updatedNonOwning proposed version of entity from request\n+     * @param collectionGetter getter with collection of owning side (f.e ProductVersion::getBuildConfigurations)\n+     * @param owningSetter setter which updates the owning side (f.e BuildConfiguration::setProductVersion)\n+     * @param filter\n+     * @param <N>\n+     */\n+    public <N extends GenericEntity<ID>> void cascadeUpdates(\n+            N managedNonOwning,\n+            N updatedNonOwning,\n+            Function<N, Collection<T>> collectionGetter,\n+            BiConsumer<T, N> owningSetter,\n+            java.util.function.Predicate<T>... filter) {\n+        // we want only to compare IDs because the data from request can be partial (due to dto refs in Maps)\n+        Comparator<T> idComparator = (t, t1) -> t.getId().equals(t1.getId()) ? 0 : 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a3428229eef153d480bc285534a89f2bbe48e66"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2ODI5MQ==", "bodyText": "Yes, TreeSet will be inefficient, you are absolutely correct. Map with ID as a Key basically does exactly what I need. Thx for the suggestion.", "url": "https://github.com/project-ncl/pnc/pull/3233#discussion_r469568291", "createdAt": "2020-08-12T21:53:48Z", "author": {"login": "michalovjan"}, "path": "datastore/src/main/java/org/jboss/pnc/datastore/repositories/internal/AbstractRepository.java", "diffHunk": "@@ -110,4 +116,54 @@ public int count(Collection<Predicate<T>> andPredicates, Collection<Predicate<T>\n                 .getContent();\n     }\n \n+    /**\n+     * @see Repository#cascadeUpdates) for full docs\n+     * \n+     * @param managedNonOwning current version of entity from DB (MUST be Hibernate managed (due to LAZY fetching))\n+     * @param updatedNonOwning proposed version of entity from request\n+     * @param collectionGetter getter with collection of owning side (f.e ProductVersion::getBuildConfigurations)\n+     * @param owningSetter setter which updates the owning side (f.e BuildConfiguration::setProductVersion)\n+     * @param filter\n+     * @param <N>\n+     */\n+    public <N extends GenericEntity<ID>> void cascadeUpdates(\n+            N managedNonOwning,\n+            N updatedNonOwning,\n+            Function<N, Collection<T>> collectionGetter,\n+            BiConsumer<T, N> owningSetter,\n+            java.util.function.Predicate<T>... filter) {\n+        // we want only to compare IDs because the data from request can be partial (due to dto refs in Maps)\n+        Comparator<T> idComparator = (t, t1) -> t.getId().equals(t1.getId()) ? 0 : 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0NjM0NQ=="}, "originalCommit": {"oid": "9a3428229eef153d480bc285534a89f2bbe48e66"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1799, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}