{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0ODQ5MTUy", "number": 2943, "title": "[v1.8] NCL-5527 - Update lastModificationTime only if audited fields are updated", "bodyText": "Checklist:\n\n Have you added a note in the CHANGELOG wiki for your change if user-facing?\n Have you added unit tests for your change?", "createdAt": "2020-03-27T16:23:08Z", "url": "https://github.com/project-ncl/pnc/pull/2943", "merged": true, "mergeCommit": {"oid": "b05732c20ddf576f121799cdb4983a91dc13efe2"}, "closed": true, "closedAt": "2020-03-30T14:05:53Z", "author": {"login": "vibe13"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRzJB8gH2gAyMzk0ODQ5MTUyOjIwODFkZmIwODVmMTBiMjQwYjEzYjkyOGQxM2JjYzVkNjIwNWZmMzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSvBI1AFqTM4Mzg4NjY3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2081dfb085f10b240b13b928d13bcc5d6205ff37", "author": {"user": {"login": "vibe13", "name": "Andrea Vibelli"}}, "url": "https://github.com/project-ncl/pnc/commit/2081dfb085f10b240b13b928d13bcc5d6205ff37", "committedDate": "2020-03-27T16:17:49Z", "message": "Backport NCL-4284 - creationTime null on build configuration audited"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fd1b88e7776138663de7a82b016924663dea80f", "author": {"user": {"login": "vibe13", "name": "Andrea Vibelli"}}, "url": "https://github.com/project-ncl/pnc/commit/6fd1b88e7776138663de7a82b016924663dea80f", "committedDate": "2020-03-27T16:19:04Z", "message": "Remove @PreUpdate and handle the update of lastModificationTime manually, so that no new revisions are created if only the description of BuildConfiguration is changed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e5664bcae3e1c1c9fd88dce66af297d381763d5", "author": {"user": {"login": "vibe13", "name": "Andrea Vibelli"}}, "url": "https://github.com/project-ncl/pnc/commit/3e5664bcae3e1c1c9fd88dce66af297d381763d5", "committedDate": "2020-03-27T16:19:25Z", "message": "Fix tests and verify lastModificationTime correct change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzA0MzA1", "url": "https://github.com/project-ncl/pnc/pull/2943#pullrequestreview-383304305", "createdAt": "2020-03-28T11:16:47Z", "commit": {"oid": "3e5664bcae3e1c1c9fd88dce66af297d381763d5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMToxNjo0N1rOF9Iupg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMTozMTozNFrOF9Iz2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MDQ3MA==", "bodyText": "reinwenting wheel: https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#equals-java.lang.Object-java.lang.Object-", "url": "https://github.com/project-ncl/pnc/pull/2943#discussion_r399650470", "createdAt": "2020-03-28T11:16:47Z", "author": {"login": "janinko"}, "path": "datastore/src/main/java/org/jboss/pnc/datastore/repositories/BuildConfigurationRepositoryImpl.java", "diffHunk": "@@ -53,15 +54,51 @@ public BuildConfiguration save(BuildConfiguration buildConfiguration) {\n         if (id != null && id > 0) {\n             BuildConfiguration persisted = queryById(id);\n \n-            if (!areParametersEqual(persisted, buildConfiguration)) {\n+            if (!areParametersEqual(persisted, buildConfiguration) || !equalAuditedValues(persisted, buildConfiguration)) {\n                 //always increment the revision of main entity when the child collection is updated\n+                //the @PreUpdate method in BuildConfiguration was removed, the calculation of whether the lastModificationTime needs to be changed is done here\n                 buildConfiguration.setLastModificationTime(new Date());\n             }\n         }\n \n         return springRepository.save(buildConfiguration);\n     }\n \n+    private boolean equalAuditedValues(BuildConfiguration persisted, BuildConfiguration toUpdate) {\n+        return equalsWithNull(persisted.getName(), toUpdate.getName()) &&\n+                equalsWithNull(persisted.getBuildScript(), toUpdate.getBuildScript()) &&\n+                equalsId(persisted.getRepositoryConfiguration(), toUpdate.getRepositoryConfiguration()) &&\n+                equalsWithNull(persisted.getScmRevision(), toUpdate.getScmRevision()) &&\n+                equalsId(persisted.getProject(), toUpdate.getProject()) &&\n+                equalsId(persisted.getBuildEnvironment(), toUpdate.getBuildEnvironment()) &&\n+                (persisted.isArchived() == toUpdate.isArchived()) &&\n+                (persisted.getBuildType() == toUpdate.getBuildType());\n+    }\n+\n+    private boolean equalsWithNull(Object o1, Object o2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5664bcae3e1c1c9fd88dce66af297d381763d5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MDc1OA==", "bodyText": "You can shorten it as:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (persisted == null && toUpdate != null) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    if (persisted != null && toUpdate == null) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (persisted == null || toUpdate == null) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nNot sure which one is better. For mine you need to consider previous guard, yours is more explicit.", "url": "https://github.com/project-ncl/pnc/pull/2943#discussion_r399650758", "createdAt": "2020-03-28T11:19:25Z", "author": {"login": "janinko"}, "path": "datastore/src/main/java/org/jboss/pnc/datastore/repositories/BuildConfigurationRepositoryImpl.java", "diffHunk": "@@ -53,15 +54,51 @@ public BuildConfiguration save(BuildConfiguration buildConfiguration) {\n         if (id != null && id > 0) {\n             BuildConfiguration persisted = queryById(id);\n \n-            if (!areParametersEqual(persisted, buildConfiguration)) {\n+            if (!areParametersEqual(persisted, buildConfiguration) || !equalAuditedValues(persisted, buildConfiguration)) {\n                 //always increment the revision of main entity when the child collection is updated\n+                //the @PreUpdate method in BuildConfiguration was removed, the calculation of whether the lastModificationTime needs to be changed is done here\n                 buildConfiguration.setLastModificationTime(new Date());\n             }\n         }\n \n         return springRepository.save(buildConfiguration);\n     }\n \n+    private boolean equalAuditedValues(BuildConfiguration persisted, BuildConfiguration toUpdate) {\n+        return equalsWithNull(persisted.getName(), toUpdate.getName()) &&\n+                equalsWithNull(persisted.getBuildScript(), toUpdate.getBuildScript()) &&\n+                equalsId(persisted.getRepositoryConfiguration(), toUpdate.getRepositoryConfiguration()) &&\n+                equalsWithNull(persisted.getScmRevision(), toUpdate.getScmRevision()) &&\n+                equalsId(persisted.getProject(), toUpdate.getProject()) &&\n+                equalsId(persisted.getBuildEnvironment(), toUpdate.getBuildEnvironment()) &&\n+                (persisted.isArchived() == toUpdate.isArchived()) &&\n+                (persisted.getBuildType() == toUpdate.getBuildType());\n+    }\n+\n+    private boolean equalsWithNull(Object o1, Object o2) {\n+        if(o1 == null) {\n+            return o2 == null;\n+        } else {\n+            return o1.equals(o2);\n+        }\n+    }\n+\n+    private boolean equalsId(GenericEntity persisted, GenericEntity toUpdate) {\n+        if (persisted == null && toUpdate == null) {\n+            return true;\n+        }\n+\n+        if (persisted == null && toUpdate != null) {\n+            return false;\n+        }\n+\n+        if (persisted != null && toUpdate == null) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5664bcae3e1c1c9fd88dce66af297d381763d5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MTI1MA==", "bodyText": "why do you call new String here?", "url": "https://github.com/project-ncl/pnc/pull/2943#discussion_r399651250", "createdAt": "2020-03-28T11:24:50Z", "author": {"login": "janinko"}, "path": "integration-test/src/test/java/org/jboss/pnc/integration/BuildTest.java", "diffHunk": "@@ -264,25 +270,103 @@ public void shouldBuildTemporaryBuildAndNotAssignItToMilestone() {\n         assertThat(buildRecordRestResponse.getValue().getProductMilestoneId()).isNull();\n     }\n \n+    @Test\n+    public void shouldNotTriggerANewPersistentBuildWithoutForceIfOnlyDescriptionChanged() {\n+        BuildConfigurationRest buildConfigurationRest = buildConfigurationRestClient.getByName(\"maven-plugin-test\").getValue();\n+        BuildOptions persistent = new BuildOptions();\n+        persistent.setRebuildMode(RebuildMode.FORCE);\n+\n+        // Trigger force build\n+        RestResponse<BuildRecordRest> forcedPersistentBuild = triggerBCBuild(buildConfigurationRest, Optional.empty(), persistent);\n+        assertThat(forcedPersistentBuild.getRestCallResponse().getStatusCode()).isEqualTo(200);\n+        ResponseUtils.waitSynchronouslyFor(() -> {\n+            RestResponse<BuildRecordRest> record = buildRecordRestClient.get(forcedPersistentBuild.getValue().getId(),\n+                    false);\n+            return record.hasValue() && record.getValue().getStatus().equals(BuildCoordinationStatus.DONE);\n+        } , 15, TimeUnit.SECONDS);\n+\n+        // Update only description, should not create a new revision and keep same lastModificationTime\n+        String oldDescription = buildConfigurationRest.getDescription() != null ? new String(buildConfigurationRest.getDescription()) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5664bcae3e1c1c9fd88dce66af297d381763d5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MTUzOQ==", "bodyText": "Why isn't this enough? Strings are immutable\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String oldDescription = buildConfigurationRest.getDescription() != null ? new String(buildConfigurationRest.getDescription()) : null;\n          \n          \n            \n                    String oldDescription = buildConfigurationRest.getDescription();", "url": "https://github.com/project-ncl/pnc/pull/2943#discussion_r399651539", "createdAt": "2020-03-28T11:28:31Z", "author": {"login": "janinko"}, "path": "integration-test/src/test/java/org/jboss/pnc/integration/BuildTest.java", "diffHunk": "@@ -264,25 +270,103 @@ public void shouldBuildTemporaryBuildAndNotAssignItToMilestone() {\n         assertThat(buildRecordRestResponse.getValue().getProductMilestoneId()).isNull();\n     }\n \n+    @Test\n+    public void shouldNotTriggerANewPersistentBuildWithoutForceIfOnlyDescriptionChanged() {\n+        BuildConfigurationRest buildConfigurationRest = buildConfigurationRestClient.getByName(\"maven-plugin-test\").getValue();\n+        BuildOptions persistent = new BuildOptions();\n+        persistent.setRebuildMode(RebuildMode.FORCE);\n+\n+        // Trigger force build\n+        RestResponse<BuildRecordRest> forcedPersistentBuild = triggerBCBuild(buildConfigurationRest, Optional.empty(), persistent);\n+        assertThat(forcedPersistentBuild.getRestCallResponse().getStatusCode()).isEqualTo(200);\n+        ResponseUtils.waitSynchronouslyFor(() -> {\n+            RestResponse<BuildRecordRest> record = buildRecordRestClient.get(forcedPersistentBuild.getValue().getId(),\n+                    false);\n+            return record.hasValue() && record.getValue().getStatus().equals(BuildCoordinationStatus.DONE);\n+        } , 15, TimeUnit.SECONDS);\n+\n+        // Update only description, should not create a new revision and keep same lastModificationTime\n+        String oldDescription = buildConfigurationRest.getDescription() != null ? new String(buildConfigurationRest.getDescription()) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MTI1MA=="}, "originalCommit": {"oid": "3e5664bcae3e1c1c9fd88dce66af297d381763d5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MTgwMA==", "bodyText": "The same here. I know Date is mutable, but is the lastModificationTime being altered?", "url": "https://github.com/project-ncl/pnc/pull/2943#discussion_r399651800", "createdAt": "2020-03-28T11:31:34Z", "author": {"login": "janinko"}, "path": "integration-test/src/test/java/org/jboss/pnc/integration/BuildTest.java", "diffHunk": "@@ -264,25 +270,103 @@ public void shouldBuildTemporaryBuildAndNotAssignItToMilestone() {\n         assertThat(buildRecordRestResponse.getValue().getProductMilestoneId()).isNull();\n     }\n \n+    @Test\n+    public void shouldNotTriggerANewPersistentBuildWithoutForceIfOnlyDescriptionChanged() {\n+        BuildConfigurationRest buildConfigurationRest = buildConfigurationRestClient.getByName(\"maven-plugin-test\").getValue();\n+        BuildOptions persistent = new BuildOptions();\n+        persistent.setRebuildMode(RebuildMode.FORCE);\n+\n+        // Trigger force build\n+        RestResponse<BuildRecordRest> forcedPersistentBuild = triggerBCBuild(buildConfigurationRest, Optional.empty(), persistent);\n+        assertThat(forcedPersistentBuild.getRestCallResponse().getStatusCode()).isEqualTo(200);\n+        ResponseUtils.waitSynchronouslyFor(() -> {\n+            RestResponse<BuildRecordRest> record = buildRecordRestClient.get(forcedPersistentBuild.getValue().getId(),\n+                    false);\n+            return record.hasValue() && record.getValue().getStatus().equals(BuildCoordinationStatus.DONE);\n+        } , 15, TimeUnit.SECONDS);\n+\n+        // Update only description, should not create a new revision and keep same lastModificationTime\n+        String oldDescription = buildConfigurationRest.getDescription() != null ? new String(buildConfigurationRest.getDescription()) : null;\n+        Date oldLastModDate = buildConfigurationRest.getLastModificationTime() != null ? new Date(buildConfigurationRest.getLastModificationTime().getTime()) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e5664bcae3e1c1c9fd88dce66af297d381763d5"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1f56e1135e5a388162e0f027dde6a5e02bc481f", "author": {"user": {"login": "vibe13", "name": "Andrea Vibelli"}}, "url": "https://github.com/project-ncl/pnc/commit/e1f56e1135e5a388162e0f027dde6a5e02bc481f", "committedDate": "2020-03-28T15:36:43Z", "message": "Implement changes after review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzODg2Njc0", "url": "https://github.com/project-ncl/pnc/pull/2943#pullrequestreview-383886674", "createdAt": "2020-03-30T14:03:30Z", "commit": {"oid": "e1f56e1135e5a388162e0f027dde6a5e02bc481f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2691, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}