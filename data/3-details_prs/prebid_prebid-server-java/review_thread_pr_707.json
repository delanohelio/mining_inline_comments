{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNDUyNDEz", "number": 707, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzozMTo1MVrOD5Z3Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo0NDowNlrOD5aNKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTE5MTM4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidderAliasesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzozMTo1MVrOGQphsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzozMTo1MVrOGQphsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMDc2OA==", "bodyText": "Minor. Consider moving aliases as class field with default initialization in setUp().", "url": "https://github.com/prebid/prebid-server-java/pull/707#discussion_r420110768", "createdAt": "2020-05-05T13:31:51Z", "author": {"login": "rpanchyk"}, "path": "src/test/java/org/prebid/server/auction/BidderAliasesTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.auction;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.prebid.server.bidder.BidderCatalog;\n+\n+import static java.util.Collections.singletonMap;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+\n+public class BidderAliasesTest {\n+\n+    @Rule\n+    public final MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+    @Mock\n+    private BidderCatalog bidderCatalog;\n+\n+    @Before\n+    public void setUp() {\n+        given(bidderCatalog.isActive(anyString())).willReturn(true);\n+    }\n+\n+    @Test\n+    public void isAliasDefinedShouldQueryCatalogWhenNoAliasesInRequest() {\n+        // given\n+        given(bidderCatalog.isAlias(anyString())).willReturn(true);\n+\n+        final BidderAliases aliases = BidderAliases.of(bidderCatalog);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0066aa522efb80c62a1b4d0410dcd6d75e2d14"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTI0Nzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/BidderAliases.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo0NDowNlrOGQqEvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo0NDowNlrOGQqEvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExOTc0Mg==", "bodyText": "Just to think. Do we really resolving alias here?\nm/b it is better to name like resolveBidderViaCatalog(...).\ni can speak crazy, but just consider.", "url": "https://github.com/prebid/prebid-server-java/pull/707#discussion_r420119742", "createdAt": "2020-05-05T13:44:06Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/auction/BidderAliases.java", "diffHunk": "@@ -1,37 +1,64 @@\n package org.prebid.server.auction;\n \n import org.apache.commons.lang3.ObjectUtils;\n+import org.prebid.server.bidder.BidderCatalog;\n \n import java.util.Collections;\n import java.util.Map;\n+import java.util.Objects;\n \n /**\n  * Represents aliases configured for bidders - configuration might come in OpenRTB request but not limited to it.\n  */\n public class BidderAliases {\n \n-    private Map<String, String> aliasToBidder;\n+    private final Map<String, String> aliasToBidder;\n \n-    private Map<String, Integer> aliasToVendorId;\n+    private final Map<String, Integer> aliasToVendorId;\n+\n+    private final BidderCatalog bidderCatalog;\n+\n+    private BidderAliases(\n+            Map<String, String> aliasToBidder, Map<String, Integer> aliasToVendorId, BidderCatalog bidderCatalog) {\n \n-    private BidderAliases(Map<String, String> aliasToBidder, Map<String, Integer> aliasToVendorId) {\n         this.aliasToBidder = ObjectUtils.firstNonNull(aliasToBidder, Collections.emptyMap());\n         this.aliasToVendorId = ObjectUtils.firstNonNull(aliasToVendorId, Collections.emptyMap());\n+        this.bidderCatalog = Objects.requireNonNull(bidderCatalog);\n+    }\n+\n+    public static BidderAliases of(\n+            Map<String, String> aliasToBidder, Map<String, Integer> aliasToVendorId, BidderCatalog bidderCatalog) {\n+\n+        return new BidderAliases(aliasToBidder, aliasToVendorId, bidderCatalog);\n     }\n \n-    public static BidderAliases of(Map<String, String> aliasToBidder, Map<String, Integer> aliasToVendorId) {\n-        return new BidderAliases(aliasToBidder, aliasToVendorId);\n+    public static BidderAliases of(BidderCatalog bidderCatalog) {\n+        return new BidderAliases(null, null, bidderCatalog);\n     }\n \n     public boolean isAliasDefined(String alias) {\n-        return aliasToBidder.containsKey(alias);\n+        return aliasToBidder.containsKey(alias) || bidderCatalog.isAlias(alias);\n     }\n \n     public String resolveBidder(String aliasOrBidder) {\n-        return aliasToBidder.getOrDefault(aliasOrBidder, aliasOrBidder);\n+        return aliasToBidder.containsKey(aliasOrBidder)\n+                ? aliasToBidder.get(aliasOrBidder)\n+                : ObjectUtils.firstNonNull(resolveAliasViaCatalog(aliasOrBidder), aliasOrBidder);\n     }\n \n     public Integer resolveAliasVendorId(String alias) {\n-        return aliasToVendorId.get(alias);\n+        return aliasToVendorId.containsKey(alias)\n+                ? aliasToVendorId.get(alias)\n+                : resolveAliasVendorIdViaCatalog(alias);\n+    }\n+\n+    private String resolveAliasViaCatalog(String aliasOrBidder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0066aa522efb80c62a1b4d0410dcd6d75e2d14"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4048, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}