{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMDc3MjA3", "number": 583, "title": "Add Applogy bidder", "bodyText": "Add Applogy Bidder.\n\n\nBidder interface implementation\n\n\nTests\n\n\nConfiguration", "createdAt": "2020-01-13T11:50:39Z", "url": "https://github.com/prebid/prebid-server-java/pull/583", "merged": true, "mergeCommit": {"oid": "0b1a33577c4e38f3a002d8113263b2e4a658ee61"}, "closed": true, "closedAt": "2020-01-17T10:29:09Z", "author": {"login": "apaliy"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb55PJqgH2gAyMzYyMDc3MjA3OjI4ZTI4M2FjM2ZhODIxOWI3MTQ4MjhlNTM3NDA1NTM2YWQ0YzRjNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7MI2HgFqTM0NDQ4NTk3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "28e283ac3fa8219b714828e537405536ad4c4c69", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/28e283ac3fa8219b714828e537405536ad4c4c69", "committedDate": "2020-01-13T09:49:45Z", "message": "Add Applogy bidder\n\n-Develop Bidder implementation\n-Writing Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/c5a09970fcd38883d3e6939b87341da9eda8dd46", "committedDate": "2020-01-13T11:42:50Z", "message": "Add Applogy bidder\n\n-Fix configuration\n-Tests added"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjc0NjEx", "url": "https://github.com/prebid/prebid-server-java/pull/583#pullrequestreview-342274611", "createdAt": "2020-01-14T03:30:59Z", "commit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMzozMDo1OVrOFdLT_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNDo1NDowNFrOFdMKcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzODM2Ng==", "bodyText": "Please move the class constant above instance field endpointUrl to match the project style.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366138366", "createdAt": "2020-01-14T03:30:59Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0MDcyMg==", "bodyText": "I'm sorry, but you got it all wrong.\nCheck the GO PR - they basically create HttpRequest<> in the loop of impressions i.e. they create a separate request for each impression - while you return a singletonList - it should be a list of HttpRequest<BidRequest>, where each BidRequest contains only one impression.\nThe same goes for parsing Impression Extension - you need to do it in the same loop, as the extension's field token is used for request url - so each request would use the token from each impression.\nIn general, this is quite a standard case when bidder creates multiple requests from one request (usually a request per impression). For example - check UnrulyBidder implementation - it's almost the same idea.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366140722", "createdAt": "2020-01-14T03:45:24Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0MTE0MQ==", "bodyText": "This should be done in the loop of impressions for each impression, not just the first one. Also, you can pass imp.getExt() i.e. ObjectNode object, instead of whole Imp object - you only need one field from it - so pass the data you need.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366141141", "createdAt": "2020-01-14T03:47:44Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));\n+        }\n+\n+        if (validImps.isEmpty()) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final ExtImpApplogy firstImpExt;\n+        try {\n+            firstImpExt = parseAndValidateImpExt(validImps.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0MzAxMg==", "bodyText": "I've said it before, but just in case - this also should be done for each impression - it could be within the same loop (like LifestreetBidder) or map List<BidRequest> to List<HttpRequest<BidRequest>> in stream after loop (like UnrulyBidder`). Hope you get the point.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366143012", "createdAt": "2020-01-14T03:57:56Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));\n+        }\n+\n+        if (validImps.isEmpty()) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final ExtImpApplogy firstImpExt;\n+        try {\n+            firstImpExt = parseAndValidateImpExt(validImps.get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = Json.encode(outgoingRequest);\n+        final String requestUrl = endpointUrl + \"/\" + firstImpExt.getToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0MzE0NA==", "bodyText": "No point to create a method that just calls another method - simply call HttpUtil.headers() directly.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366143144", "createdAt": "2020-01-14T03:58:34Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));\n+        }\n+\n+        if (validImps.isEmpty()) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final ExtImpApplogy firstImpExt;\n+        try {\n+            firstImpExt = parseAndValidateImpExt(validImps.get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = Json.encode(outgoingRequest);\n+        final String requestUrl = endpointUrl + \"/\" + firstImpExt.getToken();\n+        final MultiMap headers = resolveHeaders();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0MzUwMg==", "bodyText": "As I've previously noted - pass only ObjectNode ext from imp.getExt(). You don't need other imp fields here.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366143502", "createdAt": "2020-01-14T04:00:30Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));\n+        }\n+\n+        if (validImps.isEmpty()) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final ExtImpApplogy firstImpExt;\n+        try {\n+            firstImpExt = parseAndValidateImpExt(validImps.get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = Json.encode(outgoingRequest);\n+        final String requestUrl = endpointUrl + \"/\" + firstImpExt.getToken();\n+        final MultiMap headers = resolveHeaders();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();\n+    }\n+\n+    private ExtImpApplogy parseAndValidateImpExt(Imp imp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0NDE4MA==", "bodyText": "In go they also have a == 0 check for banner Width and Height, and it should be a || (OR) condition, not AND.\nRemove CollectionUtils.isNotEmpty(banner.getFormat()) condition from here. We should check if they ARE empty before getting the first Format, and if they ARE empty - throw the exception - just like they have it in GO.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366144180", "createdAt": "2020-01-14T04:04:30Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));\n+        }\n+\n+        if (validImps.isEmpty()) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final ExtImpApplogy firstImpExt;\n+        try {\n+            firstImpExt = parseAndValidateImpExt(validImps.get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = Json.encode(outgoingRequest);\n+        final String requestUrl = endpointUrl + \"/\" + firstImpExt.getToken();\n+        final MultiMap headers = resolveHeaders();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();\n+    }\n+\n+    private ExtImpApplogy parseAndValidateImpExt(Imp imp) {\n+        final ExtImpApplogy extImpApplogy;\n+        try {\n+            extImpApplogy = Json.mapper.convertValue(imp.getExt().get(\"bidder\"), ExtImpApplogy.class);\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        if (StringUtils.isBlank(extImpApplogy.getToken())) {\n+            throw new PreBidException(\"token is empty\");\n+        }\n+        return extImpApplogy;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null && banner.getW() == null && CollectionUtils.isNotEmpty(banner.getFormat())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0Njg3OQ==", "bodyText": "No need for else if when you have a return in previous condition. You can just keep 3 if statements, since each of them exits the method when true.\nAlso, you should throw/add an error when no bid type matched, just like they do in GO, and skip that bid. Check how I and @DGarbar did it in this PR - https://github.com/rubicon-project/prebid-server-java/pull/553/files in KubientBidder line 90 and 101, and check my second comment to his PR.\nBasically, you need to pass an errors list and add an error to it whenever bid type was not matched, while returning a null instead of BidderBid object, so you can then filter these nulls out.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366146879", "createdAt": "2020-01-14T04:22:12Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));\n+        }\n+\n+        if (validImps.isEmpty()) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final ExtImpApplogy firstImpExt;\n+        try {\n+            firstImpExt = parseAndValidateImpExt(validImps.get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = Json.encode(outgoingRequest);\n+        final String requestUrl = endpointUrl + \"/\" + firstImpExt.getToken();\n+        final MultiMap headers = resolveHeaders();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();\n+    }\n+\n+    private ExtImpApplogy parseAndValidateImpExt(Imp imp) {\n+        final ExtImpApplogy extImpApplogy;\n+        try {\n+            extImpApplogy = Json.mapper.convertValue(imp.getExt().get(\"bidder\"), ExtImpApplogy.class);\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        if (StringUtils.isBlank(extImpApplogy.getToken())) {\n+            throw new PreBidException(\"token is empty\");\n+        }\n+        return extImpApplogy;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null && banner.getW() == null && CollectionUtils.isNotEmpty(banner.getFormat())) {\n+                final Format firstFormat = banner.getFormat().get(0);\n+                final Banner modifiedBanner = banner.toBuilder()\n+                        .h(firstFormat.getH())\n+                        .w(firstFormat.getW())\n+                        .build();\n+                return imp.toBuilder().banner(modifiedBanner).build();\n+            }\n+        }\n+        return imp;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(\"failed to decode json\"));\n+        }\n+    }\n+\n+    private static List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private static List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        final Map<String, BidType> requestImpIdToBidType = bidRequest.getImp().stream()\n+                .collect(Collectors.toMap(Imp::getId, ApplogyBidder::getBidType));\n+\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid,\n+                        requestImpIdToBidType.getOrDefault(bid.getImpid(), BidType.banner), DEFAULT_BID_CURRENCY))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static BidType getBidType(Imp imp) {\n+        if (imp.getVideo() != null) {\n+            return BidType.video;\n+        } else if (imp.getXNative() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0OTE1NQ==", "bodyText": "This is not necessary, just have a method that iterates through bidrequest.imp and checks imp.getId().equals(bid.getIpid()) and then applies the getBidType to resolve type.\nAlso, check the comments to getBidType below.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366149155", "createdAt": "2020-01-14T04:35:45Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));\n+        }\n+\n+        if (validImps.isEmpty()) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final ExtImpApplogy firstImpExt;\n+        try {\n+            firstImpExt = parseAndValidateImpExt(validImps.get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = Json.encode(outgoingRequest);\n+        final String requestUrl = endpointUrl + \"/\" + firstImpExt.getToken();\n+        final MultiMap headers = resolveHeaders();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();\n+    }\n+\n+    private ExtImpApplogy parseAndValidateImpExt(Imp imp) {\n+        final ExtImpApplogy extImpApplogy;\n+        try {\n+            extImpApplogy = Json.mapper.convertValue(imp.getExt().get(\"bidder\"), ExtImpApplogy.class);\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        if (StringUtils.isBlank(extImpApplogy.getToken())) {\n+            throw new PreBidException(\"token is empty\");\n+        }\n+        return extImpApplogy;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null && banner.getW() == null && CollectionUtils.isNotEmpty(banner.getFormat())) {\n+                final Format firstFormat = banner.getFormat().get(0);\n+                final Banner modifiedBanner = banner.toBuilder()\n+                        .h(firstFormat.getH())\n+                        .w(firstFormat.getW())\n+                        .build();\n+                return imp.toBuilder().banner(modifiedBanner).build();\n+            }\n+        }\n+        return imp;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(\"failed to decode json\"));\n+        }\n+    }\n+\n+    private static List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private static List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        final Map<String, BidType> requestImpIdToBidType = bidRequest.getImp().stream()\n+                .collect(Collectors.toMap(Imp::getId, ApplogyBidder::getBidType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0OTYxMA==", "bodyText": "This is incorrect, since they throw error when bid imp id was not matched to imp id, which makes using a map unnecessary.\nCheck other getBidType or resolveBidType methods in other bidders, as well as check my comments to your getBidType method below.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366149610", "createdAt": "2020-01-14T04:38:01Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));\n+        }\n+\n+        if (validImps.isEmpty()) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final ExtImpApplogy firstImpExt;\n+        try {\n+            firstImpExt = parseAndValidateImpExt(validImps.get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = Json.encode(outgoingRequest);\n+        final String requestUrl = endpointUrl + \"/\" + firstImpExt.getToken();\n+        final MultiMap headers = resolveHeaders();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();\n+    }\n+\n+    private ExtImpApplogy parseAndValidateImpExt(Imp imp) {\n+        final ExtImpApplogy extImpApplogy;\n+        try {\n+            extImpApplogy = Json.mapper.convertValue(imp.getExt().get(\"bidder\"), ExtImpApplogy.class);\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        if (StringUtils.isBlank(extImpApplogy.getToken())) {\n+            throw new PreBidException(\"token is empty\");\n+        }\n+        return extImpApplogy;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null && banner.getW() == null && CollectionUtils.isNotEmpty(banner.getFormat())) {\n+                final Format firstFormat = banner.getFormat().get(0);\n+                final Banner modifiedBanner = banner.toBuilder()\n+                        .h(firstFormat.getH())\n+                        .w(firstFormat.getW())\n+                        .build();\n+                return imp.toBuilder().banner(modifiedBanner).build();\n+            }\n+        }\n+        return imp;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(\"failed to decode json\"));\n+        }\n+    }\n+\n+    private static List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private static List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        final Map<String, BidType> requestImpIdToBidType = bidRequest.getImp().stream()\n+                .collect(Collectors.toMap(Imp::getId, ApplogyBidder::getBidType));\n+\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid,\n+                        requestImpIdToBidType.getOrDefault(bid.getImpid(), BidType.banner), DEFAULT_BID_CURRENCY))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0OTk5Nw==", "bodyText": "It is quite annoying, but our project requires all .java files (except test files, but better have one there as well) to end up with an empty line.\nPlease be sure to have an empty line in all java files you add.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366149997", "createdAt": "2020-01-14T04:39:55Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));\n+        }\n+\n+        if (validImps.isEmpty()) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final ExtImpApplogy firstImpExt;\n+        try {\n+            firstImpExt = parseAndValidateImpExt(validImps.get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = Json.encode(outgoingRequest);\n+        final String requestUrl = endpointUrl + \"/\" + firstImpExt.getToken();\n+        final MultiMap headers = resolveHeaders();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();\n+    }\n+\n+    private ExtImpApplogy parseAndValidateImpExt(Imp imp) {\n+        final ExtImpApplogy extImpApplogy;\n+        try {\n+            extImpApplogy = Json.mapper.convertValue(imp.getExt().get(\"bidder\"), ExtImpApplogy.class);\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        if (StringUtils.isBlank(extImpApplogy.getToken())) {\n+            throw new PreBidException(\"token is empty\");\n+        }\n+        return extImpApplogy;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null && banner.getW() == null && CollectionUtils.isNotEmpty(banner.getFormat())) {\n+                final Format firstFormat = banner.getFormat().get(0);\n+                final Banner modifiedBanner = banner.toBuilder()\n+                        .h(firstFormat.getH())\n+                        .w(firstFormat.getW())\n+                        .build();\n+                return imp.toBuilder().banner(modifiedBanner).build();\n+            }\n+        }\n+        return imp;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(\"failed to decode json\"));\n+        }\n+    }\n+\n+    private static List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private static List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        final Map<String, BidType> requestImpIdToBidType = bidRequest.getImp().stream()\n+                .collect(Collectors.toMap(Imp::getId, ApplogyBidder::getBidType));\n+\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid,\n+                        requestImpIdToBidType.getOrDefault(bid.getImpid(), BidType.banner), DEFAULT_BID_CURRENCY))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static BidType getBidType(Imp imp) {\n+        if (imp.getVideo() != null) {\n+            return BidType.video;\n+        } else if (imp.getXNative() != null) {\n+            return BidType.xNative;\n+        } else {\n+            return BidType.banner;\n+\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> extractTargeting(ObjectNode ext) {\n+        return Collections.emptyMap();\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MDExNg==", "bodyText": "This annotation is redundant since the json field name can be resolved from variable name. Please remove it,", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366150116", "createdAt": "2020-01-14T04:40:40Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/applogy/ExtImpApplogy.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.prebid.server.proto.openrtb.ext.request.applogy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class ExtImpApplogy {\n+\n+    @JsonProperty(\"token\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MDYyMA==", "bodyText": "How the changes to Rubicon bidder are related to adding a new bidder? Please roll back this change and make a separate PR if this is not mistake and changes are required.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366150620", "createdAt": "2020-01-14T04:43:43Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/rubicon/ExtImpRubicon.java", "diffHunk": "@@ -32,4 +32,7 @@\n     RubiconVideoParams video;\n \n     String pchain;\n+\n+    @JsonProperty(\"is_rewarded_inventory\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MDczNA==", "bodyText": "Same as above - we are adding Applogy bidder, so why are we modifying Rubicon bidder?", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366150734", "createdAt": "2020-01-14T04:44:19Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/rubicon/RubiconVideoParams.java", "diffHunk": "@@ -21,4 +21,6 @@\n     Integer skip;\n \n     Integer skipdelay;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MDc0OQ==", "bodyText": "Same as above", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366150749", "createdAt": "2020-01-14T04:44:29Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/rubicon/VideoType.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.prebid.server.proto.openrtb.ext.request.rubicon;\n+\n+public enum VideoType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MDk1MQ==", "bodyText": "This is not where their AD Engine is) Check config/config.go from GO -> adapters.applogy.endpoint\nAs I understand - this and enabled=true are to run the Integration test. The config should contain actual bidder configuration and have bidder disabled by default,\nFor test, add these properties to src/test/resources/org/prebid/server/it/test-application.properties which are used for SpringBootTest environment used in integration tests.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366150951", "createdAt": "2020-01-14T04:45:53Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/resources/bidder-config/applogy.yaml", "diffHunk": "@@ -0,0 +1,26 @@\n+adapters:\n+  applogy:\n+    enabled: true\n+    endpoint: http://localhost:8090", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MTM0MQ==", "bodyText": "All new bidders are disabled by default.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366151341", "createdAt": "2020-01-14T04:47:59Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/resources/bidder-config/applogy.yaml", "diffHunk": "@@ -0,0 +1,26 @@\n+adapters:\n+  applogy:\n+    enabled: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MjMwNw==", "bodyText": "Although it is not used, but please use a dummy-value like other bidders - //applogy-usersync. Let's keep up the project style.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366152307", "createdAt": "2020-01-14T04:54:04Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/resources/org/prebid/server/it/test-application.properties", "diffHunk": "@@ -26,6 +26,10 @@ adapters.appnexus.enabled=true\n adapters.appnexus.endpoint=http://localhost:8090/appnexus-exchange\n adapters.appnexus.pbs-enforces-gdpr=true\n adapters.appnexus.usersync.url=//usersync-url/getuid?\n+adapters.applogy.enabled=true\n+adapters.applogy.endpoint=http://localhost:8090/applogy-exchange\n+adapters.applogy.pbs-enforces-gdpr=true\n+adapters.applogy.usersync.url=//usersync-url/getuid?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/92ce591c4bd02f4a261016f18b3958b411bf69cd", "committedDate": "2020-01-14T11:10:15Z", "message": "Applogy Bidder\n\n-Bidder fixed\n-tests fixed\n-configuration fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzUwNDc5", "url": "https://github.com/prebid/prebid-server-java/pull/583#pullrequestreview-342750479", "createdAt": "2020-01-14T18:36:49Z", "commit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODozNjo0OVrOFdhsMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOToyMTozMVrOFdi_bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwNTAwOQ==", "bodyText": "You should've left the CollectionUtils.isEmpty(), because what if we do have a list of Formats but it is empty?", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366505009", "createdAt": "2020-01-14T18:36:49Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpApplogy>> APPLOGY_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpApplogy>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpApplogy extImpApplogy = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpApplogy.getToken();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(resolveHeaders())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();\n+    }\n+\n+    private ExtImpApplogy parseAndValidateImpExt(Imp imp) {\n+        final ExtImpApplogy extImpApplogy;\n+        try {\n+            extImpApplogy = Json.mapper.convertValue(imp.getExt(), APPLOGY_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (extImpApplogy == null) {\n+            throw new PreBidException(\"impression extensions required\");\n+        }\n+\n+        if (StringUtils.isBlank(extImpApplogy.getToken())) {\n+            throw new PreBidException(\"token is empty\");\n+        }\n+        return extImpApplogy;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+            throw new PreBidException(\"Applogy only supports banner, video or native ads\");\n+        }\n+\n+        Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null || banner.getW() == null || banner.getH() == 0 || banner.getW() == 0) {\n+                if (banner.getFormat() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwNTE5OA==", "bodyText": "Please address this comment.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366505198", "createdAt": "2020-01-14T18:37:14Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));\n+        }\n+\n+        if (validImps.isEmpty()) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final ExtImpApplogy firstImpExt;\n+        try {\n+            firstImpExt = parseAndValidateImpExt(validImps.get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = Json.encode(outgoingRequest);\n+        final String requestUrl = endpointUrl + \"/\" + firstImpExt.getToken();\n+        final MultiMap headers = resolveHeaders();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();\n+    }\n+\n+    private ExtImpApplogy parseAndValidateImpExt(Imp imp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0MzUwMg=="}, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwNTI4OQ==", "bodyText": "Please address this comment", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366505289", "createdAt": "2020-01-14T18:37:26Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private final String endpointUrl;\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+                errors.add(BidderError.badInput(\n+                        String.format(\"Applogy only supports banner, video and native media types. Ignoring imp id=%s\",\n+                                imp.getId())));\n+                continue;\n+            }\n+            validImps.add(processImp(imp));\n+        }\n+\n+        if (validImps.isEmpty()) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final ExtImpApplogy firstImpExt;\n+        try {\n+            firstImpExt = parseAndValidateImpExt(validImps.get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = Json.encode(outgoingRequest);\n+        final String requestUrl = endpointUrl + \"/\" + firstImpExt.getToken();\n+        final MultiMap headers = resolveHeaders();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0MzE0NA=="}, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwNzUyMA==", "bodyText": "No need to add a custom message, just use the one from caught exception - e.getMessage().", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366507520", "createdAt": "2020-01-14T18:42:01Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpApplogy>> APPLOGY_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpApplogy>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpApplogy extImpApplogy = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpApplogy.getToken();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(resolveHeaders())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();\n+    }\n+\n+    private ExtImpApplogy parseAndValidateImpExt(Imp imp) {\n+        final ExtImpApplogy extImpApplogy;\n+        try {\n+            extImpApplogy = Json.mapper.convertValue(imp.getExt(), APPLOGY_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (extImpApplogy == null) {\n+            throw new PreBidException(\"impression extensions required\");\n+        }\n+\n+        if (StringUtils.isBlank(extImpApplogy.getToken())) {\n+            throw new PreBidException(\"token is empty\");\n+        }\n+        return extImpApplogy;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+            throw new PreBidException(\"Applogy only supports banner, video or native ads\");\n+        }\n+\n+        Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null || banner.getW() == null || banner.getH() == 0 || banner.getW() == 0) {\n+                if (banner.getFormat() == null) {\n+                    throw new PreBidException(\"banner size information missing\");\n+                }\n+\n+                final Format firstFormat = banner.getFormat().get(0);\n+                final Banner modifiedBanner = banner.toBuilder()\n+                        .h(firstFormat.getH())\n+                        .w(firstFormat.getW())\n+                        .build();\n+                return imp.toBuilder().banner(modifiedBanner).build();\n+            }\n+        }\n+        return imp;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(\"failed to decode json\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwODk1MA==", "bodyText": "Minor, but you don't need to pass whole bidRequest object when you need only a list of impressions from it - please change to bidFromResponse(bidRequest.getImp(), bid, errors) and method's param correspondingly.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366508950", "createdAt": "2020-01-14T18:45:04Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpApplogy>> APPLOGY_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpApplogy>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpApplogy extImpApplogy = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpApplogy.getToken();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(resolveHeaders())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();\n+    }\n+\n+    private ExtImpApplogy parseAndValidateImpExt(Imp imp) {\n+        final ExtImpApplogy extImpApplogy;\n+        try {\n+            extImpApplogy = Json.mapper.convertValue(imp.getExt(), APPLOGY_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (extImpApplogy == null) {\n+            throw new PreBidException(\"impression extensions required\");\n+        }\n+\n+        if (StringUtils.isBlank(extImpApplogy.getToken())) {\n+            throw new PreBidException(\"token is empty\");\n+        }\n+        return extImpApplogy;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+            throw new PreBidException(\"Applogy only supports banner, video or native ads\");\n+        }\n+\n+        Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null || banner.getW() == null || banner.getH() == 0 || banner.getW() == 0) {\n+                if (banner.getFormat() == null) {\n+                    throw new PreBidException(\"banner size information missing\");\n+                }\n+\n+                final Format firstFormat = banner.getFormat().get(0);\n+                final Banner modifiedBanner = banner.toBuilder()\n+                        .h(firstFormat.getH())\n+                        .w(firstFormat.getW())\n+                        .build();\n+                return imp.toBuilder().banner(modifiedBanner).build();\n+            }\n+        }\n+        return imp;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(\"failed to decode json\"));\n+        }\n+    }\n+\n+    private static Result<List<BidderBid>> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bidRequest, bid, errors))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMDEyNQ==", "bodyText": "You almost got it, except an empty line should be after class-closing brackets, not before it)\nJust an empty line after the last symbol (which is class-closing curly brackets).\nPlease check other files as well.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366510125", "createdAt": "2020-01-14T18:47:29Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpApplogy>> APPLOGY_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpApplogy>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpApplogy extImpApplogy = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpApplogy.getToken();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(resolveHeaders())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    private MultiMap resolveHeaders() {\n+        return HttpUtil.headers();\n+    }\n+\n+    private ExtImpApplogy parseAndValidateImpExt(Imp imp) {\n+        final ExtImpApplogy extImpApplogy;\n+        try {\n+            extImpApplogy = Json.mapper.convertValue(imp.getExt(), APPLOGY_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (extImpApplogy == null) {\n+            throw new PreBidException(\"impression extensions required\");\n+        }\n+\n+        if (StringUtils.isBlank(extImpApplogy.getToken())) {\n+            throw new PreBidException(\"token is empty\");\n+        }\n+        return extImpApplogy;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+            throw new PreBidException(\"Applogy only supports banner, video or native ads\");\n+        }\n+\n+        Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null || banner.getW() == null || banner.getH() == 0 || banner.getW() == 0) {\n+                if (banner.getFormat() == null) {\n+                    throw new PreBidException(\"banner size information missing\");\n+                }\n+\n+                final Format firstFormat = banner.getFormat().get(0);\n+                final Banner modifiedBanner = banner.toBuilder()\n+                        .h(firstFormat.getH())\n+                        .w(firstFormat.getW())\n+                        .build();\n+                return imp.toBuilder().banner(modifiedBanner).build();\n+            }\n+        }\n+        return imp;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(\"failed to decode json\"));\n+        }\n+    }\n+\n+    private static Result<List<BidderBid>> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bidRequest, bid, errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private static BidderBid bidFromResponse(BidRequest bidRequest, Bid bid, List<BidderError> errors) {\n+        try {\n+            final BidType bidType = getBidType(bid.getImpid(), bidRequest.getImp());\n+            return BidderBid.of(bid, bidType, DEFAULT_BID_CURRENCY);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+            return null;\n+        }\n+    }\n+\n+    private static BidType getBidType(String impId, List<Imp> imps) {\n+        for (Imp imp : imps) {\n+            if (imp.getId().equals(impId)) {\n+                if (imp.getBanner() != null) {\n+                    return BidType.banner;\n+                } else if (imp.getVideo() != null) {\n+                    return BidType.video;\n+                } else if (imp.getXNative() != null) {\n+                    return BidType.xNative;\n+                }\n+            }\n+        }\n+        throw new PreBidException(String.format(\"Failed to find impression %s\", impId));\n+    }\n+\n+    @Override\n+    public Map<String, String> extractTargeting(ObjectNode ext) {\n+        return Collections.emptyMap();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMDU2MQ==", "bodyText": "Please exclude any changes to Rubicon-related files.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366510561", "createdAt": "2020-01-14T18:48:28Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/rubicon/ExtImpRubicon.java", "diffHunk": "@@ -32,4 +32,5 @@\n     RubiconVideoParams video;\n \n     String pchain;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMDYwMw==", "bodyText": "Please exclude any changes to Rubicon-related files.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366510603", "createdAt": "2020-01-14T18:48:33Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/rubicon/RubiconVideoParams.java", "diffHunk": "@@ -21,4 +21,6 @@\n     Integer skip;\n \n     Integer skipdelay;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE1MDczNA=="}, "originalCommit": {"oid": "c5a09970fcd38883d3e6939b87341da9eda8dd46"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMDk2MQ==", "bodyText": "An empty line should be added here as well. After the last symbol/class", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366510961", "createdAt": "2020-01-14T18:49:15Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/spring/config/bidder/ApplogyConfiguration.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.prebid.server.spring.config.bidder;\n+\n+import org.prebid.server.bidder.BidderDeps;\n+import org.prebid.server.bidder.applogy.ApplogyBidder;\n+import org.prebid.server.spring.config.bidder.model.BidderConfigurationProperties;\n+import org.prebid.server.spring.config.bidder.util.BidderDepsAssembler;\n+import org.prebid.server.spring.config.bidder.util.BidderInfoCreator;\n+import org.prebid.server.spring.config.bidder.util.UsersyncerCreator;\n+import org.prebid.server.spring.env.YamlPropertySourceFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+\n+import javax.validation.constraints.NotBlank;\n+\n+@Configuration\n+@PropertySource(value = \"classpath:/bidder-config/applogy.yaml\", factory = YamlPropertySourceFactory.class)\n+public class ApplogyConfiguration {\n+\n+    private static final String BIDDER_NAME = \"applogy\";\n+\n+    @Value(\"${external-url}\")\n+    @NotBlank\n+    private String externalUrl;\n+\n+    @Autowired\n+    @Qualifier(\"applogyConfigurationProperties\")\n+    private BidderConfigurationProperties configProperties;\n+\n+    @Bean(\"applogyConfigurationProperties\")\n+    @ConfigurationProperties(\"adapters.applogy\")\n+    BidderConfigurationProperties configurationProperties() {\n+        return new BidderConfigurationProperties();\n+    }\n+\n+    @Bean\n+    BidderDeps applogyBidderDeps() {\n+        return BidderDepsAssembler.forBidder(BIDDER_NAME)\n+                .withConfig(configProperties)\n+                .bidderInfo(BidderInfoCreator.create(configProperties))\n+                .usersyncerCreator(UsersyncerCreator.create(configProperties.getUsersync(), externalUrl))\n+                .bidderCreator(() -> new ApplogyBidder(configProperties.getEndpoint()))\n+                .assemble();\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMTkwOQ==", "bodyText": "Minor, but please add a space (empty line) between the class and the first class constant. Let's keep it clean and clear.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366511909", "createdAt": "2020-01-14T18:51:10Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpApplogy>> APPLOGY_EXT_TYPE_REFERENCE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjYxOQ==", "bodyText": "Although test files are not checked by project's checkstyle, please be sure to keep they in the same style and clean up whatever is unnecessary - in this case, please remove this extra empty line.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366512619", "createdAt": "2020-01-14T18:52:29Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxNDA3MA==", "bodyText": "Please remove these two empty lines and add one after last symbol/class", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366514070", "createdAt": "2020-01-14T18:55:26Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ApplogyBidder applogyBidder;\n+\n+    @Before\n+    public void setUp() {\n+        applogyBidder = new ApplogyBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpApplogy.of(null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"token is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpApplogy> ext = ExtPrebid.of(null, ExtImpApplogy.of(\"token1\"));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Applogy only supports banner, video or native ads\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"failed to decode json\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"failed to decode json\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), video, \"USD\"));\n+    }\n+\n+    @Test\n+    public void extractTargetingShouldReturnEmptyMap() {\n+        assertThat(applogyBidder.extractTargeting(mapper.createObjectNode())).isEqualTo(emptyMap());\n+    }\n+\n+    private static BidRequest givenBidRequest(\n+            Function<BidRequest.BidRequestBuilder, BidRequest.BidRequestBuilder> bidRequestCustomizer,\n+            Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+\n+        return bidRequestCustomizer.apply(BidRequest.builder()\n+                .imp(singletonList(givenImp(impCustomizer))))\n+                .build();\n+    }\n+\n+    private static BidRequest givenBidRequest(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return givenBidRequest(identity(), impCustomizer);\n+    }\n+\n+    private static Imp givenImp(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return impCustomizer.apply(Imp.builder()\n+                .id(\"123\")\n+                .banner(Banner.builder().id(\"banner_id\").build())\n+                .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                        ExtImpApplogy.of(\"token\")))))\n+                .build();\n+    }\n+\n+    private static BidResponse givenBidResponse(Function<Bid.BidBuilder, Bid.BidBuilder> bidCustomizer) {\n+        return BidResponse.builder()\n+                .seatbid(singletonList(SeatBid.builder()\n+                        .bid(singletonList(bidCustomizer.apply(Bid.builder()).build()))\n+                        .build()))\n+                .build();\n+    }\n+\n+    private static HttpCall<BidRequest> givenHttpCall(BidRequest bidRequest, String body) {\n+        return HttpCall.success(\n+                HttpRequest.<BidRequest>builder().payload(bidRequest).build(),\n+                HttpResponse.of(200, null, body),\n+                null);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxNjA2NA==", "bodyText": "No need to jump to next line, in this case it would be better to keep ExtImpApplogy.of(\"token\") param in the same line as null param.\nNote - sometimes IDE can add parameters' names which would move the code and look like it is larger then it actually is. You should ignore such cases and always check the length only for the actual code, excluding the \"tips\".\nPlease check all similar cases here in tests. Thanks!", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366516064", "createdAt": "2020-01-14T18:59:31Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ApplogyBidder applogyBidder;\n+\n+    @Before\n+    public void setUp() {\n+        applogyBidder = new ApplogyBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpApplogy.of(null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"token is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpApplogy> ext = ExtPrebid.of(null, ExtImpApplogy.of(\"token1\"));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Applogy only supports banner, video or native ads\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"failed to decode json\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"failed to decode json\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), video, \"USD\"));\n+    }\n+\n+    @Test\n+    public void extractTargetingShouldReturnEmptyMap() {\n+        assertThat(applogyBidder.extractTargeting(mapper.createObjectNode())).isEqualTo(emptyMap());\n+    }\n+\n+    private static BidRequest givenBidRequest(\n+            Function<BidRequest.BidRequestBuilder, BidRequest.BidRequestBuilder> bidRequestCustomizer,\n+            Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+\n+        return bidRequestCustomizer.apply(BidRequest.builder()\n+                .imp(singletonList(givenImp(impCustomizer))))\n+                .build();\n+    }\n+\n+    private static BidRequest givenBidRequest(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return givenBidRequest(identity(), impCustomizer);\n+    }\n+\n+    private static Imp givenImp(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return impCustomizer.apply(Imp.builder()\n+                .id(\"123\")\n+                .banner(Banner.builder().id(\"banner_id\").build())\n+                .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                        ExtImpApplogy.of(\"token\")))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxNzk0NA==", "bodyText": "The general approach (at least the one I use) is to either include all error cases first (as they appear in the method's flow) and then check all normal cases or go by methods flow combining error and regular cases. The first one is better and this is what we are using.\nSo here, please add a test case when there's an error while converting impression extension - check test named makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed in other bidders' tests.\nThe key is to have all cases of possible inputs and resulting outputs covered to ensure all bidder aspects work as expected.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366517944", "createdAt": "2020-01-14T19:03:38Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ApplogyBidder applogyBidder;\n+\n+    @Before\n+    public void setUp() {\n+        applogyBidder = new ApplogyBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\"));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxOTMwOQ==", "bodyText": "No need to switch to next line, stay in one line where it is possible and doesn't harm code readability. Check other cases.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366519309", "createdAt": "2020-01-14T19:06:44Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ApplogyBidder applogyBidder;\n+\n+    @Before\n+    public void setUp() {\n+        applogyBidder = new ApplogyBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpApplogy.of(null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"token is empty\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyMDI1Nw==", "bodyText": "This should be placed after all makeHttpRequests method cases. Please ensure the correct tests order.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366520257", "createdAt": "2020-01-14T19:08:46Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ApplogyBidder applogyBidder;\n+\n+    @Before\n+    public void setUp() {\n+        applogyBidder = new ApplogyBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpApplogy.of(null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"token is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpApplogy> ext = ExtPrebid.of(null, ExtImpApplogy.of(\"token1\"));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Applogy only supports banner, video or native ads\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyMDk4Nw==", "bodyText": "Duplicate of one you have above. Remove the one above as it is not placed where it should.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366520987", "createdAt": "2020-01-14T19:10:18Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ApplogyBidder applogyBidder;\n+\n+    @Before\n+    public void setUp() {\n+        applogyBidder = new ApplogyBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpApplogy.of(null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"token is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpApplogy> ext = ExtPrebid.of(null, ExtImpApplogy.of(\"token1\"));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Applogy only supports banner, video or native ads\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"failed to decode json\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyMTU4Ng==", "bodyText": "Move test case down to where makeBids are located in accordance to the method's flow.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366521586", "createdAt": "2020-01-14T19:11:35Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ApplogyBidder applogyBidder;\n+\n+    @Before\n+    public void setUp() {\n+        applogyBidder = new ApplogyBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpApplogy.of(null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"token is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpApplogy> ext = ExtPrebid.of(null, ExtImpApplogy.of(\"token1\"));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Applogy only supports banner, video or native ads\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"failed to decode json\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyMjYyMQ==", "bodyText": "Please add a case when banner doesn't have Width or Height and doesn't have the formats (imp.getFormat() == null) as well as when formats are empty ((imp.getFormat().size() == 0).\nWe need to check that \"banner size information missing\" exception is thrown as expected.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366522621", "createdAt": "2020-01-14T19:13:48Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ApplogyBidder applogyBidder;\n+\n+    @Before\n+    public void setUp() {\n+        applogyBidder = new ApplogyBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpApplogy.of(null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"token is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpApplogy> ext = ExtPrebid.of(null, ExtImpApplogy.of(\"token1\"));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Applogy only supports banner, video or native ads\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyMzYwMg==", "bodyText": "Please add a test case to ensure the httpRequest URI being formed correctly by using the token from bidRequest's impression.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366523602", "createdAt": "2020-01-14T19:15:54Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ApplogyBidder applogyBidder;\n+\n+    @Before\n+    public void setUp() {\n+        applogyBidder = new ApplogyBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpApplogy.of(null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"token is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpApplogy> ext = ExtPrebid.of(null, ExtImpApplogy.of(\"token1\"));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Applogy only supports banner, video or native ads\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"failed to decode json\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyNDMwMA==", "bodyText": "Please add other cases like makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp for cases when we have a Banner and Native to ensure that the bid type is resolved correctly.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366524300", "createdAt": "2020-01-14T19:17:32Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ApplogyBidder applogyBidder;\n+\n+    @Before\n+    public void setUp() {\n+        applogyBidder = new ApplogyBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpApplogy.of(null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"token is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpApplogy> ext = ExtPrebid.of(null, ExtImpApplogy.of(\"token1\"));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Applogy only supports banner, video or native ads\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"failed to decode json\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"failed to decode json\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), video, \"USD\"));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyNDk4OA==", "bodyText": "Please add a test case for an error \"Failed to find impression %s\", impId when imp.id and bid.impid were not matched.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366524988", "createdAt": "2020-01-14T19:18:52Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/bidder/applogy/ApplogyBidderTest.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.applogy;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ApplogyBidderTest extends VertxTest {\n+\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ApplogyBidder applogyBidder;\n+\n+    @Before\n+    public void setUp() {\n+        applogyBidder = new ApplogyBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpApplogy.of(null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"token is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpApplogy> ext = ExtPrebid.of(null, ExtImpApplogy.of(\"token1\"));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Applogy only supports banner, video or native ads\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"failed to decode json\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = applogyBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }\n+\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"failed to decode json\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = applogyBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyNjMxNg==", "bodyText": "Please add an empty line here to separate stubs for better code clarity and remove an extra empty line below, after expected response. Thanks!", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r366526316", "createdAt": "2020-01-14T19:21:31Z", "author": {"login": "RossGoncharuk"}, "path": "src/test/java/org/prebid/server/it/ApplogyTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.IOException;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class ApplogyTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromApplogy() throws IOException, JSONException {\n+        // given\n+        // Applogy bid response for imp 001\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/applogy-exchange/1234\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/applogy/test-applogy-bid-request-1.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/applogy/test-applogy-bid-response-1.json\"))));\n+        // Applogy bid response for imp 002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d605a2ec7917e07849fb08cf514f35dfe9b0971", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/2d605a2ec7917e07849fb08cf514f35dfe9b0971", "committedDate": "2020-01-14T20:15:15Z", "message": "Rubicon Bidder\n\n-code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaddc417147ef8a8b55d4dea3d15479704deec04", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/eaddc417147ef8a8b55d4dea3d15479704deec04", "committedDate": "2020-01-15T08:12:57Z", "message": "Rubicon Bidder\n\n-code cleanup\n-tests improve"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64f3753344d28b5a047e20c637a8a72d270c178b", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/64f3753344d28b5a047e20c637a8a72d270c178b", "committedDate": "2020-01-15T08:15:52Z", "message": "Rubicon Bidder\n\n-code fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjU1NTA2", "url": "https://github.com/prebid/prebid-server-java/pull/583#pullrequestreview-343655506", "createdAt": "2020-01-16T03:27:52Z", "commit": {"oid": "64f3753344d28b5a047e20c637a8a72d270c178b"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzoyNzo1MlrOFeNC0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzozMjoxMFrOFeNF4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNTMxNA==", "bodyText": "Please check the CollectionUtils.isEmpty() method. It is a null safe check of whether the given collection is empty, meaning that you don't need to check is passed collection is not null - that check is inside, otherwise you would just call banner.getFormat().isEmpty() after null check (which what that utility method does).\nJust leave CollectionUtils.isEmpty(banner.getFormat()) for the if condition.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r367215314", "createdAt": "2020-01-16T03:27:52Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -112,7 +90,7 @@ private Imp processImp(Imp imp) {\n         Banner banner = imp.getBanner();\n         if (banner != null) {\n             if (banner.getH() == null || banner.getW() == null || banner.getH() == 0 || banner.getW() == 0) {\n-                if (banner.getFormat() == null) {\n+                if (banner.getFormat() == null || CollectionUtils.isEmpty(banner.getFormat())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f3753344d28b5a047e20c637a8a72d270c178b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxNjA5OQ==", "bodyText": "Have you rolled back Rubicon files?", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r367216099", "createdAt": "2020-01-16T03:32:10Z", "author": {"login": "RossGoncharuk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/rubicon/ExtImpRubicon.java", "diffHunk": "@@ -32,4 +32,5 @@\n     RubiconVideoParams video;\n \n     String pchain;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMDU2MQ=="}, "originalCommit": {"oid": "92ce591c4bd02f4a261016f18b3958b411bf69cd"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19ed0f6327221a66bbae2ff18da01db0d7550d36", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/19ed0f6327221a66bbae2ff18da01db0d7550d36", "committedDate": "2020-01-16T06:59:39Z", "message": "Rubicon Bidder Code cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDIzMzMx", "url": "https://github.com/prebid/prebid-server-java/pull/583#pullrequestreview-344023331", "createdAt": "2020-01-16T15:59:35Z", "commit": {"oid": "19ed0f6327221a66bbae2ff18da01db0d7550d36"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1OTozNlrOFeeirw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjowNzo0OVrOFee21g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwMTk5OQ==", "bodyText": "Can it be final?", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r367501999", "createdAt": "2020-01-16T15:59:36Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/applogy/ApplogyBidder.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.prebid.server.bidder.applogy;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.applogy.ExtImpApplogy;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ApplogyBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpApplogy>> APPLOGY_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpApplogy>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public ApplogyBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpApplogy extImpApplogy = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpApplogy.getToken();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {\n+            throw new PreBidException(\"Applogy only supports banner, video or native ads\");\n+        }\n+\n+        Banner banner = imp.getBanner();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ed0f6327221a66bbae2ff18da01db0d7550d36"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwNjgxOQ==", "bodyText": "Please, remove empty line before class-closing curly brace.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r367506819", "createdAt": "2020-01-16T16:07:11Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/applogy/ExtImpApplogy.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.prebid.server.proto.openrtb.ext.request.applogy;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class ExtImpApplogy {\n+\n+    String token;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ed0f6327221a66bbae2ff18da01db0d7550d36"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwNjk5NA==", "bodyText": "Please, remove empty line before class-closing curly brace.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r367506994", "createdAt": "2020-01-16T16:07:30Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/rubicon/ExtImpRubicon.java", "diffHunk": "@@ -32,4 +32,5 @@\n     RubiconVideoParams video;\n \n     String pchain;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ed0f6327221a66bbae2ff18da01db0d7550d36"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwNzE1OA==", "bodyText": "Please, remove empty line before class-closing curly brace.", "url": "https://github.com/prebid/prebid-server-java/pull/583#discussion_r367507158", "createdAt": "2020-01-16T16:07:49Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/rubicon/RubiconVideoParams.java", "diffHunk": "@@ -21,4 +21,5 @@\n     Integer skip;\n \n     Integer skipdelay;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ed0f6327221a66bbae2ff18da01db0d7550d36"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1019f877788b942b494a053336e9745e6089408d", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/1019f877788b942b494a053336e9745e6089408d", "committedDate": "2020-01-16T18:27:56Z", "message": "Minor code style fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDg1OTcw", "url": "https://github.com/prebid/prebid-server-java/pull/583#pullrequestreview-344485970", "createdAt": "2020-01-17T10:24:59Z", "commit": {"oid": "1019f877788b942b494a053336e9745e6089408d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3358, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}