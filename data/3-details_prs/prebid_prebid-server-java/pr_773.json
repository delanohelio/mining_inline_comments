{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTM0MjY1", "number": 773, "title": "Gdpr behavior by integration type", "bodyText": "", "createdAt": "2020-06-22T13:13:22Z", "url": "https://github.com/prebid/prebid-server-java/pull/773", "merged": true, "mergeCommit": {"oid": "d1f7bd58f49169b5d6ca655acec6a16afe284436"}, "closed": true, "closedAt": "2020-08-12T17:30:59Z", "author": {"login": "BraslavskiyAndrey"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctrGwHAH2gAyNDM3OTM0MjY1OjYxOWZkNzViNmZlNWUwM2IxN2IyNDI0MTkxYjIwZDk4Y2FiODRiZGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-Ln_CgFqTQ2NTkyNzU2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "619fd75b6fe5e03b17b2424191b20d98cab84bda", "author": {"user": {"login": "BraslavskiyAndrey", "name": "Braslavskyi Andrii"}}, "url": "https://github.com/prebid/prebid-server-java/commit/619fd75b6fe5e03b17b2424191b20d98cab84bda", "committedDate": "2020-06-22T06:45:58Z", "message": "Split gdpr enabled by request type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2073ad834d38341984dbd296bf3a6067425f63d7", "author": {"user": {"login": "BraslavskiyAndrey", "name": "Braslavskyi Andrii"}}, "url": "https://github.com/prebid/prebid-server-java/commit/2073ad834d38341984dbd296bf3a6067425f63d7", "committedDate": "2020-06-22T13:08:49Z", "message": "Return enabled property for legacy and not auction requests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NzMyNjE5", "url": "https://github.com/prebid/prebid-server-java/pull/773#pullrequestreview-435732619", "createdAt": "2020-06-23T12:31:47Z", "commit": {"oid": "2073ad834d38341984dbd296bf3a6067425f63d7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjozMTo0N1rOGnm97w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjozNjowMVrOGnnHOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4NjA5NQ==", "bodyText": "Probably, it's better to get accountEnabled from retrieved account also.\n final Boolean accountGdprEnabled = accountGdprConfig != null && accountGdprConfig.getEnabled() != null;\n\n        if (requestType == null) {\n            return ObjectUtils.firstNonNull(accountGdprEnabled, gdprEnabled);\n        }\n\n        final EnabledForRequestType enabledForRequestType = accountGdprConfig != null\n                ? accountGdprConfig.getEnabledForRequestType()\n                : null;\n        final Boolean enabledForType = enabledForRequestType != null\n                ? enabledForRequestType.isEnabledFor(requestType)\n                : null;\n\n        return ObjectUtils.firstNonNull(enabledForType, accountGdprEnabled, gdprEnabled);", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444186095", "createdAt": "2020-06-23T12:31:47Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/privacy/gdpr/TcfDefinerService.java", "diffHunk": "@@ -143,10 +150,17 @@ public TcfDefinerService(GdprConfig gdprConfig,\n                         dispatchToService(gdprInfoWithCountry, allowAllTcfResponseCreator, tcf2Strategy, gdprStrategy));\n     }\n \n-    private boolean isGdprEnabled(AccountGdprConfig accountGdprConfig) {\n-        return accountGdprConfig != null && accountGdprConfig.getEnabled() != null\n-                ? accountGdprConfig.getEnabled()\n-                : gdprEnabled;\n+    private boolean isGdprEnabled(AccountGdprConfig accountGdprConfig, MetricName requestType) {\n+        if (requestType == null) {\n+            return accountGdprConfig != null && accountGdprConfig.getEnabled() != null\n+                    ? accountGdprConfig.getEnabled()\n+                    : gdprEnabled;\n+        }\n+        final EnabledForRequestType enabledForRequestType = accountGdprConfig != null\n+                ? accountGdprConfig.getEnabledForRequestType()\n+                : null;\n+        final Boolean enabled = enabledForRequestType != null ? enabledForRequestType.isEnabledFor(requestType) : null;\n+        return enabled != null ? enabled : gdprEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2073ad834d38341984dbd296bf3a6067425f63d7"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4ODQ3NA==", "bodyText": "Don't we need to check account.enabled also ?", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444188474", "createdAt": "2020-06-23T12:36:01Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/privacy/gdpr/TcfDefinerServiceTest.java", "diffHunk": "@@ -112,14 +114,93 @@ public void resultForVendorIdsShouldAllowAllWhenGdprIsDisabled() {\n         verifyZeroInteractions(metrics);\n     }\n \n+    @Test\n+    public void resultForBidderNamesShouldAllowAllWhenGdprIsDisabledByAccountForRequestType() {\n+        // given\n+        final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder()\n+                .enabledForRequestType(EnabledForRequestType.of(null, false, null, null))\n+                .build();\n+\n+        // when\n+        final Future<TcfResponse<String>> result = target.resultForBidderNames(\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, MetricName.amp, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n     @Test\n     public void resultForBidderNamesShouldAllowAllWhenGdprIsDisabledByAccount() {\n         // given\n         final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder().enabled(false).build();\n \n         // when\n         final Future<TcfResponse<String>> result = target.resultForBidderNames(\n-                singleton(\"b\"), null, null, null, null, accountGdprConfig, null);\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, null, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n+    @Test\n+    public void resultForBidderNamesShouldAllowAllWhenGdprIsNotDefinedForRequestTypeAndPBSGdprIsDisabled() {\n+        // given\n+        final GdprConfig gdprConfig = GdprConfig.builder()\n+                .defaultValue(\"1\")\n+                .enabled(false)\n+                .purposes(purposes)\n+                .build();\n+        final TcfDefinerService target = new TcfDefinerService(gdprConfig, singleton(EEA_COUNTRY), gdprService,\n+                tcf2Service, geoLocationService, bidderCatalog, metrics);\n+\n+        final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder()\n+                .enabledForRequestType(EnabledForRequestType.of(null, null, null, null))\n+                .build();\n+\n+        // when\n+        final Future<TcfResponse<String>> result = target.resultForBidderNames(\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, MetricName.amp, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n+    @Test\n+    public void resultForBidderNamesShouldIgnoreUnknownRequestTypeAndDecideByPbsGdprDisabledProperty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2073ad834d38341984dbd296bf3a6067425f63d7"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c55b8d11c1e1a04fc2a7fbb6552bf300cfc56539", "author": {"user": {"login": "BraslavskiyAndrey", "name": "Braslavskyi Andrii"}}, "url": "https://github.com/prebid/prebid-server-java/commit/c55b8d11c1e1a04fc2a7fbb6552bf300cfc56539", "committedDate": "2020-06-23T13:40:20Z", "message": "account.gdpr.integration_enabled config overrides account.gdpr.enabled config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Nzk3Mjc4", "url": "https://github.com/prebid/prebid-server-java/pull/773#pullrequestreview-435797278", "createdAt": "2020-06-23T13:45:00Z", "commit": {"oid": "c55b8d11c1e1a04fc2a7fbb6552bf300cfc56539"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb79ed068b27d3797f136d731d86635d38adde78", "author": {"user": {"login": "BraslavskiyAndrey", "name": "Braslavskyi Andrii"}}, "url": "https://github.com/prebid/prebid-server-java/commit/eb79ed068b27d3797f136d731d86635d38adde78", "committedDate": "2020-08-06T12:00:03Z", "message": "Merge branch 'master' into gdpr-behavior-by-integration-type\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/auction/PrivacyEnforcementService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0cd442d10b2423456b2366512cbded0f9d4434d", "author": {"user": {"login": "BraslavskiyAndrey", "name": "Braslavskyi Andrii"}}, "url": "https://github.com/prebid/prebid-server-java/commit/a0cd442d10b2423456b2366512cbded0f9d4434d", "committedDate": "2020-08-06T12:07:35Z", "message": "Resolved merge errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02e84b3cb9683b2b2caeb5e8bc82facd26723ec9", "author": {"user": {"login": "BraslavskiyAndrey", "name": "Braslavskyi Andrii"}}, "url": "https://github.com/prebid/prebid-server-java/commit/02e84b3cb9683b2b2caeb5e8bc82facd26723ec9", "committedDate": "2020-08-06T12:13:30Z", "message": "Update application-settings.md for integration-enabled property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a81dfde458f510d24e11109374db2d291773e7ce", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/a81dfde458f510d24e11109374db2d291773e7ce", "committedDate": "2020-08-12T13:30:41Z", "message": "Merge branch 'master' into gdpr-behavior-by-integration-type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44bdafa7e204b4321b5fbe30a512eba88de8fe13", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/44bdafa7e204b4321b5fbe30a512eba88de8fe13", "committedDate": "2020-08-12T13:41:22Z", "message": "Fixes after review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1OTI3NTYw", "url": "https://github.com/prebid/prebid-server-java/pull/773#pullrequestreview-465927560", "createdAt": "2020-08-12T13:42:01Z", "commit": {"oid": "44bdafa7e204b4321b5fbe30a512eba88de8fe13"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3228, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}