{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NzUwNjgz", "number": 1000, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzo0OTo0MVrOE4rBSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzo1Mjo1MlrOE4rGHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODYwNTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adkernel/AdkernelBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzo0OTo0MVrOHyvASA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzo0OTo0MVrOHyvASA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk2MDk2OA==", "bodyText": "return pubToImps.values().stream().allMatch(CollectionUtils::isEmpty);", "url": "https://github.com/prebid/prebid-server-java/pull/1000#discussion_r522960968", "createdAt": "2020-11-13T13:49:41Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adkernel/AdkernelBidder.java", "diffHunk": "@@ -104,25 +108,22 @@ private ExtImpAdkernel parseAndValidateImpExt(Imp imp) {\n         return extImpAdkernel;\n     }\n \n-    //Group impressions by AdKernel-specific parameters `zoneId` & `host`\n     private static void dispatchImpression(Imp imp, ExtImpAdkernel extImpAdkernel,\n                                            Map<ExtImpAdkernel, List<Imp>> pubToImp) {\n         pubToImp.putIfAbsent(extImpAdkernel, new ArrayList<>());\n         pubToImp.get(extImpAdkernel).add(compatImpression(imp));\n     }\n \n-    //Alter impression info to comply with adkernel platform requirements\n     private static Imp compatImpression(Imp imp) {\n-        final Imp.ImpBuilder impBuilder = imp.toBuilder().ext(null) //do not forward ext to adkernel platform\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder().ext(null)\n                 .audio(null)\n                 .xNative(null);\n         return imp.getBanner() != null ? impBuilder.video(null).build() : impBuilder.build();\n     }\n \n     private static boolean hasNoImpressions(Map<ExtImpAdkernel, List<Imp>> pubToImps) {\n         return pubToImps.values().stream()\n-                .mapToLong(Collection::size)\n-                .sum() == 0;\n+                .noneMatch(imp -> imp.size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1513aba3660aad3ae197560272fb1a70fd31ea"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODYwODkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adkernel/AdkernelBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzo1MDoyOFrOHyvCJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzo1MDoyOFrOHyvCJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk2MTQ0Nw==", "bodyText": "private static BidRequest createBidRequest(List<Imp> imps,\n                                               BidRequest.BidRequestBuilder requestBuilder,\n                                               Site site,\n                                               App app)", "url": "https://github.com/prebid/prebid-server-java/pull/1000#discussion_r522961447", "createdAt": "2020-11-13T13:50:28Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adkernel/AdkernelBidder.java", "diffHunk": "@@ -145,8 +146,8 @@ private static boolean hasNoImpressions(Map<ExtImpAdkernel, List<Imp>> pubToImps\n                 .build();\n     }\n \n-    private static BidRequest createBidRequest(\n-            List<Imp> imps, BidRequest.BidRequestBuilder requestBuilder, Site site, App app) {\n+    private static BidRequest createBidRequest(List<Imp> imps, BidRequest.BidRequestBuilder requestBuilder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1513aba3660aad3ae197560272fb1a70fd31ea"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODYxNzg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/adkernel/AdkernelBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzo1Mjo1MlrOHyvHeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMzo1Mjo1MlrOHyvHeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk2MjgwOQ==", "bodyText": "I don't see why it is better (in all cases)", "url": "https://github.com/prebid/prebid-server-java/pull/1000#discussion_r522962809", "createdAt": "2020-11-13T13:52:52Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adkernel/AdkernelBidderTest.java", "diffHunk": "@@ -70,8 +70,9 @@ public void makeHttpRequestsShouldReturnErrorWhenImpHasNoBannerOrVideo() {\n \n         // then\n         assertThat(result.getValue()).isNull();\n-        assertThat(result.getErrors()).hasSize(1)\n-                .containsOnly(BidderError.badInput(\"Invalid imp id=123. Expected imp.banner or imp.video\"));\n+        assertThat(result.getErrors())\n+                .allMatch(error -> error.getType() == BidderError.Type.bad_input\n+                        && error.getMessage().startsWith(\"Invalid imp id=123. Expected imp.banner or imp.vide\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1513aba3660aad3ae197560272fb1a70fd31ea"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3798, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}