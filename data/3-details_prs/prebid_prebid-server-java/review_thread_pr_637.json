{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTk2MjQ4", "number": 637, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzozNzoyMFrODqYVpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDowMjoyMFrOECfdfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzY1NTQxOnYy", "diffSide": "LEFT", "path": "src/test/java/org/prebid/server/it/SmartrtbTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzozNzoyMFrOF6Ft8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzozNzoyMFrOF6Ft8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1NTQwOA==", "bodyText": "does this change really necessary ?", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396455408", "createdAt": "2020-03-23T13:37:20Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/it/SmartrtbTest.java", "diffHunk": "@@ -51,9 +51,7 @@ public void openrtb2AuctionShouldRespondWithBidsFromSmartrtb() throws IOExceptio\n                 \"openrtb2/smartrtb/test-auction-smartrtb-response.json\",\n                 response, singletonList(\"smartrtb\"));\n \n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzY5NjkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/model/AdopplerResponseVideoAdsExt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzo0NzowM1rOF6GH9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzo0NzowM1rOF6GH9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MjA2OQ==", "bodyText": "Models can be only objects, not primitives", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396462069", "createdAt": "2020-03-23T13:47:03Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/model/AdopplerResponseVideoAdsExt.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.prebid.server.bidder.adoppler.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class AdopplerResponseVideoAdsExt {\n+\n+    int duration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc0NTUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzo1Nzo0OVrOF6GmOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzo1Nzo0OVrOF6GmOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2OTgxOA==", "bodyText": "redundant call to .format", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396469818", "createdAt": "2020-03-23T13:57:49Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.proto.openrtb.ext.response.ExtBidPrebidVideo;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class AdopplerBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdoppler>> ADOPPLER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdoppler>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdopplerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n+                final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n+                final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n+                final BidRequest outgoingRequest = updateRequest.toBuilder().imp(Collections\n+                        .singletonList(imp)).build();\n+                final String body = mapper.encode(outgoingRequest);\n+                final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+                result.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build());\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdoppler extImpAdoppler;\n+        try {\n+            extImpAdoppler = mapper.mapper().convertValue(imp.getExt(), ADOPPLER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+        if (StringUtils.isBlank(extImpAdoppler.getAdunit())) {\n+            throw new PreBidException(String.format(\"$.imp.ext.adoppler.adunit required\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc2MDkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowMToxM1rOF6Gv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowMToxM1rOF6Gv5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MjI5Mw==", "bodyText": "please extract this in a separate method createSingleRequest", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396472293", "createdAt": "2020-03-23T14:01:13Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.proto.openrtb.ext.response.ExtBidPrebidVideo;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class AdopplerBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdoppler>> ADOPPLER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdoppler>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdopplerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n+                final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n+                final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n+                final BidRequest outgoingRequest = updateRequest.toBuilder().imp(Collections\n+                        .singletonList(imp)).build();\n+                final String body = mapper.encode(outgoingRequest);\n+                final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+                result.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc3MTEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowMzozOVrOF6G2bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowMzozOVrOF6G2bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3Mzk2NQ==", "bodyText": "Where the logic related to custom url in which they use ext.adUnit", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396473965", "createdAt": "2020-03-23T14:03:39Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.proto.openrtb.ext.response.ExtBidPrebidVideo;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class AdopplerBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdoppler>> ADOPPLER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdoppler>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdopplerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n+                final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n+                final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n+                final BidRequest outgoingRequest = updateRequest.toBuilder().imp(Collections\n+                        .singletonList(imp)).build();\n+                final String body = mapper.encode(outgoingRequest);\n+                final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+                result.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc4NzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowNzo0MVrOF6HA2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowNzo0MVrOF6HA2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjYzNQ==", "bodyText": "redundant .format", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396476635", "createdAt": "2020-03-23T14:07:41Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.proto.openrtb.ext.response.ExtBidPrebidVideo;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class AdopplerBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdoppler>> ADOPPLER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdoppler>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdopplerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n+                final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n+                final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n+                final BidRequest outgoingRequest = updateRequest.toBuilder().imp(Collections\n+                        .singletonList(imp)).build();\n+                final String body = mapper.encode(outgoingRequest);\n+                final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+                result.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build());\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdoppler extImpAdoppler;\n+        try {\n+            extImpAdoppler = mapper.mapper().convertValue(imp.getExt(), ADOPPLER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+        if (StringUtils.isBlank(extImpAdoppler.getAdunit())) {\n+            throw new PreBidException(String.format(\"$.imp.ext.adoppler.adunit required\"));\n+        }\n+        return extImpAdoppler;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad request\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final BidResponse bidResponse;\n+        try {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n+                    e.getMessage())));\n+        }\n+\n+        final Map<String, BidType> impTypes = new HashMap<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            if (impTypes.get(imp.getId()) != null) {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\"duplicate $.imp.id %s\", imp.getId())));\n+            }\n+            if (imp.getBanner() != null) {\n+                impTypes.put(imp.getId(), BidType.banner);\n+            } else if (imp.getVideo() != null) {\n+                impTypes.put(imp.getId(), BidType.video);\n+            } else if (imp.getAudio() != null) {\n+                impTypes.put(imp.getId(), BidType.audio);\n+            } else if (imp.getXNative() != null) {\n+                impTypes.put(imp.getId(), BidType.xNative);\n+            } else {\n+                return Result.emptyWithError(BidderError.badInput(String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc5NDQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowOToyNFrOF6HFeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowOToyNFrOF6HFeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NzgxNg==", "bodyText": "I'd probably extracted this into separate method", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396477816", "createdAt": "2020-03-23T14:09:24Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.proto.openrtb.ext.response.ExtBidPrebidVideo;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class AdopplerBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdoppler>> ADOPPLER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdoppler>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdopplerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n+                final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n+                final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n+                final BidRequest outgoingRequest = updateRequest.toBuilder().imp(Collections\n+                        .singletonList(imp)).build();\n+                final String body = mapper.encode(outgoingRequest);\n+                final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+                result.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build());\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdoppler extImpAdoppler;\n+        try {\n+            extImpAdoppler = mapper.mapper().convertValue(imp.getExt(), ADOPPLER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+        if (StringUtils.isBlank(extImpAdoppler.getAdunit())) {\n+            throw new PreBidException(String.format(\"$.imp.ext.adoppler.adunit required\"));\n+        }\n+        return extImpAdoppler;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad request\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final BidResponse bidResponse;\n+        try {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n+                    e.getMessage())));\n+        }\n+\n+        final Map<String, BidType> impTypes = new HashMap<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            if (impTypes.get(imp.getId()) != null) {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\"duplicate $.imp.id %s\", imp.getId())));\n+            }\n+            if (imp.getBanner() != null) {\n+                impTypes.put(imp.getId(), BidType.banner);\n+            } else if (imp.getVideo() != null) {\n+                impTypes.put(imp.getId(), BidType.video);\n+            } else if (imp.getAudio() != null) {\n+                impTypes.put(imp.getId(), BidType.audio);\n+            } else if (imp.getXNative() != null) {\n+                impTypes.put(imp.getId(), BidType.xNative);\n+            } else {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\n+                        \"one of $.imp.banner, $.imp.video, $.imp.audio and $.imp.native field required\")));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgxMDE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMjo1N1rOF6HPdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMjo1N1rOF6HPdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDM3NQ==", "bodyText": "(adopplerResponseExt == null) redundant (or in the wrong place)", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396480375", "createdAt": "2020-03-23T14:12:57Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.proto.openrtb.ext.response.ExtBidPrebidVideo;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class AdopplerBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdoppler>> ADOPPLER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdoppler>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdopplerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n+                final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n+                final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n+                final BidRequest outgoingRequest = updateRequest.toBuilder().imp(Collections\n+                        .singletonList(imp)).build();\n+                final String body = mapper.encode(outgoingRequest);\n+                final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+                result.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build());\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdoppler extImpAdoppler;\n+        try {\n+            extImpAdoppler = mapper.mapper().convertValue(imp.getExt(), ADOPPLER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+        if (StringUtils.isBlank(extImpAdoppler.getAdunit())) {\n+            throw new PreBidException(String.format(\"$.imp.ext.adoppler.adunit required\"));\n+        }\n+        return extImpAdoppler;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad request\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final BidResponse bidResponse;\n+        try {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n+                    e.getMessage())));\n+        }\n+\n+        final Map<String, BidType> impTypes = new HashMap<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            if (impTypes.get(imp.getId()) != null) {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\"duplicate $.imp.id %s\", imp.getId())));\n+            }\n+            if (imp.getBanner() != null) {\n+                impTypes.put(imp.getId(), BidType.banner);\n+            } else if (imp.getVideo() != null) {\n+                impTypes.put(imp.getId(), BidType.video);\n+            } else if (imp.getAudio() != null) {\n+                impTypes.put(imp.getId(), BidType.audio);\n+            } else if (imp.getXNative() != null) {\n+                impTypes.put(imp.getId(), BidType.xNative);\n+            } else {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\n+                        \"one of $.imp.banner, $.imp.video, $.imp.audio and $.imp.native field required\")));\n+            }\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (SeatBid seatBid : bidResponse.getSeatbid()) {\n+            for (Bid bid : seatBid.getBid()) {\n+                if (impTypes.get(bid.getImpid()) == null) {\n+                    return Result.emptyWithError(BidderError\n+                            .badServerResponse(String.format(\"unknown impid: %s\", bid.getImpid())));\n+                }\n+                final AdopplerResponseExt adopplerResponseExt;\n+                if (impTypes.get(bid.getImpid()) == BidType.video) {\n+                    final ObjectNode ext = bid.getExt();\n+                    try {\n+                        adopplerResponseExt = parseResponseExt(ext);\n+                    } catch (PreBidException e) {\n+                        return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+                    }\n+                    final AdopplerResponseVideoExt adopplerResponseVideoExt = adopplerResponseExt.getAds();\n+                    if ((adopplerResponseExt == null) || (adopplerResponseVideoExt == null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgxMDkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMzowOFrOF6HP-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMzowOFrOF6HP-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDUwNA==", "bodyText": ".format redundant", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396480504", "createdAt": "2020-03-23T14:13:08Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.proto.openrtb.ext.response.ExtBidPrebidVideo;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class AdopplerBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdoppler>> ADOPPLER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdoppler>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdopplerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n+                final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n+                final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n+                final BidRequest outgoingRequest = updateRequest.toBuilder().imp(Collections\n+                        .singletonList(imp)).build();\n+                final String body = mapper.encode(outgoingRequest);\n+                final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+                result.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build());\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdoppler extImpAdoppler;\n+        try {\n+            extImpAdoppler = mapper.mapper().convertValue(imp.getExt(), ADOPPLER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+        if (StringUtils.isBlank(extImpAdoppler.getAdunit())) {\n+            throw new PreBidException(String.format(\"$.imp.ext.adoppler.adunit required\"));\n+        }\n+        return extImpAdoppler;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad request\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final BidResponse bidResponse;\n+        try {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n+                    e.getMessage())));\n+        }\n+\n+        final Map<String, BidType> impTypes = new HashMap<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            if (impTypes.get(imp.getId()) != null) {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\"duplicate $.imp.id %s\", imp.getId())));\n+            }\n+            if (imp.getBanner() != null) {\n+                impTypes.put(imp.getId(), BidType.banner);\n+            } else if (imp.getVideo() != null) {\n+                impTypes.put(imp.getId(), BidType.video);\n+            } else if (imp.getAudio() != null) {\n+                impTypes.put(imp.getId(), BidType.audio);\n+            } else if (imp.getXNative() != null) {\n+                impTypes.put(imp.getId(), BidType.xNative);\n+            } else {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\n+                        \"one of $.imp.banner, $.imp.video, $.imp.audio and $.imp.native field required\")));\n+            }\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (SeatBid seatBid : bidResponse.getSeatbid()) {\n+            for (Bid bid : seatBid.getBid()) {\n+                if (impTypes.get(bid.getImpid()) == null) {\n+                    return Result.emptyWithError(BidderError\n+                            .badServerResponse(String.format(\"unknown impid: %s\", bid.getImpid())));\n+                }\n+                final AdopplerResponseExt adopplerResponseExt;\n+                if (impTypes.get(bid.getImpid()) == BidType.video) {\n+                    final ObjectNode ext = bid.getExt();\n+                    try {\n+                        adopplerResponseExt = parseResponseExt(ext);\n+                    } catch (PreBidException e) {\n+                        return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+                    }\n+                    final AdopplerResponseVideoExt adopplerResponseVideoExt = adopplerResponseExt.getAds();\n+                    if ((adopplerResponseExt == null) || (adopplerResponseVideoExt == null)) {\n+                        return Result.emptyWithError(BidderError.badServerResponse(String\n+                                .format(\"$.seatbid.bid.ext.ads.video required\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgyNjU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxNjo0MVrOF6HaHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxNjo0MVrOF6HaHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MzEwMg==", "bodyText": "I'd extract this into 2 separate methods\n1 one return List\n2 get Type and return ExtBidPrebidVideo", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396483102", "createdAt": "2020-03-23T14:16:41Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.proto.openrtb.ext.response.ExtBidPrebidVideo;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class AdopplerBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdoppler>> ADOPPLER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdoppler>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdopplerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n+                final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n+                final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n+                final BidRequest outgoingRequest = updateRequest.toBuilder().imp(Collections\n+                        .singletonList(imp)).build();\n+                final String body = mapper.encode(outgoingRequest);\n+                final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+                result.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build());\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdoppler extImpAdoppler;\n+        try {\n+            extImpAdoppler = mapper.mapper().convertValue(imp.getExt(), ADOPPLER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+        if (StringUtils.isBlank(extImpAdoppler.getAdunit())) {\n+            throw new PreBidException(String.format(\"$.imp.ext.adoppler.adunit required\"));\n+        }\n+        return extImpAdoppler;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad request\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final BidResponse bidResponse;\n+        try {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n+                    e.getMessage())));\n+        }\n+\n+        final Map<String, BidType> impTypes = new HashMap<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            if (impTypes.get(imp.getId()) != null) {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\"duplicate $.imp.id %s\", imp.getId())));\n+            }\n+            if (imp.getBanner() != null) {\n+                impTypes.put(imp.getId(), BidType.banner);\n+            } else if (imp.getVideo() != null) {\n+                impTypes.put(imp.getId(), BidType.video);\n+            } else if (imp.getAudio() != null) {\n+                impTypes.put(imp.getId(), BidType.audio);\n+            } else if (imp.getXNative() != null) {\n+                impTypes.put(imp.getId(), BidType.xNative);\n+            } else {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\n+                        \"one of $.imp.banner, $.imp.video, $.imp.audio and $.imp.native field required\")));\n+            }\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (SeatBid seatBid : bidResponse.getSeatbid()) {\n+            for (Bid bid : seatBid.getBid()) {\n+                if (impTypes.get(bid.getImpid()) == null) {\n+                    return Result.emptyWithError(BidderError\n+                            .badServerResponse(String.format(\"unknown impid: %s\", bid.getImpid())));\n+                }\n+                final AdopplerResponseExt adopplerResponseExt;\n+                if (impTypes.get(bid.getImpid()) == BidType.video) {\n+                    final ObjectNode ext = bid.getExt();\n+                    try {\n+                        adopplerResponseExt = parseResponseExt(ext);\n+                    } catch (PreBidException e) {\n+                        return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+                    }\n+                    final AdopplerResponseVideoExt adopplerResponseVideoExt = adopplerResponseExt.getAds();\n+                    if ((adopplerResponseExt == null) || (adopplerResponseVideoExt == null)) {\n+                        return Result.emptyWithError(BidderError.badServerResponse(String\n+                                .format(\"$.seatbid.bid.ext.ads.video required\")));\n+                    }\n+                    ExtBidPrebidVideo.of(adopplerResponseVideoExt.getVideo().getDuration(), head(bid.getCat()));\n+                }\n+                final BidderBid bidderBid = BidderBid.of(bid, impTypes.get(bid.getImpid()), DEFAULT_BID_CURRENCY);\n+                bidderBids.add(bidderBid);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgzNTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxODozN1rOF6HfvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxODozN1rOF6HfvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NDU0MA==", "bodyText": "As you can see, we do not have separate place for BidVideo. (thats why this code is unnecessary) But you can exclude it into separate methods to use it in a future", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396484540", "createdAt": "2020-03-23T14:18:37Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.proto.openrtb.ext.response.ExtBidPrebidVideo;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class AdopplerBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdoppler>> ADOPPLER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdoppler>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdopplerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n+                final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n+                final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n+                final BidRequest outgoingRequest = updateRequest.toBuilder().imp(Collections\n+                        .singletonList(imp)).build();\n+                final String body = mapper.encode(outgoingRequest);\n+                final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+                result.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build());\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdoppler extImpAdoppler;\n+        try {\n+            extImpAdoppler = mapper.mapper().convertValue(imp.getExt(), ADOPPLER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+        if (StringUtils.isBlank(extImpAdoppler.getAdunit())) {\n+            throw new PreBidException(String.format(\"$.imp.ext.adoppler.adunit required\"));\n+        }\n+        return extImpAdoppler;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad request\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final BidResponse bidResponse;\n+        try {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n+                    e.getMessage())));\n+        }\n+\n+        final Map<String, BidType> impTypes = new HashMap<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            if (impTypes.get(imp.getId()) != null) {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\"duplicate $.imp.id %s\", imp.getId())));\n+            }\n+            if (imp.getBanner() != null) {\n+                impTypes.put(imp.getId(), BidType.banner);\n+            } else if (imp.getVideo() != null) {\n+                impTypes.put(imp.getId(), BidType.video);\n+            } else if (imp.getAudio() != null) {\n+                impTypes.put(imp.getId(), BidType.audio);\n+            } else if (imp.getXNative() != null) {\n+                impTypes.put(imp.getId(), BidType.xNative);\n+            } else {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\n+                        \"one of $.imp.banner, $.imp.video, $.imp.audio and $.imp.native field required\")));\n+            }\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (SeatBid seatBid : bidResponse.getSeatbid()) {\n+            for (Bid bid : seatBid.getBid()) {\n+                if (impTypes.get(bid.getImpid()) == null) {\n+                    return Result.emptyWithError(BidderError\n+                            .badServerResponse(String.format(\"unknown impid: %s\", bid.getImpid())));\n+                }\n+                final AdopplerResponseExt adopplerResponseExt;\n+                if (impTypes.get(bid.getImpid()) == BidType.video) {\n+                    final ObjectNode ext = bid.getExt();\n+                    try {\n+                        adopplerResponseExt = parseResponseExt(ext);\n+                    } catch (PreBidException e) {\n+                        return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+                    }\n+                    final AdopplerResponseVideoExt adopplerResponseVideoExt = adopplerResponseExt.getAds();\n+                    if ((adopplerResponseExt == null) || (adopplerResponseVideoExt == null)) {\n+                        return Result.emptyWithError(BidderError.badServerResponse(String\n+                                .format(\"$.seatbid.bid.ext.ads.video required\")));\n+                    }\n+                    ExtBidPrebidVideo.of(adopplerResponseVideoExt.getVideo().getDuration(), head(bid.getCat()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg0NjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMDo1MVrOF6HmdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMDo1MVrOF6HmdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NjI2MA==", "bodyText": ".getVideo can produce NPE.", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396486260", "createdAt": "2020-03-23T14:20:51Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.proto.openrtb.ext.response.ExtBidPrebidVideo;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class AdopplerBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdoppler>> ADOPPLER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdoppler>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdopplerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n+                final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n+                final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n+                final BidRequest outgoingRequest = updateRequest.toBuilder().imp(Collections\n+                        .singletonList(imp)).build();\n+                final String body = mapper.encode(outgoingRequest);\n+                final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+                result.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build());\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdoppler extImpAdoppler;\n+        try {\n+            extImpAdoppler = mapper.mapper().convertValue(imp.getExt(), ADOPPLER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+        if (StringUtils.isBlank(extImpAdoppler.getAdunit())) {\n+            throw new PreBidException(String.format(\"$.imp.ext.adoppler.adunit required\"));\n+        }\n+        return extImpAdoppler;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad request\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final BidResponse bidResponse;\n+        try {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n+                    e.getMessage())));\n+        }\n+\n+        final Map<String, BidType> impTypes = new HashMap<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            if (impTypes.get(imp.getId()) != null) {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\"duplicate $.imp.id %s\", imp.getId())));\n+            }\n+            if (imp.getBanner() != null) {\n+                impTypes.put(imp.getId(), BidType.banner);\n+            } else if (imp.getVideo() != null) {\n+                impTypes.put(imp.getId(), BidType.video);\n+            } else if (imp.getAudio() != null) {\n+                impTypes.put(imp.getId(), BidType.audio);\n+            } else if (imp.getXNative() != null) {\n+                impTypes.put(imp.getId(), BidType.xNative);\n+            } else {\n+                return Result.emptyWithError(BidderError.badInput(String.format(\n+                        \"one of $.imp.banner, $.imp.video, $.imp.audio and $.imp.native field required\")));\n+            }\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (SeatBid seatBid : bidResponse.getSeatbid()) {\n+            for (Bid bid : seatBid.getBid()) {\n+                if (impTypes.get(bid.getImpid()) == null) {\n+                    return Result.emptyWithError(BidderError\n+                            .badServerResponse(String.format(\"unknown impid: %s\", bid.getImpid())));\n+                }\n+                final AdopplerResponseExt adopplerResponseExt;\n+                if (impTypes.get(bid.getImpid()) == BidType.video) {\n+                    final ObjectNode ext = bid.getExt();\n+                    try {\n+                        adopplerResponseExt = parseResponseExt(ext);\n+                    } catch (PreBidException e) {\n+                        return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+                    }\n+                    final AdopplerResponseVideoExt adopplerResponseVideoExt = adopplerResponseExt.getAds();\n+                    if ((adopplerResponseExt == null) || (adopplerResponseVideoExt == null)) {\n+                        return Result.emptyWithError(BidderError.badServerResponse(String\n+                                .format(\"$.seatbid.bid.ext.ads.video required\")));\n+                    }\n+                    ExtBidPrebidVideo.of(adopplerResponseVideoExt.getVideo().getDuration(), head(bid.getCat()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg1OTE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMzozOFrOF6HuuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMzozOFrOF6HuuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4ODM3Ng==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396488376", "createdAt": "2020-03-23T14:23:38Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.util.HttpUtil;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+\n+public class AdopplerBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private AdopplerBidder adopplerBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adopplerBidder = new AdopplerBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdopplerBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpAdoppler.of(null)))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"$.imp.ext.adoppler.adunit required\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedRequestUrlAndDefaultHeaders() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity());\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .containsOnly(tuple(\"x-openrtb-version\", \"2.5\"),\n+                        tuple(HttpUtil.CONTENT_TYPE_HEADER.toString(), HttpUtil.APPLICATION_JSON_CONTENT_TYPE),\n+                        tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = adopplerBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"invalid body:\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfDuplicateId() throws JsonProcessingException {\n+        // given\n+        Imp imp1 = Imp.builder().id(\"impId\").banner(Banner.builder().build()).build();\n+        Imp imp2 = Imp.builder().id(\"impId\").video(Video.builder().build()).build();\n+        List imps = new ArrayList();\n+        imps.add(imp1);\n+        imps.add(imp2);\n+        BidRequest bidRequest = BidRequest.builder()\n+                .imp(imps)\n+                .build();\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                bidRequest, mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = adopplerBidder.makeBids(httpCall, bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"duplicate $.imp.id impId\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_input);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfEmptyImp() throws JsonProcessingException {\n+        // given\n+        BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder().id(\"123\")\n+                        .banner(null)\n+                        .video(null)\n+                        .audio(null)\n+                        .xNative(null)\n+                        .build()))\n+                .build();\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                bidRequest, mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = adopplerBidder.makeBids(httpCall, bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"one of $.imp.banner, $.imp.video, $.imp.audio and $.imp.native field required\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_input);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfBidIdEmpty() throws JsonProcessingException {\n+        // given\n+        BidRequest bidRequest = BidRequest.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg1OTQ0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMzo0MVrOF6Hu4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMzo0MVrOF6Hu4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4ODQxNw==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396488417", "createdAt": "2020-03-23T14:23:41Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.util.HttpUtil;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+\n+public class AdopplerBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private AdopplerBidder adopplerBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adopplerBidder = new AdopplerBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdopplerBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpAdoppler.of(null)))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"$.imp.ext.adoppler.adunit required\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedRequestUrlAndDefaultHeaders() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity());\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .containsOnly(tuple(\"x-openrtb-version\", \"2.5\"),\n+                        tuple(HttpUtil.CONTENT_TYPE_HEADER.toString(), HttpUtil.APPLICATION_JSON_CONTENT_TYPE),\n+                        tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = adopplerBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"invalid body:\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfDuplicateId() throws JsonProcessingException {\n+        // given\n+        Imp imp1 = Imp.builder().id(\"impId\").banner(Banner.builder().build()).build();\n+        Imp imp2 = Imp.builder().id(\"impId\").video(Video.builder().build()).build();\n+        List imps = new ArrayList();\n+        imps.add(imp1);\n+        imps.add(imp2);\n+        BidRequest bidRequest = BidRequest.builder()\n+                .imp(imps)\n+                .build();\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                bidRequest, mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = adopplerBidder.makeBids(httpCall, bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"duplicate $.imp.id impId\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_input);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfEmptyImp() throws JsonProcessingException {\n+        // given\n+        BidRequest bidRequest = BidRequest.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg1OTc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMzo0NlrOF6HvEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyMzo0NlrOF6HvEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4ODQ2Ng==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396488466", "createdAt": "2020-03-23T14:23:46Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.util.HttpUtil;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+\n+public class AdopplerBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private AdopplerBidder adopplerBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adopplerBidder = new AdopplerBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdopplerBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpAdoppler.of(null)))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"$.imp.ext.adoppler.adunit required\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedRequestUrlAndDefaultHeaders() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity());\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .containsOnly(tuple(\"x-openrtb-version\", \"2.5\"),\n+                        tuple(HttpUtil.CONTENT_TYPE_HEADER.toString(), HttpUtil.APPLICATION_JSON_CONTENT_TYPE),\n+                        tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = adopplerBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"invalid body:\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfDuplicateId() throws JsonProcessingException {\n+        // given\n+        Imp imp1 = Imp.builder().id(\"impId\").banner(Banner.builder().build()).build();\n+        Imp imp2 = Imp.builder().id(\"impId\").video(Video.builder().build()).build();\n+        List imps = new ArrayList();\n+        imps.add(imp1);\n+        imps.add(imp2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg2NDk5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNDo1NVrOF6HyUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNDo1NVrOF6HyUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4OTI5Nw==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396489297", "createdAt": "2020-03-23T14:24:55Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.util.HttpUtil;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+\n+public class AdopplerBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private AdopplerBidder adopplerBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adopplerBidder = new AdopplerBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdopplerBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpAdoppler.of(null)))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"$.imp.ext.adoppler.adunit required\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedRequestUrlAndDefaultHeaders() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity());\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = adopplerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .containsOnly(tuple(\"x-openrtb-version\", \"2.5\"),\n+                        tuple(HttpUtil.CONTENT_TYPE_HEADER.toString(), HttpUtil.APPLICATION_JSON_CONTENT_TYPE),\n+                        tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = adopplerBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"invalid body:\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfDuplicateId() throws JsonProcessingException {\n+        // given\n+        Imp imp1 = Imp.builder().id(\"impId\").banner(Banner.builder().build()).build();\n+        Imp imp2 = Imp.builder().id(\"impId\").video(Video.builder().build()).build();\n+        List imps = new ArrayList();\n+        imps.add(imp1);\n+        imps.add(imp2);\n+        BidRequest bidRequest = BidRequest.builder()\n+                .imp(imps)\n+                .build();\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                bidRequest, mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = adopplerBidder.makeBids(httpCall, bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"duplicate $.imp.id impId\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_input);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfEmptyImp() throws JsonProcessingException {\n+        // given\n+        BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder().id(\"123\")\n+                        .banner(null)\n+                        .video(null)\n+                        .audio(null)\n+                        .xNative(null)\n+                        .build()))\n+                .build();\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                bidRequest, mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = adopplerBidder.makeBids(httpCall, bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"one of $.imp.banner, $.imp.video, $.imp.audio and $.imp.native field required\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_input);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfBidIdEmpty() throws JsonProcessingException {\n+        // given\n+        BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder().id(\"123\")\n+                        .banner(Banner.builder().build())\n+                        .build()))\n+                .build();\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                bidRequest, mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(null))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = adopplerBidder.makeBids(httpCall, bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"unknown impid: null\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfExtEmpty() throws JsonProcessingException {\n+        // given\n+        Imp imp = Imp.builder().id(\"impId\").video(Video.builder().build()).build();\n+        List imps = new ArrayList();\n+        imps.add(imp);\n+        BidRequest bidRequest = BidRequest.builder().imp(imps).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg3MTYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/it/AdopplerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNjoyMVrOF6H2mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNjoyMVrOF6H2mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MDM5Mw==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396490393", "createdAt": "2020-03-23T14:26:21Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/it/AdopplerTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import java.io.IOException;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class AdopplerTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromAdoppler() throws IOException, JSONException {\n+        // given\n+        // Adoppler bid response for imp 001\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/adoppler-exchange\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/adoppler/test-adoppler-bid-request-1.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/adoppler/test-adoppler-bid-response-1.json\"))));\n+\n+        // pre-bid cache\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/cache\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/adoppler/test-cache-adoppler-request.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/adoppler/test-cache-adoppler-response.json\"))));\n+\n+        // when\n+        final Response response = given(spec)\n+                .header(\"Referer\", \"http://www.example.com\")\n+                .header(\"X-Forwarded-For\", \"193.168.244.1\")\n+                .header(\"User-Agent\", \"userAgent\")\n+                .header(\"Origin\", \"http://www.example.com\")\n+                .cookie(\"uids\", \"eyJ1aWRzIjp7ImdhbW9zaGkiOiJHTS1VSUQifX0=\")\n+                .body(jsonFrom(\"openrtb2/adoppler/test-auction-adoppler-request.json\"))\n+                .post(\"/openrtb2/auction\");\n+\n+        // then\n+        final String expectedAuctionResponse = openrtbAuctionResponseFrom(\n+                \"openrtb2/adoppler/test-auction-adoppler-response.json\",\n+                response, singletonList(\"adoppler\"));\n+        String actualStr = response.asString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg3NzY2OnYy", "diffSide": "RIGHT", "path": "src/test/resources/org/prebid/server/it/openrtb2/adoppler/test-auction-adoppler-request.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNzo0MFrOF6H6WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNzo0MFrOF6H6WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MTM1Mg==", "bodyText": "duplicate", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r396491352", "createdAt": "2020-03-23T14:27:40Z", "author": {"login": "DGarbar"}, "path": "src/test/resources/org/prebid/server/it/openrtb2/adoppler/test-auction-adoppler-request.json", "diffHunk": "@@ -0,0 +1,100 @@\n+{\n+  \"id\": \"req1-unit1\",\n+  \"imp\": [\n+    {\n+      \"id\": \"imp1\",\n+      \"banner\": {\n+        \"w\": 100,\n+        \"h\": 200\n+      },\n+      \"ext\": {\n+        \"adoppler\": {\n+          \"adunit\": \"unit1\"\n+        }\n+      }\n+    }\n+  ],\n+  \"id\": \"req1-unit2\",\n+  \"imp\": [\n+    {\n+      \"id\": \"imp2\",\n+      \"video\": {\n+        \"minduration\": 120,\n+        \"mimes\": [\n+          \"video/mp4\"\n+        ]\n+      },\n+      \"ext\": {\n+        \"adoppler\": {\n+          \"adunit\": \"unit2\"\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f3b99c0e0af4d2714e245a06fbc925a05c4e5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDIyMzk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxODo1OFrOF_ihJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxODo1OFrOF_ihJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3MDE0OQ==", "bodyText": "Notice that they used url.PathEscape so you need to use appropriate method in HttpUtils for .getAnunit", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r402170149", "createdAt": "2020-04-02T09:18:58Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -60,17 +61,8 @@ public AdopplerBidder(String endpointUrl, JacksonMapper mapper) {\n                 final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n                 final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n                 final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n-                final BidRequest outgoingRequest = updateRequest.toBuilder().imp(Collections\n-                        .singletonList(imp)).build();\n-                final String body = mapper.encode(outgoingRequest);\n-                final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n-                result.add(HttpRequest.<BidRequest>builder()\n-                        .method(HttpMethod.POST)\n-                        .uri(endpointUrl)\n-                        .headers(headers)\n-                        .payload(outgoingRequest)\n-                        .body(body)\n-                        .build());\n+                final String url = endpointUrl + \"/processHeaderBid/\" + validExtImp.getAdunit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbfc2e6098e329307da02905d4d819e912a0d14"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI0MjE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToyMzo1M1rOF_is8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToyMzo1M1rOF_is8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3MzE3MQ==", "bodyText": "redundant", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r402173171", "createdAt": "2020-04-02T09:23:53Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -110,11 +115,38 @@ private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n             return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n                     e.getMessage())));\n         }\n+        final Map<String, BidType> impTypes;\n+        final List<BidderBid> bidderBids;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbfc2e6098e329307da02905d4d819e912a0d14"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI0NDM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToyNDoyNFrOF_iuQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToyNDoyNFrOF_iuQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3MzUwNg==", "bodyText": "can be in try block", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r402173506", "createdAt": "2020-04-02T09:24:24Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -110,11 +115,38 @@ private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n             return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n                     e.getMessage())));\n         }\n+        final Map<String, BidType> impTypes;\n+        final List<BidderBid> bidderBids;\n+        try {\n+            impTypes = getImpTypes(bidRequest);\n+            bidderBids = getBids(bidResponse, impTypes);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+        return Result.of(bidderBids, Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbfc2e6098e329307da02905d4d819e912a0d14"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI2MjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToyOToxNlrOF_i5rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToyOToxNlrOF_i5rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3NjQyOA==", "bodyText": "try {\n            bidResponse = decodeBodyToBidResponse(httpCall);\n        } catch (PreBidException e) {\n            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n                    e.getMessage())));\n        }\n\nCan use same try block\nAnd code will be much cleaner", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r402176428", "createdAt": "2020-04-02T09:29:16Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -110,11 +115,38 @@ private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n             return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n                     e.getMessage())));\n         }\n+        final Map<String, BidType> impTypes;\n+        final List<BidderBid> bidderBids;\n+        try {\n+            impTypes = getImpTypes(bidRequest);\n+            bidderBids = getBids(bidResponse, impTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbfc2e6098e329307da02905d4d819e912a0d14"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI2NTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozMDowMFrOF_i7pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozMDowMFrOF_i7pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3NjkzNA==", "bodyText": "This is used later in the code", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r402176934", "createdAt": "2020-04-02T09:30:00Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -110,11 +115,38 @@ private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n             return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n                     e.getMessage())));\n         }\n+        final Map<String, BidType> impTypes;\n+        final List<BidderBid> bidderBids;\n+        try {\n+            impTypes = getImpTypes(bidRequest);\n+            bidderBids = getBids(bidResponse, impTypes);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+        return Result.of(bidderBids, Collections.emptyList());\n+    }\n \n+    private BidResponse decodeBodyToBidResponse(HttpCall<BidRequest> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdopplerResponseExt parseResponseExt(ObjectNode ext) {\n+        try {\n+            return mapper.mapper().treeToValue(ext, AdopplerResponseExt.class);\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbfc2e6098e329307da02905d4d819e912a0d14"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDMyMjI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0NDo1MVrOF_jfDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0NDo1MVrOF_jfDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NTk5OA==", "bodyText": "You did not set anything. You just return this value. Rename method.", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r402185998", "createdAt": "2020-04-02T09:44:51Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -125,54 +157,46 @@ private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n             } else if (imp.getXNative() != null) {\n                 impTypes.put(imp.getId(), BidType.xNative);\n             } else {\n-                return Result.emptyWithError(BidderError.badInput(String.format(\n-                        \"one of $.imp.banner, $.imp.video, $.imp.audio and $.imp.native field required\")));\n+                throw new PreBidException(\"one of $.imp.banner, $.imp.video, $.imp.audio \"\n+                        + \"and $.imp.native field required\");\n             }\n         }\n+        return impTypes;\n+    }\n \n+    private List<BidderBid> getBids(BidResponse bidResponse, Map<String, BidType> impTypes) {\n         final List<BidderBid> bidderBids = new ArrayList<>();\n         for (SeatBid seatBid : bidResponse.getSeatbid()) {\n             for (Bid bid : seatBid.getBid()) {\n                 if (impTypes.get(bid.getImpid()) == null) {\n-                    return Result.emptyWithError(BidderError\n-                            .badServerResponse(String.format(\"unknown impid: %s\", bid.getImpid())));\n-                }\n-                final AdopplerResponseExt adopplerResponseExt;\n-                if (impTypes.get(bid.getImpid()) == BidType.video) {\n-                    final ObjectNode ext = bid.getExt();\n-                    try {\n-                        adopplerResponseExt = parseResponseExt(ext);\n-                    } catch (PreBidException e) {\n-                        return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n-                    }\n-                    final AdopplerResponseVideoExt adopplerResponseVideoExt = adopplerResponseExt.getAds();\n-                    if ((adopplerResponseExt == null) || (adopplerResponseVideoExt == null)) {\n-                        return Result.emptyWithError(BidderError.badServerResponse(String\n-                                .format(\"$.seatbid.bid.ext.ads.video required\")));\n-                    }\n-                    ExtBidPrebidVideo.of(adopplerResponseVideoExt.getVideo().getDuration(), head(bid.getCat()));\n+                    throw new PreBidException(String.format(\"unknown impid: %s\", bid.getImpid()));\n                 }\n+                setExtBidPrebidVideo(bid, impTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbfc2e6098e329307da02905d4d819e912a0d14"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDMyOTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0Njo1NlrOF_jjuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0Njo1NlrOF_jjuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NzE5NQ==", "bodyText": "getBids Can be replaced\n bidResponse.getSeatbid().stream()\n                .filter(Objects::nonNull)\n                .map(SeatBid::getBid)\n                .filter(Objects::nonNull)\n                .flatMap(Collection::stream)\n                .map(bid -> TODO createBid())\n                .collect(Collectors.toList())", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r402187195", "createdAt": "2020-04-02T09:46:56Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -110,11 +115,38 @@ private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n             return Result.emptyWithError(BidderError.badServerResponse(String.format(\"invalid body: %s\",\n                     e.getMessage())));\n         }\n+        final Map<String, BidType> impTypes;\n+        final List<BidderBid> bidderBids;\n+        try {\n+            impTypes = getImpTypes(bidRequest);\n+            bidderBids = getBids(bidResponse, impTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbfc2e6098e329307da02905d4d819e912a0d14"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDMzNTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0ODoyMFrOF_jnCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0ODoyMFrOF_jnCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODA0Mg==", "bodyText": "Do you really need catch to throw SIMILAR exception ?", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r402188042", "createdAt": "2020-04-02T09:48:20Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -125,54 +157,46 @@ private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n             } else if (imp.getXNative() != null) {\n                 impTypes.put(imp.getId(), BidType.xNative);\n             } else {\n-                return Result.emptyWithError(BidderError.badInput(String.format(\n-                        \"one of $.imp.banner, $.imp.video, $.imp.audio and $.imp.native field required\")));\n+                throw new PreBidException(\"one of $.imp.banner, $.imp.video, $.imp.audio \"\n+                        + \"and $.imp.native field required\");\n             }\n         }\n+        return impTypes;\n+    }\n \n+    private List<BidderBid> getBids(BidResponse bidResponse, Map<String, BidType> impTypes) {\n         final List<BidderBid> bidderBids = new ArrayList<>();\n         for (SeatBid seatBid : bidResponse.getSeatbid()) {\n             for (Bid bid : seatBid.getBid()) {\n                 if (impTypes.get(bid.getImpid()) == null) {\n-                    return Result.emptyWithError(BidderError\n-                            .badServerResponse(String.format(\"unknown impid: %s\", bid.getImpid())));\n-                }\n-                final AdopplerResponseExt adopplerResponseExt;\n-                if (impTypes.get(bid.getImpid()) == BidType.video) {\n-                    final ObjectNode ext = bid.getExt();\n-                    try {\n-                        adopplerResponseExt = parseResponseExt(ext);\n-                    } catch (PreBidException e) {\n-                        return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n-                    }\n-                    final AdopplerResponseVideoExt adopplerResponseVideoExt = adopplerResponseExt.getAds();\n-                    if ((adopplerResponseExt == null) || (adopplerResponseVideoExt == null)) {\n-                        return Result.emptyWithError(BidderError.badServerResponse(String\n-                                .format(\"$.seatbid.bid.ext.ads.video required\")));\n-                    }\n-                    ExtBidPrebidVideo.of(adopplerResponseVideoExt.getVideo().getDuration(), head(bid.getCat()));\n+                    throw new PreBidException(String.format(\"unknown impid: %s\", bid.getImpid()));\n                 }\n+                setExtBidPrebidVideo(bid, impTypes);\n                 final BidderBid bidderBid = BidderBid.of(bid, impTypes.get(bid.getImpid()), DEFAULT_BID_CURRENCY);\n                 bidderBids.add(bidderBid);\n             }\n         }\n-        return Result.of(bidderBids, Collections.emptyList());\n-    }\n-\n-    private BidResponse decodeBodyToBidResponse(HttpCall<BidRequest> httpCall) {\n-        try {\n-            return mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n-        } catch (DecodeException e) {\n-            throw new PreBidException(e.getMessage(), e);\n-        }\n+        return bidderBids;\n     }\n \n-    private AdopplerResponseExt parseResponseExt(ObjectNode ext) {\n-        try {\n-            return mapper.mapper().treeToValue(ext, AdopplerResponseExt.class);\n-        } catch (JsonProcessingException e) {\n-            throw new PreBidException(e.getMessage(), e);\n+    private ExtBidPrebidVideo setExtBidPrebidVideo(Bid bid, Map<String, BidType> impTypes) {\n+        final AdopplerResponseExt adopplerResponseExt;\n+        if (impTypes.get(bid.getImpid()) == BidType.video) {\n+            final ObjectNode ext = bid.getExt();\n+            try {\n+                adopplerResponseExt = parseResponseExt(ext);\n+            } catch (PreBidException e) {\n+                throw new PreBidException(e.getMessage());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbfc2e6098e329307da02905d4d819e912a0d14"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDMzOTYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0OTozMVrOF_jpzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTozMDo1NlrOF_6WkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODc0OA==", "bodyText": "style\n\ncant you just add /processHeaderBid/adUnit to ENDPOINT_URL ?", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r402188748", "createdAt": "2020-04-02T09:49:31Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "diffHunk": "@@ -84,7 +84,7 @@ public void makeHttpRequestsShouldCreateCorrectURL() {\n         // then\n         assertThat(result.getErrors()).isEmpty();\n         assertThat(result.getValue()).hasSize(1);\n-        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL+\"/processHeaderBid/adUnit\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbfc2e6098e329307da02905d4d819e912a0d14"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2MDY1Ng==", "bodyText": "That will be incorrect", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r402560656", "createdAt": "2020-04-02T19:30:56Z", "author": {"login": "AndriyPavlyuk"}, "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "diffHunk": "@@ -84,7 +84,7 @@ public void makeHttpRequestsShouldCreateCorrectURL() {\n         // then\n         assertThat(result.getErrors()).isEmpty();\n         assertThat(result.getValue()).hasSize(1);\n-        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL+\"/processHeaderBid/adUnit\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODc0OA=="}, "originalCommit": {"oid": "0dbfc2e6098e329307da02905d4d819e912a0d14"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDM0MjY1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo1MDoyNlrOF_jryw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo1MDoyNlrOF_jryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4OTI1OQ==", "bodyText": "use singletonList", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r402189259", "createdAt": "2020-04-02T09:50:26Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adoppler/AdopplerBidderTest.java", "diffHunk": "@@ -190,17 +190,17 @@ public void makeBidsShouldReturnErrorIfBidIdEmpty() throws JsonProcessingExcepti\n         assertThat(result.getErrors()).hasSize(1);\n         assertThat(result.getErrors().get(0).getMessage())\n                 .startsWith(\"unknown impid: null\");\n-        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_input);\n         assertThat(result.getValue()).isEmpty();\n     }\n \n     @Test\n     public void makeBidsShouldReturnErrorIfExtEmpty() throws JsonProcessingException {\n         // given\n-        Imp imp = Imp.builder().id(\"impId\").video(Video.builder().build()).build();\n-        List imps = new ArrayList();\n+        final Imp imp = Imp.builder().id(\"impId\").video(Video.builder().build()).build();\n+        final List imps = new ArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbfc2e6098e329307da02905d4d819e912a0d14"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDQ4MDYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDowMjoyMFrOGe-twQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDowMjoyMFrOGe-twQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzNzk4NQ==", "bodyText": "What is the reason for this method?\nThe returned value is not used anywhere.", "url": "https://github.com/prebid/prebid-server-java/pull/637#discussion_r435137985", "createdAt": "2020-06-04T10:02:20Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/adoppler/AdopplerBidder.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package org.prebid.server.bidder.adoppler;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoAdsExt;\n+import org.prebid.server.bidder.adoppler.model.AdopplerResponseVideoExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adoppler.ExtImpAdoppler;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.proto.openrtb.ext.response.ExtBidPrebidVideo;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Adoppler {@link Bidder} implementation.\n+ */\n+public class AdopplerBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdoppler>> ADOPPLER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdoppler>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointTemplate;\n+    private final JacksonMapper mapper;\n+\n+    public AdopplerBidder(String endpointTemplate, JacksonMapper mapper) {\n+        this.endpointTemplate = HttpUtil.validateUrl(Objects.requireNonNull(endpointTemplate));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdoppler validExtImp = parseAndValidateImpExt(imp);\n+                final String updateRequestId = request.getId() + \"-\" + validExtImp.getAdunit();\n+                final BidRequest updateRequest = request.toBuilder().id(updateRequestId).build();\n+                final String uri = String.format(\"%s/processHeaderBid/%s\", endpointTemplate,\n+                        HttpUtil.encodeUrl(validExtImp.getAdunit()));\n+                result.add(createSingleRequest(imp, updateRequest, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdoppler parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdoppler extImpAdoppler;\n+        try {\n+            extImpAdoppler = mapper.mapper().convertValue(imp.getExt(), ADOPPLER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+        if (StringUtils.isBlank(extImpAdoppler.getAdunit())) {\n+            throw new PreBidException(\"$.imp.ext.adoppler.adunit required\");\n+        }\n+        return extImpAdoppler;\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+        final String body = mapper.encode(outgoingRequest);\n+        final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad request\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = decodeBodyToBidResponse(httpCall);\n+            final Map<String, BidType> impTypes = getImpTypes(bidRequest);\n+            final List<BidderBid> bidderBids = bidResponse.getSeatbid().stream()\n+                    .filter(Objects::nonNull)\n+                    .map(SeatBid::getBid)\n+                    .filter(Objects::nonNull)\n+                    .flatMap(Collection::stream)\n+                    .map(bid -> createBid(bid, impTypes))\n+                    .collect(Collectors.toList());\n+            return Result.of(bidderBids, Collections.emptyList());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private BidResponse decodeBodyToBidResponse(HttpCall<BidRequest> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Map<String, BidType> getImpTypes(BidRequest bidRequest) {\n+        final Map<String, BidType> impTypes = new HashMap<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            if (impTypes.get(imp.getId()) != null) {\n+                throw new PreBidException(String.format(\"duplicate $.imp.id %s\", imp.getId()));\n+            }\n+            if (imp.getBanner() != null) {\n+                impTypes.put(imp.getId(), BidType.banner);\n+            } else if (imp.getVideo() != null) {\n+                impTypes.put(imp.getId(), BidType.video);\n+            } else if (imp.getAudio() != null) {\n+                impTypes.put(imp.getId(), BidType.audio);\n+            } else if (imp.getXNative() != null) {\n+                impTypes.put(imp.getId(), BidType.xNative);\n+            } else {\n+                throw new PreBidException(\"one of $.imp.banner, $.imp.video, $.imp.audio \"\n+                        + \"and $.imp.native field required\");\n+            }\n+        }\n+        return impTypes;\n+    }\n+\n+    private BidderBid createBid(Bid bid, Map<String, BidType> impTypes) {\n+        if (impTypes.get(bid.getImpid()) == null) {\n+            throw new PreBidException(String.format(\"unknown impid: %s\", bid.getImpid()));\n+        }\n+        getExtBidPrebidVideo(bid, impTypes);\n+        return BidderBid.of(bid, impTypes.get(bid.getImpid()), DEFAULT_BID_CURRENCY);\n+    }\n+\n+    private ExtBidPrebidVideo getExtBidPrebidVideo(Bid bid, Map<String, BidType> impTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24985411e4776926675d5c93cefb1c7c2860a91d"}, "originalPosition": 173}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4166, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}