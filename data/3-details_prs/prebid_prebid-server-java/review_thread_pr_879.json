{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MDYyOTMz", "number": 879, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTozMzoyNFrOEe3Mkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTozMzoyNFrOEe3Mkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzk3MDc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/adman/AdmanBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTozMzoyNFrOHKyMGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTozMzoyNFrOHKyMGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3MDEwNg==", "bodyText": "move it to the line above.", "url": "https://github.com/prebid/prebid-server-java/pull/879#discussion_r481070106", "createdAt": "2020-09-01T11:33:24Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adman/AdmanBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.adman;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adman.ExtImpAdman;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class AdmanBidderTest extends VertxTest {\n+\n+    public static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private AdmanBidder admanBidder;\n+\n+    @Before\n+    public void setUp() {\n+        admanBidder = new AdmanBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdmanBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnExpectedBidRequest() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity());\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        final BidRequest expectedRequest = bidRequest.toBuilder()\n+                .imp(singletonList(bidRequest.getImp().get(0).toBuilder()\n+                        .tagid(\"tagidString\").build()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ae7a64dd9a975d7c98f5bcc514c3a3ea327ad9"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4028, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}