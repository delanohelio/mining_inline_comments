{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NTM1MDc5", "number": 813, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxMjoyNlrOEkDFKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyMTo0MVrOEk3gSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjM0NjY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxMjoyNlrOHSwJiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxMjoyNlrOHSwJiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNTI4OQ==", "bodyText": "Use special method for single error", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r489425289", "createdAt": "2020-09-16T13:12:26Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.prebid.server.bidder.beintoo;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.beintoo.ExtImpBeintoo;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class BeintooBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBeintoo>> BEINTOO_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBeintoo>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BeintooBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f94aa9238ee8a2eeb1c71b4a012a3850ce065d8"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjM0NzI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxMjozNFrOHSwJ3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxMjozNFrOHSwJ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNTM3Mg==", "bodyText": "declare near usage", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r489425372", "createdAt": "2020-09-16T13:12:34Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.prebid.server.bidder.beintoo;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.beintoo.ExtImpBeintoo;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class BeintooBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBeintoo>> BEINTOO_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBeintoo>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BeintooBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f94aa9238ee8a2eeb1c71b4a012a3850ce065d8"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjM1MDk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxMzoyNlrOHSwMJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxMzoyNlrOHSwMJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNTk1OA==", "bodyText": "redundant /n", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r489425958", "createdAt": "2020-09-16T13:13:26Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.prebid.server.bidder.beintoo;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.beintoo.ExtImpBeintoo;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class BeintooBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBeintoo>> BEINTOO_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBeintoo>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BeintooBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final BidRequest updatedBidRequest;\n+        try {\n+            updatedBidRequest = updateBidRequest(request);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(updatedBidRequest);\n+        final MultiMap headers = makeHeaders(request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .body(body)\n+                        .headers(headers)\n+                        .payload(request)\n+                        .build()), errors);\n+    }\n+\n+    private BidRequest updateBidRequest(BidRequest request) {\n+        final boolean isSecure = isSecure(request.getSite());\n+\n+        final List<Imp> modifiedImps = request.getImp().stream()\n+                .map(imp -> modifyImp(imp, isSecure, parseAndValidateImpExt(imp)))\n+                .collect(Collectors.toList());\n+\n+        return request.toBuilder()\n+                .imp(modifiedImps)\n+                .build();\n+    }\n+\n+    private static boolean isSecure(Site site) {\n+        return site != null && StringUtils.isNotBlank(site.getPage()) && site.getPage()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f94aa9238ee8a2eeb1c71b4a012a3850ce065d8"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjM2NDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxNjoyOVrOHSwUSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxNjoyOVrOHSwUSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyODA0Mw==", "bodyText": "You can replace with StringUtils.isNumeric and then parse", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r489428043", "createdAt": "2020-09-16T13:16:29Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.prebid.server.bidder.beintoo;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.beintoo.ExtImpBeintoo;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class BeintooBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBeintoo>> BEINTOO_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBeintoo>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BeintooBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final BidRequest updatedBidRequest;\n+        try {\n+            updatedBidRequest = updateBidRequest(request);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(updatedBidRequest);\n+        final MultiMap headers = makeHeaders(request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .body(body)\n+                        .headers(headers)\n+                        .payload(request)\n+                        .build()), errors);\n+    }\n+\n+    private BidRequest updateBidRequest(BidRequest request) {\n+        final boolean isSecure = isSecure(request.getSite());\n+\n+        final List<Imp> modifiedImps = request.getImp().stream()\n+                .map(imp -> modifyImp(imp, isSecure, parseAndValidateImpExt(imp)))\n+                .collect(Collectors.toList());\n+\n+        return request.toBuilder()\n+                .imp(modifiedImps)\n+                .build();\n+    }\n+\n+    private static boolean isSecure(Site site) {\n+        return site != null && StringUtils.isNotBlank(site.getPage()) && site.getPage()\n+                .startsWith(\"https\");\n+    }\n+\n+    private ExtImpBeintoo parseAndValidateImpExt(Imp imp) {\n+        final ExtImpBeintoo extImpBeintoo;\n+        try {\n+            extImpBeintoo = mapper.mapper().convertValue(imp.getExt(), BEINTOO_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        final int tagidNumber;\n+        try {\n+            tagidNumber = Integer.parseInt(extImpBeintoo.getTagId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f94aa9238ee8a2eeb1c71b4a012a3850ce065d8"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjM3ODA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxOToyMlrOHSwcqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxOToyMlrOHSwcqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzMDE4Nw==", "bodyText": "also check if >0", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r489430187", "createdAt": "2020-09-16T13:19:22Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.prebid.server.bidder.beintoo;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.beintoo.ExtImpBeintoo;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class BeintooBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBeintoo>> BEINTOO_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBeintoo>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BeintooBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final BidRequest updatedBidRequest;\n+        try {\n+            updatedBidRequest = updateBidRequest(request);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(updatedBidRequest);\n+        final MultiMap headers = makeHeaders(request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .body(body)\n+                        .headers(headers)\n+                        .payload(request)\n+                        .build()), errors);\n+    }\n+\n+    private BidRequest updateBidRequest(BidRequest request) {\n+        final boolean isSecure = isSecure(request.getSite());\n+\n+        final List<Imp> modifiedImps = request.getImp().stream()\n+                .map(imp -> modifyImp(imp, isSecure, parseAndValidateImpExt(imp)))\n+                .collect(Collectors.toList());\n+\n+        return request.toBuilder()\n+                .imp(modifiedImps)\n+                .build();\n+    }\n+\n+    private static boolean isSecure(Site site) {\n+        return site != null && StringUtils.isNotBlank(site.getPage()) && site.getPage()\n+                .startsWith(\"https\");\n+    }\n+\n+    private ExtImpBeintoo parseAndValidateImpExt(Imp imp) {\n+        final ExtImpBeintoo extImpBeintoo;\n+        try {\n+            extImpBeintoo = mapper.mapper().convertValue(imp.getExt(), BEINTOO_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        final int tagidNumber;\n+        try {\n+            tagidNumber = Integer.parseInt(extImpBeintoo.getTagId());\n+        } catch (NumberFormatException e) {\n+            throw new PreBidException(\n+                    String.format(\"tagid must be a String of numbers, ignoring imp id=%s\",\n+                            imp.getId()), e);\n+        }\n+\n+        if (tagidNumber == 0) {\n+            throw new PreBidException(String.format(\"tagid cant be 0, ignoring imp id=%s\",\n+                    imp.getId()));\n+        }\n+\n+        return extImpBeintoo;\n+    }\n+\n+    private static Imp modifyImp(Imp imp, boolean isSecure, ExtImpBeintoo extImpBeintoo) {\n+        final Banner banner = modifyImpBanner(imp.getBanner());\n+\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder()\n+                .tagid(extImpBeintoo.getTagId())\n+                .secure(BooleanUtils.toInteger(isSecure))\n+                .banner(banner)\n+                .ext(null);\n+\n+        final String stringBidfloor = extImpBeintoo.getBidFloor();\n+        if (StringUtils.isBlank(stringBidfloor)) {\n+            return impBuilder.build();\n+        }\n+\n+        final BigDecimal bidfloor;\n+        try {\n+            bidfloor = new BigDecimal(stringBidfloor);\n+        } catch (NumberFormatException e) {\n+            return impBuilder.build();\n+        }\n+\n+        return impBuilder\n+                .bidfloor(bidfloor)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f94aa9238ee8a2eeb1c71b4a012a3850ce065d8"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjM3OTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxOTo0NlrOHSwd2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxOTo0NlrOHSwd2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzMDQ4OQ==", "bodyText": "Create object in the end of the method.", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r489430489", "createdAt": "2020-09-16T13:19:46Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.prebid.server.bidder.beintoo;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.beintoo.ExtImpBeintoo;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class BeintooBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBeintoo>> BEINTOO_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBeintoo>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BeintooBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final BidRequest updatedBidRequest;\n+        try {\n+            updatedBidRequest = updateBidRequest(request);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(updatedBidRequest);\n+        final MultiMap headers = makeHeaders(request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .body(body)\n+                        .headers(headers)\n+                        .payload(request)\n+                        .build()), errors);\n+    }\n+\n+    private BidRequest updateBidRequest(BidRequest request) {\n+        final boolean isSecure = isSecure(request.getSite());\n+\n+        final List<Imp> modifiedImps = request.getImp().stream()\n+                .map(imp -> modifyImp(imp, isSecure, parseAndValidateImpExt(imp)))\n+                .collect(Collectors.toList());\n+\n+        return request.toBuilder()\n+                .imp(modifiedImps)\n+                .build();\n+    }\n+\n+    private static boolean isSecure(Site site) {\n+        return site != null && StringUtils.isNotBlank(site.getPage()) && site.getPage()\n+                .startsWith(\"https\");\n+    }\n+\n+    private ExtImpBeintoo parseAndValidateImpExt(Imp imp) {\n+        final ExtImpBeintoo extImpBeintoo;\n+        try {\n+            extImpBeintoo = mapper.mapper().convertValue(imp.getExt(), BEINTOO_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        final int tagidNumber;\n+        try {\n+            tagidNumber = Integer.parseInt(extImpBeintoo.getTagId());\n+        } catch (NumberFormatException e) {\n+            throw new PreBidException(\n+                    String.format(\"tagid must be a String of numbers, ignoring imp id=%s\",\n+                            imp.getId()), e);\n+        }\n+\n+        if (tagidNumber == 0) {\n+            throw new PreBidException(String.format(\"tagid cant be 0, ignoring imp id=%s\",\n+                    imp.getId()));\n+        }\n+\n+        return extImpBeintoo;\n+    }\n+\n+    private static Imp modifyImp(Imp imp, boolean isSecure, ExtImpBeintoo extImpBeintoo) {\n+        final Banner banner = modifyImpBanner(imp.getBanner());\n+\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f94aa9238ee8a2eeb1c71b4a012a3850ce065d8"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjM5MTI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyMjoxOVrOHSwk9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyMjoxOVrOHSwk9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzMjMwOA==", "bodyText": "Refactor this to be like\nstringBidfloor = extImpBeintoo.getBidFloor();\nStringUtils.isBlank(stringBidfloor) ? null : new BigDecimal(stringBidfloor)\n\nbidfloor(bidfloor.compareTo(BigDecimal.ZERO) > 0 ? bidfloor : imp.getBidfloor())", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r489432308", "createdAt": "2020-09-16T13:22:19Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.prebid.server.bidder.beintoo;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.beintoo.ExtImpBeintoo;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class BeintooBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBeintoo>> BEINTOO_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBeintoo>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BeintooBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final BidRequest updatedBidRequest;\n+        try {\n+            updatedBidRequest = updateBidRequest(request);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(updatedBidRequest);\n+        final MultiMap headers = makeHeaders(request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .body(body)\n+                        .headers(headers)\n+                        .payload(request)\n+                        .build()), errors);\n+    }\n+\n+    private BidRequest updateBidRequest(BidRequest request) {\n+        final boolean isSecure = isSecure(request.getSite());\n+\n+        final List<Imp> modifiedImps = request.getImp().stream()\n+                .map(imp -> modifyImp(imp, isSecure, parseAndValidateImpExt(imp)))\n+                .collect(Collectors.toList());\n+\n+        return request.toBuilder()\n+                .imp(modifiedImps)\n+                .build();\n+    }\n+\n+    private static boolean isSecure(Site site) {\n+        return site != null && StringUtils.isNotBlank(site.getPage()) && site.getPage()\n+                .startsWith(\"https\");\n+    }\n+\n+    private ExtImpBeintoo parseAndValidateImpExt(Imp imp) {\n+        final ExtImpBeintoo extImpBeintoo;\n+        try {\n+            extImpBeintoo = mapper.mapper().convertValue(imp.getExt(), BEINTOO_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        final int tagidNumber;\n+        try {\n+            tagidNumber = Integer.parseInt(extImpBeintoo.getTagId());\n+        } catch (NumberFormatException e) {\n+            throw new PreBidException(\n+                    String.format(\"tagid must be a String of numbers, ignoring imp id=%s\",\n+                            imp.getId()), e);\n+        }\n+\n+        if (tagidNumber == 0) {\n+            throw new PreBidException(String.format(\"tagid cant be 0, ignoring imp id=%s\",\n+                    imp.getId()));\n+        }\n+\n+        return extImpBeintoo;\n+    }\n+\n+    private static Imp modifyImp(Imp imp, boolean isSecure, ExtImpBeintoo extImpBeintoo) {\n+        final Banner banner = modifyImpBanner(imp.getBanner());\n+\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder()\n+                .tagid(extImpBeintoo.getTagId())\n+                .secure(BooleanUtils.toInteger(isSecure))\n+                .banner(banner)\n+                .ext(null);\n+\n+        final String stringBidfloor = extImpBeintoo.getBidFloor();\n+        if (StringUtils.isBlank(stringBidfloor)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f94aa9238ee8a2eeb1c71b4a012a3850ce065d8"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjM5NDM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyMzowOFrOHSwnDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyMzowOFrOHSwnDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzMjg0NQ==", "bodyText": "CollectionUtils", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r489432845", "createdAt": "2020-09-16T13:23:08Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.prebid.server.bidder.beintoo;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.beintoo.ExtImpBeintoo;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class BeintooBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBeintoo>> BEINTOO_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBeintoo>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BeintooBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final BidRequest updatedBidRequest;\n+        try {\n+            updatedBidRequest = updateBidRequest(request);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(updatedBidRequest);\n+        final MultiMap headers = makeHeaders(request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .body(body)\n+                        .headers(headers)\n+                        .payload(request)\n+                        .build()), errors);\n+    }\n+\n+    private BidRequest updateBidRequest(BidRequest request) {\n+        final boolean isSecure = isSecure(request.getSite());\n+\n+        final List<Imp> modifiedImps = request.getImp().stream()\n+                .map(imp -> modifyImp(imp, isSecure, parseAndValidateImpExt(imp)))\n+                .collect(Collectors.toList());\n+\n+        return request.toBuilder()\n+                .imp(modifiedImps)\n+                .build();\n+    }\n+\n+    private static boolean isSecure(Site site) {\n+        return site != null && StringUtils.isNotBlank(site.getPage()) && site.getPage()\n+                .startsWith(\"https\");\n+    }\n+\n+    private ExtImpBeintoo parseAndValidateImpExt(Imp imp) {\n+        final ExtImpBeintoo extImpBeintoo;\n+        try {\n+            extImpBeintoo = mapper.mapper().convertValue(imp.getExt(), BEINTOO_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        final int tagidNumber;\n+        try {\n+            tagidNumber = Integer.parseInt(extImpBeintoo.getTagId());\n+        } catch (NumberFormatException e) {\n+            throw new PreBidException(\n+                    String.format(\"tagid must be a String of numbers, ignoring imp id=%s\",\n+                            imp.getId()), e);\n+        }\n+\n+        if (tagidNumber == 0) {\n+            throw new PreBidException(String.format(\"tagid cant be 0, ignoring imp id=%s\",\n+                    imp.getId()));\n+        }\n+\n+        return extImpBeintoo;\n+    }\n+\n+    private static Imp modifyImp(Imp imp, boolean isSecure, ExtImpBeintoo extImpBeintoo) {\n+        final Banner banner = modifyImpBanner(imp.getBanner());\n+\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder()\n+                .tagid(extImpBeintoo.getTagId())\n+                .secure(BooleanUtils.toInteger(isSecure))\n+                .banner(banner)\n+                .ext(null);\n+\n+        final String stringBidfloor = extImpBeintoo.getBidFloor();\n+        if (StringUtils.isBlank(stringBidfloor)) {\n+            return impBuilder.build();\n+        }\n+\n+        final BigDecimal bidfloor;\n+        try {\n+            bidfloor = new BigDecimal(stringBidfloor);\n+        } catch (NumberFormatException e) {\n+            return impBuilder.build();\n+        }\n+\n+        return impBuilder\n+                .bidfloor(bidfloor)\n+                .build();\n+    }\n+\n+    private static Banner modifyImpBanner(Banner banner) {\n+        if (banner == null) {\n+            throw new PreBidException(\"Request needs to include a Banner object\");\n+        }\n+\n+        if (banner.getW() == null && banner.getH() == null) {\n+            final Banner.BannerBuilder bannerBuilder = banner.toBuilder();\n+            final List<Format> originalFormat = banner.getFormat();\n+\n+            if (originalFormat == null || originalFormat.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f94aa9238ee8a2eeb1c71b4a012a3850ce065d8"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjM5NjM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyMzozOFrOHSwoWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyMzozOFrOHSwoWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzMzE3Ng==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r489433176", "createdAt": "2020-09-16T13:23:38Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.prebid.server.bidder.beintoo;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.beintoo.ExtImpBeintoo;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class BeintooBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBeintoo>> BEINTOO_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBeintoo>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BeintooBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final BidRequest updatedBidRequest;\n+        try {\n+            updatedBidRequest = updateBidRequest(request);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(updatedBidRequest);\n+        final MultiMap headers = makeHeaders(request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .body(body)\n+                        .headers(headers)\n+                        .payload(request)\n+                        .build()), errors);\n+    }\n+\n+    private BidRequest updateBidRequest(BidRequest request) {\n+        final boolean isSecure = isSecure(request.getSite());\n+\n+        final List<Imp> modifiedImps = request.getImp().stream()\n+                .map(imp -> modifyImp(imp, isSecure, parseAndValidateImpExt(imp)))\n+                .collect(Collectors.toList());\n+\n+        return request.toBuilder()\n+                .imp(modifiedImps)\n+                .build();\n+    }\n+\n+    private static boolean isSecure(Site site) {\n+        return site != null && StringUtils.isNotBlank(site.getPage()) && site.getPage()\n+                .startsWith(\"https\");\n+    }\n+\n+    private ExtImpBeintoo parseAndValidateImpExt(Imp imp) {\n+        final ExtImpBeintoo extImpBeintoo;\n+        try {\n+            extImpBeintoo = mapper.mapper().convertValue(imp.getExt(), BEINTOO_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        final int tagidNumber;\n+        try {\n+            tagidNumber = Integer.parseInt(extImpBeintoo.getTagId());\n+        } catch (NumberFormatException e) {\n+            throw new PreBidException(\n+                    String.format(\"tagid must be a String of numbers, ignoring imp id=%s\",\n+                            imp.getId()), e);\n+        }\n+\n+        if (tagidNumber == 0) {\n+            throw new PreBidException(String.format(\"tagid cant be 0, ignoring imp id=%s\",\n+                    imp.getId()));\n+        }\n+\n+        return extImpBeintoo;\n+    }\n+\n+    private static Imp modifyImp(Imp imp, boolean isSecure, ExtImpBeintoo extImpBeintoo) {\n+        final Banner banner = modifyImpBanner(imp.getBanner());\n+\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder()\n+                .tagid(extImpBeintoo.getTagId())\n+                .secure(BooleanUtils.toInteger(isSecure))\n+                .banner(banner)\n+                .ext(null);\n+\n+        final String stringBidfloor = extImpBeintoo.getBidFloor();\n+        if (StringUtils.isBlank(stringBidfloor)) {\n+            return impBuilder.build();\n+        }\n+\n+        final BigDecimal bidfloor;\n+        try {\n+            bidfloor = new BigDecimal(stringBidfloor);\n+        } catch (NumberFormatException e) {\n+            return impBuilder.build();\n+        }\n+\n+        return impBuilder\n+                .bidfloor(bidfloor)\n+                .build();\n+    }\n+\n+    private static Banner modifyImpBanner(Banner banner) {\n+        if (banner == null) {\n+            throw new PreBidException(\"Request needs to include a Banner object\");\n+        }\n+\n+        if (banner.getW() == null && banner.getH() == null) {\n+            final Banner.BannerBuilder bannerBuilder = banner.toBuilder();\n+            final List<Format> originalFormat = banner.getFormat();\n+\n+            if (originalFormat == null || originalFormat.isEmpty()) {\n+                throw new PreBidException(\"Need at least one size to build request\");\n+            }\n+\n+            final List<Format> formatSkipFirst = originalFormat.subList(1, originalFormat.size());\n+            bannerBuilder.format(formatSkipFirst);\n+\n+            Format firstFormat = originalFormat.get(0);\n+            bannerBuilder.w(firstFormat.getW());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f94aa9238ee8a2eeb1c71b4a012a3850ce065d8"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjQxMzk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyNzoyMFrOHSwzSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyNzoyMFrOHSwzSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNTk3OA==", "bodyText": "just use another .map instead of method in .of", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r489435978", "createdAt": "2020-09-16T13:27:20Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.prebid.server.bidder.beintoo;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.beintoo.ExtImpBeintoo;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class BeintooBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBeintoo>> BEINTOO_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBeintoo>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BeintooBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        final BidRequest updatedBidRequest;\n+        try {\n+            updatedBidRequest = updateBidRequest(request);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(updatedBidRequest);\n+        final MultiMap headers = makeHeaders(request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .body(body)\n+                        .headers(headers)\n+                        .payload(request)\n+                        .build()), errors);\n+    }\n+\n+    private BidRequest updateBidRequest(BidRequest request) {\n+        final boolean isSecure = isSecure(request.getSite());\n+\n+        final List<Imp> modifiedImps = request.getImp().stream()\n+                .map(imp -> modifyImp(imp, isSecure, parseAndValidateImpExt(imp)))\n+                .collect(Collectors.toList());\n+\n+        return request.toBuilder()\n+                .imp(modifiedImps)\n+                .build();\n+    }\n+\n+    private static boolean isSecure(Site site) {\n+        return site != null && StringUtils.isNotBlank(site.getPage()) && site.getPage()\n+                .startsWith(\"https\");\n+    }\n+\n+    private ExtImpBeintoo parseAndValidateImpExt(Imp imp) {\n+        final ExtImpBeintoo extImpBeintoo;\n+        try {\n+            extImpBeintoo = mapper.mapper().convertValue(imp.getExt(), BEINTOO_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        final int tagidNumber;\n+        try {\n+            tagidNumber = Integer.parseInt(extImpBeintoo.getTagId());\n+        } catch (NumberFormatException e) {\n+            throw new PreBidException(\n+                    String.format(\"tagid must be a String of numbers, ignoring imp id=%s\",\n+                            imp.getId()), e);\n+        }\n+\n+        if (tagidNumber == 0) {\n+            throw new PreBidException(String.format(\"tagid cant be 0, ignoring imp id=%s\",\n+                    imp.getId()));\n+        }\n+\n+        return extImpBeintoo;\n+    }\n+\n+    private static Imp modifyImp(Imp imp, boolean isSecure, ExtImpBeintoo extImpBeintoo) {\n+        final Banner banner = modifyImpBanner(imp.getBanner());\n+\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder()\n+                .tagid(extImpBeintoo.getTagId())\n+                .secure(BooleanUtils.toInteger(isSecure))\n+                .banner(banner)\n+                .ext(null);\n+\n+        final String stringBidfloor = extImpBeintoo.getBidFloor();\n+        if (StringUtils.isBlank(stringBidfloor)) {\n+            return impBuilder.build();\n+        }\n+\n+        final BigDecimal bidfloor;\n+        try {\n+            bidfloor = new BigDecimal(stringBidfloor);\n+        } catch (NumberFormatException e) {\n+            return impBuilder.build();\n+        }\n+\n+        return impBuilder\n+                .bidfloor(bidfloor)\n+                .build();\n+    }\n+\n+    private static Banner modifyImpBanner(Banner banner) {\n+        if (banner == null) {\n+            throw new PreBidException(\"Request needs to include a Banner object\");\n+        }\n+\n+        if (banner.getW() == null && banner.getH() == null) {\n+            final Banner.BannerBuilder bannerBuilder = banner.toBuilder();\n+            final List<Format> originalFormat = banner.getFormat();\n+\n+            if (originalFormat == null || originalFormat.isEmpty()) {\n+                throw new PreBidException(\"Need at least one size to build request\");\n+            }\n+\n+            final List<Format> formatSkipFirst = originalFormat.subList(1, originalFormat.size());\n+            bannerBuilder.format(formatSkipFirst);\n+\n+            Format firstFormat = originalFormat.get(0);\n+            bannerBuilder.w(firstFormat.getW());\n+            bannerBuilder.h(firstFormat.getH());\n+\n+            return bannerBuilder.build();\n+        }\n+\n+        return banner;\n+    }\n+\n+    private static MultiMap makeHeaders(BidRequest request) {\n+        final MultiMap headers = HttpUtil.headers();\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER,\n+                    device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER,\n+                    device.getIp());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.ACCEPT_LANGUAGE_HEADER,\n+                    device.getLanguage());\n+            if (device.getDnt() != null) {\n+                HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.DNT_HEADER,\n+                        String.valueOf(device.getDnt()));\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, site.getPage());\n+        }\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private static List<BidderBid> extractBids(BidResponse bidResponse) {\n+        return bidResponse == null || bidResponse.getSeatbid() == null\n+                ? Collections.emptyList()\n+                : bidsFromResponse(bidResponse);\n+    }\n+\n+    private static List<BidderBid> bidsFromResponse(BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(modifyBid(bid), BidType.banner, DEFAULT_BID_CURRENCY))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f94aa9238ee8a2eeb1c71b4a012a3850ce065d8"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDkzMjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyMDozNVrOHUC-Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyMDozNVrOHUC-Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MjI3MA==", "bodyText": "use class form apache", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r490782270", "createdAt": "2020-09-18T08:20:35Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -29,6 +27,7 @@\n import org.prebid.server.proto.openrtb.ext.request.beintoo.ExtImpBeintoo;\n import org.prebid.server.proto.openrtb.ext.response.BidType;\n import org.prebid.server.util.HttpUtil;\n+import org.springframework.util.CollectionUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "516a03ff99dba945a630f0a2cad570ee5a62e4d2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDkzNTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyMTo0MVrOHUDAfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyMTo0MVrOHUDAfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4Mjg0NA==", "bodyText": "just return emptyList", "url": "https://github.com/prebid/prebid-server-java/pull/813#discussion_r490782844", "createdAt": "2020-09-18T08:21:41Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/beintoo/BeintooBidder.java", "diffHunk": "@@ -72,6 +65,7 @@ public BeintooBidder(String endpointUrl, JacksonMapper mapper) {\n \n         final String body = mapper.encode(updatedBidRequest);\n         final MultiMap headers = makeHeaders(request);\n+        final List<BidderError> errors = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "516a03ff99dba945a630f0a2cad570ee5a62e4d2"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3974, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}