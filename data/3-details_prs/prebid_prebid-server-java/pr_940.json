{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NzQ4ODcx", "number": 940, "title": "Add Between bidder.", "bodyText": "", "createdAt": "2020-10-05T10:21:32Z", "url": "https://github.com/prebid/prebid-server-java/pull/940", "merged": true, "mergeCommit": {"oid": "c411cead5183e864f9f8ac0a3e319915107737f1"}, "closed": true, "closedAt": "2020-10-27T08:15:06Z", "author": {"login": "snahornyi"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPhl15ABqjM4Mzk4MDE5MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWkfqSAFqTUxNzQzODQ2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e8e30478c2fb9c0a5871b62412e218912950a51", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/1e8e30478c2fb9c0a5871b62412e218912950a51", "committedDate": "2020-10-05T10:20:17Z", "message": "Add Between bidder."}, "afterCommit": {"oid": "8f17ca6cc7313b675b84e48a2e68c35c859c844f", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/8f17ca6cc7313b675b84e48a2e68c35c859c844f", "committedDate": "2020-10-05T10:53:58Z", "message": "Add Between bidder."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f17ca6cc7313b675b84e48a2e68c35c859c844f", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/8f17ca6cc7313b675b84e48a2e68c35c859c844f", "committedDate": "2020-10-05T10:53:58Z", "message": "Add Between bidder."}, "afterCommit": {"oid": "f9ea38b443fae8054c3d9c27869ea9540a381318", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/f9ea38b443fae8054c3d9c27869ea9540a381318", "committedDate": "2020-10-05T10:56:12Z", "message": "Add Between bidder."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a28a0e919718dabdaf2b26caf32e9e6db51d1878", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/a28a0e919718dabdaf2b26caf32e9e6db51d1878", "committedDate": "2020-10-05T11:03:52Z", "message": "Add Between bidder."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9ea38b443fae8054c3d9c27869ea9540a381318", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/f9ea38b443fae8054c3d9c27869ea9540a381318", "committedDate": "2020-10-05T10:56:12Z", "message": "Add Between bidder."}, "afterCommit": {"oid": "a28a0e919718dabdaf2b26caf32e9e6db51d1878", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/a28a0e919718dabdaf2b26caf32e9e6db51d1878", "committedDate": "2020-10-05T11:03:52Z", "message": "Add Between bidder."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "499ae8f01b15a15b6126e1fcc7cfe123ef5d249d", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/499ae8f01b15a15b6126e1fcc7cfe123ef5d249d", "committedDate": "2020-10-05T11:57:27Z", "message": "Change test files and currency logic in between bidder."}, "afterCommit": {"oid": "800efd64145c932597ae5933366c8e3d35946d0a", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/800efd64145c932597ae5933366c8e3d35946d0a", "committedDate": "2020-10-25T00:12:11Z", "message": "Fixes after review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "611313cccb12e8ead48ca0b496aa7fb49fa2c361", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/611313cccb12e8ead48ca0b496aa7fb49fa2c361", "committedDate": "2020-10-25T00:21:08Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ec8bc0eff5ffd5985d5d391f90e2b8d59274093", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/7ec8bc0eff5ffd5985d5d391f90e2b8d59274093", "committedDate": "2020-10-25T00:22:08Z", "message": "Merge branch 'master' into between_bidder/development"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "800efd64145c932597ae5933366c8e3d35946d0a", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/800efd64145c932597ae5933366c8e3d35946d0a", "committedDate": "2020-10-25T00:12:11Z", "message": "Fixes after review"}, "afterCommit": {"oid": "7ec8bc0eff5ffd5985d5d391f90e2b8d59274093", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/7ec8bc0eff5ffd5985d5d391f90e2b8d59274093", "committedDate": "2020-10-25T00:22:08Z", "message": "Merge branch 'master' into between_bidder/development"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NzM5NTYy", "url": "https://github.com/prebid/prebid-server-java/pull/940#pullrequestreview-516739562", "createdAt": "2020-10-26T12:46:25Z", "commit": {"oid": "7ec8bc0eff5ffd5985d5d391f90e2b8d59274093"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjo0NjoyNVrOHoN3dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjo1MjoyOFrOHoOFDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMjI3Ng==", "bodyText": "Minor. Empty line redundant.", "url": "https://github.com/prebid/prebid-server-java/pull/940#discussion_r511932276", "createdAt": "2020-10-26T12:46:25Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/between/BetweenBidder.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.prebid.server.bidder.between;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.between.ExtImpBetween;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Between {@link Bidder} implementation.\n+ */\n+public class BetweenBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBetween>> BETWEEN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBetween>>() {\n+            };\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BetweenBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec8bc0eff5ffd5985d5d391f90e2b8d59274093"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMzUwNA==", "bodyText": "Pls put this method after makeHttpRequests(..) according to the call order.", "url": "https://github.com/prebid/prebid-server-java/pull/940#discussion_r511933504", "createdAt": "2020-10-26T12:48:39Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/between/BetweenBidder.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.prebid.server.bidder.between;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.between.ExtImpBetween;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Between {@link Bidder} implementation.\n+ */\n+public class BetweenBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBetween>> BETWEEN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBetween>>() {\n+            };\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BetweenBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final Map<Imp, ExtImpBetween> validImpsWithExts = new HashMap<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpBetween extImpBetween = parseImpExt(imp);\n+                validImpsWithExts.put(imp, extImpBetween);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (validImpsWithExts.size() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"No valid Imps in Bid Request\"));\n+        }\n+\n+        final List<HttpRequest<BidRequest>> madeRequests = new ArrayList<>();\n+\n+        for (Map.Entry<Imp, ExtImpBetween> entry : validImpsWithExts.entrySet()) {\n+            madeRequests.add(makeSingleRequest(entry.getValue(), request, entry.getKey()));\n+        }\n+\n+        return Result.of(madeRequests, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> makeSingleRequest(ExtImpBetween extImpBetween, BidRequest request, Imp imp) {\n+\n+        final String url = endpointUrl.replace(URL_HOST_MACRO, extImpBetween.getHost());\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        return\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build();\n+    }\n+\n+    private ExtImpBetween parseImpExt(Imp imp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec8bc0eff5ffd5985d5d391f90e2b8d59274093"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzNTM5Ng==", "bodyText": "Personally i don't like StringUtils.isBlank(..) but seems here it is more desirable.", "url": "https://github.com/prebid/prebid-server-java/pull/940#discussion_r511935396", "createdAt": "2020-10-26T12:51:51Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/between/BetweenBidder.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.prebid.server.bidder.between;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.between.ExtImpBetween;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Between {@link Bidder} implementation.\n+ */\n+public class BetweenBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBetween>> BETWEEN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBetween>>() {\n+            };\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BetweenBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final Map<Imp, ExtImpBetween> validImpsWithExts = new HashMap<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpBetween extImpBetween = parseImpExt(imp);\n+                validImpsWithExts.put(imp, extImpBetween);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (validImpsWithExts.size() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"No valid Imps in Bid Request\"));\n+        }\n+\n+        final List<HttpRequest<BidRequest>> madeRequests = new ArrayList<>();\n+\n+        for (Map.Entry<Imp, ExtImpBetween> entry : validImpsWithExts.entrySet()) {\n+            madeRequests.add(makeSingleRequest(entry.getValue(), request, entry.getKey()));\n+        }\n+\n+        return Result.of(madeRequests, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> makeSingleRequest(ExtImpBetween extImpBetween, BidRequest request, Imp imp) {\n+\n+        final String url = endpointUrl.replace(URL_HOST_MACRO, extImpBetween.getHost());\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        return\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build();\n+    }\n+\n+    private ExtImpBetween parseImpExt(Imp imp) {\n+        final ExtImpBetween extImpBetween;\n+        try {\n+            extImpBetween = mapper.mapper().convertValue(imp.getExt(), BETWEEN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(String.format(\"Missing bidder ext: %s\", e.getMessage()));\n+        }\n+        if (StringUtils.isEmpty(extImpBetween.getHost())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec8bc0eff5ffd5985d5d391f90e2b8d59274093"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzNTc1OQ==", "bodyText": "Would be nice to see the imp ID in error message.", "url": "https://github.com/prebid/prebid-server-java/pull/940#discussion_r511935759", "createdAt": "2020-10-26T12:52:28Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/between/BetweenBidder.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.prebid.server.bidder.between;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.between.ExtImpBetween;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Between {@link Bidder} implementation.\n+ */\n+public class BetweenBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpBetween>> BETWEEN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpBetween>>() {\n+            };\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public BetweenBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final Map<Imp, ExtImpBetween> validImpsWithExts = new HashMap<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpBetween extImpBetween = parseImpExt(imp);\n+                validImpsWithExts.put(imp, extImpBetween);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (validImpsWithExts.size() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"No valid Imps in Bid Request\"));\n+        }\n+\n+        final List<HttpRequest<BidRequest>> madeRequests = new ArrayList<>();\n+\n+        for (Map.Entry<Imp, ExtImpBetween> entry : validImpsWithExts.entrySet()) {\n+            madeRequests.add(makeSingleRequest(entry.getValue(), request, entry.getKey()));\n+        }\n+\n+        return Result.of(madeRequests, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> makeSingleRequest(ExtImpBetween extImpBetween, BidRequest request, Imp imp) {\n+\n+        final String url = endpointUrl.replace(URL_HOST_MACRO, extImpBetween.getHost());\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        return\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build();\n+    }\n+\n+    private ExtImpBetween parseImpExt(Imp imp) {\n+        final ExtImpBetween extImpBetween;\n+        try {\n+            extImpBetween = mapper.mapper().convertValue(imp.getExt(), BETWEEN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(String.format(\"Missing bidder ext: %s\", e.getMessage()));\n+        }\n+        if (StringUtils.isEmpty(extImpBetween.getHost())) {\n+            throw new PreBidException(\"Invalid/Missing Host\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec8bc0eff5ffd5985d5d391f90e2b8d59274093"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be1086c025b5c6ed586dcb651a16ef1ac85ff7c5", "author": {"user": null}, "url": "https://github.com/prebid/prebid-server-java/commit/be1086c025b5c6ed586dcb651a16ef1ac85ff7c5", "committedDate": "2020-10-26T17:51:26Z", "message": "Fixes after review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDM4NDY0", "url": "https://github.com/prebid/prebid-server-java/pull/940#pullrequestreview-517438464", "createdAt": "2020-10-27T08:14:44Z", "commit": {"oid": "be1086c025b5c6ed586dcb651a16ef1ac85ff7c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3017, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}