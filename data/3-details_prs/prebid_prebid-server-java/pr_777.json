{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzY5NzQ0", "number": 777, "title": "Add Adocean bidder", "bodyText": "", "createdAt": "2020-06-26T20:18:53Z", "url": "https://github.com/prebid/prebid-server-java/pull/777", "merged": true, "mergeCommit": {"oid": "8feed484eef6ba15c22ab6ab6eefdd57405ff2fd"}, "closed": true, "closedAt": "2020-09-15T14:42:14Z", "author": {"login": "AndriyPavlyuk"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvJGxgAH2gAyNDQwNzY5NzQ0OjMxOTVmYjc0ZDE0NTAzNjAyZTM4ZGUyODA1OTUxMjgzZGRjMDhlNDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJI1PkgFqTQ4ODc1NjU0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3195fb74d14503602e38de2805951283ddc08e49", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/3195fb74d14503602e38de2805951283ddc08e49", "committedDate": "2020-06-26T20:17:04Z", "message": "AdoceanBidder and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78fdeee5f81cc0668b86502ba5a9bbfe8d70fdc9", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/78fdeee5f81cc0668b86502ba5a9bbfe8d70fdc9", "committedDate": "2020-06-26T20:44:16Z", "message": "Merge branch 'master' into add-adocean-bidder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecabcef4b6cdaa03ba06f321e71a4315073f7e39", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/ecabcef4b6cdaa03ba06f321e71a4315073f7e39", "committedDate": "2020-07-07T22:28:45Z", "message": "Add integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2795b1959d50403ea8a4ff1a8dd7d856510743af", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/2795b1959d50403ea8a4ff1a8dd7d856510743af", "committedDate": "2020-07-07T22:46:39Z", "message": "Fix types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c2f7edf6679fdcbf44dd63b9f2313b64b3d2e8d", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/0c2f7edf6679fdcbf44dd63b9f2313b64b3d2e8d", "committedDate": "2020-07-07T22:52:25Z", "message": "Change extUser method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f302200ed7ba71c18c38aaf8a4c124fe552157b2", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/f302200ed7ba71c18c38aaf8a4c124fe552157b2", "committedDate": "2020-07-08T12:28:47Z", "message": "Change to test json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d84e19d1fc5a5c0e1406ed6d614381f5dcb9e87", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/8d84e19d1fc5a5c0e1406ed6d614381f5dcb9e87", "committedDate": "2020-07-08T21:04:22Z", "message": "Merge branch 'master' into add-adocean-bidder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/2673bb0c559fb39cbc370ffa5dc18e17416721f0", "committedDate": "2020-07-08T21:15:14Z", "message": "Resolve conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NTYzNDI0", "url": "https://github.com/prebid/prebid-server-java/pull/777#pullrequestreview-467563424", "createdAt": "2020-08-14T13:13:21Z", "commit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxMzoyMVrOHA0FIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjoxODo0NVrOHBmYFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTMyOA==", "bodyText": "There is a bug in this version of bidder. They actually not returning error in case of duplicate. But lets keep it for now", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r470615328", "createdAt": "2020-08-14T13:13:21Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTUwNg==", "bodyText": "remove final and add", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r470615506", "createdAt": "2020-08-14T13:13:42Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequestAdded(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (final HttpRequest request : httpRequests) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxOTU2MA==", "bodyText": "Try to avoid passing Collection in argument for which you adding result.", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r470619560", "createdAt": "2020-08-14T13:21:36Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyMTUzOA==", "bodyText": "You don't need to throw an exception for this matter", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r470621538", "createdAt": "2020-08-14T13:25:16Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM5OTAwMg==", "bodyText": "You can omit null parameters", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471399002", "createdAt": "2020-08-17T10:52:28Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxMjk5NQ==", "bodyText": "NPE if test is null", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471412995", "createdAt": "2020-08-17T11:23:08Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequestAdded(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (final HttpRequest request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            try {\n+                params = URLEncodedUtils.parse(new URI(request.getUri()), StandardCharsets.UTF_8);\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final String masterId = params != null ? params.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null) : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = params.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])\n+                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                        .findFirst()\n+                        .orElse(null);\n+                if (StringUtils.isNotBlank(newSlaveId)) {\n+                    continue;\n+                }\n+\n+                params.add(new BasicNameValuePair(\"aid\", extImpAdocean.getSlaveId() + \":\" + impid));\n+\n+                final String url = HttpUtil.encodeUrl(String.valueOf(params));\n+                if (url.length() < MAX_URI_LENGTH) {\n+                    request.builder().uri(url);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String buildUrl(String impid, ExtImpAdocean extImpAdocean, String consentString, Integer test, User user) {\n+        final String url = endpointUrl.replace(\"{{Host}}\", extImpAdocean.getEmitterDomain());\n+        int randomizedPart = 10000000 + (int) (Math.random() * (99999999 - 10000000));\n+        if (test == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxNDY1OA==", "bodyText": "you really need sorted ?\nJust use  String.join(\"&\", params)", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471414658", "createdAt": "2020-08-17T11:26:36Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequestAdded(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (final HttpRequest request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            try {\n+                params = URLEncodedUtils.parse(new URI(request.getUri()), StandardCharsets.UTF_8);\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final String masterId = params != null ? params.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null) : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = params.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])\n+                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                        .findFirst()\n+                        .orElse(null);\n+                if (StringUtils.isNotBlank(newSlaveId)) {\n+                    continue;\n+                }\n+\n+                params.add(new BasicNameValuePair(\"aid\", extImpAdocean.getSlaveId() + \":\" + impid));\n+\n+                final String url = HttpUtil.encodeUrl(String.valueOf(params));\n+                if (url.length() < MAX_URI_LENGTH) {\n+                    request.builder().uri(url);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String buildUrl(String impid, ExtImpAdocean extImpAdocean, String consentString, Integer test, User user) {\n+        final String url = endpointUrl.replace(\"{{Host}}\", extImpAdocean.getEmitterDomain());\n+        int randomizedPart = 10000000 + (int) (Math.random() * (99999999 - 10000000));\n+        if (test == 1) {\n+            randomizedPart = 10000000;\n+        }\n+\n+        final String updateUrl = String.format(\"%s%s%s%s\", url, \"/_\", randomizedPart, \"/ad.json\");\n+\n+        final List<String> params = new ArrayList<>();\n+        params.add(\"pbsrv_v=\" + VERSION);\n+        params.add(\"id=\" + extImpAdocean.getMasterId());\n+        params.add(\"nc=1\");\n+        params.add(\"nosecure=1\");\n+        params.add(\"aid=\" + extImpAdocean.getSlaveId() + \":\" + impid);\n+\n+        if (StringUtils.isNotBlank(consentString)) {\n+            params.add(\"gdpr_consent=\" + consentString);\n+            params.add(\"gdpr=1\");\n+        }\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            params.add(\"hcuserid=\" + user.getBuyeruid());\n+        }\n+\n+        final String urlParams = params.stream().sorted().collect(Collectors.joining(\"&\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxNzM4OQ==", "bodyText": "You can use URIBuilder for this stuff", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471417389", "createdAt": "2020-08-17T11:32:33Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequestAdded(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (final HttpRequest request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            try {\n+                params = URLEncodedUtils.parse(new URI(request.getUri()), StandardCharsets.UTF_8);\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final String masterId = params != null ? params.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null) : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = params.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])\n+                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                        .findFirst()\n+                        .orElse(null);\n+                if (StringUtils.isNotBlank(newSlaveId)) {\n+                    continue;\n+                }\n+\n+                params.add(new BasicNameValuePair(\"aid\", extImpAdocean.getSlaveId() + \":\" + impid));\n+\n+                final String url = HttpUtil.encodeUrl(String.valueOf(params));\n+                if (url.length() < MAX_URI_LENGTH) {\n+                    request.builder().uri(url);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String buildUrl(String impid, ExtImpAdocean extImpAdocean, String consentString, Integer test, User user) {\n+        final String url = endpointUrl.replace(\"{{Host}}\", extImpAdocean.getEmitterDomain());\n+        int randomizedPart = 10000000 + (int) (Math.random() * (99999999 - 10000000));\n+        if (test == 1) {\n+            randomizedPart = 10000000;\n+        }\n+\n+        final String updateUrl = String.format(\"%s%s%s%s\", url, \"/_\", randomizedPart, \"/ad.json\");\n+\n+        final List<String> params = new ArrayList<>();\n+        params.add(\"pbsrv_v=\" + VERSION);\n+        params.add(\"id=\" + extImpAdocean.getMasterId());\n+        params.add(\"nc=1\");\n+        params.add(\"nosecure=1\");\n+        params.add(\"aid=\" + extImpAdocean.getSlaveId() + \":\" + impid);\n+\n+        if (StringUtils.isNotBlank(consentString)) {\n+            params.add(\"gdpr_consent=\" + consentString);\n+            params.add(\"gdpr=1\");\n+        }\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            params.add(\"hcuserid=\" + user.getBuyeruid());\n+        }\n+\n+        final String urlParams = params.stream().sorted().collect(Collectors.joining(\"&\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQyMTkzNw==", "bodyText": "You still can use\nfinal URIBuilder uriBuilder = new URIBuilder(uri);\nfinal List<NameValuePair> queryParams = uriBuilder.getQueryParams();", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471421937", "createdAt": "2020-08-17T11:42:19Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequestAdded(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (final HttpRequest request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            try {\n+                params = URLEncodedUtils.parse(new URI(request.getUri()), StandardCharsets.UTF_8);\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final String masterId = params != null ? params.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null) : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = params.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])\n+                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                        .findFirst()\n+                        .orElse(null);\n+                if (StringUtils.isNotBlank(newSlaveId)) {\n+                    continue;\n+                }\n+\n+                params.add(new BasicNameValuePair(\"aid\", extImpAdocean.getSlaveId() + \":\" + impid));\n+\n+                final String url = HttpUtil.encodeUrl(String.valueOf(params));\n+                if (url.length() < MAX_URI_LENGTH) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQyMzAxMQ==", "bodyText": "If there are no method toBuilder(), you can't use builder().\nTry to gather all required information and then create normal HttpRequest from that, bc this code is not changing the uri in List", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471423011", "createdAt": "2020-08-17T11:44:21Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequestAdded(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (final HttpRequest request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            try {\n+                params = URLEncodedUtils.parse(new URI(request.getUri()), StandardCharsets.UTF_8);\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final String masterId = params != null ? params.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null) : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = params.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])\n+                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                        .findFirst()\n+                        .orElse(null);\n+                if (StringUtils.isNotBlank(newSlaveId)) {\n+                    continue;\n+                }\n+\n+                params.add(new BasicNameValuePair(\"aid\", extImpAdocean.getSlaveId() + \":\" + impid));\n+\n+                final String url = HttpUtil.encodeUrl(String.valueOf(params));\n+                if (url.length() < MAX_URI_LENGTH) {\n+                    request.builder().uri(url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQyODQ1NA==", "bodyText": "It can be constant and String", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471428454", "createdAt": "2020-08-17T11:55:47Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequestAdded(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (final HttpRequest request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            try {\n+                params = URLEncodedUtils.parse(new URI(request.getUri()), StandardCharsets.UTF_8);\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final String masterId = params != null ? params.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null) : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = params.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])\n+                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                        .findFirst()\n+                        .orElse(null);\n+                if (StringUtils.isNotBlank(newSlaveId)) {\n+                    continue;\n+                }\n+\n+                params.add(new BasicNameValuePair(\"aid\", extImpAdocean.getSlaveId() + \":\" + impid));\n+\n+                final String url = HttpUtil.encodeUrl(String.valueOf(params));\n+                if (url.length() < MAX_URI_LENGTH) {\n+                    request.builder().uri(url);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String buildUrl(String impid, ExtImpAdocean extImpAdocean, String consentString, Integer test, User user) {\n+        final String url = endpointUrl.replace(\"{{Host}}\", extImpAdocean.getEmitterDomain());\n+        int randomizedPart = 10000000 + (int) (Math.random() * (99999999 - 10000000));\n+        if (test == 1) {\n+            randomizedPart = 10000000;\n+        }\n+\n+        final String updateUrl = String.format(\"%s%s%s%s\", url, \"/_\", randomizedPart, \"/ad.json\");\n+\n+        final List<String> params = new ArrayList<>();\n+        params.add(\"pbsrv_v=\" + VERSION);\n+        params.add(\"id=\" + extImpAdocean.getMasterId());\n+        params.add(\"nc=1\");\n+        params.add(\"nosecure=1\");\n+        params.add(\"aid=\" + extImpAdocean.getSlaveId() + \":\" + impid);\n+\n+        if (StringUtils.isNotBlank(consentString)) {\n+            params.add(\"gdpr_consent=\" + consentString);\n+            params.add(\"gdpr=1\");\n+        }\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            params.add(\"hcuserid=\" + user.getBuyeruid());\n+        }\n+\n+        final String urlParams = params.stream().sorted().collect(Collectors.joining(\"&\"));\n+        return String.format(\"%s?%s\", updateUrl, urlParams);\n+    }\n+\n+    private static MultiMap getHeaders(BidRequest request) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (request.getDevice() != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER.toString(),\n+                    request.getDevice().getUa());\n+\n+            if (StringUtils.isNotBlank(request.getDevice().getIp())) {\n+                HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER,\n+                        request.getDevice().getIp());\n+            } else if (StringUtils.isNotBlank(request.getDevice().getIpv6())) {\n+                HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER,\n+                        request.getDevice().getIpv6());\n+            }\n+        }\n+\n+        if (request.getSite() != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, request.getSite().getPage());\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        List<NameValuePair> params;\n+        try {\n+            params = URLEncodedUtils.parse(new URI(httpCall.getRequest().getUri()), StandardCharsets.UTF_8);\n+        } catch (URISyntaxException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final Map<String, String> auctionIds = params != null ? params.stream()\n+                .filter(param -> param.getName().equals(\"aid\"))\n+                .map(param -> param.getValue().split(\":\"))\n+                .collect(Collectors.toMap(name -> name[0], value -> value[1])) : null;\n+        List<AdoceanResponseAdUnit> adoceanResponses;\n+        try {\n+            adoceanResponses = getAdoceanResponseAdUnitList(httpCall.getResponse().getBody());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Failed to decode: No content to map due to end-of-input\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (final AdoceanResponseAdUnit adoceanResponse : adoceanResponses) {\n+            if (adoceanResponse.getError().equals(\"true\")) {\n+                continue;\n+            }\n+\n+            if (auctionIds != null && StringUtils.isNotBlank(auctionIds.get(adoceanResponse.getId()))) {\n+                final BigDecimal price = new BigDecimal(adoceanResponse.getPrice());\n+                final Integer width = Integer.valueOf(adoceanResponse.getWidth());\n+                final Integer height = Integer.valueOf(adoceanResponse.getHeight());\n+\n+                final Bid updatedBid = Bid.builder()\n+                        .id(adoceanResponse.getId())\n+                        .impid(auctionIds.get(adoceanResponse.getId()))\n+                        .adm(getAdm(adoceanResponse))\n+                        .price(price)\n+                        .w(width)\n+                        .h(height)\n+                        .crid(adoceanResponse.getCrid())\n+                        .build();\n+\n+                final String bidCurrency = adoceanResponse.getCurrency() != null\n+                        ? adoceanResponse.getCurrency()\n+                        : DEFAULT_BID_CURRENCY;\n+                final BidderBid bidderBid = BidderBid.of(updatedBid, BidType.banner, bidCurrency);\n+                bidderBids.add(bidderBid);\n+            }\n+        }\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private List<AdoceanResponseAdUnit> getAdoceanResponseAdUnitList(String responseBody) {\n+        try {\n+            return mapper.mapper().readValue(\n+                    responseBody,\n+                    mapper.mapper().getTypeFactory().constructCollectionType(List.class, AdoceanResponseAdUnit.class));\n+        } catch (IOException ex) {\n+            throw new PreBidException(ex.getMessage());\n+        }\n+    }\n+\n+    private String getAdm(AdoceanResponseAdUnit adoceanResponse) {\n+        final StringBuilder measurementCode = new StringBuilder();\n+        measurementCode.append(\" <script>\")\n+                .append(\" +function() {\")\n+                .append(\" var wu = \\\"%s\\\";\")\n+                .append(\" var su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\")\n+                .append(\" if (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\")\n+                .append(\" (new Image(1,1)).src = wu\")\n+                .append(\" }\")\n+                .append(\" if (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\")\n+                .append(\" (new Image(1,1)).src = su\")\n+                .append(\" }\")\n+                .append(\" }();\")\n+                .append(\" </script> \");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQyODg0Nw==", "bodyText": "just bid. Not updated", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471428847", "createdAt": "2020-08-17T11:56:33Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequestAdded(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (final HttpRequest request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            try {\n+                params = URLEncodedUtils.parse(new URI(request.getUri()), StandardCharsets.UTF_8);\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final String masterId = params != null ? params.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null) : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = params.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])\n+                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                        .findFirst()\n+                        .orElse(null);\n+                if (StringUtils.isNotBlank(newSlaveId)) {\n+                    continue;\n+                }\n+\n+                params.add(new BasicNameValuePair(\"aid\", extImpAdocean.getSlaveId() + \":\" + impid));\n+\n+                final String url = HttpUtil.encodeUrl(String.valueOf(params));\n+                if (url.length() < MAX_URI_LENGTH) {\n+                    request.builder().uri(url);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String buildUrl(String impid, ExtImpAdocean extImpAdocean, String consentString, Integer test, User user) {\n+        final String url = endpointUrl.replace(\"{{Host}}\", extImpAdocean.getEmitterDomain());\n+        int randomizedPart = 10000000 + (int) (Math.random() * (99999999 - 10000000));\n+        if (test == 1) {\n+            randomizedPart = 10000000;\n+        }\n+\n+        final String updateUrl = String.format(\"%s%s%s%s\", url, \"/_\", randomizedPart, \"/ad.json\");\n+\n+        final List<String> params = new ArrayList<>();\n+        params.add(\"pbsrv_v=\" + VERSION);\n+        params.add(\"id=\" + extImpAdocean.getMasterId());\n+        params.add(\"nc=1\");\n+        params.add(\"nosecure=1\");\n+        params.add(\"aid=\" + extImpAdocean.getSlaveId() + \":\" + impid);\n+\n+        if (StringUtils.isNotBlank(consentString)) {\n+            params.add(\"gdpr_consent=\" + consentString);\n+            params.add(\"gdpr=1\");\n+        }\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            params.add(\"hcuserid=\" + user.getBuyeruid());\n+        }\n+\n+        final String urlParams = params.stream().sorted().collect(Collectors.joining(\"&\"));\n+        return String.format(\"%s?%s\", updateUrl, urlParams);\n+    }\n+\n+    private static MultiMap getHeaders(BidRequest request) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (request.getDevice() != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER.toString(),\n+                    request.getDevice().getUa());\n+\n+            if (StringUtils.isNotBlank(request.getDevice().getIp())) {\n+                HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER,\n+                        request.getDevice().getIp());\n+            } else if (StringUtils.isNotBlank(request.getDevice().getIpv6())) {\n+                HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER,\n+                        request.getDevice().getIpv6());\n+            }\n+        }\n+\n+        if (request.getSite() != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, request.getSite().getPage());\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        List<NameValuePair> params;\n+        try {\n+            params = URLEncodedUtils.parse(new URI(httpCall.getRequest().getUri()), StandardCharsets.UTF_8);\n+        } catch (URISyntaxException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final Map<String, String> auctionIds = params != null ? params.stream()\n+                .filter(param -> param.getName().equals(\"aid\"))\n+                .map(param -> param.getValue().split(\":\"))\n+                .collect(Collectors.toMap(name -> name[0], value -> value[1])) : null;\n+        List<AdoceanResponseAdUnit> adoceanResponses;\n+        try {\n+            adoceanResponses = getAdoceanResponseAdUnitList(httpCall.getResponse().getBody());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Failed to decode: No content to map due to end-of-input\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (final AdoceanResponseAdUnit adoceanResponse : adoceanResponses) {\n+            if (adoceanResponse.getError().equals(\"true\")) {\n+                continue;\n+            }\n+\n+            if (auctionIds != null && StringUtils.isNotBlank(auctionIds.get(adoceanResponse.getId()))) {\n+                final BigDecimal price = new BigDecimal(adoceanResponse.getPrice());\n+                final Integer width = Integer.valueOf(adoceanResponse.getWidth());\n+                final Integer height = Integer.valueOf(adoceanResponse.getHeight());\n+\n+                final Bid updatedBid = Bid.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQyOTY2MQ==", "bodyText": "redundant", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471429661", "createdAt": "2020-08-17T11:58:19Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequestAdded(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (final HttpRequest request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            try {\n+                params = URLEncodedUtils.parse(new URI(request.getUri()), StandardCharsets.UTF_8);\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final String masterId = params != null ? params.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null) : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = params.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])\n+                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                        .findFirst()\n+                        .orElse(null);\n+                if (StringUtils.isNotBlank(newSlaveId)) {\n+                    continue;\n+                }\n+\n+                params.add(new BasicNameValuePair(\"aid\", extImpAdocean.getSlaveId() + \":\" + impid));\n+\n+                final String url = HttpUtil.encodeUrl(String.valueOf(params));\n+                if (url.length() < MAX_URI_LENGTH) {\n+                    request.builder().uri(url);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String buildUrl(String impid, ExtImpAdocean extImpAdocean, String consentString, Integer test, User user) {\n+        final String url = endpointUrl.replace(\"{{Host}}\", extImpAdocean.getEmitterDomain());\n+        int randomizedPart = 10000000 + (int) (Math.random() * (99999999 - 10000000));\n+        if (test == 1) {\n+            randomizedPart = 10000000;\n+        }\n+\n+        final String updateUrl = String.format(\"%s%s%s%s\", url, \"/_\", randomizedPart, \"/ad.json\");\n+\n+        final List<String> params = new ArrayList<>();\n+        params.add(\"pbsrv_v=\" + VERSION);\n+        params.add(\"id=\" + extImpAdocean.getMasterId());\n+        params.add(\"nc=1\");\n+        params.add(\"nosecure=1\");\n+        params.add(\"aid=\" + extImpAdocean.getSlaveId() + \":\" + impid);\n+\n+        if (StringUtils.isNotBlank(consentString)) {\n+            params.add(\"gdpr_consent=\" + consentString);\n+            params.add(\"gdpr=1\");\n+        }\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            params.add(\"hcuserid=\" + user.getBuyeruid());\n+        }\n+\n+        final String urlParams = params.stream().sorted().collect(Collectors.joining(\"&\"));\n+        return String.format(\"%s?%s\", updateUrl, urlParams);\n+    }\n+\n+    private static MultiMap getHeaders(BidRequest request) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (request.getDevice() != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER.toString(),\n+                    request.getDevice().getUa());\n+\n+            if (StringUtils.isNotBlank(request.getDevice().getIp())) {\n+                HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER,\n+                        request.getDevice().getIp());\n+            } else if (StringUtils.isNotBlank(request.getDevice().getIpv6())) {\n+                HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER,\n+                        request.getDevice().getIpv6());\n+            }\n+        }\n+\n+        if (request.getSite() != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, request.getSite().getPage());\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        List<NameValuePair> params;\n+        try {\n+            params = URLEncodedUtils.parse(new URI(httpCall.getRequest().getUri()), StandardCharsets.UTF_8);\n+        } catch (URISyntaxException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final Map<String, String> auctionIds = params != null ? params.stream()\n+                .filter(param -> param.getName().equals(\"aid\"))\n+                .map(param -> param.getValue().split(\":\"))\n+                .collect(Collectors.toMap(name -> name[0], value -> value[1])) : null;\n+        List<AdoceanResponseAdUnit> adoceanResponses;\n+        try {\n+            adoceanResponses = getAdoceanResponseAdUnitList(httpCall.getResponse().getBody());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Failed to decode: No content to map due to end-of-input\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzMzU5OQ==", "bodyText": "final List<BidderError> errors = new ArrayList<>();\n        final List<BidderBid> bidderBids = adoceanResponses.stream()\n                .filter(adoceanResponse -> !adoceanResponse.getError().equals(\"true\"))\n                .filter(adoceanResponse -> auctionIds != null\n                        && StringUtils.isNotBlank(auctionIds.get(adoceanResponse.getId())))\n                .map(adoceanResponse -> BidderBid.of(createBid(auctionIds, adoceanResponse), BidType.banner,\n                        getBidCurrency(adoceanResponse)))\n                .collect(Collectors.toList());\n\n        return Result.of(bidderBids, errors);\n    }\n\n    private static Bid createBid(Map<String, String> auctionIds, AdoceanResponseAdUnit adoceanResponse) {\n        return Bid.builder()\n                .id(adoceanResponse.getId())\n                .impid(auctionIds.get(adoceanResponse.getId()))\n                .adm(getAdm(adoceanResponse))\n                .price(new BigDecimal(adoceanResponse.getPrice()))\n                .w(Integer.valueOf(adoceanResponse.getWidth()))\n                .h(Integer.valueOf(adoceanResponse.getHeight()))\n                .crid(adoceanResponse.getCrid())\n                .build();\n    }\n\n    private static String getBidCurrency(AdoceanResponseAdUnit adoceanResponse) {\n        return adoceanResponse.getCurrency() != null\n                ? adoceanResponse.getCurrency()\n                : DEFAULT_BID_CURRENCY;\n    }", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471433599", "createdAt": "2020-08-17T12:06:36Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequestAdded(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (final HttpRequest request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            try {\n+                params = URLEncodedUtils.parse(new URI(request.getUri()), StandardCharsets.UTF_8);\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final String masterId = params != null ? params.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null) : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = params.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])\n+                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                        .findFirst()\n+                        .orElse(null);\n+                if (StringUtils.isNotBlank(newSlaveId)) {\n+                    continue;\n+                }\n+\n+                params.add(new BasicNameValuePair(\"aid\", extImpAdocean.getSlaveId() + \":\" + impid));\n+\n+                final String url = HttpUtil.encodeUrl(String.valueOf(params));\n+                if (url.length() < MAX_URI_LENGTH) {\n+                    request.builder().uri(url);\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String buildUrl(String impid, ExtImpAdocean extImpAdocean, String consentString, Integer test, User user) {\n+        final String url = endpointUrl.replace(\"{{Host}}\", extImpAdocean.getEmitterDomain());\n+        int randomizedPart = 10000000 + (int) (Math.random() * (99999999 - 10000000));\n+        if (test == 1) {\n+            randomizedPart = 10000000;\n+        }\n+\n+        final String updateUrl = String.format(\"%s%s%s%s\", url, \"/_\", randomizedPart, \"/ad.json\");\n+\n+        final List<String> params = new ArrayList<>();\n+        params.add(\"pbsrv_v=\" + VERSION);\n+        params.add(\"id=\" + extImpAdocean.getMasterId());\n+        params.add(\"nc=1\");\n+        params.add(\"nosecure=1\");\n+        params.add(\"aid=\" + extImpAdocean.getSlaveId() + \":\" + impid);\n+\n+        if (StringUtils.isNotBlank(consentString)) {\n+            params.add(\"gdpr_consent=\" + consentString);\n+            params.add(\"gdpr=1\");\n+        }\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            params.add(\"hcuserid=\" + user.getBuyeruid());\n+        }\n+\n+        final String urlParams = params.stream().sorted().collect(Collectors.joining(\"&\"));\n+        return String.format(\"%s?%s\", updateUrl, urlParams);\n+    }\n+\n+    private static MultiMap getHeaders(BidRequest request) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (request.getDevice() != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER.toString(),\n+                    request.getDevice().getUa());\n+\n+            if (StringUtils.isNotBlank(request.getDevice().getIp())) {\n+                HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER,\n+                        request.getDevice().getIp());\n+            } else if (StringUtils.isNotBlank(request.getDevice().getIpv6())) {\n+                HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER,\n+                        request.getDevice().getIpv6());\n+            }\n+        }\n+\n+        if (request.getSite() != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, request.getSite().getPage());\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        List<NameValuePair> params;\n+        try {\n+            params = URLEncodedUtils.parse(new URI(httpCall.getRequest().getUri()), StandardCharsets.UTF_8);\n+        } catch (URISyntaxException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final Map<String, String> auctionIds = params != null ? params.stream()\n+                .filter(param -> param.getName().equals(\"aid\"))\n+                .map(param -> param.getValue().split(\":\"))\n+                .collect(Collectors.toMap(name -> name[0], value -> value[1])) : null;\n+        List<AdoceanResponseAdUnit> adoceanResponses;\n+        try {\n+            adoceanResponses = getAdoceanResponseAdUnitList(httpCall.getResponse().getBody());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Failed to decode: No content to map due to end-of-input\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (final AdoceanResponseAdUnit adoceanResponse : adoceanResponses) {\n+            if (adoceanResponse.getError().equals(\"true\")) {\n+                continue;\n+            }\n+\n+            if (auctionIds != null && StringUtils.isNotBlank(auctionIds.get(adoceanResponse.getId()))) {\n+                final BigDecimal price = new BigDecimal(adoceanResponse.getPrice());\n+                final Integer width = Integer.valueOf(adoceanResponse.getWidth());\n+                final Integer height = Integer.valueOf(adoceanResponse.getHeight());\n+\n+                final Bid updatedBid = Bid.builder()\n+                        .id(adoceanResponse.getId())\n+                        .impid(auctionIds.get(adoceanResponse.getId()))\n+                        .adm(getAdm(adoceanResponse))\n+                        .price(price)\n+                        .w(width)\n+                        .h(height)\n+                        .crid(adoceanResponse.getCrid())\n+                        .build();\n+\n+                final String bidCurrency = adoceanResponse.getCurrency() != null\n+                        ? adoceanResponse.getCurrency()\n+                        : DEFAULT_BID_CURRENCY;\n+                final BidderBid bidderBid = BidderBid.of(updatedBid, BidType.banner, bidCurrency);\n+                bidderBids.add(bidderBid);\n+            }\n+        }\n+        return Result.of(bidderBids, errors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNDMyMQ==", "bodyText": "Set is redundant", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471434321", "createdAt": "2020-08-17T12:08:09Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adocean/AdoceanBidderTest.java", "diffHunk": "@@ -0,0 +1,380 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.smartrtb.SmartrtbBidder;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static java.util.Arrays.asList;\n+\n+public class AdoceanBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}\";\n+\n+    private AdoceanBidder adoceanBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adoceanBidder = new AdoceanBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> new SmartrtbBidder(\"invalid_url\", jacksonMapper))\n+                .withMessage(\"URL supplied is not valid: invalid_url\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No impression in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetReturnErrorIfRequestExists() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNTczNQ==", "bodyText": "Does Banner and User is really necessary for this test ?\nAlso use codeStyle like this\n   Imp.builder()\n                                .id(\"ao-test\")\n                                .ext(mapper.valueToTree(ExtPrebid.of(null,\n                                        ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n                                                \"adoceanmyaozpniqis\"))))\n                                .build()))", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471435735", "createdAt": "2020-08-17T12:11:10Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adocean/AdoceanBidderTest.java", "diffHunk": "@@ -0,0 +1,380 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.smartrtb.SmartrtbBidder;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static java.util.Arrays.asList;\n+\n+public class AdoceanBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}\";\n+\n+    private AdoceanBidder adoceanBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adoceanBidder = new AdoceanBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> new SmartrtbBidder(\"invalid_url\", jacksonMapper))\n+                .withMessage(\"URL supplied is not valid: invalid_url\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No impression in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetReturnErrorIfRequestExists() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.\"\n+                                        + \"IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAA\"\n+                                        + \"AFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(asList(Imp.builder()\n+                                .id(\"ao-test\")\n+                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNjAyMA==", "bodyText": "Same as above", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471436020", "createdAt": "2020-08-17T12:11:45Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adocean/AdoceanBidderTest.java", "diffHunk": "@@ -0,0 +1,380 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.smartrtb.SmartrtbBidder;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static java.util.Arrays.asList;\n+\n+public class AdoceanBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}\";\n+\n+    private AdoceanBidder adoceanBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adoceanBidder = new AdoceanBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> new SmartrtbBidder(\"invalid_url\", jacksonMapper))\n+                .withMessage(\"URL supplied is not valid: invalid_url\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No impression in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetReturnErrorIfRequestExists() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.\"\n+                                        + \"IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAA\"\n+                                        + \"AFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(asList(Imp.builder()\n+                                .id(\"ao-test\")\n+                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build(),\n+                        Imp.builder()\n+                                .id(\"ao-test\")\n+                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqis\")))).build()))\n+                .test(1)\n+\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Request already exists\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedRequestUrl() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAAC\"\n+                                        + \"AIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgA\"\n+                                        + \"AAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"ao-test\")\n+                        .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNjU3Mw==", "bodyText": "Same as above", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471436573", "createdAt": "2020-08-17T12:12:58Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adocean/AdoceanBidderTest.java", "diffHunk": "@@ -0,0 +1,380 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.smartrtb.SmartrtbBidder;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static java.util.Arrays.asList;\n+\n+public class AdoceanBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}\";\n+\n+    private AdoceanBidder adoceanBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adoceanBidder = new AdoceanBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> new SmartrtbBidder(\"invalid_url\", jacksonMapper))\n+                .withMessage(\"URL supplied is not valid: invalid_url\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No impression in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetReturnErrorIfRequestExists() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.\"\n+                                        + \"IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAA\"\n+                                        + \"AFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(asList(Imp.builder()\n+                                .id(\"ao-test\")\n+                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build(),\n+                        Imp.builder()\n+                                .id(\"ao-test\")\n+                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqis\")))).build()))\n+                .test(1)\n+\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Request already exists\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedRequestUrl() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAAC\"\n+                                        + \"AIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgA\"\n+                                        + \"AAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"ao-test\")\n+                        .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build()))\n+                .test(1)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(HttpRequest::getUri)\n+                .containsOnly(\"https://myao.adocean.pl/_10000000/ad.json?aid=adoceanmyaozpniqismex:ao-test&gdpr=1&gdpr_consent=COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw&id=tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7&nc=1&nosecure=1&pbsrv_v=1.0.0\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedHeadersIfDeviceIpIsPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAAC\"\n+                                        + \"AIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAg\"\n+                                        + \"AAAYQEAAAQmAgBC3ZAYzUw\").build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNjY2Mg==", "bodyText": "Same as above", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471436662", "createdAt": "2020-08-17T12:13:11Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adocean/AdoceanBidderTest.java", "diffHunk": "@@ -0,0 +1,380 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.smartrtb.SmartrtbBidder;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static java.util.Arrays.asList;\n+\n+public class AdoceanBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}\";\n+\n+    private AdoceanBidder adoceanBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adoceanBidder = new AdoceanBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> new SmartrtbBidder(\"invalid_url\", jacksonMapper))\n+                .withMessage(\"URL supplied is not valid: invalid_url\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No impression in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetReturnErrorIfRequestExists() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.\"\n+                                        + \"IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAA\"\n+                                        + \"AFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(asList(Imp.builder()\n+                                .id(\"ao-test\")\n+                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build(),\n+                        Imp.builder()\n+                                .id(\"ao-test\")\n+                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqis\")))).build()))\n+                .test(1)\n+\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Request already exists\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedRequestUrl() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAAC\"\n+                                        + \"AIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgA\"\n+                                        + \"AAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"ao-test\")\n+                        .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build()))\n+                .test(1)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(HttpRequest::getUri)\n+                .containsOnly(\"https://myao.adocean.pl/_10000000/ad.json?aid=adoceanmyaozpniqismex:ao-test&gdpr=1&gdpr_consent=COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw&id=tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7&nc=1&nosecure=1&pbsrv_v=1.0.0\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedHeadersIfDeviceIpIsPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAAC\"\n+                                        + \"AIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAg\"\n+                                        + \"AAAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"ao-test\")\n+                        .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                .id(\"banner_id\").build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build()))\n+                .test(1)\n+                .device(Device.builder().ip(\"192.168.1.1\").build())\n+                .site(Site.builder().page(\"http://www.example.com\").build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .containsOnly(tuple(HttpUtil.CONTENT_TYPE_HEADER.toString(), HttpUtil.APPLICATION_JSON_CONTENT_TYPE),\n+                        tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()),\n+                        tuple(HttpUtil.X_FORWARDED_FOR_HEADER.toString(), \"192.168.1.1\"),\n+                        tuple(HttpUtil.REFERER_HEADER.toString(), \"http://www.example.com\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedHeadersIfDeviceIpv6IsPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAACA\"\n+                                        + \"IAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgAA\"\n+                                        + \"AYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"ao-test\")\n+                        .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build()))\n+                .test(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzODIzNw==", "bodyText": "\":\" - is illegal parameter for URL (encode it)\nOr use URLBuilder", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471438237", "createdAt": "2020-08-17T12:16:26Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,293 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                httpRequests.add(createSingleRequest(httpRequests, request, imp, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(List<HttpRequest<Void>> httpRequests, BidRequest request, Imp imp,\n+                                                  String consentString) {\n+        final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+\n+        if (isRequestAdded(httpRequests, extImpAdocean, imp.getId())) {\n+            throw new PreBidException(\"Request already exists\");\n+        }\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .body(null)\n+                .headers(getHeaders(request))\n+                .payload(null)\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequestAdded(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (final HttpRequest request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            try {\n+                params = URLEncodedUtils.parse(new URI(request.getUri()), StandardCharsets.UTF_8);\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final String masterId = params != null ? params.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null) : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = params.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzODg3NA==", "bodyText": "\\n", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471438874", "createdAt": "2020-08-17T12:17:45Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adocean/AdoceanBidderTest.java", "diffHunk": "@@ -0,0 +1,380 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.smartrtb.SmartrtbBidder;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static java.util.Arrays.asList;\n+\n+public class AdoceanBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}\";\n+\n+    private AdoceanBidder adoceanBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adoceanBidder = new AdoceanBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> new SmartrtbBidder(\"invalid_url\", jacksonMapper))\n+                .withMessage(\"URL supplied is not valid: invalid_url\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No impression in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetReturnErrorIfRequestExists() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.\"\n+                                        + \"IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAA\"\n+                                        + \"AFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(asList(Imp.builder()\n+                                .id(\"ao-test\")\n+                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build(),\n+                        Imp.builder()\n+                                .id(\"ao-test\")\n+                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqis\")))).build()))\n+                .test(1)\n+\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Request already exists\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedRequestUrl() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAAC\"\n+                                        + \"AIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgA\"\n+                                        + \"AAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"ao-test\")\n+                        .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build()))\n+                .test(1)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(HttpRequest::getUri)\n+                .containsOnly(\"https://myao.adocean.pl/_10000000/ad.json?aid=adoceanmyaozpniqismex:ao-test&gdpr=1&gdpr_consent=COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw&id=tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7&nc=1&nosecure=1&pbsrv_v=1.0.0\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedHeadersIfDeviceIpIsPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAAC\"\n+                                        + \"AIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAg\"\n+                                        + \"AAAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"ao-test\")\n+                        .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                .id(\"banner_id\").build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build()))\n+                .test(1)\n+                .device(Device.builder().ip(\"192.168.1.1\").build())\n+                .site(Site.builder().page(\"http://www.example.com\").build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .containsOnly(tuple(HttpUtil.CONTENT_TYPE_HEADER.toString(), HttpUtil.APPLICATION_JSON_CONTENT_TYPE),\n+                        tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()),\n+                        tuple(HttpUtil.X_FORWARDED_FOR_HEADER.toString(), \"192.168.1.1\"),\n+                        tuple(HttpUtil.REFERER_HEADER.toString(), \"http://www.example.com\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedHeadersIfDeviceIpv6IsPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAACA\"\n+                                        + \"IAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgAA\"\n+                                        + \"AYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"ao-test\")\n+                        .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build()))\n+                .test(1)\n+                .device(Device.builder().ipv6(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\").build())\n+                .site(Site.builder().page(\"http://www.example.com\").build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .containsOnly(tuple(HttpUtil.CONTENT_TYPE_HEADER.toString(), HttpUtil.APPLICATION_JSON_CONTENT_TYPE),\n+                        tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()),\n+                        tuple(HttpUtil.X_FORWARDED_FOR_HEADER.toString(), \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"),\n+                        tuple(HttpUtil.REFERER_HEADER.toString(), \"http://www.example.com\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<Void> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = adoceanBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseStatusIsNotOk() {\n+        // given\n+        final HttpCall<Void> httpCall = HttpCall\n+                .success(null, HttpResponse.of(404, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = adoceanBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Unexpected HTTP status 404.\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseStatusIsBadRequest() {\n+        // given\n+        final HttpCall<Void> httpCall = HttpCall\n+                .success(null, HttpResponse.of(400, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = adoceanBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Invalid request.\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_input);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<Void> httpCall = givenHttpCall(null, \"\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = adoceanBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"Failed to decode: No content to map due to end-of-input\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnCorrectBidderBid() throws JsonProcessingException {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"impId\")\n+                        .build()))\n+                .build();\n+\n+        final List<AdoceanResponseAdUnit> adoceanResponseAdUnit = asList(AdoceanResponseAdUnit.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzOTM4Mw==", "bodyText": "Add test on .error(\"true\")", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r471439383", "createdAt": "2020-08-17T12:18:45Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adocean/AdoceanBidderTest.java", "diffHunk": "@@ -0,0 +1,380 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.smartrtb.SmartrtbBidder;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static java.util.Arrays.asList;\n+\n+public class AdoceanBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}\";\n+\n+    private AdoceanBidder adoceanBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adoceanBidder = new AdoceanBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> new SmartrtbBidder(\"invalid_url\", jacksonMapper))\n+                .withMessage(\"URL supplied is not valid: invalid_url\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No impression in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetReturnErrorIfRequestExists() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.\"\n+                                        + \"IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAA\"\n+                                        + \"AFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(asList(Imp.builder()\n+                                .id(\"ao-test\")\n+                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build(),\n+                        Imp.builder()\n+                                .id(\"ao-test\")\n+                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqis\")))).build()))\n+                .test(1)\n+\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Request already exists\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedRequestUrl() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAAC\"\n+                                        + \"AIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgA\"\n+                                        + \"AAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"ao-test\")\n+                        .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build()))\n+                .test(1)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(HttpRequest::getUri)\n+                .containsOnly(\"https://myao.adocean.pl/_10000000/ad.json?aid=adoceanmyaozpniqismex:ao-test&gdpr=1&gdpr_consent=COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw&id=tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7&nc=1&nosecure=1&pbsrv_v=1.0.0\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedHeadersIfDeviceIpIsPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAAC\"\n+                                        + \"AIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAg\"\n+                                        + \"AAAYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"ao-test\")\n+                        .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                .id(\"banner_id\").build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build()))\n+                .test(1)\n+                .device(Device.builder().ip(\"192.168.1.1\").build())\n+                .site(Site.builder().page(\"http://www.example.com\").build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .containsOnly(tuple(HttpUtil.CONTENT_TYPE_HEADER.toString(), HttpUtil.APPLICATION_JSON_CONTENT_TYPE),\n+                        tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()),\n+                        tuple(HttpUtil.X_FORWARDED_FOR_HEADER.toString(), \"192.168.1.1\"),\n+                        tuple(HttpUtil.REFERER_HEADER.toString(), \"http://www.example.com\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetExpectedHeadersIfDeviceIpv6IsPresent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .user(User.builder()\n+                        .ext(ExtUser.builder()\n+                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAACA\"\n+                                        + \"IAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgAA\"\n+                                        + \"AYQEAAAQmAgBC3ZAYzUw\").build())\n+                        .build())\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"ao-test\")\n+                        .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n+                                .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n+                                        \"adoceanmyaozpniqismex\")))).build()))\n+                .test(1)\n+                .device(Device.builder().ipv6(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\").build())\n+                .site(Site.builder().page(\"http://www.example.com\").build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .containsOnly(tuple(HttpUtil.CONTENT_TYPE_HEADER.toString(), HttpUtil.APPLICATION_JSON_CONTENT_TYPE),\n+                        tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()),\n+                        tuple(HttpUtil.X_FORWARDED_FOR_HEADER.toString(), \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"),\n+                        tuple(HttpUtil.REFERER_HEADER.toString(), \"http://www.example.com\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<Void> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = adoceanBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseStatusIsNotOk() {\n+        // given\n+        final HttpCall<Void> httpCall = HttpCall\n+                .success(null, HttpResponse.of(404, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = adoceanBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Unexpected HTTP status 404.\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseStatusIsBadRequest() {\n+        // given\n+        final HttpCall<Void> httpCall = HttpCall\n+                .success(null, HttpResponse.of(400, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = adoceanBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Invalid request.\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_input);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<Void> httpCall = givenHttpCall(null, \"\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = adoceanBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"Failed to decode: No content to map due to end-of-input\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnCorrectBidderBid() throws JsonProcessingException {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"impId\")\n+                        .build()))\n+                .build();\n+\n+        final List<AdoceanResponseAdUnit> adoceanResponseAdUnit = asList(AdoceanResponseAdUnit.builder()\n+                .id(\"adoceanmyaozpniqismex\")\n+                .price(\"1\")\n+                .winUrl(\"https://win-url.com\")\n+                .statsUrl(\"https://stats-url.com\")\n+                .code(\" <!-- code 1 --> \")\n+                .currency(\"EUR\")\n+                .width(\"300\")\n+                .height(\"250\")\n+                .crid(\"0af345b42983cc4bc0\")\n+                .error(\"false\")\n+                .build(),\n+                AdoceanResponseAdUnit.builder()\n+                        .id(\"adoceanmyaozpniqis\")\n+                        .price(\"1\")\n+                        .winUrl(\"https://win-url.com\")\n+                        .statsUrl(\"https://stats-url.com\")\n+                        .code(\" <!-- code 1 --> \")\n+                        .currency(\"EUR\")\n+                        .width(\"300\")\n+                        .height(\"250\")\n+                        .crid(\"0af345b42983cc4bc0\")\n+                        .error(\"false\")\n+                        .build());\n+\n+        final HttpCall<Void> httpCall = givenHttpCall(null, mapper.writeValueAsString(adoceanResponseAdUnit));\n+\n+        // when\n+        final Result<List<BidderBid>> result = adoceanBidder.makeBids(httpCall, bidRequest);\n+\n+        // then\n+        final StringBuilder admBuilder = new StringBuilder();\n+        admBuilder.append(\" <script>\")\n+                .append(\" +function() {\")\n+                .append(\" var wu = \\\"https://win-url.com\\\";\")\n+                .append(\" var su = \\\"https://stats-url.com\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\")\n+                .append(\" if (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\")\n+                .append(\" (new Image(1,1)).src = wu\")\n+                .append(\" }\")\n+                .append(\" if (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\")\n+                .append(\" (new Image(1,1)).src = su\")\n+                .append(\" }\")\n+                .append(\" }();\")\n+                .append(\" </script> \")\n+                .append(\" <!-- code 1 --> \");\n+        final String adm = admBuilder.toString();\n+\n+        final BidderBid expected = BidderBid.of(\n+                Bid.builder()\n+                        .id(\"adoceanmyaozpniqismex\")\n+                        .impid(\"ao-test\")\n+                        .adm(adm)\n+                        .price(BigDecimal.valueOf(1))\n+                        .crid(\"0af345b42983cc4bc0\")\n+                        .w(300)\n+                        .h(250)\n+                        .build(),\n+                BidType.banner, \"EUR\");\n+        assertThat(result.getValue().get(0).getBid().getAdm()).isEqualTo(adm);\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).doesNotContainNull().hasSize(1).element(0).isEqualTo(expected);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2673bb0c559fb39cbc370ffa5dc18e17416721f0"}, "originalPosition": 349}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/6248def17bb8c54cff52580baf0e43371a0181fa", "committedDate": "2020-08-18T16:29:32Z", "message": "Refactoring after review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNDc1NDY5", "url": "https://github.com/prebid/prebid-server-java/pull/777#pullrequestreview-470475469", "createdAt": "2020-08-19T13:48:32Z", "commit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzo0ODozMlrOHDIRUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoxNToyOVrOHDJdiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0MzI4Mw==", "bodyText": "you can remove all \\t and \\n and keep spaces that it was still syntactically correct. (You can check GO)", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473043283", "createdAt": "2020-08-19T13:48:32Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String MEASUREMENT_CODE = \"<script>\\n\"\n+            + \"\\t\\t+function() {\\n\"\n+            + \"\\t\\t\\tvar wu = \\\"%s\\\";\\n\"\n+            + \"\\t\\t\\tvar su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\t\\t}();\\n\"\n+            + \"\\t</script>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0NjU5Nw==", "bodyText": "replace name to addRequestAndCheckIfDuplicates", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473046597", "createdAt": "2020-08-19T13:53:13Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String MEASUREMENT_CODE = \"<script>\\n\"\n+            + \"\\t\\t+function() {\\n\"\n+            + \"\\t\\t\\tvar wu = \\\"%s\\\";\\n\"\n+            + \"\\t\\t\\tvar su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\t\\t}();\\n\"\n+            + \"\\t</script>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+                if (isRequest(httpRequests, extImpAdocean, imp.getId())) {\n+                    continue;\n+                }\n+                httpRequests.add(createSingleRequest(request, imp, extImpAdocean, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(BidRequest request, Imp imp, ExtImpAdocean extImpAdocean,\n+                                                  String consentString) {\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .headers(getHeaders(request))\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequest(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0NzY5Mw==", "bodyText": "expand catch block to include depending code. (Put this into end of the method)\nThrow exception in case of an error, not just print it", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473047693", "createdAt": "2020-08-19T13:54:50Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String MEASUREMENT_CODE = \"<script>\\n\"\n+            + \"\\t\\t+function() {\\n\"\n+            + \"\\t\\t\\tvar wu = \\\"%s\\\";\\n\"\n+            + \"\\t\\t\\tvar su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\t\\t}();\\n\"\n+            + \"\\t</script>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+                if (isRequest(httpRequests, extImpAdocean, imp.getId())) {\n+                    continue;\n+                }\n+                httpRequests.add(createSingleRequest(request, imp, extImpAdocean, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(BidRequest request, Imp imp, ExtImpAdocean extImpAdocean,\n+                                                  String consentString) {\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .headers(getHeaders(request))\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequest(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (HttpRequest<Void> request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            URIBuilder uriBuilder = null;\n+            try {\n+                uriBuilder = new URIBuilder(request.getUri());\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0OTQ5Nw==", "bodyText": "Put methods by call ordering. (how they was called in code)", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473049497", "createdAt": "2020-08-19T13:56:59Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String MEASUREMENT_CODE = \"<script>\\n\"\n+            + \"\\t\\t+function() {\\n\"\n+            + \"\\t\\t\\tvar wu = \\\"%s\\\";\\n\"\n+            + \"\\t\\t\\tvar su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\t\\t}();\\n\"\n+            + \"\\t</script>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+                if (isRequest(httpRequests, extImpAdocean, imp.getId())) {\n+                    continue;\n+                }\n+                httpRequests.add(createSingleRequest(request, imp, extImpAdocean, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(BidRequest request, Imp imp, ExtImpAdocean extImpAdocean,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0OTgxNw==", "bodyText": "You don't really need this", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473049817", "createdAt": "2020-08-19T13:57:25Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String MEASUREMENT_CODE = \"<script>\\n\"\n+            + \"\\t\\t+function() {\\n\"\n+            + \"\\t\\t\\tvar wu = \\\"%s\\\";\\n\"\n+            + \"\\t\\t\\tvar su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\t\\t}();\\n\"\n+            + \"\\t</script>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA1MTc0Mw==", "bodyText": "99999999 - 10000000 = 89999999", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473051743", "createdAt": "2020-08-19T14:00:01Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String MEASUREMENT_CODE = \"<script>\\n\"\n+            + \"\\t\\t+function() {\\n\"\n+            + \"\\t\\t\\tvar wu = \\\"%s\\\";\\n\"\n+            + \"\\t\\t\\tvar su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\t\\t}();\\n\"\n+            + \"\\t</script>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+                if (isRequest(httpRequests, extImpAdocean, imp.getId())) {\n+                    continue;\n+                }\n+                httpRequests.add(createSingleRequest(request, imp, extImpAdocean, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(BidRequest request, Imp imp, ExtImpAdocean extImpAdocean,\n+                                                  String consentString) {\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .headers(getHeaders(request))\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequest(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (HttpRequest<Void> request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            URIBuilder uriBuilder = null;\n+            try {\n+                uriBuilder = new URIBuilder(request.getUri());\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final List<NameValuePair> queryParams = uriBuilder != null ? uriBuilder.getQueryParams() : null;\n+\n+            final String masterId = queryParams != null\n+                    ? queryParams.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null)\n+                    : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = queryParams.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])\n+                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                        .findFirst()\n+                        .orElse(null);\n+                if (StringUtils.isNotBlank(newSlaveId)) {\n+                    continue;\n+                }\n+\n+                final String url = HttpUtil.encodeUrl(String.valueOf(params));\n+                if (url.length() < MAX_URI_LENGTH) {\n+                    return true;\n+                }\n+                queryParams.add(new BasicNameValuePair(\"aid\", extImpAdocean.getSlaveId() + \":\" + impid));\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String buildUrl(String impid, ExtImpAdocean extImpAdocean, String consentString, Integer test, User user) {\n+        final String url = endpointUrl.replace(\"{{Host}}\", extImpAdocean.getEmitterDomain());\n+        int randomizedPart = 10000000 + (int) (Math.random() * (99999999 - 10000000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA1Mjg3NA==", "bodyText": "you car replace this using ? :", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473052874", "createdAt": "2020-08-19T14:01:36Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String MEASUREMENT_CODE = \"<script>\\n\"\n+            + \"\\t\\t+function() {\\n\"\n+            + \"\\t\\t\\tvar wu = \\\"%s\\\";\\n\"\n+            + \"\\t\\t\\tvar su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\t\\t}();\\n\"\n+            + \"\\t</script>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<Void>> httpRequests = new ArrayList<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdocean extImpAdocean = parseImpExt(imp);\n+                if (isRequest(httpRequests, extImpAdocean, imp.getId())) {\n+                    continue;\n+                }\n+                httpRequests.add(createSingleRequest(request, imp, extImpAdocean, consentString));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private HttpRequest<Void> createSingleRequest(BidRequest request, Imp imp, ExtImpAdocean extImpAdocean,\n+                                                  String consentString) {\n+\n+        return HttpRequest.<Void>builder()\n+                .method(HttpMethod.GET)\n+                .uri(buildUrl(imp.getId(), extImpAdocean, consentString, request.getTest(), request.getUser()))\n+                .headers(getHeaders(request))\n+                .build();\n+    }\n+\n+    private ExtImpAdocean parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADOCEAN_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isRequest(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+        for (HttpRequest<Void> request : httpRequests) {\n+            List<NameValuePair> params = null;\n+            URIBuilder uriBuilder = null;\n+            try {\n+                uriBuilder = new URIBuilder(request.getUri());\n+            } catch (URISyntaxException e) {\n+                e.printStackTrace();\n+            }\n+            final List<NameValuePair> queryParams = uriBuilder != null ? uriBuilder.getQueryParams() : null;\n+\n+            final String masterId = queryParams != null\n+                    ? queryParams.stream()\n+                    .filter(param -> param.getName().equals(\"id\"))\n+                    .findFirst()\n+                    .map(NameValuePair::getValue)\n+                    .orElse(null)\n+                    : null;\n+\n+            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n+                final String newSlaveId = queryParams.stream()\n+                        .filter(param -> param.getName().equals(\"aid\"))\n+                        .map(param -> param.getValue().split(\":\")[0])\n+                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                        .findFirst()\n+                        .orElse(null);\n+                if (StringUtils.isNotBlank(newSlaveId)) {\n+                    continue;\n+                }\n+\n+                final String url = HttpUtil.encodeUrl(String.valueOf(params));\n+                if (url.length() < MAX_URI_LENGTH) {\n+                    return true;\n+                }\n+                queryParams.add(new BasicNameValuePair(\"aid\", extImpAdocean.getSlaveId() + \":\" + impid));\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String buildUrl(String impid, ExtImpAdocean extImpAdocean, String consentString, Integer test, User user) {\n+        final String url = endpointUrl.replace(\"{{Host}}\", extImpAdocean.getEmitterDomain());\n+        int randomizedPart = 10000000 + (int) (Math.random() * (99999999 - 10000000));\n+        if (test != null && test == 1) {\n+            randomizedPart = 10000000;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2MTEzNw==", "bodyText": "This test is still cover use case. Just rename it to\nmakeHttpRequestsShouldSetReturnErrorIfRequestIsDuplicate", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473061137", "createdAt": "2020-08-19T14:13:13Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adocean/AdoceanBidderTest.java", "diffHunk": "@@ -88,56 +89,19 @@ public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n         assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n     }\n \n-    @Test\n-    public void makeHttpRequestsShouldSetReturnErrorIfRequestExists() {\n-        // given\n-        final BidRequest bidRequest = BidRequest.builder()\n-                .user(User.builder()\n-                        .ext(ExtUser.builder()\n-                                .consent(\"COwK6gaOwK6gaFmAAAENAPCAAAAAAAAAAAAAAAAAAAAA.\"\n-                                        + \"IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAA\"\n-                                        + \"AFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw\").build())\n-                        .build())\n-                .imp(asList(Imp.builder()\n-                                .id(\"ao-test\")\n-                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n-                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n-                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n-                                        \"adoceanmyaozpniqismex\")))).build(),\n-                        Imp.builder()\n-                                .id(\"ao-test\")\n-                                .banner(Banner.builder().format(singletonList(Format.builder().w(300).h(250).build()))\n-                                        .id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n-                                ExtImpAdocean.of(\"myao.adocean.pl\", \"tmYF.DMl7ZBq.Nqt2Bq4FutQTJfTpxCOmtNPZoQUDcL.G7\",\n-                                        \"adoceanmyaozpniqis\")))).build()))\n-                .test(1)\n-\n-                .build();\n-\n-        // when\n-        final Result<List<HttpRequest<Void>>> result = adoceanBidder.makeHttpRequests(bidRequest);\n-\n-        // then\n-        assertThat(result.getErrors()).hasSize(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2MjA0Ng==", "bodyText": "Redundant.\nPls check variables usage. If they are grey in IDE they are not used", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473062046", "createdAt": "2020-08-19T14:14:27Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adocean/AdoceanBidderTest.java", "diffHunk": "@@ -347,6 +308,76 @@ public void makeBidsShouldReturnCorrectBidderBid() throws JsonProcessingExceptio\n         assertThat(result.getValue()).doesNotContainNull().hasSize(1).element(0).isEqualTo(expected);\n     }\n \n+    @Test\n+    public void makeBidsShouldReturnEmptyListOfBids() throws JsonProcessingException {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"impId\")\n+                        .build()))\n+                .build();\n+        final List<AdoceanResponseAdUnit> adoceanResponseAdUnit = asList(AdoceanResponseAdUnit.builder()\n+                        .id(\"ad\")\n+                        .price(\"1\")\n+                        .winUrl(\"https://win-url.com\")\n+                        .statsUrl(\"https://stats-url.com\")\n+                        .code(\" <!-- code 1 --> \")\n+                        .currency(\"EUR\")\n+                        .width(\"300\")\n+                        .height(\"250\")\n+                        .crid(\"0af345b42983cc4bc0\")\n+                        .error(\"true\")\n+                        .build(),\n+                AdoceanResponseAdUnit.builder()\n+                        .id(\"adoceanmyaozpniqis\")\n+                        .price(\"1\")\n+                        .winUrl(\"https://win-url.com\")\n+                        .statsUrl(\"https://stats-url.com\")\n+                        .code(\" <!-- code 1 --> \")\n+                        .currency(\"EUR\")\n+                        .width(\"300\")\n+                        .height(\"250\")\n+                        .crid(\"0af345b42983cc4bc0\")\n+                        .error(\"false\")\n+                        .build());\n+\n+        final HttpCall<Void> httpCall = givenHttpCall(null, mapper.writeValueAsString(adoceanResponseAdUnit));\n+\n+        // when\n+        final Result<List<BidderBid>> result = adoceanBidder.makeBids(httpCall, bidRequest);\n+\n+        // then\n+        final String adm = \"<script>\\n\"\n+                + \"\\t\\t+function() {\\n\"\n+                + \"\\t\\t\\tvar wu = \\\"https://win-url.com\\\";\\n\"\n+                + \"\\t\\t\\tvar su = \\\"https://stats-url.com\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n+                + \"\\n\"\n+                + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n+                + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n+                + \"\\t\\t\\t}\\n\"\n+                + \"\\n\"\n+                + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n+                + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n+                + \"\\t\\t\\t}\\n\"\n+                + \"\\t\\t}();\\n\"\n+                + \"\\t</script> <!-- code 1 --> \";\n+\n+        final BidderBid expected = BidderBid.of(\n+                Bid.builder()\n+                        .id(\"ad\")\n+                        .impid(\"ao-test\")\n+                        .adm(adm)\n+                        .price(BigDecimal.valueOf(1))\n+                        .crid(\"0af345b42983cc4bc0\")\n+                        .w(300)\n+                        .h(250)\n+                        .build(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Mjc5Mw==", "bodyText": "don't you think taht \\n \\t is invalid js ?", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473062793", "createdAt": "2020-08-19T14:15:29Z", "author": {"login": "DGarbar"}, "path": "src/test/resources/org/prebid/server/it/openrtb2/adocean/test-auction-adocean-response.json", "diffHunk": "@@ -7,7 +7,7 @@\n           \"id\": \"adoceanmyaozpniqismex\",\n           \"impid\": \"impId12\",\n           \"price\": 10,\n-          \"adm\": \" <script> +function() { var wu = \\\"https://win-url.com\\\"; var su = \\\"https://stats-url.com\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now()); if (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) { (new Image(1,1)).src = wu } if (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) { (new Image(1,1)).src = su } }(); </script>  <!-- code 1 --> \",\n+          \"adm\": \"<script>\\n\\t\\t+function() {\\n\\t\\t\\tvar wu = \\\"https://win-url.com\\\";\\n\\t\\t\\tvar su = \\\"https://stats-url.com\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\\n\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\\t\\t\\t\\t(new Image(1,1)).src = su\\n\\t\\t\\t}\\n\\t\\t}();\\n\\t</script> <!-- code 1 --> \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzUyMjQ0", "url": "https://github.com/prebid/prebid-server-java/pull/777#pullrequestreview-471352244", "createdAt": "2020-08-20T07:56:59Z", "commit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1Njo1OVrOHDyExg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1ODozMFrOHDyMig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyODE5OA==", "bodyText": "Bc you don't collecting them. This collection will have only 1 value", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473728198", "createdAt": "2020-08-20T07:56:59Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String MEASUREMENT_CODE = \"<script>\\n\"\n+            + \"\\t\\t+function() {\\n\"\n+            + \"\\t\\t\\tvar wu = \\\"%s\\\";\\n\"\n+            + \"\\t\\t\\tvar su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\t\\t}();\\n\"\n+            + \"\\t</script>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdoceanBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final User user = request.getUser();\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        final String consentString = StringUtils.isNotBlank(consent) ? consent : \"\";\n+\n+        final List<BidderError> errors = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0OTgxNw=="}, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMDE4Ng==", "bodyText": "So you are saying that this is perfectly valid JS script ? Pls check Go test case. They removing all the /n /t and set only \u0449ne space between code.", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473730186", "createdAt": "2020-08-20T07:58:30Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package org.prebid.server.bidder.adocean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adocean.model.AdoceanResponseAdUnit;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adocean.ExtImpAdocean;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdoceanBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdocean>> ADOCEAN_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdocean>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final int MAX_URI_LENGTH = 8000;\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String MEASUREMENT_CODE = \"<script>\\n\"\n+            + \"\\t\\t+function() {\\n\"\n+            + \"\\t\\t\\tvar wu = \\\"%s\\\";\\n\"\n+            + \"\\t\\t\\tvar su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\n\"\n+            + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n+            + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n+            + \"\\t\\t\\t}\\n\"\n+            + \"\\t\\t}();\\n\"\n+            + \"\\t</script>\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0MzI4Mw=="}, "originalCommit": {"oid": "6248def17bb8c54cff52580baf0e43371a0181fa"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ecf74d3dedfc88706bf24439de72c3195382f6a", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/8ecf74d3dedfc88706bf24439de72c3195382f6a", "committedDate": "2020-08-20T11:05:40Z", "message": "Fix string constant and remove errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTQzMjIx", "url": "https://github.com/prebid/prebid-server-java/pull/777#pullrequestreview-471543221", "createdAt": "2020-08-20T12:26:47Z", "commit": {"oid": "8ecf74d3dedfc88706bf24439de72c3195382f6a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNjo0N1rOHD-dSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjo0Njo0N1rOHD_Ing==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMTA4Mg==", "bodyText": "Pls change this name to MEASUREMENT_CODE_TEMPLATE", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473931082", "createdAt": "2020-08-20T12:26:47Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -50,20 +50,10 @@\n     private static final String VERSION = \"1.0.0\";\n     private static final int MAX_URI_LENGTH = 8000;\n     private static final String DEFAULT_BID_CURRENCY = \"USD\";\n-    private static final String MEASUREMENT_CODE = \"<script>\\n\"\n-            + \"\\t\\t+function() {\\n\"\n-            + \"\\t\\t\\tvar wu = \\\"%s\\\";\\n\"\n-            + \"\\t\\t\\tvar su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n-            + \"\\n\"\n-            + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n-            + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n-            + \"\\t\\t\\t}\\n\"\n-            + \"\\n\"\n-            + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n-            + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n-            + \"\\t\\t\\t}\\n\"\n-            + \"\\t\\t}();\\n\"\n-            + \"\\t</script>\";\n+    private static final String MEASUREMENT_CODE = \" <script> +function() { var wu = \\\"%s\\\";\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecf74d3dedfc88706bf24439de72c3195382f6a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMzgzOA==", "bodyText": "queryParams cant be null", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473933838", "createdAt": "2020-08-20T12:31:38Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -120,53 +98,60 @@ private ExtImpAdocean parseImpExt(Imp imp) {\n         }\n     }\n \n-    private boolean isRequest(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean, String impid) {\n+    private boolean addRequestAndCheckIfDuplicates(List<HttpRequest<Void>> httpRequests, ExtImpAdocean extImpAdocean,\n+                                                   String impid) {\n         for (HttpRequest<Void> request : httpRequests) {\n             List<NameValuePair> params = null;\n-            URIBuilder uriBuilder = null;\n             try {\n-                uriBuilder = new URIBuilder(request.getUri());\n-            } catch (URISyntaxException e) {\n-                e.printStackTrace();\n-            }\n-            final List<NameValuePair> queryParams = uriBuilder != null ? uriBuilder.getQueryParams() : null;\n-\n-            final String masterId = queryParams != null\n-                    ? queryParams.stream()\n-                    .filter(param -> param.getName().equals(\"id\"))\n-                    .findFirst()\n-                    .map(NameValuePair::getValue)\n-                    .orElse(null)\n-                    : null;\n-\n-            if (masterId != null && masterId.equals(extImpAdocean.getMasterId())) {\n-                final String newSlaveId = queryParams.stream()\n-                        .filter(param -> param.getName().equals(\"aid\"))\n-                        .map(param -> param.getValue().split(\":\")[0])\n-                        .filter(slaveId -> slaveId.equals(extImpAdocean.getSlaveId()))\n+                URIBuilder uriBuilder = new URIBuilder(request.getUri());\n+                final List<NameValuePair> queryParams = uriBuilder.getQueryParams();\n+\n+                final String masterId = queryParams != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecf74d3dedfc88706bf24439de72c3195382f6a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MDc3Mg==", "bodyText": "you can refactor this like this\n        // then\n        final String adm = \" <script> +function() { \"\n                + \"var wu = \\\"https://win-url.com\\\"; \"\n                + \"var su = \\\"https://stats-url.com\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now()); \"\n                + \"if (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) { (new Image(1,1)).src = wu } \"\n                + \"if (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) { (new Image(1,1)).src = su } }(); \"\n                + \"</script>  <!-- code 1 --> \";", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473940772", "createdAt": "2020-08-20T12:44:16Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adocean/AdoceanBidderTest.java", "diffHunk": "@@ -277,20 +277,7 @@ public void makeBidsShouldReturnCorrectBidderBid() throws JsonProcessingExceptio\n         final Result<List<BidderBid>> result = adoceanBidder.makeBids(httpCall, bidRequest);\n \n         // then\n-        final String adm = \"<script>\\n\"\n-                + \"\\t\\t+function() {\\n\"\n-                + \"\\t\\t\\tvar wu = \\\"https://win-url.com\\\";\\n\"\n-                + \"\\t\\t\\tvar su = \\\"https://stats-url.com\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n-                + \"\\n\"\n-                + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n-                + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n-                + \"\\t\\t\\t}\\n\"\n-                + \"\\n\"\n-                + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n-                + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n-                + \"\\t\\t\\t}\\n\"\n-                + \"\\t\\t}();\\n\"\n-                + \"\\t</script> <!-- code 1 --> \";\n+        final String adm = \" <script> +function() { var wu = \\\"https://win-url.com\\\"; var su = \\\"https://stats-url.com\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now()); if (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) { (new Image(1,1)).src = wu } if (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) { (new Image(1,1)).src = su } }(); </script>  <!-- code 1 --> \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecf74d3dedfc88706bf24439de72c3195382f6a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MTI3Mg==", "bodyText": "adm redundant", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473941272", "createdAt": "2020-08-20T12:45:11Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/adocean/AdoceanBidderTest.java", "diffHunk": "@@ -361,19 +348,6 @@ public void makeBidsShouldReturnEmptyListOfBids() throws JsonProcessingException\n                 + \"\\t\\t\\t}\\n\"\n                 + \"\\t\\t}();\\n\"\n                 + \"\\t</script> <!-- code 1 --> \";\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecf74d3dedfc88706bf24439de72c3195382f6a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0MjE3NA==", "bodyText": "private static final String MEASUREMENT_CODE = \" <script> +function() { \" \n            + \"var wu = \\\"%s\\\"; \"\n            + \"var su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now()); \" \n            + \"if (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) { (new Image(1,1)).src = wu } \" \n            + \"if (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) { (new Image(1,1)).src = su } }(); \" \n            + \"</script> \";", "url": "https://github.com/prebid/prebid-server-java/pull/777#discussion_r473942174", "createdAt": "2020-08-20T12:46:47Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adocean/AdoceanBidder.java", "diffHunk": "@@ -50,20 +50,10 @@\n     private static final String VERSION = \"1.0.0\";\n     private static final int MAX_URI_LENGTH = 8000;\n     private static final String DEFAULT_BID_CURRENCY = \"USD\";\n-    private static final String MEASUREMENT_CODE = \"<script>\\n\"\n-            + \"\\t\\t+function() {\\n\"\n-            + \"\\t\\t\\tvar wu = \\\"%s\\\";\\n\"\n-            + \"\\t\\t\\tvar su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now());\\n\"\n-            + \"\\n\"\n-            + \"\\t\\t\\tif (wu && !(navigator.sendBeacon && navigator.sendBeacon(wu))) {\\n\"\n-            + \"\\t\\t\\t\\t(new Image(1,1)).src = wu\\n\"\n-            + \"\\t\\t\\t}\\n\"\n-            + \"\\n\"\n-            + \"\\t\\t\\tif (su && !(navigator.sendBeacon && navigator.sendBeacon(su))) {\\n\"\n-            + \"\\t\\t\\t\\t(new Image(1,1)).src = su\\n\"\n-            + \"\\t\\t\\t}\\n\"\n-            + \"\\t\\t}();\\n\"\n-            + \"\\t</script>\";\n+    private static final String MEASUREMENT_CODE = \" <script> +function() { var wu = \\\"%s\\\";\"\n+            + \" var su = \\\"%s\\\".replace(/\\\\[TIMESTAMP\\\\]/, Date.now()); if (wu && !(navigator.sendBeacon\"\n+            + \" && navigator.sendBeacon(wu))) { (new Image(1,1)).src = wu } if (su && !(navigator.sendBeacon\"\n+            + \" && navigator.sendBeacon(su))) { (new Image(1,1)).src = su } }(); </script> \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecf74d3dedfc88706bf24439de72c3195382f6a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d2d47faace1950647d3191db6ac9ecd4302acb", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/13d2d47faace1950647d3191db6ac9ecd4302acb", "committedDate": "2020-08-20T13:01:10Z", "message": "Small refactoring string constant"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTczMjM4", "url": "https://github.com/prebid/prebid-server-java/pull/777#pullrequestreview-471573238", "createdAt": "2020-08-20T13:04:28Z", "commit": {"oid": "13d2d47faace1950647d3191db6ac9ecd4302acb"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4992d0b30e12aaa0146b6bf2466f4372b8ae3a59", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/4992d0b30e12aaa0146b6bf2466f4372b8ae3a59", "committedDate": "2020-09-07T08:57:43Z", "message": "Merge branch 'master' into add-adocean-bidder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "408ac85b0f8f6ec57eea2aa29d2252de15631f31", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/408ac85b0f8f6ec57eea2aa29d2252de15631f31", "committedDate": "2020-09-15T14:37:56Z", "message": "Merge branch 'master' into add-adocean-bidder\n\n# Conflicts:\n#\tsrc/test/resources/org/prebid/server/it/test-application.properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NzU2NTQz", "url": "https://github.com/prebid/prebid-server-java/pull/777#pullrequestreview-488756543", "createdAt": "2020-09-15T14:39:57Z", "commit": {"oid": "408ac85b0f8f6ec57eea2aa29d2252de15631f31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3238, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}