{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzEzMTU0", "number": 692, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxNDo0M1rOD5YAYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoyNDo0OVrOD5YOZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDg4NzM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/kidoz/KidozBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxNDo0M1rOGQmkIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxNDo0M1rOGQmkIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2MjI0MA==", "bodyText": "Does they also include xnative ?", "url": "https://github.com/prebid/prebid-server-java/pull/692#discussion_r420062240", "createdAt": "2020-05-05T12:14:43Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/kidoz/KidozBidder.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.prebid.server.bidder.kidoz;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.kidoz.ExtImpKidoz;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class KidozBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKidoz>> KIDOZ_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKidoz>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KidozBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpKidoz extImpKidoz = parseAndValidateImpExt(imp);\n+                result.add(createSingleRequest(validImp, request, endpointUrl));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    private Imp validateImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd88c0f9694bdad5c94d60312d1517174cb011d"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDkxMzU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/kidoz/KidozBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoyMjowNFrOGQm0Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoyMjowNFrOGQm0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NjM0Mw==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/692#discussion_r420066343", "createdAt": "2020-05-05T12:22:04Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/kidoz/KidozBidderTest.java", "diffHunk": "@@ -0,0 +1,399 @@\n+package org.prebid.server.bidder.kidoz;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.applogy.ApplogyBidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.kidoz.ExtImpKidoz;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.audio;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class KidozBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private KidozBidder kidozBidder;\n+\n+    @Before\n+    public void setUp() {\n+        kidozBidder = new KidozBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfEmptyAcessTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpKidoz.of(null, \"publisherId\")))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Kidoz access_token required\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpKidoz.of(\"accessToken\", null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Kidoz publisher_id required\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpKidoz> ext = ExtPrebid.of(null, ExtImpKidoz.of(\"token1\", \"publisherId\"));\n+        Imp imp = givenImp(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd88c0f9694bdad5c94d60312d1517174cb011d"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDkxODAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/kidoz/KidozBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoyMzozMFrOGQm3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoyMzozMFrOGQm3Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NzA4Mw==", "bodyText": "extract this imp also and name appropriately (validImp, notValidImp", "url": "https://github.com/prebid/prebid-server-java/pull/692#discussion_r420067083", "createdAt": "2020-05-05T12:23:30Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/kidoz/KidozBidderTest.java", "diffHunk": "@@ -0,0 +1,399 @@\n+package org.prebid.server.bidder.kidoz;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.applogy.ApplogyBidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.kidoz.ExtImpKidoz;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.audio;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class KidozBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private KidozBidder kidozBidder;\n+\n+    @Before\n+    public void setUp() {\n+        kidozBidder = new KidozBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfEmptyAcessTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpKidoz.of(null, \"publisherId\")))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Kidoz access_token required\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpKidoz.of(\"accessToken\", null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Kidoz publisher_id required\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpKidoz> ext = ExtPrebid.of(null, ExtImpKidoz.of(\"token1\", \"publisherId\"));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd88c0f9694bdad5c94d60312d1517174cb011d"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDkyMzI1OnYy", "diffSide": "RIGHT", "path": "src/test/resources/org/prebid/server/it/openrtb2/kidoz/test-cache-kidoz-response.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoyNDo0OVrOGQm6Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzo1NToyM1rOGQ1COQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2Nzg1OQ==", "bodyText": "do you really need third cache response ?", "url": "https://github.com/prebid/prebid-server-java/pull/692#discussion_r420067859", "createdAt": "2020-05-05T12:24:49Z", "author": {"login": "DGarbar"}, "path": "src/test/resources/org/prebid/server/it/openrtb2/kidoz/test-cache-kidoz-response.json", "diffHunk": "@@ -0,0 +1,13 @@\n+{\n+  \"responses\": [\n+    {\n+      \"uuid\": \"f0ab9105-cb21-4e59-b433-70f5ad6671cb\"\n+    },\n+    {\n+      \"uuid\": \"e7965b2e-0aa3-4252-a22c-580ed010e619\"\n+    },\n+    {\n+      \"uuid\": \"44a52b06-b29f-4819-a05f-db36b9e7b8fc\"\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd88c0f9694bdad5c94d60312d1517174cb011d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI5OTMyMQ==", "bodyText": "Yes, because we have video bid that can cache vastxml:\n\"vastXml\": {\n\"url\": \"{{ cache.resource_url }}44a52b06-b29f-4819-a05f-db36b9e7b8fc\",\n\"cacheId\": \"44a52b06-b29f-4819-a05f-db36b9e7b8fc\"\n}", "url": "https://github.com/prebid/prebid-server-java/pull/692#discussion_r420299321", "createdAt": "2020-05-05T17:55:23Z", "author": {"login": "AndriyPavlyuk"}, "path": "src/test/resources/org/prebid/server/it/openrtb2/kidoz/test-cache-kidoz-response.json", "diffHunk": "@@ -0,0 +1,13 @@\n+{\n+  \"responses\": [\n+    {\n+      \"uuid\": \"f0ab9105-cb21-4e59-b433-70f5ad6671cb\"\n+    },\n+    {\n+      \"uuid\": \"e7965b2e-0aa3-4252-a22c-580ed010e619\"\n+    },\n+    {\n+      \"uuid\": \"44a52b06-b29f-4819-a05f-db36b9e7b8fc\"\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2Nzg1OQ=="}, "originalCommit": {"oid": "8cd88c0f9694bdad5c94d60312d1517174cb011d"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4044, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}