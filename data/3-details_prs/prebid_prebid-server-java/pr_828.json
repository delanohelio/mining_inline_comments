{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NzI4NjY4", "number": 828, "title": "Add Yeidlab Bidder and tests", "bodyText": "For passing validation tests it was harcoded timestamp and number of weeks in year.\nfinal String timestamp = isDebugEnabled(request)\n? \"200000\"\n: String.valueOf(Instant.now().getEpochSecond());\n\nfinal int weekNumber = isDebugEnabled(bidRequest)\n? 35\n: Calendar.getInstance().get(Calendar.WEEK_OF_YEAR);", "createdAt": "2020-07-28T10:48:15Z", "url": "https://github.com/prebid/prebid-server-java/pull/828", "merged": true, "mergeCommit": {"oid": "a26bc5bff025f8639f73fe7123f89dba84f8dd6a"}, "closed": true, "closedAt": "2020-09-22T13:17:55Z", "author": {"login": "AndriyPavlyuk"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5UB5GAH2gAyNDU3NzI4NjY4OjdjNzI0NTA2OGRjZWExMzRjZTQzNjVjYWZkNDY0NGNhY2E4MmUxN2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLX2VbAFqTQ5MzQ0ODA4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/7c7245068dcea134ce4365cafd4644caca82e17b", "committedDate": "2020-07-28T10:39:56Z", "message": "Add Yeidlab Bidder and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NjgwMjQ4", "url": "https://github.com/prebid/prebid-server-java/pull/828#pullrequestreview-488680248", "createdAt": "2020-09-15T13:26:44Z", "commit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyNjo0NFrOHSBxzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDowMToyOFrOHSDbMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2NTU1MQ==", "bodyText": "Extract this into another method like collectImpExt (And you don't need errors, they do not send anything)", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488665551", "createdAt": "2020-09-15T13:26:44Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2ODE3OQ==", "bodyText": "constructExtImp", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488668179", "createdAt": "2020-09-15T13:30:14Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(makeUrl(modifiedExtImp, request))\n+                        .body(null)\n+                        .headers(getHeaders(request))\n+                        .payload(null)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpYieldlab parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDLAB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private ExtImpYieldlab modifyExtImp(List<ExtImpYieldlab> extImps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY3MDg4Ng==", "bodyText": "updatedPath", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488670886", "createdAt": "2020-09-15T13:33:54Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(makeUrl(modifiedExtImp, request))\n+                        .body(null)\n+                        .headers(getHeaders(request))\n+                        .payload(null)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpYieldlab parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDLAB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private ExtImpYieldlab modifyExtImp(List<ExtImpYieldlab> extImps) {\n+        final List<String> adSlotIds = extImps.stream()\n+                .map(ExtImpYieldlab::getAdslotId)\n+                .collect(Collectors.toList());\n+\n+        final Map<String, String> targeting = extImps.stream()\n+                .map(ExtImpYieldlab::getTargeting)\n+                .flatMap(map -> map.entrySet().stream())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        final String adSlotIdsParams = adSlotIds.stream().sorted().collect(Collectors.joining(AD_SLOT_ID_SEPARATOR));\n+        return ExtImpYieldlab.of(adSlotIdsParams, null, null, targeting, null);\n+    }\n+\n+    private String makeUrl(ExtImpYieldlab extImpYieldlab, BidRequest request) {\n+        // for passing validation tests\n+        final String timestamp = isDebugEnabled(request) ? \"200000\" : String.valueOf(Instant.now().getEpochSecond());\n+\n+        final String join = String.format(\"%s/%s\", endpointUrl, extImpYieldlab.getAdslotId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY3NDE2OA==", "bodyText": "Check for null and if it is return \"\"", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488674168", "createdAt": "2020-09-15T13:38:03Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(makeUrl(modifiedExtImp, request))\n+                        .body(null)\n+                        .headers(getHeaders(request))\n+                        .payload(null)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpYieldlab parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDLAB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private ExtImpYieldlab modifyExtImp(List<ExtImpYieldlab> extImps) {\n+        final List<String> adSlotIds = extImps.stream()\n+                .map(ExtImpYieldlab::getAdslotId)\n+                .collect(Collectors.toList());\n+\n+        final Map<String, String> targeting = extImps.stream()\n+                .map(ExtImpYieldlab::getTargeting)\n+                .flatMap(map -> map.entrySet().stream())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        final String adSlotIdsParams = adSlotIds.stream().sorted().collect(Collectors.joining(AD_SLOT_ID_SEPARATOR));\n+        return ExtImpYieldlab.of(adSlotIdsParams, null, null, targeting, null);\n+    }\n+\n+    private String makeUrl(ExtImpYieldlab extImpYieldlab, BidRequest request) {\n+        // for passing validation tests\n+        final String timestamp = isDebugEnabled(request) ? \"200000\" : String.valueOf(Instant.now().getEpochSecond());\n+\n+        final String join = String.format(\"%s/%s\", endpointUrl, extImpYieldlab.getAdslotId());\n+\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(join)\n+                .addParameter(\"content\", \"json\")\n+                .addParameter(\"pvid\", \"true\")\n+                .addParameter(\"ts\", timestamp)\n+                .addParameter(\"t\", getTargetingValues(extImpYieldlab));\n+\n+        final User user = request.getUser();\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            uriBuilder.addParameter(\"ids\", String.join(\"ylid:\", user.getBuyeruid()));\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            uriBuilder.addParameter(\"yl_rtb_ifa\", device.getIfa())\n+                    .addParameter(\"yl_rtb_devicetype\", String.format(\"%s\", device.getDevicetype()));\n+\n+            final Integer connectiontype = device.getConnectiontype();\n+            if (connectiontype != null) {\n+                uriBuilder.addParameter(\"yl_rtb_connectiontype\", String.format(\"%s\", connectiontype));\n+            }\n+\n+            final Geo geo = device.getGeo();\n+            if (geo != null) {\n+                uriBuilder.addParameter(\"lat\", String.format(\"%s\", geo.getLat()))\n+                        .addParameter(\"lon\", String.format(\"%s\", geo.getLon()));\n+            }\n+        }\n+\n+        final App app = request.getApp();\n+        if (app != null) {\n+            uriBuilder.addParameter(\"pubappname\", app.getName())\n+                    .addParameter(\"pubbundlename\", app.getBundle());\n+        }\n+\n+        final String gdpr = getGdprParameter(request.getRegs());\n+        final String consent = getConsentParameter(request.getUser());\n+        if (StringUtils.isNotBlank(gdpr) && StringUtils.isNotBlank(consent)) {\n+            uriBuilder.addParameter(\"gdpr\", gdpr)\n+                    .addParameter(\"consent\", consent);\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    /**\n+     * Determines debug flag from {@link BidRequest} or {@link ExtRequest}.\n+     */\n+    private boolean isDebugEnabled(BidRequest bidRequest) {\n+        if (Objects.equals(bidRequest.getTest(), 1)) {\n+            return true;\n+        }\n+\n+        final ExtRequest extRequest = bidRequest.getExt();\n+        final ExtRequestPrebid extRequestPrebid = extRequest != null ? extRequest.getPrebid() : null;\n+        return extRequestPrebid != null && Objects.equals(extRequestPrebid.getDebug(), 1);\n+    }\n+\n+    private String getTargetingValues(ExtImpYieldlab extImpYieldlab) {\n+        final URIBuilder uriBuilder = new URIBuilder();\n+\n+        for (Map.Entry<String, String> targeting : extImpYieldlab.getTargeting().entrySet()) {\n+            uriBuilder.addParameter(targeting.getKey(), targeting.getValue());\n+        }\n+\n+        return uriBuilder.toString().replace(\"?\", \"\");\n+    }\n+\n+    private String getGdprParameter(Regs regs) {\n+        String gdprString = \"\";\n+\n+        if (regs != null) {\n+            final Integer gdpr = regs.getExt() != null ? regs.getExt().getGdpr() : null;\n+            if (gdpr != null && (gdpr == 0 || gdpr == 1)) {\n+                gdprString = String.valueOf(gdpr);\n+            }\n+        }\n+        return gdprString;\n+    }\n+\n+    private String getConsentParameter(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        return extUser != null ? extUser.getConsent() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY3NDM4NQ==", "bodyText": "remove this", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488674385", "createdAt": "2020-09-15T13:38:20Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(makeUrl(modifiedExtImp, request))\n+                        .body(null)\n+                        .headers(getHeaders(request))\n+                        .payload(null)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpYieldlab parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDLAB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private ExtImpYieldlab modifyExtImp(List<ExtImpYieldlab> extImps) {\n+        final List<String> adSlotIds = extImps.stream()\n+                .map(ExtImpYieldlab::getAdslotId)\n+                .collect(Collectors.toList());\n+\n+        final Map<String, String> targeting = extImps.stream()\n+                .map(ExtImpYieldlab::getTargeting)\n+                .flatMap(map -> map.entrySet().stream())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        final String adSlotIdsParams = adSlotIds.stream().sorted().collect(Collectors.joining(AD_SLOT_ID_SEPARATOR));\n+        return ExtImpYieldlab.of(adSlotIdsParams, null, null, targeting, null);\n+    }\n+\n+    private String makeUrl(ExtImpYieldlab extImpYieldlab, BidRequest request) {\n+        // for passing validation tests\n+        final String timestamp = isDebugEnabled(request) ? \"200000\" : String.valueOf(Instant.now().getEpochSecond());\n+\n+        final String join = String.format(\"%s/%s\", endpointUrl, extImpYieldlab.getAdslotId());\n+\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(join)\n+                .addParameter(\"content\", \"json\")\n+                .addParameter(\"pvid\", \"true\")\n+                .addParameter(\"ts\", timestamp)\n+                .addParameter(\"t\", getTargetingValues(extImpYieldlab));\n+\n+        final User user = request.getUser();\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            uriBuilder.addParameter(\"ids\", String.join(\"ylid:\", user.getBuyeruid()));\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            uriBuilder.addParameter(\"yl_rtb_ifa\", device.getIfa())\n+                    .addParameter(\"yl_rtb_devicetype\", String.format(\"%s\", device.getDevicetype()));\n+\n+            final Integer connectiontype = device.getConnectiontype();\n+            if (connectiontype != null) {\n+                uriBuilder.addParameter(\"yl_rtb_connectiontype\", String.format(\"%s\", connectiontype));\n+            }\n+\n+            final Geo geo = device.getGeo();\n+            if (geo != null) {\n+                uriBuilder.addParameter(\"lat\", String.format(\"%s\", geo.getLat()))\n+                        .addParameter(\"lon\", String.format(\"%s\", geo.getLon()));\n+            }\n+        }\n+\n+        final App app = request.getApp();\n+        if (app != null) {\n+            uriBuilder.addParameter(\"pubappname\", app.getName())\n+                    .addParameter(\"pubbundlename\", app.getBundle());\n+        }\n+\n+        final String gdpr = getGdprParameter(request.getRegs());\n+        final String consent = getConsentParameter(request.getUser());\n+        if (StringUtils.isNotBlank(gdpr) && StringUtils.isNotBlank(consent)) {\n+            uriBuilder.addParameter(\"gdpr\", gdpr)\n+                    .addParameter(\"consent\", consent);\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    /**\n+     * Determines debug flag from {@link BidRequest} or {@link ExtRequest}.\n+     */\n+    private boolean isDebugEnabled(BidRequest bidRequest) {\n+        if (Objects.equals(bidRequest.getTest(), 1)) {\n+            return true;\n+        }\n+\n+        final ExtRequest extRequest = bidRequest.getExt();\n+        final ExtRequestPrebid extRequestPrebid = extRequest != null ? extRequest.getPrebid() : null;\n+        return extRequestPrebid != null && Objects.equals(extRequestPrebid.getDebug(), 1);\n+    }\n+\n+    private String getTargetingValues(ExtImpYieldlab extImpYieldlab) {\n+        final URIBuilder uriBuilder = new URIBuilder();\n+\n+        for (Map.Entry<String, String> targeting : extImpYieldlab.getTargeting().entrySet()) {\n+            uriBuilder.addParameter(targeting.getKey(), targeting.getValue());\n+        }\n+\n+        return uriBuilder.toString().replace(\"?\", \"\");\n+    }\n+\n+    private String getGdprParameter(Regs regs) {\n+        String gdprString = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY3NDUyMw==", "bodyText": "just return value", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488674523", "createdAt": "2020-09-15T13:38:31Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(makeUrl(modifiedExtImp, request))\n+                        .body(null)\n+                        .headers(getHeaders(request))\n+                        .payload(null)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpYieldlab parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDLAB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private ExtImpYieldlab modifyExtImp(List<ExtImpYieldlab> extImps) {\n+        final List<String> adSlotIds = extImps.stream()\n+                .map(ExtImpYieldlab::getAdslotId)\n+                .collect(Collectors.toList());\n+\n+        final Map<String, String> targeting = extImps.stream()\n+                .map(ExtImpYieldlab::getTargeting)\n+                .flatMap(map -> map.entrySet().stream())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        final String adSlotIdsParams = adSlotIds.stream().sorted().collect(Collectors.joining(AD_SLOT_ID_SEPARATOR));\n+        return ExtImpYieldlab.of(adSlotIdsParams, null, null, targeting, null);\n+    }\n+\n+    private String makeUrl(ExtImpYieldlab extImpYieldlab, BidRequest request) {\n+        // for passing validation tests\n+        final String timestamp = isDebugEnabled(request) ? \"200000\" : String.valueOf(Instant.now().getEpochSecond());\n+\n+        final String join = String.format(\"%s/%s\", endpointUrl, extImpYieldlab.getAdslotId());\n+\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(join)\n+                .addParameter(\"content\", \"json\")\n+                .addParameter(\"pvid\", \"true\")\n+                .addParameter(\"ts\", timestamp)\n+                .addParameter(\"t\", getTargetingValues(extImpYieldlab));\n+\n+        final User user = request.getUser();\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            uriBuilder.addParameter(\"ids\", String.join(\"ylid:\", user.getBuyeruid()));\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            uriBuilder.addParameter(\"yl_rtb_ifa\", device.getIfa())\n+                    .addParameter(\"yl_rtb_devicetype\", String.format(\"%s\", device.getDevicetype()));\n+\n+            final Integer connectiontype = device.getConnectiontype();\n+            if (connectiontype != null) {\n+                uriBuilder.addParameter(\"yl_rtb_connectiontype\", String.format(\"%s\", connectiontype));\n+            }\n+\n+            final Geo geo = device.getGeo();\n+            if (geo != null) {\n+                uriBuilder.addParameter(\"lat\", String.format(\"%s\", geo.getLat()))\n+                        .addParameter(\"lon\", String.format(\"%s\", geo.getLon()));\n+            }\n+        }\n+\n+        final App app = request.getApp();\n+        if (app != null) {\n+            uriBuilder.addParameter(\"pubappname\", app.getName())\n+                    .addParameter(\"pubbundlename\", app.getBundle());\n+        }\n+\n+        final String gdpr = getGdprParameter(request.getRegs());\n+        final String consent = getConsentParameter(request.getUser());\n+        if (StringUtils.isNotBlank(gdpr) && StringUtils.isNotBlank(consent)) {\n+            uriBuilder.addParameter(\"gdpr\", gdpr)\n+                    .addParameter(\"consent\", consent);\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    /**\n+     * Determines debug flag from {@link BidRequest} or {@link ExtRequest}.\n+     */\n+    private boolean isDebugEnabled(BidRequest bidRequest) {\n+        if (Objects.equals(bidRequest.getTest(), 1)) {\n+            return true;\n+        }\n+\n+        final ExtRequest extRequest = bidRequest.getExt();\n+        final ExtRequestPrebid extRequestPrebid = extRequest != null ? extRequest.getPrebid() : null;\n+        return extRequestPrebid != null && Objects.equals(extRequestPrebid.getDebug(), 1);\n+    }\n+\n+    private String getTargetingValues(ExtImpYieldlab extImpYieldlab) {\n+        final URIBuilder uriBuilder = new URIBuilder();\n+\n+        for (Map.Entry<String, String> targeting : extImpYieldlab.getTargeting().entrySet()) {\n+            uriBuilder.addParameter(targeting.getKey(), targeting.getValue());\n+        }\n+\n+        return uriBuilder.toString().replace(\"?\", \"\");\n+    }\n+\n+    private String getGdprParameter(Regs regs) {\n+        String gdprString = \"\";\n+\n+        if (regs != null) {\n+            final Integer gdpr = regs.getExt() != null ? regs.getExt().getGdpr() : null;\n+            if (gdpr != null && (gdpr == 0 || gdpr == 1)) {\n+                gdprString = String.valueOf(gdpr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY3NDU5OQ==", "bodyText": "return \"\"", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488674599", "createdAt": "2020-09-15T13:38:37Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(makeUrl(modifiedExtImp, request))\n+                        .body(null)\n+                        .headers(getHeaders(request))\n+                        .payload(null)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpYieldlab parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDLAB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private ExtImpYieldlab modifyExtImp(List<ExtImpYieldlab> extImps) {\n+        final List<String> adSlotIds = extImps.stream()\n+                .map(ExtImpYieldlab::getAdslotId)\n+                .collect(Collectors.toList());\n+\n+        final Map<String, String> targeting = extImps.stream()\n+                .map(ExtImpYieldlab::getTargeting)\n+                .flatMap(map -> map.entrySet().stream())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        final String adSlotIdsParams = adSlotIds.stream().sorted().collect(Collectors.joining(AD_SLOT_ID_SEPARATOR));\n+        return ExtImpYieldlab.of(adSlotIdsParams, null, null, targeting, null);\n+    }\n+\n+    private String makeUrl(ExtImpYieldlab extImpYieldlab, BidRequest request) {\n+        // for passing validation tests\n+        final String timestamp = isDebugEnabled(request) ? \"200000\" : String.valueOf(Instant.now().getEpochSecond());\n+\n+        final String join = String.format(\"%s/%s\", endpointUrl, extImpYieldlab.getAdslotId());\n+\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(join)\n+                .addParameter(\"content\", \"json\")\n+                .addParameter(\"pvid\", \"true\")\n+                .addParameter(\"ts\", timestamp)\n+                .addParameter(\"t\", getTargetingValues(extImpYieldlab));\n+\n+        final User user = request.getUser();\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            uriBuilder.addParameter(\"ids\", String.join(\"ylid:\", user.getBuyeruid()));\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            uriBuilder.addParameter(\"yl_rtb_ifa\", device.getIfa())\n+                    .addParameter(\"yl_rtb_devicetype\", String.format(\"%s\", device.getDevicetype()));\n+\n+            final Integer connectiontype = device.getConnectiontype();\n+            if (connectiontype != null) {\n+                uriBuilder.addParameter(\"yl_rtb_connectiontype\", String.format(\"%s\", connectiontype));\n+            }\n+\n+            final Geo geo = device.getGeo();\n+            if (geo != null) {\n+                uriBuilder.addParameter(\"lat\", String.format(\"%s\", geo.getLat()))\n+                        .addParameter(\"lon\", String.format(\"%s\", geo.getLon()));\n+            }\n+        }\n+\n+        final App app = request.getApp();\n+        if (app != null) {\n+            uriBuilder.addParameter(\"pubappname\", app.getName())\n+                    .addParameter(\"pubbundlename\", app.getBundle());\n+        }\n+\n+        final String gdpr = getGdprParameter(request.getRegs());\n+        final String consent = getConsentParameter(request.getUser());\n+        if (StringUtils.isNotBlank(gdpr) && StringUtils.isNotBlank(consent)) {\n+            uriBuilder.addParameter(\"gdpr\", gdpr)\n+                    .addParameter(\"consent\", consent);\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    /**\n+     * Determines debug flag from {@link BidRequest} or {@link ExtRequest}.\n+     */\n+    private boolean isDebugEnabled(BidRequest bidRequest) {\n+        if (Objects.equals(bidRequest.getTest(), 1)) {\n+            return true;\n+        }\n+\n+        final ExtRequest extRequest = bidRequest.getExt();\n+        final ExtRequestPrebid extRequestPrebid = extRequest != null ? extRequest.getPrebid() : null;\n+        return extRequestPrebid != null && Objects.equals(extRequestPrebid.getDebug(), 1);\n+    }\n+\n+    private String getTargetingValues(ExtImpYieldlab extImpYieldlab) {\n+        final URIBuilder uriBuilder = new URIBuilder();\n+\n+        for (Map.Entry<String, String> targeting : extImpYieldlab.getTargeting().entrySet()) {\n+            uriBuilder.addParameter(targeting.getKey(), targeting.getValue());\n+        }\n+\n+        return uriBuilder.toString().replace(\"?\", \"\");\n+    }\n+\n+    private String getGdprParameter(Regs regs) {\n+        String gdprString = \"\";\n+\n+        if (regs != null) {\n+            final Integer gdpr = regs.getExt() != null ? regs.getExt().getGdpr() : null;\n+            if (gdpr != null && (gdpr == 0 || gdpr == 1)) {\n+                gdprString = String.valueOf(gdpr);\n+            }\n+        }\n+        return gdprString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY3NzY0Mw==", "bodyText": "If you extract this into method you can reuse it. (comment above)", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488677643", "createdAt": "2020-09-15T13:42:32Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(makeUrl(modifiedExtImp, request))\n+                        .body(null)\n+                        .headers(getHeaders(request))\n+                        .payload(null)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpYieldlab parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDLAB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private ExtImpYieldlab modifyExtImp(List<ExtImpYieldlab> extImps) {\n+        final List<String> adSlotIds = extImps.stream()\n+                .map(ExtImpYieldlab::getAdslotId)\n+                .collect(Collectors.toList());\n+\n+        final Map<String, String> targeting = extImps.stream()\n+                .map(ExtImpYieldlab::getTargeting)\n+                .flatMap(map -> map.entrySet().stream())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        final String adSlotIdsParams = adSlotIds.stream().sorted().collect(Collectors.joining(AD_SLOT_ID_SEPARATOR));\n+        return ExtImpYieldlab.of(adSlotIdsParams, null, null, targeting, null);\n+    }\n+\n+    private String makeUrl(ExtImpYieldlab extImpYieldlab, BidRequest request) {\n+        // for passing validation tests\n+        final String timestamp = isDebugEnabled(request) ? \"200000\" : String.valueOf(Instant.now().getEpochSecond());\n+\n+        final String join = String.format(\"%s/%s\", endpointUrl, extImpYieldlab.getAdslotId());\n+\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(join)\n+                .addParameter(\"content\", \"json\")\n+                .addParameter(\"pvid\", \"true\")\n+                .addParameter(\"ts\", timestamp)\n+                .addParameter(\"t\", getTargetingValues(extImpYieldlab));\n+\n+        final User user = request.getUser();\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            uriBuilder.addParameter(\"ids\", String.join(\"ylid:\", user.getBuyeruid()));\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            uriBuilder.addParameter(\"yl_rtb_ifa\", device.getIfa())\n+                    .addParameter(\"yl_rtb_devicetype\", String.format(\"%s\", device.getDevicetype()));\n+\n+            final Integer connectiontype = device.getConnectiontype();\n+            if (connectiontype != null) {\n+                uriBuilder.addParameter(\"yl_rtb_connectiontype\", String.format(\"%s\", connectiontype));\n+            }\n+\n+            final Geo geo = device.getGeo();\n+            if (geo != null) {\n+                uriBuilder.addParameter(\"lat\", String.format(\"%s\", geo.getLat()))\n+                        .addParameter(\"lon\", String.format(\"%s\", geo.getLon()));\n+            }\n+        }\n+\n+        final App app = request.getApp();\n+        if (app != null) {\n+            uriBuilder.addParameter(\"pubappname\", app.getName())\n+                    .addParameter(\"pubbundlename\", app.getBundle());\n+        }\n+\n+        final String gdpr = getGdprParameter(request.getRegs());\n+        final String consent = getConsentParameter(request.getUser());\n+        if (StringUtils.isNotBlank(gdpr) && StringUtils.isNotBlank(consent)) {\n+            uriBuilder.addParameter(\"gdpr\", gdpr)\n+                    .addParameter(\"consent\", consent);\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    /**\n+     * Determines debug flag from {@link BidRequest} or {@link ExtRequest}.\n+     */\n+    private boolean isDebugEnabled(BidRequest bidRequest) {\n+        if (Objects.equals(bidRequest.getTest(), 1)) {\n+            return true;\n+        }\n+\n+        final ExtRequest extRequest = bidRequest.getExt();\n+        final ExtRequestPrebid extRequestPrebid = extRequest != null ? extRequest.getPrebid() : null;\n+        return extRequestPrebid != null && Objects.equals(extRequestPrebid.getDebug(), 1);\n+    }\n+\n+    private String getTargetingValues(ExtImpYieldlab extImpYieldlab) {\n+        final URIBuilder uriBuilder = new URIBuilder();\n+\n+        for (Map.Entry<String, String> targeting : extImpYieldlab.getTargeting().entrySet()) {\n+            uriBuilder.addParameter(targeting.getKey(), targeting.getValue());\n+        }\n+\n+        return uriBuilder.toString().replace(\"?\", \"\");\n+    }\n+\n+    private String getGdprParameter(Regs regs) {\n+        String gdprString = \"\";\n+\n+        if (regs != null) {\n+            final Integer gdpr = regs.getExt() != null ? regs.getExt().getGdpr() : null;\n+            if (gdpr != null && (gdpr == 0 || gdpr == 1)) {\n+                gdprString = String.valueOf(gdpr);\n+            }\n+        }\n+        return gdprString;\n+    }\n+\n+    private String getConsentParameter(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        return extUser != null ? extUser.getConsent() : null;\n+    }\n+\n+    private static MultiMap getHeaders(BidRequest request) {\n+        final MultiMap headers = HttpUtil.headers();\n+        final Site site = request.getSite();\n+\n+        if (site != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER.toString(), site.getPage());\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER.toString(), device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER.toString(), device.getIp());\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.COOKIE_HEADER.toString(),\n+                    String.format(\"id=%s\", user.getBuyeruid()));\n+        }\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final List<YieldlabResponse> yieldlabResponses;\n+        try {\n+            yieldlabResponses = decodeBodyToBidList(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY4MDQ0Nw==", "bodyText": "Add Validation above in case of an error. (StringUtils.isNumeric())", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488680447", "createdAt": "2020-09-15T13:46:10Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(makeUrl(modifiedExtImp, request))\n+                        .body(null)\n+                        .headers(getHeaders(request))\n+                        .payload(null)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpYieldlab parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDLAB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private ExtImpYieldlab modifyExtImp(List<ExtImpYieldlab> extImps) {\n+        final List<String> adSlotIds = extImps.stream()\n+                .map(ExtImpYieldlab::getAdslotId)\n+                .collect(Collectors.toList());\n+\n+        final Map<String, String> targeting = extImps.stream()\n+                .map(ExtImpYieldlab::getTargeting)\n+                .flatMap(map -> map.entrySet().stream())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        final String adSlotIdsParams = adSlotIds.stream().sorted().collect(Collectors.joining(AD_SLOT_ID_SEPARATOR));\n+        return ExtImpYieldlab.of(adSlotIdsParams, null, null, targeting, null);\n+    }\n+\n+    private String makeUrl(ExtImpYieldlab extImpYieldlab, BidRequest request) {\n+        // for passing validation tests\n+        final String timestamp = isDebugEnabled(request) ? \"200000\" : String.valueOf(Instant.now().getEpochSecond());\n+\n+        final String join = String.format(\"%s/%s\", endpointUrl, extImpYieldlab.getAdslotId());\n+\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(join)\n+                .addParameter(\"content\", \"json\")\n+                .addParameter(\"pvid\", \"true\")\n+                .addParameter(\"ts\", timestamp)\n+                .addParameter(\"t\", getTargetingValues(extImpYieldlab));\n+\n+        final User user = request.getUser();\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            uriBuilder.addParameter(\"ids\", String.join(\"ylid:\", user.getBuyeruid()));\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            uriBuilder.addParameter(\"yl_rtb_ifa\", device.getIfa())\n+                    .addParameter(\"yl_rtb_devicetype\", String.format(\"%s\", device.getDevicetype()));\n+\n+            final Integer connectiontype = device.getConnectiontype();\n+            if (connectiontype != null) {\n+                uriBuilder.addParameter(\"yl_rtb_connectiontype\", String.format(\"%s\", connectiontype));\n+            }\n+\n+            final Geo geo = device.getGeo();\n+            if (geo != null) {\n+                uriBuilder.addParameter(\"lat\", String.format(\"%s\", geo.getLat()))\n+                        .addParameter(\"lon\", String.format(\"%s\", geo.getLon()));\n+            }\n+        }\n+\n+        final App app = request.getApp();\n+        if (app != null) {\n+            uriBuilder.addParameter(\"pubappname\", app.getName())\n+                    .addParameter(\"pubbundlename\", app.getBundle());\n+        }\n+\n+        final String gdpr = getGdprParameter(request.getRegs());\n+        final String consent = getConsentParameter(request.getUser());\n+        if (StringUtils.isNotBlank(gdpr) && StringUtils.isNotBlank(consent)) {\n+            uriBuilder.addParameter(\"gdpr\", gdpr)\n+                    .addParameter(\"consent\", consent);\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    /**\n+     * Determines debug flag from {@link BidRequest} or {@link ExtRequest}.\n+     */\n+    private boolean isDebugEnabled(BidRequest bidRequest) {\n+        if (Objects.equals(bidRequest.getTest(), 1)) {\n+            return true;\n+        }\n+\n+        final ExtRequest extRequest = bidRequest.getExt();\n+        final ExtRequestPrebid extRequestPrebid = extRequest != null ? extRequest.getPrebid() : null;\n+        return extRequestPrebid != null && Objects.equals(extRequestPrebid.getDebug(), 1);\n+    }\n+\n+    private String getTargetingValues(ExtImpYieldlab extImpYieldlab) {\n+        final URIBuilder uriBuilder = new URIBuilder();\n+\n+        for (Map.Entry<String, String> targeting : extImpYieldlab.getTargeting().entrySet()) {\n+            uriBuilder.addParameter(targeting.getKey(), targeting.getValue());\n+        }\n+\n+        return uriBuilder.toString().replace(\"?\", \"\");\n+    }\n+\n+    private String getGdprParameter(Regs regs) {\n+        String gdprString = \"\";\n+\n+        if (regs != null) {\n+            final Integer gdpr = regs.getExt() != null ? regs.getExt().getGdpr() : null;\n+            if (gdpr != null && (gdpr == 0 || gdpr == 1)) {\n+                gdprString = String.valueOf(gdpr);\n+            }\n+        }\n+        return gdprString;\n+    }\n+\n+    private String getConsentParameter(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        return extUser != null ? extUser.getConsent() : null;\n+    }\n+\n+    private static MultiMap getHeaders(BidRequest request) {\n+        final MultiMap headers = HttpUtil.headers();\n+        final Site site = request.getSite();\n+\n+        if (site != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER.toString(), site.getPage());\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER.toString(), device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER.toString(), device.getIp());\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.COOKIE_HEADER.toString(),\n+                    String.format(\"id=%s\", user.getBuyeruid()));\n+        }\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final List<YieldlabResponse> yieldlabResponses;\n+        try {\n+            yieldlabResponses = decodeBodyToBidList(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (int i = 0; i < yieldlabResponses.size(); i++) {\n+            final YieldlabResponse yieldlabResponse = yieldlabResponses.get(i);\n+\n+            final String[] sizeParts = yieldlabResponse.getAdSize().split(AD_SIZE_SEPARATOR);\n+            final int width;\n+            final int height;\n+            if (sizeParts.length != 2) {\n+                width = 0;\n+                height = 0;\n+            } else {\n+                width = Integer.parseInt(sizeParts[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY4MzIzNg==", "bodyText": "declare near usage.\nAnd rename currentImp", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488683236", "createdAt": "2020-09-15T13:49:43Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(makeUrl(modifiedExtImp, request))\n+                        .body(null)\n+                        .headers(getHeaders(request))\n+                        .payload(null)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpYieldlab parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDLAB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private ExtImpYieldlab modifyExtImp(List<ExtImpYieldlab> extImps) {\n+        final List<String> adSlotIds = extImps.stream()\n+                .map(ExtImpYieldlab::getAdslotId)\n+                .collect(Collectors.toList());\n+\n+        final Map<String, String> targeting = extImps.stream()\n+                .map(ExtImpYieldlab::getTargeting)\n+                .flatMap(map -> map.entrySet().stream())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        final String adSlotIdsParams = adSlotIds.stream().sorted().collect(Collectors.joining(AD_SLOT_ID_SEPARATOR));\n+        return ExtImpYieldlab.of(adSlotIdsParams, null, null, targeting, null);\n+    }\n+\n+    private String makeUrl(ExtImpYieldlab extImpYieldlab, BidRequest request) {\n+        // for passing validation tests\n+        final String timestamp = isDebugEnabled(request) ? \"200000\" : String.valueOf(Instant.now().getEpochSecond());\n+\n+        final String join = String.format(\"%s/%s\", endpointUrl, extImpYieldlab.getAdslotId());\n+\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(join)\n+                .addParameter(\"content\", \"json\")\n+                .addParameter(\"pvid\", \"true\")\n+                .addParameter(\"ts\", timestamp)\n+                .addParameter(\"t\", getTargetingValues(extImpYieldlab));\n+\n+        final User user = request.getUser();\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            uriBuilder.addParameter(\"ids\", String.join(\"ylid:\", user.getBuyeruid()));\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            uriBuilder.addParameter(\"yl_rtb_ifa\", device.getIfa())\n+                    .addParameter(\"yl_rtb_devicetype\", String.format(\"%s\", device.getDevicetype()));\n+\n+            final Integer connectiontype = device.getConnectiontype();\n+            if (connectiontype != null) {\n+                uriBuilder.addParameter(\"yl_rtb_connectiontype\", String.format(\"%s\", connectiontype));\n+            }\n+\n+            final Geo geo = device.getGeo();\n+            if (geo != null) {\n+                uriBuilder.addParameter(\"lat\", String.format(\"%s\", geo.getLat()))\n+                        .addParameter(\"lon\", String.format(\"%s\", geo.getLon()));\n+            }\n+        }\n+\n+        final App app = request.getApp();\n+        if (app != null) {\n+            uriBuilder.addParameter(\"pubappname\", app.getName())\n+                    .addParameter(\"pubbundlename\", app.getBundle());\n+        }\n+\n+        final String gdpr = getGdprParameter(request.getRegs());\n+        final String consent = getConsentParameter(request.getUser());\n+        if (StringUtils.isNotBlank(gdpr) && StringUtils.isNotBlank(consent)) {\n+            uriBuilder.addParameter(\"gdpr\", gdpr)\n+                    .addParameter(\"consent\", consent);\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    /**\n+     * Determines debug flag from {@link BidRequest} or {@link ExtRequest}.\n+     */\n+    private boolean isDebugEnabled(BidRequest bidRequest) {\n+        if (Objects.equals(bidRequest.getTest(), 1)) {\n+            return true;\n+        }\n+\n+        final ExtRequest extRequest = bidRequest.getExt();\n+        final ExtRequestPrebid extRequestPrebid = extRequest != null ? extRequest.getPrebid() : null;\n+        return extRequestPrebid != null && Objects.equals(extRequestPrebid.getDebug(), 1);\n+    }\n+\n+    private String getTargetingValues(ExtImpYieldlab extImpYieldlab) {\n+        final URIBuilder uriBuilder = new URIBuilder();\n+\n+        for (Map.Entry<String, String> targeting : extImpYieldlab.getTargeting().entrySet()) {\n+            uriBuilder.addParameter(targeting.getKey(), targeting.getValue());\n+        }\n+\n+        return uriBuilder.toString().replace(\"?\", \"\");\n+    }\n+\n+    private String getGdprParameter(Regs regs) {\n+        String gdprString = \"\";\n+\n+        if (regs != null) {\n+            final Integer gdpr = regs.getExt() != null ? regs.getExt().getGdpr() : null;\n+            if (gdpr != null && (gdpr == 0 || gdpr == 1)) {\n+                gdprString = String.valueOf(gdpr);\n+            }\n+        }\n+        return gdprString;\n+    }\n+\n+    private String getConsentParameter(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        return extUser != null ? extUser.getConsent() : null;\n+    }\n+\n+    private static MultiMap getHeaders(BidRequest request) {\n+        final MultiMap headers = HttpUtil.headers();\n+        final Site site = request.getSite();\n+\n+        if (site != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER.toString(), site.getPage());\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER.toString(), device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER.toString(), device.getIp());\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.COOKIE_HEADER.toString(),\n+                    String.format(\"id=%s\", user.getBuyeruid()));\n+        }\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final List<YieldlabResponse> yieldlabResponses;\n+        try {\n+            yieldlabResponses = decodeBodyToBidList(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (int i = 0; i < yieldlabResponses.size(); i++) {\n+            final YieldlabResponse yieldlabResponse = yieldlabResponses.get(i);\n+\n+            final String[] sizeParts = yieldlabResponse.getAdSize().split(AD_SIZE_SEPARATOR);\n+            final int width;\n+            final int height;\n+            if (sizeParts.length != 2) {\n+                width = 0;\n+                height = 0;\n+            } else {\n+                width = Integer.parseInt(sizeParts[0]);\n+                height = Integer.parseInt(sizeParts[1]);\n+            }\n+\n+            final Imp imp = bidRequest.getImp().get(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY4NTg2OA==", "bodyText": "if null = Exception", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488685868", "createdAt": "2020-09-15T13:53:05Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(makeUrl(modifiedExtImp, request))\n+                        .body(null)\n+                        .headers(getHeaders(request))\n+                        .payload(null)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpYieldlab parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDLAB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private ExtImpYieldlab modifyExtImp(List<ExtImpYieldlab> extImps) {\n+        final List<String> adSlotIds = extImps.stream()\n+                .map(ExtImpYieldlab::getAdslotId)\n+                .collect(Collectors.toList());\n+\n+        final Map<String, String> targeting = extImps.stream()\n+                .map(ExtImpYieldlab::getTargeting)\n+                .flatMap(map -> map.entrySet().stream())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        final String adSlotIdsParams = adSlotIds.stream().sorted().collect(Collectors.joining(AD_SLOT_ID_SEPARATOR));\n+        return ExtImpYieldlab.of(adSlotIdsParams, null, null, targeting, null);\n+    }\n+\n+    private String makeUrl(ExtImpYieldlab extImpYieldlab, BidRequest request) {\n+        // for passing validation tests\n+        final String timestamp = isDebugEnabled(request) ? \"200000\" : String.valueOf(Instant.now().getEpochSecond());\n+\n+        final String join = String.format(\"%s/%s\", endpointUrl, extImpYieldlab.getAdslotId());\n+\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(join)\n+                .addParameter(\"content\", \"json\")\n+                .addParameter(\"pvid\", \"true\")\n+                .addParameter(\"ts\", timestamp)\n+                .addParameter(\"t\", getTargetingValues(extImpYieldlab));\n+\n+        final User user = request.getUser();\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            uriBuilder.addParameter(\"ids\", String.join(\"ylid:\", user.getBuyeruid()));\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            uriBuilder.addParameter(\"yl_rtb_ifa\", device.getIfa())\n+                    .addParameter(\"yl_rtb_devicetype\", String.format(\"%s\", device.getDevicetype()));\n+\n+            final Integer connectiontype = device.getConnectiontype();\n+            if (connectiontype != null) {\n+                uriBuilder.addParameter(\"yl_rtb_connectiontype\", String.format(\"%s\", connectiontype));\n+            }\n+\n+            final Geo geo = device.getGeo();\n+            if (geo != null) {\n+                uriBuilder.addParameter(\"lat\", String.format(\"%s\", geo.getLat()))\n+                        .addParameter(\"lon\", String.format(\"%s\", geo.getLon()));\n+            }\n+        }\n+\n+        final App app = request.getApp();\n+        if (app != null) {\n+            uriBuilder.addParameter(\"pubappname\", app.getName())\n+                    .addParameter(\"pubbundlename\", app.getBundle());\n+        }\n+\n+        final String gdpr = getGdprParameter(request.getRegs());\n+        final String consent = getConsentParameter(request.getUser());\n+        if (StringUtils.isNotBlank(gdpr) && StringUtils.isNotBlank(consent)) {\n+            uriBuilder.addParameter(\"gdpr\", gdpr)\n+                    .addParameter(\"consent\", consent);\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    /**\n+     * Determines debug flag from {@link BidRequest} or {@link ExtRequest}.\n+     */\n+    private boolean isDebugEnabled(BidRequest bidRequest) {\n+        if (Objects.equals(bidRequest.getTest(), 1)) {\n+            return true;\n+        }\n+\n+        final ExtRequest extRequest = bidRequest.getExt();\n+        final ExtRequestPrebid extRequestPrebid = extRequest != null ? extRequest.getPrebid() : null;\n+        return extRequestPrebid != null && Objects.equals(extRequestPrebid.getDebug(), 1);\n+    }\n+\n+    private String getTargetingValues(ExtImpYieldlab extImpYieldlab) {\n+        final URIBuilder uriBuilder = new URIBuilder();\n+\n+        for (Map.Entry<String, String> targeting : extImpYieldlab.getTargeting().entrySet()) {\n+            uriBuilder.addParameter(targeting.getKey(), targeting.getValue());\n+        }\n+\n+        return uriBuilder.toString().replace(\"?\", \"\");\n+    }\n+\n+    private String getGdprParameter(Regs regs) {\n+        String gdprString = \"\";\n+\n+        if (regs != null) {\n+            final Integer gdpr = regs.getExt() != null ? regs.getExt().getGdpr() : null;\n+            if (gdpr != null && (gdpr == 0 || gdpr == 1)) {\n+                gdprString = String.valueOf(gdpr);\n+            }\n+        }\n+        return gdprString;\n+    }\n+\n+    private String getConsentParameter(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        return extUser != null ? extUser.getConsent() : null;\n+    }\n+\n+    private static MultiMap getHeaders(BidRequest request) {\n+        final MultiMap headers = HttpUtil.headers();\n+        final Site site = request.getSite();\n+\n+        if (site != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER.toString(), site.getPage());\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER.toString(), device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER.toString(), device.getIp());\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.COOKIE_HEADER.toString(),\n+                    String.format(\"id=%s\", user.getBuyeruid()));\n+        }\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final List<YieldlabResponse> yieldlabResponses;\n+        try {\n+            yieldlabResponses = decodeBodyToBidList(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (int i = 0; i < yieldlabResponses.size(); i++) {\n+            final YieldlabResponse yieldlabResponse = yieldlabResponses.get(i);\n+\n+            final String[] sizeParts = yieldlabResponse.getAdSize().split(AD_SIZE_SEPARATOR);\n+            final int width;\n+            final int height;\n+            if (sizeParts.length != 2) {\n+                width = 0;\n+                height = 0;\n+            } else {\n+                width = Integer.parseInt(sizeParts[0]);\n+                height = Integer.parseInt(sizeParts[1]);\n+            }\n+\n+            final Imp imp = bidRequest.getImp().get(i);\n+            final ExtImpYieldlab filteredExtImp = filterExtImp(yieldlabResponse.getId(), extImps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY4NjUwNw==", "bodyText": "Where are you find this value ?", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488686507", "createdAt": "2020-09-15T13:53:55Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldlab>> YIELDLAB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldlab>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"EUR\";\n+    private static final String AD_SLOT_ID_SEPARATOR = \",\";\n+    private static final String AD_SIZE_SEPARATOR = \"x\";\n+    private static final String CREATIVE_ID = \"%s%s%s\";\n+    private static final String AD_SOURCE_BANNER = \"<script src=\\\"%s\\\"></script>\";\n+    private static final String AD_SOURCE_URL = \"https://ad.yieldlab.net/d/%s/%s/%s?%s\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(makeUrl(modifiedExtImp, request))\n+                        .body(null)\n+                        .headers(getHeaders(request))\n+                        .payload(null)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpYieldlab parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDLAB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private ExtImpYieldlab modifyExtImp(List<ExtImpYieldlab> extImps) {\n+        final List<String> adSlotIds = extImps.stream()\n+                .map(ExtImpYieldlab::getAdslotId)\n+                .collect(Collectors.toList());\n+\n+        final Map<String, String> targeting = extImps.stream()\n+                .map(ExtImpYieldlab::getTargeting)\n+                .flatMap(map -> map.entrySet().stream())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        final String adSlotIdsParams = adSlotIds.stream().sorted().collect(Collectors.joining(AD_SLOT_ID_SEPARATOR));\n+        return ExtImpYieldlab.of(adSlotIdsParams, null, null, targeting, null);\n+    }\n+\n+    private String makeUrl(ExtImpYieldlab extImpYieldlab, BidRequest request) {\n+        // for passing validation tests\n+        final String timestamp = isDebugEnabled(request) ? \"200000\" : String.valueOf(Instant.now().getEpochSecond());\n+\n+        final String join = String.format(\"%s/%s\", endpointUrl, extImpYieldlab.getAdslotId());\n+\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(join)\n+                .addParameter(\"content\", \"json\")\n+                .addParameter(\"pvid\", \"true\")\n+                .addParameter(\"ts\", timestamp)\n+                .addParameter(\"t\", getTargetingValues(extImpYieldlab));\n+\n+        final User user = request.getUser();\n+        if (user != null && StringUtils.isNotBlank(user.getBuyeruid())) {\n+            uriBuilder.addParameter(\"ids\", String.join(\"ylid:\", user.getBuyeruid()));\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            uriBuilder.addParameter(\"yl_rtb_ifa\", device.getIfa())\n+                    .addParameter(\"yl_rtb_devicetype\", String.format(\"%s\", device.getDevicetype()));\n+\n+            final Integer connectiontype = device.getConnectiontype();\n+            if (connectiontype != null) {\n+                uriBuilder.addParameter(\"yl_rtb_connectiontype\", String.format(\"%s\", connectiontype));\n+            }\n+\n+            final Geo geo = device.getGeo();\n+            if (geo != null) {\n+                uriBuilder.addParameter(\"lat\", String.format(\"%s\", geo.getLat()))\n+                        .addParameter(\"lon\", String.format(\"%s\", geo.getLon()));\n+            }\n+        }\n+\n+        final App app = request.getApp();\n+        if (app != null) {\n+            uriBuilder.addParameter(\"pubappname\", app.getName())\n+                    .addParameter(\"pubbundlename\", app.getBundle());\n+        }\n+\n+        final String gdpr = getGdprParameter(request.getRegs());\n+        final String consent = getConsentParameter(request.getUser());\n+        if (StringUtils.isNotBlank(gdpr) && StringUtils.isNotBlank(consent)) {\n+            uriBuilder.addParameter(\"gdpr\", gdpr)\n+                    .addParameter(\"consent\", consent);\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    /**\n+     * Determines debug flag from {@link BidRequest} or {@link ExtRequest}.\n+     */\n+    private boolean isDebugEnabled(BidRequest bidRequest) {\n+        if (Objects.equals(bidRequest.getTest(), 1)) {\n+            return true;\n+        }\n+\n+        final ExtRequest extRequest = bidRequest.getExt();\n+        final ExtRequestPrebid extRequestPrebid = extRequest != null ? extRequest.getPrebid() : null;\n+        return extRequestPrebid != null && Objects.equals(extRequestPrebid.getDebug(), 1);\n+    }\n+\n+    private String getTargetingValues(ExtImpYieldlab extImpYieldlab) {\n+        final URIBuilder uriBuilder = new URIBuilder();\n+\n+        for (Map.Entry<String, String> targeting : extImpYieldlab.getTargeting().entrySet()) {\n+            uriBuilder.addParameter(targeting.getKey(), targeting.getValue());\n+        }\n+\n+        return uriBuilder.toString().replace(\"?\", \"\");\n+    }\n+\n+    private String getGdprParameter(Regs regs) {\n+        String gdprString = \"\";\n+\n+        if (regs != null) {\n+            final Integer gdpr = regs.getExt() != null ? regs.getExt().getGdpr() : null;\n+            if (gdpr != null && (gdpr == 0 || gdpr == 1)) {\n+                gdprString = String.valueOf(gdpr);\n+            }\n+        }\n+        return gdprString;\n+    }\n+\n+    private String getConsentParameter(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        return extUser != null ? extUser.getConsent() : null;\n+    }\n+\n+    private static MultiMap getHeaders(BidRequest request) {\n+        final MultiMap headers = HttpUtil.headers();\n+        final Site site = request.getSite();\n+\n+        if (site != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER.toString(), site.getPage());\n+        }\n+\n+        final Device device = request.getDevice();\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER.toString(), device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER.toString(), device.getIp());\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.COOKIE_HEADER.toString(),\n+                    String.format(\"id=%s\", user.getBuyeruid()));\n+        }\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final List<YieldlabResponse> yieldlabResponses;\n+        try {\n+            yieldlabResponses = decodeBodyToBidList(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpYieldlab extImp = parseImpExt(imp);\n+                extImps.add(extImp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (int i = 0; i < yieldlabResponses.size(); i++) {\n+            final YieldlabResponse yieldlabResponse = yieldlabResponses.get(i);\n+\n+            final String[] sizeParts = yieldlabResponse.getAdSize().split(AD_SIZE_SEPARATOR);\n+            final int width;\n+            final int height;\n+            if (sizeParts.length != 2) {\n+                width = 0;\n+                height = 0;\n+            } else {\n+                width = Integer.parseInt(sizeParts[0]);\n+                height = Integer.parseInt(sizeParts[1]);\n+            }\n+\n+            final Imp imp = bidRequest.getImp().get(i);\n+            final ExtImpYieldlab filteredExtImp = filterExtImp(yieldlabResponse.getId(), extImps);\n+\n+            final Bid.BidBuilder updatedBid = Bid.builder()\n+                    .id(String.valueOf(yieldlabResponse.getId()))\n+                    .price(yieldlabResponse.getPrice().multiply(BigDecimal.valueOf(0.00810799)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY4OTgyNQ==", "bodyText": "Refactro method ordering pls", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488689825", "createdAt": "2020-09-15T13:58:04Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Geo;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequest;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRequestPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YieldlabBidder implements Bidder<Void> {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY5MjEwMA==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488692100", "createdAt": "2020-09-15T14:00:56Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/yieldlab/YieldlabBidderTest.java", "diffHunk": "@@ -0,0 +1,305 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.assertj.core.api.Assertions.within;\n+\n+public class YieldlabBidderTest extends VertxTest {\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private YieldlabBidder yieldlabBidder;\n+\n+    @Before\n+    public void setUp() {\n+        yieldlabBidder = new YieldlabBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> new YieldlabBidder(\"invalid_url\", jacksonMapper))\n+                .withMessage(\"URL supplied is not valid: invalid_url\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = yieldlabBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = yieldlabBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSendRequestToModifiedUrlWithHeaders() {\n+        // given\n+\n+        Map<String, String> targeting = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY5MjUzMQ==", "bodyText": "Lets use builder when we have more than 3 parameters", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r488692531", "createdAt": "2020-09-15T14:01:28Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/yieldlab/YieldlabBidderTest.java", "diffHunk": "@@ -0,0 +1,305 @@\n+package org.prebid.server.bidder.yieldlab;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.yieldlab.model.YieldlabResponse;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.yieldlab.ExtImpYieldlab;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.assertj.core.api.Assertions.within;\n+\n+public class YieldlabBidderTest extends VertxTest {\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private YieldlabBidder yieldlabBidder;\n+\n+    @Before\n+    public void setUp() {\n+        yieldlabBidder = new YieldlabBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> new YieldlabBidder(\"invalid_url\", jacksonMapper))\n+                .withMessage(\"URL supplied is not valid: invalid_url\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = yieldlabBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = yieldlabBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSendRequestToModifiedUrlWithHeaders() {\n+        // given\n+\n+        Map<String, String> targeting = new HashMap<>();\n+        targeting.put(\"key1\", \"value1\");\n+        targeting.put(\"key2\", \"value2\");\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .banner(Banner.builder().w(1).h(1).build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpYieldlab.of(\"1\", \"2\", \"adSize\", targeting, \"extId\"))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7245068dcea134ce4365cafd4644caca82e17b"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "addc57bedc433eb0f0ac88313cb31a8cd95df0ef", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/addc57bedc433eb0f0ac88313cb31a8cd95df0ef", "committedDate": "2020-09-17T16:28:37Z", "message": "Merge branch 'master' into add-yieldlab-bidder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c1ad867965ba2cc915f64afb614b7f81c33dcf0", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/3c1ad867965ba2cc915f64afb614b7f81c33dcf0", "committedDate": "2020-09-18T15:09:56Z", "message": "Merge branch 'master' into add-yieldlab-bidder\n\n# Conflicts:\n#\tsrc/test/resources/org/prebid/server/it/test-application.properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e3a35df4926ca020af0ca9302ac4fae54ea53f3", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/0e3a35df4926ca020af0ca9302ac4fae54ea53f3", "committedDate": "2020-09-18T20:37:18Z", "message": "Refactoring methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzM0OTc5", "url": "https://github.com/prebid/prebid-server-java/pull/828#pullrequestreview-493334979", "createdAt": "2020-09-22T10:48:31Z", "commit": {"oid": "0e3a35df4926ca020af0ca9302ac4fae54ea53f3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo0ODozMVrOHV0V1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo0ODozMVrOHV0V1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzOTcwMQ==", "bodyText": "use .map()", "url": "https://github.com/prebid/prebid-server-java/pull/828#discussion_r492639701", "createdAt": "2020-09-22T10:48:31Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yieldlab/YieldlabBidder.java", "diffHunk": "@@ -69,33 +69,23 @@ public YieldlabBidder(String endpointUrl, JacksonMapper mapper) {\n \n     @Override\n     public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n-        final List<BidderError> errors = new ArrayList<>();\n-        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n-\n-        if (CollectionUtils.isEmpty(request.getImp())) {\n-            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n-            return Result.of(Collections.emptyList(), errors);\n-        }\n-\n-        for (Imp imp : request.getImp()) {\n-            try {\n-                final ExtImpYieldlab extImp = parseImpExt(imp);\n-                extImps.add(extImp);\n-            } catch (PreBidException e) {\n-                errors.add(BidderError.badInput(e.getMessage()));\n-            }\n-        }\n+        final List<ExtImpYieldlab> extImps = collectImpExt(request.getImp());\n+        final ExtImpYieldlab modifiedExtImp = constructExtImp(extImps);\n \n-        final ExtImpYieldlab modifiedExtImp = modifyExtImp(extImps);\n         return Result.of(Collections.singletonList(\n                 HttpRequest.<Void>builder()\n                         .method(HttpMethod.GET)\n                         .uri(makeUrl(modifiedExtImp, request))\n                         .body(null)\n                         .headers(getHeaders(request))\n                         .payload(null)\n-                        .build()),\n-                errors);\n+                        .build()), Collections.emptyList());\n+    }\n+\n+    private List<ExtImpYieldlab> collectImpExt(List<Imp> imps) {\n+        final List<ExtImpYieldlab> extImps = new ArrayList<>();\n+        imps.forEach(imp -> extImps.add(parseImpExt(imp)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e3a35df4926ca020af0ca9302ac4fae54ea53f3"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fb4a82b36842ea5a19c30a408ea0cf87e3b18bd", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/5fb4a82b36842ea5a19c30a408ea0cf87e3b18bd", "committedDate": "2020-09-22T11:22:10Z", "message": "Use stream for getting list of extImps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzYyOTM1", "url": "https://github.com/prebid/prebid-server-java/pull/828#pullrequestreview-493362935", "createdAt": "2020-09-22T11:28:46Z", "commit": {"oid": "5fb4a82b36842ea5a19c30a408ea0cf87e3b18bd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e551cf340069092572c0e8c7d90b5e67ece2f646", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/e551cf340069092572c0e8c7d90b5e67ece2f646", "committedDate": "2020-09-22T13:02:51Z", "message": "Merge branch 'master' into add-yieldlab-bidder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNDQ4MDgx", "url": "https://github.com/prebid/prebid-server-java/pull/828#pullrequestreview-493448081", "createdAt": "2020-09-22T13:17:34Z", "commit": {"oid": "e551cf340069092572c0e8c7d90b5e67ece2f646"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3106, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}