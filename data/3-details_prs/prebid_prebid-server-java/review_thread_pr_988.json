{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNjg4MjU2", "number": 988, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1NTozOFrOE6BwHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDowMjowMFrOE6B7VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjgxNTY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1NTozOFrOH01-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1NTozOFrOH01-yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3MjQyNg==", "bodyText": "Seems we get here not domain but full url.", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525172426", "createdAt": "2020-11-17T13:55:38Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "diffHunk": "@@ -92,10 +96,20 @@ private BidRequest makeBidRequest(BidRequest request) {\n                 .build();\n     }\n \n-    private static boolean isSecure(Site site) {\n-        return site != null\n-                && StringUtils.isNotBlank(site.getPage())\n-                && site.getPage().startsWith(\"https\");\n+    private static String resolveDomain(BidRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b6ca01cf6562e45eed33d35c080d495e0ed205c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjgxNzMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1NTo1N1rOH01_sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1NTo1N1rOH01_sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3MjY1OQ==", "bodyText": "Let's make page variable.", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525172659", "createdAt": "2020-11-17T13:55:57Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "diffHunk": "@@ -92,10 +96,20 @@ private BidRequest makeBidRequest(BidRequest request) {\n                 .build();\n     }\n \n-    private static boolean isSecure(Site site) {\n-        return site != null\n-                && StringUtils.isNotBlank(site.getPage())\n-                && site.getPage().startsWith(\"https\");\n+    private static String resolveDomain(BidRequest request) {\n+        final Site site = request.getSite();\n+        if (Objects.nonNull(site) && StringUtils.isNotBlank(site.getPage())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b6ca01cf6562e45eed33d35c080d495e0ed205c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjgyMDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1Njo0NVrOH02Bkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1Njo0NVrOH02Bkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3MzEzOQ==", "bodyText": "Pls avoid Objects.nonNull(..) helper methods for simple cases.", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525173139", "createdAt": "2020-11-17T13:56:45Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "diffHunk": "@@ -92,10 +96,20 @@ private BidRequest makeBidRequest(BidRequest request) {\n                 .build();\n     }\n \n-    private static boolean isSecure(Site site) {\n-        return site != null\n-                && StringUtils.isNotBlank(site.getPage())\n-                && site.getPage().startsWith(\"https\");\n+    private static String resolveDomain(BidRequest request) {\n+        final Site site = request.getSite();\n+        if (Objects.nonNull(site) && StringUtils.isNotBlank(site.getPage())) {\n+            return site.getPage();\n+        }\n+        final App app = request.getApp();\n+        if (Objects.nonNull(app)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b6ca01cf6562e45eed33d35c080d495e0ed205c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjgzMzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1OTo0MVrOH02JxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1OTo0MVrOH02JxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NTIzNw==", "bodyText": "Pls use HttpUtil instead.", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525175237", "createdAt": "2020-11-17T13:59:41Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "diffHunk": "@@ -181,26 +223,29 @@ private static MultiMap makeHeaders(BidRequest request) {\n \n         final Device device = request.getDevice();\n         if (device != null) {\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER,\n-                    device.getUa());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER,\n-                    device.getIp());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.ACCEPT_LANGUAGE_HEADER,\n-                    device.getLanguage());\n-            if (device.getDnt() != null) {\n-                HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.DNT_HEADER,\n-                        String.valueOf(device.getDnt()));\n+            addHeader(headers, \"User-Agent\", device.getUa());\n+            addHeader(headers, \"X-Forwarded-For\", device.getIp());\n+            addHeader(headers, \"Accept-Language\", device.getLanguage());\n+            final Integer dnt = device.getDnt();\n+            if (Objects.nonNull(dnt)) {\n+                addHeader(headers, \"DNT\", dnt.toString());\n             }\n         }\n \n         final Site site = request.getSite();\n-        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, site.getPage());\n+        if (site != null) {\n+            addHeader(headers, \"Referer\", site.getPage());\n         }\n \n         return headers;\n     }\n \n+    private static void addHeader(MultiMap headers, CharSequence header, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b6ca01cf6562e45eed33d35c080d495e0ed205c"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mjg0MDQ2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDowMToxMFrOH02N7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDowMToxMFrOH02N7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NjMwMg==", "bodyText": "Minor. Pls use One word instead of just 1 number. Check similar cases.", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525176302", "createdAt": "2020-11-17T14:01:10Z", "author": {"login": "rpanchyk"}, "path": "src/test/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidderTest.java", "diffHunk": "@@ -232,6 +236,187 @@ public void makeHttpRequestsShouldModifyImpWhenExtImpEmaDigitalContainsRequiredV\n                 .containsOnly(expectedImp);\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldRemoveVast40ProtocolFromVideo() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder()\n+                                .mimes(Collections.singletonList(\"someMime\"))\n+                                .protocols(Arrays.asList(1, 7, 2))\n+                                .w(100)\n+                                .h(100)\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        final Imp expectedImp = Imp.builder()\n+                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                .video(Video.builder()\n+                        .mimes(Collections.singletonList(\"someMime\"))\n+                        .protocols(Arrays.asList(1, 2))\n+                        .w(100)\n+                        .h(100)\n+                        .build())\n+                .tagid(\"123\")\n+                .secure(0)\n+                .bidfloor(new BigDecimal(\"2\"))\n+                .bidfloorcur(\"USD\")\n+                .build();\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(expectedImp);\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionIfVideoDoNotHaveAtLeastOneSizeParameter() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder().mimes(Collections.singletonList(\"someMime\")).build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Video: Need at least one size to build request\"));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionIfVideoDoNotHaveAnyMimeParameter() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder().build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Video: missing required field mimes\"));\n+    }\n+\n+    @Test\n+    public void requestSecureShouldBe1IfPageStartsWithHttps() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b6ca01cf6562e45eed33d35c080d495e0ed205c"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mjg0NDM3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDowMjowMFrOH02QUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDowMjowMFrOH02QUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NjkxNA==", "bodyText": "Seems not domain but protocol or url.", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525176914", "createdAt": "2020-11-17T14:02:00Z", "author": {"login": "rpanchyk"}, "path": "src/test/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidderTest.java", "diffHunk": "@@ -232,6 +236,187 @@ public void makeHttpRequestsShouldModifyImpWhenExtImpEmaDigitalContainsRequiredV\n                 .containsOnly(expectedImp);\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldRemoveVast40ProtocolFromVideo() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder()\n+                                .mimes(Collections.singletonList(\"someMime\"))\n+                                .protocols(Arrays.asList(1, 7, 2))\n+                                .w(100)\n+                                .h(100)\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        final Imp expectedImp = Imp.builder()\n+                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                .video(Video.builder()\n+                        .mimes(Collections.singletonList(\"someMime\"))\n+                        .protocols(Arrays.asList(1, 2))\n+                        .w(100)\n+                        .h(100)\n+                        .build())\n+                .tagid(\"123\")\n+                .secure(0)\n+                .bidfloor(new BigDecimal(\"2\"))\n+                .bidfloorcur(\"USD\")\n+                .build();\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(expectedImp);\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionIfVideoDoNotHaveAtLeastOneSizeParameter() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder().mimes(Collections.singletonList(\"someMime\")).build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Video: Need at least one size to build request\"));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionIfVideoDoNotHaveAnyMimeParameter() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder().build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Video: missing required field mimes\"));\n+    }\n+\n+    @Test\n+    public void requestSecureShouldBe1IfPageStartsWithHttps() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .banner(Banner.builder().w(100).h(100).build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .site(Site.builder().page(\"https://exmaple/\").build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .extracting(request -> request.getImp().get(0).getSecure())\n+                .containsOnly(1);\n+    }\n+\n+    @Test\n+    public void requestSecureShouldBe1IfDomainStartsWithHttps() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b6ca01cf6562e45eed33d35c080d495e0ed205c"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3954, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}