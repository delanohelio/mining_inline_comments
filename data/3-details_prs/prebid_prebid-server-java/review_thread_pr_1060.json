{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NDI3MTA0", "number": 1060, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozMzo1NlrOFCVogQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoxMzoyM1rOFCXPkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTk1OTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/smaato/SmaatoBidder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozMzo1NlrOIBbu8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozNToyOVrOIBb08A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3Mzg3NA==", "bodyText": "Minor. Since data is ObjectNode we can do the following:\nfinal ObjectNode extDataNode = userExt != null ? userExt.getData() : null;\nif (extDataNode == null) {\n    return user;\n}", "url": "https://github.com/prebid/prebid-server-java/pull/1060#discussion_r538373874", "createdAt": "2020-12-08T13:33:56Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/smaato/SmaatoBidder.java", "diffHunk": "@@ -162,37 +166,38 @@ private Site modifySite(Site site, String firstPublisherId) {\n     }\n \n     private User modifyUser(User user) {\n-        final ExtUser ext = user.getExt();\n-        if (ext == null) {\n-            return user;\n+        if (user == null) {\n+            return null;\n         }\n \n-        final ObjectNode extDataNode = ext.getData();\n-        if (extDataNode == null) {\n+        final ExtUser userExt = user.getExt();\n+        if (userExt == null || userExt.getData() == null || userExt.getData().isNull()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed63998ba566bf858e2e4769b34220e644b08eb1"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3NTQwOA==", "bodyText": "It is not critical and your solution even is more safe, so just fyi.", "url": "https://github.com/prebid/prebid-server-java/pull/1060#discussion_r538375408", "createdAt": "2020-12-08T13:35:29Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/smaato/SmaatoBidder.java", "diffHunk": "@@ -162,37 +166,38 @@ private Site modifySite(Site site, String firstPublisherId) {\n     }\n \n     private User modifyUser(User user) {\n-        final ExtUser ext = user.getExt();\n-        if (ext == null) {\n-            return user;\n+        if (user == null) {\n+            return null;\n         }\n \n-        final ObjectNode extDataNode = ext.getData();\n-        if (extDataNode == null) {\n+        final ExtUser userExt = user.getExt();\n+        if (userExt == null || userExt.getData() == null || userExt.getData().isNull()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3Mzg3NA=="}, "originalCommit": {"oid": "ed63998ba566bf858e2e4769b34220e644b08eb1"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDE1NjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/smaato/SmaatoBidder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDowMjo1MlrOIBdsnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoxODoxM1rOIBes4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwNjA0NQ==", "bodyText": "As we have ObjectNode it has method\npublic JsonNodeType getNodeType() { return JsonNodeType.OBJECT; }\nso method isNull will always return false, please use isEmpty() method", "url": "https://github.com/prebid/prebid-server-java/pull/1060#discussion_r538406045", "createdAt": "2020-12-08T14:02:52Z", "author": {"login": "snahornyi"}, "path": "src/main/java/org/prebid/server/bidder/smaato/SmaatoBidder.java", "diffHunk": "@@ -162,37 +166,37 @@ private Site modifySite(Site site, String firstPublisherId) {\n     }\n \n     private User modifyUser(User user) {\n-        final ExtUser ext = user.getExt();\n-        if (ext == null) {\n-            return user;\n+        if (user == null) {\n+            return null;\n         }\n \n-        final ObjectNode extDataNode = ext.getData();\n-        if (extDataNode == null) {\n+        final ExtUser userExt = user.getExt();\n+        final ObjectNode extDataNode = userExt != null ? userExt.getData() : null;\n+        if (extDataNode == null || extDataNode.isNull()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0020160439194141ddbdb10df388ae6b4d7f984d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMjQ5OA==", "bodyText": "Nice catch", "url": "https://github.com/prebid/prebid-server-java/pull/1060#discussion_r538422498", "createdAt": "2020-12-08T14:18:13Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/smaato/SmaatoBidder.java", "diffHunk": "@@ -162,37 +166,37 @@ private Site modifySite(Site site, String firstPublisherId) {\n     }\n \n     private User modifyUser(User user) {\n-        final ExtUser ext = user.getExt();\n-        if (ext == null) {\n-            return user;\n+        if (user == null) {\n+            return null;\n         }\n \n-        final ObjectNode extDataNode = ext.getData();\n-        if (extDataNode == null) {\n+        final ExtUser userExt = user.getExt();\n+        final ObjectNode extDataNode = userExt != null ? userExt.getData() : null;\n+        if (extDataNode == null || extDataNode.isNull()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwNjA0NQ=="}, "originalCommit": {"oid": "0020160439194141ddbdb10df388ae6b4d7f984d"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDIwMzcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/smaato/SmaatoBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoxMDoyOVrOIBeK8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoxMDoyOVrOIBeK8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQxMzgwOQ==", "bodyText": "Minor. It can be multiple bids, seems it will be helpful to know id of bidder which cause error", "url": "https://github.com/prebid/prebid-server-java/pull/1060#discussion_r538413809", "createdAt": "2020-12-08T14:10:29Z", "author": {"login": "snahornyi"}, "path": "src/main/java/org/prebid/server/bidder/smaato/SmaatoBidder.java", "diffHunk": "@@ -218,31 +224,29 @@ private User modifyUser(User user) {\n             return Result.empty();\n         }\n \n-        final List<BidderError> errors = new ArrayList<>();\n-        final List<BidderBid> bidderBids = bidResponse.getSeatbid().stream()\n+        return Result.withValues(bidResponse.getSeatbid().stream()\n                 .filter(Objects::nonNull)\n                 .map(SeatBid::getBid)\n                 .filter(Objects::nonNull)\n                 .flatMap(Collection::stream)\n-                .map(bid -> bidderBid(bid, bidResponse.getCur(), headers, errors))\n+                .map(bid -> bidderBid(bid, bidResponse.getCur(), headers))\n                 .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n-        return Result.of(bidderBids, errors);\n+                .collect(Collectors.toList()));\n     }\n \n-    private BidderBid bidderBid(Bid bid, String currency, MultiMap headers, List<BidderError> errors) {\n-        try {\n-            final String markupType = getAdMarkupType(headers, bid.getAdm());\n-            final Bid updateBid = bid.toBuilder().adm(renderAdMarkup(markupType, bid.getAdm())).build();\n-            return BidderBid.of(updateBid, getBidType(markupType), currency);\n-        } catch (PreBidException e) {\n-            errors.add(BidderError.badInput(e.getMessage()));\n-            return null;\n+    private BidderBid bidderBid(Bid bid, String currency, MultiMap headers) {\n+        final String bidAdm = bid.getAdm();\n+        if (StringUtils.isBlank(bidAdm)) {\n+            throw new PreBidException(\"Empty ad markup\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0020160439194141ddbdb10df388ae6b4d7f984d"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDIyMjkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/smaato/SmaatoBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoxMzoyM1rOIBeW-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoxMzoyM1rOIBeW-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQxNjg4OQ==", "bodyText": "return ObjectUtils.defaultIfNull(target, 0);", "url": "https://github.com/prebid/prebid-server-java/pull/1060#discussion_r538416889", "createdAt": "2020-12-08T14:13:23Z", "author": {"login": "snahornyi"}, "path": "src/main/java/org/prebid/server/bidder/smaato/SmaatoBidder.java", "diffHunk": "@@ -271,82 +275,84 @@ private String renderAdMarkup(String markupType, String adm) {\n         }\n     }\n \n-    private static BidType getBidType(String markupType) {\n-        switch (markupType) {\n-            case SMT_AD_TYPE_IMG:\n-            case SMT_ADTYPE_RICHMEDIA:\n-                return BidType.banner;\n-            case SMT_ADTYPE_VIDEO:\n-                return BidType.video;\n-            default:\n-                throw new PreBidException(String.format(\"Invalid markupType %s\", markupType));\n-        }\n-    }\n-\n     private String extractAdmImage(String adm) {\n-        final SmaatoImageAd imageAd = admToAd(adm, SmaatoImageAd.class);\n+        final SmaatoImageAd imageAd = convertAdmToAd(adm, SmaatoImageAd.class);\n         final SmaatoImage image = imageAd.getImage();\n         if (image == null) {\n-            return adm;\n+            throw new PreBidException(\"bid.adm.image is empty\");\n         }\n \n         final StringBuilder clickEvent = new StringBuilder();\n         CollectionUtils.emptyIfNull(image.getClickTrackers())\n                 .forEach(tracker -> clickEvent.append(String.format(\n                         \"fetch(decodeURIComponent('%s'.replace(/\\\\+/g, ' ')), {cache: 'no-cache'});\",\n-                        HttpUtil.encodeUrl(tracker))));\n+                        HttpUtil.encodeUrl(StringUtils.stripToEmpty(tracker)))));\n \n         final StringBuilder impressionTracker = new StringBuilder();\n         CollectionUtils.emptyIfNull(image.getImpressionTrackers())\n                 .forEach(tracker -> impressionTracker.append(\n                         String.format(\"<img src=\\\"%s\\\" alt=\\\"\\\" width=\\\"0\\\" height=\\\"0\\\"/>\", tracker)));\n \n         final SmaatoImg img = image.getImg();\n-\n         return String.format(\"<div style=\\\"cursor:pointer\\\" onclick=\\\"%s;window.open(decodeURIComponent\"\n                         + \"('%s'.replace(/\\\\+/g, ' ')));\\\"><img src=\\\"%s\\\" width=\\\"%d\\\" height=\\\"%d\\\"/>%s</div>\",\n                 clickEvent.toString(),\n                 HttpUtil.encodeUrl(StringUtils.stripToEmpty(getIfNotNull(img, SmaatoImg::getCtaurl))),\n                 StringUtils.stripToEmpty(getIfNotNull(img, SmaatoImg::getUrl)),\n-                getIfNotNull(img, SmaatoImg::getW),\n-                getIfNotNull(img, SmaatoImg::getH),\n+                stripToZero(getIfNotNull(img, SmaatoImg::getW)),\n+                stripToZero(getIfNotNull(img, SmaatoImg::getH)),\n                 impressionTracker.toString());\n     }\n \n     private String extractAdmRichMedia(String adm) {\n-        final SmaatoRichMediaAd richMediaAd = admToAd(adm, SmaatoRichMediaAd.class);\n+        final SmaatoRichMediaAd richMediaAd = convertAdmToAd(adm, SmaatoRichMediaAd.class);\n         final SmaatoRichmedia richmedia = richMediaAd.getRichmedia();\n         if (richmedia == null) {\n-            return adm;\n+            throw new PreBidException(\"bid.adm.richmedia is empty\");\n         }\n \n         final StringBuilder clickEvent = new StringBuilder();\n         CollectionUtils.emptyIfNull(richmedia.getClickTrackers())\n                 .forEach(tracker -> clickEvent.append(\n                         String.format(\"fetch(decodeURIComponent('%s'), {cache: 'no-cache'});\",\n-                                HttpUtil.encodeUrl(tracker))));\n+                                HttpUtil.encodeUrl(StringUtils.stripToEmpty(tracker)))));\n \n         final StringBuilder impressionTracker = new StringBuilder();\n         CollectionUtils.emptyIfNull(richmedia.getImpressionTrackers())\n                 .forEach(tracker -> impressionTracker.append(\n-                        String.format(\"<img src=\\\"%s\\\" alt=\\\"\\\" width=\\\"0\\\" height=\\\"0\\\"/>\",\n-                                tracker)));\n+                        String.format(\"<img src=\\\"%s\\\" alt=\\\"\\\" width=\\\"0\\\" height=\\\"0\\\"/>\", tracker)));\n \n         return String.format(\"<div onclick=\\\"%s\\\">%s%s</div>\",\n                 clickEvent.toString(),\n                 StringUtils.stripToEmpty(getIfNotNull(richmedia.getMediadata(), SmaatoMediaData::getContent)),\n                 impressionTracker.toString());\n     }\n \n-    private <T> T admToAd(String value, Class<T> className) {\n+    private <T> T convertAdmToAd(String value, Class<T> className) {\n         try {\n             return mapper.decodeValue(value, className);\n         } catch (DecodeException e) {\n             throw new PreBidException(String.format(\"Cannot decode bid.adm: %s\", e.getMessage()), e);\n         }\n     }\n \n+    private static BidType getBidType(String markupType) {\n+        switch (markupType) {\n+            case SMT_AD_TYPE_IMG:\n+            case SMT_ADTYPE_RICHMEDIA:\n+                return BidType.banner;\n+            case SMT_ADTYPE_VIDEO:\n+                return BidType.video;\n+            default:\n+                throw new PreBidException(String.format(\"Invalid markupType %s\", markupType));\n+        }\n+    }\n+\n     private static <T, R> R getIfNotNull(T target, Function<T, R> getter) {\n         return target != null ? getter.apply(target) : null;\n     }\n+\n+    private static int stripToZero(Integer target) {\n+        return target != null ? target : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0020160439194141ddbdb10df388ae6b4d7f984d"}, "originalPosition": 269}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3855, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}