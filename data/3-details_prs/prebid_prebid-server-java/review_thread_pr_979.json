{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMTI0MTYx", "number": 979, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzo0NDoxMVrOE6kq8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzo0NDoxMVrOE6kq8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODUzNjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/acuityads/AcuityadsBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzo0NDoxMVrOH1uaPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzo0NDoxMVrOH1uaPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA5Njk1Nw==", "bodyText": "Can getBid() return null?", "url": "https://github.com/prebid/prebid-server-java/pull/979#discussion_r526096957", "createdAt": "2020-11-18T13:44:11Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/acuityads/AcuityadsBidder.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.prebid.server.bidder.acuityads;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.acuity.ExtImpAcuityads;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Acuityads {@link Bidder} implementation.\n+ */\n+public class AcuityadsBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAcuityads>> ACUITYADS_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAcuityads>>() {\n+            };\n+    private static final String OPENRTB_VERSION = \"2.5\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+    private static final String URL_ACCOUNT_ID_MACRO = \"{{AccountID}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AcuityadsBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final ExtImpAcuityads extImpAcuityads;\n+        final String url;\n+\n+        try {\n+            extImpAcuityads = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpAcuityads.getHost(), extImpAcuityads.getAccountId());\n+        } catch (PreBidException e) {\n+            return Result.withError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(removeFirstImpExt(request.getImp()))\n+                .build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAcuityads parseImpExt(Imp imp) {\n+        final ExtImpAcuityads extImpAcuityads;\n+        try {\n+            extImpAcuityads = mapper.mapper().convertValue(imp.getExt(), ACUITYADS_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"ext.bidder not provided\");\n+        }\n+        if (extImpAcuityads == null) {\n+            throw new PreBidException(\"ext.bidder not provided\");\n+        }\n+        if (StringUtils.isBlank(extImpAcuityads.getHost())) {\n+            throw new PreBidException(\"Missed host param\");\n+        }\n+        if (StringUtils.isBlank(extImpAcuityads.getAccountId())) {\n+            throw new PreBidException(\"Missed accountId param\");\n+        }\n+        return extImpAcuityads;\n+    }\n+\n+    private String resolveEndpoint(String host, String accountId) {\n+        return endpointUrl\n+                .replace(URL_HOST_MACRO, StringUtils.stripToEmpty(host))\n+                .replace(URL_ACCOUNT_ID_MACRO, StringUtils.stripToEmpty(accountId));\n+    }\n+\n+    private static List<Imp> removeFirstImpExt(List<Imp> imps) {\n+        return IntStream.range(0, imps.size())\n+                .mapToObj(impIndex -> impIndex == 0\n+                        ? imps.get(impIndex).toBuilder().ext(null).build()\n+                        : imps.get(impIndex))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static MultiMap resolveHeaders(Device device) {\n+        final MultiMap headers = HttpUtil.headers();\n+        HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_OPENRTB_VERSION_HEADER, OPENRTB_VERSION);\n+\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER, device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER, device.getIpv6());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER, device.getIp());\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.withError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private static List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null) {\n+            throw new PreBidException(\"Bad Server Response\");\n+        }\n+        if (CollectionUtils.isEmpty(bidResponse.getSeatbid())) {\n+            throw new PreBidException(\"Empty SeatBid array\");\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private static List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        final SeatBid firstSeatBid = bidResponse.getSeatbid().get(0);\n+\n+        return firstSeatBid.getBid().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e95232091e5a13fbeef995eb4b9fa718e4a5b165"}, "originalPosition": 148}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3950, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}