{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNjA1MTE1", "number": 957, "reviewThreads": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo0OTozNVrOEwMAFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyODoxMlrOEzNn1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTYzNzMzOnYy", "diffSide": "RIGHT", "path": "src/main/resources/bidder-config/invibes.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo0OTozNVrOHll0sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo0OTozNVrOHll0sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3OTA1OA==", "bodyText": "app is not provided by this bidder", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509179058", "createdAt": "2020-10-21T10:49:35Z", "author": {"login": "DGarbar"}, "path": "src/main/resources/bidder-config/invibes.yaml", "diffHunk": "@@ -0,0 +1,23 @@\n+adapters:\n+  invibes:\n+    enabled: false\n+    endpoint: https://{{Host}}/bid/ServerBidAdContent\n+    pbs-enforces-gdpr: true\n+    pbs-enforces-ccpa: true\n+    modifying-vast-xml-allowed: true\n+    deprecated-names:\n+    aliases:\n+    meta-info:\n+      maintainer-email: system_operations@invibes.com\n+      app-media-types:\n+        - banner", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTY3MzAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo1OToyMlrOHlmKaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo1OToyMlrOHlmKaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4NDYxOQ==", "bodyText": "return extUser != null ? extUser.getConsent() : StringUtils.EMPTY;", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509184619", "createdAt": "2020-10-21T10:59:22Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTY4MDEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowMToyOVrOHlmOuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowMToyOVrOHlmOuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4NTcyMw==", "bodyText": "redundant parametrisation", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509185723", "createdAt": "2020-10-21T11:01:29Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTY4MDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowMTo0MFrOHlmPBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowMTo0MFrOHlmPBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4NTc5Ng==", "bodyText": "don't use final in for", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509185796", "createdAt": "2020-10-21T11:01:40Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTY4NzkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowMzo1OFrOHlmTqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowMzo1OFrOHlmTqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4Njk4Ng==", "bodyText": "extract this into parseAndValidateImpExt\n(and keep try-catch block with error.add)", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509186986", "createdAt": "2020-10-21T11:03:58Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTY5MTU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowNTowMFrOHlmV1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowNTowMFrOHlmV1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4NzU0MQ==", "bodyText": "private InvibesInternalParams updateInvibesInternalParams(InvibesInternalParams invibesInternalParams,\n                                                              ExtImpInvibes invibesExt,\n                                                              Imp imp) {", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509187541", "createdAt": "2020-10-21T11:05:00Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTY5OTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowNzoxMVrOHlmajQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTowNzoxMVrOHlmajQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4ODc0OQ==", "bodyText": "impExtPlacementId", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509188749", "createdAt": "2020-10-21T11:07:11Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTcxMjQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToxMToxOFrOHlmi1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToxMToxOFrOHlmi1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5MDg2OA==", "bodyText": "extract invibesInternalParams.getBidParams()", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509190868", "createdAt": "2020-10-21T11:11:18Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTcxNDM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/model/InvibesInternalParams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToxMTo1M1rOHlmkBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToxMTo1M1rOHlmkBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5MTE3NA==", "bodyText": "use camelCase", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509191174", "createdAt": "2020-10-21T11:11:53Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/model/InvibesInternalParams.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.prebid.server.bidder.invibes.model;\n+\n+import lombok.Builder;\n+import lombok.Value;\n+\n+@Builder(toBuilder = true)\n+@Value\n+public class InvibesInternalParams {\n+\n+    InvibesBidParams bidParams;\n+\n+    Integer domainID;\n+\n+    Boolean isAMP;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTc0NDI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToyMDoyMVrOHlm2Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToyMDoyMVrOHlm2Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5NTg0Mg==", "bodyText": "they just adding new trim value to collection, not recreating anything\nYou can remove this method and add logic into updateInvibesInternalParams", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509195842", "createdAt": "2020-10-21T11:20:21Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))\n+                .bidParamsJson(mapper.encode(invibesParams.getBidParams()))\n+                .location(request.getSite().getPage())\n+                .lid(lid)\n+                .kw(request.getSite().getKeywords())\n+                .isAMP(invibesParams.getIsAMP())\n+                .width(resolveWidth(request.getDevice()))\n+                .height(resolveHeight(request.getDevice()))\n+                .gdprConsent(invibesParams.getGdprConsent())\n+                .gdpr(invibesParams.getGdpr())\n+                .bvid(invibesParams.getTestBvid())\n+                .invibBVLog(invibesParams.getTestLog())\n+                .videoAdDebug(invibesParams.getTestLog())\n+                .build();\n+    }\n+\n+    private String resolveHeight(Device device) {\n+        final Integer height = device != null ? device.getH() : null;\n+\n+        return height != null && height > NumberUtils.INTEGER_ZERO\n+                ? height.toString() : null;\n+    }\n+\n+    private String resolveWidth(Device device) {\n+        final Integer width = device != null ? device.getW() : null;\n+\n+        return width != null && width > NumberUtils.INTEGER_ZERO\n+                ? width.toString() : null;\n+    }\n+\n+    private String makeUrl(Integer domainId) {\n+        final String host = resolveHost(domainId);\n+        final String url = endpointUrl.replace(URL_HOST_MACRO, host);\n+        try {\n+            HttpUtil.validateUrl(Objects.requireNonNull(url));\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        return url;\n+    }\n+\n+    private String resolveHost(Integer domainId) {\n+        if (domainId == null) {\n+            return \"bid.videostep.com\";\n+        } else if (domainId >= 1002) {\n+            return String.format(\"bid%s.videostep.com\", domainId - 1000);\n+        } else if (domainId == 1) {\n+            return \"adweb.videostepstage.com\";\n+        } else if (domainId == 2) {\n+            return \"adweb.invibesstage.com\";\n+        } else {\n+            return \"bid.videostep.com\";\n+        }\n+    }\n+\n+    private InvibesInternalParams updateWithGDPRParams(InvibesInternalParams internalParams,\n+                                                       String consentString, Boolean gdprApplies) {\n+        return internalParams.toBuilder()\n+                .gdpr(gdprApplies)\n+                .gdprConsent(consentString)\n+                .build();\n+    }\n+\n+    private List<String> getUpdatedPlacementIds(String placementId, List<String> placementIds) {\n+        final List<String> updatedPlacementIds = placementIds != null\n+                ? placementIds : new ArrayList<>();\n+        if (StringUtils.isNotEmpty(placementId)) {\n+            updatedPlacementIds.add(placementId.trim());\n+        }\n+        return updatedPlacementIds;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTc0ODA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToyMToyMFrOHlm4ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToyMToyMFrOHlm4ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5NjQxMQ==", "bodyText": "also set PlacementIDs with new ArrayList()", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509196411", "createdAt": "2020-10-21T11:21:20Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTc1MzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToyMjo1N1rOHlm78g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToyMjo1N1rOHlm78g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5NzI5OA==", "bodyText": "don't mix geters call with method calls, prefer extracting all of that.\n(Also this method can be inlined)", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509197298", "createdAt": "2020-10-21T11:22:57Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTc2NzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToyNjo0M1rOHlnEHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToyNjo0M1rOHlnEHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5OTM5MA==", "bodyText": "if (currentBanner.getFormat() != null) {\n        return currentBanner.getFormat();\n    } else {\n        final Integer formatW = currentBanner.getW();\n        final Integer formatH = currentBanner.getH();\n        return formatW != null && formatH != null\n                ? Collections.singletonList(Format.builder().w(formatW).h(formatH).build())\n                : Collections.emptyList();\n    }\n}", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509199390", "createdAt": "2020-10-21T11:26:43Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))\n+                .bidParamsJson(mapper.encode(invibesParams.getBidParams()))\n+                .location(request.getSite().getPage())\n+                .lid(lid)\n+                .kw(request.getSite().getKeywords())\n+                .isAMP(invibesParams.getIsAMP())\n+                .width(resolveWidth(request.getDevice()))\n+                .height(resolveHeight(request.getDevice()))\n+                .gdprConsent(invibesParams.getGdprConsent())\n+                .gdpr(invibesParams.getGdpr())\n+                .bvid(invibesParams.getTestBvid())\n+                .invibBVLog(invibesParams.getTestLog())\n+                .videoAdDebug(invibesParams.getTestLog())\n+                .build();\n+    }\n+\n+    private String resolveHeight(Device device) {\n+        final Integer height = device != null ? device.getH() : null;\n+\n+        return height != null && height > NumberUtils.INTEGER_ZERO\n+                ? height.toString() : null;\n+    }\n+\n+    private String resolveWidth(Device device) {\n+        final Integer width = device != null ? device.getW() : null;\n+\n+        return width != null && width > NumberUtils.INTEGER_ZERO\n+                ? width.toString() : null;\n+    }\n+\n+    private String makeUrl(Integer domainId) {\n+        final String host = resolveHost(domainId);\n+        final String url = endpointUrl.replace(URL_HOST_MACRO, host);\n+        try {\n+            HttpUtil.validateUrl(Objects.requireNonNull(url));\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        return url;\n+    }\n+\n+    private String resolveHost(Integer domainId) {\n+        if (domainId == null) {\n+            return \"bid.videostep.com\";\n+        } else if (domainId >= 1002) {\n+            return String.format(\"bid%s.videostep.com\", domainId - 1000);\n+        } else if (domainId == 1) {\n+            return \"adweb.videostepstage.com\";\n+        } else if (domainId == 2) {\n+            return \"adweb.invibesstage.com\";\n+        } else {\n+            return \"bid.videostep.com\";\n+        }\n+    }\n+\n+    private InvibesInternalParams updateWithGDPRParams(InvibesInternalParams internalParams,\n+                                                       String consentString, Boolean gdprApplies) {\n+        return internalParams.toBuilder()\n+                .gdpr(gdprApplies)\n+                .gdprConsent(consentString)\n+                .build();\n+    }\n+\n+    private List<String> getUpdatedPlacementIds(String placementId, List<String> placementIds) {\n+        final List<String> updatedPlacementIds = placementIds != null\n+                ? placementIds : new ArrayList<>();\n+        if (StringUtils.isNotEmpty(placementId)) {\n+            updatedPlacementIds.add(placementId.trim());\n+        }\n+        return updatedPlacementIds;\n+    }\n+\n+    private Map<String, InvibesPlacementProperty> getUpdatedProperties(\n+            Map<String, InvibesPlacementProperty> properties, String placementId,\n+            String impId, List<Format> adFormats) {\n+        properties.put(placementId, InvibesPlacementProperty.builder()\n+                .impId(impId)\n+                .formats(adFormats)\n+                .build());\n+\n+        return properties;\n+    }\n+\n+    private List<Format> resolveAdFormats(Banner currentBanner) {\n+        if (currentBanner.getFormat() != null) {\n+            return currentBanner.getFormat();\n+        } else if (currentBanner.getW() != null && currentBanner.getH() != null) {\n+            return Collections.singletonList(Format.builder()\n+                    .w(currentBanner.getW())\n+                    .h(currentBanner.getH())\n+                    .build());\n+        }\n+\n+        return Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTc3MTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToyNzo1M1rOHlnGtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToyNzo1M1rOHlnGtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIwMDA1NA==", "bodyText": "put this method according to the method invokation", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509200054", "createdAt": "2020-10-21T11:27:53Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTc4OTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTozMjo1MFrOHlnSGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTozMjo1MFrOHlnSGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIwMjk3MQ==", "bodyText": "NPE\nPrefer execrating variables\n        final InvibesDebug invibesDebug = invibesExt.getDebug();\n        final String invibesDebugTestBvid = invibesDebug != null ? invibesDebug.getTestBvid() : null;\n        if (StringUtils.isNotBlank(invibesDebugTestBvid)) {\n            internalParamsBuilder.testBvid(invibesDebugTestBvid);\n        }\n\n        if (invibesDebug != null) {\n            internalParamsBuilder.testLog(invibesDebug.getTestLog());\n        }", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509202971", "createdAt": "2020-10-21T11:32:50Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTc5NjU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTozNDo1NVrOHlnWTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTozNDo1NVrOHlnWTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIwNDA0Nw==", "bodyText": "Actually I think this class can be mutable bc we use it only for passing parameters internally", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509204047", "createdAt": "2020-10-21T11:34:55Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTgwMDM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTozNTo1NFrOHlnYhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTozNTo1NFrOHlnYhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIwNDYxNA==", "bodyText": "first, check for null, and then use CollectionUtils.isEmpty", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509204614", "createdAt": "2020-10-21T11:35:54Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTgwNjQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTozNzozOVrOHlncVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTozNzozOVrOHlncVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIwNTU4OQ==", "bodyText": "redundant method, just add this value into builder above", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509205589", "createdAt": "2020-10-21T11:37:39Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTgzMDQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0NDo0MlrOHlnrcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0NDo0MlrOHlnrcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIwOTQ1Nw==", "bodyText": "this check can be reasonably placed in makeHttpRequests method", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509209457", "createdAt": "2020-10-21T11:44:42Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTgzNTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0NTo1MVrOHlnuOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0NTo1MVrOHlnuOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMDE2OQ==", "bodyText": "final User user = request.getUser();\n    final String buyeruid = user != null ? user.getBuyeruid() : null;\n    final String lid = StringUtils.isNotBlank(buyeruid) ? buyeruid : StringUtils.EMPTY;", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509210169", "createdAt": "2020-10-21T11:45:51Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg0NTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0ODo0N1rOHln0jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0ODo0N1rOHln0jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMTc5MQ==", "bodyText": "StringUtils.isNotBlank()", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509211791", "createdAt": "2020-10-21T11:48:47Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg0NzA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0OToxM1rOHln1dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0OToxM1rOHln1dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMjAyMA==", "bodyText": "extract this", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509212020", "createdAt": "2020-10-21T11:49:13Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))\n+                .bidParamsJson(mapper.encode(invibesParams.getBidParams()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg0OTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0OTo1MFrOHln27Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0OTo1MFrOHln27Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMjM5Nw==", "bodyText": "can be static", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509212397", "createdAt": "2020-10-21T11:49:50Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))\n+                .bidParamsJson(mapper.encode(invibesParams.getBidParams()))\n+                .location(request.getSite().getPage())\n+                .lid(lid)\n+                .kw(request.getSite().getKeywords())\n+                .isAMP(invibesParams.getIsAMP())\n+                .width(resolveWidth(request.getDevice()))\n+                .height(resolveHeight(request.getDevice()))\n+                .gdprConsent(invibesParams.getGdprConsent())\n+                .gdpr(invibesParams.getGdpr())\n+                .bvid(invibesParams.getTestBvid())\n+                .invibBVLog(invibesParams.getTestLog())\n+                .videoAdDebug(invibesParams.getTestLog())\n+                .build();\n+    }\n+\n+    private String resolveHeight(Device device) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg0OTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0OTo1M1rOHln3AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo0OTo1M1rOHln3AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMjQxNw==", "bodyText": "can be static", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509212417", "createdAt": "2020-10-21T11:49:53Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))\n+                .bidParamsJson(mapper.encode(invibesParams.getBidParams()))\n+                .location(request.getSite().getPage())\n+                .lid(lid)\n+                .kw(request.getSite().getKeywords())\n+                .isAMP(invibesParams.getIsAMP())\n+                .width(resolveWidth(request.getDevice()))\n+                .height(resolveHeight(request.getDevice()))\n+                .gdprConsent(invibesParams.getGdprConsent())\n+                .gdpr(invibesParams.getGdpr())\n+                .bvid(invibesParams.getTestBvid())\n+                .invibBVLog(invibesParams.getTestLog())\n+                .videoAdDebug(invibesParams.getTestLog())\n+                .build();\n+    }\n+\n+    private String resolveHeight(Device device) {\n+        final Integer height = device != null ? device.getH() : null;\n+\n+        return height != null && height > NumberUtils.INTEGER_ZERO\n+                ? height.toString() : null;\n+    }\n+\n+    private String resolveWidth(Device device) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg1MjA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1MDoyN1rOHln4hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1MDoyN1rOHln4hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMjgwNg==", "bodyText": "extract duplication method calls", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509212806", "createdAt": "2020-10-21T11:50:27Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))\n+                .bidParamsJson(mapper.encode(invibesParams.getBidParams()))\n+                .location(request.getSite().getPage())\n+                .lid(lid)\n+                .kw(request.getSite().getKeywords())\n+                .isAMP(invibesParams.getIsAMP())\n+                .width(resolveWidth(request.getDevice()))\n+                .height(resolveHeight(request.getDevice()))\n+                .gdprConsent(invibesParams.getGdprConsent())\n+                .gdpr(invibesParams.getGdpr())\n+                .bvid(invibesParams.getTestBvid())\n+                .invibBVLog(invibesParams.getTestLog())\n+                .videoAdDebug(invibesParams.getTestLog())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg1MzMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1MDo0OFrOHln5SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1MDo0OFrOHln5SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMzAwMA==", "bodyText": "in one line", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509213000", "createdAt": "2020-10-21T11:50:48Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))\n+                .bidParamsJson(mapper.encode(invibesParams.getBidParams()))\n+                .location(request.getSite().getPage())\n+                .lid(lid)\n+                .kw(request.getSite().getKeywords())\n+                .isAMP(invibesParams.getIsAMP())\n+                .width(resolveWidth(request.getDevice()))\n+                .height(resolveHeight(request.getDevice()))\n+                .gdprConsent(invibesParams.getGdprConsent())\n+                .gdpr(invibesParams.getGdpr())\n+                .bvid(invibesParams.getTestBvid())\n+                .invibBVLog(invibesParams.getTestLog())\n+                .videoAdDebug(invibesParams.getTestLog())\n+                .build();\n+    }\n+\n+    private String resolveHeight(Device device) {\n+        final Integer height = device != null ? device.getH() : null;\n+\n+        return height != null && height > NumberUtils.INTEGER_ZERO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg1MzU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1MDo1MVrOHln5dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1MDo1MVrOHln5dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMzA0NA==", "bodyText": "in one line", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509213044", "createdAt": "2020-10-21T11:50:51Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))\n+                .bidParamsJson(mapper.encode(invibesParams.getBidParams()))\n+                .location(request.getSite().getPage())\n+                .lid(lid)\n+                .kw(request.getSite().getKeywords())\n+                .isAMP(invibesParams.getIsAMP())\n+                .width(resolveWidth(request.getDevice()))\n+                .height(resolveHeight(request.getDevice()))\n+                .gdprConsent(invibesParams.getGdprConsent())\n+                .gdpr(invibesParams.getGdpr())\n+                .bvid(invibesParams.getTestBvid())\n+                .invibBVLog(invibesParams.getTestLog())\n+                .videoAdDebug(invibesParams.getTestLog())\n+                .build();\n+    }\n+\n+    private String resolveHeight(Device device) {\n+        final Integer height = device != null ? device.getH() : null;\n+\n+        return height != null && height > NumberUtils.INTEGER_ZERO\n+                ? height.toString() : null;\n+    }\n+\n+    private String resolveWidth(Device device) {\n+        final Integer width = device != null ? device.getW() : null;\n+\n+        return width != null && width > NumberUtils.INTEGER_ZERO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg1NjgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1MTo0MlrOHln7eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1MTo0MlrOHln7eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMzU2MA==", "bodyText": "this check is redundant and validate URL returns value", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509213560", "createdAt": "2020-10-21T11:51:42Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))\n+                .bidParamsJson(mapper.encode(invibesParams.getBidParams()))\n+                .location(request.getSite().getPage())\n+                .lid(lid)\n+                .kw(request.getSite().getKeywords())\n+                .isAMP(invibesParams.getIsAMP())\n+                .width(resolveWidth(request.getDevice()))\n+                .height(resolveHeight(request.getDevice()))\n+                .gdprConsent(invibesParams.getGdprConsent())\n+                .gdpr(invibesParams.getGdpr())\n+                .bvid(invibesParams.getTestBvid())\n+                .invibBVLog(invibesParams.getTestLog())\n+                .videoAdDebug(invibesParams.getTestLog())\n+                .build();\n+    }\n+\n+    private String resolveHeight(Device device) {\n+        final Integer height = device != null ? device.getH() : null;\n+\n+        return height != null && height > NumberUtils.INTEGER_ZERO\n+                ? height.toString() : null;\n+    }\n+\n+    private String resolveWidth(Device device) {\n+        final Integer width = device != null ? device.getW() : null;\n+\n+        return width != null && width > NumberUtils.INTEGER_ZERO\n+                ? width.toString() : null;\n+    }\n+\n+    private String makeUrl(Integer domainId) {\n+        final String host = resolveHost(domainId);\n+        final String url = endpointUrl.replace(URL_HOST_MACRO, host);\n+        try {\n+            HttpUtil.validateUrl(Objects.requireNonNull(url));\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg2MDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1MjozOVrOHln9vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1MjozOVrOHln9vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxNDE0MA==", "bodyText": "prefer isNotBlank and extract duplication", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509214140", "createdAt": "2020-10-21T11:52:39Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg3MjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1NTo1M1rOHloFMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1NTo1M1rOHloFMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxNjA0OQ==", "bodyText": "redundant", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509216049", "createdAt": "2020-10-21T11:55:53Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg4NzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1OTo0OVrOHloOQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMTo1OTo0OVrOHloOQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxODM2OQ==", "bodyText": "prefer isNotBlank", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509218369", "createdAt": "2020-10-21T11:59:49Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))\n+                .bidParamsJson(mapper.encode(invibesParams.getBidParams()))\n+                .location(request.getSite().getPage())\n+                .lid(lid)\n+                .kw(request.getSite().getKeywords())\n+                .isAMP(invibesParams.getIsAMP())\n+                .width(resolveWidth(request.getDevice()))\n+                .height(resolveHeight(request.getDevice()))\n+                .gdprConsent(invibesParams.getGdprConsent())\n+                .gdpr(invibesParams.getGdpr())\n+                .bvid(invibesParams.getTestBvid())\n+                .invibBVLog(invibesParams.getTestLog())\n+                .videoAdDebug(invibesParams.getTestLog())\n+                .build();\n+    }\n+\n+    private String resolveHeight(Device device) {\n+        final Integer height = device != null ? device.getH() : null;\n+\n+        return height != null && height > NumberUtils.INTEGER_ZERO\n+                ? height.toString() : null;\n+    }\n+\n+    private String resolveWidth(Device device) {\n+        final Integer width = device != null ? device.getW() : null;\n+\n+        return width != null && width > NumberUtils.INTEGER_ZERO\n+                ? width.toString() : null;\n+    }\n+\n+    private String makeUrl(Integer domainId) {\n+        final String host = resolveHost(domainId);\n+        final String url = endpointUrl.replace(URL_HOST_MACRO, host);\n+        try {\n+            HttpUtil.validateUrl(Objects.requireNonNull(url));\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        return url;\n+    }\n+\n+    private String resolveHost(Integer domainId) {\n+        if (domainId == null) {\n+            return \"bid.videostep.com\";\n+        } else if (domainId >= 1002) {\n+            return String.format(\"bid%s.videostep.com\", domainId - 1000);\n+        } else if (domainId == 1) {\n+            return \"adweb.videostepstage.com\";\n+        } else if (domainId == 2) {\n+            return \"adweb.invibesstage.com\";\n+        } else {\n+            return \"bid.videostep.com\";\n+        }\n+    }\n+\n+    private InvibesInternalParams updateWithGDPRParams(InvibesInternalParams internalParams,\n+                                                       String consentString, Boolean gdprApplies) {\n+        return internalParams.toBuilder()\n+                .gdpr(gdprApplies)\n+                .gdprConsent(consentString)\n+                .build();\n+    }\n+\n+    private List<String> getUpdatedPlacementIds(String placementId, List<String> placementIds) {\n+        final List<String> updatedPlacementIds = placementIds != null\n+                ? placementIds : new ArrayList<>();\n+        if (StringUtils.isNotEmpty(placementId)) {\n+            updatedPlacementIds.add(placementId.trim());\n+        }\n+        return updatedPlacementIds;\n+    }\n+\n+    private Map<String, InvibesPlacementProperty> getUpdatedProperties(\n+            Map<String, InvibesPlacementProperty> properties, String placementId,\n+            String impId, List<Format> adFormats) {\n+        properties.put(placementId, InvibesPlacementProperty.builder()\n+                .impId(impId)\n+                .formats(adFormats)\n+                .build());\n+\n+        return properties;\n+    }\n+\n+    private List<Format> resolveAdFormats(Banner currentBanner) {\n+        if (currentBanner.getFormat() != null) {\n+            return currentBanner.getFormat();\n+        } else if (currentBanner.getW() != null && currentBanner.getH() != null) {\n+            return Collections.singletonList(Format.builder()\n+                    .w(currentBanner.getW())\n+                    .h(currentBanner.getH())\n+                    .build());\n+        }\n+\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<InvibesBidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+\n+        try {\n+            final InvibesBidderResponse bidResponse =\n+                    mapper.decodeValue(httpCall.getResponse().getBody(), InvibesBidderResponse.class);\n+            if (bidResponse != null && StringUtils.isNotEmpty(bidResponse.getError())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 313}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTg5OTgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjowMzowMFrOHloVsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjowMzowMFrOHloVsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyMDI3NA==", "bodyText": "return bidResponse == null || CollectionUtils.isEmpty(bidResponse.getTypedBids())\n            ? Collections.emptyList()\n            : bidsFromResponse(bidRequest, bidResponse);", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509220274", "createdAt": "2020-10-21T12:03:00Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Regs;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.invibes.model.InvibesBidParams;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesInternalParams;\n+import org.prebid.server.bidder.invibes.model.InvibesPlacementProperty;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtRegs;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InvibesBidder implements Bidder<InvibesBidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInvibes>> INVIBES_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInvibes>>() {\n+            };\n+    private static final String INVIBES_BID_VERSION = \"4\";\n+    private static final String ADAPTER_VERSION = \"prebid_1.0.0\";\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InvibesBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<InvibesBidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final String consentString = resolveConsentString(request.getUser());\n+        final Boolean gdprApplies = resolveGDPRApplies(request.getRegs());\n+\n+        InvibesInternalParams invibesInternalParams =\n+                InvibesInternalParams.builder()\n+                        .bidParams(InvibesBidParams.builder()\n+                                .properties(new HashMap<String, InvibesPlacementProperty>())\n+                                .bidVersion(INVIBES_BID_VERSION)\n+                                .build())\n+                        .build();\n+\n+        for (final Imp imp : request.getImp()) {\n+            final ExtImpInvibes extImpInvibes;\n+            try {\n+                extImpInvibes = mapper.mapper().convertValue(imp.getExt(), INVIBES_EXT_TYPE_REFERENCE).getBidder();\n+            } catch (IllegalArgumentException e) {\n+                errors.add(BidderError.badInput(\"Error parsing invibesExt parameters\"));\n+                continue;\n+            }\n+            final Banner banner = imp.getBanner();\n+            if (banner == null) {\n+                errors.add(BidderError.badInput(\"Banner not specified\"));\n+                continue;\n+            }\n+\n+            invibesInternalParams = updateInvibesInternalParams(invibesInternalParams, extImpInvibes, imp);\n+        }\n+        //TODO add AMP parameter to invibesInternalParams, after reqInfo will be implemented\n+\n+        if (invibesInternalParams.getBidParams()\n+                .getPlacementIDs() == null\n+                || invibesInternalParams.getBidParams().getPlacementIDs().size() == 0) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        invibesInternalParams = updateWithGDPRParams(invibesInternalParams, consentString, gdprApplies);\n+\n+        try {\n+            final HttpRequest<InvibesBidRequest> httpRequest = makeRequest(invibesInternalParams, request);\n+            return Result.of(Collections.singletonList(httpRequest), errors);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private String resolveConsentString(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        if (extUser != null) {\n+            return extUser.getConsent();\n+        }\n+\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private Boolean resolveGDPRApplies(Regs regs) {\n+        final ExtRegs extRegs = regs != null ? regs.getExt() : null;\n+        final Integer gdpr = extRegs != null ? extRegs.getGdpr() : null;\n+\n+        return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n+    }\n+\n+    private InvibesInternalParams updateInvibesInternalParams(\n+            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n+            Imp imp) {\n+        final String placementId = invibesExt.getPlacementId();\n+        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n+                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n+\n+        final Map<String, InvibesPlacementProperty> updatedProperties\n+                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n+                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+\n+        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n+                .placementIDs(updatedPlacementIds)\n+                .properties(updatedProperties)\n+                .build();\n+\n+        final InvibesInternalParams.InvibesInternalParamsBuilder internalParamsBuilder\n+                = invibesInternalParams.toBuilder()\n+                .domainID(invibesExt.getDomainId())\n+                .bidParams(updatedBidParams);\n+\n+        if (invibesExt.getDebug() != null) {\n+            if (!invibesExt.getDebug().getTestBvid().equals(StringUtils.EMPTY)) {\n+                internalParamsBuilder.testBvid(invibesExt.getDebug().getTestBvid());\n+            }\n+            internalParamsBuilder.testLog(invibesExt.getDebug().getTestLog());\n+        }\n+\n+        return internalParamsBuilder.build();\n+    }\n+\n+    private HttpRequest<InvibesBidRequest> makeRequest(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String url = makeUrl(invibesParams.getDomainID());\n+        final InvibesBidRequest parameter = resolveParameter(invibesParams, request);\n+\n+        final MultiMap headers = resolveHeaders(request.getDevice(), request.getSite());\n+\n+        final String body = mapper.encode(parameter);\n+\n+        return HttpRequest.<InvibesBidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .payload(parameter)\n+                .body(body)\n+                .build();\n+\n+    }\n+\n+    private MultiMap resolveHeaders(Device device, Site site) {\n+        final MultiMap headers = HttpUtil.headers();\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            } else if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+        }\n+        if (site != null) {\n+            headers.add(\"Referer\", site.getPage());\n+        }\n+        headers.add(\"Aver\", ADAPTER_VERSION);\n+        return headers;\n+    }\n+\n+    private InvibesBidRequest resolveParameter(InvibesInternalParams invibesParams, BidRequest request) {\n+        final String buyeruid = request.getUser() != null ? request.getUser().getBuyeruid() : null;\n+        final String lid = StringUtils.isNotBlank(buyeruid) ? request.getUser().getBuyeruid() : StringUtils.EMPTY;\n+\n+        if (request.getSite() == null) {\n+            throw new PreBidException(\"Site not specified\");\n+        }\n+\n+        return InvibesBidRequest.builder()\n+                .isTestBid(invibesParams.getTestBvid() != null\n+                        && !invibesParams.getTestBvid().equals(StringUtils.EMPTY))\n+                .bidParamsJson(mapper.encode(invibesParams.getBidParams()))\n+                .location(request.getSite().getPage())\n+                .lid(lid)\n+                .kw(request.getSite().getKeywords())\n+                .isAMP(invibesParams.getIsAMP())\n+                .width(resolveWidth(request.getDevice()))\n+                .height(resolveHeight(request.getDevice()))\n+                .gdprConsent(invibesParams.getGdprConsent())\n+                .gdpr(invibesParams.getGdpr())\n+                .bvid(invibesParams.getTestBvid())\n+                .invibBVLog(invibesParams.getTestLog())\n+                .videoAdDebug(invibesParams.getTestLog())\n+                .build();\n+    }\n+\n+    private String resolveHeight(Device device) {\n+        final Integer height = device != null ? device.getH() : null;\n+\n+        return height != null && height > NumberUtils.INTEGER_ZERO\n+                ? height.toString() : null;\n+    }\n+\n+    private String resolveWidth(Device device) {\n+        final Integer width = device != null ? device.getW() : null;\n+\n+        return width != null && width > NumberUtils.INTEGER_ZERO\n+                ? width.toString() : null;\n+    }\n+\n+    private String makeUrl(Integer domainId) {\n+        final String host = resolveHost(domainId);\n+        final String url = endpointUrl.replace(URL_HOST_MACRO, host);\n+        try {\n+            HttpUtil.validateUrl(Objects.requireNonNull(url));\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        return url;\n+    }\n+\n+    private String resolveHost(Integer domainId) {\n+        if (domainId == null) {\n+            return \"bid.videostep.com\";\n+        } else if (domainId >= 1002) {\n+            return String.format(\"bid%s.videostep.com\", domainId - 1000);\n+        } else if (domainId == 1) {\n+            return \"adweb.videostepstage.com\";\n+        } else if (domainId == 2) {\n+            return \"adweb.invibesstage.com\";\n+        } else {\n+            return \"bid.videostep.com\";\n+        }\n+    }\n+\n+    private InvibesInternalParams updateWithGDPRParams(InvibesInternalParams internalParams,\n+                                                       String consentString, Boolean gdprApplies) {\n+        return internalParams.toBuilder()\n+                .gdpr(gdprApplies)\n+                .gdprConsent(consentString)\n+                .build();\n+    }\n+\n+    private List<String> getUpdatedPlacementIds(String placementId, List<String> placementIds) {\n+        final List<String> updatedPlacementIds = placementIds != null\n+                ? placementIds : new ArrayList<>();\n+        if (StringUtils.isNotEmpty(placementId)) {\n+            updatedPlacementIds.add(placementId.trim());\n+        }\n+        return updatedPlacementIds;\n+    }\n+\n+    private Map<String, InvibesPlacementProperty> getUpdatedProperties(\n+            Map<String, InvibesPlacementProperty> properties, String placementId,\n+            String impId, List<Format> adFormats) {\n+        properties.put(placementId, InvibesPlacementProperty.builder()\n+                .impId(impId)\n+                .formats(adFormats)\n+                .build());\n+\n+        return properties;\n+    }\n+\n+    private List<Format> resolveAdFormats(Banner currentBanner) {\n+        if (currentBanner.getFormat() != null) {\n+            return currentBanner.getFormat();\n+        } else if (currentBanner.getW() != null && currentBanner.getH() != null) {\n+            return Collections.singletonList(Format.builder()\n+                    .w(currentBanner.getW())\n+                    .h(currentBanner.getH())\n+                    .build());\n+        }\n+\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<InvibesBidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+\n+        try {\n+            final InvibesBidderResponse bidResponse =\n+                    mapper.decodeValue(httpCall.getResponse().getBody(), InvibesBidderResponse.class);\n+            if (bidResponse != null && StringUtils.isNotEmpty(bidResponse.getError())) {\n+                return Result.emptyWithError(\n+                        BidderError.badServerResponse(String.format(\"Server error: %s.\", bidResponse.getError())));\n+            }\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(InvibesBidRequest bidRequest, InvibesBidderResponse bidResponse) {\n+        if (bidResponse == null || CollectionUtils.isEmpty(bidResponse.getTypedBids())) {\n+            return Collections.emptyList();\n+        }\n+\n+        return bidsFromResponse(bidRequest, bidResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTkwNjk1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjowNTowNVrOHloaIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjowNTowNVrOHloaIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyMTQwOA==", "bodyText": "don't use .of on second line", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509221408", "createdAt": "2020-10-21T12:05:05Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTkyNjAwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxMDowNlrOHloltA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxMDowNlrOHloltA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyNDM3Mg==", "bodyText": "Also every builder need to be like\nobject.builder()/tobuilder()\n   .paramter1()\n   .paramter2()\n   .build()", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509224372", "createdAt": "2020-10-21T12:10:06Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTkzNDM0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxMjowNVrOHloqlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxMjowNVrOHloqlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyNTYyMA==", "bodyText": "for this modification use functions in this method.\nYou can rewrite that like\n final BidRequest bidRequest = givenBidRequest(\n                bidRequestBuilder -> bidRequestBuilder.site(Site.builder().page(\"www.test.com\").build()),\n                identity(),\n                ExtImpInvibes.of(\"12\", 1003, InvibesDebug.of(\"test\", true)));", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509225620", "createdAt": "2020-10-21T12:12:05Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTkzOTI5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxMzoyMFrOHlotdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxMzoyMFrOHlotdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyNjM1Ng==", "bodyText": "use method with function modifier, not toBuilder()", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509226356", "createdAt": "2020-10-21T12:13:20Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTk0MTY3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxNDowOFrOHlou_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxNDowOFrOHlou_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyNjc0OQ==", "bodyText": "/n .of", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509226749", "createdAt": "2020-10-21T12:14:08Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(\n+                Collections.singletonList(bidRequest.getImp().get(0).toBuilder().banner(null).build())).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result =\n+                invibesBidder.makeHttpRequests(bidRequestWithoutBanner);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Banner not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTk0OTYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxNjowNlrOHlozxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxNjowNlrOHlozxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyNzk3NA==", "bodyText": "You also can create simple givenBidRequest method which will return bidRequest with this parameters. (this is third similar call) (first method also technicality can call this parameter)", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509227974", "createdAt": "2020-10-21T12:16:06Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(\n+                Collections.singletonList(bidRequest.getImp().get(0).toBuilder().banner(null).build())).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result =\n+                invibesBidder.makeHttpRequests(bidRequestWithoutBanner);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Banner not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTk1NzAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxNzo1N1rOHlo4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxNzo1N1rOHlo4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyOTEwNg==", "bodyText": "rename\nif you want to make such general test (which is not preferred for unit tests) add\nkeywords for sites\nUser with buyerId and device wit format\nBut it is better to validate this separately.", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509229106", "createdAt": "2020-10-21T12:17:57Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(\n+                Collections.singletonList(bidRequest.getImp().get(0).toBuilder().banner(null).build())).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result =\n+                invibesBidder.makeHttpRequests(bidRequestWithoutBanner);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Banner not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Site not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTk1OTQ0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxODozNFrOHlo5pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxODozNFrOHlo5pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyOTQ3Ng==", "bodyText": "create object and use mapper to turn it into json,\n(in the future it will be a headache to modify raw json)", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509229476", "createdAt": "2020-10-21T12:18:34Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(\n+                Collections.singletonList(bidRequest.getImp().get(0).toBuilder().banner(null).build())).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result =\n+                invibesBidder.makeHttpRequests(bidRequestWithoutBanner);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Banner not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Site not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent2() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true))).toBuilder()\n+                .site(Site.builder().page(\"www.awesome-page.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        final InvibesBidRequest expectedRequest = InvibesBidRequest.builder()\n+                .bidParamsJson(\"{\\\"PlacementIds\\\":[\\\"12\\\"],\\\"BidVersion\\\":\\\"4\\\",\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTk2MzQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxOTozNlrOHlo8OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjoxOTozNlrOHlo8OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIzMDEzNg==", "bodyText": "/n after hasSize and after extracting", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509230136", "createdAt": "2020-10-21T12:19:36Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(\n+                Collections.singletonList(bidRequest.getImp().get(0).toBuilder().banner(null).build())).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result =\n+                invibesBidder.makeHttpRequests(bidRequestWithoutBanner);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Banner not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Site not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent2() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true))).toBuilder()\n+                .site(Site.builder().page(\"www.awesome-page.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        final InvibesBidRequest expectedRequest = InvibesBidRequest.builder()\n+                .bidParamsJson(\"{\\\"PlacementIds\\\":[\\\"12\\\"],\\\"BidVersion\\\":\\\"4\\\",\"\n+                        + \"\\\"Properties\\\":{\\\"12\\\":{\\\"Formats\\\":[{\\\"w\\\":15,\\\"h\\\":12}]}}}\")\n+                .isTestBid(Boolean.TRUE)\n+                .location(\"www.awesome-page.com\")\n+                .gdpr(Boolean.TRUE)\n+                .gdprConsent(StringUtils.EMPTY)\n+                .invibBVLog(Boolean.TRUE)\n+                .videoAdDebug(Boolean.TRUE)\n+                .lid(StringUtils.EMPTY)\n+                .bvid(\"test\")\n+                .build();\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1).extracting(HttpRequest::getPayload).containsOnly(expectedRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDAwNzc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjozMTowNFrOHlpXzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjozMTowNFrOHlpXzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIzNzE5OQ==", "bodyText": "final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(\n            InvibesBidRequest.builder().build(),\n            mapper.writeValueAsString(givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509237199", "createdAt": "2020-10-21T12:31:04Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(\n+                Collections.singletonList(bidRequest.getImp().get(0).toBuilder().banner(null).build())).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result =\n+                invibesBidder.makeHttpRequests(bidRequestWithoutBanner);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Banner not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Site not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent2() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true))).toBuilder()\n+                .site(Site.builder().page(\"www.awesome-page.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        final InvibesBidRequest expectedRequest = InvibesBidRequest.builder()\n+                .bidParamsJson(\"{\\\"PlacementIds\\\":[\\\"12\\\"],\\\"BidVersion\\\":\\\"4\\\",\"\n+                        + \"\\\"Properties\\\":{\\\"12\\\":{\\\"Formats\\\":[{\\\"w\\\":15,\\\"h\\\":12}]}}}\")\n+                .isTestBid(Boolean.TRUE)\n+                .location(\"www.awesome-page.com\")\n+                .gdpr(Boolean.TRUE)\n+                .gdprConsent(StringUtils.EMPTY)\n+                .invibBVLog(Boolean.TRUE)\n+                .videoAdDebug(Boolean.TRUE)\n+                .lid(StringUtils.EMPTY)\n+                .bvid(\"test\")\n+                .build();\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1).extracting(HttpRequest::getPayload).containsOnly(expectedRequest);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListWhenBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBid() throws JsonProcessingException {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(\n+                InvibesBidRequest.builder()\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDAwODcyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjozMToxNVrOHlpYXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjozMToxNVrOHlpYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIzNzM0MA==", "bodyText": "one line", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509237340", "createdAt": "2020-10-21T12:31:15Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(\n+                Collections.singletonList(bidRequest.getImp().get(0).toBuilder().banner(null).build())).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result =\n+                invibesBidder.makeHttpRequests(bidRequestWithoutBanner);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Banner not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Site not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent2() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true))).toBuilder()\n+                .site(Site.builder().page(\"www.awesome-page.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        final InvibesBidRequest expectedRequest = InvibesBidRequest.builder()\n+                .bidParamsJson(\"{\\\"PlacementIds\\\":[\\\"12\\\"],\\\"BidVersion\\\":\\\"4\\\",\"\n+                        + \"\\\"Properties\\\":{\\\"12\\\":{\\\"Formats\\\":[{\\\"w\\\":15,\\\"h\\\":12}]}}}\")\n+                .isTestBid(Boolean.TRUE)\n+                .location(\"www.awesome-page.com\")\n+                .gdpr(Boolean.TRUE)\n+                .gdprConsent(StringUtils.EMPTY)\n+                .invibBVLog(Boolean.TRUE)\n+                .videoAdDebug(Boolean.TRUE)\n+                .lid(StringUtils.EMPTY)\n+                .bvid(\"test\")\n+                .build();\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1).extracting(HttpRequest::getPayload).containsOnly(expectedRequest);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListWhenBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDAxMjQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjozMjowNVrOHlpaog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjo0MzowM1rOHmquSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIzNzkyMg==", "bodyText": ".extracting(BidderBid::getBid)", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509237922", "createdAt": "2020-10-21T12:32:05Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(\n+                Collections.singletonList(bidRequest.getImp().get(0).toBuilder().banner(null).build())).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result =\n+                invibesBidder.makeHttpRequests(bidRequestWithoutBanner);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Banner not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Site not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent2() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true))).toBuilder()\n+                .site(Site.builder().page(\"www.awesome-page.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        final InvibesBidRequest expectedRequest = InvibesBidRequest.builder()\n+                .bidParamsJson(\"{\\\"PlacementIds\\\":[\\\"12\\\"],\\\"BidVersion\\\":\\\"4\\\",\"\n+                        + \"\\\"Properties\\\":{\\\"12\\\":{\\\"Formats\\\":[{\\\"w\\\":15,\\\"h\\\":12}]}}}\")\n+                .isTestBid(Boolean.TRUE)\n+                .location(\"www.awesome-page.com\")\n+                .gdpr(Boolean.TRUE)\n+                .gdprConsent(StringUtils.EMPTY)\n+                .invibBVLog(Boolean.TRUE)\n+                .videoAdDebug(Boolean.TRUE)\n+                .lid(StringUtils.EMPTY)\n+                .bvid(\"test\")\n+                .build();\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1).extracting(HttpRequest::getPayload).containsOnly(expectedRequest);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListWhenBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBid() throws JsonProcessingException {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(\n+                InvibesBidRequest.builder()\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMwNzkxNA==", "bodyText": "idea of this test to check is it banner bid or not, extracting will not give possibility to check like this\nBidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"EUR\")", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r510307914", "createdAt": "2020-10-22T16:43:03Z", "author": {"login": "snahornyi"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(\n+                Collections.singletonList(bidRequest.getImp().get(0).toBuilder().banner(null).build())).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result =\n+                invibesBidder.makeHttpRequests(bidRequestWithoutBanner);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Banner not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Site not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent2() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true))).toBuilder()\n+                .site(Site.builder().page(\"www.awesome-page.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        final InvibesBidRequest expectedRequest = InvibesBidRequest.builder()\n+                .bidParamsJson(\"{\\\"PlacementIds\\\":[\\\"12\\\"],\\\"BidVersion\\\":\\\"4\\\",\"\n+                        + \"\\\"Properties\\\":{\\\"12\\\":{\\\"Formats\\\":[{\\\"w\\\":15,\\\"h\\\":12}]}}}\")\n+                .isTestBid(Boolean.TRUE)\n+                .location(\"www.awesome-page.com\")\n+                .gdpr(Boolean.TRUE)\n+                .gdprConsent(StringUtils.EMPTY)\n+                .invibBVLog(Boolean.TRUE)\n+                .videoAdDebug(Boolean.TRUE)\n+                .lid(StringUtils.EMPTY)\n+                .bvid(\"test\")\n+                .build();\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1).extracting(HttpRequest::getPayload).containsOnly(expectedRequest);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListWhenBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBid() throws JsonProcessingException {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(\n+                InvibesBidRequest.builder()\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIzNzkyMg=="}, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDAxNDk0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjozMjo0N1rOHlpcUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjozMjo0N1rOHlpcUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIzODM1Mg==", "bodyText": "check when InvibesBidderResponse.class have errors", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509238352", "createdAt": "2020-10-21T12:32:47Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(\n+                Collections.singletonList(bidRequest.getImp().get(0).toBuilder().banner(null).build())).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result =\n+                invibesBidder.makeHttpRequests(bidRequestWithoutBanner);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Banner not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Site not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent2() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true))).toBuilder()\n+                .site(Site.builder().page(\"www.awesome-page.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        final InvibesBidRequest expectedRequest = InvibesBidRequest.builder()\n+                .bidParamsJson(\"{\\\"PlacementIds\\\":[\\\"12\\\"],\\\"BidVersion\\\":\\\"4\\\",\"\n+                        + \"\\\"Properties\\\":{\\\"12\\\":{\\\"Formats\\\":[{\\\"w\\\":15,\\\"h\\\":12}]}}}\")\n+                .isTestBid(Boolean.TRUE)\n+                .location(\"www.awesome-page.com\")\n+                .gdpr(Boolean.TRUE)\n+                .gdprConsent(StringUtils.EMPTY)\n+                .invibBVLog(Boolean.TRUE)\n+                .videoAdDebug(Boolean.TRUE)\n+                .lid(StringUtils.EMPTY)\n+                .bvid(\"test\")\n+                .build();\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1).extracting(HttpRequest::getPayload).containsOnly(expectedRequest);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListWhenBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBid() throws JsonProcessingException {\n+        // given\n+        final HttpCall<InvibesBidRequest> httpCall = givenHttpCall(\n+                InvibesBidRequest.builder()\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = invibesBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"EUR\"));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDAyMDExOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjozNDowMFrOHlpfdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjozNDowMFrOHlpfdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIzOTE1OQ==", "bodyText": "Add test for multiple imps with exts", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r509239159", "createdAt": "2020-10-21T12:34:00Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.invibes;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidRequest;\n+import org.prebid.server.bidder.invibes.model.InvibesBidderResponse;\n+import org.prebid.server.bidder.invibes.model.InvibesTypedBid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.ExtImpInvibes;\n+import org.prebid.server.proto.openrtb.ext.request.invibes.model.InvibesDebug;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class InvibesBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/test\";\n+\n+    private InvibesBidder invibesBidder;\n+\n+    @Before\n+    public void setUp() {\n+        invibesBidder = new InvibesBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        Assertions.assertThatIllegalArgumentException().isThrownBy(() ->\n+                new InvibesBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 1003, InvibesDebug.of(\"test\", true)))\n+                .toBuilder().site(Site.builder().page(\"www.test.com\").build()).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://bid3.videostep.com/test\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error parsing invibesExt parameters\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenBannerIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity(), ExtImpInvibes\n+                .of(\"12\", 15, InvibesDebug.of(\"test\", true)));\n+\n+        final BidRequest bidRequestWithoutBanner = bidRequest.toBuilder().imp(\n+                Collections.singletonList(bidRequest.getImp().get(0).toBuilder().banner(null).build())).build();\n+\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result =\n+                invibesBidder.makeHttpRequests(bidRequestWithoutBanner);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Banner not specified\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68385d1502acbd3df963e4426f6e5ecfcda85d3"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTI4ODM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToxMDozOFrOHqShcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToxMDozOFrOHqShcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwNTcxNA==", "bodyText": "this line is redundant if you use bidParams.toBuilder().\nAre you sure that you want to use builder here. You can set return value to void, and modify received object", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r514105714", "createdAt": "2020-10-29T09:10:38Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/invibes/InvibesBidder.java", "diffHunk": "@@ -128,42 +137,67 @@ private Boolean resolveGDPRApplies(Regs regs) {\n         return gdpr != null ? gdpr == 1 : Boolean.TRUE;\n     }\n \n-    private InvibesInternalParams updateInvibesInternalParams(\n-            InvibesInternalParams invibesInternalParams, ExtImpInvibes invibesExt,\n-            Imp imp) {\n-        final String placementId = invibesExt.getPlacementId();\n-        final List<String> updatedPlacementIds = getUpdatedPlacementIds(\n-                placementId, invibesInternalParams.getBidParams().getPlacementIDs());\n-\n-        final Map<String, InvibesPlacementProperty> updatedProperties\n-                = getUpdatedProperties(invibesInternalParams.getBidParams().getProperties(),\n-                placementId, imp.getId(), resolveAdFormats(imp.getBanner()));\n+    private InvibesInternalParams updateInvibesInternalParams(InvibesInternalParams invibesInternalParams,\n+                                                              ExtImpInvibes invibesExt,\n+                                                              Imp imp) {\n+        final String impExtPlacementId = invibesExt.getPlacementId();\n+        final InvibesBidParams bidParams = invibesInternalParams.getBidParams();\n+        final List<String> updatedPlacementIds = bidParams.getPlacementIds();\n \n-        final InvibesBidParams updatedBidParams = invibesInternalParams.getBidParams().toBuilder()\n-                .placementIDs(updatedPlacementIds)\n-                .properties(updatedProperties)\n+        if (StringUtils.isNotBlank(impExtPlacementId)) {\n+            updatedPlacementIds.add(impExtPlacementId.trim());\n+        }\n+        final Banner banner = imp.getBanner();\n+        final List<Format> adFormats = resolveAdFormats(banner);\n+\n+        bidParams.getProperties()\n+                .put(impExtPlacementId, InvibesPlacementProperty.builder()\n+                        .impId(imp.getId())\n+                        .formats(adFormats)\n+                        .build());\n+\n+        final InvibesBidParams updatedBidParams = bidParams.toBuilder()\n+                .placementIds(updatedPlacementIds)\n+                .properties(bidParams.getProperties())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb91ab2bcbbeb04fedfc965b7a4d66ddf9c7d8a8"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTM2MDIyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyODoxMlrOHqTNxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyODoxMlrOHqTNxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNzA2MA==", "bodyText": "Ok.\n\n\nMake variable for values that need to be checked. For example. What is 11. int firstImpBannerW = 10\nfirstImpBannerH = 11\netc\n\n\nUsage of extracting(HttpRequest::getPayload).hasSize(1) just to extract this value next is not necessary.\nTry to make clear pipeline.\nsmth like this\n\n\n                .extracting(HttpRequest::getPayload)\n                .extracting(invibesBidRequest -> mapper.readValue(invibesBidRequest.getBidParamsJson(), InvibesBidParams.class))\n                .containsOnly(expectedInivibesBidParameters)\n\nLike in the method below", "url": "https://github.com/prebid/prebid-server-java/pull/957#discussion_r514117060", "createdAt": "2020-10-29T09:28:12Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/invibes/InvibesBidderTest.java", "diffHunk": "@@ -120,31 +127,84 @@ public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent() {\n     }\n \n     @Test\n-    public void makeHttpRequestsShouldReturnErrorWhenSiteIsNotPresent2() {\n+    public void shouldCreateRequestWithDataFromEveryImpression() throws JsonProcessingException {\n+        // given\n+        final List<Imp> imps = Arrays.asList(givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder().h(10).w(11).build()), ExtImpInvibes.of(\"12\", 15,\n+                        InvibesDebug.of(\"test1\", true))),\n+                givenImp(impBuilder -> impBuilder\n+                        .banner(Banner.builder().h(14).w(15).build()), ExtImpInvibes.of(\"15\", 1001,\n+                        InvibesDebug.of(\"test2\", false)))\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .site(Site.builder().page(\"www.awesome-page.com\").build())\n+                .imp(imps)\n+                .build();\n+        // when\n+        final Result<List<HttpRequest<InvibesBidRequest>>> result = invibesBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(HttpRequest::getPayload).hasSize(1);\n+        InvibesBidParams expectedBidParams =\n+                mapper.readValue(result.getValue().get(0).getPayload().getBidParamsJson(), InvibesBidParams.class);\n+        assertThat(expectedBidParams.getPlacementIds()).hasSize(2)\n+                .containsOnly(\"12\", \"15\");\n+        final Format firstExpectedFormat = Format.builder().w(11).h(10).build();\n+        final Format secondExpectedFormat = Format.builder().w(15).h(14).build();\n+        assertThat(expectedBidParams.getProperties().values()).hasSize(2)\n+                .containsOnly(InvibesPlacementProperty.builder()\n+                                .formats(Collections.singletonList(firstExpectedFormat))\n+                                .build(),\n+                        InvibesPlacementProperty.builder()\n+                                .formats(Collections.singletonList(secondExpectedFormat))\n+                                .build());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb91ab2bcbbeb04fedfc965b7a4d66ddf9c7d8a8"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3924, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}