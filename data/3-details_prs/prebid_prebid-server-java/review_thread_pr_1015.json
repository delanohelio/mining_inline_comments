{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNDA3OTY1", "number": 1015, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDowMDozN1rOE7ET_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo0NjoxM1rOE_IlvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzcyMDk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/settings/proto/response/HttpAccountsResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDowMDozN1rOH2f8Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDowMDozN1rOH2f8Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkwODQ4Mg==", "bodyText": "Since account payload is mapped to Account in HttpApplicationSettings it makes sense to do this conversion one time when HttpAccountResponse is constructed out of response body by changing this field to have Map<String, Account> type.", "url": "https://github.com/prebid/prebid-server-java/pull/1015#discussion_r526908482", "createdAt": "2020-11-19T14:00:37Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/settings/proto/response/HttpAccountsResponse.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.prebid.server.settings.proto.response;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+import java.util.Map;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class HttpAccountsResponse {\n+\n+    Map<String, ObjectNode> accounts;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "687a4eb9e8b6d2b91016b35cc1e1045cd360d815"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjMzOTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/settings/HttpApplicationSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjozOTozM1rOH8qxlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjozOTozM1rOH8qxlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM3NzQyOA==", "bodyText": "pls rename to processStoredDataResponse(..)", "url": "https://github.com/prebid/prebid-server-java/pull/1015#discussion_r533377428", "createdAt": "2020-12-01T12:39:33Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/settings/HttpApplicationSettings.java", "diffHunk": "@@ -169,14 +219,14 @@ private static String joinIds(Set<String> ids) {\n         return String.join(\"\\\",\\\"\", ids);\n     }\n \n-    private static Future<StoredDataResult> failResponse(Throwable throwable, Set<String> requestIds,\n-                                                         Set<String> impIds) {\n+    private static Future<StoredDataResult> failStoreDataResponse(Throwable throwable, Set<String> requestIds,\n+                                                                  Set<String> impIds) {\n         return Future.succeededFuture(\n                 toFailedStoredDataResult(requestIds, impIds, throwable.getMessage()));\n     }\n \n-    private Future<StoredDataResult> processResponse(HttpClientResponse response, Set<String> requestIds,\n-                                                     Set<String> impIds) {\n+    private Future<StoredDataResult> processStoreDataResponse(HttpClientResponse response, Set<String> requestIds,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c4851f073f4f42544c60b307e2c354caebb3c27"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjM0MDg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/settings/HttpApplicationSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjozOTo0OVrOH8qyHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjozOTo0OVrOH8qyHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM3NzU2Ng==", "bodyText": "pls rename to failStoredDataResponse(..)", "url": "https://github.com/prebid/prebid-server-java/pull/1015#discussion_r533377566", "createdAt": "2020-12-01T12:39:49Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/settings/HttpApplicationSettings.java", "diffHunk": "@@ -169,14 +219,14 @@ private static String joinIds(Set<String> ids) {\n         return String.join(\"\\\",\\\"\", ids);\n     }\n \n-    private static Future<StoredDataResult> failResponse(Throwable throwable, Set<String> requestIds,\n-                                                         Set<String> impIds) {\n+    private static Future<StoredDataResult> failStoreDataResponse(Throwable throwable, Set<String> requestIds,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c4851f073f4f42544c60b307e2c354caebb3c27"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjM1MTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/settings/HttpApplicationSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo0MjoyOVrOH8q38g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo0MjoyOVrOH8q38g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM3OTA1OA==", "bodyText": "Potentially, accounts can be undefined in response, so we should tolerate the case.", "url": "https://github.com/prebid/prebid-server-java/pull/1015#discussion_r533379058", "createdAt": "2020-12-01T12:42:29Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/settings/HttpApplicationSettings.java", "diffHunk": "@@ -77,12 +78,61 @@ public HttpApplicationSettings(HttpClient httpClient, JacksonMapper mapper, Stri\n         this.videoEndpoint = HttpUtil.validateUrl(Objects.requireNonNull(videoEndpoint));\n     }\n \n-    /**\n-     * Not supported and returns failed result.\n-     */\n     @Override\n     public Future<Account> getAccountById(String accountId, Timeout timeout) {\n-        return Future.failedFuture(new PreBidException(\"Not supported\"));\n+\n+        return fetchAccountsByIds(Collections.singleton(accountId), timeout)\n+                .map(accounts -> accounts.stream()\n+                        .findFirst()\n+                        .orElseThrow(() ->\n+                                new PreBidException(String.format(\"Account with id :%s not found\", accountId))));\n+    }\n+\n+    private Future<Set<Account>> fetchAccountsByIds(Set<String> accountIds, Timeout timeout) {\n+        if (CollectionUtils.isEmpty(accountIds)) {\n+            return Future.succeededFuture(Collections.emptySet());\n+        }\n+        final long remainingTimeout = timeout.remaining();\n+        if (timeout.remaining() <= 0) {\n+            return Future.failedFuture(new TimeoutException(\"Timeout has been exceeded\"));\n+        }\n+\n+        return httpClient.get(accountsRequestUrlFrom(endpoint, accountIds), HttpUtil.headers(), remainingTimeout)\n+                .compose(response -> processAccountsResponse(response, accountIds))\n+                .recover(Future::failedFuture);\n+    }\n+\n+    private static String accountsRequestUrlFrom(String endpoint, Set<String> accountIds) {\n+        final StringBuilder url = new StringBuilder(endpoint);\n+        url.append(endpoint.contains(\"?\") ? \"&\" : \"?\");\n+\n+        if (!accountIds.isEmpty()) {\n+            url.append(\"account-ids=[\\\"\").append(joinIds(accountIds)).append(\"\\\"]\");\n+        }\n+\n+        return url.toString();\n+    }\n+\n+    private Future<Set<Account>> processAccountsResponse(HttpClientResponse response, Set<String> accountIds) {\n+        return Future.succeededFuture(\n+                toAccountsResult(response.getStatusCode(), response.getBody(), accountIds));\n+    }\n+\n+    private Set<Account> toAccountsResult(int statusCode, String body, Set<String> accountIds) {\n+        if (statusCode != HttpResponseStatus.OK.code()) {\n+            throw new PreBidException(String.format(\"Error fetching accounts %s via http: \"\n+                    + \"unexpected response status %d\", accountIds, statusCode));\n+        }\n+\n+        final HttpAccountsResponse response;\n+        try {\n+            response = mapper.decodeValue(body, HttpAccountsResponse.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(String.format(\"Error fetching accounts %s \"\n+                    + \"via http: failed to parse response: %s\", accountIds, e.getMessage()));\n+        }\n+\n+        return new HashSet<>(response.getAccounts().values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c4851f073f4f42544c60b307e2c354caebb3c27"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjM2NDc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/settings/HttpApplicationSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo0NjoxM1rOH8rAQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo0NjoxM1rOH8rAQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4MTE4NQ==", "bodyText": "Minor. Pls set white-space after the colon.", "url": "https://github.com/prebid/prebid-server-java/pull/1015#discussion_r533381185", "createdAt": "2020-12-01T12:46:13Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/settings/HttpApplicationSettings.java", "diffHunk": "@@ -77,12 +78,61 @@ public HttpApplicationSettings(HttpClient httpClient, JacksonMapper mapper, Stri\n         this.videoEndpoint = HttpUtil.validateUrl(Objects.requireNonNull(videoEndpoint));\n     }\n \n-    /**\n-     * Not supported and returns failed result.\n-     */\n     @Override\n     public Future<Account> getAccountById(String accountId, Timeout timeout) {\n-        return Future.failedFuture(new PreBidException(\"Not supported\"));\n+\n+        return fetchAccountsByIds(Collections.singleton(accountId), timeout)\n+                .map(accounts -> accounts.stream()\n+                        .findFirst()\n+                        .orElseThrow(() ->\n+                                new PreBidException(String.format(\"Account with id :%s not found\", accountId))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c4851f073f4f42544c60b307e2c354caebb3c27"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3812, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}