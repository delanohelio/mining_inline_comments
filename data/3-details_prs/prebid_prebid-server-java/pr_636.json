{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MjM4NzQ0", "number": 636, "title": "AdminManager class added", "bodyText": "AdminManager class added. Replaced LogModifier with AdminManager", "createdAt": "2020-03-12T13:19:26Z", "url": "https://github.com/prebid/prebid-server-java/pull/636", "merged": true, "mergeCommit": {"oid": "49df769fb440af123e518aa5fa483bfd4503f0d5"}, "closed": true, "closedAt": "2020-04-08T08:34:42Z", "author": {"login": "apaliy"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcM7kyKgH2gAyMzg3MjM4NzQ0OmQ4MzBlNzI5ZTg1MmM3ZDI2YjAzN2Y2ZmEwYTgxZmU2ZDYzMzVhMjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVX-GIAH2gAyMzg3MjM4NzQ0OjdmMjdjMWYxZmI2NzVlMmI0NDMzNDExYjU2NTc1ZjVmZThhNzUyZjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d830e729e852c7d26b037f6fa0a81fe6d6335a22", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/d830e729e852c7d26b037f6fa0a81fe6d6335a22", "committedDate": "2020-03-12T13:17:45Z", "message": "AdminManager class added. Replaced LogModifier with AdminManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5068297e9c6521f62cf3cdd7e71bd5f6e6b0d79e", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/5068297e9c6521f62cf3cdd7e71bd5f6e6b0d79e", "committedDate": "2020-03-12T13:36:32Z", "message": "logging added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7aefa291859be75b8f481f71713ffcad2510632a", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/7aefa291859be75b8f481f71713ffcad2510632a", "committedDate": "2020-03-12T16:34:51Z", "message": "Test added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "committedDate": "2020-03-13T09:16:55Z", "message": "Removed LogModifier.java. Adda AdminManagerTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzA1MTcy", "url": "https://github.com/prebid/prebid-server-java/pull/636#pullrequestreview-376705172", "createdAt": "2020-03-18T09:47:54Z", "commit": {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOTo0Nzo1NFrOF39SOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDoxNToyNlrOF3-UOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIyMDA4OA==", "bodyText": "request.getParam(LOGGING_PARAM) could be extracted to a local variable as it is used down below once again", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394220088", "createdAt": "2020-03-18T09:47:54Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/handler/AdminHandler.java", "diffHunk": "@@ -16,34 +17,52 @@\n \n     private static final String RECORDS_PARAM = \"records\";\n     private static final String LOGGING_PARAM = \"logging\";\n+    private static final String TIME_PARAM = \"time\";\n \n-    private final LogModifier logModifier;\n+    private final AdminManager adminManager;\n \n-    public AdminHandler(LogModifier logModifier) {\n-        this.logModifier = Objects.requireNonNull(logModifier);\n+    public AdminHandler(AdminManager adminManager) {\n+        this.adminManager = Objects.requireNonNull(adminManager);\n     }\n \n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        final BiConsumer<Logger, String> loggingLevelModifier;\n-        final String loggingParam = request.getParam(LOGGING_PARAM);\n-        final String recordsParam = request.getParam(RECORDS_PARAM);\n-        final int records;\n-\n-        try {\n-            loggingLevelModifier = loggingLevel(loggingParam);\n-            records = records(recordsParam);\n-        } catch (IllegalArgumentException e) {\n+        if (request.getParam(LOGGING_PARAM) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIyMzMxNA==", "bodyText": "Same applies to request.getParam(TIME_PARAM)", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394223314", "createdAt": "2020-03-18T09:53:13Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/handler/AdminHandler.java", "diffHunk": "@@ -16,34 +17,52 @@\n \n     private static final String RECORDS_PARAM = \"records\";\n     private static final String LOGGING_PARAM = \"logging\";\n+    private static final String TIME_PARAM = \"time\";\n \n-    private final LogModifier logModifier;\n+    private final AdminManager adminManager;\n \n-    public AdminHandler(LogModifier logModifier) {\n-        this.logModifier = Objects.requireNonNull(logModifier);\n+    public AdminHandler(AdminManager adminManager) {\n+        this.adminManager = Objects.requireNonNull(adminManager);\n     }\n \n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        final BiConsumer<Logger, String> loggingLevelModifier;\n-        final String loggingParam = request.getParam(LOGGING_PARAM);\n-        final String recordsParam = request.getParam(RECORDS_PARAM);\n-        final int records;\n-\n-        try {\n-            loggingLevelModifier = loggingLevel(loggingParam);\n-            records = records(recordsParam);\n-        } catch (IllegalArgumentException e) {\n+        if (request.getParam(LOGGING_PARAM) != null) {\n+            final BiConsumer<Logger, String> loggingLevelModifier;\n+            final String loggingParam = request.getParam(LOGGING_PARAM);\n+            final String recordsParam = request.getParam(RECORDS_PARAM);\n+            final int records;\n+\n+            try {\n+                loggingLevelModifier = loggingLevel(loggingParam);\n+                records = records(recordsParam);\n+            } catch (IllegalArgumentException e) {\n+                context.response()\n+                        .setStatusCode(HttpResponseStatus.BAD_REQUEST.code())\n+                        .end(e.getMessage());\n+                return;\n+            }\n+\n+            adminManager.setupByCounter(AdminManager.ADMIN_COUNTER_KEY, records, loggingLevelModifier,\n+                    (BiConsumer<Logger, String>) (logger, text) -> defaultLogModifier(logger).accept(logger, text));\n+            context.response()\n+                    .end(String.format(\"Logging level was changed to %s, for %s requests\", loggingParam, recordsParam));\n+        } else if (request.getParam(TIME_PARAM) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIyMzg1OQ==", "bodyText": "What happens if time parameter could not be parsed as Long?", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394223859", "createdAt": "2020-03-18T09:54:06Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/handler/AdminHandler.java", "diffHunk": "@@ -16,34 +17,52 @@\n \n     private static final String RECORDS_PARAM = \"records\";\n     private static final String LOGGING_PARAM = \"logging\";\n+    private static final String TIME_PARAM = \"time\";\n \n-    private final LogModifier logModifier;\n+    private final AdminManager adminManager;\n \n-    public AdminHandler(LogModifier logModifier) {\n-        this.logModifier = Objects.requireNonNull(logModifier);\n+    public AdminHandler(AdminManager adminManager) {\n+        this.adminManager = Objects.requireNonNull(adminManager);\n     }\n \n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        final BiConsumer<Logger, String> loggingLevelModifier;\n-        final String loggingParam = request.getParam(LOGGING_PARAM);\n-        final String recordsParam = request.getParam(RECORDS_PARAM);\n-        final int records;\n-\n-        try {\n-            loggingLevelModifier = loggingLevel(loggingParam);\n-            records = records(recordsParam);\n-        } catch (IllegalArgumentException e) {\n+        if (request.getParam(LOGGING_PARAM) != null) {\n+            final BiConsumer<Logger, String> loggingLevelModifier;\n+            final String loggingParam = request.getParam(LOGGING_PARAM);\n+            final String recordsParam = request.getParam(RECORDS_PARAM);\n+            final int records;\n+\n+            try {\n+                loggingLevelModifier = loggingLevel(loggingParam);\n+                records = records(recordsParam);\n+            } catch (IllegalArgumentException e) {\n+                context.response()\n+                        .setStatusCode(HttpResponseStatus.BAD_REQUEST.code())\n+                        .end(e.getMessage());\n+                return;\n+            }\n+\n+            adminManager.setupByCounter(AdminManager.ADMIN_COUNTER_KEY, records, loggingLevelModifier,\n+                    (BiConsumer<Logger, String>) (logger, text) -> defaultLogModifier(logger).accept(logger, text));\n+            context.response()\n+                    .end(String.format(\"Logging level was changed to %s, for %s requests\", loggingParam, recordsParam));\n+        } else if (request.getParam(TIME_PARAM) != null) {\n+            final long timeParam = Long.parseLong(request.getParam(TIME_PARAM));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzMDA2MA==", "bodyText": "Aren't curly braces redundant here?", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394230060", "createdAt": "2020-03-18T10:03:58Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/handler/AdminHandler.java", "diffHunk": "@@ -16,34 +17,52 @@\n \n     private static final String RECORDS_PARAM = \"records\";\n     private static final String LOGGING_PARAM = \"logging\";\n+    private static final String TIME_PARAM = \"time\";\n \n-    private final LogModifier logModifier;\n+    private final AdminManager adminManager;\n \n-    public AdminHandler(LogModifier logModifier) {\n-        this.logModifier = Objects.requireNonNull(logModifier);\n+    public AdminHandler(AdminManager adminManager) {\n+        this.adminManager = Objects.requireNonNull(adminManager);\n     }\n \n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        final BiConsumer<Logger, String> loggingLevelModifier;\n-        final String loggingParam = request.getParam(LOGGING_PARAM);\n-        final String recordsParam = request.getParam(RECORDS_PARAM);\n-        final int records;\n-\n-        try {\n-            loggingLevelModifier = loggingLevel(loggingParam);\n-            records = records(recordsParam);\n-        } catch (IllegalArgumentException e) {\n+        if (request.getParam(LOGGING_PARAM) != null) {\n+            final BiConsumer<Logger, String> loggingLevelModifier;\n+            final String loggingParam = request.getParam(LOGGING_PARAM);\n+            final String recordsParam = request.getParam(RECORDS_PARAM);\n+            final int records;\n+\n+            try {\n+                loggingLevelModifier = loggingLevel(loggingParam);\n+                records = records(recordsParam);\n+            } catch (IllegalArgumentException e) {\n+                context.response()\n+                        .setStatusCode(HttpResponseStatus.BAD_REQUEST.code())\n+                        .end(e.getMessage());\n+                return;\n+            }\n+\n+            adminManager.setupByCounter(AdminManager.ADMIN_COUNTER_KEY, records, loggingLevelModifier,\n+                    (BiConsumer<Logger, String>) (logger, text) -> defaultLogModifier(logger).accept(logger, text));\n+            context.response()\n+                    .end(String.format(\"Logging level was changed to %s, for %s requests\", loggingParam, recordsParam));\n+        } else if (request.getParam(TIME_PARAM) != null) {\n+            final long timeParam = Long.parseLong(request.getParam(TIME_PARAM));\n+\n+            adminManager.setupByTime(AdminManager.ADMIN_TIME_KEY, timeParam,\n+                    (BiConsumer<ConditionalLogger, String>) (conditionalLogger, text) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzMjgxOA==", "bodyText": "It's considered a bad practice to catch NPE. Instead of this please check for null wherever it is possible to get one.", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394232818", "createdAt": "2020-03-18T10:08:42Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java", "diffHunk": "@@ -144,6 +147,44 @@ public void handle(RoutingContext routingContext) {\n                 .setHandler(responseResult -> handleResult(responseResult, ampEventBuilder, routingContext, startTime));\n     }\n \n+    private AuctionContext validateAccount(AuctionContext context) {\n+        if (adminManager.contains(AdminManager.ADMIN_TIME_KEY)) {\n+\n+            try {\n+                final List<String> accountIds = new ArrayList<>();\n+                accountIds.add(context.getBidRequest().getSite().getPublisher().getId());\n+                accountIds.add(context.getBidRequest().getApp().getPublisher().getId());\n+                accountIds.add(context.getAccount().getId());\n+                accountIds.addAll(context.getBidRequest().getImp().stream()\n+                        .map(Imp::getExt)\n+                        .map(this::parseExtImpRubicon)\n+                        .filter(Objects::nonNull)\n+                        .map(ExtImpRubicon::getAccountId)\n+                        .map(String::valueOf)\n+                        .collect(Collectors.toList()));\n+\n+                if (accountIds.contains(null)) {\n+                    printLog();\n+                }\n+            } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzMzMwNg==", "bodyText": "I'm concerned about the logic of this method.\nWhat are you trying to achieve here and what is the actual requirement?", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394233306", "createdAt": "2020-03-18T10:09:35Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java", "diffHunk": "@@ -144,6 +147,44 @@ public void handle(RoutingContext routingContext) {\n                 .setHandler(responseResult -> handleResult(responseResult, ampEventBuilder, routingContext, startTime));\n     }\n \n+    private AuctionContext validateAccount(AuctionContext context) {\n+        if (adminManager.contains(AdminManager.ADMIN_TIME_KEY)) {\n+\n+            try {\n+                final List<String> accountIds = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzNDA4OA==", "bodyText": "The method name is too generic, please pick a more telling name.", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394234088", "createdAt": "2020-03-18T10:10:46Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java", "diffHunk": "@@ -144,6 +147,44 @@ public void handle(RoutingContext routingContext) {\n                 .setHandler(responseResult -> handleResult(responseResult, ampEventBuilder, routingContext, startTime));\n     }\n \n+    private AuctionContext validateAccount(AuctionContext context) {\n+        if (adminManager.contains(AdminManager.ADMIN_TIME_KEY)) {\n+\n+            try {\n+                final List<String> accountIds = new ArrayList<>();\n+                accountIds.add(context.getBidRequest().getSite().getPublisher().getId());\n+                accountIds.add(context.getBidRequest().getApp().getPublisher().getId());\n+                accountIds.add(context.getAccount().getId());\n+                accountIds.addAll(context.getBidRequest().getImp().stream()\n+                        .map(Imp::getExt)\n+                        .map(this::parseExtImpRubicon)\n+                        .filter(Objects::nonNull)\n+                        .map(ExtImpRubicon::getAccountId)\n+                        .map(String::valueOf)\n+                        .collect(Collectors.toList()));\n+\n+                if (accountIds.contains(null)) {\n+                    printLog();\n+                }\n+            } catch (NullPointerException e) {\n+                printLog();\n+            }\n+        }\n+        return context;\n+    }\n+\n+    private void printLog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzNTMwMw==", "bodyText": "Please avoid using star imports", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394235303", "createdAt": "2020-03-18T10:12:47Z", "author": {"login": "schernysh"}, "path": "src/test/java/org/prebid/server/manager/AdminManagerTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.prebid.server.manager;\n+\n+import io.vertx.core.logging.Logger;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.util.function.BiConsumer;\n+\n+import static org.assertj.core.api.Assertions.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzNjk4NA==", "bodyText": "Please consider using java.time.Instant instead of java.util.Date throughout this class.", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394236984", "createdAt": "2020-03-18T10:15:26Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/manager/AdminManager.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.prebid.server.manager;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.Date;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.BiConsumer;\n+\n+public class AdminManager {\n+\n+    public static final String ADMIN_COUNTER_KEY = \"admin_counter\";\n+    public static final String ADMIN_TIME_KEY = \"admin_time\";\n+\n+    private ConcurrentHashMap<String, Rule<?, ?>> actionMap;\n+\n+    public AdminManager() {\n+        actionMap = new ConcurrentHashMap<>();\n+    }\n+\n+    public void setupByCounter(String key, Integer amount, BiConsumer<?, ?> action, BiConsumer<?, ?> onFinish) {\n+        actionMap.put(key, new CounterRule(action, onFinish, amount));\n+    }\n+\n+    public void setupByTime(String key, long timeMillis, BiConsumer<?, ?> action, BiConsumer<?, ?> onFinish) {\n+        actionMap.put(key, new TimeRule(action, onFinish, timeMillis));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T, U> void accept(String key, T t, U u) {\n+        final Rule<T, U> rule = (Rule<T, U>) actionMap.get(key);\n+        rule.applyRule().accept(t, u);\n+    }\n+\n+    public boolean contains(String key) {\n+        return actionMap.containsKey(key);\n+    }\n+\n+    @AllArgsConstructor\n+    private abstract static class Rule<T, U> {\n+\n+        protected BiConsumer<T, U> onRun;\n+\n+        protected BiConsumer<T, U> onFinish;\n+\n+        abstract BiConsumer<T, U> applyRule();\n+    }\n+\n+    private static class TimeRule<T, U> extends Rule<T, U> {\n+\n+        private Long time;\n+\n+        TimeRule(BiConsumer<T, U> onRun, BiConsumer<T, U> onFinish, Long timeMillis) {\n+            super(onRun, onFinish);\n+            this.onFinish = onFinish;\n+            this.time = new Date().getTime() + timeMillis;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/7f923685dc85bf3716b01ce85ce2299bdbf2455d", "committedDate": "2020-03-18T13:02:53Z", "message": "Fix AdminManager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODY2MTA1", "url": "https://github.com/prebid/prebid-server-java/pull/636#pullrequestreview-376866105", "createdAt": "2020-03-18T13:34:16Z", "commit": {"oid": "7f923685dc85bf3716b01ce85ce2299bdbf2455d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzozNDoxNlrOF4FI3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzozNDoxNlrOF4FI3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0ODc2Nw==", "bodyText": "Actually time could be Instant as well. This will give an opportunity to use nice isBefore or isAfter methods. Also take note of plus method for getting another instant.\nAnother field for improvement: instead of Instance.now() use Instance.now(Clock) - this will ease testing a lot and will allow to get rid of Thread.sleep() (not 100% sure about that though :)).", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394348767", "createdAt": "2020-03-18T13:34:16Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/manager/AdminManager.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.prebid.server.manager;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.time.Instant;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.BiConsumer;\n+\n+public class AdminManager {\n+\n+    public static final String ADMIN_COUNTER_KEY = \"admin_counter\";\n+    public static final String ADMIN_TIME_KEY = \"admin_time\";\n+\n+    private ConcurrentHashMap<String, Rule<?, ?>> actionMap;\n+\n+    public AdminManager() {\n+        actionMap = new ConcurrentHashMap<>();\n+    }\n+\n+    public void setupByCounter(String key, Integer amount, BiConsumer<?, ?> action, BiConsumer<?, ?> onFinish) {\n+        actionMap.put(key, new CounterRule(action, onFinish, amount));\n+    }\n+\n+    public void setupByTime(String key, long timeMillis, BiConsumer<?, ?> action, BiConsumer<?, ?> onFinish) {\n+        actionMap.put(key, new TimeRule(action, onFinish, timeMillis));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T, U> void accept(String key, T t, U u) {\n+        final Rule<T, U> rule = (Rule<T, U>) actionMap.get(key);\n+        rule.applyRule().accept(t, u);\n+    }\n+\n+    public boolean contains(String key) {\n+        return actionMap.containsKey(key);\n+    }\n+\n+    @AllArgsConstructor\n+    private abstract static class Rule<T, U> {\n+\n+        protected BiConsumer<T, U> onRun;\n+\n+        protected BiConsumer<T, U> onFinish;\n+\n+        abstract BiConsumer<T, U> applyRule();\n+    }\n+\n+    private static class TimeRule<T, U> extends Rule<T, U> {\n+\n+        private Long time;\n+\n+        TimeRule(BiConsumer<T, U> onRun, BiConsumer<T, U> onFinish, Long timeMillis) {\n+            super(onRun, onFinish);\n+            this.onFinish = onFinish;\n+            this.time = Instant.now().toEpochMilli() + timeMillis;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f923685dc85bf3716b01ce85ce2299bdbf2455d"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfe5c6fcce7d9d7fd3d61d1a98149edb9547d657", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/bfe5c6fcce7d9d7fd3d61d1a98149edb9547d657", "committedDate": "2020-03-19T09:21:58Z", "message": "null account logging partly moved to AuctionRequestFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77890c32b6d16f956eafe733d0ecf36f6cfcb0e3", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/77890c32b6d16f956eafe733d0ecf36f6cfcb0e3", "committedDate": "2020-03-19T12:44:58Z", "message": "left only AdminManager needed code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzA0MjU1", "url": "https://github.com/prebid/prebid-server-java/pull/636#pullrequestreview-377704255", "createdAt": "2020-03-19T13:13:06Z", "commit": {"oid": "77890c32b6d16f956eafe733d0ecf36f6cfcb0e3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTM0NTI0", "url": "https://github.com/prebid/prebid-server-java/pull/636#pullrequestreview-380134524", "createdAt": "2020-03-24T09:32:24Z", "commit": {"oid": "77890c32b6d16f956eafe733d0ecf36f6cfcb0e3"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTozMjoyNVrOF6nw0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTozMjoyNVrOF6nw0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxMzIwMw==", "bodyText": "I would extract defaultLogModifier(logger) to avoid unnecessary method execution.", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r397013203", "createdAt": "2020-03-24T09:32:25Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/handler/AdminHandler.java", "diffHunk": "@@ -41,7 +41,8 @@ public void handle(RoutingContext context) {\n             return;\n         }\n \n-        logModifier.set(loggingLevelModifier, records);\n+        adminManager.setupByCounter(AdminManager.ADMIN_COUNTER_KEY, records, loggingLevelModifier,\n+                (BiConsumer<Logger, String>) (logger, text) -> defaultLogModifier(logger).accept(logger, text));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77890c32b6d16f956eafe733d0ecf36f6cfcb0e3"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19959bd7968be3add30c3441962d89948c8d36a9", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/19959bd7968be3add30c3441962d89948c8d36a9", "committedDate": "2020-04-07T06:07:00Z", "message": "Merge branch 'master' into admin-manager\n\n# Conflicts:\n#\tsrc/test/java/org/prebid/server/handler/AdminHandlerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63ee7b369baaa73acdcd1f1b101e16b60e8c7132", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/63ee7b369baaa73acdcd1f1b101e16b60e8c7132", "committedDate": "2020-04-07T12:39:12Z", "message": "AdminManager class added - refactored"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDc4Mjcy", "url": "https://github.com/prebid/prebid-server-java/pull/636#pullrequestreview-389078272", "createdAt": "2020-04-07T12:45:53Z", "commit": {"oid": "63ee7b369baaa73acdcd1f1b101e16b60e8c7132"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c041e4737e79d199a7aafcaedf1624e456e1026", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/4c041e4737e79d199a7aafcaedf1624e456e1026", "committedDate": "2020-04-07T13:06:00Z", "message": "AdminManager class added - refactored"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7e9012a88a1e46e7b803822effab7e4b8e736c2", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/d7e9012a88a1e46e7b803822effab7e4b8e736c2", "committedDate": "2020-04-07T17:54:46Z", "message": "AdminManager class added - refactored"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MzU4NDE1", "url": "https://github.com/prebid/prebid-server-java/pull/636#pullrequestreview-389358415", "createdAt": "2020-04-07T17:56:47Z", "commit": {"oid": "d7e9012a88a1e46e7b803822effab7e4b8e736c2"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f27c1f1fb675e2b4433411b56575f5fe8a752f5", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/7f27c1f1fb675e2b4433411b56575f5fe8a752f5", "committedDate": "2020-04-07T18:54:08Z", "message": "AdminManager class added - refactored"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3303, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}