{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzE5NTUy", "number": 653, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOTowMzowMlrODvCJpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOToyMzo1N1rODvCrCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjQ0OTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/events/EventUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOTowMzowMlrOGBOQqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMToyODoxNFrOGBTWQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzNTQwMg==", "bodyText": "NumberUtils.isDigits() or StringUtils.isDigits(), (but we still need to check for null bc this value is not required)", "url": "https://github.com/prebid/prebid-server-java/pull/653#discussion_r403935402", "createdAt": "2020-04-06T09:03:02Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/events/EventUtil.java", "diffHunk": "@@ -88,10 +81,14 @@ public static void validateAnalytics(RoutingContext context) {\n     }\n \n     public static void validateTimestamp(RoutingContext context) {\n-        final String timestamp = context.request().params().get(TIMESTAMP_PARAMETER);\n-        if (StringUtils.isBlank(timestamp)) {\n-            throw new IllegalArgumentException(String.format(\n-                    \"Timestamp '%s' is required query parameter and can't be empty\", TIMESTAMP_PARAMETER));\n+        final String timestamp = StringUtils.stripToNull(context.request().params().get(TIMESTAMP_PARAMETER));\n+        if (timestamp != null) {\n+            try {\n+                Long.parseLong(timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef760b23a8262be41e0eb64d0d38deec21255fe"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxODc1NQ==", "bodyText": "Both util methods doesn't guaranteed Long range value checking, so NumberFormatException can be thrown. Don't think they are useful here.", "url": "https://github.com/prebid/prebid-server-java/pull/653#discussion_r404018755", "createdAt": "2020-04-06T11:28:14Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/events/EventUtil.java", "diffHunk": "@@ -88,10 +81,14 @@ public static void validateAnalytics(RoutingContext context) {\n     }\n \n     public static void validateTimestamp(RoutingContext context) {\n-        final String timestamp = context.request().params().get(TIMESTAMP_PARAMETER);\n-        if (StringUtils.isBlank(timestamp)) {\n-            throw new IllegalArgumentException(String.format(\n-                    \"Timestamp '%s' is required query parameter and can't be empty\", TIMESTAMP_PARAMETER));\n+        final String timestamp = StringUtils.stripToNull(context.request().params().get(TIMESTAMP_PARAMETER));\n+        if (timestamp != null) {\n+            try {\n+                Long.parseLong(timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzNTQwMg=="}, "originalCommit": {"oid": "8ef760b23a8262be41e0eb64d0d38deec21255fe"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjUxNDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOToxODo1NVrOGBO3hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMToyODoyOFrOGBTW3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0NTM1MA==", "bodyText": "suggest\n   for (PutObject putObject : putObjects) {\n\n            JsonNode value = putObject.getValue();\n            if (biddersAllowingVastUpdate.contains(putObject.getBidder()) && value != null) {\n                final String updatedVastXml = modifyVastXml(value.asText(), putObject.getBidid(),\n                        putObject.getBidder(), accountId, putObject.getTimestamp());\n                value = new TextNode(updatedVastXml);\n            }\n\n            updatedPutObjects.add(putObject.toBuilder()\n                    // remove \"/vtrack\" specific fields\n                    .bidid(null)\n                    .bidder(null)\n                    .timestamp(null)\n                    \n                    .value(value)\n                    .build());\n        }", "url": "https://github.com/prebid/prebid-server-java/pull/653#discussion_r403945350", "createdAt": "2020-04-06T09:18:55Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -168,32 +168,36 @@ public String getCachedAssetURLTemplate() {\n      * The returned result will always have the number of elements equals putObjects list size.\n      */\n     public Future<BidCacheResponse> cachePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                                    String accountId, Timeout timeout, Long auctionTimestamp) {\n-        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate,\n-                accountId, auctionTimestamp);\n+                                                    String accountId, Timeout timeout) {\n+        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate, accountId);\n         return makeRequest(BidCacheRequest.of(updatedPutObjects), updatedPutObjects.size(), timeout);\n     }\n \n     /**\n      * Modify VAST value in putObjects.\n      */\n     private List<PutObject> updatePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                             String accountId, Long auctionTimestamp) {\n+                                             String accountId) {\n         if (CollectionUtils.isEmpty(biddersAllowingVastUpdate)) {\n             return putObjects;\n         }\n \n         final List<PutObject> updatedPutObjects = new ArrayList<>();\n         for (PutObject putObject : putObjects) {\n+            final PutObject.PutObjectBuilder builder = putObject.toBuilder()\n+                    // remove \"/vtrack\" specific fields\n+                    .bidid(null)\n+                    .bidder(null)\n+                    .timestamp(null);\n+\n             final JsonNode value = putObject.getValue();\n             if (biddersAllowingVastUpdate.contains(putObject.getBidder()) && value != null) {\n-                final String updatedVastValue = modifyVastXml(value.asText(), putObject.getBidid(),\n-                        putObject.getBidder(), accountId, auctionTimestamp);\n-                final PutObject updatedPutObject = putObject.toBuilder().value(new TextNode(updatedVastValue)).build();\n-                updatedPutObjects.add(updatedPutObject);\n-            } else {\n-                updatedPutObjects.add(putObject);\n+                final String updatedVastXml = modifyVastXml(value.asText(), putObject.getBidid(),\n+                        putObject.getBidder(), accountId, putObject.getTimestamp());\n+                builder.value(new TextNode(updatedVastXml)).build();\n             }\n+\n+            updatedPutObjects.add(builder.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef760b23a8262be41e0eb64d0d38deec21255fe"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxODkxMA==", "bodyText": "kind of taste-)", "url": "https://github.com/prebid/prebid-server-java/pull/653#discussion_r404018910", "createdAt": "2020-04-06T11:28:28Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -168,32 +168,36 @@ public String getCachedAssetURLTemplate() {\n      * The returned result will always have the number of elements equals putObjects list size.\n      */\n     public Future<BidCacheResponse> cachePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                                    String accountId, Timeout timeout, Long auctionTimestamp) {\n-        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate,\n-                accountId, auctionTimestamp);\n+                                                    String accountId, Timeout timeout) {\n+        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate, accountId);\n         return makeRequest(BidCacheRequest.of(updatedPutObjects), updatedPutObjects.size(), timeout);\n     }\n \n     /**\n      * Modify VAST value in putObjects.\n      */\n     private List<PutObject> updatePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                             String accountId, Long auctionTimestamp) {\n+                                             String accountId) {\n         if (CollectionUtils.isEmpty(biddersAllowingVastUpdate)) {\n             return putObjects;\n         }\n \n         final List<PutObject> updatedPutObjects = new ArrayList<>();\n         for (PutObject putObject : putObjects) {\n+            final PutObject.PutObjectBuilder builder = putObject.toBuilder()\n+                    // remove \"/vtrack\" specific fields\n+                    .bidid(null)\n+                    .bidder(null)\n+                    .timestamp(null);\n+\n             final JsonNode value = putObject.getValue();\n             if (biddersAllowingVastUpdate.contains(putObject.getBidder()) && value != null) {\n-                final String updatedVastValue = modifyVastXml(value.asText(), putObject.getBidid(),\n-                        putObject.getBidder(), accountId, auctionTimestamp);\n-                final PutObject updatedPutObject = putObject.toBuilder().value(new TextNode(updatedVastValue)).build();\n-                updatedPutObjects.add(updatedPutObject);\n-            } else {\n-                updatedPutObjects.add(putObject);\n+                final String updatedVastXml = modifyVastXml(value.asText(), putObject.getBidid(),\n+                        putObject.getBidder(), accountId, putObject.getTimestamp());\n+                builder.value(new TextNode(updatedVastXml)).build();\n             }\n+\n+            updatedPutObjects.add(builder.build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0NTM1MA=="}, "originalCommit": {"oid": "8ef760b23a8262be41e0eb64d0d38deec21255fe"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjUzNDQ4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOToyMzo1N1rOGBPDpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOToyMzo1N1rOGBPDpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0ODQ1Mw==", "bodyText": "I'd also added .timestamp(1231221L) to test", "url": "https://github.com/prebid/prebid-server-java/pull/653#discussion_r403948453", "createdAt": "2020-04-06T09:23:57Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -1072,35 +1071,63 @@ public void cachePutObjectsShouldModifyVastAndCachePutObjects() throws IOExcepti\n         // given\n         final PutObject firstPutObject = PutObject.builder()\n                 .type(\"xml\")\n-                .bidid(\"biddid1\")\n+                .bidid(\"bidId1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef760b23a8262be41e0eb64d0d38deec21255fe"}, "originalPosition": 247}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4187, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}