{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNjQ2MTA3", "number": 664, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzozODo0NlrODxPpKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTozMzozMFrODyde4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTYzMTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzozODo0NlrOGEmvqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzozODo0NlrOGEmvqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MjI4MQ==", "bodyText": "method not according call chain", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407482281", "createdAt": "2020-04-13T13:38:46Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdmixerBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdmixer>> ADMIXER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdmixer>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdmixerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    private static BidType getBidType(String impId, List<Imp> imps) {\n+        for (Imp imp : imps) {\n+            if (imp.getId().equals(impId)) {\n+                if (imp.getBanner() != null) {\n+                    return BidType.banner;\n+                } else if (imp.getVideo() != null) {\n+                    return BidType.video;\n+                } else if (imp.getXNative() != null) {\n+                    return BidType.xNative;\n+                } else if (imp.getAudio() != null) {\n+                    return BidType.audio;\n+                }\n+            }\n+        }\n+        return BidType.banner;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTY1NTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzo0Njo0NlrOGEm-LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzo0Njo0NlrOGEm-LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4NTk5Nw==", "bodyText": "Didn't update according to Go.\nYou just rewrite with the same value.\nIn GO they creating ext only with CustomParam.", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407485997", "createdAt": "2020-04-13T13:46:46Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdmixerBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdmixer>> ADMIXER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdmixer>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdmixerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    private static BidType getBidType(String impId, List<Imp> imps) {\n+        for (Imp imp : imps) {\n+            if (imp.getId().equals(impId)) {\n+                if (imp.getBanner() != null) {\n+                    return BidType.banner;\n+                } else if (imp.getVideo() != null) {\n+                    return BidType.video;\n+                } else if (imp.getXNative() != null) {\n+                    return BidType.xNative;\n+                } else if (imp.getAudio() != null) {\n+                    return BidType.audio;\n+                }\n+            }\n+        }\n+        return BidType.banner;\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdmixer extImp = parseImpExt(imp);\n+                final Imp updatedImp = processImp(imp, extImp);\n+                validImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpAdmixer parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADMIXER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp, ExtImpAdmixer extImpAdmixer) {\n+        if (extImpAdmixer.getZone().length() != 36) {\n+            throw new PreBidException(\"ZoneId must be UUID/GUID\");\n+        }\n+\n+        final Imp impUpdate = imp.toBuilder()\n+                .tagid(extImpAdmixer.getZone())\n+                .bidfloor(BigDecimal.valueOf(extImpAdmixer.getCustomFloor()))\n+                .ext(null)\n+                .build();\n+\n+        if (extImpAdmixer.getCustomParams() != null) {\n+            impUpdate.toBuilder().ext(mapper.mapper().valueToTree(extImpAdmixer)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTY4MjgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzo1NTozN1rOGEnOlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzo1NTozN1rOGEnOlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5MDE5OQ==", "bodyText": "Try to avoid recreating of any object.\n(You can create ext above and using it in the builder )", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407490199", "createdAt": "2020-04-13T13:55:37Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdmixerBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdmixer>> ADMIXER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdmixer>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdmixerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    private static BidType getBidType(String impId, List<Imp> imps) {\n+        for (Imp imp : imps) {\n+            if (imp.getId().equals(impId)) {\n+                if (imp.getBanner() != null) {\n+                    return BidType.banner;\n+                } else if (imp.getVideo() != null) {\n+                    return BidType.video;\n+                } else if (imp.getXNative() != null) {\n+                    return BidType.xNative;\n+                } else if (imp.getAudio() != null) {\n+                    return BidType.audio;\n+                }\n+            }\n+        }\n+        return BidType.banner;\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdmixer extImp = parseImpExt(imp);\n+                final Imp updatedImp = processImp(imp, extImp);\n+                validImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpAdmixer parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADMIXER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp, ExtImpAdmixer extImpAdmixer) {\n+        if (extImpAdmixer.getZone().length() != 36) {\n+            throw new PreBidException(\"ZoneId must be UUID/GUID\");\n+        }\n+\n+        final Imp impUpdate = imp.toBuilder()\n+                .tagid(extImpAdmixer.getZone())\n+                .bidfloor(BigDecimal.valueOf(extImpAdmixer.getCustomFloor()))\n+                .ext(null)\n+                .build();\n+\n+        if (extImpAdmixer.getCustomParams() != null) {\n+            impUpdate.toBuilder().ext(mapper.mapper().valueToTree(extImpAdmixer)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTY5NzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowMDowNVrOGEnXUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowMDowNVrOGEnXUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5MjQzMw==", "bodyText": "Use CollectionUtils", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407492433", "createdAt": "2020-04-13T14:00:05Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdmixerBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdmixer>> ADMIXER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdmixer>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdmixerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    private static BidType getBidType(String impId, List<Imp> imps) {\n+        for (Imp imp : imps) {\n+            if (imp.getId().equals(impId)) {\n+                if (imp.getBanner() != null) {\n+                    return BidType.banner;\n+                } else if (imp.getVideo() != null) {\n+                    return BidType.video;\n+                } else if (imp.getXNative() != null) {\n+                    return BidType.xNative;\n+                } else if (imp.getAudio() != null) {\n+                    return BidType.audio;\n+                }\n+            }\n+        }\n+        return BidType.banner;\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdmixer extImp = parseImpExt(imp);\n+                final Imp updatedImp = processImp(imp, extImp);\n+                validImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpAdmixer parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADMIXER_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp, ExtImpAdmixer extImpAdmixer) {\n+        if (extImpAdmixer.getZone().length() != 36) {\n+            throw new PreBidException(\"ZoneId must be UUID/GUID\");\n+        }\n+\n+        final Imp impUpdate = imp.toBuilder()\n+                .tagid(extImpAdmixer.getZone())\n+                .bidfloor(BigDecimal.valueOf(extImpAdmixer.getCustomFloor()))\n+                .ext(null)\n+                .build();\n+\n+        if (extImpAdmixer.getCustomParams() != null) {\n+            impUpdate.toBuilder().ext(mapper.mapper().valueToTree(extImpAdmixer)).build();\n+        }\n+        return impUpdate;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final BidResponse bidResponse;\n+        try {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        if ((bidResponse.getSeatbid().size() == 0) || (bidResponse.getSeatbid().get(0).getBid().size() == 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTcwNTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowMjoyNFrOGEnb4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowMjoyNFrOGEnb4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5MzYwMg==", "bodyText": "Use CollectionUtils", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407493602", "createdAt": "2020-04-13T14:02:24Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class AdmixerBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdmixer>> ADMIXER_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdmixer>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdmixerBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    private static BidType getBidType(String impId, List<Imp> imps) {\n+        for (Imp imp : imps) {\n+            if (imp.getId().equals(impId)) {\n+                if (imp.getBanner() != null) {\n+                    return BidType.banner;\n+                } else if (imp.getVideo() != null) {\n+                    return BidType.video;\n+                } else if (imp.getXNative() != null) {\n+                    return BidType.xNative;\n+                } else if (imp.getAudio() != null) {\n+                    return BidType.audio;\n+                }\n+            }\n+        }\n+        return BidType.banner;\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTcwODc4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowMzozNVrOGEneCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowMzozNVrOGEneCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NDE1Mw==", "bodyText": "NotHaveLength", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407494153", "createdAt": "2020-04-13T14:03:35Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class AdmixerBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com/\";\n+\n+    private AdmixerBidder admixerBidder;\n+\n+    @Before\n+    public void setUp() {\n+        admixerBidder = new AdmixerBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdmixerBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                        .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfZoneIdLengthIsNotEqual36() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTcxMTYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNDoyMFrOGEnfqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNDoyMFrOGEnfqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NDU3MA==", "bodyText": "redundant", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407494570", "createdAt": "2020-04-13T14:04:20Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class AdmixerBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com/\";\n+\n+    private AdmixerBidder admixerBidder;\n+\n+    @Before\n+    public void setUp() {\n+        admixerBidder = new AdmixerBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdmixerBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                        .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfZoneIdLengthIsNotEqual36() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpAdmixer.of(\"zoneId\", 36D,\n+                                givenCustomParams(\"foo1\", singletonList(\"bar1\")))))).build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"ZoneId must be UUID/GUID\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(identity()),\n+                        givenImp(impBuilder -> impBuilder.banner(null).xNative(Native.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTcxNDQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNToxMlrOGEnhWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNToxMlrOGEnhWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NTAwMg==", "bodyText": "inline throws", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407495002", "createdAt": "2020-04-13T14:05:12Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class AdmixerBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com/\";\n+\n+    private AdmixerBidder admixerBidder;\n+\n+    @Before\n+    public void setUp() {\n+        admixerBidder = new AdmixerBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdmixerBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                        .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfZoneIdLengthIsNotEqual36() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpAdmixer.of(\"zoneId\", 36D,\n+                                givenCustomParams(\"foo1\", singletonList(\"bar1\")))))).build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"ZoneId must be UUID/GUID\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(identity()),\n+                        givenImp(impBuilder -> impBuilder.banner(null).xNative(Native.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\"false\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorsWhenSeatBidIsEmpty()\n+            throws JsonProcessingException {\n+        // given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTcxNjU5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNTo1NFrOGEniqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNTo1NFrOGEniqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NTMzNw==", "bodyText": "EmtyLists", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407495337", "createdAt": "2020-04-13T14:05:54Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class AdmixerBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com/\";\n+\n+    private AdmixerBidder admixerBidder;\n+\n+    @Before\n+    public void setUp() {\n+        admixerBidder = new AdmixerBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdmixerBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                        .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfZoneIdLengthIsNotEqual36() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpAdmixer.of(\"zoneId\", 36D,\n+                                givenCustomParams(\"foo1\", singletonList(\"bar1\")))))).build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"ZoneId must be UUID/GUID\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(identity()),\n+                        givenImp(impBuilder -> impBuilder.banner(null).xNative(Native.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\"false\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorsWhenSeatBidIsEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTcxNjc3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNTo1OFrOGEnixQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNTo1OFrOGEnixQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NTM2NQ==", "bodyText": "EmtyLists", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407495365", "createdAt": "2020-04-13T14:05:58Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class AdmixerBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com/\";\n+\n+    private AdmixerBidder admixerBidder;\n+\n+    @Before\n+    public void setUp() {\n+        admixerBidder = new AdmixerBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdmixerBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                        .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfZoneIdLengthIsNotEqual36() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpAdmixer.of(\"zoneId\", 36D,\n+                                givenCustomParams(\"foo1\", singletonList(\"bar1\")))))).build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"ZoneId must be UUID/GUID\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(identity()),\n+                        givenImp(impBuilder -> impBuilder.banner(null).xNative(Native.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\"false\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorsWhenSeatBidIsEmpty()\n+            throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall =\n+                givenHttpCall(mapper.writeValueAsString(BidResponse.builder().seatbid(emptyList()).build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall, BidRequest.builder().build());\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result).isNotNull()\n+                .extracting(Result::getValue, Result::getErrors)\n+                .containsOnly(Collections.emptyList(), Collections.emptyList());\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorsWhenBidsEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTcyMDU1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNzoxNFrOGEnk-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNzoxNFrOGEnk-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NTkyOA==", "bodyText": "Duplicate this test with all possible types also", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407495928", "createdAt": "2020-04-13T14:07:14Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class AdmixerBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com/\";\n+\n+    private AdmixerBidder admixerBidder;\n+\n+    @Before\n+    public void setUp() {\n+        admixerBidder = new AdmixerBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdmixerBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                        .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfZoneIdLengthIsNotEqual36() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpAdmixer.of(\"zoneId\", 36D,\n+                                givenCustomParams(\"foo1\", singletonList(\"bar1\")))))).build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"ZoneId must be UUID/GUID\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(identity()),\n+                        givenImp(impBuilder -> impBuilder.banner(null).xNative(Native.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\"false\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorsWhenSeatBidIsEmpty()\n+            throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall =\n+                givenHttpCall(mapper.writeValueAsString(BidResponse.builder().seatbid(emptyList()).build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall, BidRequest.builder().build());\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result).isNotNull()\n+                .extracting(Result::getValue, Result::getErrors)\n+                .containsOnly(Collections.emptyList(), Collections.emptyList());\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorsWhenBidsEmpty()\n+            throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall =\n+                givenHttpCall(mapper.writeValueAsString(\n+                        BidResponse.builder()\n+                        .seatbid(singletonList(SeatBid.builder().bid(emptyList()).build()))\n+                        .build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall, BidRequest.builder().build());\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result).isNotNull()\n+                .extracting(Result::getValue, Result::getErrors)\n+                .containsOnly(Collections.emptyList(), Collections.emptyList());\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall,\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n+                .build());\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTcyMTc5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNzo0MFrOGEnlxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowNzo0MFrOGEnlxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NjEzNA==", "bodyText": "Not used Remove, or try to use instated of BidRequest.builder", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r407496134", "createdAt": "2020-04-13T14:07:40Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/admixer/AdmixerBidderTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package org.prebid.server.bidder.admixer;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.admixer.ExtImpAdmixer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class AdmixerBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com/\";\n+\n+    private AdmixerBidder admixerBidder;\n+\n+    @Before\n+    public void setUp() {\n+        admixerBidder = new AdmixerBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdmixerBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                        .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfZoneIdLengthIsNotEqual36() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpAdmixer.of(\"zoneId\", 36D,\n+                                givenCustomParams(\"foo1\", singletonList(\"bar1\")))))).build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"ZoneId must be UUID/GUID\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        givenImp(identity()),\n+                        givenImp(impBuilder -> impBuilder.banner(null).xNative(Native.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admixerBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\"false\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorsWhenSeatBidIsEmpty()\n+            throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall =\n+                givenHttpCall(mapper.writeValueAsString(BidResponse.builder().seatbid(emptyList()).build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall, BidRequest.builder().build());\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result).isNotNull()\n+                .extracting(Result::getValue, Result::getErrors)\n+                .containsOnly(Collections.emptyList(), Collections.emptyList());\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorsWhenBidsEmpty()\n+            throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall =\n+                givenHttpCall(mapper.writeValueAsString(\n+                        BidResponse.builder()\n+                        .seatbid(singletonList(SeatBid.builder().bid(emptyList()).build()))\n+                        .build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall, BidRequest.builder().build());\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result).isNotNull()\n+                .extracting(Result::getValue, Result::getErrors)\n+                .containsOnly(Collections.emptyList(), Collections.emptyList());\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = admixerBidder.makeBids(httpCall,\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n+                .build());\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n+    }\n+\n+    @Test\n+    public void extractTargetingShouldReturnEmptyMap() {\n+        assertThat(admixerBidder.extractTargeting(mapper.createObjectNode())).isEqualTo(emptyMap());\n+    }\n+\n+    private static BidRequest givenBidRequest(\n+            Function<BidRequest.BidRequestBuilder, BidRequest.BidRequestBuilder> bidRequestCustomizer,\n+            Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+\n+        return bidRequestCustomizer.apply(BidRequest.builder()\n+                .imp(singletonList(givenImp(impCustomizer))))\n+                .build();\n+    }\n+\n+    private static BidRequest givenBidRequest(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return givenBidRequest(identity(), impCustomizer);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4a963128d6eaf20749aebf35b876f2988cbe8"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjM4MDE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTozMjowOVrOGGg_gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTozMjowOVrOGGg_gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4NTE4Nw==", "bodyText": "use isEmpty()", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r409485187", "createdAt": "2020-04-16T11:32:09Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "diffHunk": "@@ -47,29 +49,12 @@ public AdmixerBidder(String endpointUrl, JacksonMapper mapper) {\n         this.mapper = Objects.requireNonNull(mapper);\n     }\n \n-    private static BidType getBidType(String impId, List<Imp> imps) {\n-        for (Imp imp : imps) {\n-            if (imp.getId().equals(impId)) {\n-                if (imp.getBanner() != null) {\n-                    return BidType.banner;\n-                } else if (imp.getVideo() != null) {\n-                    return BidType.video;\n-                } else if (imp.getXNative() != null) {\n-                    return BidType.xNative;\n-                } else if (imp.getAudio() != null) {\n-                    return BidType.audio;\n-                }\n-            }\n-        }\n-        return BidType.banner;\n-    }\n-\n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();\n         final List<Imp> validImps = new ArrayList<>();\n \n-        if (request.getImp().size() == 0) {\n+        if (CollectionUtils.sizeIsEmpty(request.getImp())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7dc3a984cd0d317e950273f19e349dc64933bdf"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjM4NDMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTozMzozMFrOGGhCCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTozMzozMFrOGGhCCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ4NTgzNA==", "bodyText": "use isEmpty", "url": "https://github.com/prebid/prebid-server-java/pull/664#discussion_r409485834", "createdAt": "2020-04-16T11:33:30Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/admixer/AdmixerBidder.java", "diffHunk": "@@ -141,7 +127,8 @@ private Imp processImp(Imp imp, ExtImpAdmixer extImpAdmixer) {\n             return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n         }\n \n-        if ((bidResponse.getSeatbid().size() == 0) || (bidResponse.getSeatbid().get(0).getBid().size() == 0)) {\n+        if (CollectionUtils.sizeIsEmpty(bidResponse.getSeatbid())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7dc3a984cd0d317e950273f19e349dc64933bdf"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4199, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}