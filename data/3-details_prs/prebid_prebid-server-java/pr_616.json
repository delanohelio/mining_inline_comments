{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDQ0ODcw", "number": 616, "title": "Overwrite Bid Id", "bodyText": "Bid Id can be overwritten if application.yaml auction.generate-bid-id = true.\nImplements prebid/prebid-server#1171", "createdAt": "2020-02-07T14:41:39Z", "url": "https://github.com/prebid/prebid-server-java/pull/616", "merged": true, "mergeCommit": {"oid": "643ca3d9a24d7aaebc664da9d99c5ab3fa1ad34f"}, "closed": true, "closedAt": "2020-05-20T10:13:23Z", "author": {"login": "apaliy"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCAYFLAH2gAyMzcyNDQ0ODcwOjA2ZjkzYzY2NmM5OTBlNGYxZDFmZWVmMzViZWQ3ZDZhYmZlY2Q5MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfQYUtgFqTQwODE4MTAwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "06f93c666c990e4f1d1feef35bed7d6abfecd903", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/06f93c666c990e4f1d1feef35bed7d6abfecd903", "committedDate": "2020-02-07T14:40:14Z", "message": "Bid Id can be overwritten if application.yaml auction.generate-bid-id = true.\nTest added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ee0efb84e9e3a4608acd3adab7d84bea02be53", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/99ee0efb84e9e3a4608acd3adab7d84bea02be53", "committedDate": "2020-02-07T15:00:32Z", "message": "Merge branch 'master' into pbs-id-generation\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/auction/BidResponseCreator.java\n#\tsrc/main/java/org/prebid/server/spring/config/ServiceConfiguration.java\n#\tsrc/test/java/org/prebid/server/auction/BidResponseCreatorTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df3ef9f4ecbb83904c8298e7d66132b039d6ff8a", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/df3ef9f4ecbb83904c8298e7d66132b039d6ff8a", "committedDate": "2020-02-07T15:29:45Z", "message": "Merge branch 'master' into pbs-id-generation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MTczNTAz", "url": "https://github.com/prebid/prebid-server-java/pull/616#pullrequestreview-374173503", "createdAt": "2020-03-13T09:57:59Z", "commit": {"oid": "99ee0efb84e9e3a4608acd3adab7d84bea02be53"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTo1Nzo1OVrOF19u2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTo1ODozMlrOF19wDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMDI2Ng==", "bodyText": "Pls extract this to separate method. No consumer need here.", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r392130266", "createdAt": "2020-03-13T09:57:59Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -100,6 +104,29 @@ public BidResponseCreator(CacheService cacheService, BidderCatalog bidderCatalog\n         this.cacheAssetUrlTemplate = Objects.requireNonNull(cacheService.getCachedAssetURLTemplate());\n         this.storedRequestProcessor = Objects.requireNonNull(storedRequestProcessor);\n         this.mapper = Objects.requireNonNull(mapper);\n+\n+        if (generateBidId) {\n+            overwriteBidIdConsumer = bidderResponses -> {\n+                if (CollectionUtils.isNotEmpty(bidderResponses)) {\n+                    bidderResponses.stream()\n+                            .filter(Objects::nonNull)\n+                            .map(BidderResponse::getSeatBid)\n+                            .filter(Objects::nonNull)\n+                            .map(BidderSeatBid::getBids)\n+                            .filter(Objects::nonNull)\n+                            .forEach(bidderBids -> {\n+                                bidderBids.stream()\n+                                        .filter(Objects::nonNull)\n+                                        .map(BidderBid::getBid)\n+                                        .filter(Objects::nonNull)\n+                                        .forEach(bid -> bid.setId(UUID.randomUUID().toString()));\n+                            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ee0efb84e9e3a4608acd3adab7d84bea02be53"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMDU3Mg==", "bodyText": "Pls avoid default config values, just add it to application.yaml.", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r392130572", "createdAt": "2020-03-13T09:58:32Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/spring/config/ServiceConfiguration.java", "diffHunk": "@@ -406,9 +406,11 @@ BidResponseCreator bidResponseCreator(\n             BidderCatalog bidderCatalog,\n             EventsService eventsService,\n             StoredRequestProcessor storedRequestProcessor,\n-            JacksonMapper mapper) {\n+            JacksonMapper mapper,\n+            @Value(\"${auction.generate-bid-id:#{false}}\") Boolean generateBidId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ee0efb84e9e3a4608acd3adab7d84bea02be53"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e9eea09c9a0224e971d246764a26aebbb81aa40", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/0e9eea09c9a0224e971d246764a26aebbb81aa40", "committedDate": "2020-03-16T10:12:07Z", "message": "Overwriting exp.prebid.bid_id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81ad0a7f9c78bf2ad74b5a4c8632420471b5b29f", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/81ad0a7f9c78bf2ad74b5a4c8632420471b5b29f", "committedDate": "2020-03-16T11:21:33Z", "message": "Overwriting exp.prebid.bid_id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/91f51d5d20695e76e2acf5adf255d3b9d1beed7e", "committedDate": "2020-03-16T11:26:25Z", "message": "Overwriting exp.prebid.bid_id"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTQxMTMw", "url": "https://github.com/prebid/prebid-server-java/pull/616#pullrequestreview-380141130", "createdAt": "2020-03-24T09:40:59Z", "commit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo0MTowMFrOF6oGXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo1ODo0OFrOF6oyPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxODcxOA==", "bodyText": "Can produce NPE.\nReplace to Boolean and use BooleanUtils.isTrue and similar methods", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r397018718", "createdAt": "2020-03-24T09:41:00Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -89,9 +91,11 @@\n     private final String cachePath;\n     private final String cacheAssetUrlTemplate;\n     private final StoredRequestProcessor storedRequestProcessor;\n+    private final Consumer<BidResponse> overwriteBidIdConsumer;\n \n     public BidResponseCreator(CacheService cacheService, BidderCatalog bidderCatalog, EventsService eventsService,\n-                              StoredRequestProcessor storedRequestProcessor, JacksonMapper mapper) {\n+                              StoredRequestProcessor storedRequestProcessor,\n+                              JacksonMapper mapper, boolean generateBidId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxOTEwNg==", "bodyText": "replace to ? : operator", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r397019106", "createdAt": "2020-03-24T09:41:37Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -100,6 +104,45 @@ public BidResponseCreator(CacheService cacheService, BidderCatalog bidderCatalog\n         this.cacheAssetUrlTemplate = Objects.requireNonNull(cacheService.getCachedAssetURLTemplate());\n         this.storedRequestProcessor = Objects.requireNonNull(storedRequestProcessor);\n         this.mapper = Objects.requireNonNull(mapper);\n+\n+        if (generateBidId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyMDU4OQ==", "bodyText": "extract into 2 values", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r397020589", "createdAt": "2020-03-24T09:44:06Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -100,6 +104,45 @@ public BidResponseCreator(CacheService cacheService, BidderCatalog bidderCatalog\n         this.cacheAssetUrlTemplate = Objects.requireNonNull(cacheService.getCachedAssetURLTemplate());\n         this.storedRequestProcessor = Objects.requireNonNull(storedRequestProcessor);\n         this.mapper = Objects.requireNonNull(mapper);\n+\n+        if (generateBidId) {\n+            overwriteBidIdConsumer = overwriteBidIdConsumer();\n+        } else {\n+            overwriteBidIdConsumer = bidderResponses -> {\n+            };\n+        }\n+\n+    }\n+\n+    private Consumer<BidResponse> overwriteBidIdConsumer() {\n+        return bidderResponses -> {\n+            bidderResponses.getSeatbid().stream()\n+                    .map(SeatBid::getBid)\n+                    .forEach(bids -> bids.stream()\n+                            .filter(Objects::nonNull)\n+                            .forEach(this::replaceBidId));\n+\n+        };\n+    }\n+\n+    private void replaceBidId(Bid bid) {\n+        final ObjectNode ext = bid.getExt();\n+        final ExtBidPrebid extBidPrebid = parsePrebidExt(ext);\n+        if (extBidPrebid != null) {\n+            extBidPrebid.setBidId(UUID.randomUUID().toString());\n+            try {\n+                bid.setExt(ext.set(PREBID_EXT, mapper.mapper().readTree(mapper.encode(extBidPrebid))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyMTM2Mw==", "bodyText": "It is better to log smth if we cant set id", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r397021363", "createdAt": "2020-03-24T09:45:28Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -100,6 +104,45 @@ public BidResponseCreator(CacheService cacheService, BidderCatalog bidderCatalog\n         this.cacheAssetUrlTemplate = Objects.requireNonNull(cacheService.getCachedAssetURLTemplate());\n         this.storedRequestProcessor = Objects.requireNonNull(storedRequestProcessor);\n         this.mapper = Objects.requireNonNull(mapper);\n+\n+        if (generateBidId) {\n+            overwriteBidIdConsumer = overwriteBidIdConsumer();\n+        } else {\n+            overwriteBidIdConsumer = bidderResponses -> {\n+            };\n+        }\n+\n+    }\n+\n+    private Consumer<BidResponse> overwriteBidIdConsumer() {\n+        return bidderResponses -> {\n+            bidderResponses.getSeatbid().stream()\n+                    .map(SeatBid::getBid)\n+                    .forEach(bids -> bids.stream()\n+                            .filter(Objects::nonNull)\n+                            .forEach(this::replaceBidId));\n+\n+        };\n+    }\n+\n+    private void replaceBidId(Bid bid) {\n+        final ObjectNode ext = bid.getExt();\n+        final ExtBidPrebid extBidPrebid = parsePrebidExt(ext);\n+        if (extBidPrebid != null) {\n+            extBidPrebid.setBidId(UUID.randomUUID().toString());\n+            try {\n+                bid.setExt(ext.set(PREBID_EXT, mapper.mapper().readTree(mapper.encode(extBidPrebid))));\n+            } catch (JsonProcessingException e) {\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyMjUzOA==", "bodyText": "I am not sure if it is good idea to make this mutable.\nJust imagine how hard it will be in a future to find state change if anyone can set whenever they want.\n@rpanchyk  what do you think?", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r397022538", "createdAt": "2020-03-24T09:47:24Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/response/ExtBidPrebid.java", "diffHunk": "@@ -2,18 +2,20 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.iab.openrtb.request.Video;\n-import lombok.AllArgsConstructor;\n-import lombok.Value;\n+import lombok.Builder;\n+import lombok.Data;\n \n import java.util.Map;\n \n /**\n  * Defines the contract for bidresponse.seatbid.bid[i].ext.prebid\n  */\n-@AllArgsConstructor(staticName = \"of\")\n-@Value\n+@Builder(toBuilder = true)\n+@Data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNTMwOA==", "bodyText": "I'd probably just added method toSeatbid, which create appropriate objects.\nAnd modify toSeatBid", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r397025308", "createdAt": "2020-03-24T09:51:46Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -514,12 +557,14 @@ private BidResponse toBidResponse(\n                 toExtBidResponse(bidderResponses, bidRequest, cacheResult, videoStoredDataResult,\n                         debugEnabled, bidErrors);\n \n-        return BidResponse.builder()\n+        BidResponse response = BidResponse.builder()\n                 .id(bidRequest.getId())\n                 .cur(bidRequest.getCur().get(0))\n                 .seatbid(seatBids)\n                 .ext(mapper.mapper().valueToTree(extBidResponse))\n                 .build();\n+        overwriteBidIdConsumer.accept(response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNzAxMg==", "bodyText": "?", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r397027012", "createdAt": "2020-03-24T09:54:24Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -371,6 +369,40 @@ public void shouldSkipBidderResponsesWhereSeatBidContainEmptyBids() {\n         verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n     }\n \n+    @Test\n+    public void shouldOverwriteBidderIdToUUID() throws JsonProcessingException {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest();\n+\n+        final ExtPrebid<ExtBidPrebid, ?> prebid = ExtPrebid.of(ExtBidPrebid.builder().type(banner).build(), null);\n+        final Bid bid = Bid.builder()\n+                .id(\"123\")\n+                .impid(\"imp123\")\n+                .w(123)\n+                .h(123)\n+                .price(BigDecimal.ONE)\n+                .ext(mapper.valueToTree(prebid))\n+                .build();\n+        final List<BidderResponse> bidderResponses = singletonList(\n+                BidderResponse.of(\"bidder2\", givenSeatBid(BidderBid.of(bid, banner, \"USD\")), 0));\n+\n+        final BidResponseCreator bidResponseCreator = new BidResponseCreator(cacheService, bidderCatalog, eventsService,\n+                storedRequestProcessor, jacksonMapper, true);\n+        // when\n+        final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n+                null, CACHE_INFO, ACCOUNT, timeout, false).result();\n+\n+        // then\n+        assertThat(bidResponse.getSeatbid()).hasSize(1);\n+        assertThat(bidResponse.getSeatbid().get(0).getBid()).hasSize(1);\n+        final ExtBidPrebid ext = mapper.readValue(bidResponse.getSeatbid().get(0).getBid().get(0)\n+                .getExt().get(\"prebid\").toString(), ExtBidPrebid.class);\n+        assertThat(ext.getBidId()).isNotNull();\n+\n+        System.out.println(ext.getBidId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNzMwOQ==", "bodyText": "expectedExtBidPrebid", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r397027309", "createdAt": "2020-03-24T09:54:51Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -371,6 +369,40 @@ public void shouldSkipBidderResponsesWhereSeatBidContainEmptyBids() {\n         verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n     }\n \n+    @Test\n+    public void shouldOverwriteBidderIdToUUID() throws JsonProcessingException {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest();\n+\n+        final ExtPrebid<ExtBidPrebid, ?> prebid = ExtPrebid.of(ExtBidPrebid.builder().type(banner).build(), null);\n+        final Bid bid = Bid.builder()\n+                .id(\"123\")\n+                .impid(\"imp123\")\n+                .w(123)\n+                .h(123)\n+                .price(BigDecimal.ONE)\n+                .ext(mapper.valueToTree(prebid))\n+                .build();\n+        final List<BidderResponse> bidderResponses = singletonList(\n+                BidderResponse.of(\"bidder2\", givenSeatBid(BidderBid.of(bid, banner, \"USD\")), 0));\n+\n+        final BidResponseCreator bidResponseCreator = new BidResponseCreator(cacheService, bidderCatalog, eventsService,\n+                storedRequestProcessor, jacksonMapper, true);\n+        // when\n+        final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n+                null, CACHE_INFO, ACCOUNT, timeout, false).result();\n+\n+        // then\n+        assertThat(bidResponse.getSeatbid()).hasSize(1);\n+        assertThat(bidResponse.getSeatbid().get(0).getBid()).hasSize(1);\n+        final ExtBidPrebid ext = mapper.readValue(bidResponse.getSeatbid().get(0).getBid().get(0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNzY2NA==", "bodyText": "does this values are really required ?", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r397027664", "createdAt": "2020-03-24T09:55:26Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -371,6 +369,40 @@ public void shouldSkipBidderResponsesWhereSeatBidContainEmptyBids() {\n         verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n     }\n \n+    @Test\n+    public void shouldOverwriteBidderIdToUUID() throws JsonProcessingException {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest();\n+\n+        final ExtPrebid<ExtBidPrebid, ?> prebid = ExtPrebid.of(ExtBidPrebid.builder().type(banner).build(), null);\n+        final Bid bid = Bid.builder()\n+                .id(\"123\")\n+                .impid(\"imp123\")\n+                .w(123)\n+                .h(123)\n+                .price(BigDecimal.ONE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyOTk1MQ==", "bodyText": "Have you tried to use .extract method?", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r397029951", "createdAt": "2020-03-24T09:58:48Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -371,6 +369,40 @@ public void shouldSkipBidderResponsesWhereSeatBidContainEmptyBids() {\n         verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n     }\n \n+    @Test\n+    public void shouldOverwriteBidderIdToUUID() throws JsonProcessingException {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest();\n+\n+        final ExtPrebid<ExtBidPrebid, ?> prebid = ExtPrebid.of(ExtBidPrebid.builder().type(banner).build(), null);\n+        final Bid bid = Bid.builder()\n+                .id(\"123\")\n+                .impid(\"imp123\")\n+                .w(123)\n+                .h(123)\n+                .price(BigDecimal.ONE)\n+                .ext(mapper.valueToTree(prebid))\n+                .build();\n+        final List<BidderResponse> bidderResponses = singletonList(\n+                BidderResponse.of(\"bidder2\", givenSeatBid(BidderBid.of(bid, banner, \"USD\")), 0));\n+\n+        final BidResponseCreator bidResponseCreator = new BidResponseCreator(cacheService, bidderCatalog, eventsService,\n+                storedRequestProcessor, jacksonMapper, true);\n+        // when\n+        final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n+                null, CACHE_INFO, ACCOUNT, timeout, false).result();\n+\n+        // then\n+        assertThat(bidResponse.getSeatbid()).hasSize(1);\n+        assertThat(bidResponse.getSeatbid().get(0).getBid()).hasSize(1);\n+        final ExtBidPrebid ext = mapper.readValue(bidResponse.getSeatbid().get(0).getBid().get(0)\n+                .getExt().get(\"prebid\").toString(), ExtBidPrebid.class);\n+        assertThat(ext.getBidId()).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f51d5d20695e76e2acf5adf255d3b9d1beed7e"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76140ca4c7cb812d1249ba6ced3f206a8a4044bb", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/76140ca4c7cb812d1249ba6ced3f206a8a4044bb", "committedDate": "2020-03-24T11:21:08Z", "message": "PR fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "485e411e1ffa426878fbb1291192ba2b93250bd9", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/485e411e1ffa426878fbb1291192ba2b93250bd9", "committedDate": "2020-03-24T13:46:54Z", "message": "test fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85dbf6e156b6237e14c281f68bfce1d9afc22c5f", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/85dbf6e156b6237e14c281f68bfce1d9afc22c5f", "committedDate": "2020-03-26T11:29:23Z", "message": "applying change request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyODIyMTcz", "url": "https://github.com/prebid/prebid-server-java/pull/616#pullrequestreview-382822173", "createdAt": "2020-03-27T12:43:03Z", "commit": {"oid": "85dbf6e156b6237e14c281f68bfce1d9afc22c5f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjo0MzowM1rOF8vdxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjo1NDo0OVrOF8v3Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzNjU1MA==", "bodyText": "we use treeToValue method", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r399236550", "createdAt": "2020-03-27T12:43:03Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -100,6 +108,48 @@ public BidResponseCreator(CacheService cacheService, BidderCatalog bidderCatalog\n         this.cacheAssetUrlTemplate = Objects.requireNonNull(cacheService.getCachedAssetURLTemplate());\n         this.storedRequestProcessor = Objects.requireNonNull(storedRequestProcessor);\n         this.mapper = Objects.requireNonNull(mapper);\n+\n+        overwriteBidIdConsumer = BooleanUtils.isTrue(generateBidId) ? overwriteBidIdConsumer() : bidResponse -> {\n+        };\n+\n+    }\n+\n+    private Consumer<BidResponse> overwriteBidIdConsumer() {\n+        return bidderResponses -> bidderResponses.getSeatbid().stream()\n+                .map(SeatBid::getBid)\n+                .forEach(bids -> bids.stream()\n+                        .filter(Objects::nonNull)\n+                        .forEach(this::replaceBidId));\n+    }\n+\n+    private void replaceBidId(Bid bid) {\n+        final ObjectNode ext = bid.getExt();\n+        final ExtBidPrebid extBidPrebid = parsePrebidExt(ext);\n+        if (extBidPrebid != null) {\n+            final ExtBidPrebid modifiedExtBidPrebid = ExtBidPrebid.of(\n+                    UUID.randomUUID().toString(),\n+                    extBidPrebid.getType(),\n+                    extBidPrebid.getTargeting(),\n+                    extBidPrebid.getCache(),\n+                    extBidPrebid.getStoredRequestAttributes(),\n+                    extBidPrebid.getEvents(),\n+                    extBidPrebid.getVideo());\n+            try {\n+                final JsonNode extBidPrebidValue = mapper.mapper().readTree(mapper.encode(modifiedExtBidPrebid));\n+                final ObjectNode prebidExtNode = ext.set(PREBID_EXT, extBidPrebidValue);\n+                bid.setExt(prebidExtNode);\n+            } catch (JsonProcessingException e) {\n+                logger.debug(\"Parsing error\", e);\n+            }\n+        }\n+    }\n+\n+    private ExtBidPrebid parsePrebidExt(ObjectNode ext) {\n+        try {\n+            return mapper.decodeValue(ext.get(PREBID_EXT).toString(), ExtBidPrebid.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85dbf6e156b6237e14c281f68bfce1d9afc22c5f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0MTE5MA==", "bodyText": "Isn't it all the logic above but in 1 line ?\n    final String bidId = isOverwriteBidIdConsumer ? UUID.randomUUID().toString() : null;\n    final ExtBidPrebid prebidExt = ExtBidPrebid.of(bidId, bidType, targetingKeywords, cache, storedVideo,\n                events, null);", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r399241190", "createdAt": "2020-03-27T12:51:29Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -641,7 +693,9 @@ private Bid toBid(BidderBid bidderBid, String bidder, ExtRequestTargeting target\n         final Video storedVideo = impIdToStoredVideo.get(bid.getImpid());\n         final Events events = eventsEnabled ? eventsService.createEvent(bid.getId(), account.getId()) : null;\n \n-        final ExtBidPrebid prebidExt = ExtBidPrebid.of(bidType, targetingKeywords, cache, storedVideo, events, null);\n+        final ExtBidPrebid prebidExt = ExtBidPrebid.of(null, bidType, targetingKeywords, cache, storedVideo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85dbf6e156b6237e14c281f68bfce1d9afc22c5f"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0MTQ4NA==", "bodyText": "check your IDEA code style", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r399241484", "createdAt": "2020-03-27T12:52:02Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -86,8 +86,7 @@\n import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n-import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n-import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85dbf6e156b6237e14c281f68bfce1d9afc22c5f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0MTc0NA==", "bodyText": "This is unnecessary", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r399241744", "createdAt": "2020-03-27T12:52:29Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -371,6 +369,42 @@ public void shouldSkipBidderResponsesWhereSeatBidContainEmptyBids() {\n         verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n     }\n \n+    @Test\n+    public void shouldOverwriteBidderIdToUUID() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest();\n+\n+        final ExtPrebid<ExtBidPrebid, ?> prebid = ExtPrebid.of(ExtBidPrebid.of(null, banner, null,\n+                null, null, null, null), null);\n+        final Bid bid = Bid.builder()\n+                .id(\"123\")\n+                .impid(\"imp123\")\n+                .ext(mapper.valueToTree(prebid))\n+                .build();\n+        final List<BidderResponse> bidderResponses = singletonList(\n+                BidderResponse.of(\"bidder2\", givenSeatBid(BidderBid.of(bid, banner, \"USD\")), 0));\n+\n+        final BidResponseCreator bidResponseCreator = new BidResponseCreator(cacheService, bidderCatalog, eventsService,\n+                storedRequestProcessor, jacksonMapper, true);\n+        // when\n+        final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n+                null, CACHE_INFO, ACCOUNT, timeout, false).result();\n+\n+        // then\n+        assertThat(bidResponse.getSeatbid()).hasSize(1);\n+        assertThat(bidResponse.getSeatbid().get(0).getBid()).hasSize(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85dbf6e156b6237e14c281f68bfce1d9afc22c5f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0MjA5MQ==", "bodyText": "Too ganeral debug message", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r399242091", "createdAt": "2020-03-27T12:53:04Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -100,6 +108,48 @@ public BidResponseCreator(CacheService cacheService, BidderCatalog bidderCatalog\n         this.cacheAssetUrlTemplate = Objects.requireNonNull(cacheService.getCachedAssetURLTemplate());\n         this.storedRequestProcessor = Objects.requireNonNull(storedRequestProcessor);\n         this.mapper = Objects.requireNonNull(mapper);\n+\n+        overwriteBidIdConsumer = BooleanUtils.isTrue(generateBidId) ? overwriteBidIdConsumer() : bidResponse -> {\n+        };\n+\n+    }\n+\n+    private Consumer<BidResponse> overwriteBidIdConsumer() {\n+        return bidderResponses -> bidderResponses.getSeatbid().stream()\n+                .map(SeatBid::getBid)\n+                .forEach(bids -> bids.stream()\n+                        .filter(Objects::nonNull)\n+                        .forEach(this::replaceBidId));\n+    }\n+\n+    private void replaceBidId(Bid bid) {\n+        final ObjectNode ext = bid.getExt();\n+        final ExtBidPrebid extBidPrebid = parsePrebidExt(ext);\n+        if (extBidPrebid != null) {\n+            final ExtBidPrebid modifiedExtBidPrebid = ExtBidPrebid.of(\n+                    UUID.randomUUID().toString(),\n+                    extBidPrebid.getType(),\n+                    extBidPrebid.getTargeting(),\n+                    extBidPrebid.getCache(),\n+                    extBidPrebid.getStoredRequestAttributes(),\n+                    extBidPrebid.getEvents(),\n+                    extBidPrebid.getVideo());\n+            try {\n+                final JsonNode extBidPrebidValue = mapper.mapper().readTree(mapper.encode(modifiedExtBidPrebid));\n+                final ObjectNode prebidExtNode = ext.set(PREBID_EXT, extBidPrebidValue);\n+                bid.setExt(prebidExtNode);\n+            } catch (JsonProcessingException e) {\n+                logger.debug(\"Parsing error\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85dbf6e156b6237e14c281f68bfce1d9afc22c5f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0MzA5MA==", "bodyText": "When creating event URLs and VAST IMP URLs, use this generated bidid instead of the bidder-created id.\nJust one line above.....", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r399243090", "createdAt": "2020-03-27T12:54:49Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -641,7 +693,9 @@ private Bid toBid(BidderBid bidderBid, String bidder, ExtRequestTargeting target\n         final Video storedVideo = impIdToStoredVideo.get(bid.getImpid());\n         final Events events = eventsEnabled ? eventsService.createEvent(bid.getId(), account.getId()) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85dbf6e156b6237e14c281f68bfce1d9afc22c5f"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61471de7a22c072b6c2659442b4466cd77a1116e", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/61471de7a22c072b6c2659442b4466cd77a1116e", "committedDate": "2020-03-30T07:30:36Z", "message": "change request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "813a7d184c94f3d14b816b1b0c05031db7b391e3", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/813a7d184c94f3d14b816b1b0c05031db7b391e3", "committedDate": "2020-03-31T08:00:08Z", "message": "change request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTYzOTEz", "url": "https://github.com/prebid/prebid-server-java/pull/616#pullrequestreview-384563913", "createdAt": "2020-03-31T09:38:20Z", "commit": {"oid": "813a7d184c94f3d14b816b1b0c05031db7b391e3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTozODoyMFrOF-NZmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTo0MzowOFrOF-NloQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NTU3Ng==", "bodyText": "Replace with if", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r400775576", "createdAt": "2020-03-31T09:38:20Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -641,7 +654,10 @@ private Bid toBid(BidderBid bidderBid, String bidder, ExtRequestTargeting target\n         final Video storedVideo = impIdToStoredVideo.get(bid.getImpid());\n         final Events events = eventsEnabled ? eventsService.createEvent(bid.getId(), account.getId()) : null;\n \n-        final ExtBidPrebid prebidExt = ExtBidPrebid.of(bidType, targetingKeywords, cache, storedVideo, events, null);\n+        final String bidId = bidIdSupplier.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "813a7d184c94f3d14b816b1b0c05031db7b391e3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3ODY1Nw==", "bodyText": "?", "url": "https://github.com/prebid/prebid-server-java/pull/616#discussion_r400778657", "createdAt": "2020-03-31T09:43:08Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -641,7 +693,9 @@ private Bid toBid(BidderBid bidderBid, String bidder, ExtRequestTargeting target\n         final Video storedVideo = impIdToStoredVideo.get(bid.getImpid());\n         final Events events = eventsEnabled ? eventsService.createEvent(bid.getId(), account.getId()) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0MzA5MA=="}, "originalCommit": {"oid": "85dbf6e156b6237e14c281f68bfce1d9afc22c5f"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42c412e7dcdfd17b97631ae3e85649989915fc2c", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/42c412e7dcdfd17b97631ae3e85649989915fc2c", "committedDate": "2020-03-31T11:53:34Z", "message": "simplify code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb1cef490d772b4f04980463d9e9d3459e13a330", "author": {"user": {"login": "apaliy", "name": "Andrew Paliy"}}, "url": "https://github.com/prebid/prebid-server-java/commit/fb1cef490d772b4f04980463d9e9d3459e13a330", "committedDate": "2020-03-31T12:12:17Z", "message": "simplify code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjczODE3", "url": "https://github.com/prebid/prebid-server-java/pull/616#pullrequestreview-384673817", "createdAt": "2020-03-31T12:18:01Z", "commit": {"oid": "fb1cef490d772b4f04980463d9e9d3459e13a330"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40eae2aaea402bd2f57322a8be4e90a31d5dc471", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/40eae2aaea402bd2f57322a8be4e90a31d5dc471", "committedDate": "2020-05-08T08:51:49Z", "message": "Merge branch 'master' into pbs-id-generation\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/auction/BidResponseCreator.java\n#\tsrc/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n#\tsrc/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87ee7d108ffd7f7a4d70ada89b6b614eed6775da", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/87ee7d108ffd7f7a4d70ada89b6b614eed6775da", "committedDate": "2020-05-08T09:05:03Z", "message": "Minor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5273bac0929643f098c383c9eba8aa1b451d8122", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/5273bac0929643f098c383c9eba8aa1b451d8122", "committedDate": "2020-05-08T09:25:35Z", "message": "Fix org.prebid.server.proto.openrtb.ext.response.ExtBidPrebid.bidid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9867e3058abb381dde7ef305800f188ea788baef", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/9867e3058abb381dde7ef305800f188ea788baef", "committedDate": "2020-05-08T10:20:42Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MTgxMDA2", "url": "https://github.com/prebid/prebid-server-java/pull/616#pullrequestreview-408181006", "createdAt": "2020-05-08T11:42:47Z", "commit": {"oid": "9867e3058abb381dde7ef305800f188ea788baef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3275, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}