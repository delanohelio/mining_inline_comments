{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjk2Nzcz", "number": 605, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjoyNzowMFrODeAXqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowNzoyNlrODfhX6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzg5OTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjoyNzowMFrOFm7goA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjoyNzowMFrOFm7goA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NTIxNg==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r376365216", "createdAt": "2020-02-07T12:27:00Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.prebid.server.log;\n+\n+import io.vertx.core.logging.Logger;\n+\n+import java.util.Date;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+\n+public class ConditionalLogger {\n+    private ConcurrentHashMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentHashMap<String, AtomicLong> messageToWait;\n+    private final Logger logger;\n+\n+    public ConditionalLogger(Logger logger) {\n+        this.logger = logger;\n+        this.messageToCount = new ConcurrentHashMap<>();\n+        this.messageToWait = new ConcurrentHashMap<>();\n+    }\n+\n+    public void info(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.info(message));\n+    }\n+\n+    public void info(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.info(message));\n+    }\n+\n+    public void error(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.error(message));\n+    }\n+\n+    public void error(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.error(message));\n+    }\n+\n+    public void debug(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.debug(message));\n+    }\n+\n+    public void debug(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.debug(message));\n+    }\n+\n+    public void warn(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.warn(message));\n+    }\n+\n+    public void warn(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.warn(message));\n+    }\n+\n+    public void log(String key, Integer maxValue, Consumer<Logger> onLog) {\n+        AtomicInteger currentValue = messageToCount.compute(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843b9b99bc062b8c7261e3317b43e636521faef9"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzkwMjg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/handler/openrtb2/AuctionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjoyODozNFrOFm7i3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjoyODozNFrOFm7i3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NTc5MA==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r376365790", "createdAt": "2020-02-07T12:28:34Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/handler/openrtb2/AuctionHandler.java", "diffHunk": "@@ -154,12 +156,13 @@ private void handleResult(AsyncResult<Tuple2<BidResponse, AuctionContext>> respo\n             } else if (exception instanceof UnauthorizedAccountException) {\n                 metricRequestStatus = MetricName.badinput;\n                 final String errorMessage = exception.getMessage();\n-                logger.info(\"Unauthorized: {0}\", errorMessage);\n-\n+                CONDITIONAL_LOGGER.info(String.format(\"Unauthorized: %s\", errorMessage), 100);\n                 errorMessages = Collections.singletonList(errorMessage);\n \n                 status = HttpResponseStatus.UNAUTHORIZED.code();\n                 body = String.format(\"Unauthorised: %s\", errorMessage);\n+                String userId = ((UnauthorizedAccountException) exception).getUserId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843b9b99bc062b8c7261e3317b43e636521faef9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzkzNTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/metric/RequestsMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjo0MTo0OFrOFm71-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjo0MTo0OFrOFm71-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3MDY4Mg==", "bodyText": "What is the difference between RequestMetrics", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r376370682", "createdAt": "2020-02-07T12:41:48Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/metric/RequestsMetrics.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.prebid.server.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+public class RequestsMetrics extends UpdatableMetrics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843b9b99bc062b8c7261e3317b43e636521faef9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzk3NTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjo1OToyMlrOFm8PRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjo1OToyMlrOFm8PRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3NzE1Ng==", "bodyText": "I am not sure, if it is good idea, store all messages (strings) and AtomicInteger.\nI have concerns regarding of memory usage of this class, bc of all logs which will be never deleted.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r376377156", "createdAt": "2020-02-07T12:59:22Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.prebid.server.log;\n+\n+import io.vertx.core.logging.Logger;\n+\n+import java.util.Date;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+\n+public class ConditionalLogger {\n+    private ConcurrentHashMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentHashMap<String, AtomicLong> messageToWait;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843b9b99bc062b8c7261e3317b43e636521faef9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzk4NzA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzowNDowM1rOFm8WLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzowNDowM1rOFm8WLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3ODkyNg==", "bodyText": "Try to use Instant.ofEpochMilli() probably", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r376378926", "createdAt": "2020-02-07T13:04:03Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.prebid.server.log;\n+\n+import io.vertx.core.logging.Logger;\n+\n+import java.util.Date;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+\n+public class ConditionalLogger {\n+    private ConcurrentHashMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentHashMap<String, AtomicLong> messageToWait;\n+    private final Logger logger;\n+\n+    public ConditionalLogger(Logger logger) {\n+        this.logger = logger;\n+        this.messageToCount = new ConcurrentHashMap<>();\n+        this.messageToWait = new ConcurrentHashMap<>();\n+    }\n+\n+    public void info(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.info(message));\n+    }\n+\n+    public void info(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.info(message));\n+    }\n+\n+    public void error(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.error(message));\n+    }\n+\n+    public void error(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.error(message));\n+    }\n+\n+    public void debug(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.debug(message));\n+    }\n+\n+    public void debug(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.debug(message));\n+    }\n+\n+    public void warn(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.warn(message));\n+    }\n+\n+    public void warn(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.warn(message));\n+    }\n+\n+    public void log(String key, Integer maxValue, Consumer<Logger> onLog) {\n+        AtomicInteger currentValue = messageToCount.compute(\n+                key, (k, currentCounter) -> currentCounter != null ? currentCounter : new AtomicInteger(0)\n+        );\n+        if (currentValue.incrementAndGet() >= maxValue) {\n+            currentValue.set(0);\n+            onLog.accept(logger);\n+        }\n+    }\n+\n+    public void log(String key, long amount, TimeUnit unit, Consumer<Logger> onLog) {\n+        messageToWait.compute(key, (k, result) -> {\n+            if (result == null || currentTimeMillis() >= result.get()) {\n+                result = recalculateDate(amount, unit);\n+                onLog.accept(logger);\n+            }\n+            return result;\n+        });\n+    }\n+\n+    private AtomicLong recalculateDate(long amount, TimeUnit unit) {\n+        final long amountInMillis = unit.toMillis(amount);\n+        final Date result = new Date(currentTimeMillis() + amountInMillis);\n+        return new AtomicLong(result.getTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843b9b99bc062b8c7261e3317b43e636521faef9"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzk5NjkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzowODozNVrOFm8cdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzowODozNVrOFm8cdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4MDUzNA==", "bodyText": "Not sure about AtomicLong usage here.\nYou don't change variable inside it, you recreating and replacing value in ConcurrentHashMap each time", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r376380534", "createdAt": "2020-02-07T13:08:35Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.prebid.server.log;\n+\n+import io.vertx.core.logging.Logger;\n+\n+import java.util.Date;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+\n+public class ConditionalLogger {\n+    private ConcurrentHashMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentHashMap<String, AtomicLong> messageToWait;\n+    private final Logger logger;\n+\n+    public ConditionalLogger(Logger logger) {\n+        this.logger = logger;\n+        this.messageToCount = new ConcurrentHashMap<>();\n+        this.messageToWait = new ConcurrentHashMap<>();\n+    }\n+\n+    public void info(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.info(message));\n+    }\n+\n+    public void info(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.info(message));\n+    }\n+\n+    public void error(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.error(message));\n+    }\n+\n+    public void error(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.error(message));\n+    }\n+\n+    public void debug(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.debug(message));\n+    }\n+\n+    public void debug(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.debug(message));\n+    }\n+\n+    public void warn(String message, Integer maxValue) {\n+        log(message, maxValue, logger -> logger.warn(message));\n+    }\n+\n+    public void warn(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.warn(message));\n+    }\n+\n+    public void log(String key, Integer maxValue, Consumer<Logger> onLog) {\n+        AtomicInteger currentValue = messageToCount.compute(\n+                key, (k, currentCounter) -> currentCounter != null ? currentCounter : new AtomicInteger(0)\n+        );\n+        if (currentValue.incrementAndGet() >= maxValue) {\n+            currentValue.set(0);\n+            onLog.accept(logger);\n+        }\n+    }\n+\n+    public void log(String key, long amount, TimeUnit unit, Consumer<Logger> onLog) {\n+        messageToWait.compute(key, (k, result) -> {\n+            if (result == null || currentTimeMillis() >= result.get()) {\n+                result = recalculateDate(amount, unit);\n+                onLog.accept(logger);\n+            }\n+            return result;\n+        });\n+    }\n+\n+    private AtomicLong recalculateDate(long amount, TimeUnit unit) {\n+        final long amountInMillis = unit.toMillis(amount);\n+        final Date result = new Date(currentTimeMillis() + amountInMillis);\n+        return new AtomicLong(result.getTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843b9b99bc062b8c7261e3317b43e636521faef9"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODAxODY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/log/ConditionalLoggerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzoxNzozMFrOFm8qAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzoxNzozMFrOFm8qAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NDAwMA==", "bodyText": "Is throws Exception necessary ?", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r376384000", "createdAt": "2020-02-07T13:17:30Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/log/ConditionalLoggerTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.prebid.server.log;\n+\n+import io.vertx.core.logging.Logger;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ConditionalLoggerTest {\n+\n+    @Mock\n+    private Logger logger;\n+\n+    private ConditionalLogger conditionalLogger;\n+\n+    @Before\n+    public void setUp() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843b9b99bc062b8c7261e3317b43e636521faef9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODAyMDAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/log/ConditionalLoggerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzoxODowNFrOFm8q6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzoxODowNFrOFm8q6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NDIzMg==", "bodyText": "Change any() to \"Hello\"", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r376384232", "createdAt": "2020-02-07T13:18:04Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/log/ConditionalLoggerTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.prebid.server.log;\n+\n+import io.vertx.core.logging.Logger;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ConditionalLoggerTest {\n+\n+    @Mock\n+    private Logger logger;\n+\n+    private ConditionalLogger conditionalLogger;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        conditionalLogger = new ConditionalLogger(logger);\n+    }\n+\n+    @Test\n+    public void log() {\n+        //when\n+        for (int i = 0; i < 100; i++) {\n+            conditionalLogger.info(\"Hello\", 20);\n+        }\n+        //then\n+        verify(logger, times(5)).info(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843b9b99bc062b8c7261e3317b43e636521faef9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODAyMzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/metric/MetricName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzoxOToyNFrOFm8tEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzoxOToyNFrOFm8tEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NDc4Ng==", "bodyText": "Update metrics.md", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r376384786", "createdAt": "2020-02-07T13:19:24Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/metric/MetricName.java", "diffHunk": "@@ -75,7 +75,10 @@\n \n     // cache\n     prebid_cache_request_success_time,\n-    prebid_cache_request_error_time;\n+    prebid_cache_request_error_time,\n+\n+    //account.*.requests.\n+    rejected;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843b9b99bc062b8c7261e3317b43e636521faef9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAzNDI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODozOTozOVrOFnPxNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwODozOTozOVrOFnPxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NzE0Mg==", "bodyText": "Try to migrate from old Data to newer .time. library please", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r376697142", "createdAt": "2020-02-08T08:39:39Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -40,4 +62,25 @@ private void log(String key, Integer maxValue, Consumer<Logger> consumer) {\n             consumer.accept(logger);\n         }\n     }\n+\n+    public void log(String key, long amount, TimeUnit unit, Consumer<Logger> consumer) {\n+        messageToWait.compute(key, (currentKey, lastTimeMillis) -> {\n+            if (lastTimeMillis == null || currentTimeMillis() >= lastTimeMillis) {\n+                lastTimeMillis = recalculateDate(amount, unit);\n+                consumer.accept(logger);\n+            }\n+            return lastTimeMillis;\n+        });\n+    }\n+\n+    private long recalculateDate(long amount, TimeUnit unit) {\n+        final long amountInMillis = unit.toMillis(amount);\n+        Instant resultInstant = Instant.now().plusMillis(amountInMillis);\n+        return resultInstant.toEpochMilli();\n+    }\n+\n+    private long currentTimeMillis() {\n+        return new Date().getTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15cdef6a0bc65a89887ddc67ad187fce8c7839"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzcyNzM4OnYy", "diffSide": "RIGHT", "path": "docs/metrics.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0Mzo1MFrOFpQxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0Mzo1MFrOFpQxFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDY0Nw==", "bodyText": "Thanks.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378810647", "createdAt": "2020-02-13T11:43:50Z", "author": {"login": "rpanchyk"}, "path": "docs/metrics.md", "diffHunk": "@@ -60,6 +60,7 @@ Following metrics are collected and submitted if account is configured with `det\n - `account.<account-id>.<bidder-name>.request_time` - timer tracking how long did it take to make a request to `<bidder-name>` when incoming request was from `<account-id>` \n - `account.<account-id>.<bidder-name>.bids_received` - number of bids received from `<bidder-name>` when incoming request was from `<account-id>`\n - `account.<account-id>.<bidder-name>.requests.(gotbids|nobid)` - number of requests made to `<bidder-name>` broken down by result status  when incoming request was from `<account-id>`\n+- `account.<account-id>.requests.rejected` - number of rejected requests caused by incorrect `accountId` ([UnauthorizedAccountException.java](https://github.com/rubicon-project/prebid-server-java/blob/master/src/main/java/org/prebid/server/exception/UnauthorizedAccountException.java))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzcyOTc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0NDo0OFrOFpQyiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0NDo0OFrOFpQyiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMTAxNg==", "bodyText": "Pls add null check for logger argument.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378811016", "createdAt": "2020-02-13T11:44:48Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -1,37 +1,67 @@\n package org.prebid.server.log;\n \n+import com.github.benmanes.caffeine.cache.Caffeine;\n import io.vertx.core.logging.Logger;\n \n-import java.util.concurrent.ConcurrentHashMap;\n+import java.time.Instant;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Consumer;\n \n public class ConditionalLogger {\n-    private ConcurrentHashMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentMap<String, Long> messageToWait;\n+\n     private final Logger logger;\n \n     public ConditionalLogger(Logger logger) {\n         this.logger = logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzczMTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0NToyOVrOFpQzuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0NToyOVrOFpQzuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMTMyMA==", "bodyText": "this ref is not required.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378811320", "createdAt": "2020-02-13T11:45:29Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -1,37 +1,67 @@\n package org.prebid.server.log;\n \n+import com.github.benmanes.caffeine.cache.Caffeine;\n import io.vertx.core.logging.Logger;\n \n-import java.util.concurrent.ConcurrentHashMap;\n+import java.time.Instant;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Consumer;\n \n public class ConditionalLogger {\n-    private ConcurrentHashMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentMap<String, Long> messageToWait;\n+\n     private final Logger logger;\n \n     public ConditionalLogger(Logger logger) {\n         this.logger = logger;\n-        this.messageToCount = new ConcurrentHashMap<>();\n+        this.messageToWait = Caffeine.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzczNTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0Njo1M1rOFpQ2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0Njo1M1rOFpQ2Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMTk2Mg==", "bodyText": "Make this method private.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378811962", "createdAt": "2020-02-13T11:46:53Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -1,37 +1,67 @@\n package org.prebid.server.log;\n \n+import com.github.benmanes.caffeine.cache.Caffeine;\n import io.vertx.core.logging.Logger;\n \n-import java.util.concurrent.ConcurrentHashMap;\n+import java.time.Instant;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Consumer;\n \n public class ConditionalLogger {\n-    private ConcurrentHashMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentMap<String, Long> messageToWait;\n+\n     private final Logger logger;\n \n     public ConditionalLogger(Logger logger) {\n         this.logger = logger;\n-        this.messageToCount = new ConcurrentHashMap<>();\n+        this.messageToWait = Caffeine.newBuilder()\n+                .maximumSize(10_000)\n+                .expireAfterWrite(1, TimeUnit.HOURS)\n+                .<String, Long>build()\n+                .asMap();\n+        messageToCount = Caffeine.newBuilder()\n+                .maximumSize(10_000)\n+                .expireAfterWrite(1, TimeUnit.HOURS)\n+                .<String, AtomicInteger>build()\n+                .asMap();\n     }\n \n     public void info(String message, Integer maxValue) {\n         log(message, maxValue, logger -> logger.info(message));\n     }\n \n+    public void info(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.info(message));\n+    }\n+\n     public void error(String message, Integer maxValue) {\n         log(message, maxValue, logger -> logger.error(message));\n     }\n \n+    public void error(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.error(message));\n+    }\n+\n     public void debug(String message, Integer maxValue) {\n         log(message, maxValue, logger -> logger.debug(message));\n     }\n \n+    public void debug(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.debug(message));\n+    }\n+\n     public void warn(String message, Integer maxValue) {\n         log(message, maxValue, logger -> logger.warn(message));\n     }\n \n-    private void log(String key, Integer maxValue, Consumer<Logger> consumer) {\n+    public void warn(String message, long amount, TimeUnit unit) {\n+        log(message, amount, unit, logger -> logger.warn(message));\n+    }\n+\n+    public void log(String key, Integer maxValue, Consumer<Logger> consumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzczNTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0NzowMFrOFpQ2aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0NzowMFrOFpQ2aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMjAwOQ==", "bodyText": "Make this method private.\nAdd unit test for it.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378812009", "createdAt": "2020-02-13T11:47:00Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -40,4 +70,25 @@ private void log(String key, Integer maxValue, Consumer<Logger> consumer) {\n             consumer.accept(logger);\n         }\n     }\n+\n+    public void log(String key, long amount, TimeUnit unit, Consumer<Logger> consumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzczODk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0ODowN1rOFpQ4RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0ODowN1rOFpQ4RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMjQ4NA==", "bodyText": "Can be final.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378812484", "createdAt": "2020-02-13T11:48:07Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -40,4 +70,25 @@ private void log(String key, Integer maxValue, Consumer<Logger> consumer) {\n             consumer.accept(logger);\n         }\n     }\n+\n+    public void log(String key, long amount, TimeUnit unit, Consumer<Logger> consumer) {\n+        messageToWait.compute(key, (currentKey, lastTimeMillis) -> {\n+            if (lastTimeMillis == null || currentTimeMillis() >= lastTimeMillis) {\n+                lastTimeMillis = recalculateDate(amount, unit);\n+                consumer.accept(logger);\n+            }\n+            return lastTimeMillis;\n+        });\n+    }\n+\n+    private long recalculateDate(long amount, TimeUnit unit) {\n+        final long amountInMillis = unit.toMillis(amount);\n+        Instant resultInstant = Instant.now().plusMillis(amountInMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc0OTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1MTo1NVrOFpQ-9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1MTo1NVrOFpQ-9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxNDE5Ng==", "bodyText": "Can be static.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378814196", "createdAt": "2020-02-13T11:51:55Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -40,4 +70,25 @@ private void log(String key, Integer maxValue, Consumer<Logger> consumer) {\n             consumer.accept(logger);\n         }\n     }\n+\n+    public void log(String key, long amount, TimeUnit unit, Consumer<Logger> consumer) {\n+        messageToWait.compute(key, (currentKey, lastTimeMillis) -> {\n+            if (lastTimeMillis == null || currentTimeMillis() >= lastTimeMillis) {\n+                lastTimeMillis = recalculateDate(amount, unit);\n+                consumer.accept(logger);\n+            }\n+            return lastTimeMillis;\n+        });\n+    }\n+\n+    private long recalculateDate(long amount, TimeUnit unit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc1MDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1MjoyMFrOFpQ_nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1MjoyMFrOFpQ_nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxNDM2NA==", "bodyText": "Can be static.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378814364", "createdAt": "2020-02-13T11:52:20Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -40,4 +70,25 @@ private void log(String key, Integer maxValue, Consumer<Logger> consumer) {\n             consumer.accept(logger);\n         }\n     }\n+\n+    public void log(String key, long amount, TimeUnit unit, Consumer<Logger> consumer) {\n+        messageToWait.compute(key, (currentKey, lastTimeMillis) -> {\n+            if (lastTimeMillis == null || currentTimeMillis() >= lastTimeMillis) {\n+                lastTimeMillis = recalculateDate(amount, unit);\n+                consumer.accept(logger);\n+            }\n+            return lastTimeMillis;\n+        });\n+    }\n+\n+    private long recalculateDate(long amount, TimeUnit unit) {\n+        final long amountInMillis = unit.toMillis(amount);\n+        Instant resultInstant = Instant.now().plusMillis(amountInMillis);\n+        return resultInstant.toEpochMilli();\n+    }\n+\n+    private long currentTimeMillis() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc1NDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/vertx/http/CircuitBreakerSecuredHttpClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1Mzo1M1rOFpRCEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1Mzo1M1rOFpRCEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxNDk5Mg==", "bodyText": "Pls extract 5 to class constant, like LOG_PERIOD_SECONDS.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378814992", "createdAt": "2020-02-13T11:53:53Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/vertx/http/CircuitBreakerSecuredHttpClient.java", "diffHunk": "@@ -49,7 +52,8 @@ public CircuitBreakerSecuredHttpClient(Vertx vertx, HttpClient httpClient, Metri\n     }\n \n     private void circuitOpened(String name) {\n-        logger.warn(\"Http client request to {0} is failed, circuit opened.\", name);\n+        conditionalLogger.warn(String.format(\"Http client request to %s is failed, circuit opened.\", name),\n+                5, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc1ODIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/vertx/jdbc/CircuitBreakerSecuredJdbcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1NTowM1rOFpRELQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1NTowM1rOFpRELQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxNTUzMw==", "bodyText": "Pls extract 5 to class constant, like LOG_PERIOD_SECONDS.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378815533", "createdAt": "2020-02-13T11:55:03Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/vertx/jdbc/CircuitBreakerSecuredJdbcClient.java", "diffHunk": "@@ -42,7 +45,7 @@ public CircuitBreakerSecuredJdbcClient(Vertx vertx, JdbcClient jdbcClient, Metri\n     }\n \n     private void circuitOpened() {\n-        logger.warn(\"Database is unavailable, circuit opened.\");\n+        conditionalLogger.warn(\"Database is unavailable, circuit opened.\", 5, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc2NTEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/log/ConditionalLoggerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1Nzo0MlrOFpRIhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1Nzo0MlrOFpRIhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxNjY0NQ==", "bodyText": "Pls set reasonable name test, like infoShouldCallLoggerWithExpectedCount.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378816645", "createdAt": "2020-02-13T11:57:42Z", "author": {"login": "rpanchyk"}, "path": "src/test/java/org/prebid/server/log/ConditionalLoggerTest.java", "diffHunk": "@@ -23,17 +22,17 @@\n     private ConditionalLogger conditionalLogger;\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         conditionalLogger = new ConditionalLogger(logger);\n     }\n \n     @Test\n-    public void log() {\n-        // when\n+    public void counterLog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc3MDE2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/log/ConditionalLoggerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1OToyNlrOFpRLkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo1OToyNlrOFpRLkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxNzQyNQ==", "bodyText": "Pls use reasonable test data, like log message.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378817425", "createdAt": "2020-02-13T11:59:26Z", "author": {"login": "rpanchyk"}, "path": "src/test/java/org/prebid/server/log/ConditionalLoggerTest.java", "diffHunk": "@@ -23,17 +22,17 @@\n     private ConditionalLogger conditionalLogger;\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         conditionalLogger = new ConditionalLogger(logger);\n     }\n \n     @Test\n-    public void log() {\n-        // when\n+    public void counterLog() {\n+        //when\n         for (int i = 0; i < 100; i++) {\n             conditionalLogger.info(\"Hello\", 20);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc3MjI3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/log/ConditionalLoggerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowMDowOFrOFpRM5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowMDowOFrOFpRM5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxNzc2Nw==", "bodyText": "Minor. Why to skip space? :)", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378817767", "createdAt": "2020-02-13T12:00:08Z", "author": {"login": "rpanchyk"}, "path": "src/test/java/org/prebid/server/log/ConditionalLoggerTest.java", "diffHunk": "@@ -23,17 +22,17 @@\n     private ConditionalLogger conditionalLogger;\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         conditionalLogger = new ConditionalLogger(logger);\n     }\n \n     @Test\n-    public void log() {\n-        // when\n+    public void counterLog() {\n+        //when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc3NTgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowMToxMVrOFpRPCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowMToxMVrOFpRPCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxODMxNQ==", "bodyText": "Pls extract 10_000 to class constant.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378818315", "createdAt": "2020-02-13T12:01:11Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -1,37 +1,67 @@\n package org.prebid.server.log;\n \n+import com.github.benmanes.caffeine.cache.Caffeine;\n import io.vertx.core.logging.Logger;\n \n-import java.util.concurrent.ConcurrentHashMap;\n+import java.time.Instant;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Consumer;\n \n public class ConditionalLogger {\n-    private ConcurrentHashMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentMap<String, Long> messageToWait;\n+\n     private final Logger logger;\n \n     public ConditionalLogger(Logger logger) {\n         this.logger = logger;\n-        this.messageToCount = new ConcurrentHashMap<>();\n+        this.messageToWait = Caffeine.newBuilder()\n+                .maximumSize(10_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc3NjM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowMToyOFrOFpRPdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowMToyOFrOFpRPdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxODQyMg==", "bodyText": "Pls extract 1 to class constant.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378818422", "createdAt": "2020-02-13T12:01:28Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -1,37 +1,67 @@\n package org.prebid.server.log;\n \n+import com.github.benmanes.caffeine.cache.Caffeine;\n import io.vertx.core.logging.Logger;\n \n-import java.util.concurrent.ConcurrentHashMap;\n+import java.time.Instant;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Consumer;\n \n public class ConditionalLogger {\n-    private ConcurrentHashMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentMap<String, AtomicInteger> messageToCount;\n+    private ConcurrentMap<String, Long> messageToWait;\n+\n     private final Logger logger;\n \n     public ConditionalLogger(Logger logger) {\n         this.logger = logger;\n-        this.messageToCount = new ConcurrentHashMap<>();\n+        this.messageToWait = Caffeine.newBuilder()\n+                .maximumSize(10_000)\n+                .expireAfterWrite(1, TimeUnit.HOURS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc3NzczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/handler/openrtb2/AuctionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowMTo1OVrOFpRQXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowMTo1OVrOFpRQXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxODY1NA==", "bodyText": "Pls rename to accountId.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378818654", "createdAt": "2020-02-13T12:01:59Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/handler/openrtb2/AuctionHandler.java", "diffHunk": "@@ -160,7 +160,7 @@ private void handleResult(AsyncResult<Tuple2<BidResponse, AuctionContext>> respo\n \n                 status = HttpResponseStatus.UNAUTHORIZED.code();\n                 body = message;\n-                String userId = ((UnauthorizedAccountException) exception).getAccountId();\n+                final String userId = ((UnauthorizedAccountException) exception).getAccountId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc3OTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/geolocation/CircuitBreakerSecuredGeoLocationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowMjozNlrOFpRRYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowMjozNlrOFpRRYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxODkxNA==", "bodyText": "Pls extract 5 to class constant, like LOG_PERIOD_SECONDS.", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378818914", "createdAt": "2020-02-13T12:02:36Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/geolocation/CircuitBreakerSecuredGeoLocationService.java", "diffHunk": "@@ -40,7 +43,7 @@ public CircuitBreakerSecuredGeoLocationService(Vertx vertx, GeoLocationService g\n     }\n \n     private void circuitOpened() {\n-        logger.warn(\"GeoLocation service is unavailable, circuit opened.\");\n+        conditionalLogger.warn(\"GeoLocation service is unavailable, circuit opened.\", 5, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzc5MjQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowNzoyNlrOFpRZVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjowNzoyNlrOFpRZVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyMDk1MA==", "bodyText": "Do we really need to compute value at each execution?", "url": "https://github.com/prebid/prebid-server-java/pull/605#discussion_r378820950", "createdAt": "2020-02-13T12:07:26Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/log/ConditionalLogger.java", "diffHunk": "@@ -40,4 +70,25 @@ private void log(String key, Integer maxValue, Consumer<Logger> consumer) {\n             consumer.accept(logger);\n         }\n     }\n+\n+    public void log(String key, long amount, TimeUnit unit, Consumer<Logger> consumer) {\n+        messageToWait.compute(key, (currentKey, lastTimeMillis) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea2deb7dbc9f0d3524b7def2e0c30dac44a7a5a5"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4130, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}