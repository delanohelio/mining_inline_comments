{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNjUwMTI4", "number": 1081, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDowMDoxOVrOFHzSgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoyNDowOVrOFHzzIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzI0NjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDowMDoxOVrOIJZNKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDowMDoxOVrOIJZNKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcyMTA2Nw==", "bodyText": "This variable could be inlined", "url": "https://github.com/prebid/prebid-server-java/pull/1081#discussion_r546721067", "createdAt": "2020-12-21T14:00:19Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -243,6 +255,37 @@ private static ExtRequestTargeting targeting(BidRequest bidRequest) {\n         return prebid != null ? prebid.getTargeting() : null;\n     }\n \n+    private static List<BidInfo> toBidInfo(BidderResponse bidderResponse, List<Imp> imps) {\n+        return Stream.of(bidderResponse)\n+                .map(BidderResponse::getSeatBid)\n+                .filter(Objects::nonNull)\n+                .map(BidderSeatBid::getBids)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bidderBid -> toBidInfo(bidderBid.getBid(), bidderBid.getType(), imps, bidderResponse.getBidder()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static BidInfo toBidInfo(Bid bid, BidType type, List<Imp> imps, String bidder) {\n+        final Imp imp = correspondingImp(bid, imps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9952c195fa5e5d09ee5270cdea7e303a6c7b2010"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzI1NjE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDowMzoyMlrOIJZS5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1NTo0NFrOIJ7-5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcyMjUzMw==", "bodyText": "If this isn't required for production usage, I would recommend removing this step.", "url": "https://github.com/prebid/prebid-server-java/pull/1081#discussion_r546722533", "createdAt": "2020-12-21T14:03:22Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -384,98 +428,60 @@ private static void tryAddWinningBidByBidder(Bid bid, String bidder,\n         }\n     }\n \n-    private static Stream<Bid> getBids(BidderResponse bidderResponse) {\n-        return Stream.of(bidderResponse)\n-                .map(BidderResponse::getSeatBid)\n-                .filter(Objects::nonNull)\n-                .map(BidderSeatBid::getBids)\n-                .filter(Objects::nonNull)\n-                .flatMap(Collection::stream)\n-                .map(BidderBid::getBid);\n-    }\n-\n     /**\n      * Corresponds cacheId (or null if not present) to each {@link Bid}.\n      */\n-    private Future<CacheServiceResult> toBidsWithCacheIds(List<BidderResponse> bidderResponses,\n-                                                          Set<Bid> bidsToCache,\n-                                                          AuctionContext auctionContext,\n-                                                          BidRequestCacheInfo cacheInfo,\n-                                                          EventsContext eventsContext) {\n-\n+    private Future<CacheServiceResult> cacheBids(Set<BidInfo> bidsToCache,\n+                                                 AuctionContext auctionContext,\n+                                                 BidRequestCacheInfo cacheInfo,\n+                                                 EventsContext eventsContext) {\n         if (!cacheInfo.isDoCaching()) {\n             return Future.succeededFuture(CacheServiceResult.of(null, null, toMapBidsWithEmptyCacheIds(bidsToCache)));\n         }\n \n         // do not submit non deals bids with zero price to prebid cache\n-        final List<Bid> bidsValidToBeCached = bidsToCache.stream()\n+        final List<BidInfo> bidsValidToBeCached = bidsToCache.stream()\n                 .filter(BidResponseCreator::isValidForCaching)\n+                // for test consistency", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9952c195fa5e5d09ee5270cdea7e303a6c7b2010"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NTYxNg==", "bodyText": "I couldn't get permanent /cache request order otherwise.", "url": "https://github.com/prebid/prebid-server-java/pull/1081#discussion_r546775616", "createdAt": "2020-12-21T15:40:00Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -384,98 +428,60 @@ private static void tryAddWinningBidByBidder(Bid bid, String bidder,\n         }\n     }\n \n-    private static Stream<Bid> getBids(BidderResponse bidderResponse) {\n-        return Stream.of(bidderResponse)\n-                .map(BidderResponse::getSeatBid)\n-                .filter(Objects::nonNull)\n-                .map(BidderSeatBid::getBids)\n-                .filter(Objects::nonNull)\n-                .flatMap(Collection::stream)\n-                .map(BidderBid::getBid);\n-    }\n-\n     /**\n      * Corresponds cacheId (or null if not present) to each {@link Bid}.\n      */\n-    private Future<CacheServiceResult> toBidsWithCacheIds(List<BidderResponse> bidderResponses,\n-                                                          Set<Bid> bidsToCache,\n-                                                          AuctionContext auctionContext,\n-                                                          BidRequestCacheInfo cacheInfo,\n-                                                          EventsContext eventsContext) {\n-\n+    private Future<CacheServiceResult> cacheBids(Set<BidInfo> bidsToCache,\n+                                                 AuctionContext auctionContext,\n+                                                 BidRequestCacheInfo cacheInfo,\n+                                                 EventsContext eventsContext) {\n         if (!cacheInfo.isDoCaching()) {\n             return Future.succeededFuture(CacheServiceResult.of(null, null, toMapBidsWithEmptyCacheIds(bidsToCache)));\n         }\n \n         // do not submit non deals bids with zero price to prebid cache\n-        final List<Bid> bidsValidToBeCached = bidsToCache.stream()\n+        final List<BidInfo> bidsValidToBeCached = bidsToCache.stream()\n                 .filter(BidResponseCreator::isValidForCaching)\n+                // for test consistency", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcyMjUzMw=="}, "originalCommit": {"oid": "9952c195fa5e5d09ee5270cdea7e303a6c7b2010"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MDg1Mw==", "bodyText": "Please take a look at \n  \n    \n      prebid-server-java/src/test/java/org/prebid/server/it/IntegrationTest.java\n    \n    \n         Line 185\n      in\n      3ce7df9\n    \n    \n    \n    \n\n        \n          \n           public static class CacheResponseTransformer extends ResponseTransformer { \n        \n    \n  \n\n. Does this help or at least gives an idea how to make tests reliable?", "url": "https://github.com/prebid/prebid-server-java/pull/1081#discussion_r547290853", "createdAt": "2020-12-22T13:55:44Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -384,98 +428,60 @@ private static void tryAddWinningBidByBidder(Bid bid, String bidder,\n         }\n     }\n \n-    private static Stream<Bid> getBids(BidderResponse bidderResponse) {\n-        return Stream.of(bidderResponse)\n-                .map(BidderResponse::getSeatBid)\n-                .filter(Objects::nonNull)\n-                .map(BidderSeatBid::getBids)\n-                .filter(Objects::nonNull)\n-                .flatMap(Collection::stream)\n-                .map(BidderBid::getBid);\n-    }\n-\n     /**\n      * Corresponds cacheId (or null if not present) to each {@link Bid}.\n      */\n-    private Future<CacheServiceResult> toBidsWithCacheIds(List<BidderResponse> bidderResponses,\n-                                                          Set<Bid> bidsToCache,\n-                                                          AuctionContext auctionContext,\n-                                                          BidRequestCacheInfo cacheInfo,\n-                                                          EventsContext eventsContext) {\n-\n+    private Future<CacheServiceResult> cacheBids(Set<BidInfo> bidsToCache,\n+                                                 AuctionContext auctionContext,\n+                                                 BidRequestCacheInfo cacheInfo,\n+                                                 EventsContext eventsContext) {\n         if (!cacheInfo.isDoCaching()) {\n             return Future.succeededFuture(CacheServiceResult.of(null, null, toMapBidsWithEmptyCacheIds(bidsToCache)));\n         }\n \n         // do not submit non deals bids with zero price to prebid cache\n-        final List<Bid> bidsValidToBeCached = bidsToCache.stream()\n+        final List<BidInfo> bidsValidToBeCached = bidsToCache.stream()\n                 .filter(BidResponseCreator::isValidForCaching)\n+                // for test consistency", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcyMjUzMw=="}, "originalCommit": {"oid": "9952c195fa5e5d09ee5270cdea7e303a6c7b2010"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzMwNjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/vast/VastModifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoxNzozNlrOIJZwPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoxNzozNlrOIJZwPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMDA0NA==", "bodyText": "Minor: please add null checks", "url": "https://github.com/prebid/prebid-server-java/pull/1081#discussion_r546730044", "createdAt": "2020-12-21T14:17:36Z", "author": {"login": "schernysh"}, "path": "src/main/java/org/prebid/server/vast/VastModifier.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.prebid.server.vast;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import com.iab.openrtb.response.Bid;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.prebid.server.bidder.BidderCatalog;\n+import org.prebid.server.cache.proto.request.PutObject;\n+import org.prebid.server.events.EventsContext;\n+import org.prebid.server.events.EventsService;\n+\n+import java.util.Set;\n+\n+public class VastModifier {\n+\n+    private final BidderCatalog bidderCatalog;\n+    private final EventsService eventsService;\n+\n+    public VastModifier(BidderCatalog bidderCatalog, EventsService eventsService) {\n+        this.bidderCatalog = bidderCatalog;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9952c195fa5e5d09ee5270cdea7e303a6c7b2010"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzMzMDI1OnYy", "diffSide": "RIGHT", "path": "src/test/resources/org/prebid/server/it/openrtb2/rubicon_appnexus/test-auction-rubicon-appnexus-response.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoyNDowOVrOIJZ9gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNDoyNDowOVrOIJZ9gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMzQ0MQ==", "bodyText": "Perhaps localhost:8080 part is better to be replaced with a placeholder. Please consider this improvement in other modified test resources (where applicable).", "url": "https://github.com/prebid/prebid-server-java/pull/1081#discussion_r546733441", "createdAt": "2020-12-21T14:24:09Z", "author": {"login": "schernysh"}, "path": "src/test/resources/org/prebid/server/it/openrtb2/rubicon_appnexus/test-auction-rubicon-appnexus-response.json", "diffHunk": "@@ -267,7 +267,7 @@\n           \"id\": \"880290288\",\n           \"impid\": \"impId1\",\n           \"price\": 8.43,\n-          \"adm\": \"<Impression><![CDATA[]]><\\/Impression>\",\n+          \"adm\": \"<Impression><![CDATA[]]></Impression><Impression><![CDATA[http://localhost:8080/event?t=imp&b=880290288&a=5001&ts=1000&bidder=rubicon&f=b&int=dmbjs]]></Impression>\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9952c195fa5e5d09ee5270cdea7e303a6c7b2010"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3873, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}