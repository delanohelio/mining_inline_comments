{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0ODEyOTgx", "number": 960, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyOTowM1rOEulAZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozOTo1M1rOEulWvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mjc2MjYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/smartyads/SmartyAdsBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyOTowM1rOHjFG4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyOTowM1rOHjFG4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0NTg5MQ==", "bodyText": "use constant for that like URL_HOST_MACRO", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506545891", "createdAt": "2020-10-16T15:29:03Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/smartyads/SmartyAdsBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.smartyads;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartyads.ExtImpSmartyAds;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class SmartyAdsBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartyAds>> SMARTYADS_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartyAds>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public SmartyAdsBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        ExtImpSmartyAds extImpSmartyAds = null;\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                extImpSmartyAds = parseImpExt(imp);\n+                validImps.add(updateImp(imp));\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(resolveUrl(extImpSmartyAds))\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()), errors);\n+    }\n+\n+    private ExtImpSmartyAds parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), SMARTYADS_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"ext.bidder not provided\");\n+        }\n+    }\n+\n+    private static Imp updateImp(Imp imp) {\n+        return imp.toBuilder().ext(null).build();\n+    }\n+\n+    private String resolveUrl(ExtImpSmartyAds extImp) {\n+\n+        return endpointUrl\n+                .replace(\"{{Host}}\", extImp.getHost())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mjc2NTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/smartyads/SmartyAdsBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyOTo0NFrOHjFJBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyOTo0NFrOHjFJBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0NjQzNw==", "bodyText": "prefer isNotBlank", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506546437", "createdAt": "2020-10-16T15:29:44Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/smartyads/SmartyAdsBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.smartyads;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartyads.ExtImpSmartyAds;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class SmartyAdsBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartyAds>> SMARTYADS_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartyAds>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public SmartyAdsBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        ExtImpSmartyAds extImpSmartyAds = null;\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                extImpSmartyAds = parseImpExt(imp);\n+                validImps.add(updateImp(imp));\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(resolveUrl(extImpSmartyAds))\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()), errors);\n+    }\n+\n+    private ExtImpSmartyAds parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), SMARTYADS_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"ext.bidder not provided\");\n+        }\n+    }\n+\n+    private static Imp updateImp(Imp imp) {\n+        return imp.toBuilder().ext(null).build();\n+    }\n+\n+    private String resolveUrl(ExtImpSmartyAds extImp) {\n+\n+        return endpointUrl\n+                .replace(\"{{Host}}\", extImp.getHost())\n+                .replace(\"{{SourceId}}\", extImp.getSourceId())\n+                .replace(\"{{AccountID}}\", extImp.getAccountId());\n+    }\n+\n+    private MultiMap resolveHeaders(Device device) {\n+\n+        final MultiMap headers = HttpUtil.headers();\n+        headers.add(\"X-Openrtb-Version\", \"2.5\");\n+\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getUa())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mjc3MjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/smartyads/SmartyAdsBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozMTowOFrOHjFNvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozMTowOFrOHjFNvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0NzY0NQ==", "bodyText": "CollectionUtils.isEmpty(bidResponse.getSeatbid())", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506547645", "createdAt": "2020-10-16T15:31:08Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/smartyads/SmartyAdsBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.smartyads;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartyads.ExtImpSmartyAds;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class SmartyAdsBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartyAds>> SMARTYADS_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartyAds>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public SmartyAdsBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        ExtImpSmartyAds extImpSmartyAds = null;\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                extImpSmartyAds = parseImpExt(imp);\n+                validImps.add(updateImp(imp));\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(resolveUrl(extImpSmartyAds))\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()), errors);\n+    }\n+\n+    private ExtImpSmartyAds parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), SMARTYADS_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"ext.bidder not provided\");\n+        }\n+    }\n+\n+    private static Imp updateImp(Imp imp) {\n+        return imp.toBuilder().ext(null).build();\n+    }\n+\n+    private String resolveUrl(ExtImpSmartyAds extImp) {\n+\n+        return endpointUrl\n+                .replace(\"{{Host}}\", extImp.getHost())\n+                .replace(\"{{SourceId}}\", extImp.getSourceId())\n+                .replace(\"{{AccountID}}\", extImp.getAccountId());\n+    }\n+\n+    private MultiMap resolveHeaders(Device device) {\n+\n+        final MultiMap headers = HttpUtil.headers();\n+        headers.add(\"X-Openrtb-Version\", \"2.5\");\n+\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getUa())) {\n+                headers.add(\"User-Agent\", device.getUa());\n+            }\n+            if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            }\n+            if (StringUtils.isNotEmpty(device.getLanguage())) {\n+                headers.add(\"Accept-Language\", device.getLanguage());\n+            }\n+            if (device.getDnt() != null) {\n+                headers.add(\"Dnt\", device.getDnt().toString());\n+            }\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.empty();\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mjc3OTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/smartyads/SmartyAdsBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozMjoxNFrOHjFR4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozMjoxNFrOHjFR4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0ODcwNQ==", "bodyText": "final SeatBid firstSeatBid = bidResponse.getSeatbid().get(0);\n        return firstSeatBid.getBid().stream()\n                .filter(Objects::nonNull)\n                .map(bid -> BidderBid.of(bid, getBidType(bid.getImpid(), bidRequest.getImp()), bidResponse.getCur()))\n                .collect(Collectors.toList());", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506548705", "createdAt": "2020-10-16T15:32:14Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/smartyads/SmartyAdsBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.smartyads;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartyads.ExtImpSmartyAds;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class SmartyAdsBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartyAds>> SMARTYADS_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartyAds>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public SmartyAdsBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        ExtImpSmartyAds extImpSmartyAds = null;\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                extImpSmartyAds = parseImpExt(imp);\n+                validImps.add(updateImp(imp));\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(resolveUrl(extImpSmartyAds))\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()), errors);\n+    }\n+\n+    private ExtImpSmartyAds parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), SMARTYADS_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"ext.bidder not provided\");\n+        }\n+    }\n+\n+    private static Imp updateImp(Imp imp) {\n+        return imp.toBuilder().ext(null).build();\n+    }\n+\n+    private String resolveUrl(ExtImpSmartyAds extImp) {\n+\n+        return endpointUrl\n+                .replace(\"{{Host}}\", extImp.getHost())\n+                .replace(\"{{SourceId}}\", extImp.getSourceId())\n+                .replace(\"{{AccountID}}\", extImp.getAccountId());\n+    }\n+\n+    private MultiMap resolveHeaders(Device device) {\n+\n+        final MultiMap headers = HttpUtil.headers();\n+        headers.add(\"X-Openrtb-Version\", \"2.5\");\n+\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getUa())) {\n+                headers.add(\"User-Agent\", device.getUa());\n+            }\n+            if (StringUtils.isNotEmpty(device.getIpv6())) {\n+                headers.add(\"X-Forwarded-For\", device.getIpv6());\n+            }\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            }\n+            if (StringUtils.isNotEmpty(device.getLanguage())) {\n+                headers.add(\"Accept-Language\", device.getLanguage());\n+            }\n+            if (device.getDnt() != null) {\n+                headers.add(\"Dnt\", device.getDnt().toString());\n+            }\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.empty();\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+\n+        return bidResponse.getSeatbid()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mjc4MzYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/smartyads/ExtImpSmartyAds.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozMzowMlrOHjFU4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozMzowMlrOHjFU4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0OTQ3NQ==", "bodyText": "redundant", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506549475", "createdAt": "2020-10-16T15:33:02Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/smartyads/ExtImpSmartyAds.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.prebid.server.proto.openrtb.ext.request.smartyads;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@Value\n+@AllArgsConstructor(staticName = \"of\")\n+public class ExtImpSmartyAds {\n+\n+    @JsonProperty(\"accountid\")\n+    String accountId;\n+\n+    @JsonProperty(\"sourceid\")\n+    String sourceId;\n+\n+    @JsonProperty(\"host\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mjc4NjM1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/smartyads/SmartyAdsBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozMzozNVrOHjFWxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozMzozNVrOHjFWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0OTk1Nw==", "bodyText": "redundant", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506549957", "createdAt": "2020-10-16T15:33:35Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/smartyads/SmartyAdsBidderTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package org.prebid.server.bidder.smartyads;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartyads.ExtImpSmartyAds;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class SmartyAdsBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL =\n+            \"http://{{Host}}.test.com/bid?param1={{SourceId}}&param2={{AccountID}}\";\n+\n+    private SmartyAdsBidder smartyAdsBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartyAdsBidder = new SmartyAdsBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartyAdsBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mjc4ODIyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/smartyads/SmartyAdsBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozMzo1N1rOHjFYBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozMzo1N1rOHjFYBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1MDI3OQ==", "bodyText": "format is redundant", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506550279", "createdAt": "2020-10-16T15:33:57Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/smartyads/SmartyAdsBidderTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package org.prebid.server.bidder.smartyads;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartyads.ExtImpSmartyAds;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class SmartyAdsBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL =\n+            \"http://{{Host}}.test.com/bid?param1={{SourceId}}&param2={{AccountID}}\";\n+\n+    private SmartyAdsBidder smartyAdsBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartyAdsBidder = new SmartyAdsBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartyAdsBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartyAdsBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"ext.bidder not provided\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mjc5Njc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/smartyads/SmartyAdsBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNToyMlrOHjFdgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNToyMlrOHjFdgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1MTY4MA==", "bodyText": "also redundant.\nCheck if all ext was removed", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506551680", "createdAt": "2020-10-16T15:35:22Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/smartyads/SmartyAdsBidderTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package org.prebid.server.bidder.smartyads;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartyads.ExtImpSmartyAds;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class SmartyAdsBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL =\n+            \"http://{{Host}}.test.com/bid?param1={{SourceId}}&param2={{AccountID}}\";\n+\n+    private SmartyAdsBidder smartyAdsBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartyAdsBidder = new SmartyAdsBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartyAdsBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartyAdsBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"ext.bidder not provided\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartyAdsBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri())\n+                .isEqualTo(\"http://testHost.test.com/bid?param1=testSourceId&param2=testAccountId\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotNativeRequestIfAlreadyExists() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjgwNDAwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/smartyads/SmartyAdsBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNjo0NFrOHjFiYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNjo0NFrOHjFiYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1MjkyOQ==", "bodyText": "add test for checking that only first Seatbid was processed.", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506552929", "createdAt": "2020-10-16T15:36:44Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/smartyads/SmartyAdsBidderTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package org.prebid.server.bidder.smartyads;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartyads.ExtImpSmartyAds;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class SmartyAdsBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL =\n+            \"http://{{Host}}.test.com/bid?param1={{SourceId}}&param2={{AccountID}}\";\n+\n+    private SmartyAdsBidder smartyAdsBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartyAdsBidder = new SmartyAdsBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartyAdsBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartyAdsBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"ext.bidder not provided\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartyAdsBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri())\n+                .isEqualTo(\"http://testHost.test.com/bid?param1=testSourceId&param2=testAccountId\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotNativeRequestIfAlreadyExists() {\n+        // given\n+        String nativeRequest = \"{\\\"native\\\":{\\\"ver\\\":\\\"1.2\\\",\\\"context\\\":1,\\\"plcmttype\\\":4,\\\"plcmtcnt\\\":1,\"\n+                + \"\\\"assets\\\":[{\\\"id\\\":2,\\\"required\\\":1,\\\"title\\\":{\\\"len\\\":90}},{\\\"id\\\":6,\\\"required\\\":1,\"\n+                + \"\\\"img\\\":{\\\"type\\\":3,\\\"wmin\\\":128,\\\"hmin\\\":128,\\\"mimes\\\":[\\\"image/jpg\\\",\\\"image/jpeg\\\",\"\n+                + \"\\\"image/png\\\"]}},{\\\"id\\\":7,\\\"required\\\":1,\\\"data\\\":{\\\"type\\\":2,\\\"len\\\":120}}]}}\";\n+\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder().build())\n+                        .xNative(Native.builder().request(nativeRequest).build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartyAdsBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        String expectedNativeRequest = \"{\\\"native\\\":{\\\"ver\\\":\\\"1.2\\\",\\\"context\\\":1,\\\"plcmttype\\\":4,\\\"plcmtcnt\\\":1,\"\n+                + \"\\\"assets\\\":[{\\\"id\\\":2,\\\"required\\\":1,\\\"title\\\":{\\\"len\\\":90}},{\\\"id\\\":6,\\\"required\\\":1,\\\"img\\\":\"\n+                + \"{\\\"type\\\":3,\\\"wmin\\\":128,\\\"hmin\\\":128,\\\"mimes\\\":[\\\"image/jpg\\\",\\\"image/jpeg\\\",\\\"image/png\\\"]}},\"\n+                + \"{\\\"id\\\":7,\\\"required\\\":1,\\\"data\\\":{\\\"type\\\":2,\\\"len\\\":120}}]}}\";\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getXNative)\n+                .extracting(Native::getRequest)\n+                .containsOnly(expectedNativeRequest);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), video, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnNativeBidIfNativeIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").xNative(Native.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), xNative, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjgwOTc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/smartyads/SmartyAdsBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNzo1MVrOHjFmWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNzo1MVrOHjFmWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1Mzk0NA==", "bodyText": "return impCustomizer.apply(Imp.builder()\n                .id(\"123\")\n                .banner(Banner.builder().id(\"banner_id\").build())\n                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpAdgeneration.of(\"123\")))))\n                .build();", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506553944", "createdAt": "2020-10-16T15:37:51Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/smartyads/SmartyAdsBidderTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package org.prebid.server.bidder.smartyads;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartyads.ExtImpSmartyAds;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class SmartyAdsBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL =\n+            \"http://{{Host}}.test.com/bid?param1={{SourceId}}&param2={{AccountID}}\";\n+\n+    private SmartyAdsBidder smartyAdsBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartyAdsBidder = new SmartyAdsBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartyAdsBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartyAdsBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"ext.bidder not provided\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartyAdsBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri())\n+                .isEqualTo(\"http://testHost.test.com/bid?param1=testSourceId&param2=testAccountId\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotNativeRequestIfAlreadyExists() {\n+        // given\n+        String nativeRequest = \"{\\\"native\\\":{\\\"ver\\\":\\\"1.2\\\",\\\"context\\\":1,\\\"plcmttype\\\":4,\\\"plcmtcnt\\\":1,\"\n+                + \"\\\"assets\\\":[{\\\"id\\\":2,\\\"required\\\":1,\\\"title\\\":{\\\"len\\\":90}},{\\\"id\\\":6,\\\"required\\\":1,\"\n+                + \"\\\"img\\\":{\\\"type\\\":3,\\\"wmin\\\":128,\\\"hmin\\\":128,\\\"mimes\\\":[\\\"image/jpg\\\",\\\"image/jpeg\\\",\"\n+                + \"\\\"image/png\\\"]}},{\\\"id\\\":7,\\\"required\\\":1,\\\"data\\\":{\\\"type\\\":2,\\\"len\\\":120}}]}}\";\n+\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder().build())\n+                        .xNative(Native.builder().request(nativeRequest).build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartyAdsBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        String expectedNativeRequest = \"{\\\"native\\\":{\\\"ver\\\":\\\"1.2\\\",\\\"context\\\":1,\\\"plcmttype\\\":4,\\\"plcmtcnt\\\":1,\"\n+                + \"\\\"assets\\\":[{\\\"id\\\":2,\\\"required\\\":1,\\\"title\\\":{\\\"len\\\":90}},{\\\"id\\\":6,\\\"required\\\":1,\\\"img\\\":\"\n+                + \"{\\\"type\\\":3,\\\"wmin\\\":128,\\\"hmin\\\":128,\\\"mimes\\\":[\\\"image/jpg\\\",\\\"image/jpeg\\\",\\\"image/png\\\"]}},\"\n+                + \"{\\\"id\\\":7,\\\"required\\\":1,\\\"data\\\":{\\\"type\\\":2,\\\"len\\\":120}}]}}\";\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getXNative)\n+                .extracting(Native::getRequest)\n+                .containsOnly(expectedNativeRequest);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), video, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnNativeBidIfNativeIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").xNative(Native.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), xNative, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartyAdsBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void extractTargetingShouldReturnEmptyMap() {\n+        assertThat(smartyAdsBidder.extractTargeting(mapper.createObjectNode())).isEqualTo(emptyMap());\n+    }\n+\n+    private static BidRequest givenBidRequest(\n+            Function<BidRequest.BidRequestBuilder, BidRequest.BidRequestBuilder> bidRequestCustomizer,\n+            Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+\n+        return bidRequestCustomizer.apply(BidRequest.builder()\n+                .imp(singletonList(givenImp(impCustomizer))))\n+                .build();\n+    }\n+\n+    private static BidRequest givenBidRequest(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return givenBidRequest(identity(), impCustomizer);\n+    }\n+\n+    private static Imp givenImp(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return impCustomizer.apply(Imp.builder()\n+                .id(\"123\")\n+                .banner(Banner.builder().id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                        ExtImpSmartyAds.of(\"testAccountId\", \"testSourceId\", \"testHost\")))))\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjgxMzYwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/it/SmartyAdsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozODo0MFrOHjFpJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozODo0MFrOHjFpJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1NDY2MA==", "bodyText": "rename all Logicad to SmaryAds", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506554660", "createdAt": "2020-10-16T15:38:40Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/it/SmartyAdsTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.IOException;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToIgnoreCase;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class SmartyAdsTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromLogicad() throws IOException, JSONException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjgxOTgwOnYy", "diffSide": "RIGHT", "path": "src/test/resources/org/prebid/server/it/openrtb2/smartyads/test-auction-smartyads-response.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozOTo1M1rOHjFtUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozOTo1M1rOHjFtUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1NTczMQ==", "bodyText": "{{ cache.path }}", "url": "https://github.com/prebid/prebid-server-java/pull/960#discussion_r506555731", "createdAt": "2020-10-16T15:39:53Z", "author": {"login": "DGarbar"}, "path": "src/test/resources/org/prebid/server/it/openrtb2/smartyads/test-auction-smartyads-response.json", "diffHunk": "@@ -0,0 +1,53 @@\n+{\n+  \"id\": \"tid\",\n+  \"seatbid\": [\n+    {\n+      \"bid\": [\n+        {\n+          \"id\": \"testid\",\n+          \"impid\": \"testimpid\",\n+          \"price\": 0.01,\n+          \"adid\": \"2068416\",\n+          \"cid\": \"8048\",\n+          \"crid\": \"24080\",\n+          \"ext\": {\n+            \"prebid\": {\n+              \"type\": \"banner\",\n+              \"targeting\": {\n+                \"hb_pb\": \"0.00\",\n+                \"hb_cache_id_smartyads\": \"3c0769d8-0dd9-465c-8bf3-f570605ba698\",\n+                \"hb_bidder_smartyads\": \"smartyads\",\n+                \"hb_bidder\": \"smartyads\",\n+                \"hb_cache_id\": \"3c0769d8-0dd9-465c-8bf3-f570605ba698\",\n+                \"hb_pb_smartyads\": \"0.00\",\n+                \"hb_cache_host\": \"{{ cache.host }}\",\n+                \"hb_cache_host_smartyads\": \"{{ cache.host }}\",\n+                \"hb_cache_path\": \"/cache\",\n+                \"hb_cache_path_smartyads\": \"/cache\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f8228aca6bba53985946cfd1f6d9247817094f"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3933, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}