{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMjAyOTA3", "number": 874, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDoyNTowM1rOE4GG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDo1NDozMFrOE4G1Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjU1ODAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/handler/VersionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDoyNTowM1rOHx0MnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDoyNTowM1rOHx0MnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzQ2OA==", "bodyText": "Do we really need helper method to the handler?\nMaybe for simplicity we can use plain constructor since no exceptions throwing.", "url": "https://github.com/prebid/prebid-server-java/pull/874#discussion_r521997468", "createdAt": "2020-11-12T10:25:03Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/handler/VersionHandler.java", "diffHunk": "@@ -24,43 +18,25 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(VersionHandler.class);\n \n-    private static final String UNDEFINED = \"undefined\";\n-\n     private final String revisionResponseBody;\n \n-    private VersionHandler(String revisionResponseBody) {\n+    public VersionHandler(String revisionResponseBody) {\n         this.revisionResponseBody = revisionResponseBody;\n     }\n \n-    public static VersionHandler create(String revisionFilePath, JacksonMapper mapper) {\n-        Revision revision;\n-        try {\n-            revision = mapper.mapper().readValue(ResourceUtil.readFromClasspath(revisionFilePath), Revision.class);\n-        } catch (IllegalArgumentException | IOException e) {\n-            logger.error(\"Was not able to read revision file {0}. Reason: {1}\", revisionFilePath, e.getMessage());\n-            revision = Revision.EMPTY;\n-        }\n-        return new VersionHandler(createRevisionResponseBody(revision, mapper));\n+    public static VersionHandler create(String version, String commitHash, JacksonMapper mapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b715b68059636f48af725b19d0f5e83fb5a57a34"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjY3NjI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/util/VersionInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDo1NDozMFrOHx1UPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDo1NDozMFrOHx1UPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxNTgwNQ==", "bodyText": "We can use lombok's @Getter for  version & commitHash fields.", "url": "https://github.com/prebid/prebid-server-java/pull/874#discussion_r522015805", "createdAt": "2020-11-12T10:54:30Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/util/VersionInfo.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.prebid.server.util;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.vertx.core.logging.Logger;\n+import io.vertx.core.logging.LoggerFactory;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.prebid.server.json.JacksonMapper;\n+\n+import java.io.IOException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class VersionInfo {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(VersionInfo.class);\n+    private static final String UNDEFINED = \"undefined\";\n+\n+    private final String version;\n+    private final String commitHash;\n+\n+    private VersionInfo(String version, String commitHash) {\n+        this.version = version;\n+        this.commitHash = commitHash;\n+    }\n+\n+    public static VersionInfo create(String revisionFilePath, JacksonMapper jacksonMapper) {\n+        Revision revision;\n+        try {\n+            revision = jacksonMapper.mapper().readValue(ResourceUtil.readFromClasspath(revisionFilePath),\n+                    Revision.class);\n+        } catch (IllegalArgumentException | IOException e) {\n+            logger.error(\"Was not able to read revision file {0}. Reason: {1}\", revisionFilePath, e.getMessage());\n+            return new VersionInfo(UNDEFINED, UNDEFINED);\n+        }\n+        final String pbsVersion = revision.getPbsVersion();\n+        final String commitHash = revision.getCommitHash();\n+        return new VersionInfo(\n+                pbsVersion != null ? extractVersion(pbsVersion) : UNDEFINED,\n+                commitHash != null ? commitHash : UNDEFINED);\n+    }\n+\n+    private static String extractVersion(String buildVersion) {\n+        final Pattern versionPattern = Pattern.compile(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d\");\n+        final Matcher versionMatcher = versionPattern.matcher(buildVersion);\n+\n+        return versionMatcher.lookingAt() ? versionMatcher.group() : null;\n+    }\n+\n+    public String getVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b715b68059636f48af725b19d0f5e83fb5a57a34"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4021, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}