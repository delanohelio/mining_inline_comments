{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MjEwMjUw", "number": 629, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo0OTozNlrODiuwZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToxNzozM1rODjfuBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzQ0MjMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/HttpBidderRequester.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo0OTozNlrOFuI9Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo0OTozNlrOFuI9Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTUzNA==", "bodyText": "Please extract separate method.\nAnd extract timeoutNotification.* into values.", "url": "https://github.com/prebid/prebid-server-java/pull/629#discussion_r383925534", "createdAt": "2020-02-25T14:49:36Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/HttpBidderRequester.java", "diffHunk": "@@ -128,6 +130,17 @@ public HttpBidderRequester(HttpClient httpClient,\n                         ? BidderError.Type.timeout\n                         : BidderError.Type.generic;\n \n+        if (errorType == BidderError.Type.timeout) {\n+            if (bidder instanceof TimeoutBidder) {\n+                final TimeoutBidder<T> timeoutBidder = (TimeoutBidder<T>) bidder;\n+                final HttpRequest<Void> timeoutNotification = timeoutBidder.makeTimeoutNotification(httpRequest);\n+                if (timeoutNotification != null) {\n+                    httpClient.request(timeoutNotification.getMethod(), timeoutNotification.getUri(),\n+                            timeoutNotification.getHeaders(), timeoutNotification.getBody(), NOTIFICATION_TIMEOUT_MS);\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3359190e16088230a8b0e77bd7b9695d4ac00b86"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzQ0NDQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/HttpBidderRequester.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1MDowNlrOFuI-Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1MDowNlrOFuI-Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTg2Mg==", "bodyText": "in Go they have 200*time.Millisecond", "url": "https://github.com/prebid/prebid-server-java/pull/629#discussion_r383925862", "createdAt": "2020-02-25T14:50:06Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/HttpBidderRequester.java", "diffHunk": "@@ -43,6 +43,7 @@\n public class HttpBidderRequester {\n \n     private static final Logger logger = LoggerFactory.getLogger(HttpBidderRequester.class);\n+    private static final int NOTIFICATION_TIMEOUT_MS = 5_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3359190e16088230a8b0e77bd7b9695d4ac00b86"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzQ0Nzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/TimeoutBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1MDo1NFrOFuJAcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1MDo1NFrOFuJAcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNjM4NQ==", "bodyText": "Add javaDoc please.", "url": "https://github.com/prebid/prebid-server-java/pull/629#discussion_r383926385", "createdAt": "2020-02-25T14:50:54Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/TimeoutBidder.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.prebid.server.bidder;\n+\n+import org.prebid.server.bidder.model.HttpRequest;\n+\n+public interface TimeoutBidder<T> extends Bidder<T> {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3359190e16088230a8b0e77bd7b9695d4ac00b86"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzQ1NjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/HttpBidderRequester.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1Mjo1MFrOFuJFhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1Mjo1MFrOFuJFhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNzY4Ng==", "bodyText": "Add tests for timeoutException please.", "url": "https://github.com/prebid/prebid-server-java/pull/629#discussion_r383927686", "createdAt": "2020-02-25T14:52:50Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/HttpBidderRequester.java", "diffHunk": "@@ -103,22 +104,23 @@ public HttpBidderRequester(HttpClient httpClient,\n     /**\n      * Makes an HTTP request and returns {@link Future} that will be eventually completed with success or error result.\n      */\n-    private <T> Future<HttpCall<T>> doRequest(HttpRequest<T> httpRequest, Timeout timeout) {\n+    private <T> Future<HttpCall<T>> doRequest(HttpRequest<T> httpRequest, Timeout timeout, Bidder<T> bidder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3359190e16088230a8b0e77bd7b9695d4ac00b86"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTQ2NDM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/HttpBidderRequester.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToxNzozM1rOFvVaVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToxNzozM1rOFvVaVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE3ODE5Ng==", "bodyText": "please add   if (bidder instanceof TimeoutBidder) { to this method, or perform\n  final TimeoutBidder<T> timeoutBidder = (TimeoutBidder<T>) bidder; near instanceOf and change method parameter from Bidder to TimeoutBidder.", "url": "https://github.com/prebid/prebid-server-java/pull/629#discussion_r385178196", "createdAt": "2020-02-27T15:17:33Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/HttpBidderRequester.java", "diffHunk": "@@ -132,19 +134,30 @@ public HttpBidderRequester(HttpClient httpClient,\n \n         if (errorType == BidderError.Type.timeout) {\n             if (bidder instanceof TimeoutBidder) {\n-                final TimeoutBidder<T> timeoutBidder = (TimeoutBidder<T>) bidder;\n-                final HttpRequest<Void> timeoutNotification = timeoutBidder.makeTimeoutNotification(httpRequest);\n-                if (timeoutNotification != null) {\n-                    httpClient.request(timeoutNotification.getMethod(), timeoutNotification.getUri(),\n-                            timeoutNotification.getHeaders(), timeoutNotification.getBody(), NOTIFICATION_TIMEOUT_MS);\n-                }\n+                doTimeoutNotificationRequest(httpRequest, bidder);\n             }\n         }\n \n         return Future.succeededFuture(\n                 HttpCall.failure(httpRequest, BidderError.create(exception.getMessage(), errorType)));\n     }\n \n+    /**\n+     *  doTimeoutNotificationRequest shoots on {@link TimeoutException} or {@link ConnectTimeoutException},\n+     *  if Bidder supports Timeout notifications\n+     */\n+    private <T> void doTimeoutNotificationRequest(HttpRequest<T> httpRequest, Bidder<T> bidder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9aae091134958fbd8c94705bd37d7c126e611aa"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4148, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}