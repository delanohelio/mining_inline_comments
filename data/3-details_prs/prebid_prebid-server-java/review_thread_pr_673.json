{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTU4NDE0", "number": 673, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo0MTo0OVrODydo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo1NzozN1rODyd9cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjQxMDAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo0MTo0OVrOGGhSVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo0MTo0OVrOGGhSVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MDAwNw==", "bodyText": "isEmpty", "url": "https://github.com/prebid/prebid-server-java/pull/673#discussion_r409490007", "createdAt": "2020-04-16T11:41:49Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.prebid.server.bidder.ucfunnel;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ucfunnel.ExtImpUcfunnel;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ucfunnel {@link Bidder} implementation.\n+ */\n+public class UcfunnelBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpUcfunnel>> UCFUNNEL_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpUcfunnel>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public UcfunnelBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (CollectionUtils.sizeIsEmpty(request.getImp())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69515a6b7434cacf0774eaace4f4274406ec3ed4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjQxMDc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo0MjowMVrOGGhSwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo0MjowMVrOGGhSwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MDExNA==", "bodyText": "use emptyWIthErrors", "url": "https://github.com/prebid/prebid-server-java/pull/673#discussion_r409490114", "createdAt": "2020-04-16T11:42:01Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.prebid.server.bidder.ucfunnel;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ucfunnel.ExtImpUcfunnel;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ucfunnel {@link Bidder} implementation.\n+ */\n+public class UcfunnelBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpUcfunnel>> UCFUNNEL_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpUcfunnel>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public UcfunnelBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (CollectionUtils.sizeIsEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69515a6b7434cacf0774eaace4f4274406ec3ed4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjQyNDQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo0NjowOVrOGGhbJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo0NjowOVrOGGhbJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MjI2Mg==", "bodyText": "use String.format", "url": "https://github.com/prebid/prebid-server-java/pull/673#discussion_r409492262", "createdAt": "2020-04-16T11:46:09Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.prebid.server.bidder.ucfunnel;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ucfunnel.ExtImpUcfunnel;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ucfunnel {@link Bidder} implementation.\n+ */\n+public class UcfunnelBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpUcfunnel>> UCFUNNEL_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpUcfunnel>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public UcfunnelBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (CollectionUtils.sizeIsEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String partnerId = null;\n+        try {\n+            final ExtImpUcfunnel extImpUcfunnel = parseImpExt(request.getImp().get(0));\n+            final String adUnitId = extImpUcfunnel.getAdunitid();\n+            partnerId = extImpUcfunnel.getPartnerid();\n+            if (StringUtils.isEmpty(partnerId) || StringUtils.isEmpty(adUnitId)) {\n+                errors.add(BidderError.badInput(\"No PartnerId or AdUnitId in the bid request\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(request);\n+        final String requestUrl = endpointUrl + \"/\" + HttpUtil.encodeUrl(partnerId) + \"/request\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69515a6b7434cacf0774eaace4f4274406ec3ed4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjQ2MjU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo1NzozN1rOGGhy2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo1NzozN1rOGGhy2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5ODMyOQ==", "bodyText": "bc of validateBidType (btw I'd prefer validatedBidType) you can receive BidderBid with empty bidTupe (null)", "url": "https://github.com/prebid/prebid-server-java/pull/673#discussion_r409498329", "createdAt": "2020-04-16T11:57:37Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.prebid.server.bidder.ucfunnel;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ucfunnel.ExtImpUcfunnel;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ucfunnel {@link Bidder} implementation.\n+ */\n+public class UcfunnelBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpUcfunnel>> UCFUNNEL_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpUcfunnel>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public UcfunnelBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (CollectionUtils.sizeIsEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String partnerId = null;\n+        try {\n+            final ExtImpUcfunnel extImpUcfunnel = parseImpExt(request.getImp().get(0));\n+            final String adUnitId = extImpUcfunnel.getAdunitid();\n+            partnerId = extImpUcfunnel.getPartnerid();\n+            if (StringUtils.isEmpty(partnerId) || StringUtils.isEmpty(adUnitId)) {\n+                errors.add(BidderError.badInput(\"No PartnerId or AdUnitId in the bid request\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(request);\n+        final String requestUrl = endpointUrl + \"/\" + HttpUtil.encodeUrl(partnerId) + \"/request\";\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .body(body)\n+                        .headers(HttpUtil.headers())\n+                        .payload(request)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpUcfunnel parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), UCFUNNEL_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad request\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = decodeBodyToBidResponse(httpCall);\n+            final List<BidderBid> bidderBids = bidResponse.getSeatbid().stream()\n+                    .filter(Objects::nonNull)\n+                    .map(SeatBid::getBid)\n+                    .filter(Objects::nonNull)\n+                    .flatMap(Collection::stream)\n+                    .map(bid -> BidderBid.of(bid, validateBidType(bid.getImpid(), bidRequest.getImp()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69515a6b7434cacf0774eaace4f4274406ec3ed4"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4202, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}