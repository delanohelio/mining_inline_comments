{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0ODY3MTAx", "number": 594, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo0NDowM1rODZievg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzoyNTozNVrODae-Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTA1OTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo0NDowM1rOFf-w4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo0NDowM1rOFf-w4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA3ODQ5OA==", "bodyText": "Change to CpmStarBidder", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369078498", "createdAt": "2020-01-21T15:44:03Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTA3OTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/cpmstar/ExtImpCPMStar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo0ODo0NFrOFf-8tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo0ODo0NFrOFf-8tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4MTUyNw==", "bodyText": "Please, change all *CPM* to *Cpm*", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369081527", "createdAt": "2020-01-21T15:48:44Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/cpmstar/ExtImpCPMStar.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.prebid.server.proto.openrtb.ext.request.cpmstar;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class ExtImpCPMStar {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTA5MzEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo1MjowOVrOFf_FMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo1MjowOVrOFf_FMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4MzY5OQ==", "bodyText": "Check RequestValidator#validate method. Unlike Go, we have some validation for all openrtb2 requests.\nThis check is redundant.", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369083699", "createdAt": "2020-01-21T15:52:09Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTExMDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo1NTo1N1rOFf_PNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo1NTo1N1rOFf_PNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4NjI2Mw==", "bodyText": "We don't have any obligation for usage of final keyword in for. (But I prefer keep it clean)", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369086263", "createdAt": "2020-01-21T15:55:57Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            throw new IllegalArgumentException(\"No Imps in Bid Request\");\n+        }\n+\n+        final List<Imp> validImpList = new ArrayList<>();\n+        for (final Imp imp : bidRequest.getImp()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTIyMTk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjoyNToyMVrOFgAVmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjoyNToyMVrOFgAVmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNDI4Mg==", "bodyText": "See Result.emptyWithError", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369104282", "createdAt": "2020-01-21T16:25:21Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTI1ODQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjozNDo0NFrOFgAsbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjozNDo0NFrOFgAsbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExMDEyNA==", "bodyText": "Json.mapper.convertValue can produce IllegalArgumentException.\nCatch it and throw PrebidException (see RhythmoneBidder#parseAndValidateImpExt) for example.", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369110124", "createdAt": "2020-01-21T16:34:44Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            throw new IllegalArgumentException(\"No Imps in Bid Request\");\n+        }\n+\n+        final List<Imp> validImpList = new ArrayList<>();\n+        for (final Imp imp : bidRequest.getImp()) {\n+            try {\n+                validImpList.add(parseAndValidateImp(imp));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return bidRequest.toBuilder().imp(validImpList).build();\n+    }\n+\n+    private Imp parseAndValidateImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"Only Banner and Video bid-types are supported at this time\");\n+        }\n+\n+        final ExtPrebid<?, ExtImpCPMStar> ext =\n+                Json.mapper.convertValue(imp.getExt(), CPM_STAR_EXT_TYPE_REFERENCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTI2NTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjozNjoyN1rOFgAweA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjozNjoyN1rOFgAweA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExMTE2MA==", "bodyText": "Please, change variable name to 'impExt'.\nNow this is not a problem, but then, a new field may be added with ext (extension)", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369111160", "createdAt": "2020-01-21T16:36:27Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            throw new IllegalArgumentException(\"No Imps in Bid Request\");\n+        }\n+\n+        final List<Imp> validImpList = new ArrayList<>();\n+        for (final Imp imp : bidRequest.getImp()) {\n+            try {\n+                validImpList.add(parseAndValidateImp(imp));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return bidRequest.toBuilder().imp(validImpList).build();\n+    }\n+\n+    private Imp parseAndValidateImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"Only Banner and Video bid-types are supported at this time\");\n+        }\n+\n+        final ExtPrebid<?, ExtImpCPMStar> ext =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTMwMzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo0Njo0NFrOFgBImQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo0Njo0NFrOFgBImQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExNzMzNw==", "bodyText": "They insert ext.bidder to ext. You just check for null and rewrite same data.", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369117337", "createdAt": "2020-01-21T16:46:44Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            throw new IllegalArgumentException(\"No Imps in Bid Request\");\n+        }\n+\n+        final List<Imp> validImpList = new ArrayList<>();\n+        for (final Imp imp : bidRequest.getImp()) {\n+            try {\n+                validImpList.add(parseAndValidateImp(imp));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return bidRequest.toBuilder().imp(validImpList).build();\n+    }\n+\n+    private Imp parseAndValidateImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"Only Banner and Video bid-types are supported at this time\");\n+        }\n+\n+        final ExtPrebid<?, ExtImpCPMStar> ext =\n+                Json.mapper.convertValue(imp.getExt(), CPM_STAR_EXT_TYPE_REFERENCE);\n+\n+        final ExtImpCPMStar bidder = ext.getBidder();\n+        if (bidder == null) {\n+            throw new PreBidException(String.format(\"imp id=%s: bidder.ext is null\", imp.getId()));\n+        }\n+        return imp.toBuilder().ext(Json.mapper.valueToTree(ext)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTMxMjgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo0OToyN1rOFgBOzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo0OToyN1rOFgBOzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExODkyNA==", "bodyText": "This method do too much.\nParse + Validate + CreateImp.\nI suggesting just returning ExtImpCPMStar and perform validation.", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369118924", "createdAt": "2020-01-21T16:49:27Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            throw new IllegalArgumentException(\"No Imps in Bid Request\");\n+        }\n+\n+        final List<Imp> validImpList = new ArrayList<>();\n+        for (final Imp imp : bidRequest.getImp()) {\n+            try {\n+                validImpList.add(parseAndValidateImp(imp));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return bidRequest.toBuilder().imp(validImpList).build();\n+    }\n+\n+    private Imp parseAndValidateImp(Imp imp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTMyMDU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1MTozM1rOFgBTqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1MTozM1rOFgBTqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMDE2OQ==", "bodyText": "This can be inlined in makeHttpRequests", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369120169", "createdAt": "2020-01-21T16:51:33Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            throw new IllegalArgumentException(\"No Imps in Bid Request\");\n+        }\n+\n+        final List<Imp> validImpList = new ArrayList<>();\n+        for (final Imp imp : bidRequest.getImp()) {\n+            try {\n+                validImpList.add(parseAndValidateImp(imp));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return bidRequest.toBuilder().imp(validImpList).build();\n+    }\n+\n+    private Imp parseAndValidateImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"Only Banner and Video bid-types are supported at this time\");\n+        }\n+\n+        final ExtPrebid<?, ExtImpCPMStar> ext =\n+                Json.mapper.convertValue(imp.getExt(), CPM_STAR_EXT_TYPE_REFERENCE);\n+\n+        final ExtImpCPMStar bidder = ext.getBidder();\n+        if (bidder == null) {\n+            throw new PreBidException(String.format(\"imp id=%s: bidder.ext is null\", imp.getId()));\n+        }\n+        return imp.toBuilder().ext(Json.mapper.valueToTree(ext)).build();\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(BidRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTM0ODY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1ODo1NFrOFgBk_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1ODo1NFrOFgBk_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyNDYwNw==", "bodyText": "Usually, they gather all exception, and pass mutable list through methods; this is the only way to preserve this logic.\nBut keep in mind, that it is bad approach.", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369124607", "createdAt": "2020-01-21T16:58:54Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTM1NDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzowMDoyNlrOFgBorA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzowMDoyNlrOFgBorA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyNTU0OA==", "bodyText": "In go, they do not collect all exception (but some bidder does). They return the first comer, so you can simply throw Excpetion and catch it above.", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369125548", "createdAt": "2020-01-21T17:00:26Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            throw new IllegalArgumentException(\"No Imps in Bid Request\");\n+        }\n+\n+        final List<Imp> validImpList = new ArrayList<>();\n+        for (final Imp imp : bidRequest.getImp()) {\n+            try {\n+                validImpList.add(parseAndValidateImp(imp));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTM4MTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzowODoyOFrOFgB5uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzowODoyOFrOFgB5uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyOTkxMg==", "bodyText": "Be consistent with Go messages and Exception Type.\nerrortypes.BadServerResponse{\n\t\t\t\t\tMessage: fmt.Sprintf(\"bid id='%s' could not find valid impid='%s'\", bid.ID, bid.ImpID),", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369129912", "createdAt": "2020-01-21T17:08:28Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            throw new IllegalArgumentException(\"No Imps in Bid Request\");\n+        }\n+\n+        final List<Imp> validImpList = new ArrayList<>();\n+        for (final Imp imp : bidRequest.getImp()) {\n+            try {\n+                validImpList.add(parseAndValidateImp(imp));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return bidRequest.toBuilder().imp(validImpList).build();\n+    }\n+\n+    private Imp parseAndValidateImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"Only Banner and Video bid-types are supported at this time\");\n+        }\n+\n+        final ExtPrebid<?, ExtImpCPMStar> ext =\n+                Json.mapper.convertValue(imp.getExt(), CPM_STAR_EXT_TYPE_REFERENCE);\n+\n+        final ExtImpCPMStar bidder = ext.getBidder();\n+        if (bidder == null) {\n+            throw new PreBidException(String.format(\"imp id=%s: bidder.ext is null\", imp.getId()));\n+        }\n+        return imp.toBuilder().ext(Json.mapper.valueToTree(ext)).build();\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(BidRequest request) {\n+\n+        final String body = Json.encode(request);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(request)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private Result<List<BidderBid>> extractBids(BidRequest request, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(request.getImp(), bid, errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private static BidderBid bidFromResponse(List<Imp> imps, Bid bid, List<BidderError> errors) {\n+        try {\n+            final BidType bidType = getBidType(bid.getImpid(), imps);\n+            return BidderBid.of(bid, bidType, DEFAULT_BID_CURRENCY);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQxMzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzoxODoyNFrOFgCNQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzoxODoyNFrOFgCNQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEzNDkxNQ==", "bodyText": "Rename to resolveBidType\nWe don't use get*", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369134915", "createdAt": "2020-01-21T17:18:24Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            throw new IllegalArgumentException(\"No Imps in Bid Request\");\n+        }\n+\n+        final List<Imp> validImpList = new ArrayList<>();\n+        for (final Imp imp : bidRequest.getImp()) {\n+            try {\n+                validImpList.add(parseAndValidateImp(imp));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return bidRequest.toBuilder().imp(validImpList).build();\n+    }\n+\n+    private Imp parseAndValidateImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"Only Banner and Video bid-types are supported at this time\");\n+        }\n+\n+        final ExtPrebid<?, ExtImpCPMStar> ext =\n+                Json.mapper.convertValue(imp.getExt(), CPM_STAR_EXT_TYPE_REFERENCE);\n+\n+        final ExtImpCPMStar bidder = ext.getBidder();\n+        if (bidder == null) {\n+            throw new PreBidException(String.format(\"imp id=%s: bidder.ext is null\", imp.getId()));\n+        }\n+        return imp.toBuilder().ext(Json.mapper.valueToTree(ext)).build();\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(BidRequest request) {\n+\n+        final String body = Json.encode(request);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(request)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private Result<List<BidderBid>> extractBids(BidRequest request, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(request.getImp(), bid, errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private static BidderBid bidFromResponse(List<Imp> imps, Bid bid, List<BidderError> errors) {\n+        try {\n+            final BidType bidType = getBidType(bid.getImpid(), imps);\n+            return BidderBid.of(bid, bidType, DEFAULT_BID_CURRENCY);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+            return null;\n+        }\n+    }\n+\n+    private static BidType getBidType(String impId, List<Imp> imps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQzNTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzoyNToyOFrOFgCbdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzoyNToyOFrOFgCbdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEzODU1MA==", "bodyText": "I know that we have similar logic in another bidders, but I would rewrite something like that\n    private Result<List<BidderBid>> extractBids(BidRequest request, BidResponse bidResponse) {\n        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n            return Result.of(Collections.emptyList(), Collections.emptyList());\n        }\n        final List<Bid> responseBids = bidResponse.getSeatbid().stream()\n                .filter(Objects::nonNull)\n                .map(SeatBid::getBid)\n                .filter(Objects::nonNull)\n                .flatMap(Collection::stream)\n                .collect(Collectors.toList());\n\n        final List<BidderError> errors = new ArrayList<>();\n        return Result.of(bidsFromResponse(request.getImp(), responseBids, errors), errors);\n    }\n\n    private static List<BidderBid> bidsFromResponse(List<Imp> imps, List<Bid> responseBids, List<BidderError> errors) {\n        final List<BidderBid> bidderBids = new ArrayList<>();\n        for (Bid responseBid : responseBids) {\n            try {\n                final BidType bidType = resolveBidType(responseBid.getImpid(), imps);\n                bidderBids.add(BidderBid.of(responseBid, bidType, DEFAULT_BID_CURRENCY));\n            } catch (PreBidException e) {\n                errors.add(BidderError.badInput(e.getMessage()));\n            }\n        }\n        return bidderBids;\n    }\n\nJust to get rid of return null (looks to me like GO \ud83d\udca9)", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369138550", "createdAt": "2020-01-21T17:25:28Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CPMStarBidder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class CPMStarBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public CPMStarBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        try {\n+            final BidRequest bidRequest = processRequest(request, errors);\n+\n+            return Result.of(Collections.singletonList(createSingleRequest(bidRequest)), errors);\n+        } catch (IllegalArgumentException e) {\n+            return Result.of(Collections.emptyList(),\n+                    Collections.singletonList(BidderError.badInput(e.getMessage()))\n+            );\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest, List<BidderError> errors) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            throw new IllegalArgumentException(\"No Imps in Bid Request\");\n+        }\n+\n+        final List<Imp> validImpList = new ArrayList<>();\n+        for (final Imp imp : bidRequest.getImp()) {\n+            try {\n+                validImpList.add(parseAndValidateImp(imp));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        return bidRequest.toBuilder().imp(validImpList).build();\n+    }\n+\n+    private Imp parseAndValidateImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"Only Banner and Video bid-types are supported at this time\");\n+        }\n+\n+        final ExtPrebid<?, ExtImpCPMStar> ext =\n+                Json.mapper.convertValue(imp.getExt(), CPM_STAR_EXT_TYPE_REFERENCE);\n+\n+        final ExtImpCPMStar bidder = ext.getBidder();\n+        if (bidder == null) {\n+            throw new PreBidException(String.format(\"imp id=%s: bidder.ext is null\", imp.getId()));\n+        }\n+        return imp.toBuilder().ext(Json.mapper.valueToTree(ext)).build();\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(BidRequest request) {\n+\n+        final String body = Json.encode(request);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(endpointUrl)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(request)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private Result<List<BidderBid>> extractBids(BidRequest request, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(request.getImp(), bid, errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private static BidderBid bidFromResponse(List<Imp> imps, Bid bid, List<BidderError> errors) {\n+        try {\n+            final BidType bidType = getBidType(bid.getImpid(), imps);\n+            return BidderBid.of(bid, bidType, DEFAULT_BID_CURRENCY);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQ0ODM0OnYy", "diffSide": "RIGHT", "path": "src/main/resources/static/bidder-params/cpmstar.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzoyOToyM1rOFgCjJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzoyOToyM1rOFgCjJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0MDUxNg==", "bodyText": "Forgot about required and keep description like in go please.\nYou can just copy paste whole schema.", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369140516", "createdAt": "2020-01-21T17:29:23Z", "author": {"login": "DGarbar"}, "path": "src/main/resources/static/bidder-params/cpmstar.json", "diffHunk": "@@ -0,0 +1,16 @@\n+{\n+  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+  \"title\": \"CPMStar Adapter Params\",\n+  \"description\": \"A schema which validates params accepted by CPMStar adapter\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"placementId\": {\n+      \"type\": \"integer\",\n+      \"description\": \"placementId\"\n+    },\n+    \"subpoolId\": {\n+      \"type\": \"integer\",\n+      \"description\": \"subpoolId\"\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQ1NTA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/cpmstar/ExtImpCPMStar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozMTo0MlrOFgCnYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozMTo0MlrOFgCnYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0MTYwMA==", "bodyText": "probably subPoolId is more clearer", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369141600", "createdAt": "2020-01-21T17:31:42Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/cpmstar/ExtImpCPMStar.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.prebid.server.proto.openrtb.ext.request.cpmstar;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class ExtImpCPMStar {\n+\n+    @JsonProperty(\"placementId\")\n+    Integer placementId;\n+\n+    @JsonProperty(\"subpoolId\")\n+    Integer subpoolId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQ1OTUxOnYy", "diffSide": "RIGHT", "path": "src/main/resources/bidder-config/cpmstar.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozMzoxM1rOFgCqCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozMzoxM1rOFgCqCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0MjI4Mw==", "bodyText": "They have redirect url.\nPlease see https://github.com/prebid/prebid-server/pull/1159/files#diff-3baf47c64847a8fb8aaa8cc2e088513bR499", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369142283", "createdAt": "2020-01-21T17:33:13Z", "author": {"login": "DGarbar"}, "path": "src/main/resources/bidder-config/cpmstar.yaml", "diffHunk": "@@ -0,0 +1,24 @@\n+adapters:\n+  cpmstar:\n+    enabled: false\n+    endpoint: https://server.cpmstar.com/openrtbbidrq.aspx\n+    pbs-enforces-gdpr: true\n+    modifying-vast-xml-allowed: true\n+    deprecated-names:\n+    aliases:\n+    meta-info:\n+      maintainer-email: prebid@cpmstar.com\n+      app-media-types:\n+        - banner\n+        - video\n+      site-media-types:\n+        - banner\n+        - video\n+      supported-vendors:\n+      vendor-id: 0\n+    usersync:\n+      url:\n+      redirect-url:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQ2NDU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozNTowMFrOFgCtGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozNTowMFrOFgCtGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0MzA2Nw==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369143067", "createdAt": "2020-01-21T17:35:00Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n+        Imp imp = givenImp(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQ2NzUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozNTo1NFrOFgCu6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozNTo1NFrOFgCu6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0MzUzMA==", "bodyText": "take out and name it appropriate to make more cleaner", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369143530", "createdAt": "2020-01-21T17:35:54Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQ3MDI0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozNjo1M1rOFgCwnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozNjo1M1rOFgCwnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0Mzk2Nw==", "bodyText": "You write two times to .banner", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369143967", "createdAt": "2020-01-21T17:36:53Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQ3NDExOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozODoxMlrOFgCzAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozODoxMlrOFgCzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0NDU3OA==", "bodyText": "pull .ext on second line", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369144578", "createdAt": "2020-01-21T17:38:12Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Only Banner and Video bid-types are supported at this time\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfNotSupportedBidType() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").audio(Audio.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnNativeBidIfNativeIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void extractTargetingShouldReturnEmptyMap() {\n+        assertThat(cpmStarBidder.extractTargeting(mapper.createObjectNode())).isEqualTo(emptyMap());\n+    }\n+\n+    private static BidRequest givenBidRequest(\n+            Function<BidRequest.BidRequestBuilder, BidRequest.BidRequestBuilder> bidRequestCustomizer,\n+            Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+\n+        return bidRequestCustomizer.apply(BidRequest.builder()\n+                .imp(singletonList(givenImp(impCustomizer))))\n+                .build();\n+    }\n+\n+    private static BidRequest givenBidRequest(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return givenBidRequest(identity(), impCustomizer);\n+    }\n+\n+    private static Imp givenImp(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return impCustomizer.apply(Imp.builder()\n+                .id(\"123\")\n+                .banner(Banner.builder().id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQ3OTE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozOTo1N1rOFgC2Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzozOTo1N1rOFgC2Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0NTM3MQ==", "bodyText": "take out  bidCustomizer.apply(Bid.builder()).build() to make it more readable", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369145371", "createdAt": "2020-01-21T17:39:57Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Only Banner and Video bid-types are supported at this time\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfNotSupportedBidType() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").audio(Audio.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnNativeBidIfNativeIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = HttpCall\n+                .success(null, HttpResponse.of(204, null, null), null);\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void extractTargetingShouldReturnEmptyMap() {\n+        assertThat(cpmStarBidder.extractTargeting(mapper.createObjectNode())).isEqualTo(emptyMap());\n+    }\n+\n+    private static BidRequest givenBidRequest(\n+            Function<BidRequest.BidRequestBuilder, BidRequest.BidRequestBuilder> bidRequestCustomizer,\n+            Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+\n+        return bidRequestCustomizer.apply(BidRequest.builder()\n+                .imp(singletonList(givenImp(impCustomizer))))\n+                .build();\n+    }\n+\n+    private static BidRequest givenBidRequest(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return givenBidRequest(identity(), impCustomizer);\n+    }\n+\n+    private static Imp givenImp(Function<Imp.ImpBuilder, Imp.ImpBuilder> impCustomizer) {\n+        return impCustomizer.apply(Imp.builder()\n+                .id(\"123\")\n+                .banner(Banner.builder().id(\"banner_id\").build()).ext(mapper.valueToTree(ExtPrebid.of(null,\n+                        ExtImpCPMStar.of(12, 123)))))\n+                .build();\n+    }\n+\n+    private static BidResponse givenBidResponse(Function<Bid.BidBuilder, Bid.BidBuilder> bidCustomizer) {\n+        return BidResponse.builder()\n+                .seatbid(singletonList(SeatBid.builder().bid(singletonList(bidCustomizer.apply(Bid.builder()).build()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQ4NTYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo0MjowOFrOFgC6Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo0MjowOFrOFgC6Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0NjQxMQ==", "bodyText": "In go, this test will fail.\nwe receive only first exception message", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369146411", "createdAt": "2020-01-21T17:42:08Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQ5MzU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo0NDozNlrOFgC-2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo0NDozNlrOFgC-2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0NzYwOQ==", "bodyText": "This test is redundant. (We don't have any logic which concerns width and height in bidder)", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369147609", "createdAt": "2020-01-21T17:44:36Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Only Banner and Video bid-types are supported at this time\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTQ5NTkxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo0NToyMFrOFgDAPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo0NToyMFrOFgDAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0Nzk2Ng==", "bodyText": "This test is redundant. (We don't have any logic which concerns this)", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369147966", "createdAt": "2020-01-21T17:45:20Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Only Banner and Video bid-types are supported at this time\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTUwOTA5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo0OTo1MVrOFgDIaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo0OTo1MVrOFgDIaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MDA1Ng==", "bodyText": "makeBidsShouldReturnErrorWhenBidHaveNotSupportedBidType", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369150056", "createdAt": "2020-01-21T17:49:51Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Only Banner and Video bid-types are supported at this time\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfNotSupportedBidType() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTUxMjg5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1MTowNVrOFgDKwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1MTowNVrOFgDKwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MDY1OA==", "bodyText": "makeBidsShouldReturnErrorWhenNoCorrespondingId", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369150658", "createdAt": "2020-01-21T17:51:05Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Only Banner and Video bid-types are supported at this time\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfNotSupportedBidType() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").audio(Audio.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTUxNzU2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1MjozMFrOFgDNdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1MjozMFrOFgDNdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MTM0OA==", "bodyText": "absolutely identical to makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369151348", "createdAt": "2020-01-21T17:52:30Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Only Banner and Video bid-types are supported at this time\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfNotSupportedBidType() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").audio(Audio.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTUyMjA5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1NDowM1rOFgDQNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1NDowM1rOFgDQNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MjA1NQ==", "bodyText": "absolutely identical tomakeBidsShouldReturnNativeBidIfNativeIsPresentInRequestImp\nChange one to test for Video, or multiple mismatch ids", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369152055", "createdAt": "2020-01-21T17:54:03Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CPMStarBidderTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.prebid.server.bidder.cpmstar;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCPMStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class CPMStarBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private CPMStarBidder cpmStarBidder;\n+\n+    @Before\n+    public void setUp() {\n+        cpmStarBidder = new CPMStarBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CPMStarBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"Only Banner and Video bid-types are supported at this time\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = cpmStarBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfNotSupportedBidType() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").audio(Audio.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = cpmStarBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 244}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTUzMzQ0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/it/CPMStarTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1NzoxOFrOFgDXBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1NzoxOFrOFgDXBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1Mzc5OA==", "bodyText": "Encode in Base64 corresponding bidder", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369153798", "createdAt": "2020-01-21T17:57:18Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/it/CPMStarTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.IOException;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class CPMStarTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromCPMStar() throws IOException, JSONException {\n+        // given\n+        // Cpmstar bid response\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/cpmstar-exchange\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/cpmstar/test-cpmstar-bid-request-1.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/cpmstar/test-cpmstar-bid-response-1.json\"))));\n+\n+        // pre-bid cache\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/cache\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/cpmstar/test-cache-cpmstar-request.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/cpmstar/test-cache-cpmstar-response.json\"))));\n+\n+        // when\n+        final Response response = given(spec)\n+                .header(\"Referer\", \"http://www.example.com\")\n+                .header(\"X-Forwarded-For\", \"193.168.244.1\")\n+                .header(\"User-Agent\", \"userAgent\")\n+                .header(\"Origin\", \"http://www.example.com\")\n+                .cookie(\"uids\", \"eyJ1aWRzIjp7ImdhbW9zaGkiOiJHTS1VSUQifX0=\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTUzNTc5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/it/CPMStarTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1ODowMlrOFgDYfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1ODowMlrOFgDYfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NDE3NQ==", "bodyText": "remove", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369154175", "createdAt": "2020-01-21T17:58:02Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/it/CPMStarTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.IOException;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class CPMStarTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromCPMStar() throws IOException, JSONException {\n+        // given\n+        // Cpmstar bid response\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/cpmstar-exchange\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/cpmstar/test-cpmstar-bid-request-1.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/cpmstar/test-cpmstar-bid-response-1.json\"))));\n+\n+        // pre-bid cache\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/cache\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/cpmstar/test-cache-cpmstar-request.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/cpmstar/test-cache-cpmstar-response.json\"))));\n+\n+        // when\n+        final Response response = given(spec)\n+                .header(\"Referer\", \"http://www.example.com\")\n+                .header(\"X-Forwarded-For\", \"193.168.244.1\")\n+                .header(\"User-Agent\", \"userAgent\")\n+                .header(\"Origin\", \"http://www.example.com\")\n+                .cookie(\"uids\", \"eyJ1aWRzIjp7ImdhbW9zaGkiOiJHTS1VSUQifX0=\")\n+                .body(jsonFrom(\"openrtb2/cpmstar/test-auction-cpmstar-request.json\"))\n+                .post(\"/openrtb2/auction\");\n+\n+        // then\n+        final String expectedAuctionResponse = openrtbAuctionResponseFrom(\n+                \"openrtb2/cpmstar/test-auction-cpmstar-response.json\",\n+                response, singletonList(\"cpmstar\"));\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTU0MDE4OnYy", "diffSide": "RIGHT", "path": "src/test/resources/org/prebid/server/it/openrtb2/cpmstar/test-cpmstar-bid-request-1.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1OToyOVrOFgDbJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1OToyOVrOFgDbJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NDg1NA==", "bodyText": "this line is skipped in go", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369154854", "createdAt": "2020-01-21T17:59:29Z", "author": {"login": "DGarbar"}, "path": "src/test/resources/org/prebid/server/it/openrtb2/cpmstar/test-cpmstar-bid-request-1.json", "diffHunk": "@@ -0,0 +1,119 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"impId001\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 300,\n+            \"h\": 250\n+          }\n+        ]\n+      },\n+      \"ext\": {\n+        \"bidder\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28d2ec973b807be4c20be09060db49551a3a59"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzY1NzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/cpmstar/CpmStarBidder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDo0NDoxMlrOFgXt8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDo0NDoxMlrOFgXt8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NzM0NQ==", "bodyText": "You don't need that variable now", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369487345", "createdAt": "2020-01-22T10:44:12Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/cpmstar/CpmStarBidder.java", "diffHunk": "@@ -32,76 +31,66 @@\n import java.util.Objects;\n import java.util.stream.Collectors;\n \n-public class CPMStarBidder implements Bidder<BidRequest> {\n+public class CpmStarBidder implements Bidder<BidRequest> {\n \n-    private static final TypeReference<ExtPrebid<?, ExtImpCPMStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n-            new TypeReference<ExtPrebid<?, ExtImpCPMStar>>() {\n+    private static final TypeReference<ExtPrebid<?, ExtImpCpmStar>> CPM_STAR_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpCpmStar>>() {\n             };\n \n     private static final String DEFAULT_BID_CURRENCY = \"USD\";\n \n     private final String endpointUrl;\n \n-    public CPMStarBidder(String endpointUrl) {\n+    public CpmStarBidder(String endpointUrl) {\n         this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n     }\n \n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96eb5e59675241e42389a574d83f4e16c5ae6357"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzY3ODc3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CpmStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDo1MToxOFrOFgX66g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDo1MToxOFrOFgX66g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5MDY2Ng==", "bodyText": "make givenImp(impBuilder -> impBuilder to have style consistency", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369490666", "createdAt": "2020-01-22T10:51:18Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CpmStarBidderTest.java", "diffHunk": "@@ -70,22 +70,22 @@ public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n     @Test\n     public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n         // given\n-        ExtPrebid<?, ExtImpCPMStar> ext = ExtPrebid.of(null, ExtImpCPMStar.of(12, 132));\n-        Imp imp = givenImp(\n+        final ExtPrebid<?, ExtImpCpmStar> ext = ExtPrebid.of(null, ExtImpCpmStar.of(12, 132));\n+        final Imp bannerImp = givenImp(\n                 impBuilder -> impBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96eb5e59675241e42389a574d83f4e16c5ae6357"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzY4NjUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CpmStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDo1NDowMFrOFgX_qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDo1NDowMFrOFgX_qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5MTg4MQ==", "bodyText": "Identical to makeBidsShouldReturnErrorWhenNoCorrespondingId", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369491881", "createdAt": "2020-01-22T10:54:00Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CpmStarBidderTest.java", "diffHunk": "@@ -204,12 +159,12 @@ public void makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId() throws JsonPro\n \n         // then\n         assertThat(result.getErrors()).hasSize(1)\n-                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+                .containsOnly(BidderError.badInput(\"bid id=null could not find valid impid=123\"));\n         assertThat(result.getValue()).isEmpty();\n     }\n \n     @Test\n-    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96eb5e59675241e42389a574d83f4e16c5ae6357"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzY5MDg2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/cpmstar/CpmStarBidderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDo1NTozMlrOFgYCRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDo1NTozMlrOFgYCRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5MjU0OA==", "bodyText": "Name method appropriately", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r369492548", "createdAt": "2020-01-22T10:55:32Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/cpmstar/CpmStarBidderTest.java", "diffHunk": "@@ -245,7 +200,7 @@ public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws\n         // given\n         final HttpCall<BidRequest> httpCall = givenHttpCall(\n                 BidRequest.builder()\n-                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n+                        .imp(singletonList(Imp.builder().id(\"123\").video(Video.builder().build()).build()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96eb5e59675241e42389a574d83f4e16c5ae6357"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDk2OTk4OnYy", "diffSide": "RIGHT", "path": "src/main/resources/bidder-config/cpmstar.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzoyNTozNVrOFhdiOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzoyNTozNVrOFhdiOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzMTIyNA==", "bodyText": "change to  https:\n#598", "url": "https://github.com/prebid/prebid-server-java/pull/594#discussion_r370631224", "createdAt": "2020-01-24T13:25:35Z", "author": {"login": "DGarbar"}, "path": "src/main/resources/bidder-config/cpmstar.yaml", "diffHunk": "@@ -0,0 +1,24 @@\n+adapters:\n+  cpmstar:\n+    enabled: false\n+    endpoint: https://server.cpmstar.com/openrtbbidrq.aspx\n+    pbs-enforces-gdpr: true\n+    modifying-vast-xml-allowed: true\n+    deprecated-names:\n+    aliases:\n+    meta-info:\n+      maintainer-email: prebid@cpmstar.com\n+      app-media-types:\n+        - banner\n+        - video\n+      site-media-types:\n+        - banner\n+        - video\n+      supported-vendors:\n+      vendor-id: 0\n+    usersync:\n+      url: //server.cpmstar.com/usersync.aspx?gdpr={{gdpr}}&consent={{gdpr_consent}}&us_privacy={{us_privacy}}&redirect=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d431c099beb84f6051a96f927fe71aaa2a353be"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4123, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}