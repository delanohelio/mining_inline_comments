{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMDAzNjc3", "number": 1044, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjowOToxMVrOFANUzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjoxODo1N1rOFANrHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzYyNjM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjowOToxMVrOH-YTcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjowOToxMVrOH-YTcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3MTk1Mw==", "bodyText": "Use camelCase", "url": "https://github.com/prebid/prebid-server-java/pull/1044#discussion_r535171953", "createdAt": "2020-12-03T12:09:11Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "diffHunk": "@@ -199,21 +201,55 @@ private static RequestLogInfo requestLogInfo(MetricName requestType, BidRequest\n                                                         BidderAliases aliases,\n                                                         Device device,\n                                                         Map<String, User> bidderToUser,\n-                                                        Privacy privacy) {\n+                                                        Privacy privacy,\n+                                                        MetricName requestType) {\n \n-        if (isCcpaEnforced(privacy.getCcpa(), account)) {\n+        if (isCcpaEnforced(privacy.getCcpa(), account, requestType)) {\n             return maskCcpa(extractCcpaEnforcedBidders(bidders, bidRequest, aliases), device, bidderToUser);\n         }\n \n         return Collections.emptyMap();\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = BooleanUtils.toBooleanDefaultIfNull(account.getEnforceCcpa(), ccpaEnforce);\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n+    private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        return shouldEnforceCcpa && ccpa.isEnforced();\n+    }\n+\n+    private Boolean isCCPAEnabled(Account account) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15c620a09f8159c03315c08816a772f4c269879"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzYzNzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjoxMDo1NVrOH-YbGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjoxMDo1NVrOH-YbGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3MzkxMw==", "bodyText": "redundant /n", "url": "https://github.com/prebid/prebid-server-java/pull/1044#discussion_r535173913", "createdAt": "2020-12-03T12:10:55Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "diffHunk": "@@ -199,21 +201,55 @@ private static RequestLogInfo requestLogInfo(MetricName requestType, BidRequest\n                                                         BidderAliases aliases,\n                                                         Device device,\n                                                         Map<String, User> bidderToUser,\n-                                                        Privacy privacy) {\n+                                                        Privacy privacy,\n+                                                        MetricName requestType) {\n \n-        if (isCcpaEnforced(privacy.getCcpa(), account)) {\n+        if (isCcpaEnforced(privacy.getCcpa(), account, requestType)) {\n             return maskCcpa(extractCcpaEnforcedBidders(bidders, bidRequest, aliases), device, bidderToUser);\n         }\n \n         return Collections.emptyMap();\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = BooleanUtils.toBooleanDefaultIfNull(account.getEnforceCcpa(), ccpaEnforce);\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n+    private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        return shouldEnforceCcpa && ccpa.isEnforced();\n+    }\n+\n+    private Boolean isCCPAEnabled(Account account) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+\n+        final Boolean accountCCPAEnabled =\n+                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15c620a09f8159c03315c08816a772f4c269879"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzYzODkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjoxMTowNVrOH-Yb3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjoxMTowNVrOH-Yb3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3NDEwOQ==", "bodyText": "redundant /n", "url": "https://github.com/prebid/prebid-server-java/pull/1044#discussion_r535174109", "createdAt": "2020-12-03T12:11:05Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "diffHunk": "@@ -199,21 +201,55 @@ private static RequestLogInfo requestLogInfo(MetricName requestType, BidRequest\n                                                         BidderAliases aliases,\n                                                         Device device,\n                                                         Map<String, User> bidderToUser,\n-                                                        Privacy privacy) {\n+                                                        Privacy privacy,\n+                                                        MetricName requestType) {\n \n-        if (isCcpaEnforced(privacy.getCcpa(), account)) {\n+        if (isCcpaEnforced(privacy.getCcpa(), account, requestType)) {\n             return maskCcpa(extractCcpaEnforcedBidders(bidders, bidRequest, aliases), device, bidderToUser);\n         }\n \n         return Collections.emptyMap();\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = BooleanUtils.toBooleanDefaultIfNull(account.getEnforceCcpa(), ccpaEnforce);\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n+    private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        return shouldEnforceCcpa && ccpa.isEnforced();\n+    }\n+\n+    private Boolean isCCPAEnabled(Account account) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15c620a09f8159c03315c08816a772f4c269879"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzY2MzU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjoxNTowOVrOH-YrzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjoxNTowOVrOH-YrzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3ODE4OQ==", "bodyText": "redundant /n", "url": "https://github.com/prebid/prebid-server-java/pull/1044#discussion_r535178189", "createdAt": "2020-12-03T12:15:09Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "diffHunk": "@@ -199,21 +201,55 @@ private static RequestLogInfo requestLogInfo(MetricName requestType, BidRequest\n                                                         BidderAliases aliases,\n                                                         Device device,\n                                                         Map<String, User> bidderToUser,\n-                                                        Privacy privacy) {\n+                                                        Privacy privacy,\n+                                                        MetricName requestType) {\n \n-        if (isCcpaEnforced(privacy.getCcpa(), account)) {\n+        if (isCcpaEnforced(privacy.getCcpa(), account, requestType)) {\n             return maskCcpa(extractCcpaEnforcedBidders(bidders, bidRequest, aliases), device, bidderToUser);\n         }\n \n         return Collections.emptyMap();\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = BooleanUtils.toBooleanDefaultIfNull(account.getEnforceCcpa(), ccpaEnforce);\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n+    private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        return shouldEnforceCcpa && ccpa.isEnforced();\n+    }\n+\n+    private Boolean isCCPAEnabled(Account account) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+\n+        final Boolean accountCCPAEnabled =\n+                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n+\n+        return ObjectUtils.firstNonNull(accountCCPAEnabled, account.getEnforceCcpa(), ccpaEnforce);\n+    }\n+\n+    private boolean isCCPAEnabled(Account account, MetricName requestType) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+\n+        final Boolean accountCCPAEnabled =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15c620a09f8159c03315c08816a772f4c269879"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzY4MzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjoxODo1N1rOH-Y4ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjoxODo1N1rOH-Y4ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4MTQ3MA==", "bodyText": "Missed  eturn ObjectUtils.firstNonNull(accountCCPAEnabled, account.getEnforceCcpa(), ccpaEnforce);", "url": "https://github.com/prebid/prebid-server-java/pull/1044#discussion_r535181470", "createdAt": "2020-12-03T12:18:57Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "diffHunk": "@@ -199,21 +201,55 @@ private static RequestLogInfo requestLogInfo(MetricName requestType, BidRequest\n                                                         BidderAliases aliases,\n                                                         Device device,\n                                                         Map<String, User> bidderToUser,\n-                                                        Privacy privacy) {\n+                                                        Privacy privacy,\n+                                                        MetricName requestType) {\n \n-        if (isCcpaEnforced(privacy.getCcpa(), account)) {\n+        if (isCcpaEnforced(privacy.getCcpa(), account, requestType)) {\n             return maskCcpa(extractCcpaEnforcedBidders(bidders, bidRequest, aliases), device, bidderToUser);\n         }\n \n         return Collections.emptyMap();\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = BooleanUtils.toBooleanDefaultIfNull(account.getEnforceCcpa(), ccpaEnforce);\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n+    private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        return shouldEnforceCcpa && ccpa.isEnforced();\n+    }\n+\n+    private Boolean isCCPAEnabled(Account account) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+\n+        final Boolean accountCCPAEnabled =\n+                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n+\n+        return ObjectUtils.firstNonNull(accountCCPAEnabled, account.getEnforceCcpa(), ccpaEnforce);\n+    }\n+\n+    private boolean isCCPAEnabled(Account account, MetricName requestType) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+\n+        final Boolean accountCCPAEnabled =\n+                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n+        if (requestType == null) {\n+            return ObjectUtils.firstNonNull(accountCCPAEnabled, ccpaEnforce);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15c620a09f8159c03315c08816a772f4c269879"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3840, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}