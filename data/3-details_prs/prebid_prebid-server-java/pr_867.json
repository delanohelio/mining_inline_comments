{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MDk2OTE3", "number": 867, "title": "Add AdtargetBidder and tests", "bodyText": "", "createdAt": "2020-08-14T17:24:05Z", "url": "https://github.com/prebid/prebid-server-java/pull/867", "merged": true, "mergeCommit": {"oid": "8984191b7075183780458c297011cdc759da168b"}, "closed": true, "closedAt": "2020-09-18T12:24:37Z", "author": {"login": "AndriyPavlyuk"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-39S7gH2gAyNDY4MDk2OTE3OjFlNDAzZmU1YTk2OTBlMjc3YmJkN2U0NjUxMTRiMGJjNWJmNTBmMTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKEo4UgH2gAyNDY4MDk2OTE3OmM5NzQ3MDU3NmZiYjM3ZDA5ZDVmYjdmNjA0N2NjOWVhMDU5OWQ1MGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/1e403fe5a9690e277bbd7e465114b0bc5bf50f11", "committedDate": "2020-08-14T17:21:07Z", "message": "Add AdtargetBidder and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwODE5OTE1", "url": "https://github.com/prebid/prebid-server-java/pull/867#pullrequestreview-480819915", "createdAt": "2020-09-02T13:29:43Z", "commit": {"oid": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoyOTo0NFrOHLvK4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzo0NToyNFrOHLv23g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2OTIxNg==", "bodyText": "Structure methods in workflow order", "url": "https://github.com/prebid/prebid-server-java/pull/867#discussion_r482069216", "createdAt": "2020-09-02T13:29:44Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package org.prebid.server.bidder.adtarget;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adtarget.proto.AdtargetImpExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.EncodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Adtarget {@link Bidder} implementation.\n+ */\n+public class AdtargetBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdtarget>> ADTARGET_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdtarget>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    private final MultiMap headers;\n+\n+    public AdtargetBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+        headers = HttpUtil.headers();\n+    }\n+\n+    /**\n+     * Creates POST HTTP requests which should be made to fetch bids.\n+     */\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final Result<Map<Integer, List<Imp>>> sourceIdToImpsResult = mapSourceIdToImp(request.getImp());\n+        return createHttpRequests(sourceIdToImpsResult.getValue(), sourceIdToImpsResult.getErrors(), request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3NTQyOQ==", "bodyText": "use\nsourceToImps.computeIfAbsent(sourceId, ignored -> new ArrayList<>()).add(updatedImp);", "url": "https://github.com/prebid/prebid-server-java/pull/867#discussion_r482075429", "createdAt": "2020-09-02T13:38:22Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package org.prebid.server.bidder.adtarget;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adtarget.proto.AdtargetImpExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.EncodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Adtarget {@link Bidder} implementation.\n+ */\n+public class AdtargetBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdtarget>> ADTARGET_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdtarget>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    private final MultiMap headers;\n+\n+    public AdtargetBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+        headers = HttpUtil.headers();\n+    }\n+\n+    /**\n+     * Creates POST HTTP requests which should be made to fetch bids.\n+     */\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final Result<Map<Integer, List<Imp>>> sourceIdToImpsResult = mapSourceIdToImp(request.getImp());\n+        return createHttpRequests(sourceIdToImpsResult.getValue(), sourceIdToImpsResult.getErrors(), request);\n+    }\n+\n+    /**\n+     * Converts response to {@link List} of {@link BidderBid}s with {@link List} of errors.\n+     */\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(bidResponse, bidRequest.getImp());\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> extractTargeting(ObjectNode ext) {\n+        return Collections.emptyMap();\n+    }\n+\n+    /**\n+     * Validates and creates {@link Map} where sourceId is used as key and {@link List} of {@link Imp} as value.\n+     */\n+    private Result<Map<Integer, List<Imp>>> mapSourceIdToImp(List<Imp> imps) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final Map<Integer, List<Imp>> sourceToImps = new HashMap<>();\n+        for (final Imp imp : imps) {\n+            final ExtImpAdtarget extImpAdtarget;\n+            try {\n+                validateImpression(imp);\n+                extImpAdtarget = parseImpAdtarget(imp);\n+            } catch (PreBidException ex) {\n+                errors.add(BidderError.badInput(ex.getMessage()));\n+                continue;\n+            }\n+            final Imp updatedImp = updateImp(imp, extImpAdtarget);\n+\n+            final Integer sourceId = extImpAdtarget.getSourceId();\n+            final List<Imp> sourceIdImps = sourceToImps.get(sourceId);\n+            if (sourceIdImps == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3NjQ5Mw==", "bodyText": "extract (inline) this method", "url": "https://github.com/prebid/prebid-server-java/pull/867#discussion_r482076493", "createdAt": "2020-09-02T13:39:55Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package org.prebid.server.bidder.adtarget;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adtarget.proto.AdtargetImpExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.EncodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Adtarget {@link Bidder} implementation.\n+ */\n+public class AdtargetBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdtarget>> ADTARGET_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdtarget>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    private final MultiMap headers;\n+\n+    public AdtargetBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+        headers = HttpUtil.headers();\n+    }\n+\n+    /**\n+     * Creates POST HTTP requests which should be made to fetch bids.\n+     */\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final Result<Map<Integer, List<Imp>>> sourceIdToImpsResult = mapSourceIdToImp(request.getImp());\n+        return createHttpRequests(sourceIdToImpsResult.getValue(), sourceIdToImpsResult.getErrors(), request);\n+    }\n+\n+    /**\n+     * Converts response to {@link List} of {@link BidderBid}s with {@link List} of errors.\n+     */\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(bidResponse, bidRequest.getImp());\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> extractTargeting(ObjectNode ext) {\n+        return Collections.emptyMap();\n+    }\n+\n+    /**\n+     * Validates and creates {@link Map} where sourceId is used as key and {@link List} of {@link Imp} as value.\n+     */\n+    private Result<Map<Integer, List<Imp>>> mapSourceIdToImp(List<Imp> imps) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final Map<Integer, List<Imp>> sourceToImps = new HashMap<>();\n+        for (final Imp imp : imps) {\n+            final ExtImpAdtarget extImpAdtarget;\n+            try {\n+                validateImpression(imp);\n+                extImpAdtarget = parseImpAdtarget(imp);\n+            } catch (PreBidException ex) {\n+                errors.add(BidderError.badInput(ex.getMessage()));\n+                continue;\n+            }\n+            final Imp updatedImp = updateImp(imp, extImpAdtarget);\n+\n+            final Integer sourceId = extImpAdtarget.getSourceId();\n+            final List<Imp> sourceIdImps = sourceToImps.get(sourceId);\n+            if (sourceIdImps == null) {\n+                sourceToImps.put(sourceId, new ArrayList<>(Collections.singleton(updatedImp)));\n+            } else {\n+                sourceIdImps.add(updatedImp);\n+            }\n+        }\n+        return Result.of(sourceToImps, errors);\n+    }\n+\n+    /**\n+     * Creates {@link HttpRequest}s. One for each source id. Adds source id as url parameter\n+     */\n+    private Result<List<HttpRequest<BidRequest>>> createHttpRequests(Map<Integer, List<Imp>> sourceToImps,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3NjY0MQ==", "bodyText": "don't use final for for", "url": "https://github.com/prebid/prebid-server-java/pull/867#discussion_r482076641", "createdAt": "2020-09-02T13:40:08Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package org.prebid.server.bidder.adtarget;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adtarget.proto.AdtargetImpExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.EncodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Adtarget {@link Bidder} implementation.\n+ */\n+public class AdtargetBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdtarget>> ADTARGET_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdtarget>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    private final MultiMap headers;\n+\n+    public AdtargetBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+        headers = HttpUtil.headers();\n+    }\n+\n+    /**\n+     * Creates POST HTTP requests which should be made to fetch bids.\n+     */\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final Result<Map<Integer, List<Imp>>> sourceIdToImpsResult = mapSourceIdToImp(request.getImp());\n+        return createHttpRequests(sourceIdToImpsResult.getValue(), sourceIdToImpsResult.getErrors(), request);\n+    }\n+\n+    /**\n+     * Converts response to {@link List} of {@link BidderBid}s with {@link List} of errors.\n+     */\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(bidResponse, bidRequest.getImp());\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> extractTargeting(ObjectNode ext) {\n+        return Collections.emptyMap();\n+    }\n+\n+    /**\n+     * Validates and creates {@link Map} where sourceId is used as key and {@link List} of {@link Imp} as value.\n+     */\n+    private Result<Map<Integer, List<Imp>>> mapSourceIdToImp(List<Imp> imps) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final Map<Integer, List<Imp>> sourceToImps = new HashMap<>();\n+        for (final Imp imp : imps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4MDQ3OA==", "bodyText": "You can remove this catch", "url": "https://github.com/prebid/prebid-server-java/pull/867#discussion_r482080478", "createdAt": "2020-09-02T13:45:24Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package org.prebid.server.bidder.adtarget;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adtarget.proto.AdtargetImpExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.EncodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Adtarget {@link Bidder} implementation.\n+ */\n+public class AdtargetBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdtarget>> ADTARGET_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdtarget>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    private final MultiMap headers;\n+\n+    public AdtargetBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+        headers = HttpUtil.headers();\n+    }\n+\n+    /**\n+     * Creates POST HTTP requests which should be made to fetch bids.\n+     */\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final Result<Map<Integer, List<Imp>>> sourceIdToImpsResult = mapSourceIdToImp(request.getImp());\n+        return createHttpRequests(sourceIdToImpsResult.getValue(), sourceIdToImpsResult.getErrors(), request);\n+    }\n+\n+    /**\n+     * Converts response to {@link List} of {@link BidderBid}s with {@link List} of errors.\n+     */\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(bidResponse, bidRequest.getImp());\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> extractTargeting(ObjectNode ext) {\n+        return Collections.emptyMap();\n+    }\n+\n+    /**\n+     * Validates and creates {@link Map} where sourceId is used as key and {@link List} of {@link Imp} as value.\n+     */\n+    private Result<Map<Integer, List<Imp>>> mapSourceIdToImp(List<Imp> imps) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final Map<Integer, List<Imp>> sourceToImps = new HashMap<>();\n+        for (final Imp imp : imps) {\n+            final ExtImpAdtarget extImpAdtarget;\n+            try {\n+                validateImpression(imp);\n+                extImpAdtarget = parseImpAdtarget(imp);\n+            } catch (PreBidException ex) {\n+                errors.add(BidderError.badInput(ex.getMessage()));\n+                continue;\n+            }\n+            final Imp updatedImp = updateImp(imp, extImpAdtarget);\n+\n+            final Integer sourceId = extImpAdtarget.getSourceId();\n+            final List<Imp> sourceIdImps = sourceToImps.get(sourceId);\n+            if (sourceIdImps == null) {\n+                sourceToImps.put(sourceId, new ArrayList<>(Collections.singleton(updatedImp)));\n+            } else {\n+                sourceIdImps.add(updatedImp);\n+            }\n+        }\n+        return Result.of(sourceToImps, errors);\n+    }\n+\n+    /**\n+     * Creates {@link HttpRequest}s. One for each source id. Adds source id as url parameter\n+     */\n+    private Result<List<HttpRequest<BidRequest>>> createHttpRequests(Map<Integer, List<Imp>> sourceToImps,\n+                                                                     List<BidderError> errors, BidRequest request) {\n+        final List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+        for (Map.Entry<Integer, List<Imp>> sourceIdToImps : sourceToImps.entrySet()) {\n+            final String url = String.format(\"%s?aid=%d\", endpointUrl, sourceIdToImps.getKey());\n+            final BidRequest bidRequest = request.toBuilder().imp(sourceIdToImps.getValue()).build();\n+            final String bidRequestBody;\n+            try {\n+                bidRequestBody = mapper.encode(bidRequest);\n+            } catch (EncodeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c7ac8afc328c15596191d19269e70e7bf07653", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/75c7ac8afc328c15596191d19269e70e7bf07653", "committedDate": "2020-09-03T08:39:50Z", "message": "Refactoring methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f9555dd3c939f0569021d00703c8d2f85df3589", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/8f9555dd3c939f0569021d00703c8d2f85df3589", "committedDate": "2020-09-03T08:54:12Z", "message": "Change defining elements of sourceToImps List"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNjY2NTc3", "url": "https://github.com/prebid/prebid-server-java/pull/867#pullrequestreview-481666577", "createdAt": "2020-09-03T09:34:39Z", "commit": {"oid": "8f9555dd3c939f0569021d00703c8d2f85df3589"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c97470576fbb37d09d5fb7f6047cc9ea0599d50b", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/c97470576fbb37d09d5fb7f6047cc9ea0599d50b", "committedDate": "2020-09-18T12:20:45Z", "message": "Merge branch 'master' into add-adtarget-bidder\n\n# Conflicts:\n#\tsrc/test/resources/org/prebid/server/it/test-application.properties"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3135, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}