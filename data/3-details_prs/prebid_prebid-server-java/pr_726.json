{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwODgwMTc1", "number": 726, "title": "Add TelariaBidder implementation and tests", "bodyText": "Add TelariaBidder implementation and tests to keep up with Go version.", "createdAt": "2020-05-20T16:46:38Z", "url": "https://github.com/prebid/prebid-server-java/pull/726", "merged": true, "mergeCommit": {"oid": "fbeae4e3887c2926546fefd0a6db583368faf64f"}, "closed": true, "closedAt": "2020-07-06T11:56:22Z", "author": {"login": "AndriyPavlyuk"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjL5DJAH2gAyNDIwODgwMTc1Ojk0ZTQ0MTJhNDhmZjkyOGVhNWJkY2YzZDBiOWFhNjk3N2RiNWE4NWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyNg7vAH2gAyNDIwODgwMTc1OjE4M2E4MGM1YmQ2NTMyNTQyZDBhNzcxMTVkZDVjMzFlYzFlMWE5MmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "94e4412a48ff928ea5bdcf3d0b9aa6977db5a85a", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/94e4412a48ff928ea5bdcf3d0b9aa6977db5a85a", "committedDate": "2020-05-20T16:44:42Z", "message": "Add TelariaBidder implementation and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTEzMTIw", "url": "https://github.com/prebid/prebid-server-java/pull/726#pullrequestreview-416913120", "createdAt": "2020-05-22T13:34:05Z", "commit": {"oid": "94e4412a48ff928ea5bdcf3d0b9aa6977db5a85a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzozNDowNVrOGZXPfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo0MTo1OFrOGZZsfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0ODM4Mg==", "bodyText": "202", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r429248382", "createdAt": "2020-05-22T13:34:05Z", "author": {"login": "DGarbar"}, "path": "src/main/resources/bidder-config/telaria.yaml", "diffHunk": "@@ -0,0 +1,22 @@\n+adapters:\n+  telaria:\n+    enabled: false\n+    endpoint: https://ads.tremorhub.com/ad/rtb/prebid\n+    pbs-enforces-gdpr: true\n+    modifying-vast-xml-allowed: true\n+    deprecated-names:\n+    aliases:\n+    meta-info:\n+      maintainer-email: github@telaria.com\n+      app-media-types:\n+        - video\n+      site-media-types:\n+        - video\n+      supported-vendors:\n+      vendor-id: 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e4412a48ff928ea5bdcf3d0b9aa6977db5a85a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1MTIxMA==", "bodyText": "They also validates for bidders, and checks that at least one has video", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r429251210", "createdAt": "2020-05-22T13:39:12Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/telaria/TelariaBidder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package org.prebid.server.bidder.telaria;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpOutTelaria;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpTelaria;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Objects;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Collections;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class TelariaBidder implements Bidder<BidRequest> {\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final TypeReference<ExtPrebid<?, ExtImpTelaria>> TELARIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTelaria>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public TelariaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"Telaria: Missing Imp Object\"));\n+        }\n+        try {\n+            validateImp(bidRequest.getImp());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String publisherId = getPublisherId(bidRequest);\n+        String seatCode = null;\n+        final BidRequest.BidRequestBuilder requestBuilder = bidRequest.toBuilder();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpTelaria extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getSeatCode())) {\n+                    throw new PreBidException(\"Telaria: Seat Code required\");\n+                }\n+                seatCode = extImp.getSeatCode();\n+                requestBuilder\n+                        .imp(Collections.singletonList(imp.toBuilder()\n+                                .tagid(extImp.getAdCode())\n+                                .ext(mapper.mapper().valueToTree(ExtImpOutTelaria.of(imp.getTagid(), publisherId)))\n+                                .build()));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (bidRequest.getSite() != null) {\n+            modifySite(seatCode, bidRequest, requestBuilder);\n+        } else if (bidRequest.getApp() != null) {\n+            modifyApp(seatCode, bidRequest, requestBuilder);\n+        }\n+\n+        final BidRequest outgoingRequest = requestBuilder.build();\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers(bidRequest))\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private void validateImp(List<Imp> imps) {\n+        for (Imp imp : imps) {\n+            if (imp.getVideo() == null) {\n+                throw new PreBidException(\"Telaria: Only Supports Video\");\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e4412a48ff928ea5bdcf3d0b9aa6977db5a85a"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1MzAzMA==", "bodyText": "They use break after any error. SO we can extract this into a separate method and remove list of errors. (method can return prepared imps)", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r429253030", "createdAt": "2020-05-22T13:42:23Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/telaria/TelariaBidder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package org.prebid.server.bidder.telaria;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpOutTelaria;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpTelaria;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Objects;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Collections;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class TelariaBidder implements Bidder<BidRequest> {\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final TypeReference<ExtPrebid<?, ExtImpTelaria>> TELARIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTelaria>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public TelariaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"Telaria: Missing Imp Object\"));\n+        }\n+        try {\n+            validateImp(bidRequest.getImp());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String publisherId = getPublisherId(bidRequest);\n+        String seatCode = null;\n+        final BidRequest.BidRequestBuilder requestBuilder = bidRequest.toBuilder();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpTelaria extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getSeatCode())) {\n+                    throw new PreBidException(\"Telaria: Seat Code required\");\n+                }\n+                seatCode = extImp.getSeatCode();\n+                requestBuilder\n+                        .imp(Collections.singletonList(imp.toBuilder()\n+                                .tagid(extImp.getAdCode())\n+                                .ext(mapper.mapper().valueToTree(ExtImpOutTelaria.of(imp.getTagid(), publisherId)))\n+                                .build()));\n+            } catch (PreBidException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e4412a48ff928ea5bdcf3d0b9aa6977db5a85a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1NDM3NA==", "bodyText": "You will override imps for each iteration. Bug", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r429254374", "createdAt": "2020-05-22T13:44:38Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/telaria/TelariaBidder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package org.prebid.server.bidder.telaria;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpOutTelaria;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpTelaria;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Objects;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Collections;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class TelariaBidder implements Bidder<BidRequest> {\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final TypeReference<ExtPrebid<?, ExtImpTelaria>> TELARIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTelaria>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public TelariaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"Telaria: Missing Imp Object\"));\n+        }\n+        try {\n+            validateImp(bidRequest.getImp());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String publisherId = getPublisherId(bidRequest);\n+        String seatCode = null;\n+        final BidRequest.BidRequestBuilder requestBuilder = bidRequest.toBuilder();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpTelaria extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getSeatCode())) {\n+                    throw new PreBidException(\"Telaria: Seat Code required\");\n+                }\n+                seatCode = extImp.getSeatCode();\n+                requestBuilder\n+                        .imp(Collections.singletonList(imp.toBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e4412a48ff928ea5bdcf3d0b9aa6977db5a85a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NDM3NA==", "bodyText": "try to avoid passing builders into methods.\nThis method can be reverted and return site or app", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r429274374", "createdAt": "2020-05-22T14:18:39Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/telaria/TelariaBidder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package org.prebid.server.bidder.telaria;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpOutTelaria;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpTelaria;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Objects;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Collections;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class TelariaBidder implements Bidder<BidRequest> {\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final TypeReference<ExtPrebid<?, ExtImpTelaria>> TELARIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTelaria>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public TelariaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"Telaria: Missing Imp Object\"));\n+        }\n+        try {\n+            validateImp(bidRequest.getImp());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String publisherId = getPublisherId(bidRequest);\n+        String seatCode = null;\n+        final BidRequest.BidRequestBuilder requestBuilder = bidRequest.toBuilder();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpTelaria extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getSeatCode())) {\n+                    throw new PreBidException(\"Telaria: Seat Code required\");\n+                }\n+                seatCode = extImp.getSeatCode();\n+                requestBuilder\n+                        .imp(Collections.singletonList(imp.toBuilder()\n+                                .tagid(extImp.getAdCode())\n+                                .ext(mapper.mapper().valueToTree(ExtImpOutTelaria.of(imp.getTagid(), publisherId)))\n+                                .build()));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (bidRequest.getSite() != null) {\n+            modifySite(seatCode, bidRequest, requestBuilder);\n+        } else if (bidRequest.getApp() != null) {\n+            modifyApp(seatCode, bidRequest, requestBuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e4412a48ff928ea5bdcf3d0b9aa6977db5a85a"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NTcwOA==", "bodyText": "Accept-Encoding\", \"gzip\"", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r429275708", "createdAt": "2020-05-22T14:20:52Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/telaria/TelariaBidder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package org.prebid.server.bidder.telaria;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpOutTelaria;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpTelaria;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Objects;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Collections;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class TelariaBidder implements Bidder<BidRequest> {\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final TypeReference<ExtPrebid<?, ExtImpTelaria>> TELARIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTelaria>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public TelariaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"Telaria: Missing Imp Object\"));\n+        }\n+        try {\n+            validateImp(bidRequest.getImp());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String publisherId = getPublisherId(bidRequest);\n+        String seatCode = null;\n+        final BidRequest.BidRequestBuilder requestBuilder = bidRequest.toBuilder();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpTelaria extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getSeatCode())) {\n+                    throw new PreBidException(\"Telaria: Seat Code required\");\n+                }\n+                seatCode = extImp.getSeatCode();\n+                requestBuilder\n+                        .imp(Collections.singletonList(imp.toBuilder()\n+                                .tagid(extImp.getAdCode())\n+                                .ext(mapper.mapper().valueToTree(ExtImpOutTelaria.of(imp.getTagid(), publisherId)))\n+                                .build()));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (bidRequest.getSite() != null) {\n+            modifySite(seatCode, bidRequest, requestBuilder);\n+        } else if (bidRequest.getApp() != null) {\n+            modifyApp(seatCode, bidRequest, requestBuilder);\n+        }\n+\n+        final BidRequest outgoingRequest = requestBuilder.build();\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers(bidRequest))\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private void validateImp(List<Imp> imps) {\n+        for (Imp imp : imps) {\n+            if (imp.getVideo() == null) {\n+                throw new PreBidException(\"Telaria: Only Supports Video\");\n+            }\n+        }\n+    }\n+\n+    private String getPublisherId(BidRequest bidRequest) {\n+        if (bidRequest.getSite() != null && bidRequest.getSite().getPublisher() != null) {\n+            return bidRequest.getSite().getPublisher().getId();\n+        } else if (bidRequest.getApp() != null && bidRequest.getApp().getPublisher() != null) {\n+            return bidRequest.getApp().getPublisher().getId();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtImpTelaria parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TELARIA_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void modifySite(String seatCode, BidRequest bidRequest,\n+                                   BidRequest.BidRequestBuilder bidRequestBuilder) {\n+        final Site site = bidRequest.getSite();\n+        if (site.getPublisher() != null) {\n+            final Publisher modifiedPublisher = site.getPublisher().toBuilder().id(seatCode).build();\n+            bidRequestBuilder.site(site.toBuilder().publisher(modifiedPublisher).build());\n+        }\n+    }\n+\n+    private static void modifyApp(String seatCode, BidRequest bidRequest,\n+                                  BidRequest.BidRequestBuilder bidRequestBuilder) {\n+        final App app = bidRequest.getApp();\n+        if (app.getPublisher() != null) {\n+            final Publisher modifiedPublisher = app.getPublisher().toBuilder().id(seatCode).build();\n+            bidRequestBuilder.app(app.toBuilder().publisher(modifiedPublisher).build());\n+        }\n+    }\n+\n+    private MultiMap headers(BidRequest bidRequest) {\n+        final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e4412a48ff928ea5bdcf3d0b9aa6977db5a85a"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4ODU3NQ==", "bodyText": "Are you sure that this will work for gzip ?", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r429288575", "createdAt": "2020-05-22T14:41:58Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/telaria/TelariaBidder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+package org.prebid.server.bidder.telaria;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpOutTelaria;\n+import org.prebid.server.proto.openrtb.ext.request.telaria.ExtImpTelaria;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Objects;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Collections;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class TelariaBidder implements Bidder<BidRequest> {\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final TypeReference<ExtPrebid<?, ExtImpTelaria>> TELARIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpTelaria>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public TelariaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"Telaria: Missing Imp Object\"));\n+        }\n+        try {\n+            validateImp(bidRequest.getImp());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String publisherId = getPublisherId(bidRequest);\n+        String seatCode = null;\n+        final BidRequest.BidRequestBuilder requestBuilder = bidRequest.toBuilder();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpTelaria extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getSeatCode())) {\n+                    throw new PreBidException(\"Telaria: Seat Code required\");\n+                }\n+                seatCode = extImp.getSeatCode();\n+                requestBuilder\n+                        .imp(Collections.singletonList(imp.toBuilder()\n+                                .tagid(extImp.getAdCode())\n+                                .ext(mapper.mapper().valueToTree(ExtImpOutTelaria.of(imp.getTagid(), publisherId)))\n+                                .build()));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (bidRequest.getSite() != null) {\n+            modifySite(seatCode, bidRequest, requestBuilder);\n+        } else if (bidRequest.getApp() != null) {\n+            modifyApp(seatCode, bidRequest, requestBuilder);\n+        }\n+\n+        final BidRequest outgoingRequest = requestBuilder.build();\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers(bidRequest))\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private void validateImp(List<Imp> imps) {\n+        for (Imp imp : imps) {\n+            if (imp.getVideo() == null) {\n+                throw new PreBidException(\"Telaria: Only Supports Video\");\n+            }\n+        }\n+    }\n+\n+    private String getPublisherId(BidRequest bidRequest) {\n+        if (bidRequest.getSite() != null && bidRequest.getSite().getPublisher() != null) {\n+            return bidRequest.getSite().getPublisher().getId();\n+        } else if (bidRequest.getApp() != null && bidRequest.getApp().getPublisher() != null) {\n+            return bidRequest.getApp().getPublisher().getId();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtImpTelaria parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), TELARIA_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private static void modifySite(String seatCode, BidRequest bidRequest,\n+                                   BidRequest.BidRequestBuilder bidRequestBuilder) {\n+        final Site site = bidRequest.getSite();\n+        if (site.getPublisher() != null) {\n+            final Publisher modifiedPublisher = site.getPublisher().toBuilder().id(seatCode).build();\n+            bidRequestBuilder.site(site.toBuilder().publisher(modifiedPublisher).build());\n+        }\n+    }\n+\n+    private static void modifyApp(String seatCode, BidRequest bidRequest,\n+                                  BidRequest.BidRequestBuilder bidRequestBuilder) {\n+        final App app = bidRequest.getApp();\n+        if (app.getPublisher() != null) {\n+            final Publisher modifiedPublisher = app.getPublisher().toBuilder().id(seatCode).build();\n+            bidRequestBuilder.app(app.toBuilder().publisher(modifiedPublisher).build());\n+        }\n+    }\n+\n+    private MultiMap headers(BidRequest bidRequest) {\n+        final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+        final Device device = bidRequest.getDevice();\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER, device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER, device.getIp());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.ACCEPT_LANGUAGE_HEADER, device.getLanguage());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.DNT_HEADER, Objects.toString(device.getDnt(), null));\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        try {\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), getBidResponse(httpCall.getResponse())),\n+                    Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private static List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse == null || bidResponse.getSeatbid() == null\n+                ? Collections.emptyList()\n+                : bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private BidResponse getBidResponse(HttpResponse response) {\n+        if (\"gzip\".equals(response.getHeaders().get(\"Content-Encoding\"))) {\n+            response.getHeaders().remove(\"Content-Encoding\");\n+            return mapper.decodeValue(Buffer.buffer(response.getBody()), BidResponse.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e4412a48ff928ea5bdcf3d0b9aa6977db5a85a"}, "originalPosition": 193}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "879b89658625a3e7cf18e6ca5912df3027c807fa", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/879b89658625a3e7cf18e6ca5912df3027c807fa", "committedDate": "2020-05-26T18:54:11Z", "message": "Refactoring and fix unzip file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMjExNTA5", "url": "https://github.com/prebid/prebid-server-java/pull/726#pullrequestreview-420211509", "createdAt": "2020-05-28T15:09:33Z", "commit": {"oid": "879b89658625a3e7cf18e6ca5912df3027c807fa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTowOTozNFrOGb52FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxMzoxMFrOGb6Abw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMjQ2OA==", "bodyText": "You are still overriding imps.\nJust extract this method and return Collection of imps and then set it in the request", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r431912468", "createdAt": "2020-05-28T15:09:34Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/telaria/TelariaBidder.java", "diffHunk": "@@ -72,24 +74,18 @@ public TelariaBidder(String endpointUrl, JacksonMapper mapper) {\n         for (Imp imp : bidRequest.getImp()) {\n             try {\n                 final ExtImpTelaria extImp = parseImpExt(imp);\n-                if (StringUtils.isBlank(extImp.getSeatCode())) {\n-                    throw new PreBidException(\"Telaria: Seat Code required\");\n-                }\n                 seatCode = extImp.getSeatCode();\n-                requestBuilder\n-                        .imp(Collections.singletonList(imp.toBuilder()\n-                                .tagid(extImp.getAdCode())\n-                                .ext(mapper.mapper().valueToTree(ExtImpOutTelaria.of(imp.getTagid(), publisherId)))\n-                                .build()));\n+                Imp updateImp = updateImp(imp, extImp, publisherId);\n+                requestBuilder.imp(Collections.singletonList(updateImp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879b89658625a3e7cf18e6ca5912df3027c807fa"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNTAzOQ==", "bodyText": "You need to create Publisher despite of his absence.", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r431915039", "createdAt": "2020-05-28T15:13:03Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/telaria/TelariaBidder.java", "diffHunk": "@@ -131,26 +143,26 @@ private ExtImpTelaria parseImpExt(Imp imp) {\n         }\n     }\n \n-    private static void modifySite(String seatCode, BidRequest bidRequest,\n-                                   BidRequest.BidRequestBuilder bidRequestBuilder) {\n+    private Site modifySite(String seatCode, BidRequest bidRequest) {\n         final Site site = bidRequest.getSite();\n         if (site.getPublisher() != null) {\n             final Publisher modifiedPublisher = site.getPublisher().toBuilder().id(seatCode).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879b89658625a3e7cf18e6ca5912df3027c807fa"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNTExOQ==", "bodyText": "You need to create Publisher despite of his absence.", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r431915119", "createdAt": "2020-05-28T15:13:10Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/telaria/TelariaBidder.java", "diffHunk": "@@ -131,26 +143,26 @@ private ExtImpTelaria parseImpExt(Imp imp) {\n         }\n     }\n \n-    private static void modifySite(String seatCode, BidRequest bidRequest,\n-                                   BidRequest.BidRequestBuilder bidRequestBuilder) {\n+    private Site modifySite(String seatCode, BidRequest bidRequest) {\n         final Site site = bidRequest.getSite();\n         if (site.getPublisher() != null) {\n             final Publisher modifiedPublisher = site.getPublisher().toBuilder().id(seatCode).build();\n-            bidRequestBuilder.site(site.toBuilder().publisher(modifiedPublisher).build());\n+            return site.toBuilder().publisher(modifiedPublisher).build();\n         }\n+        return site;\n     }\n \n-    private static void modifyApp(String seatCode, BidRequest bidRequest,\n-                                  BidRequest.BidRequestBuilder bidRequestBuilder) {\n+    private App modifyApp(String seatCode, BidRequest bidRequest) {\n         final App app = bidRequest.getApp();\n         if (app.getPublisher() != null) {\n             final Publisher modifiedPublisher = app.getPublisher().toBuilder().id(seatCode).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879b89658625a3e7cf18e6ca5912df3027c807fa"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e247095a0074dce6fc16a249ad287c63404bc5cb", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/e247095a0074dce6fc16a249ad287c63404bc5cb", "committedDate": "2020-05-28T15:59:59Z", "message": "Fix return imps of bidrequest. Fix publisher object creation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNzc2NzYy", "url": "https://github.com/prebid/prebid-server-java/pull/726#pullrequestreview-420776762", "createdAt": "2020-05-29T09:02:46Z", "commit": {"oid": "e247095a0074dce6fc16a249ad287c63404bc5cb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTowMjo0NlrOGcUtBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTowNToyNVrOGcUyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MjUxNg==", "bodyText": "NPE\nsite can be null.\napp can be null.\nPublisher can be null.\nPlease, just create separate method that can create publisher, and checks for NULL.\nCall this method from modifySite and modifyApp method that get Site and App object accordingly.\nALSO performing checks for null.", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r432352516", "createdAt": "2020-05-29T09:02:46Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/telaria/TelariaBidder.java", "diffHunk": "@@ -145,20 +146,14 @@ private ExtImpTelaria parseImpExt(Imp imp) {\n \n     private Site modifySite(String seatCode, BidRequest bidRequest) {\n         final Site site = bidRequest.getSite();\n-        if (site.getPublisher() != null) {\n-            final Publisher modifiedPublisher = site.getPublisher().toBuilder().id(seatCode).build();\n-            return site.toBuilder().publisher(modifiedPublisher).build();\n-        }\n-        return site;\n+        final Publisher modifiedPublisher = site.getPublisher().toBuilder().id(seatCode).build();\n+        return site.toBuilder().publisher(modifiedPublisher).build();\n     }\n \n     private App modifyApp(String seatCode, BidRequest bidRequest) {\n         final App app = bidRequest.getApp();\n-        if (app.getPublisher() != null) {\n-            final Publisher modifiedPublisher = app.getPublisher().toBuilder().id(seatCode).build();\n-            return app.toBuilder().publisher(modifiedPublisher).build();\n-        }\n-        return app;\n+        final Publisher modifiedPublisher = app.getPublisher().toBuilder().id(seatCode).build();\n+        return app.toBuilder().publisher(modifiedPublisher).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e247095a0074dce6fc16a249ad287c63404bc5cb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1Mzg0Ng==", "bodyText": "Is it really good idea for adding empty publisher and hiding NPE in the test ?\nFix NPE remove this", "url": "https://github.com/prebid/prebid-server-java/pull/726#discussion_r432353846", "createdAt": "2020-05-29T09:05:25Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/telaria/TelariaBidderTest.java", "diffHunk": "@@ -135,7 +135,7 @@ public void makeHttpRequestsShouldNotSetAppPublisherIdIfSiteIsNotNull() {\n         // given\n         final BidRequest bidRequest = BidRequest.builder()\n                 .imp(singletonList(givenImp(identity())))\n-                .site(Site.builder().build())\n+                .site(Site.builder().publisher(Publisher.builder().build()).build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e247095a0074dce6fc16a249ad287c63404bc5cb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5231c449bb00dd79254bb07835222a63c7b0d60e", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/5231c449bb00dd79254bb07835222a63c7b0d60e", "committedDate": "2020-05-29T10:24:34Z", "message": "Add null check for publisher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODQzMDgz", "url": "https://github.com/prebid/prebid-server-java/pull/726#pullrequestreview-420843083", "createdAt": "2020-05-29T10:43:02Z", "commit": {"oid": "5231c449bb00dd79254bb07835222a63c7b0d60e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab32f1354c9c31e67858b0be0c9d9f9b741e84cc", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/ab32f1354c9c31e67858b0be0c9d9f9b741e84cc", "committedDate": "2020-07-06T09:02:49Z", "message": "Merge branch 'master' into add-telaria-bidder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "183a80c5bd6532542d0a77115dd5c31ec1e1a92c", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/183a80c5bd6532542d0a77115dd5c31ec1e1a92c", "committedDate": "2020-07-06T09:07:02Z", "message": "Update config"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3188, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}