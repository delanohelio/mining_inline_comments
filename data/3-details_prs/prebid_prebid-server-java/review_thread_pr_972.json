{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3OTAwMjY5", "number": 972, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoxNjo0MVrOE_JSYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoyNTowNFrOE_JfPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjQ3OTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoxNjo0MVrOH8sEuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDowNDowOVrOH8uAVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5ODcxNQ==", "bodyText": "Pls place the builder creation inside if condition where we can do return.", "url": "https://github.com/prebid/prebid-server-java/pull/972#discussion_r533398715", "createdAt": "2020-12-01T13:16:41Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "diffHunk": "@@ -175,7 +142,9 @@ private static Imp modifyImp(Imp imp, ExtImpConversant impExt) {\n         final Imp.ImpBuilder impBuilder = imp.toBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30980c2af609ddc8ac8fe95c7db1a81a7b4dacfe"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzMDM1Ng==", "bodyText": "Actually, there is no sense of  'if creation', because of this lines .displaymanager(DISPLAY_MANAGER) .displaymanagerver(DISPLAY_MANAGER_VER)(Builder will always be created)", "url": "https://github.com/prebid/prebid-server-java/pull/972#discussion_r533430356", "createdAt": "2020-12-01T14:04:09Z", "author": {"login": "snahornyi"}, "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "diffHunk": "@@ -175,7 +142,9 @@ private static Imp modifyImp(Imp imp, ExtImpConversant impExt) {\n         final Imp.ImpBuilder impBuilder = imp.toBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5ODcxNQ=="}, "originalCommit": {"oid": "30980c2af609ddc8ac8fe95c7db1a81a7b4dacfe"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjQ5MTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoxOTo0OVrOH8sMBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoxOTo0OVrOH8sMBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwMDU4Mg==", "bodyText": "i'd suggest to avoid this method just because passed builder here.", "url": "https://github.com/prebid/prebid-server-java/pull/972#discussion_r533400582", "createdAt": "2020-12-01T13:19:49Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "diffHunk": "@@ -90,77 +83,51 @@ public ConversantBidder(String endpointUrl, JacksonMapper mapper) {\n                         .headers(HttpUtil.headers())\n                         .payload(outgoingRequest)\n                         .build()),\n-                errors);\n+                Collections.emptyList());\n     }\n \n-    private BidRequest createBidRequest(BidRequest bidRequest, List<BidderError> errors) {\n+    private BidRequest createOutgoingRequest(BidRequest bidRequest) {\n+        final BidRequest.BidRequestBuilder requestBuilder = bidRequest.toBuilder();\n         final List<Imp> modifiedImps = new ArrayList<>();\n-        Integer extMobile = null;\n-        String extSiteId = null;\n \n-        for (Imp imp : bidRequest.getImp()) {\n+        for (int i = 0; i < bidRequest.getImp().size(); i++) {\n+            final Imp imp = bidRequest.getImp().get(i);\n+            final ExtImpConversant impExt;\n             try {\n-                validateImp(imp);\n-                final ExtImpConversant impExt = parseImpExt(imp);\n-                modifiedImps.add(modifyImp(imp, impExt));\n-                if (StringUtils.isNotEmpty(impExt.getSiteId())) {\n-                    extSiteId = impExt.getSiteId();\n-                }\n-                if (impExt.getMobile() != null) {\n-                    extMobile = impExt.getMobile();\n-                }\n+                impExt = parseImpExt(imp);\n             } catch (PreBidException e) {\n-                errors.add(BidderError.badInput(e.getMessage()));\n+                throw new PreBidException(String.format(e.getMessage(), i));\n             }\n-        }\n-        if (modifiedImps.isEmpty()) {\n-            throw new PreBidException(\"No valid impressions\");\n-        }\n-\n-        final Site site = bidRequest.getSite();\n-        final App app = bidRequest.getApp();\n-        validateSiteAppId(extSiteId, site, app);\n-\n-        final BidRequest.BidRequestBuilder requestBuilder = bidRequest.toBuilder()\n-                .imp(modifiedImps);\n-\n-        if (site != null) {\n-            if (StringUtils.isEmpty(site.getId()) || extMobile != null) {\n-                final String siteId = ObjectUtils.defaultIfNull(site.getId(), extSiteId);\n-                requestBuilder.site(site.toBuilder().id(siteId).mobile(extMobile).build());\n-            }\n-        } else if (app != null) {\n-            if (StringUtils.isEmpty(app.getId())) {\n-                requestBuilder.app(app.toBuilder().id(extSiteId).build());\n+            if (i == 0) {\n+                updateRequestWithSiteId(requestBuilder, bidRequest, impExt);\n             }\n+            modifiedImps.add(modifyImp(imp, impExt));\n         }\n-\n+        requestBuilder.imp(modifiedImps);\n         return requestBuilder.build();\n     }\n \n-    private void validateSiteAppId(String extSiteId, Site site, App app) {\n-        if (site != null && StringUtils.isEmpty(site.getId()) && StringUtils.isEmpty(extSiteId)) {\n-            throw new PreBidException(\"Missing site id\");\n-        }\n-\n-        if (app != null && StringUtils.isEmpty(app.getId()) && StringUtils.isEmpty(extSiteId)) {\n-            throw new PreBidException(\"Missing app id\");\n-        }\n-    }\n-\n-    private static void validateImp(Imp imp) {\n-        if (imp.getBanner() == null && imp.getVideo() == null) {\n-            throw new PreBidException(String.format(\"Invalid MediaType. Conversant supports only Banner and Video. \"\n-                    + \"Ignoring ImpID=%s\", imp.getId()));\n+    private void updateRequestWithSiteId(BidRequest.BidRequestBuilder requestBuilder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30980c2af609ddc8ac8fe95c7db1a81a7b4dacfe"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjUwODc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoyNDoxOFrOH8sWmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoyNDoxOFrOH8sWmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwMzI5MA==", "bodyText": "We can pass i as argument to parseImpExt(..) so this try-catch will be not needed.", "url": "https://github.com/prebid/prebid-server-java/pull/972#discussion_r533403290", "createdAt": "2020-12-01T13:24:18Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "diffHunk": "@@ -90,77 +83,51 @@ public ConversantBidder(String endpointUrl, JacksonMapper mapper) {\n                         .headers(HttpUtil.headers())\n                         .payload(outgoingRequest)\n                         .build()),\n-                errors);\n+                Collections.emptyList());\n     }\n \n-    private BidRequest createBidRequest(BidRequest bidRequest, List<BidderError> errors) {\n+    private BidRequest createOutgoingRequest(BidRequest bidRequest) {\n+        final BidRequest.BidRequestBuilder requestBuilder = bidRequest.toBuilder();\n         final List<Imp> modifiedImps = new ArrayList<>();\n-        Integer extMobile = null;\n-        String extSiteId = null;\n \n-        for (Imp imp : bidRequest.getImp()) {\n+        for (int i = 0; i < bidRequest.getImp().size(); i++) {\n+            final Imp imp = bidRequest.getImp().get(i);\n+            final ExtImpConversant impExt;\n             try {\n-                validateImp(imp);\n-                final ExtImpConversant impExt = parseImpExt(imp);\n-                modifiedImps.add(modifyImp(imp, impExt));\n-                if (StringUtils.isNotEmpty(impExt.getSiteId())) {\n-                    extSiteId = impExt.getSiteId();\n-                }\n-                if (impExt.getMobile() != null) {\n-                    extMobile = impExt.getMobile();\n-                }\n+                impExt = parseImpExt(imp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30980c2af609ddc8ac8fe95c7db1a81a7b4dacfe"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjUxMTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoyNTowNFrOH8sYow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoyNTowNFrOH8sYow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwMzgxMQ==", "bodyText": "Minor. Pls extract imps as separate variable.", "url": "https://github.com/prebid/prebid-server-java/pull/972#discussion_r533403811", "createdAt": "2020-12-01T13:25:04Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "diffHunk": "@@ -90,77 +83,51 @@ public ConversantBidder(String endpointUrl, JacksonMapper mapper) {\n                         .headers(HttpUtil.headers())\n                         .payload(outgoingRequest)\n                         .build()),\n-                errors);\n+                Collections.emptyList());\n     }\n \n-    private BidRequest createBidRequest(BidRequest bidRequest, List<BidderError> errors) {\n+    private BidRequest createOutgoingRequest(BidRequest bidRequest) {\n+        final BidRequest.BidRequestBuilder requestBuilder = bidRequest.toBuilder();\n         final List<Imp> modifiedImps = new ArrayList<>();\n-        Integer extMobile = null;\n-        String extSiteId = null;\n \n-        for (Imp imp : bidRequest.getImp()) {\n+        for (int i = 0; i < bidRequest.getImp().size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30980c2af609ddc8ac8fe95c7db1a81a7b4dacfe"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3945, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}