{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMzY0Mzg0", "number": 819, "title": "Add Yeahmobi bidder and tests", "bodyText": "Adding new implementation of Yeahmobi bidder to keep up with Go version.", "createdAt": "2020-07-17T18:54:04Z", "url": "https://github.com/prebid/prebid-server-java/pull/819", "merged": true, "mergeCommit": {"oid": "ee6b01f3c9ad8005e26c61297bf8af406e072cb7"}, "closed": true, "closedAt": "2020-09-18T08:08:23Z", "author": {"login": "AndriyPavlyuk"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc14demgH2gAyNDUxMzY0Mzg0OjVjMWYyYzg2NjU1MGE4ODYzYWNkMGI3ZTA0MDE4NmUwZThhNzQyYjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKA1vxgH2gAyNDUxMzY0Mzg0OmEyNzdhZGQ1NTllYTMzYTJlMTM1MzlhN2M5MzRlMGIyZjMyMTU5YTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5c1f2c866550a8863acd0b7e040186e0e8a742b2", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/5c1f2c866550a8863acd0b7e040186e0e8a742b2", "committedDate": "2020-07-17T18:50:57Z", "message": "Add bidder and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzc5Njcy", "url": "https://github.com/prebid/prebid-server-java/pull/819#pullrequestreview-451379672", "createdAt": "2020-07-20T08:02:02Z", "commit": {"oid": "5c1f2c866550a8863acd0b7e040186e0e8a742b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODowMjowMlrOGz-Y5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODowMjowMlrOGz-Y5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1Mjc0MA==", "bodyText": "In request you have impId = impId001, in response imp123. The same for cache and bid response json files", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r457152740", "createdAt": "2020-07-20T08:02:02Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/test/resources/org/prebid/server/it/openrtb2/yeahmobi/test-auction-yeahmobi-response.json", "diffHunk": "@@ -0,0 +1,56 @@\n+{\n+  \"id\": \"tid\",\n+  \"seatbid\": [\n+    {\n+      \"bid\": [\n+        {\n+          \"adm\": \"<b>hi</b>\",\n+          \"cid\": \"test_cid\",\n+          \"crid\": \"test_banner_crid\",\n+          \"ext\": {\n+            \"bidder\": {\n+              \"format\": \"BANNER\"\n+            },\n+            \"prebid\": {\n+              \"type\": \"banner\",\n+              \"targeting\": {\n+                \"hb_bidder\": \"yeahmobi\",\n+                \"hb_bidder_yeahmobi\": \"yeahmobi\",\n+                \"hb_cache_host\": \"{{ cache.host }}\",\n+                \"hb_cache_host_yeahmobi\": \"{{ cache.host }}\",\n+                \"hb_cache_id\": \"f0ab9105-cb21-4e59-b433-70f5ad6671cb\",\n+                \"hb_cache_id_yeahmobi\": \"f0ab9105-cb21-4e59-b433-70f5ad6671cb\",\n+                \"hb_cache_path\": \"{{ cache.path }}\",\n+                \"hb_cache_path_yeahmobi\": \"{{ cache.path }}\",\n+                \"hb_pb\": \"0.00\",\n+                \"hb_pb_yeahmobi\": \"0.00\"\n+              },\n+              \"cache\": {\n+                \"bids\": {\n+                  \"cacheId\": \"f0ab9105-cb21-4e59-b433-70f5ad6671cb\",\n+                  \"url\": \"{{ cache.resource_url }}f0ab9105-cb21-4e59-b433-70f5ad6671cb\"\n+                }\n+              }\n+            }\n+          },\n+          \"id\": \"1\",\n+          \"impid\": \"imp123\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c1f2c866550a8863acd0b7e040186e0e8a742b2"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fc90987e603043e8f95433b832a1deca36699b7", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/7fc90987e603043e8f95433b832a1deca36699b7", "committedDate": "2020-07-20T10:02:01Z", "message": "Fix impId in test jsons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "committedDate": "2020-07-21T13:22:03Z", "message": "Fix unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMzI0MTI1", "url": "https://github.com/prebid/prebid-server-java/pull/819#pullrequestreview-453324125", "createdAt": "2020-07-22T13:36:46Z", "commit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzozNjo0NlrOG1ivYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyMDozMVrOG1ksgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5Njg5OQ==", "bodyText": "extImpYeahmobi.getZoneId() need to be query escaped", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458796899", "createdAt": "2020-07-22T13:36:46Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwNTg0NA==", "bodyText": "They skip injecting if there are any invalid xnative.", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458805844", "createdAt": "2020-07-22T13:49:14Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpYeahmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YEAHMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+\n+        final String updateNativeRequest;\n+        try {\n+            final JsonNode nativeRequest = imp.getXNative() != null\n+                    ? mapper.mapper().readValue(imp.getXNative().getRequest(), JsonNode.class)\n+                    : null;\n+\n+            final ObjectNode objectNode = mapper.mapper().createObjectNode().set(\"native\", nativeRequest);\n+            updateNativeRequest = nativeRequest != null && nativeRequest.get(\"native\") == null\n+                    ? mapper.mapper().writeValueAsString(objectNode)\n+                    : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxNjQ2NA==", "bodyText": "They have different logic in GO.\nWe need to work with json that in native.request.\n  \"native\": {\n          \"request\": \"{\\\"native\\\":{}}\\\"\n}\n\nSo if there are no imp.native we do not need to do anything.\nIf there are no imp.native.request JSON NATIVE we need to add this object. You can check their tests to fix our IT tests.", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458816464", "createdAt": "2020-07-22T14:03:28Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpYeahmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YEAHMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+\n+        final String updateNativeRequest;\n+        try {\n+            final JsonNode nativeRequest = imp.getXNative() != null\n+                    ? mapper.mapper().readValue(imp.getXNative().getRequest(), JsonNode.class)\n+                    : null;\n+\n+            final ObjectNode objectNode = mapper.mapper().createObjectNode().set(\"native\", nativeRequest);\n+            updateNativeRequest = nativeRequest != null && nativeRequest.get(\"native\") == null\n+                    ? mapper.mapper().writeValueAsString(objectNode)\n+                    : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        return updateNativeRequest != null\n+                ? imp.toBuilder().xNative(Native.builder().request(updateNativeRequest).build()).build()\n+                : imp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxNjYwMw==", "bodyText": "redundant", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458816603", "createdAt": "2020-07-22T14:03:41Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpYeahmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YEAHMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+\n+        final String updateNativeRequest;\n+        try {\n+            final JsonNode nativeRequest = imp.getXNative() != null\n+                    ? mapper.mapper().readValue(imp.getXNative().getRequest(), JsonNode.class)\n+                    : null;\n+\n+            final ObjectNode objectNode = mapper.mapper().createObjectNode().set(\"native\", nativeRequest);\n+            updateNativeRequest = nativeRequest != null && nativeRequest.get(\"native\") == null\n+                    ? mapper.mapper().writeValueAsString(objectNode)\n+                    : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        return updateNativeRequest != null\n+                ? imp.toBuilder().xNative(Native.builder().request(updateNativeRequest).build()).build()\n+                : imp;\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxODAzOQ==", "bodyText": "They do not creating several request. They only creating one", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458818039", "createdAt": "2020-07-22T14:05:32Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxODQ2Nw==", "bodyText": "bug", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458818467", "createdAt": "2020-07-22T14:06:10Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpYeahmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YEAHMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+\n+        final String updateNativeRequest;\n+        try {\n+            final JsonNode nativeRequest = imp.getXNative() != null\n+                    ? mapper.mapper().readValue(imp.getXNative().getRequest(), JsonNode.class)\n+                    : null;\n+\n+            final ObjectNode objectNode = mapper.mapper().createObjectNode().set(\"native\", nativeRequest);\n+            updateNativeRequest = nativeRequest != null && nativeRequest.get(\"native\") == null\n+                    ? mapper.mapper().writeValueAsString(objectNode)\n+                    : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        return updateNativeRequest != null\n+                ? imp.toBuilder().xNative(Native.builder().request(updateNativeRequest).build()).build()\n+                : imp;\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMDkwMg==", "bodyText": "In production you'll get  https://{{Host}}/prebid/bidgw-zoneId-bid.yeahtargeter.com\nYou forget to replace {{Host}}, not just add values.", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458820902", "createdAt": "2020-07-22T14:09:34Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMjg4Nw==", "bodyText": "just  use return with desirable value", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458822887", "createdAt": "2020-07-22T14:12:19Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpYeahmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YEAHMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+\n+        final String updateNativeRequest;\n+        try {\n+            final JsonNode nativeRequest = imp.getXNative() != null\n+                    ? mapper.mapper().readValue(imp.getXNative().getRequest(), JsonNode.class)\n+                    : null;\n+\n+            final ObjectNode objectNode = mapper.mapper().createObjectNode().set(\"native\", nativeRequest);\n+            updateNativeRequest = nativeRequest != null && nativeRequest.get(\"native\") == null\n+                    ? mapper.mapper().writeValueAsString(objectNode)\n+                    : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        return updateNativeRequest != null\n+                ? imp.toBuilder().xNative(Native.builder().request(updateNativeRequest).build()).build()\n+                : imp;\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid, getBidType(bid.getImpid(), bidRequest.getImp()), DEFAULT_BID_CURRENCY))\n+                .collect(Collectors.toList());\n+    }\n+\n+    protected BidType getBidType(String impId, List<Imp> imps) {\n+        BidType bidType = BidType.banner;\n+        for (Imp imp : imps) {\n+            if (imp.getId().equals(impId)) {\n+                if (imp.getBanner() != null) {\n+                    break;\n+                } else if (imp.getVideo() != null) {\n+                    bidType = BidType.video;\n+                    break;\n+                } else if (imp.getXNative() != null) {\n+                    bidType = BidType.xNative;\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNTYxOQ==", "bodyText": "changed bc of replacement of host", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458825619", "createdAt": "2020-07-22T14:16:05Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class YeahmobiBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private YeahmobiBidder yeahmobiBidder;\n+\n+    @Before\n+    public void setUp() {\n+        yeahmobiBidder = new YeahmobiBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new YeahmobiBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNTkyMw==", "bodyText": "name != what you are testing", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458825923", "createdAt": "2020-07-22T14:16:32Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class YeahmobiBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private YeahmobiBidder yeahmobiBidder;\n+\n+    @Before\n+    public void setUp() {\n+        yeahmobiBidder = new YeahmobiBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new YeahmobiBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://test.endpoint.comgw-zoneId-bid.yeahtargeter.com\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjQwMA==", "bodyText": "check Go tests, they have different value in there", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458826400", "createdAt": "2020-07-22T14:17:08Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class YeahmobiBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private YeahmobiBidder yeahmobiBidder;\n+\n+    @Before\n+    public void setUp() {\n+        yeahmobiBidder = new YeahmobiBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new YeahmobiBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://test.endpoint.comgw-zoneId-bid.yeahtargeter.com\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        String nativeRequest = \"{\\\"ver\\\":\\\"1.2\\\",\\\"context\\\":1,\\\"plcmttype\\\":4,\\\"plcmtcnt\\\":1,\\\"assets\\\":[{\\\"id\\\":2,\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjUzNw==", "bodyText": "redundant", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458826537", "createdAt": "2020-07-22T14:17:17Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class YeahmobiBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private YeahmobiBidder yeahmobiBidder;\n+\n+    @Before\n+    public void setUp() {\n+        yeahmobiBidder = new YeahmobiBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new YeahmobiBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://test.endpoint.comgw-zoneId-bid.yeahtargeter.com\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        String nativeRequest = \"{\\\"ver\\\":\\\"1.2\\\",\\\"context\\\":1,\\\"plcmttype\\\":4,\\\"plcmtcnt\\\":1,\\\"assets\\\":[{\\\"id\\\":2,\"\n+                + \"\\\"required\\\":1,\\\"title\\\":{\\\"len\\\":90}},{\\\"id\\\":6,\\\"required\\\":1,\\\"img\\\":{\\\"type\\\":3,\\\"wmin\\\"\"\n+                + \":128,\\\"hmin\\\":128,\\\"mimes\\\":[\\\"image/jpg\\\",\\\"image/jpeg\\\",\\\"image/png\\\"]}},{\\\"id\\\":7,\"\n+                + \"\\\"required\\\":1,\\\"data\\\":{\\\"type\\\":2,\\\"len\\\":120}}]}\";\n+\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyODkzMQ==", "bodyText": "You need to get smth like that\n{\"native\":{\"assets\":[{\"id\":2,\"required\":1,\"title\":{\"len\":90}},{\"id\":6,\"img\":{\"hmin\":128,\"mimes\":[\"im", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458828931", "createdAt": "2020-07-22T14:20:31Z", "author": {"login": "DGarbar"}, "path": "src/test/resources/org/prebid/server/it/openrtb2/yeahmobi/test-yeahmobi-bid-request.json", "diffHunk": "@@ -0,0 +1,103 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"impId001\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 300,\n+            \"h\": 250\n+          }\n+        ]\n+      },\n+      \"native\": {\n+        \"request\": \"{\\\"native\\\":{\\\"ver\\\":\\\"1.2\\\",\\\"context\\\":1,\\\"plcmttype\\\":4,\\\"plcmtcnt\\\":1,\\\"assets\\\":[{\\\"id\\\":2,\\\"required\\\":1,\\\"title\\\":{\\\"len\\\":90}},{\\\"id\\\":6,\\\"required\\\":1,\\\"img\\\":{\\\"type\\\":3,\\\"wmin\\\":128,\\\"hmin\\\":128,\\\"mimes\\\":[\\\"image/jpg\\\",\\\"image/jpeg\\\",\\\"image/png\\\"]}},{\\\"id\\\":7,\\\"required\\\":1,\\\"data\\\":{\\\"type\\\":2,\\\"len\\\":120}}]}}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "committedDate": "2020-07-31T08:25:08Z", "message": "Change logic of bidder and adding tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDA1NTE2", "url": "https://github.com/prebid/prebid-server-java/pull/819#pullrequestreview-459005516", "createdAt": "2020-07-31T08:32:48Z", "commit": {"oid": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODozMjo0OFrOG6Ae3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODozOTo1MlrOG6ArqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3ODQ5Mg==", "bodyText": "You need to return error when there are no ExtImpYeahmobi", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463478492", "createdAt": "2020-07-31T08:32:48Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -52,20 +52,38 @@ public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();\n-        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n \n+        ExtImpYeahmobi extImpYeahmobi = null;\n         for (Imp imp : request.getImp()) {\n             try {\n-                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                if (extImpYeahmobi == null) {\n+                    extImpYeahmobi = parseImpExt(imp);\n+                }\n                 final Imp processImp = processImp(imp);\n-                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n-                result.add(createSingleRequest(processImp, request, url));\n+                validImps.add(processImp);\n             } catch (PreBidException e) {\n                 errors.add(BidderError.badInput(e.getMessage()));\n             }\n         }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4MDM2OA==", "bodyText": "Will be simplified after fix above", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463480368", "createdAt": "2020-07-31T08:36:57Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -52,20 +52,38 @@ public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();\n-        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n \n+        ExtImpYeahmobi extImpYeahmobi = null;\n         for (Imp imp : request.getImp()) {\n             try {\n-                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                if (extImpYeahmobi == null) {\n+                    extImpYeahmobi = parseImpExt(imp);\n+                }\n                 final Imp processImp = processImp(imp);\n-                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n-                result.add(createSingleRequest(processImp, request, url));\n+                validImps.add(processImp);\n             } catch (PreBidException e) {\n                 errors.add(BidderError.badInput(e.getMessage()));\n             }\n         }\n \n-        return Result.of(result, errors);\n+        final String host = extImpYeahmobi != null ? String.format(\"gw-%s-bid.yeahtargeter.com\",\n+                HttpUtil.encodeUrl(extImpYeahmobi.getZoneId())) : null;\n+        final String url = host != null ? endpointUrl.replace(\"{{Host}}\", host) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4MTc2OA==", "bodyText": "gw-sin-bid.yeahtargeter.com\" will be added after above fix", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463481768", "createdAt": "2020-07-31T08:39:52Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/it/YeahmobiTest.java", "diffHunk": "@@ -25,7 +25,7 @@\n     public void openrtb2AuctionShouldRespondWithBidsFromYeahmobi() throws IOException, JSONException {\n         // given\n         // AdmixerBidder bid response for imp 001\n-        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/yeahmobi-exchange/gw-sin-bid.yeahtargeter.com\"))\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/yeahmobi-exchange/\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c735f3c77f826b03db8d3fa27c4cc672ea057da", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/1c735f3c77f826b03db8d3fa27c4cc672ea057da", "committedDate": "2020-07-31T09:12:00Z", "message": "Add check for empty value of ExtImpYeahmobi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDM3MDM4", "url": "https://github.com/prebid/prebid-server-java/pull/819#pullrequestreview-459037038", "createdAt": "2020-07-31T09:25:09Z", "commit": {"oid": "1c735f3c77f826b03db8d3fa27c4cc672ea057da"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOToyNTowOVrOG6CCig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOToyNTo1OVrOG6CEOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNDAxMA==", "bodyText": "Use special method. With errors", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463504010", "createdAt": "2020-07-31T09:25:09Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -57,19 +57,21 @@ public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n         ExtImpYeahmobi extImpYeahmobi = null;\n         for (Imp imp : request.getImp()) {\n             try {\n-                if (extImpYeahmobi == null) {\n-                    extImpYeahmobi = parseImpExt(imp);\n-                }\n+                extImpYeahmobi = extImpYeahmobi == null ? parseImpExt(imp) : extImpYeahmobi;\n                 final Imp processImp = processImp(imp);\n                 validImps.add(processImp);\n             } catch (PreBidException e) {\n                 errors.add(BidderError.badInput(e.getMessage()));\n             }\n         }\n \n-        final String host = extImpYeahmobi != null ? String.format(\"gw-%s-bid.yeahtargeter.com\",\n-                HttpUtil.encodeUrl(extImpYeahmobi.getZoneId())) : null;\n-        final String url = host != null ? endpointUrl.replace(\"{{Host}}\", host) : null;\n+        if (extImpYeahmobi == null) {\n+            errors.add(BidderError.badInput(\"Invalid ExtImpYeahmobi value\"));\n+            return Result.of(Collections.emptyList(), errors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c735f3c77f826b03db8d3fa27c4cc672ea057da"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNDQ0MA==", "bodyText": "Are you sure that /gw-%s-bid.yeahtargeter.com not there ?", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463504440", "createdAt": "2020-07-31T09:25:59Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/it/YeahmobiTest.java", "diffHunk": "@@ -24,8 +24,8 @@\n     @Test\n     public void openrtb2AuctionShouldRespondWithBidsFromYeahmobi() throws IOException, JSONException {\n         // given\n-        // AdmixerBidder bid response for imp 001\n-        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/yeahmobi-exchange/\"))\n+        // YeahmobiBidder bid response for imp 001\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/yeahmobi-exchange\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c735f3c77f826b03db8d3fa27c4cc672ea057da"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDYzODc3", "url": "https://github.com/prebid/prebid-server-java/pull/819#pullrequestreview-459063877", "createdAt": "2020-07-31T10:10:21Z", "commit": {"oid": "1c735f3c77f826b03db8d3fa27c4cc672ea057da"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65d1ef191c9c3e3b9241e202dd309ac2ea904b63", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/65d1ef191c9c3e3b9241e202dd309ac2ea904b63", "committedDate": "2020-07-31T10:14:11Z", "message": "Change method of failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDY2NjYz", "url": "https://github.com/prebid/prebid-server-java/pull/819#pullrequestreview-459066663", "createdAt": "2020-07-31T10:15:08Z", "commit": {"oid": "65d1ef191c9c3e3b9241e202dd309ac2ea904b63"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a277add559ea33a2e13539a7c934e0b2f32159a6", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/a277add559ea33a2e13539a7c934e0b2f32159a6", "committedDate": "2020-09-18T07:55:11Z", "message": "Merge branch 'master' into add-yeahmobi-bidder"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3094, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}