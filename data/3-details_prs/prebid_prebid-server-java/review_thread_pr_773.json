{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTM0MjY1", "number": 773, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjozMTo0N1rOEH8mHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjozNjowMVrOEH8rmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzY4Mjg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/privacy/gdpr/TcfDefinerService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjozMTo0N1rOGnm97w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo0NzoyMVrOGnqElg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4NjA5NQ==", "bodyText": "Probably, it's better to get accountEnabled from retrieved account also.\n final Boolean accountGdprEnabled = accountGdprConfig != null && accountGdprConfig.getEnabled() != null;\n\n        if (requestType == null) {\n            return ObjectUtils.firstNonNull(accountGdprEnabled, gdprEnabled);\n        }\n\n        final EnabledForRequestType enabledForRequestType = accountGdprConfig != null\n                ? accountGdprConfig.getEnabledForRequestType()\n                : null;\n        final Boolean enabledForType = enabledForRequestType != null\n                ? enabledForRequestType.isEnabledFor(requestType)\n                : null;\n\n        return ObjectUtils.firstNonNull(enabledForType, accountGdprEnabled, gdprEnabled);", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444186095", "createdAt": "2020-06-23T12:31:47Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/privacy/gdpr/TcfDefinerService.java", "diffHunk": "@@ -143,10 +150,17 @@ public TcfDefinerService(GdprConfig gdprConfig,\n                         dispatchToService(gdprInfoWithCountry, allowAllTcfResponseCreator, tcf2Strategy, gdprStrategy));\n     }\n \n-    private boolean isGdprEnabled(AccountGdprConfig accountGdprConfig) {\n-        return accountGdprConfig != null && accountGdprConfig.getEnabled() != null\n-                ? accountGdprConfig.getEnabled()\n-                : gdprEnabled;\n+    private boolean isGdprEnabled(AccountGdprConfig accountGdprConfig, MetricName requestType) {\n+        if (requestType == null) {\n+            return accountGdprConfig != null && accountGdprConfig.getEnabled() != null\n+                    ? accountGdprConfig.getEnabled()\n+                    : gdprEnabled;\n+        }\n+        final EnabledForRequestType enabledForRequestType = accountGdprConfig != null\n+                ? accountGdprConfig.getEnabledForRequestType()\n+                : null;\n+        final Boolean enabled = enabledForRequestType != null ? enabledForRequestType.isEnabledFor(requestType) : null;\n+        return enabled != null ? enabled : gdprEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2073ad834d38341984dbd296bf3a6067425f63d7"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5Mjc2MA==", "bodyText": "accountGdprConfig.getEnabled() should not have impact on auction typed requests", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444192760", "createdAt": "2020-06-23T12:42:55Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/privacy/gdpr/TcfDefinerService.java", "diffHunk": "@@ -143,10 +150,17 @@ public TcfDefinerService(GdprConfig gdprConfig,\n                         dispatchToService(gdprInfoWithCountry, allowAllTcfResponseCreator, tcf2Strategy, gdprStrategy));\n     }\n \n-    private boolean isGdprEnabled(AccountGdprConfig accountGdprConfig) {\n-        return accountGdprConfig != null && accountGdprConfig.getEnabled() != null\n-                ? accountGdprConfig.getEnabled()\n-                : gdprEnabled;\n+    private boolean isGdprEnabled(AccountGdprConfig accountGdprConfig, MetricName requestType) {\n+        if (requestType == null) {\n+            return accountGdprConfig != null && accountGdprConfig.getEnabled() != null\n+                    ? accountGdprConfig.getEnabled()\n+                    : gdprEnabled;\n+        }\n+        final EnabledForRequestType enabledForRequestType = accountGdprConfig != null\n+                ? accountGdprConfig.getEnabledForRequestType()\n+                : null;\n+        final Boolean enabled = enabledForRequestType != null ? enabledForRequestType.isEnabledFor(requestType) : null;\n+        return enabled != null ? enabled : gdprEnabled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4NjA5NQ=="}, "originalCommit": {"oid": "2073ad834d38341984dbd296bf3a6067425f63d7"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNjk1MA==", "bodyText": "After discussion with Bret we decide that integration_enabled should override account_enabled. So @DGarbar is right, pull request updated. Thanks", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444236950", "createdAt": "2020-06-23T13:47:21Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/privacy/gdpr/TcfDefinerService.java", "diffHunk": "@@ -143,10 +150,17 @@ public TcfDefinerService(GdprConfig gdprConfig,\n                         dispatchToService(gdprInfoWithCountry, allowAllTcfResponseCreator, tcf2Strategy, gdprStrategy));\n     }\n \n-    private boolean isGdprEnabled(AccountGdprConfig accountGdprConfig) {\n-        return accountGdprConfig != null && accountGdprConfig.getEnabled() != null\n-                ? accountGdprConfig.getEnabled()\n-                : gdprEnabled;\n+    private boolean isGdprEnabled(AccountGdprConfig accountGdprConfig, MetricName requestType) {\n+        if (requestType == null) {\n+            return accountGdprConfig != null && accountGdprConfig.getEnabled() != null\n+                    ? accountGdprConfig.getEnabled()\n+                    : gdprEnabled;\n+        }\n+        final EnabledForRequestType enabledForRequestType = accountGdprConfig != null\n+                ? accountGdprConfig.getEnabledForRequestType()\n+                : null;\n+        final Boolean enabled = enabledForRequestType != null ? enabledForRequestType.isEnabledFor(requestType) : null;\n+        return enabled != null ? enabled : gdprEnabled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4NjA5NQ=="}, "originalCommit": {"oid": "2073ad834d38341984dbd296bf3a6067425f63d7"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzY5NjkxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/privacy/gdpr/TcfDefinerServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjozNjowMVrOGnnHOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjo0MDoxMFrOGnnRIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4ODQ3NA==", "bodyText": "Don't we need to check account.enabled also ?", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444188474", "createdAt": "2020-06-23T12:36:01Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/privacy/gdpr/TcfDefinerServiceTest.java", "diffHunk": "@@ -112,14 +114,93 @@ public void resultForVendorIdsShouldAllowAllWhenGdprIsDisabled() {\n         verifyZeroInteractions(metrics);\n     }\n \n+    @Test\n+    public void resultForBidderNamesShouldAllowAllWhenGdprIsDisabledByAccountForRequestType() {\n+        // given\n+        final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder()\n+                .enabledForRequestType(EnabledForRequestType.of(null, false, null, null))\n+                .build();\n+\n+        // when\n+        final Future<TcfResponse<String>> result = target.resultForBidderNames(\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, MetricName.amp, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n     @Test\n     public void resultForBidderNamesShouldAllowAllWhenGdprIsDisabledByAccount() {\n         // given\n         final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder().enabled(false).build();\n \n         // when\n         final Future<TcfResponse<String>> result = target.resultForBidderNames(\n-                singleton(\"b\"), null, null, null, null, accountGdprConfig, null);\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, null, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n+    @Test\n+    public void resultForBidderNamesShouldAllowAllWhenGdprIsNotDefinedForRequestTypeAndPBSGdprIsDisabled() {\n+        // given\n+        final GdprConfig gdprConfig = GdprConfig.builder()\n+                .defaultValue(\"1\")\n+                .enabled(false)\n+                .purposes(purposes)\n+                .build();\n+        final TcfDefinerService target = new TcfDefinerService(gdprConfig, singleton(EEA_COUNTRY), gdprService,\n+                tcf2Service, geoLocationService, bidderCatalog, metrics);\n+\n+        final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder()\n+                .enabledForRequestType(EnabledForRequestType.of(null, null, null, null))\n+                .build();\n+\n+        // when\n+        final Future<TcfResponse<String>> result = target.resultForBidderNames(\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, MetricName.amp, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n+    @Test\n+    public void resultForBidderNamesShouldIgnoreUnknownRequestTypeAndDecideByPbsGdprDisabledProperty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2073ad834d38341984dbd296bf3a6067425f63d7"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5MTAxMA==", "bodyText": "No, we don't. Account.enabled only for usersync and setuid. If gdpr for request type is not defined only pbs config checked.", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444191010", "createdAt": "2020-06-23T12:40:10Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/test/java/org/prebid/server/privacy/gdpr/TcfDefinerServiceTest.java", "diffHunk": "@@ -112,14 +114,93 @@ public void resultForVendorIdsShouldAllowAllWhenGdprIsDisabled() {\n         verifyZeroInteractions(metrics);\n     }\n \n+    @Test\n+    public void resultForBidderNamesShouldAllowAllWhenGdprIsDisabledByAccountForRequestType() {\n+        // given\n+        final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder()\n+                .enabledForRequestType(EnabledForRequestType.of(null, false, null, null))\n+                .build();\n+\n+        // when\n+        final Future<TcfResponse<String>> result = target.resultForBidderNames(\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, MetricName.amp, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n     @Test\n     public void resultForBidderNamesShouldAllowAllWhenGdprIsDisabledByAccount() {\n         // given\n         final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder().enabled(false).build();\n \n         // when\n         final Future<TcfResponse<String>> result = target.resultForBidderNames(\n-                singleton(\"b\"), null, null, null, null, accountGdprConfig, null);\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, null, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n+    @Test\n+    public void resultForBidderNamesShouldAllowAllWhenGdprIsNotDefinedForRequestTypeAndPBSGdprIsDisabled() {\n+        // given\n+        final GdprConfig gdprConfig = GdprConfig.builder()\n+                .defaultValue(\"1\")\n+                .enabled(false)\n+                .purposes(purposes)\n+                .build();\n+        final TcfDefinerService target = new TcfDefinerService(gdprConfig, singleton(EEA_COUNTRY), gdprService,\n+                tcf2Service, geoLocationService, bidderCatalog, metrics);\n+\n+        final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder()\n+                .enabledForRequestType(EnabledForRequestType.of(null, null, null, null))\n+                .build();\n+\n+        // when\n+        final Future<TcfResponse<String>> result = target.resultForBidderNames(\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, MetricName.amp, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n+    @Test\n+    public void resultForBidderNamesShouldIgnoreUnknownRequestTypeAndDecideByPbsGdprDisabledProperty() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4ODQ3NA=="}, "originalCommit": {"oid": "2073ad834d38341984dbd296bf3a6067425f63d7"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4103, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}