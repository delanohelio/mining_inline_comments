{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzkwMjc4", "number": 654, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo1NTo1NVrODvAnRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozODoyNFrODwXmFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjE5NzE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo1NTo1NVrOGBL06Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo1NTo1NVrOGBL06Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5NTUyOQ==", "bodyText": "Seems we don't really need to pass ExtRequestPrebidEvents object.\nAssume, we can use here eventsEnabled flag instead, based on ExtRequestPrebidEvents and account.getEventsEnabled().\nSo, as following BidResponseCreator can be refactored to rid off the account.getEventsEnabled() usage.", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r403895529", "createdAt": "2020-04-06T07:55:55Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -107,7 +108,8 @@ public BidResponseCreator(CacheService cacheService, BidderCatalog bidderCatalog\n      * including processing of winning bids with cache IDs.\n      */\n     Future<BidResponse> create(List<BidderResponse> bidderResponses, BidRequest bidRequest,\n-                               ExtRequestTargeting targeting, BidRequestCacheInfo cacheInfo, Account account,\n+                               ExtRequestPrebidEvents extRequestPrebidEvents, ExtRequestTargeting targeting,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ee76da9fb2fcd3f8587e48bc67b3729b967cb5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjI3NzYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebidEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODoxODoyMlrOGBMmSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODoxODoyMlrOGBMmSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwODE3MA==", "bodyText": "We don't need any fields in this class.\nIt will be used just as marker.", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r403908170", "createdAt": "2020-04-06T08:18:22Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebidEvents.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.prebid.server.proto.openrtb.ext.request;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+/**\n+ * Defines the contract for bidrequest.ext.prebid.events\n+ */\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class ExtRequestPrebidEvents {\n+\n+    /**\n+     * Defines the contract for bidrequest.ext.prebid.events.win\n+     */\n+    String win;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ee76da9fb2fcd3f8587e48bc67b3729b967cb5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjI4MTc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODoxOTozMFrOGBMosA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODoxOTozMFrOGBMosA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwODc4NA==", "bodyText": "Do not used.", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r403908784", "createdAt": "2020-04-06T08:19:30Z", "author": {"login": "rpanchyk"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -747,10 +760,40 @@ public void shouldAddExtPrebidEvents() {\n         verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n     }\n \n+    @Test\n+    public void shouldNotAddExtPrebidEventsIfExtRequestPrebidEventsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest();\n+        final ExtRequestTargeting targeting = givenTargeting();\n+\n+        final Bid bid = Bid.builder().id(\"bidId1\").price(BigDecimal.valueOf(5.67)).build();\n+        final List<BidderResponse> bidderResponses = singletonList(BidderResponse.of(\"bidder1\",\n+                givenSeatBid(BidderBid.of(bid, banner, \"USD\")), 100));\n+\n+        final Events events = Events.of(\"http://event-type-win\", \"http://event-type-view\");\n+        given(eventsService.createEvent(anyString(), anyString())).willReturn(events);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ee76da9fb2fcd3f8587e48bc67b3729b967cb5"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjI5NDgyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODoyMzowNVrOGBMw5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODoyMzowNVrOGBMw5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxMDg4NQ==", "bodyText": "Pls rename to shouldNotAddExtPrebidEventsIfExtRequestPrebidEventsIsNull.\nAlso, add the additional unit test when Account has eventsEnabled = false.", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r403910885", "createdAt": "2020-04-06T08:23:05Z", "author": {"login": "rpanchyk"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -747,10 +760,40 @@ public void shouldAddExtPrebidEvents() {\n         verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n     }\n \n+    @Test\n+    public void shouldNotAddExtPrebidEventsIfExtRequestPrebidEventsNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ee76da9fb2fcd3f8587e48bc67b3729b967cb5"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDQzNDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozMzo1MFrOGDU5KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozMzo1MFrOGDU5KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MTIyNQ==", "bodyText": "This check doesn't answer the question \"Is events enabled?\"", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r406141225", "createdAt": "2020-04-09T11:33:50Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -391,19 +393,23 @@ private static PutObject createPutObjectVideoOnly(Bid bid) {\n \n     /**\n      * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}.\n-     * Used for OpenRTB auction request. Also, adds win url to result object.\n+     * Used for OpenRTB auction request. Also, adds win url to result object if events are enabled.\n      */\n     private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, Map<String, List<String>> biddersToCacheBidIds,\n-                                                 String accountId, Long timestamp) {\n+                                                 Account account, boolean eventsAllowedByRequest, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n         final String bidId = bid.getId();\n+\n         final ObjectNode bidObjectNode = mapper.mapper().valueToTree(bid);\n-        biddersToCacheBidIds.entrySet().stream()\n-                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n-                .findFirst()\n-                .map(Map.Entry::getKey)\n-                .ifPresent(bidder -> bidObjectNode.put(\"wurl\", eventsService.winUrl(bidId, bidder, accountId,\n-                        timestamp)));\n+        final boolean eventsEnabled = account.getEventsEnabled() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc11327cb0f354b0e77a3b004c4ee16245f77bf"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDQzNjk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozNDo0NFrOGDU6qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozNDo0NFrOGDU6qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MTYxMQ==", "bodyText": "According to requirements eventsAllowedByRequest should not be applied to CacheService at all.", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r406141611", "createdAt": "2020-04-09T11:34:44Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -391,19 +393,23 @@ private static PutObject createPutObjectVideoOnly(Bid bid) {\n \n     /**\n      * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}.\n-     * Used for OpenRTB auction request. Also, adds win url to result object.\n+     * Used for OpenRTB auction request. Also, adds win url to result object if events are enabled.\n      */\n     private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, Map<String, List<String>> biddersToCacheBidIds,\n-                                                 String accountId, Long timestamp) {\n+                                                 Account account, boolean eventsAllowedByRequest, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n         final String bidId = bid.getId();\n+\n         final ObjectNode bidObjectNode = mapper.mapper().valueToTree(bid);\n-        biddersToCacheBidIds.entrySet().stream()\n-                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n-                .findFirst()\n-                .map(Map.Entry::getKey)\n-                .ifPresent(bidder -> bidObjectNode.put(\"wurl\", eventsService.winUrl(bidId, bidder, accountId,\n-                        timestamp)));\n+        final boolean eventsEnabled = account.getEventsEnabled() != null;\n+        if (eventsEnabled && eventsAllowedByRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc11327cb0f354b0e77a3b004c4ee16245f77bf"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDQ0ODIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozODoyNFrOGDVBcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozODoyNFrOGDVBcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MzM0NA==", "bodyText": "According to requirements eventsAllowedByRequest should not be applied here.\ni mean it should not affect the hb_winurl & hb_bidid targeting keywords.", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r406143344", "createdAt": "2020-04-09T11:38:24Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -636,7 +640,7 @@ private Bid toBid(BidderBid bidderBid, String bidder, ExtRequestTargeting target\n             final Map<BidType, TargetingKeywordsCreator> keywordsCreatorByBidType =\n                     keywordsCreatorByBidType(targeting, isApp);\n             final boolean isWinningBid = winningBids.contains(bid);\n-            final String winUrl = eventsEnabled && bidType != BidType.video\n+            final String winUrl = eventsEnabled && eventsAllowedByRequest && bidType != BidType.video", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc11327cb0f354b0e77a3b004c4ee16245f77bf"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4190, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}