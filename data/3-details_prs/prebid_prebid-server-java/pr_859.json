{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MDE2MDUy", "number": 859, "title": "Add DmxBidder and tests", "bodyText": "Updated dmx endpoint in dmx.yaml due to prebid/prebid-server#1401", "createdAt": "2020-08-12T21:24:49Z", "url": "https://github.com/prebid/prebid-server-java/pull/859", "merged": true, "mergeCommit": {"oid": "3b810f15d985a7ae3960d34009900524a922cde7"}, "closed": true, "closedAt": "2020-09-23T10:50:26Z", "author": {"login": "AndriyPavlyuk"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-SKLsAH2gAyNDY3MDE2MDUyOjJmNWE1N2NiZjJkNDAyNmQzZmJmYzNhNjhkOTI5ZTUxODQzN2ZjNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLqN7tAFqTQ5NDUyNjczNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a", "committedDate": "2020-08-12T21:18:48Z", "message": "Add DmxBidder and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTI0NDAx", "url": "https://github.com/prebid/prebid-server-java/pull/859#pullrequestreview-489524401", "createdAt": "2020-09-16T11:21:37Z", "commit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMToyMTozN1rOHSsM9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjoxMDoxNVrOHStywA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2MDYyOQ==", "bodyText": "use &&", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489360629", "createdAt": "2020-09-16T11:21:37Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2MDc1MA==", "bodyText": "Use special method for singular error", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489360750", "createdAt": "2020-09-16T11:21:50Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2MDg2NA==", "bodyText": "declare near usage", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489360864", "createdAt": "2020-09-16T11:22:03Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2MTM2OQ==", "bodyText": "Use special method for singular error", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489361369", "createdAt": "2020-09-16T11:23:05Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2MzA3Mw==", "bodyText": "Put this logic above loop", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489363073", "createdAt": "2020-09-16T11:26:34Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2NTIxMg==", "bodyText": "NPE", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489365212", "createdAt": "2020-09-16T11:30:47Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {\n+                    final String publisherId = extImp.getPublisherId();\n+                    updatedPublisherId = StringUtils.isBlank(publisherId)\n+                            ? publisherId\n+                            : extImp.getMemberId();\n+                    updatedSellerId = extImp.getSellerId();\n+                }\n+                final Imp validImp = validateAndModifyImp(imps.get(i), extImp);\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        boolean anyHasId = false;\n+        if (request.getApp() != null) {\n+            if (StringUtils.isNotBlank(request.getApp().getId())) {\n+                anyHasId = true;\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        final Publisher publisher = site.getPublisher();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2NjQyMg==", "bodyText": "This block is incorrect. You need to check for Site != null first, to not use site variable and produce NPE", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489366422", "createdAt": "2020-09-16T11:33:07Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {\n+                    final String publisherId = extImp.getPublisherId();\n+                    updatedPublisherId = StringUtils.isBlank(publisherId)\n+                            ? publisherId\n+                            : extImp.getMemberId();\n+                    updatedSellerId = extImp.getSellerId();\n+                }\n+                final Imp validImp = validateAndModifyImp(imps.get(i), extImp);\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        boolean anyHasId = false;\n+        if (request.getApp() != null) {\n+            if (StringUtils.isNotBlank(request.getApp().getId())) {\n+                anyHasId = true;\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        final Publisher publisher = site.getPublisher();\n+        if (site.getPublisher() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2Njg2OQ==", "bodyText": "userExt", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489366869", "createdAt": "2020-09-16T11:34:04Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {\n+                    final String publisherId = extImp.getPublisherId();\n+                    updatedPublisherId = StringUtils.isBlank(publisherId)\n+                            ? publisherId\n+                            : extImp.getMemberId();\n+                    updatedSellerId = extImp.getSellerId();\n+                }\n+                final Imp validImp = validateAndModifyImp(imps.get(i), extImp);\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        boolean anyHasId = false;\n+        if (request.getApp() != null) {\n+            if (StringUtils.isNotBlank(request.getApp().getId())) {\n+                anyHasId = true;\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        final Publisher publisher = site.getPublisher();\n+        if (site.getPublisher() != null) {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(publisher.toBuilder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        } else {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(Publisher.builder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            if (StringUtils.isNotBlank(user.getId())) {\n+                anyHasId = true;\n+            }\n+            final ExtUser ext = user.getExt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2OTQ3OQ==", "bodyText": "I'd recomend to put this logic in method checkIsHasId that can throw error", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489369479", "createdAt": "2020-09-16T11:38:49Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {\n+                    final String publisherId = extImp.getPublisherId();\n+                    updatedPublisherId = StringUtils.isBlank(publisherId)\n+                            ? publisherId\n+                            : extImp.getMemberId();\n+                    updatedSellerId = extImp.getSellerId();\n+                }\n+                final Imp validImp = validateAndModifyImp(imps.get(i), extImp);\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        boolean anyHasId = false;\n+        if (request.getApp() != null) {\n+            if (StringUtils.isNotBlank(request.getApp().getId())) {\n+                anyHasId = true;\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        final Publisher publisher = site.getPublisher();\n+        if (site.getPublisher() != null) {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(publisher.toBuilder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        } else {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(Publisher.builder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            if (StringUtils.isNotBlank(user.getId())) {\n+                anyHasId = true;\n+            }\n+            final ExtUser ext = user.getExt();\n+            if (ext != null) {\n+                final ExtUserDigiTrust digitrust = ext.getDigitrust();\n+                if (CollectionUtils.isNotEmpty(ext.getEids()) || (digitrust != null\n+                        && StringUtils.isNotBlank(digitrust.getId()))) {\n+                    anyHasId = true;\n+                }\n+            }\n+        }\n+\n+        if (!anyHasId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MTA1Mw==", "bodyText": "remove /n", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489371053", "createdAt": "2020-09-16T11:41:48Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {\n+                    final String publisherId = extImp.getPublisherId();\n+                    updatedPublisherId = StringUtils.isBlank(publisherId)\n+                            ? publisherId\n+                            : extImp.getMemberId();\n+                    updatedSellerId = extImp.getSellerId();\n+                }\n+                final Imp validImp = validateAndModifyImp(imps.get(i), extImp);\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        boolean anyHasId = false;\n+        if (request.getApp() != null) {\n+            if (StringUtils.isNotBlank(request.getApp().getId())) {\n+                anyHasId = true;\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        final Publisher publisher = site.getPublisher();\n+        if (site.getPublisher() != null) {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(publisher.toBuilder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        } else {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(Publisher.builder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            if (StringUtils.isNotBlank(user.getId())) {\n+                anyHasId = true;\n+            }\n+            final ExtUser ext = user.getExt();\n+            if (ext != null) {\n+                final ExtUserDigiTrust digitrust = ext.getDigitrust();\n+                if (CollectionUtils.isNotEmpty(ext.getEids()) || (digitrust != null\n+                        && StringUtils.isNotBlank(digitrust.getId()))) {\n+                    anyHasId = true;\n+                }\n+            }\n+        }\n+\n+        if (!anyHasId) {\n+            return Result.emptyWithError(BidderError.badInput(\"This request contained no identifier\"));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+        final String urlParameter = StringUtils.isNotBlank(updatedSellerId)\n+                ? \"?sellerid=\" + HttpUtil.encodeUrl(updatedSellerId)\n+                : \"\";\n+        final String uri = String.format(\"%s%s\", endpointUrl, urlParameter);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(uri)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpDmx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), DMX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp validateAndModifyImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp = null;\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (CollectionUtils.isNotEmpty(banner.getFormat())) {\n+                updatedImp = updateImp(imp, extImp).toBuilder().banner(banner).build();\n+            }\n+        }\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            updatedImp = updateImp(imp, extImp).toBuilder().video(video).build();\n+        }\n+        return updatedImp;\n+    }\n+\n+    private Imp updateImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp;\n+        if (StringUtils.isNotBlank(extImp.getPublisherId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3NTk2MQ==", "bodyText": "StringUtils.isBlank(updatedImp.getTagid() whould never be true.\nWhat they doing is checking, that in case if extImp.getTagId() and extImp.getDmxId() is null that tagId is present in recieved Imp.\nSO if there are no tagId in Imp at the and we need to skip this imp.\nFix this", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489375961", "createdAt": "2020-09-16T11:50:36Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {\n+                    final String publisherId = extImp.getPublisherId();\n+                    updatedPublisherId = StringUtils.isBlank(publisherId)\n+                            ? publisherId\n+                            : extImp.getMemberId();\n+                    updatedSellerId = extImp.getSellerId();\n+                }\n+                final Imp validImp = validateAndModifyImp(imps.get(i), extImp);\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        boolean anyHasId = false;\n+        if (request.getApp() != null) {\n+            if (StringUtils.isNotBlank(request.getApp().getId())) {\n+                anyHasId = true;\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        final Publisher publisher = site.getPublisher();\n+        if (site.getPublisher() != null) {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(publisher.toBuilder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        } else {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(Publisher.builder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            if (StringUtils.isNotBlank(user.getId())) {\n+                anyHasId = true;\n+            }\n+            final ExtUser ext = user.getExt();\n+            if (ext != null) {\n+                final ExtUserDigiTrust digitrust = ext.getDigitrust();\n+                if (CollectionUtils.isNotEmpty(ext.getEids()) || (digitrust != null\n+                        && StringUtils.isNotBlank(digitrust.getId()))) {\n+                    anyHasId = true;\n+                }\n+            }\n+        }\n+\n+        if (!anyHasId) {\n+            return Result.emptyWithError(BidderError.badInput(\"This request contained no identifier\"));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+        final String urlParameter = StringUtils.isNotBlank(updatedSellerId)\n+                ? \"?sellerid=\" + HttpUtil.encodeUrl(updatedSellerId)\n+                : \"\";\n+        final String uri = String.format(\"%s%s\", endpointUrl, urlParameter);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(uri)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpDmx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), DMX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp validateAndModifyImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp = null;\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (CollectionUtils.isNotEmpty(banner.getFormat())) {\n+                updatedImp = updateImp(imp, extImp).toBuilder().banner(banner).build();\n+            }\n+        }\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            updatedImp = updateImp(imp, extImp).toBuilder().video(video).build();\n+        }\n+        return updatedImp;\n+    }\n+\n+    private Imp updateImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp;\n+        if (StringUtils.isNotBlank(extImp.getPublisherId())\n+                || StringUtils.isNotBlank(extImp.getMemberId())) {\n+            updatedImp = fetchParams(imp, extImp);\n+        } else {\n+            throw new PreBidException(\"Missing Params for auction to be send\");\n+        }\n+        return updatedImp;\n+    }\n+\n+    private Imp fetchParams(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp = null;\n+        final String tagId = extImp.getTagId();\n+        if (StringUtils.isNotBlank(tagId)) {\n+            updatedImp = Imp.builder()\n+                    .id(imp.getId())\n+                    .tagid(tagId)\n+                    .ext(imp.getExt())\n+                    .secure(INT_VALUE)\n+                    .build();\n+        }\n+\n+        final String dmxId = extImp.getDmxId();\n+        if (StringUtils.isNotBlank(dmxId)) {\n+            updatedImp = Imp.builder()\n+                    .id(imp.getId())\n+                    .tagid(dmxId)\n+                    .ext(imp.getExt())\n+                    .secure(INT_VALUE)\n+                    .build();\n+        }\n+\n+        return (updatedImp != null && StringUtils.isBlank(updatedImp.getTagid())) ? imp : updatedImp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3Njc3MQ==", "bodyText": "just return here", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489376771", "createdAt": "2020-09-16T11:52:03Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {\n+                    final String publisherId = extImp.getPublisherId();\n+                    updatedPublisherId = StringUtils.isBlank(publisherId)\n+                            ? publisherId\n+                            : extImp.getMemberId();\n+                    updatedSellerId = extImp.getSellerId();\n+                }\n+                final Imp validImp = validateAndModifyImp(imps.get(i), extImp);\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        boolean anyHasId = false;\n+        if (request.getApp() != null) {\n+            if (StringUtils.isNotBlank(request.getApp().getId())) {\n+                anyHasId = true;\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        final Publisher publisher = site.getPublisher();\n+        if (site.getPublisher() != null) {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(publisher.toBuilder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        } else {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(Publisher.builder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            if (StringUtils.isNotBlank(user.getId())) {\n+                anyHasId = true;\n+            }\n+            final ExtUser ext = user.getExt();\n+            if (ext != null) {\n+                final ExtUserDigiTrust digitrust = ext.getDigitrust();\n+                if (CollectionUtils.isNotEmpty(ext.getEids()) || (digitrust != null\n+                        && StringUtils.isNotBlank(digitrust.getId()))) {\n+                    anyHasId = true;\n+                }\n+            }\n+        }\n+\n+        if (!anyHasId) {\n+            return Result.emptyWithError(BidderError.badInput(\"This request contained no identifier\"));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+        final String urlParameter = StringUtils.isNotBlank(updatedSellerId)\n+                ? \"?sellerid=\" + HttpUtil.encodeUrl(updatedSellerId)\n+                : \"\";\n+        final String uri = String.format(\"%s%s\", endpointUrl, urlParameter);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(uri)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpDmx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), DMX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp validateAndModifyImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp = null;\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (CollectionUtils.isNotEmpty(banner.getFormat())) {\n+                updatedImp = updateImp(imp, extImp).toBuilder().banner(banner).build();\n+            }\n+        }\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            updatedImp = updateImp(imp, extImp).toBuilder().video(video).build();\n+        }\n+        return updatedImp;\n+    }\n+\n+    private Imp updateImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp;\n+        if (StringUtils.isNotBlank(extImp.getPublisherId())\n+                || StringUtils.isNotBlank(extImp.getMemberId())) {\n+            updatedImp = fetchParams(imp, extImp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3NjkyMw==", "bodyText": "redundant", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489376923", "createdAt": "2020-09-16T11:52:19Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {\n+                    final String publisherId = extImp.getPublisherId();\n+                    updatedPublisherId = StringUtils.isBlank(publisherId)\n+                            ? publisherId\n+                            : extImp.getMemberId();\n+                    updatedSellerId = extImp.getSellerId();\n+                }\n+                final Imp validImp = validateAndModifyImp(imps.get(i), extImp);\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        boolean anyHasId = false;\n+        if (request.getApp() != null) {\n+            if (StringUtils.isNotBlank(request.getApp().getId())) {\n+                anyHasId = true;\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        final Publisher publisher = site.getPublisher();\n+        if (site.getPublisher() != null) {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(publisher.toBuilder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        } else {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(Publisher.builder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            if (StringUtils.isNotBlank(user.getId())) {\n+                anyHasId = true;\n+            }\n+            final ExtUser ext = user.getExt();\n+            if (ext != null) {\n+                final ExtUserDigiTrust digitrust = ext.getDigitrust();\n+                if (CollectionUtils.isNotEmpty(ext.getEids()) || (digitrust != null\n+                        && StringUtils.isNotBlank(digitrust.getId()))) {\n+                    anyHasId = true;\n+                }\n+            }\n+        }\n+\n+        if (!anyHasId) {\n+            return Result.emptyWithError(BidderError.badInput(\"This request contained no identifier\"));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+        final String urlParameter = StringUtils.isNotBlank(updatedSellerId)\n+                ? \"?sellerid=\" + HttpUtil.encodeUrl(updatedSellerId)\n+                : \"\";\n+        final String uri = String.format(\"%s%s\", endpointUrl, urlParameter);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(uri)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpDmx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), DMX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp validateAndModifyImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp = null;\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (CollectionUtils.isNotEmpty(banner.getFormat())) {\n+                updatedImp = updateImp(imp, extImp).toBuilder().banner(banner).build();\n+            }\n+        }\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            updatedImp = updateImp(imp, extImp).toBuilder().video(video).build();\n+        }\n+        return updatedImp;\n+    }\n+\n+    private Imp updateImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3NzE4Ng==", "bodyText": "Check this above and inline fetchParams method", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489377186", "createdAt": "2020-09-16T11:52:44Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {\n+                    final String publisherId = extImp.getPublisherId();\n+                    updatedPublisherId = StringUtils.isBlank(publisherId)\n+                            ? publisherId\n+                            : extImp.getMemberId();\n+                    updatedSellerId = extImp.getSellerId();\n+                }\n+                final Imp validImp = validateAndModifyImp(imps.get(i), extImp);\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        boolean anyHasId = false;\n+        if (request.getApp() != null) {\n+            if (StringUtils.isNotBlank(request.getApp().getId())) {\n+                anyHasId = true;\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        final Publisher publisher = site.getPublisher();\n+        if (site.getPublisher() != null) {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(publisher.toBuilder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        } else {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(Publisher.builder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            if (StringUtils.isNotBlank(user.getId())) {\n+                anyHasId = true;\n+            }\n+            final ExtUser ext = user.getExt();\n+            if (ext != null) {\n+                final ExtUserDigiTrust digitrust = ext.getDigitrust();\n+                if (CollectionUtils.isNotEmpty(ext.getEids()) || (digitrust != null\n+                        && StringUtils.isNotBlank(digitrust.getId()))) {\n+                    anyHasId = true;\n+                }\n+            }\n+        }\n+\n+        if (!anyHasId) {\n+            return Result.emptyWithError(BidderError.badInput(\"This request contained no identifier\"));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+        final String urlParameter = StringUtils.isNotBlank(updatedSellerId)\n+                ? \"?sellerid=\" + HttpUtil.encodeUrl(updatedSellerId)\n+                : \"\";\n+        final String uri = String.format(\"%s%s\", endpointUrl, urlParameter);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(uri)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpDmx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), DMX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp validateAndModifyImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp = null;\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (CollectionUtils.isNotEmpty(banner.getFormat())) {\n+                updatedImp = updateImp(imp, extImp).toBuilder().banner(banner).build();\n+            }\n+        }\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            updatedImp = updateImp(imp, extImp).toBuilder().video(video).build();\n+        }\n+        return updatedImp;\n+    }\n+\n+    private Imp updateImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp;\n+        if (StringUtils.isNotBlank(extImp.getPublisherId())\n+                || StringUtils.isNotBlank(extImp.getMemberId())) {\n+            updatedImp = fetchParams(imp, extImp);\n+        } else {\n+            throw new PreBidException(\"Missing Params for auction to be send\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4MTAzNw==", "bodyText": "imps.stream()\n                .filter(imp -> Objects.equals(imp.getId(), impId))\n                .map(imp -> imp.getVideo() != null ? BidType.video : BidType.banner)\n                .findFirst()\n                .orElseThrow(() -> new PreBidException(String.format(\"Failed to find impression %s\", impId)));", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489381037", "createdAt": "2020-09-16T11:59:42Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {\n+                    final String publisherId = extImp.getPublisherId();\n+                    updatedPublisherId = StringUtils.isBlank(publisherId)\n+                            ? publisherId\n+                            : extImp.getMemberId();\n+                    updatedSellerId = extImp.getSellerId();\n+                }\n+                final Imp validImp = validateAndModifyImp(imps.get(i), extImp);\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        boolean anyHasId = false;\n+        if (request.getApp() != null) {\n+            if (StringUtils.isNotBlank(request.getApp().getId())) {\n+                anyHasId = true;\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        final Publisher publisher = site.getPublisher();\n+        if (site.getPublisher() != null) {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(publisher.toBuilder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        } else {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(Publisher.builder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            if (StringUtils.isNotBlank(user.getId())) {\n+                anyHasId = true;\n+            }\n+            final ExtUser ext = user.getExt();\n+            if (ext != null) {\n+                final ExtUserDigiTrust digitrust = ext.getDigitrust();\n+                if (CollectionUtils.isNotEmpty(ext.getEids()) || (digitrust != null\n+                        && StringUtils.isNotBlank(digitrust.getId()))) {\n+                    anyHasId = true;\n+                }\n+            }\n+        }\n+\n+        if (!anyHasId) {\n+            return Result.emptyWithError(BidderError.badInput(\"This request contained no identifier\"));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+        final String urlParameter = StringUtils.isNotBlank(updatedSellerId)\n+                ? \"?sellerid=\" + HttpUtil.encodeUrl(updatedSellerId)\n+                : \"\";\n+        final String uri = String.format(\"%s%s\", endpointUrl, urlParameter);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(uri)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpDmx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), DMX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp validateAndModifyImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp = null;\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (CollectionUtils.isNotEmpty(banner.getFormat())) {\n+                updatedImp = updateImp(imp, extImp).toBuilder().banner(banner).build();\n+            }\n+        }\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            updatedImp = updateImp(imp, extImp).toBuilder().video(video).build();\n+        }\n+        return updatedImp;\n+    }\n+\n+    private Imp updateImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp;\n+        if (StringUtils.isNotBlank(extImp.getPublisherId())\n+                || StringUtils.isNotBlank(extImp.getMemberId())) {\n+            updatedImp = fetchParams(imp, extImp);\n+        } else {\n+            throw new PreBidException(\"Missing Params for auction to be send\");\n+        }\n+        return updatedImp;\n+    }\n+\n+    private Imp fetchParams(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp = null;\n+        final String tagId = extImp.getTagId();\n+        if (StringUtils.isNotBlank(tagId)) {\n+            updatedImp = Imp.builder()\n+                    .id(imp.getId())\n+                    .tagid(tagId)\n+                    .ext(imp.getExt())\n+                    .secure(INT_VALUE)\n+                    .build();\n+        }\n+\n+        final String dmxId = extImp.getDmxId();\n+        if (StringUtils.isNotBlank(dmxId)) {\n+            updatedImp = Imp.builder()\n+                    .id(imp.getId())\n+                    .tagid(dmxId)\n+                    .ext(imp.getExt())\n+                    .secure(INT_VALUE)\n+                    .build();\n+        }\n+\n+        return (updatedImp != null && StringUtils.isBlank(updatedImp.getTagid())) ? imp : updatedImp;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final BidResponse bidResponse;\n+        try {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        final List<BidderError> errors = new ArrayList<>();\n+        for (SeatBid seatBid : bidResponse.getSeatbid()) {\n+            for (Bid bid : seatBid.getBid()) {\n+                try {\n+                    final BidType bidType = getBidType(bid.getImpid(), bidRequest.getImp());\n+                    String adm = null;\n+                    if (bidType == BidType.video) {\n+                        adm = getAdm(bid);\n+                    }\n+\n+                    final Bid updatedBid = bid.toBuilder().adm(adm).build();\n+                    final BidderBid bidderBid = BidderBid.of(updatedBid, bidType, DEFAULT_BID_CURRENCY);\n+                    bidderBids.add(bidderBid);\n+                } catch (PreBidException e) {\n+                    errors.add(BidderError.badInput(e.getMessage()));\n+                }\n+            }\n+        }\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private BidResponse decodeBodyToBidResponse(HttpCall<BidRequest> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private BidType getBidType(String impId, List<Imp> imps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4NDcyNA==", "bodyText": "final Bid updatedBid = bidType == BidType.video \n                            ? bid.toBuilder().adm(getAdm(bid)).build()\n                            : bid;", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489384724", "createdAt": "2020-09-16T12:06:39Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Publisher;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUserDigiTrust;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * DmxBidder {@link Bidder} implementation.\n+ */\n+public class DmxBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpDmx>> DMX_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpDmx>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final int INT_VALUE = 1;\n+    private static final String IMP = \"</Impression><Impression><![CDATA[%s]]></Impression>\";\n+    private static final String SEARCH = \"</Impression>\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        if (request.getUser() == null) {\n+            if (request.getApp() == null) {\n+                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        }\n+\n+        final List<Imp> imps = request.getImp();\n+        if (CollectionUtils.isEmpty(imps)) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String updatedPublisherId = null;\n+        String updatedSellerId = null;\n+        for (int i = 0; i < imps.size(); i++) {\n+            try {\n+                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n+                if (i == 0) {\n+                    final String publisherId = extImp.getPublisherId();\n+                    updatedPublisherId = StringUtils.isBlank(publisherId)\n+                            ? publisherId\n+                            : extImp.getMemberId();\n+                    updatedSellerId = extImp.getSellerId();\n+                }\n+                final Imp validImp = validateAndModifyImp(imps.get(i), extImp);\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        boolean anyHasId = false;\n+        if (request.getApp() != null) {\n+            if (StringUtils.isNotBlank(request.getApp().getId())) {\n+                anyHasId = true;\n+            }\n+        }\n+\n+        final Site site = request.getSite();\n+        final Publisher publisher = site.getPublisher();\n+        if (site.getPublisher() != null) {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(publisher.toBuilder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        } else {\n+            request.toBuilder()\n+                    .site(site.toBuilder().publisher(Publisher.builder().id(updatedPublisherId).build()).build())\n+                    .build();\n+        }\n+\n+        final User user = request.getUser();\n+        if (user != null) {\n+            if (StringUtils.isNotBlank(user.getId())) {\n+                anyHasId = true;\n+            }\n+            final ExtUser ext = user.getExt();\n+            if (ext != null) {\n+                final ExtUserDigiTrust digitrust = ext.getDigitrust();\n+                if (CollectionUtils.isNotEmpty(ext.getEids()) || (digitrust != null\n+                        && StringUtils.isNotBlank(digitrust.getId()))) {\n+                    anyHasId = true;\n+                }\n+            }\n+        }\n+\n+        if (!anyHasId) {\n+            return Result.emptyWithError(BidderError.badInput(\"This request contained no identifier\"));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+        final String urlParameter = StringUtils.isNotBlank(updatedSellerId)\n+                ? \"?sellerid=\" + HttpUtil.encodeUrl(updatedSellerId)\n+                : \"\";\n+        final String uri = String.format(\"%s%s\", endpointUrl, urlParameter);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(uri)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpDmx parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), DMX_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp validateAndModifyImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp = null;\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (CollectionUtils.isNotEmpty(banner.getFormat())) {\n+                updatedImp = updateImp(imp, extImp).toBuilder().banner(banner).build();\n+            }\n+        }\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            updatedImp = updateImp(imp, extImp).toBuilder().video(video).build();\n+        }\n+        return updatedImp;\n+    }\n+\n+    private Imp updateImp(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp;\n+        if (StringUtils.isNotBlank(extImp.getPublisherId())\n+                || StringUtils.isNotBlank(extImp.getMemberId())) {\n+            updatedImp = fetchParams(imp, extImp);\n+        } else {\n+            throw new PreBidException(\"Missing Params for auction to be send\");\n+        }\n+        return updatedImp;\n+    }\n+\n+    private Imp fetchParams(Imp imp, ExtImpDmx extImp) {\n+        Imp updatedImp = null;\n+        final String tagId = extImp.getTagId();\n+        if (StringUtils.isNotBlank(tagId)) {\n+            updatedImp = Imp.builder()\n+                    .id(imp.getId())\n+                    .tagid(tagId)\n+                    .ext(imp.getExt())\n+                    .secure(INT_VALUE)\n+                    .build();\n+        }\n+\n+        final String dmxId = extImp.getDmxId();\n+        if (StringUtils.isNotBlank(dmxId)) {\n+            updatedImp = Imp.builder()\n+                    .id(imp.getId())\n+                    .tagid(dmxId)\n+                    .ext(imp.getExt())\n+                    .secure(INT_VALUE)\n+                    .build();\n+        }\n+\n+        return (updatedImp != null && StringUtils.isBlank(updatedImp.getTagid())) ? imp : updatedImp;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final BidResponse bidResponse;\n+        try {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        final List<BidderError> errors = new ArrayList<>();\n+        for (SeatBid seatBid : bidResponse.getSeatbid()) {\n+            for (Bid bid : seatBid.getBid()) {\n+                try {\n+                    final BidType bidType = getBidType(bid.getImpid(), bidRequest.getImp());\n+                    String adm = null;\n+                    if (bidType == BidType.video) {\n+                        adm = getAdm(bid);\n+                    }\n+\n+                    final Bid updatedBid = bid.toBuilder().adm(adm).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4NTQxNA==", "bodyText": "this line is covers NPE which is BUG. Remove from ALL tests", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489385414", "createdAt": "2020-09-16T12:07:57Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/dmx/DmxBidderTest.java", "diffHunk": "@@ -0,0 +1,326 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class DmxBidderTest extends VertxTest {\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private DmxBidder dmxBidder;\n+\n+    @Before\n+    public void setUp() {\n+        dmxBidder = new DmxBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new DmxBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfUserOrAppIsAbsent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .user(User.builder().build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfUserIdIsEmpty() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpDmx.of(\"tagId\", \"dmxId\", \"memberId\", \"publisherId\",\n+                                        \"sellerId\"))))\n+                        .build()))\n+                .user(User.builder().build())\n+                .site(Site.builder().build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4NjA3NA==", "bodyText": "use builder when there are more then 3 parrameters", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489386074", "createdAt": "2020-09-16T12:09:10Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/dmx/DmxBidderTest.java", "diffHunk": "@@ -0,0 +1,326 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class DmxBidderTest extends VertxTest {\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private DmxBidder dmxBidder;\n+\n+    @Before\n+    public void setUp() {\n+        dmxBidder = new DmxBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new DmxBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfUserOrAppIsAbsent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .user(User.builder().build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfUserIdIsEmpty() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpDmx.of(\"tagId\", \"dmxId\", \"memberId\", \"publisherId\",\n+                                        \"sellerId\"))))\n+                        .build()))\n+                .user(User.builder().build())\n+                .site(Site.builder().build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"This request contained no identifier\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldModifyImpIfBannerFormatIsNotEmpty() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(\n+                        Imp.builder()\n+                                .id(\"id\")\n+                                .banner(Banner.builder()\n+                                        .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                        .build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                        ExtImpDmx.of(\"tagId\", \"dmxId\", \"memberId\", \"publisherId\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4NjUzOQ==", "bodyText": "extract long variables for code clearance", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489386539", "createdAt": "2020-09-16T12:10:01Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/dmx/DmxBidderTest.java", "diffHunk": "@@ -0,0 +1,326 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class DmxBidderTest extends VertxTest {\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private DmxBidder dmxBidder;\n+\n+    @Before\n+    public void setUp() {\n+        dmxBidder = new DmxBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new DmxBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfUserOrAppIsAbsent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .user(User.builder().build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfUserIdIsEmpty() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpDmx.of(\"tagId\", \"dmxId\", \"memberId\", \"publisherId\",\n+                                        \"sellerId\"))))\n+                        .build()))\n+                .user(User.builder().build())\n+                .site(Site.builder().build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"This request contained no identifier\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldModifyImpIfBannerFormatIsNotEmpty() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(\n+                        Imp.builder()\n+                                .id(\"id\")\n+                                .banner(Banner.builder()\n+                                        .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                        .build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                        ExtImpDmx.of(\"tagId\", \"dmxId\", \"memberId\", \"publisherId\",\n+                                                \"sellerId\"))))\n+                                .build()))\n+                .user(User.builder().id(\"userId\").build())\n+                .site(Site.builder().build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getId, Imp::getTagid, Imp::getExt, Imp :: getSecure)\n+                .containsOnly(tuple(\"id\", \"dmxId\", mapper.valueToTree(ExtPrebid.of(null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4NjY4OA==", "bodyText": "redundant spaces", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r489386688", "createdAt": "2020-09-16T12:10:15Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/dmx/DmxBidderTest.java", "diffHunk": "@@ -0,0 +1,326 @@\n+package org.prebid.server.bidder.dmx;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.dmx.ExtImpDmx;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class DmxBidderTest extends VertxTest {\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private DmxBidder dmxBidder;\n+\n+    @Before\n+    public void setUp() {\n+        dmxBidder = new DmxBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new DmxBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfUserOrAppIsAbsent() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .user(User.builder().build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfUserIdIsEmpty() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpDmx.of(\"tagId\", \"dmxId\", \"memberId\", \"publisherId\",\n+                                        \"sellerId\"))))\n+                        .build()))\n+                .user(User.builder().build())\n+                .site(Site.builder().build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"This request contained no identifier\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldModifyImpIfBannerFormatIsNotEmpty() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(\n+                        Imp.builder()\n+                                .id(\"id\")\n+                                .banner(Banner.builder()\n+                                        .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                        .build())\n+                                .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                        ExtImpDmx.of(\"tagId\", \"dmxId\", \"memberId\", \"publisherId\",\n+                                                \"sellerId\"))))\n+                                .build()))\n+                .user(User.builder().id(\"userId\").build())\n+                .site(Site.builder().build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = dmxBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getId, Imp::getTagid, Imp::getExt, Imp :: getSecure)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f5a57cbf2d4026d3fbfc3a68d929e518437fc6a"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f2e236d36c8fd7a687bc0e8a236e4dcfc234266", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/0f2e236d36c8fd7a687bc0e8a236e4dcfc234266", "committedDate": "2020-09-19T10:13:47Z", "message": "Merge branch 'master' into add-dmx-bidder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2e737c1f42c4132bd5db73ba4a8671d64689df2", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/c2e737c1f42c4132bd5db73ba4a8671d64689df2", "committedDate": "2020-09-19T11:56:57Z", "message": "Fixing bug and refactoring methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzUxNTY3", "url": "https://github.com/prebid/prebid-server-java/pull/859#pullrequestreview-493351567", "createdAt": "2020-09-22T11:10:47Z", "commit": {"oid": "c2e737c1f42c4132bd5db73ba4a8671d64689df2"}, "state": "DISMISSED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxMDo0OFrOHV1EHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyNTowMlrOHV1eQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MTU0OA==", "bodyText": "can be in 1 line", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r492651548", "createdAt": "2020-09-22T11:10:48Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -62,39 +62,32 @@ public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n \n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n-        final List<BidderError> errors = new ArrayList<>();\n-        final List<Imp> validImps = new ArrayList<>();\n-\n-        if (request.getUser() == null) {\n-            if (request.getApp() == null) {\n-                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n-                return Result.of(Collections.emptyList(), errors);\n-            }\n+        if (request.getUser() == null && request.getApp() == null) {\n+            return Result.emptyWithError(BidderError\n+                    .badInput(\"No user id or app id found. Could not send request to DMX.\"));\n         }\n \n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n         final List<Imp> imps = request.getImp();\n-        if (CollectionUtils.isEmpty(imps)) {\n-            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n-            return Result.of(Collections.emptyList(), errors);\n-        }\n \n         String updatedPublisherId = null;\n         String updatedSellerId = null;\n-        for (int i = 0; i < imps.size(); i++) {\n-            try {\n-                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n-                if (i == 0) {\n-                    final String publisherId = extImp.getPublisherId();\n-                    updatedPublisherId = StringUtils.isBlank(publisherId)\n-                            ? publisherId\n-                            : extImp.getMemberId();\n-                    updatedSellerId = extImp.getSellerId();\n+        try {\n+            final ExtImpDmx extImp = parseImpExt(imps.get(0));\n+            final String publisherId = extImp.getPublisherId();\n+            updatedPublisherId = StringUtils.isBlank(publisherId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2e737c1f42c4132bd5db73ba4a8671d64689df2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MjI2Mw==", "bodyText": "try need to be inside loop.\nJust create two try catch blocks for extraction of publisher and for imps", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r492652263", "createdAt": "2020-09-22T11:12:23Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -62,39 +62,32 @@ public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n \n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n-        final List<BidderError> errors = new ArrayList<>();\n-        final List<Imp> validImps = new ArrayList<>();\n-\n-        if (request.getUser() == null) {\n-            if (request.getApp() == null) {\n-                errors.add(BidderError.badInput(\"No user id or app id found. Could not send request to DMX.\"));\n-                return Result.of(Collections.emptyList(), errors);\n-            }\n+        if (request.getUser() == null && request.getApp() == null) {\n+            return Result.emptyWithError(BidderError\n+                    .badInput(\"No user id or app id found. Could not send request to DMX.\"));\n         }\n \n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n         final List<Imp> imps = request.getImp();\n-        if (CollectionUtils.isEmpty(imps)) {\n-            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n-            return Result.of(Collections.emptyList(), errors);\n-        }\n \n         String updatedPublisherId = null;\n         String updatedSellerId = null;\n-        for (int i = 0; i < imps.size(); i++) {\n-            try {\n-                final ExtImpDmx extImp = parseImpExt(imps.get(i));\n-                if (i == 0) {\n-                    final String publisherId = extImp.getPublisherId();\n-                    updatedPublisherId = StringUtils.isBlank(publisherId)\n-                            ? publisherId\n-                            : extImp.getMemberId();\n-                    updatedSellerId = extImp.getSellerId();\n+        try {\n+            final ExtImpDmx extImp = parseImpExt(imps.get(0));\n+            final String publisherId = extImp.getPublisherId();\n+            updatedPublisherId = StringUtils.isBlank(publisherId)\n+                    ? publisherId\n+                    : extImp.getMemberId();\n+            updatedSellerId = extImp.getSellerId();\n+            for (Imp imp : request.getImp()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2e737c1f42c4132bd5db73ba4a8671d64689df2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1Mzc0Nw==", "bodyText": "you can do smth like this\nupdatedPublisher = site.Publisher == null ? Publisher.builder().id(updatedPublisherId).build() : publisher.toBuilder().id(updatedPublisherId).build()", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r492653747", "createdAt": "2020-09-22T11:15:40Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -105,33 +98,37 @@ public DmxBidder(String endpointUrl, JacksonMapper mapper) {\n         }\n \n         final Site site = request.getSite();\n-        final Publisher publisher = site.getPublisher();\n-        if (site.getPublisher() != null) {\n-            request.toBuilder()\n-                    .site(site.toBuilder().publisher(publisher.toBuilder().id(updatedPublisherId).build()).build())\n-                    .build();\n-        } else {\n-            request.toBuilder()\n-                    .site(site.toBuilder().publisher(Publisher.builder().id(updatedPublisherId).build()).build())\n-                    .build();\n+        if (site != null) {\n+            final Publisher publisher = site.getPublisher();\n+            if (site.getPublisher() != null) {\n+                request.toBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2e737c1f42c4132bd5db73ba4a8671d64689df2"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1NDk4MQ==", "bodyText": "Not that.\nI mean that we can extract ALL related logic to this variable to separate method", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r492654981", "createdAt": "2020-09-22T11:18:22Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -210,7 +208,15 @@ private Imp fetchParams(Imp imp, ExtImpDmx extImp) {\n                     .build();\n         }\n \n-        return (updatedImp != null && StringUtils.isBlank(updatedImp.getTagid())) ? imp : updatedImp;\n+        return updatedImp != null && StringUtils.isBlank(updatedImp.getTagid()) && StringUtils.isBlank(imp.getTagid())\n+                ? null\n+                : updatedImp;\n+    }\n+\n+    private void checkIfHasId(boolean anyHasId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2e737c1f42c4132bd5db73ba4a8671d64689df2"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1ODI0Mg==", "bodyText": "just return upratedImp", "url": "https://github.com/prebid/prebid-server-java/pull/859#discussion_r492658242", "createdAt": "2020-09-22T11:25:02Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/dmx/DmxBidder.java", "diffHunk": "@@ -210,7 +208,15 @@ private Imp fetchParams(Imp imp, ExtImpDmx extImp) {\n                     .build();\n         }\n \n-        return (updatedImp != null && StringUtils.isBlank(updatedImp.getTagid())) ? imp : updatedImp;\n+        return updatedImp != null && StringUtils.isBlank(updatedImp.getTagid()) && StringUtils.isBlank(imp.getTagid())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2e737c1f42c4132bd5db73ba4a8671d64689df2"}, "originalPosition": 162}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c412805826f61f3fe75dd6bc3586e4f7573c4761", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/c412805826f61f3fe75dd6bc3586e4f7573c4761", "committedDate": "2020-09-22T15:13:49Z", "message": "Refactoring code related to site and hasId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd115ef97f062c7d5973ba6affc7f2e6998fe8f7", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/dd115ef97f062c7d5973ba6affc7f2e6998fe8f7", "committedDate": "2020-09-22T15:17:59Z", "message": "Merge branch 'master' into add-dmx-bidder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9092cdff0fb9e88c5d634d2d3b5dec15c3a3794b", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/9092cdff0fb9e88c5d634d2d3b5dec15c3a3794b", "committedDate": "2020-09-22T15:59:28Z", "message": "Merge branch 'master' into add-dmx-bidder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f04a74382f19600568aac9187cb1a83fe0c5b0ac", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/f04a74382f19600568aac9187cb1a83fe0c5b0ac", "committedDate": "2020-09-22T16:05:20Z", "message": "Merge branch 'master' into add-dmx-bidder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDg1ODkw", "url": "https://github.com/prebid/prebid-server-java/pull/859#pullrequestreview-494485890", "createdAt": "2020-09-23T09:47:12Z", "commit": {"oid": "f04a74382f19600568aac9187cb1a83fe0c5b0ac"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f3bd95e22d8955f61987c4a54033cdf55844c53", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/9f3bd95e22d8955f61987c4a54033cdf55844c53", "committedDate": "2020-09-23T10:20:06Z", "message": "Merge branch 'master' into add-dmx-bidder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceae08902b2502a3c38a9eef5b3191d34ed8d6e0", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/ceae08902b2502a3c38a9eef5b3191d34ed8d6e0", "committedDate": "2020-09-23T10:41:03Z", "message": "Clean code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTI2NzM3", "url": "https://github.com/prebid/prebid-server-java/pull/859#pullrequestreview-494526737", "createdAt": "2020-09-23T10:41:39Z", "commit": {"oid": "ceae08902b2502a3c38a9eef5b3191d34ed8d6e0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3124, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}