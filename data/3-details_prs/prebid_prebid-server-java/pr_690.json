{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MTE5NTc3", "number": 690, "title": "Add ValueImpression Bidder and tests", "bodyText": "Add ValueImpression Bidder and tests to keep up with Go version.", "createdAt": "2020-04-23T18:55:42Z", "url": "https://github.com/prebid/prebid-server-java/pull/690", "merged": true, "mergeCommit": {"oid": "5401572b203b837956a6158b008a852ac3d39b76"}, "closed": true, "closedAt": "2020-06-24T15:41:12Z", "author": {"login": "AndriyPavlyuk"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcahi6jgH2gAyNDA4MTE5NTc3OjhjZTY2MDU1Nzc0OTM2NTVmZjBiYmI1OTcxNGIyNDNiMTg2YzAzYzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcub62fgH2gAyNDA4MTE5NTc3Ojg0NjNhNDgzYzBiYTFjMjk1NjhkNmFmNjZiYmQyNmNiNGJhMTVmOTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8ce6605577493655ff0bbb59714b243b186c03c5", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/8ce6605577493655ff0bbb59714b243b186c03c5", "committedDate": "2020-04-23T18:53:07Z", "message": "Add ValueImpression Bidder and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODY2NTMz", "url": "https://github.com/prebid/prebid-server-java/pull/690#pullrequestreview-399866533", "createdAt": "2020-04-24T11:33:35Z", "commit": {"oid": "8ce6605577493655ff0bbb59714b243b186c03c5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTozMzozNVrOGLTaSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo0OTo0MFrOGLT9yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUwNTU0NA==", "bodyText": "Not equal to Go version", "url": "https://github.com/prebid/prebid-server-java/pull/690#discussion_r414505544", "createdAt": "2020-04-24T11:33:35Z", "author": {"login": "DGarbar"}, "path": "src/main/resources/bidder-config/valueimpression.yaml", "diffHunk": "@@ -0,0 +1,24 @@\n+adapters:\n+  valueimpression:\n+    enabled: false\n+    endpoint: https://y.one.impact-ad.jp/hbs_imp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce6605577493655ff0bbb59714b243b186c03c5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUwNTU4Nw==", "bodyText": "Not equal to Go version", "url": "https://github.com/prebid/prebid-server-java/pull/690#discussion_r414505587", "createdAt": "2020-04-24T11:33:39Z", "author": {"login": "DGarbar"}, "path": "src/main/resources/bidder-config/valueimpression.yaml", "diffHunk": "@@ -0,0 +1,24 @@\n+adapters:\n+  valueimpression:\n+    enabled: false\n+    endpoint: https://y.one.impact-ad.jp/hbs_imp\n+    pbs-enforces-gdpr: true\n+    modifying-vast-xml-allowed: true\n+    deprecated-names:\n+    aliases:\n+    meta-info:\n+      maintainer-email: info@valueimpression.com\n+      app-media-types:\n+        - banner\n+        - video\n+      site-media-types:\n+        - banner\n+        - video\n+      supported-vendors:\n+      vendor-id: 0\n+    usersync:\n+      url: https://y.one.impact-ad.jp/hbs_sc?gdpr={{gdpr}}&gdpr_consent={{gdpr_consent}}&us_privacy={{us_privacy}}&redirectUri=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce6605577493655ff0bbb59714b243b186c03c5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxMjM1Ng==", "bodyText": "You just rewrite ext in imp.\nDoing this, we can exclude all fields from ext that is not in the model. But I think we can simplify this just validating that ext can be parsed.\nOr we can keep this logic. Mb they really doing this on purpose. But still, make use of Stream API instead for creating ArrayList", "url": "https://github.com/prebid/prebid-server-java/pull/690#discussion_r414512356", "createdAt": "2020-04-24T11:45:44Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/bidder/valueimpression/ValueImpressionBidder.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package org.prebid.server.bidder.valueimpression;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.valueimpression.ExtImpValueImpression;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+import org.springframework.util.CollectionUtils;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ValueImpressionBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpValueImpression>> VALUE_IMPRESSION_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpValueImpression>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public ValueImpressionBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        try {\n+            final BidRequest bidRequest = processRequest(request);\n+\n+            return Result.of(\n+                    Collections.singletonList(HttpRequest.<BidRequest>builder()\n+                            .method(HttpMethod.POST)\n+                            .uri(endpointUrl)\n+                            .headers(HttpUtil.headers())\n+                            .body(mapper.encode(bidRequest))\n+                            .payload(request)\n+                            .build()),\n+                    Collections.emptyList()\n+            );\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+    }\n+\n+    private BidRequest processRequest(BidRequest bidRequest) {\n+        if (CollectionUtils.isEmpty(bidRequest.getImp())) {\n+            throw new PreBidException(\"No valid impressions in the bid request\");\n+        }\n+        final List<Imp> validImpList = new ArrayList<>();\n+        for (final Imp imp : bidRequest.getImp()) {\n+            ExtImpValueImpression extImpValueImpression = parseImp(imp);\n+            validImpList.add(imp.toBuilder().ext(mapper.mapper().valueToTree(extImpValueImpression)).build());\n+        }\n+        return bidRequest.toBuilder().imp(validImpList).build();\n+    }\n+\n+    private ExtImpValueImpression parseImp(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), VALUE_IMPRESSION_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce6605577493655ff0bbb59714b243b186c03c5"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxNDYzMw==", "bodyText": "Native ?", "url": "https://github.com/prebid/prebid-server-java/pull/690#discussion_r414514633", "createdAt": "2020-04-24T11:49:40Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/valueimpression/ValueImpressionBidderTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+package org.prebid.server.bidder.valueimpression;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.cpmstar.CpmStarBidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.cpmstar.ExtImpCpmStar;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class ValueImpressionBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private ValueImpressionBidder valueImpressionBidder;\n+\n+    @Before\n+    public void setUp() {\n+        valueImpressionBidder = new ValueImpressionBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new CpmStarBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = valueImpressionBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No valid impressions in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = valueImpressionBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = valueImpressionBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = valueImpressionBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenBidHaveNotSupportedBidType() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").audio(Audio.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = valueImpressionBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"bid id=null could not find valid impid=123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWhenNoCorrespondingId() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = valueImpressionBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"bid id=null could not find valid impid=123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = valueImpressionBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = valueImpressionBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), video, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnNativeBidIfNativeIsPresentInRequestImp() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce6605577493655ff0bbb59714b243b186c03c5"}, "originalPosition": 183}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "389f61c3fc6bea37f8f8a3b701a232ba2b338971", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/389f61c3fc6bea37f8f8a3b701a232ba2b338971", "committedDate": "2020-04-24T16:20:16Z", "message": "Refactoring bidder and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NzM5NDAz", "url": "https://github.com/prebid/prebid-server-java/pull/690#pullrequestreview-405739403", "createdAt": "2020-05-05T12:30:04Z", "commit": {"oid": "389f61c3fc6bea37f8f8a3b701a232ba2b338971"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjozMDowNVrOGQnF4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjozMDowNVrOGQnF4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3MDg4Mw==", "bodyText": "probably it is ReturnBannerBidIfBanner", "url": "https://github.com/prebid/prebid-server-java/pull/690#discussion_r420070883", "createdAt": "2020-05-05T12:30:05Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/bidder/valueimpression/ValueImpressionBidderTest.java", "diffHunk": "@@ -180,7 +180,7 @@ public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws Js\n     }\n \n     @Test\n-    public void makeBidsShouldReturnNativeBidIfNativeIsPresentInRequestImp() throws JsonProcessingException {\n+    public void makeBidsShouldReturnNativeBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389f61c3fc6bea37f8f8a3b701a232ba2b338971"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78a3dee3464e9acac4a0399b5fc4cb928251798e", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/78a3dee3464e9acac4a0399b5fc4cb928251798e", "committedDate": "2020-05-05T15:31:55Z", "message": "Fix typo in test name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTE2ODYx", "url": "https://github.com/prebid/prebid-server-java/pull/690#pullrequestreview-406516861", "createdAt": "2020-05-06T11:20:15Z", "commit": {"oid": "78a3dee3464e9acac4a0399b5fc4cb928251798e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4a4d8e793bd59b7ae49e504ed2a2ee9ab6837bc", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/b4a4d8e793bd59b7ae49e504ed2a2ee9ab6837bc", "committedDate": "2020-06-24T15:35:42Z", "message": "Merge branch 'master' into add-valueimpression-bidder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8463a483c0ba1c29568d6af66bbd26cb4ba15f92", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/8463a483c0ba1c29568d6af66bbd26cb4ba15f92", "committedDate": "2020-06-24T15:38:19Z", "message": "Add pbs-enforces-ccpa property to valueimpression.yaml file"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3157, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}