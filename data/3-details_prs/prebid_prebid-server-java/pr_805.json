{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTQ1NDM3", "number": 805, "title": "Add Lunamedia bidder", "bodyText": "The code of Lunamedia Bidder is the same as Ninthdecimal Bidder.", "createdAt": "2020-07-10T16:59:30Z", "url": "https://github.com/prebid/prebid-server-java/pull/805", "merged": true, "mergeCommit": {"oid": "1f87f33d721ca5c25cc0ec08c532cf1a04579432"}, "closed": true, "closedAt": "2020-09-15T17:24:53Z", "author": {"login": "AndriyPavlyuk"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczmoUVgH2gAyNDQ3NTQ1NDM3OmI4M2FhZjNkMDA3MTc5MjI0MmY2OTEzYmUzNWQ1OWY3YjhiMTc3MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJLG34gH2gAyNDQ3NTQ1NDM3OmMwMWEzM2RjOTI2YzQxNzU3MTEyYWFjZGI2N2RlYmYyMmY2ZjM5MjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/b83aaf3d0071792242f6913be35d59f7b8b17710", "committedDate": "2020-07-10T16:56:39Z", "message": "Add LunamediaBidder and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1ODI5NzUy", "url": "https://github.com/prebid/prebid-server-java/pull/805#pullrequestreview-485829752", "createdAt": "2020-09-10T11:20:13Z", "commit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMToyMDoxM1rOHPu5Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoxMjo1MFrOHPwk_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI1OTAxOQ==", "bodyText": "Pls rename to IMP_EXT_TYPE_REFERENCE", "url": "https://github.com/prebid/prebid-server-java/pull/805#discussion_r486259019", "createdAt": "2020-09-10T11:20:13Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/lunamedia/LunamediaBidder.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.prebid.server.bidder.lunamedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.lunamedia.ExtImpLunamedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class LunamediaBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpLunamedia>> NINTHDECIMAL_EXT_TYPE_REFERENCE = new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2MDQ0Ng==", "bodyText": "Pls remove this checking since it is already verified by org.prebid.server.validation.RequestValidator so no need to do it in each bidder.", "url": "https://github.com/prebid/prebid-server-java/pull/805#discussion_r486260446", "createdAt": "2020-09-10T11:23:00Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/lunamedia/LunamediaBidder.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.prebid.server.bidder.lunamedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.lunamedia.ExtImpLunamedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class LunamediaBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpLunamedia>> NINTHDECIMAL_EXT_TYPE_REFERENCE = new\n+            TypeReference<ExtPrebid<?, ExtImpLunamedia>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public LunamediaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2MTE2NA==", "bodyText": "Seems we need to rename method name to impExtToImps(..).\nWe don't need to pass whole BidRequest object as method argument here since we use only request.getImp().", "url": "https://github.com/prebid/prebid-server-java/pull/805#discussion_r486261164", "createdAt": "2020-09-10T11:24:28Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/lunamedia/LunamediaBidder.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.prebid.server.bidder.lunamedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.lunamedia.ExtImpLunamedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class LunamediaBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpLunamedia>> NINTHDECIMAL_EXT_TYPE_REFERENCE = new\n+            TypeReference<ExtPrebid<?, ExtImpLunamedia>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public LunamediaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+        try {\n+            final Map<ExtImpLunamedia, List<Imp>> impToExtImp = getImpToExtImp(request, errors);\n+            httpRequests.addAll(buildBidderRequests(request, impToExtImp));\n+        } catch (PreBidException e) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private Map<ExtImpLunamedia, List<Imp>> getImpToExtImp(BidRequest request, List<BidderError> errors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2NTQ4Nw==", "bodyText": "Since this method is called, no reason to check banner != null", "url": "https://github.com/prebid/prebid-server-java/pull/805#discussion_r486265487", "createdAt": "2020-09-10T11:33:09Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/lunamedia/LunamediaBidder.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.prebid.server.bidder.lunamedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.lunamedia.ExtImpLunamedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class LunamediaBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpLunamedia>> NINTHDECIMAL_EXT_TYPE_REFERENCE = new\n+            TypeReference<ExtPrebid<?, ExtImpLunamedia>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public LunamediaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+        try {\n+            final Map<ExtImpLunamedia, List<Imp>> impToExtImp = getImpToExtImp(request, errors);\n+            httpRequests.addAll(buildBidderRequests(request, impToExtImp));\n+        } catch (PreBidException e) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private Map<ExtImpLunamedia, List<Imp>> getImpToExtImp(BidRequest request, List<BidderError> errors) {\n+        final Map<ExtImpLunamedia, List<Imp>> extToListOfUpdatedImp = new HashMap<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpLunamedia extImpLunamedia = parseAndValidateImpExt(imp);\n+                final Imp updatedImp = updateImp(imp);\n+\n+                extToListOfUpdatedImp.putIfAbsent(extImpLunamedia, new ArrayList<>());\n+                extToListOfUpdatedImp.get(extImpLunamedia).add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (extToListOfUpdatedImp.isEmpty()) {\n+            throw new PreBidException(\"No appropriate impressions\");\n+        }\n+\n+        return extToListOfUpdatedImp;\n+    }\n+\n+    private ExtImpLunamedia parseAndValidateImpExt(Imp imp) {\n+        final ExtImpLunamedia extImpLunamedia;\n+        try {\n+            extImpLunamedia = mapper.mapper().convertValue(imp.getExt(), NINTHDECIMAL_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        if (StringUtils.isBlank(extImpLunamedia.getPubId())) {\n+            throw new PreBidException(\"No pubid value provided\");\n+        }\n+\n+        return extImpLunamedia;\n+    }\n+\n+    private static Imp updateImp(Imp imp) {\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder().ext(null);\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            return impBuilder.banner(null)\n+                    .audio(null)\n+                    .xNative(null)\n+                    .build();\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            return impBuilder.banner(modifyImpBanner(banner)).build();\n+        }\n+\n+        throw new PreBidException(\"Unsupported impression has been received\");\n+    }\n+\n+    private static Banner modifyImpBanner(Banner banner) {\n+        if (banner != null && (banner.getW() == null || banner.getH() == null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4MTg3Mg==", "bodyText": "Pls fix typo in impExtAndListOfImo.", "url": "https://github.com/prebid/prebid-server-java/pull/805#discussion_r486281872", "createdAt": "2020-09-10T12:03:51Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/lunamedia/LunamediaBidder.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.prebid.server.bidder.lunamedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.lunamedia.ExtImpLunamedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class LunamediaBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpLunamedia>> NINTHDECIMAL_EXT_TYPE_REFERENCE = new\n+            TypeReference<ExtPrebid<?, ExtImpLunamedia>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public LunamediaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+        try {\n+            final Map<ExtImpLunamedia, List<Imp>> impToExtImp = getImpToExtImp(request, errors);\n+            httpRequests.addAll(buildBidderRequests(request, impToExtImp));\n+        } catch (PreBidException e) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private Map<ExtImpLunamedia, List<Imp>> getImpToExtImp(BidRequest request, List<BidderError> errors) {\n+        final Map<ExtImpLunamedia, List<Imp>> extToListOfUpdatedImp = new HashMap<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpLunamedia extImpLunamedia = parseAndValidateImpExt(imp);\n+                final Imp updatedImp = updateImp(imp);\n+\n+                extToListOfUpdatedImp.putIfAbsent(extImpLunamedia, new ArrayList<>());\n+                extToListOfUpdatedImp.get(extImpLunamedia).add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (extToListOfUpdatedImp.isEmpty()) {\n+            throw new PreBidException(\"No appropriate impressions\");\n+        }\n+\n+        return extToListOfUpdatedImp;\n+    }\n+\n+    private ExtImpLunamedia parseAndValidateImpExt(Imp imp) {\n+        final ExtImpLunamedia extImpLunamedia;\n+        try {\n+            extImpLunamedia = mapper.mapper().convertValue(imp.getExt(), NINTHDECIMAL_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        if (StringUtils.isBlank(extImpLunamedia.getPubId())) {\n+            throw new PreBidException(\"No pubid value provided\");\n+        }\n+\n+        return extImpLunamedia;\n+    }\n+\n+    private static Imp updateImp(Imp imp) {\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder().ext(null);\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            return impBuilder.banner(null)\n+                    .audio(null)\n+                    .xNative(null)\n+                    .build();\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            return impBuilder.banner(modifyImpBanner(banner)).build();\n+        }\n+\n+        throw new PreBidException(\"Unsupported impression has been received\");\n+    }\n+\n+    private static Banner modifyImpBanner(Banner banner) {\n+        if (banner != null && (banner.getW() == null || banner.getH() == null)) {\n+            final Banner.BannerBuilder bannerBuilder = banner.toBuilder();\n+            final List<Format> originalFormat = banner.getFormat();\n+\n+            if (CollectionUtils.isEmpty(originalFormat)) {\n+                throw new PreBidException(\"Expected at least one banner.format entry or explicit w/h\");\n+            }\n+\n+            final List<Format> formatSkipFirst = originalFormat.subList(1, originalFormat.size());\n+            bannerBuilder.format(formatSkipFirst);\n+\n+            Format firstFormat = originalFormat.get(0);\n+            bannerBuilder.w(firstFormat.getW());\n+            bannerBuilder.h(firstFormat.getH());\n+\n+            return bannerBuilder.build();\n+        }\n+\n+        return banner;\n+    }\n+\n+    private List<HttpRequest<BidRequest>> buildBidderRequests(BidRequest bidRequest,\n+                                                              Map<ExtImpLunamedia, List<Imp>> impExtToListOfImps) {\n+        final List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+\n+        for (Map.Entry<ExtImpLunamedia, List<Imp>> impExtAndListOfImo : impExtToListOfImps.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NDA1OQ==", "bodyText": "Pls add &us_privacy={{us_privacy}} macro.", "url": "https://github.com/prebid/prebid-server-java/pull/805#discussion_r486284059", "createdAt": "2020-09-10T12:08:13Z", "author": {"login": "rpanchyk"}, "path": "src/main/resources/bidder-config/lunamedia.yaml", "diffHunk": "@@ -0,0 +1,25 @@\n+adapters:\n+  lunamedia:\n+    enabled: false\n+    endpoint: http://api.lunamedia.io/xp/get?pubid=\n+    pbs-enforces-gdpr: true\n+    pbs-enforces-ccpa: true\n+    modifying-vast-xml-allowed: true\n+    deprecated-names:\n+    aliases:\n+    meta-info:\n+      maintainer-email: josh@lunamedia.io\n+      app-media-types:\n+        - banner\n+        - video\n+      site-media-types:\n+        - banner\n+        - video\n+      supported-vendors:\n+      vendor-id: 0\n+    usersync:\n+      url: https://api.lunamedia.io/xp/user-sync?redirect=\n+      redirect-url: /setuid?bidder=lunamedia&gdpr={{gdpr}}&gdpr_consent={{gdpr_consent}}&uid=$UID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NTUyNA==", "bodyText": "It not strongly required to name the field camel case,  pubid if fine. So no annotation will be needed.", "url": "https://github.com/prebid/prebid-server-java/pull/805#discussion_r486285524", "createdAt": "2020-09-10T12:10:49Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/lunamedia/ExtImpLunamedia.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.prebid.server.proto.openrtb.ext.request.lunamedia;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+/**\n+ * Defines the contract for bidRequest.imp[i].ext.lunamedia\n+ */\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class ExtImpLunamedia {\n+\n+    @JsonProperty(\"pubid\")\n+    String pubId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NjAxOA==", "bodyText": "Fix bidder name or remove the comment.", "url": "https://github.com/prebid/prebid-server-java/pull/805#discussion_r486286018", "createdAt": "2020-09-10T12:11:45Z", "author": {"login": "rpanchyk"}, "path": "src/test/java/org/prebid/server/it/LunamediaTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.IOException;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToIgnoreCase;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class LunamediaTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromLunamedia() throws IOException, JSONException {\n+        // given\n+        // ninthdecimal bid response for imp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NjU4OQ==", "bodyText": "We don't need currency anymore here.", "url": "https://github.com/prebid/prebid-server-java/pull/805#discussion_r486286589", "createdAt": "2020-09-10T12:12:50Z", "author": {"login": "rpanchyk"}, "path": "src/test/resources/org/prebid/server/it/openrtb2/lunamedia/test-auction-lunamedia-request.json", "diffHunk": "@@ -0,0 +1,96 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"testimpid\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 320,\n+            \"h\": 250\n+          },\n+          {\n+            \"w\": 320,\n+            \"h\": 300\n+          }\n+        ],\n+        \"w\": 320,\n+        \"h\": 250\n+      },\n+      \"ext\": {\n+        \"lunamedia\": {\n+          \"pubid\": \"19f1b372c7548ec1fe734d2c9f8dc688\",\n+          \"placement\": \"dummyplacement\"\n+        }\n+      },\n+      \"tagid\": \"impId021\"\n+    }\n+  ],\n+  \"device\": {\n+    \"pxratio\": 4.2,\n+    \"dnt\": 2,\n+    \"language\": \"en\",\n+    \"ifa\": \"ifaId\"\n+  },\n+  \"site\": {\n+    \"publisher\": {\n+      \"id\": \"publisherId\"\n+    }\n+  },\n+  \"at\": 1,\n+  \"tmax\": 5000,\n+  \"cur\": [\n+    \"USD\"\n+  ],\n+  \"source\": {\n+    \"fd\": 1,\n+    \"tid\": \"tid\"\n+  },\n+  \"ext\": {\n+    \"prebid\": {\n+      \"currency\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1ODc5NDUz", "url": "https://github.com/prebid/prebid-server-java/pull/805#pullrequestreview-485879453", "createdAt": "2020-09-10T12:32:34Z", "commit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjozMjozNFrOHPxSNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjozMjozNFrOHPxSNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5ODE2Ng==", "bodyText": "PLs change the type to iframe according to Go config.", "url": "https://github.com/prebid/prebid-server-java/pull/805#discussion_r486298166", "createdAt": "2020-09-10T12:32:34Z", "author": {"login": "rpanchyk"}, "path": "src/main/resources/bidder-config/lunamedia.yaml", "diffHunk": "@@ -0,0 +1,25 @@\n+adapters:\n+  lunamedia:\n+    enabled: false\n+    endpoint: http://api.lunamedia.io/xp/get?pubid=\n+    pbs-enforces-gdpr: true\n+    pbs-enforces-ccpa: true\n+    modifying-vast-xml-allowed: true\n+    deprecated-names:\n+    aliases:\n+    meta-info:\n+      maintainer-email: josh@lunamedia.io\n+      app-media-types:\n+        - banner\n+        - video\n+      site-media-types:\n+        - banner\n+        - video\n+      supported-vendors:\n+      vendor-id: 0\n+    usersync:\n+      url: https://api.lunamedia.io/xp/user-sync?redirect=\n+      redirect-url: /setuid?bidder=lunamedia&gdpr={{gdpr}}&gdpr_consent={{gdpr_consent}}&uid=$UID\n+      cookie-family-name: lunamedia\n+      type: redirect", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83aaf3d0071792242f6913be35d59f7b8b17710"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d5ea071a3618360e7c32cd33d37c31325486150", "author": {"user": {"login": "AndriyPavlyuk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/7d5ea071a3618360e7c32cd33d37c31325486150", "committedDate": "2020-09-11T07:48:54Z", "message": "Small refactoring code and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NzAxMjUz", "url": "https://github.com/prebid/prebid-server-java/pull/805#pullrequestreview-486701253", "createdAt": "2020-09-11T10:47:06Z", "commit": {"oid": "7d5ea071a3618360e7c32cd33d37c31325486150"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c01a33dc926c41757112aacdb67debf22f6f3922", "author": {"user": {"login": "rpanchyk", "name": null}}, "url": "https://github.com/prebid/prebid-server-java/commit/c01a33dc926c41757112aacdb67debf22f6f3922", "committedDate": "2020-09-15T17:19:01Z", "message": "Merge branch 'master' into add-lunamedia-bidder"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3077, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}