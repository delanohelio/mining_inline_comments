{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NzkyNTQ4", "number": 635, "reviewThreads": {"totalCount": 55, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDozMDowNVrODoqb5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxNDowOFrODt3a5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTY0OTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDozMDowNVrOF3WOWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDozMDowNVrOF3WOWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4MDEyMw==", "bodyText": "Check your code style settings.\nThis do not need to change.", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393580123", "createdAt": "2020-03-17T10:30:05Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -1,5 +1,9 @@\n package org.prebid.server.auction;\n \n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.lang3.BooleanUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTc0MjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebid.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDo1ODowM1rOF3XKTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDo1ODowM1rOF3XKTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NTQ3MA==", "bodyText": "Change to Long and auctiontimestamp", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393595470", "createdAt": "2020-03-17T10:58:03Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebid.java", "diffHunk": "@@ -55,6 +55,11 @@\n      */\n     List<ExtRequestPrebidSchain> schains;\n \n+    /**\n+     * Defines the contract for bidrequest.ext.prebid.timestamp\n+     */\n+    long timestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTc0OTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/ExchangeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowMDoxOFrOF3XPCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowMDoxOFrOF3XPCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NjY4MQ==", "bodyText": "prebid.getTimestamp()can be missing also.\nSo you need to create timestamp if timestamp value is null.", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393596681", "createdAt": "2020-03-17T11:00:18Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/ExchangeService.java", "diffHunk": "@@ -705,6 +707,15 @@ private static ExtRequestTargeting targeting(ExtBidRequest requestExt) {\n         return prebid != null ? prebid.getTargeting() : null;\n     }\n \n+    /**\n+     * Extracts {@link ExtRequestPrebid} from {@link ExtBidRequest} model.\n+     */\n+    private static long auctionTimestamp(ExtBidRequest requestExt) {\n+        final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n+        final long auctionTimestamp = prebid != null ? prebid.getTimestamp() : Instant.now().toEpochMilli();\n+        return auctionTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTc1MzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowMTo0NFrOF3XR-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowMTo0NFrOF3XR-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NzQzMw==", "bodyText": "rename to auctionTimestamp", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393597433", "createdAt": "2020-03-17T11:01:44Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -167,16 +167,17 @@ public String getCachedAssetURLTemplate() {\n      * The returned result will always have the number of elements equals putObjects list size.\n      */\n     public Future<BidCacheResponse> cachePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                                    String accountId, Timeout timeout) {\n-        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate, accountId);\n+                                                    String accountId, Timeout timeout, long timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTc1Mzk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowMTo1NFrOF3XSPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowMTo1NFrOF3XSPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NzUwMQ==", "bodyText": "rename to auctionTimestamp", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393597501", "createdAt": "2020-03-17T11:01:54Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -167,16 +167,17 @@ public String getCachedAssetURLTemplate() {\n      * The returned result will always have the number of elements equals putObjects list size.\n      */\n     public Future<BidCacheResponse> cachePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                                    String accountId, Timeout timeout) {\n-        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate, accountId);\n+                                                    String accountId, Timeout timeout, long timestamp) {\n+        final List<PutObject> updatedPutObjects = updatePutObjects(putObjects, biddersAllowingVastUpdate,\n+                accountId, timestamp);\n         return makeRequest(BidCacheRequest.of(updatedPutObjects), updatedPutObjects.size(), timeout);\n     }\n \n     /**\n      * Modify VAST value in putObjects.\n      */\n     private List<PutObject> updatePutObjects(List<PutObject> putObjects, Set<String> biddersAllowingVastUpdate,\n-                                             String accountId) {\n+                                             String accountId, long timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTc1NDQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowMjowNFrOF3XSig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowMjowNFrOF3XSig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NzU3OA==", "bodyText": "rename to auctionTimestamp", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393597578", "createdAt": "2020-03-17T11:02:04Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -199,7 +201,8 @@ public String getCachedAssetURLTemplate() {\n      * Makes cache for OpenRTB {@link com.iab.openrtb.response.Bid}s.\n      */\n     public Future<CacheServiceResult> cacheBidsOpenrtb(List<com.iab.openrtb.response.Bid> bids, List<Imp> imps,\n-                                                       CacheContext cacheContext, Account account, Timeout timeout) {\n+                                                       CacheContext cacheContext, Account account, Timeout timeout,\n+                                                       long timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTc1Nzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowMzoxMlrOF3XU1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowMzoxMlrOF3XU1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5ODE2NA==", "bodyText": "do not change style.\nprivate Future<CacheServiceResult> doCacheOpenrtb(List<CacheBid> bids, List<CacheBid> videoBids,\n                                                      Map<String, List<String>> bidderToVideoBidIdsToModify,\n                                                      String accountId, Timeout timeout, long auctionTimestamp)", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393598164", "createdAt": "2020-03-17T11:03:12Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -298,11 +301,13 @@ private CacheBid toCacheBid(com.iab.openrtb.response.Bid bid, Map<String, Intege\n      * The returned result will always have the number of elements equals to sum of sizes of bids and video bids.\n      */\n     private Future<CacheServiceResult> doCacheOpenrtb(\n-            List<CacheBid> bids, List<CacheBid> videoBids, List<String> videoBidIdsToModify, String accountId,\n-            Timeout timeout) {\n+            List<CacheBid> bids, List<CacheBid> videoBids,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTc2MDYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowNDoxMFrOF3XWzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowNDoxMFrOF3XWzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5ODY2OQ==", "bodyText": "rename to auctionTimestamp", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393598669", "createdAt": "2020-03-17T11:04:10Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -392,8 +397,9 @@ private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid) {\n     /**\n      * Makes XML type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request.\n      */\n-    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid, List<String> videoBidIdsToModify,\n-                                                String accountId) {\n+    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid,\n+                                                Map<String, List<String>> bidderToVideoBidIdsToModify,\n+                                                String accountId, long timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTc2Njk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowNjoyN1rOF3XbOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowNjoyN1rOF3XbOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5OTgwMQ==", "bodyText": "I like usage of And word when we are working with Entry. nice", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393599801", "createdAt": "2020-03-17T11:06:27Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -407,8 +413,11 @@ private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid, List<String> vide\n         }\n \n         final String bidId = bid.getId();\n-        if (CollectionUtils.isNotEmpty(videoBidIdsToModify) && videoBidIdsToModify.contains(bidId)) {\n-            vastXml = modifyVastXml(vastXml, bidId, accountId);\n+        for (Map.Entry<String, List<String>> biddersAndBidIds : bidderToVideoBidIdsToModify.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTc4NTM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMToxMjoxMlrOF3Xm4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMToxMjoxMlrOF3Xm4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwMjc4Ng==", "bodyText": "final String vastUrlTracking = eventsService.vastUrlTracking(bidId, bidder, accountId, timestamp);\n    final String impressionUrl = \"<![CDATA[\" + vastUrlTracking + \"]]>\";", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393602786", "createdAt": "2020-03-17T11:12:12Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -427,7 +436,8 @@ private String modifyVastXml(String stringValue, String bidId, String accountId)\n             return stringValue;\n         }\n \n-        final String impressionUrl = \"<![CDATA[\" + eventsService.vastUrlTracking(bidId, accountId) + \"]]>\";\n+        final String impressionUrl = \"<![CDATA[\" + eventsService.vastUrlTracking(bidId, bidder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTc5NDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/events/EventRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMToxNTowM1rOF3Xsag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMToxNTowM1rOF3Xsag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwNDIwMg==", "bodyText": "I am not sure if it good idea to use primitives.", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393604202", "createdAt": "2020-03-17T11:15:03Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/events/EventRequest.java", "diffHunk": "@@ -14,12 +14,17 @@\n \n     String bidId;\n \n+    String bidder;\n+\n     String accountId;\n \n     Format format;\n \n     Analytics analytics;\n \n+    // According to requirements can not be null\n+    long timestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMwNDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/events/EventUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0MTo0OVrOF3cwOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0MTo0OVrOF3cwOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NzA5OA==", "bodyText": "Why this method is never used ?", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393687098", "createdAt": "2020-03-17T13:41:49Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/events/EventUtil.java", "diffHunk": "@@ -50,6 +52,14 @@ public static void validateBidId(RoutingContext context) {\n         }\n     }\n \n+    public static void validateBiddder(RoutingContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDM5NTU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/events/EventUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDowMzo0N1rOF3drLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDowMzo0N1rOF3drLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwMjE4OA==", "bodyText": "Dot you need to update TEMPLATE_URL to use ts and bidder parameters?\nAnd toUrl method", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393702188", "createdAt": "2020-03-17T14:03:47Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/events/EventUtil.java", "diffHunk": "@@ -18,6 +19,7 @@\n     private static final String IMP_TYPE = \"imp\";\n \n     private static final String BID_ID_PARAMETER = \"b\";\n+    private static final String BIDDER_PARAMETER = \"bidder\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQyMjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/events/EventUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxMDowOFrOF3d8rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxMDowOFrOF3d8rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNjY3MA==", "bodyText": "Are you sure, you do not get it from url as eventTimeMillis ?", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393706670", "createdAt": "2020-03-17T14:10:08Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/events/EventUtil.java", "diffHunk": "@@ -93,9 +103,11 @@ public static EventRequest from(RoutingContext context) {\n         return EventRequest.builder()\n                 .type(type)\n                 .bidId(queryParams.get(BID_ID_PARAMETER))\n+                .bidder(queryParams.get(BIDDER_PARAMETER))\n                 .accountId(queryParams.get(ACCOUNT_ID_PARAMETER))\n                 .format(format)\n                 .analytics(analytics)\n+                .timestamp(Instant.now().toEpochMilli())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQzMTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/handler/VtrackHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxMjoxMlrOF3eCcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxMjoxMlrOF3eCcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwODE0Ng==", "bodyText": "Do you really need to call EventUtill to get hardcoded value ?", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393708146", "createdAt": "2020-03-17T14:12:12Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/handler/VtrackHandler.java", "diffHunk": "@@ -132,8 +134,9 @@ private void handleAccountResult(AsyncResult<Account> asyncAccount, RoutingConte\n             final Set<String> biddersAllowingVastUpdate = Objects.equals(asyncAccount.result().getEventsEnabled(), true)\n                     ? biddersAllowingVastUpdate(vtrackPuts)\n                     : Collections.emptySet();\n-\n-            cacheService.cachePutObjects(vtrackPuts, biddersAllowingVastUpdate, accountId, timeout)\n+            final EventRequest eventRequest = EventUtil.from(context);\n+            final long timestamp = eventRequest.getTimestamp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQ0OTQxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/it/ApplicationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxNjoyMFrOF3eOKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxNjoyMFrOF3eOKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxMTE0NA==", "bodyText": "final", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393711144", "createdAt": "2020-03-17T14:16:20Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/it/ApplicationTest.java", "diffHunk": "@@ -445,11 +445,13 @@ public void vtrackShouldReturnJsonWithUids() throws JSONException, IOException {\n                 .when()\n                 .body(jsonFrom(\"vtrack/test-vtrack-request.json\"))\n                 .queryParam(\"a\", \"14062\")\n+                .queryParam(\"t\", \"win\")\n                 .post(\"/vtrack\");\n \n         // then\n+        String actualStr = response.asString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQ1ODQzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/it/ApplicationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxODoxOVrOF3eUAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxODoxOVrOF3eUAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxMjY0Mg==", "bodyText": "why do you need this value ?", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393712642", "createdAt": "2020-03-17T14:18:19Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/it/ApplicationTest.java", "diffHunk": "@@ -445,11 +445,13 @@ public void vtrackShouldReturnJsonWithUids() throws JSONException, IOException {\n                 .when()\n                 .body(jsonFrom(\"vtrack/test-vtrack-request.json\"))\n                 .queryParam(\"a\", \"14062\")\n+                .queryParam(\"t\", \"win\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQ2MTA5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxODo1MlrOF3eVrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxODo1MlrOF3eVrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxMzA3MQ==", "bodyText": "you can just add L at the end", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393713071", "createdAt": "2020-03-17T14:18:52Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/handler/openrtb2/AmpHandlerTest.java", "diffHunk": "@@ -440,15 +440,15 @@ public void shouldRespondWithDebugInfoIncludedIfExtPrebidDebugIsOn() {\n         given(exchangeService.holdAuction(any()))\n                 .willReturn(givenBidResponseWithExt(mapper.valueToTree(\n                         ExtBidResponse.of(ExtResponseDebug.of(null, auctionContext.getBidRequest()), null, null, null,\n-                                null))));\n+                                null, (long )1000))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQ2OTAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/handler/VtrackHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyMDo0MFrOF3ea1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyMDo0MFrOF3ea1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxNDM5MQ==", "bodyText": "this also should include ts and bidder parameters", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393714391", "createdAt": "2020-03-17T14:20:40Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/handler/VtrackHandlerTest.java", "diffHunk": "@@ -312,16 +338,20 @@ public void shouldSendToCacheExpectedPutsAndUpdatableUnknownBiddersWhenUnknownBi\n \n         given(applicationSettings.getAccountById(any(), any()))\n                 .willReturn(Future.succeededFuture(Account.builder().eventsEnabled(true).build()));\n-        given(cacheService.cachePutObjects(any(), any(), any(), any()))\n+        given(cacheService.cachePutObjects(any(), any(), any(), any(), anyLong()))\n                 .willReturn(Future.succeededFuture(BidCacheResponse.of(\n                         asList(CacheObject.of(\"uuid1\"), CacheObject.of(\"uuid2\")))));\n+        given(httpRequest.params()).willReturn(MultiMap.caseInsensitiveMultiMap()\n+                .add(\"t\", \"win\")\n+                .add(\"b\", \"bidId\")\n+                .add(\"a\", \"accountId\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQ3NzExOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyMjozMFrOF3egLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyMjozMFrOF3egLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxNTc1Ng==", "bodyText": "where ts and bidder parameter", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393715756", "createdAt": "2020-03-17T14:22:30Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "diffHunk": "@@ -35,7 +35,7 @@ public void createEventsShouldReturnExpectedEvent() {\n     @Test\n     public void winUrlTargetingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrlTargeting(\"accountId\");\n+        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\",1000);\n \n         // then\n         assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&f=i\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQ3NzM0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyMjozNFrOF3egUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyMjozNFrOF3egUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxNTc5Mg==", "bodyText": "where ts and bidder parameter", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393715792", "createdAt": "2020-03-17T14:22:34Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "diffHunk": "@@ -44,7 +44,7 @@ public void winUrlTargetingShouldReturnExpectedUrl() {\n     @Test\n     public void vastUrlTrackingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"accountId\");\n+        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"bidder\",\"accountId\", 1000);\n \n         // then\n         assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&f=b\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQ4MTY1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/events/EventUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyMzoyMVrOF3ei5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyMzoyMVrOF3ei5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxNjQ1NA==", "bodyText": "Flaky test.", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393716454", "createdAt": "2020-03-17T14:23:21Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/events/EventUtilTest.java", "diffHunk": "@@ -175,14 +176,14 @@ public void fromShouldReturnExpectedEventRequest() {\n \n         // when\n         final EventRequest result = EventUtil.from(routingContext);\n-\n         // then\n         assertThat(result).isEqualTo(EventRequest.builder()\n                 .type(EventRequest.Type.win)\n                 .bidId(\"bidId\")\n                 .accountId(\"accountId\")\n                 .format(EventRequest.Format.image)\n                 .analytics(EventRequest.Analytics.disabled)\n+                .timestamp(Instant.now().toEpochMilli())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQ4MTk0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/events/EventUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyMzoyNFrOF3ejHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyMzoyNFrOF3ejHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxNjUwOA==", "bodyText": "Flaky test.", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393716508", "createdAt": "2020-03-17T14:23:24Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/events/EventUtilTest.java", "diffHunk": "@@ -204,6 +205,7 @@ public void fromShouldReturnExpectedEventRequestWithDefaultFormatAndAnalytics()\n                 .accountId(\"accountId\")\n                 .format(EventRequest.Format.blank)\n                 .analytics(EventRequest.Analytics.enabled)\n+                .timestamp(Instant.now().toEpochMilli())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDUwNzI2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyODo0OFrOF3ey-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyODo0OFrOF3ey-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMDU3MA==", "bodyText": "not any long but eq(0)", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393720570", "createdAt": "2020-03-17T14:28:48Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -173,14 +174,14 @@ public void shouldRequestCacheServiceWithExpectedArguments() {\n         givenCacheServiceResult(singletonMap(bid1, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 1000, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid4, bid3, bid2))), eq(emptyList()),\n                 eq(CacheContext.builder().shouldCacheBids(true).shouldCacheVideoBids(true).cacheBidsTtl(99)\n-                        .cacheVideoBidsTtl(101).videoBidIdsToModify(emptyList()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout));\n+                        .cacheVideoBidsTtl(101).bidderToVideoBidIdsToModify(emptyMap()).build()),\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDUwODg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyOTowMlrOF3ez2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyOTowMlrOF3ez2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMDc5Mw==", "bodyText": "not any long but eq()", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393720793", "createdAt": "2020-03-17T14:29:02Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -206,13 +207,13 @@ public void shouldRequestCacheServiceWithWinningBidsOnlyWhenWinningonlyIsTrue()\n         givenCacheServiceResult(singletonMap(bid1, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, targeting, cacheInfo, ACCOUNT, timeout, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, targeting, cacheInfo, ACCOUNT, timeout, 1000, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid2)) && t.size() == 2), eq(emptyList()),\n-                eq(CacheContext.builder().videoBidIdsToModify(emptyList()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout));\n+                eq(CacheContext.builder().bidderToVideoBidIdsToModify(emptyMap()).build()),\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDUxMDA2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyOToyMFrOF3e0nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyOToyMFrOF3e0nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMDk4OQ==", "bodyText": "not any long but eq()", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393720989", "createdAt": "2020-03-17T14:29:20Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -240,14 +241,14 @@ public void shouldRequestCacheServiceWithVideoBidsToModifyWhenEventsEnabledAndFo\n         given(bidderCatalog.isModifyingVastXmlAllowed(eq(\"bidder1\"))).willReturn(true);\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, account, timeout, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, account, timeout, 0, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(t -> t.containsAll(asList(bid1, bid2))), eq(asList(imp1, imp2)),\n-                eq(CacheContext.builder().shouldCacheVideoBids(true).videoBidIdsToModify(singletonList(\"bidId1\"))\n+                eq(CacheContext.builder().shouldCacheVideoBids(true).bidderToVideoBidIdsToModify(singletonMap(\"bidder1\", singletonList(\"bidId1\")))\n                         .build()),\n-                same(account), eq(timeout));\n+                same(account), eq(timeout), anyLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDUxMDM3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyOToyNFrOF3e0zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyOToyNFrOF3e0zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMTAzNw==", "bodyText": "not any long but eq()", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393721037", "createdAt": "2020-03-17T14:29:24Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -264,13 +265,13 @@ public void shouldCallCacheServiceEvenRoundedCpmIsZero() {\n         givenCacheServiceResult(singletonMap(bid1, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0, false);\n \n         // then\n         verify(cacheService).cacheBidsOpenrtb(\n                 argThat(bids -> bids.contains(bid1)), eq(emptyList()),\n-                eq(CacheContext.builder().videoBidIdsToModify(emptyList()).build()),\n-                eq(Account.builder().id(\"accountId\").build()), eq(timeout));\n+                eq(CacheContext.builder().bidderToVideoBidIdsToModify(emptyMap()).build()),\n+                eq(Account.builder().id(\"accountId\").build()), eq(timeout), anyLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDUxMjQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoyOTo1M1rOF3e2GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyNzozM1rOF8xDNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMTM2OA==", "bodyText": "Replace anyLong() to any() if you want to test method invocation", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393721368", "createdAt": "2020-03-17T14:29:53Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -282,20 +283,20 @@ public void shouldSetExpectedConstantResponseFields() {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                null, null, ACCOUNT, timeout, false).result();\n+                null, null, ACCOUNT, timeout, 1000,false).result();\n \n         // then\n         final BidResponse responseWithExpectedFields = BidResponse.builder()\n                 .id(\"123\")\n                 .cur(\"USD\")\n                 .ext(mapper.valueToTree(\n-                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null)))\n+                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null, (long)1000 )))\n                 .build();\n \n         assertThat(bidResponse)\n                 .isEqualToIgnoringGivenFields(responseWithExpectedFields, \"nbr\", \"seatbid\");\n \n-        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n+        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), anyLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MjUxNw==", "bodyText": "?", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399262517", "createdAt": "2020-03-27T13:27:33Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -282,20 +283,20 @@ public void shouldSetExpectedConstantResponseFields() {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                null, null, ACCOUNT, timeout, false).result();\n+                null, null, ACCOUNT, timeout, 1000,false).result();\n \n         // then\n         final BidResponse responseWithExpectedFields = BidResponse.builder()\n                 .id(\"123\")\n                 .cur(\"USD\")\n                 .ext(mapper.valueToTree(\n-                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null)))\n+                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null, (long)1000 )))\n                 .build();\n \n         assertThat(bidResponse)\n                 .isEqualToIgnoringGivenFields(responseWithExpectedFields, \"nbr\", \"seatbid\");\n \n-        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n+        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), anyLong());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMTM2OA=="}, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDUyMDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/response/ExtBidResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozMTo0N1rOF3e7sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozMTo0N1rOF3e7sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMjgwMw==", "bodyText": "It should be passed in  response ext.prebid.auctiontimestamp", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393722803", "createdAt": "2020-03-17T14:31:47Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/proto/openrtb/ext/response/ExtBidResponse.java", "diffHunk": "@@ -37,4 +37,8 @@\n      */\n     Map<String, ExtResponseSyncData> usersync;\n \n+    /**\n+     * Defines the contract for bidresponse.ext.auctiontimestamp\n+     */\n+    Long timestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDUyMTQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozMTo1NlrOF3e8HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyNTo1NVrOF8w_OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMjkwOQ==", "bodyText": "not anyLong but eq(0).", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393722909", "createdAt": "2020-03-17T14:31:56Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -140,10 +141,10 @@ public void shouldPassOriginalTimeoutToCacheServiceIfCachingIsRequested() {\n         givenCacheServiceResult(singletonMap(bid, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0, false);\n \n         // then\n-        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout));\n+        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout), anyLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MTQ5Nw==", "bodyText": "?", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399261497", "createdAt": "2020-03-27T13:25:55Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -140,10 +141,10 @@ public void shouldPassOriginalTimeoutToCacheServiceIfCachingIsRequested() {\n         givenCacheServiceResult(singletonMap(bid, CacheIdInfo.of(null, null)));\n \n         // when\n-        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, false);\n+        bidResponseCreator.create(bidderResponses, bidRequest, null, cacheInfo, ACCOUNT, timeout, 0, false);\n \n         // then\n-        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout));\n+        verify(cacheService).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), same(timeout), anyLong());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMjkwOQ=="}, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU0NTQ1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozNzoxNlrOF3fLtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozNzoxNlrOF3fLtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNjkwMw==", "bodyText": "L", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393726903", "createdAt": "2020-03-17T14:37:16Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -1049,15 +1050,15 @@ public void impToStoredVideoJsonShouldAddErrorsWithPrebidBidderWhenStoredVideoRe\n \n         // when\n         final Future<BidResponse> result =\n-                bidResponseCreator.create(bidderResponses, bidRequest, null, CACHE_INFO, ACCOUNT, timeout, false);\n+                bidResponseCreator.create(bidderResponses, bidRequest, null, CACHE_INFO, ACCOUNT, timeout, 0, false);\n \n         // then\n         verify(storedRequestProcessor).videoStoredDataResult(eq(singletonList(imp1)), any(), eq(timeout));\n \n         assertThat(result.result().getExt()).isEqualTo(\n                 mapper.valueToTree(ExtBidResponse.of(null, singletonMap(\n                         \"prebid\", singletonList(ExtBidderError.of(BidderError.Type.generic.getCode(),\n-                                \"Bad timeout\"))), singletonMap(\"bidder1\", 100), 1000L, null)));\n+                                \"Bad timeout\"))), singletonMap(\"bidder1\", 100), 1000L, null, (long)0)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 516}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU3NjE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/events/EventsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NDo0MFrOF3fgPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NDo0MFrOF3fgPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMjE1OA==", "bodyText": "Real logic implemented in EventUtil.toUrl(externalUrl, eventRequest);", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r393732158", "createdAt": "2020-03-17T14:44:40Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/events/EventsService.java", "diffHunk": "@@ -18,32 +18,36 @@ public EventsService(String externalUrl) {\n     /**\n      * Returns {@link Events} object based on given params.\n      */\n-    public Events createEvent(String bidId, String accountId) {\n+    public Events createEvent(String bidId, String bidder, String accountId, long timestamp) {\n         return Events.of(\n-                eventUrl(EventRequest.Type.win, bidId, accountId, EventRequest.Format.image),\n-                eventUrl(EventRequest.Type.imp, bidId, accountId, EventRequest.Format.image));\n+                eventUrl(EventRequest.Type.win, bidId, bidder, accountId, EventRequest.Format.image, timestamp),\n+                eventUrl(EventRequest.Type.imp, bidId, bidder, accountId, EventRequest.Format.image, timestamp));\n     }\n \n     /**\n      * Returns value for \"hb_winurl\" targeting keyword.\n      */\n-    public String winUrlTargeting(String accountId) {\n-        return eventUrl(EventRequest.Type.win, BIDID_PLACEHOLDER, accountId, EventRequest.Format.image);\n+    public String winUrlTargeting(String bidder, String accountId, long timestamp) {\n+        return eventUrl(EventRequest.Type.win, BIDID_PLACEHOLDER, bidder, accountId,\n+                EventRequest.Format.image, timestamp);\n     }\n \n     /**\n      * Returns url for VAST tracking.\n      */\n-    public String vastUrlTracking(String bidId, String accountId) {\n-        return eventUrl(EventRequest.Type.imp, bidId, accountId, EventRequest.Format.blank);\n+    public String vastUrlTracking(String bidId, String bidder, String accountId, long timestamp) {\n+        return eventUrl(EventRequest.Type.imp, bidId, bidder, accountId, EventRequest.Format.blank, timestamp);\n     }\n \n-    private String eventUrl(EventRequest.Type type, String bidId, String accountId, EventRequest.Format format) {\n+    private String eventUrl(EventRequest.Type type, String bidId, String bidder, String accountId,\n+                            EventRequest.Format format, long timestamp) {\n         final EventRequest eventRequest = EventRequest.builder()\n                 .type(type)\n                 .bidId(bidId)\n+                .bidder(bidder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc16d245c3a0a5405c86f987c62e7b4b93ad685"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTIxNDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzowMzo0NVrOF8wKwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzowMzo0NVrOF8wKwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0ODA2NA==", "bodyText": "can be inlined", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399248064", "createdAt": "2020-03-27T13:03:45Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -259,7 +263,8 @@ private static void tryAddWinningBidByBidder(Bid bid, String bidder,\n      */\n     private Future<CacheServiceResult> toBidsWithCacheIds(List<BidderResponse> bidderResponses, Set<Bid> bidsToCache,\n                                                           List<Imp> imps, BidRequestCacheInfo cacheInfo,\n-                                                          Account account, Timeout timeout) {\n+                                                          Account account, Timeout timeout,\n+                                                          Long auctionTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTIzNjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzowOToxOFrOF8wXgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzowOToxOFrOF8wXgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MTMyOA==", "bodyText": "final Events events = eventsEnabled \n                ? eventsService.createEvent(bid.getId(), bidder, account.getId(), auctionTimestamp) \n                : null;", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399251328", "createdAt": "2020-03-27T13:09:18Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -639,7 +652,8 @@ private Bid toBid(BidderBid bidderBid, String bidder, ExtRequestTargeting target\n         }\n \n         final Video storedVideo = impIdToStoredVideo.get(bid.getImpid());\n-        final Events events = eventsEnabled ? eventsService.createEvent(bid.getId(), account.getId()) : null;\n+        final Events events = eventsEnabled ? eventsService.createEvent(bid.getId(), bidder, account.getId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTI0MTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/ExchangeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoxMDo0NlrOF8wapQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoxMDo0NlrOF8wapQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MjEzMw==", "bodyText": "type Timestamp", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399252133", "createdAt": "2020-03-27T13:10:46Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/ExchangeService.java", "diffHunk": "@@ -705,6 +707,15 @@ private static ExtRequestTargeting targeting(ExtBidRequest requestExt) {\n         return prebid != null ? prebid.getTargeting() : null;\n     }\n \n+    /**\n+     * Extracts auctiontimestamp from {@link ExtBidRequest} model.\n+     */\n+    private static Long auctionTimestamp(ExtBidRequest requestExt) {\n+        final ExtRequestPrebid prebid = requestExt != null ? requestExt.getPrebid() : null;\n+        final Long auctionTmestamp = prebid != null ? prebid.getAuctiontimestamp() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTI0MzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/auction/ExchangeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoxMToyNVrOF8wb-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoxMToyNVrOF8wb-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MjQ3NQ==", "bodyText": "... or creates if is is null", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399252475", "createdAt": "2020-03-27T13:11:25Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/auction/ExchangeService.java", "diffHunk": "@@ -705,6 +707,15 @@ private static ExtRequestTargeting targeting(ExtBidRequest requestExt) {\n         return prebid != null ? prebid.getTargeting() : null;\n     }\n \n+    /**\n+     * Extracts auctiontimestamp from {@link ExtBidRequest} model.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTI3NzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoxOTo1MlrOF8wwnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoxOTo1MlrOF8wwnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1Nzc1Ng==", "bodyText": "biddersToCacheBidIds.entrySet().stream()\n                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n                .findFirst()\n                .map(Map.Entry::getKey)\n                .ifPresent(bidder -> bidObjectNode.put(\"wurl\", eventsService.winUrl(bid.getId(), bidder, accountId,\n                        timestamp)));", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399257756", "createdAt": "2020-03-27T13:19:52Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -383,10 +389,18 @@ private static PutObject createPutObjectVideoOnly(Bid bid) {\n      * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}.\n      * Used for OpenRTB auction request. Also, adds win url to result object.\n      */\n-    private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, String accountId) {\n+    private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, Map<String, List<String>> biddersToCacheBidIds,\n+                                                 String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n+        final String bidId = bid.getId();\n         final ObjectNode bidObjectNode = mapper.mapper().valueToTree(bid);\n-        bidObjectNode.put(\"wurl\", eventsService.winUrl(bid.getId(), accountId));\n+        for (Map.Entry<String, List<String>> biddersAndBidIds : biddersToCacheBidIds.entrySet()) {\n+            if (biddersAndBidIds.getValue().contains(bidId)) {\n+                bidObjectNode.put(\"wurl\", eventsService.winUrl(bid.getId(), biddersAndBidIds.getKey(), accountId,\n+                        timestamp));\n+                break;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTI4NTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyMjowMVrOF8w1eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyMjowMVrOF8w1eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1OTAwMQ==", "bodyText": "Above example with stream", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399259001", "createdAt": "2020-03-27T13:22:01Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -413,8 +428,11 @@ private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid, List<String> vide\n         }\n \n         final String bidId = bid.getId();\n-        if (CollectionUtils.isNotEmpty(videoBidIdsToModify) && videoBidIdsToModify.contains(bidId)) {\n-            vastXml = modifyVastXml(vastXml, bidId, accountId);\n+        for (Map.Entry<String, List<String>> biddersAndBidIds : bidderToVideoBidIdsToModify.entrySet()) {\n+            if (biddersAndBidIds.getValue().contains(bidId)) {\n+                vastXml = modifyVastXml(vastXml, bidId, biddersAndBidIds.getKey(), accountId, timestamp);\n+                break;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTI5ODU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/handler/VtrackHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyNToyMVrOF8w9wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyNToyMVrOF8w9wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MTEyMA==", "bodyText": "The /vasttrack endpoint should support a 'timestamp' parameter, adding it to the video imp url as the 'ts' parameter", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399261120", "createdAt": "2020-03-27T13:25:21Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/handler/VtrackHandler.java", "diffHunk": "@@ -35,6 +35,7 @@\n     private static final Logger logger = LoggerFactory.getLogger(VtrackHandler.class);\n \n     private static final String ACCOUNT_PARAMETER = \"a\";\n+    private static final String TIMESTAMP_PARAMETER = \"ts\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTMwODQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyNzo0MVrOF8xDhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoyOTo0MVrOF--TfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MjU5Nw==", "bodyText": "L", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399262597", "createdAt": "2020-03-27T13:27:41Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -282,20 +309,20 @@ public void shouldSetExpectedConstantResponseFields() {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                null, null, ACCOUNT, timeout, false).result();\n+                null, null, ACCOUNT, timeout, 1000,false).result();\n \n         // then\n         final BidResponse responseWithExpectedFields = BidResponse.builder()\n                 .id(\"123\")\n                 .cur(\"USD\")\n                 .ext(mapper.valueToTree(\n-                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null)))\n+                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null, (long)1000 )))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjgyOA==", "bodyText": "? 1000L", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401576828", "createdAt": "2020-04-01T12:29:41Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -282,20 +309,20 @@ public void shouldSetExpectedConstantResponseFields() {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                null, null, ACCOUNT, timeout, false).result();\n+                null, null, ACCOUNT, timeout, 1000,false).result();\n \n         // then\n         final BidResponse responseWithExpectedFields = BidResponse.builder()\n                 .id(\"123\")\n                 .cur(\"USD\")\n                 .ext(mapper.valueToTree(\n-                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null)))\n+                        ExtBidResponse.of(null, null, singletonMap(\"bidder1\", 100), 1000L, null, (long)1000 )))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MjU5Nw=="}, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTMwODk2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyNzo0N1rOF8xD0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoyOToyNlrOF--TBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MjY3NQ==", "bodyText": "Check style", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399262675", "createdAt": "2020-03-27T13:27:47Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -282,20 +309,20 @@ public void shouldSetExpectedConstantResponseFields() {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                null, null, ACCOUNT, timeout, false).result();\n+                null, null, ACCOUNT, timeout, 1000,false).result();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjcwOA==", "bodyText": "?\n(don't you see that there are space missing ?)", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401576708", "createdAt": "2020-04-01T12:29:26Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -282,20 +309,20 @@ public void shouldSetExpectedConstantResponseFields() {\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                null, null, ACCOUNT, timeout, false).result();\n+                null, null, ACCOUNT, timeout, 1000,false).result();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MjY3NQ=="}, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTMyNTc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzozMToyNFrOF8xNzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzozMToyNFrOF8xNzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NTIzMA==", "bodyText": "Replace anyLong() to any() if you want to test method invocation. And please, fix it in others tests", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399265230", "createdAt": "2020-03-27T13:31:24Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -305,13 +332,13 @@ public void shouldSetNbrValueTwoAndEmptySeatbidWhenIncomingBidResponsesAreEmpty(\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(emptyList(), bidRequest, null,\n-                null, ACCOUNT, timeout, false).result();\n+                null, ACCOUNT, timeout,0, false).result();\n \n         // then\n         assertThat(bidResponse).returns(0, BidResponse::getNbr);\n         assertThat(bidResponse).returns(emptyList(), BidResponse::getSeatbid);\n \n-        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n+        verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), anyLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTQ5Njk0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxMTo1N1rOF8y46w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxMTo1N1rOF8y46w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5MjY1MQ==", "bodyText": "please check ALL (long)0 occurrences and change it to 0L", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399292651", "createdAt": "2020-03-27T14:11:57Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -693,14 +720,14 @@ public void shouldPopulateTargetingKeywordsWithEventsUrl() {\n \n         final Account account = Account.builder().id(\"accountId\").eventsEnabled(true).build();\n \n-        given(eventsService.winUrlTargeting(anyString())).willReturn(\"http://win-url\");\n+        given(eventsService.winUrlTargeting(anyString(), anyString(), anyLong())).willReturn(\"http://win-url\");\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(bidderResponses, bidRequest,\n-                targeting, CACHE_INFO, account, timeout, false).result();\n+                targeting, CACHE_INFO, account, timeout, 0,false).result();\n \n         // then\n-        verify(eventsService).winUrlTargeting(eq(\"accountId\"));\n+        verify(eventsService).winUrlTargeting(eq(\"bidder1\"), eq(\"accountId\"), eq((long)0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 388}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTUwNzUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxNDowOFrOF8y_MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxNDowOFrOF8y_MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5NDI1Nw==", "bodyText": "If you are using '/n' for first parameter, keep this style for the next.\nFIX for others", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399294257", "createdAt": "2020-03-27T14:14:08Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -351,7 +352,10 @@ public void cacheBidsOpenrtbShouldNeverCallCacheServiceIfNoBidsPassed() {\n     public void cacheBidsOpenrtbShouldPerformHttpRequestWithExpectedTimeout() {\n         // when\n         cacheService.cacheBidsOpenrtb(singletonList(givenBidOpenrtb(identity())), singletonList(givenImp(identity())),\n-                CacheContext.builder().shouldCacheBids(true).build(), account, timeout);\n+                CacheContext.builder()\n+                        .shouldCacheBids(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTUwODYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxNDoyM1rOF8y_2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxNDoyM1rOF8y_2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5NDQyNw==", "bodyText": "duplication", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399294427", "createdAt": "2020-03-27T14:14:23Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -362,7 +366,10 @@ public void cacheBidsOpenrtbShouldTolerateGlobalTimeoutAlreadyExpired() {\n         // when\n         final Future<CacheServiceResult> future = cacheService.cacheBidsOpenrtb(\n                 singletonList(givenBidOpenrtb(identity())), singletonList(givenImp(identity())),\n-                CacheContext.builder().shouldCacheBids(true).build(), account, expiredTimeout);\n+                CacheContext.builder()\n+                        .shouldCacheBids(true)\n+                        .shouldCacheBids(true).biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\"))).build(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTUxNjIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/events/EventUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxNjoxNFrOF8zE4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxNjoxNFrOF8zE4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5NTcxNQ==", "bodyText": "inline", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399295715", "createdAt": "2020-03-27T14:16:14Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/events/EventUtilTest.java", "diffHunk": "@@ -171,11 +198,11 @@ public void fromShouldReturnExpectedEventRequest() {\n                 .add(\"b\", \"bidId\")\n                 .add(\"a\", \"accountId\")\n                 .add(\"f\", \"i\")\n-                .add(\"x\", \"0\"));\n+                .add(\"x\", \"0\")\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTUzMTYyOnYy", "diffSide": "LEFT", "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoxOTo1OFrOF8zOqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0NDozMVrOF--1gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5ODIxOA==", "bodyText": "where this test?", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399298218", "createdAt": "2020-03-27T14:19:58Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "diffHunk": "@@ -24,29 +25,29 @@ public void setUp() {\n     @Test\n     public void createEventsShouldReturnExpectedEvent() {\n         // when\n-        final Events events = eventsService.createEvent(\"bidId\", \"accountId\");\n+        final Events events = eventsService.createEvent(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n         assertThat(events).isEqualTo(Events.of(\n-                \"http://external-url/event?t=win&b=bidId&a=accountId&f=i\",\n-                \"http://external-url/event?t=imp&b=bidId&a=accountId&f=i\"));\n+                \"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\",\n+                \"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\"));\n     }\n \n     @Test\n     public void winUrlTargetingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrlTargeting(\"accountId\");\n+        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\",1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&f=i\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n \n     @Test\n-    public void vastUrlTrackingShouldReturnExpectedUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NTUzNg==", "bodyText": "Where test that calls eventsService.vastUrlTracking()?", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401585536", "createdAt": "2020-04-01T12:44:31Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "diffHunk": "@@ -24,29 +25,29 @@ public void setUp() {\n     @Test\n     public void createEventsShouldReturnExpectedEvent() {\n         // when\n-        final Events events = eventsService.createEvent(\"bidId\", \"accountId\");\n+        final Events events = eventsService.createEvent(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n         assertThat(events).isEqualTo(Events.of(\n-                \"http://external-url/event?t=win&b=bidId&a=accountId&f=i\",\n-                \"http://external-url/event?t=imp&b=bidId&a=accountId&f=i\"));\n+                \"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\",\n+                \"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\"));\n     }\n \n     @Test\n     public void winUrlTargetingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrlTargeting(\"accountId\");\n+        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\",1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&f=i\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n \n     @Test\n-    public void vastUrlTrackingShouldReturnExpectedUrl() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5ODIxOA=="}, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTUzMjg3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMDoxN1rOF8zPew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyMDoxN1rOF8zPew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5ODQyNw==", "bodyText": "duplication", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r399298427", "createdAt": "2020-03-27T14:20:17Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "diffHunk": "@@ -24,29 +25,29 @@ public void setUp() {\n     @Test\n     public void createEventsShouldReturnExpectedEvent() {\n         // when\n-        final Events events = eventsService.createEvent(\"bidId\", \"accountId\");\n+        final Events events = eventsService.createEvent(\"bidId\", \"bidder\",\"accountId\", 1000L);\n \n         // then\n         assertThat(events).isEqualTo(Events.of(\n-                \"http://external-url/event?t=win&b=bidId&a=accountId&f=i\",\n-                \"http://external-url/event?t=imp&b=bidId&a=accountId&f=i\"));\n+                \"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\",\n+                \"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\"));\n     }\n \n     @Test\n     public void winUrlTargetingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrlTargeting(\"accountId\");\n+        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\",1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&f=i\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n \n     @Test\n-    public void vastUrlTrackingShouldReturnExpectedUrl() {\n+    public void winUrlTrackingShouldReturnExpectedUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76da6d8d68fbd47b4e65149d15f0eb8a591dd09f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDQzODU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoyMTozMVrOF--Baw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoyMTozMVrOF--Baw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MjIwMw==", "bodyText": "Array is redundant.\nAnd final is not needed (my mistake)", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401572203", "createdAt": "2020-04-01T12:21:31Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -398,33 +411,38 @@ private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, String accountId\n     /**\n      * Makes XML type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request.\n      */\n-    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid, List<String> videoBidIdsToModify,\n-                                                String accountId) {\n+    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid,\n+                                                Map<String, List<String>> bidderToVideoBidIdsToModify,\n+                                                String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        String vastXml;\n+        final String[] vastXml = new String[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb6cfb2df8ccdc2ef844a5442af306704241a4e"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDQ1NjU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoyNjoyOVrOF--MPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoyNjoyOVrOF--MPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NDk3Mw==", "bodyText": "final String bidId = bid.getId();\n        final String modifiedVastXml =  bidderToVideoBidIdsToModify.entrySet().stream()\n                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n                .findFirst()\n                .map(Map.Entry::getKey)\n                .map(bidder -> modifyVastXml(vastXml, bidId, bidder, accountId, timestamp))\n                .orElse(vastXml);\n\n        return PutObject.builder()\n                .type(\"xml\")\n                .value(new TextNode(modifiedVastXml))\n                .expiry(cacheBid.getTtl())\n                .build();", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401574973", "createdAt": "2020-04-01T12:26:29Z", "author": {"login": "DGarbar"}, "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -398,33 +411,38 @@ private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, String accountId\n     /**\n      * Makes XML type {@link PutObject} from {@link com.iab.openrtb.response.Bid}. Used for OpenRTB auction request.\n      */\n-    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid, List<String> videoBidIdsToModify,\n-                                                String accountId) {\n+    private PutObject createXmlPutObjectOpenrtb(CacheBid cacheBid,\n+                                                Map<String, List<String>> bidderToVideoBidIdsToModify,\n+                                                String accountId, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n-        String vastXml;\n+        final String[] vastXml = new String[1];\n         if (bid.getAdm() == null) {\n-            vastXml = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n+            vastXml[0] = \"<VAST version=\\\"3.0\\\"><Ad><Wrapper>\"\n                     + \"<AdSystem>prebid.org wrapper</AdSystem>\"\n                     + \"<VASTAdTagURI><![CDATA[\" + bid.getNurl() + \"]]></VASTAdTagURI>\"\n                     + \"<Impression></Impression><Creatives></Creatives>\"\n                     + \"</Wrapper></Ad></VAST>\";\n         } else {\n-            vastXml = bid.getAdm();\n+            vastXml[0] = bid.getAdm();\n         }\n-\n         final String bidId = bid.getId();\n-        if (CollectionUtils.isNotEmpty(videoBidIdsToModify) && videoBidIdsToModify.contains(bidId)) {\n-            vastXml = modifyVastXml(vastXml, bidId, accountId);\n-        }\n+        bidderToVideoBidIdsToModify.entrySet().stream()\n+                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n+                .findFirst()\n+                .map(Map.Entry::getKey)\n+                .ifPresent(bidder -> {\n+                    vastXml[0] = modifyVastXml(vastXml[0], bidId, bidder, accountId, timestamp);\n+                });\n \n         return PutObject.builder()\n                 .type(\"xml\")\n-                .value(new TextNode(vastXml))\n+                .value(new TextNode(vastXml[0]))\n                 .expiry(cacheBid.getTtl())\n                 .build();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb6cfb2df8ccdc2ef844a5442af306704241a4e"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDQ2ODgzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoyOTo1MlrOF--T6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoyOTo1MlrOF--T6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NjkzOA==", "bodyText": "check style", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401576938", "createdAt": "2020-04-01T12:29:52Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -305,13 +332,13 @@ public void shouldSetNbrValueTwoAndEmptySeatbidWhenIncomingBidResponsesAreEmpty(\n \n         // when\n         final BidResponse bidResponse = bidResponseCreator.create(emptyList(), bidRequest, null,\n-                null, ACCOUNT, timeout, false).result();\n+                null, ACCOUNT, timeout,0, false).result();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb6cfb2df8ccdc2ef844a5442af306704241a4e"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDQ3MjkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/auction/ExchangeServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMTowOVrOF--Wkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMTowOVrOF--Wkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NzYxOA==", "bodyText": "/n", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401577618", "createdAt": "2020-04-01T12:31:09Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/ExchangeServiceTest.java", "diffHunk": "@@ -797,7 +812,7 @@ public void shouldTolerateResponseBidValidationErrors() throws JsonProcessingExc\n                 // imp ids are not really used for matching, included them here for clarity\n                 givenImp(singletonMap(\"bidder1\", 1), builder -> builder.id(\"impId1\"))),\n                 builder -> builder.ext(mapper.valueToTree(ExtBidRequest.of(ExtRequestPrebid.builder()\n-                        .build()))));\n+                        .auctiontimestamp(1000L).build()))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb6cfb2df8ccdc2ef844a5442af306704241a4e"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDQ3NDk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMTo0NVrOF--X2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMTo0NVrOF--X2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3Nzk0Ng==", "bodyText": "check style", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r401577946", "createdAt": "2020-04-01T12:31:45Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/cache/CacheServiceTest.java", "diffHunk": "@@ -380,25 +391,34 @@ public void cacheBidsOpenrtbShouldStoreWinUrl() {\n         // when\n         cacheService.cacheBidsOpenrtb(\n                 singletonList(bid), singletonList(givenImp(builder -> builder.id(\"impId1\"))),\n-                CacheContext.builder().shouldCacheBids(true).build(), Account.builder().id(\"accountId\").build(),\n-                timeout);\n+                CacheContext\n+                        .builder()\n+                        .shouldCacheBids(true)\n+                        .biddersToCacheBidIds(singletonMap(\"bidder\", singletonList(\"bidId1\")))\n+                        .build(),\n+                Account.builder().id(\"accountId\").build(), timeout, 0L);\n \n         // then\n-        verify(eventsService).winUrl(eq(\"bidId1\"), eq(\"accountId\"));\n+        verify(eventsService).winUrl(eq(\"bidId1\"), eq(\"bidder\"),eq(\"accountId\"), eq(0L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb6cfb2df8ccdc2ef844a5442af306704241a4e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDE5NzI3OnYy", "diffSide": "LEFT", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxMTo1OFrOF_iQGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxNToyM1rOF_iYJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NTc4NA==", "bodyText": "Intelij idea. Settings. Code Style -> Scheme = Project. If it doesn't help than\nClick to cogwheel -> import code scheme. From checkstyle file.\nPerform code style check formating for all files that you added", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r402165784", "createdAt": "2020-04-02T09:11:58Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -61,15 +69,6 @@\n import org.prebid.server.settings.model.Account;\n import org.prebid.server.settings.model.VideoStoredDataResult;\n \n-import java.io.IOException;\n-import java.math.BigDecimal;\n-import java.time.Clock;\n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5701456bffb9836083acd577dd4b4640ad888961"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2Nzg0Ng==", "bodyText": "ALWAYS", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r402167846", "createdAt": "2020-04-02T09:15:23Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -61,15 +69,6 @@\n import org.prebid.server.settings.model.Account;\n import org.prebid.server.settings.model.VideoStoredDataResult;\n \n-import java.io.IOException;\n-import java.math.BigDecimal;\n-import java.time.Clock;\n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NTc4NA=="}, "originalCommit": {"oid": "5701456bffb9836083acd577dd4b4640ad888961"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDIwNTE3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxNDowOFrOF_iVHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxNDowOFrOF_iVHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NzA2OQ==", "bodyText": "vastUrl Should Return Expected Url.\nWhere is vastUrl method call ?", "url": "https://github.com/prebid/prebid-server-java/pull/635#discussion_r402167069", "createdAt": "2020-04-02T09:14:08Z", "author": {"login": "DGarbar"}, "path": "src/test/java/org/prebid/server/events/EventsServiceTest.java", "diffHunk": "@@ -24,29 +24,38 @@ public void setUp() {\n     @Test\n     public void createEventsShouldReturnExpectedEvent() {\n         // when\n-        final Events events = eventsService.createEvent(\"bidId\", \"accountId\");\n+        final Events events = eventsService.createEvent(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n         assertThat(events).isEqualTo(Events.of(\n-                \"http://external-url/event?t=win&b=bidId&a=accountId&f=i\",\n-                \"http://external-url/event?t=imp&b=bidId&a=accountId&f=i\"));\n+                \"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\",\n+                \"http://external-url/event?t=imp&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\"));\n     }\n \n     @Test\n     public void winUrlTargetingShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.winUrlTargeting(\"accountId\");\n+        final String winUrlTargeting = eventsService.winUrlTargeting(\"bidder\", \"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&f=i\");\n+        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=win&b=BIDID&a=accountId&ts=1000&bidder=bidder&f=i\");\n     }\n \n     @Test\n-    public void vastUrlTrackingShouldReturnExpectedUrl() {\n+    public void winUrlShouldReturnExpectedUrl() {\n         // when\n-        final String winUrlTargeting = eventsService.vastUrlTracking(\"bidId\", \"accountId\");\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);\n \n         // then\n-        assertThat(winUrlTargeting).isEqualTo(\"http://external-url/event?t=imp&b=bidId&a=accountId&f=b\");\n+        assertThat(winUrl).isEqualTo(\"http://external-url/event?t=win&b=bidId&a=accountId&ts=1000&bidder=bidder&f=i\");\n+    }\n+\n+    @Test\n+    public void vastUrlShouldReturnExpectedUrl() {\n+        // when\n+        final String winUrl = eventsService.winUrl(\"bidId\", \"bidder\", \"accountId\", 1000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5701456bffb9836083acd577dd4b4640ad888961"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4159, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}