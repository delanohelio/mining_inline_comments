{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDk3MTcw", "number": 1034, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo0Mjo1MFrOE-AEPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo0Mzo1N1rOE-AFoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQ4MjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/silvermob/SilvermobBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo0Mjo1MFrOH6-3wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo0Mjo1MFrOH6-3wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwOTUzOA==", "bodyText": "Not sure we need to escape the host.", "url": "https://github.com/prebid/prebid-server-java/pull/1034#discussion_r531609538", "createdAt": "2020-11-27T13:42:50Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/silvermob/SilvermobBidder.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.prebid.server.bidder.silvermob;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.silvermob.ExtImpSilvermob;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Silvermob {@link Bidder} implementation.\n+ */\n+public class SilvermobBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSilvermob>> SILVERMOB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSilvermob>>() {\n+            };\n+\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+    private static final String URL_ZONE_ID_MACRO = \"{{ZoneID}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public SilvermobBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> requests = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSilvermob extImp = parseImpExt(imp);\n+                final String url = resolveEndpoint(extImp);\n+\n+                final BidRequest outgoingRequest = request.toBuilder()\n+                        .imp(Collections.singletonList(imp))\n+                        .build();\n+\n+                requests.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build());\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(requests, errors);\n+    }\n+\n+    private ExtImpSilvermob parseImpExt(Imp imp) {\n+        final ExtImpSilvermob extImp;\n+        try {\n+            extImp = mapper.mapper().convertValue(imp.getExt(), SILVERMOB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(String.format(\"error unmarshalling imp.ext.bidder: %s\", e.getMessage()));\n+        }\n+        if (StringUtils.isBlank(extImp.getHost())) {\n+            throw new PreBidException(\"host is a required silvermob ext.imp param\");\n+        }\n+\n+        if (StringUtils.isBlank(extImp.getZoneId())) {\n+            throw new PreBidException(\"zoneId is a required silvermob ext.imp param\");\n+        }\n+        return extImp;\n+    }\n+\n+    private String resolveEndpoint(ExtImpSilvermob extImp) {\n+        return endpointUrl\n+                .replace(URL_HOST_MACRO, HttpUtil.encodeUrl(extImp.getHost()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e71a353731f800393700e01fa97163f438f5a980"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQ4NjA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/silvermob/SilvermobBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo0Mzo1N1rOH6-5_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo0Mzo1N1rOH6-5_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMDEwOA==", "bodyText": "Here can be applied the same approach as in smartyads bidder.", "url": "https://github.com/prebid/prebid-server-java/pull/1034#discussion_r531610108", "createdAt": "2020-11-27T13:43:57Z", "author": {"login": "rpanchyk"}, "path": "src/main/java/org/prebid/server/bidder/silvermob/SilvermobBidder.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.prebid.server.bidder.silvermob;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.silvermob.ExtImpSilvermob;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Silvermob {@link Bidder} implementation.\n+ */\n+public class SilvermobBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSilvermob>> SILVERMOB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSilvermob>>() {\n+            };\n+\n+    private static final String URL_HOST_MACRO = \"{{Host}}\";\n+    private static final String URL_ZONE_ID_MACRO = \"{{ZoneID}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public SilvermobBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> requests = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSilvermob extImp = parseImpExt(imp);\n+                final String url = resolveEndpoint(extImp);\n+\n+                final BidRequest outgoingRequest = request.toBuilder()\n+                        .imp(Collections.singletonList(imp))\n+                        .build();\n+\n+                requests.add(HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build());\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(requests, errors);\n+    }\n+\n+    private ExtImpSilvermob parseImpExt(Imp imp) {\n+        final ExtImpSilvermob extImp;\n+        try {\n+            extImp = mapper.mapper().convertValue(imp.getExt(), SILVERMOB_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(String.format(\"error unmarshalling imp.ext.bidder: %s\", e.getMessage()));\n+        }\n+        if (StringUtils.isBlank(extImp.getHost())) {\n+            throw new PreBidException(\"host is a required silvermob ext.imp param\");\n+        }\n+\n+        if (StringUtils.isBlank(extImp.getZoneId())) {\n+            throw new PreBidException(\"zoneId is a required silvermob ext.imp param\");\n+        }\n+        return extImp;\n+    }\n+\n+    private String resolveEndpoint(ExtImpSilvermob extImp) {\n+        return endpointUrl\n+                .replace(URL_HOST_MACRO, HttpUtil.encodeUrl(extImp.getHost()))\n+                .replace(URL_ZONE_ID_MACRO, HttpUtil.encodeUrl(extImp.getZoneId()));\n+    }\n+\n+    private static MultiMap resolveHeaders(Device device) {\n+        final MultiMap headers = HttpUtil.headers()\n+                .add(HttpUtil.X_OPENRTB_VERSION_HEADER, \"2.5\");\n+\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER, device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER, device.getIpv6());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER, device.getIp());\n+        }\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(bidResponse, httpCall.getRequest().getPayload()), Collections.emptyList());\n+        } catch (DecodeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e71a353731f800393700e01fa97163f438f5a980"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3832, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}