{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MzE4MDU2", "number": 737, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowMzowOFrOEH4V9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTowNTo1NFrOEH66PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Njk4NjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowMzowOFrOGngIRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjozMjoyMVrOGnxWGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NDA1NQ==", "bodyText": "There is a simpler way to concatenate\n   private String getAdSize(Imp imp) {\n        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n            return \"\";\n        }\n\n        return imp.getBanner().getFormat().stream()\n                .map(format -> String.format(\"%s\u00d7%s\", format.getW(), format.getH()))\n                .collect(Collectors.joining(\",\"));\n    }", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444074055", "createdAt": "2020-06-23T09:03:08Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1NjEyMw==", "bodyText": "Thanks! Pretty nice!", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444356123", "createdAt": "2020-06-23T16:32:21Z", "author": {"login": "AndriyPavlyuk"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NDA1NQ=="}, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzAxMjcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxMDozNlrOGngZlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjozOTowMFrOGnxlVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3ODQ4Nw==", "bodyText": "Consider this approach. The only benefit is less nesting and maybe readability, second depends on habit.\n    private String getCurrency(BidRequest request) {\n        final List<String> currencies = request.getCur();\n        return CollectionUtils.isEmpty(request.getCur())\n                ? DEFAULT_REQUEST_CURRENCY\n                : currencies.contains(DEFAULT_REQUEST_CURRENCY) ? DEFAULT_REQUEST_CURRENCY : currencies.get(0);\n    }", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444078487", "createdAt": "2020-06-23T09:10:36Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2MDAyMA==", "bodyText": "Thanks, looks pretty nice and shorter!", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444360020", "createdAt": "2020-06-23T16:39:00Z", "author": {"login": "AndriyPavlyuk"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3ODQ4Nw=="}, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzAxOTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxMjoyNlrOGngd_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxMjoyNlrOGngd_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3OTYxMg==", "bodyText": "For each request with adgenereation impressions new MultMap will be created with the same values. You can make it as final static class field and reuse the same object", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444079612", "createdAt": "2020-06-23T09:12:26Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getCur())) {\n+            return DEFAULT_REQUEST_CURRENCY;\n+        } else {\n+            for (String cur : request.getCur()) {\n+                if (cur.equals(DEFAULT_REQUEST_CURRENCY)) {\n+                    return cur;\n+                }\n+            }\n+            return request.getCur().get(0);\n+        }\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String uri) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(uri)\n+                .headers(HttpUtil.headers())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzA0NDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/model/AdgenerationResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxOToxNVrOGngtvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0MDozMlrOGn15Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MzY0Ng==", "bodyText": "I don't see a reason to make this class generic. Results in go version is used only to check if it is empty or not. It can be Listresults. Also check for not empty results missed on makeBids(), please update it.\nAlso fields baconurl, ttl, landingUrl, scheduleid are also never used", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444083646", "createdAt": "2020-06-23T09:19:15Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/model/AdgenerationResponse.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.prebid.server.bidder.adgeneration.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+import java.math.BigDecimal;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class AdgenerationResponse<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMDYzMA==", "bodyText": "Ok, i removed generic from class and added check for results empty.\nbaconurl, ttl, landingUrl, scheduleid are used in Go tests. They include this parameters in   AdgenerationResponse.results. So maybe we need this fields for correct flow?", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444430630", "createdAt": "2020-06-23T18:40:32Z", "author": {"login": "AndriyPavlyuk"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/model/AdgenerationResponse.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.prebid.server.bidder.adgeneration.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+import java.math.BigDecimal;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class AdgenerationResponse<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MzY0Ng=="}, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzA2ODY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToyNTo0OFrOGng9kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0MTowNVrOGn16og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4NzY5OQ==", "bodyText": "Maybe String.format more readable?", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444087699", "createdAt": "2020-06-23T09:25:48Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getCur())) {\n+            return DEFAULT_REQUEST_CURRENCY;\n+        } else {\n+            for (String cur : request.getCur()) {\n+                if (cur.equals(DEFAULT_REQUEST_CURRENCY)) {\n+                    return cur;\n+                }\n+            }\n+            return request.getCur().get(0);\n+        }\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String uri) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(uri)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdgenerationResponse adgenerationResponse;\n+        try {\n+            adgenerationResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            final ExtImpAdgeneration extImpAdgeneration;\n+            try {\n+                extImpAdgeneration = parseAndValidateImpExt(imp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+\n+            if (extImpAdgeneration.getId().equals(adgenerationResponse.getLocationid())) {\n+                final Bid updatedBid = Bid.builder()\n+                        .id(adgenerationResponse.getLocationid())\n+                        .impid(imp.getId())\n+                        .adm(getAdm(adgenerationResponse, imp.getId()))\n+                        .price(adgenerationResponse.getCpm())\n+                        .w(adgenerationResponse.getW())\n+                        .h(adgenerationResponse.getH())\n+                        .crid(adgenerationResponse.getCreativeid())\n+                        .dealid(adgenerationResponse.getDealid())\n+                        .build();\n+                final BidderBid bidderBid = BidderBid.of(updatedBid, BidType.banner, DEFAULT_BID_CURRENCY);\n+                bidderBids.add(bidderBid);\n+                return Result.of(bidderBids, Collections.emptyList());\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private AdgenerationResponse decodeBodyToBidResponse(HttpCall<BidRequest> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdgenerationResponse.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getAdm(AdgenerationResponse adgenerationResponse, String impId) {\n+        String ad = adgenerationResponse.getAd();\n+        if (StringUtils.isNotBlank(adgenerationResponse.getVastxml())) {\n+            ad = \"<body><div id=\\\"apvad-\" + impId + \"\\\"></div><script type=\\\"text/javascript\\\" id=\\\"apv\\\" \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMTAxMA==", "bodyText": "Yes, thanks", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444431010", "createdAt": "2020-06-23T18:41:05Z", "author": {"login": "AndriyPavlyuk"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getCur())) {\n+            return DEFAULT_REQUEST_CURRENCY;\n+        } else {\n+            for (String cur : request.getCur()) {\n+                if (cur.equals(DEFAULT_REQUEST_CURRENCY)) {\n+                    return cur;\n+                }\n+            }\n+            return request.getCur().get(0);\n+        }\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String uri) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(uri)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdgenerationResponse adgenerationResponse;\n+        try {\n+            adgenerationResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            final ExtImpAdgeneration extImpAdgeneration;\n+            try {\n+                extImpAdgeneration = parseAndValidateImpExt(imp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+\n+            if (extImpAdgeneration.getId().equals(adgenerationResponse.getLocationid())) {\n+                final Bid updatedBid = Bid.builder()\n+                        .id(adgenerationResponse.getLocationid())\n+                        .impid(imp.getId())\n+                        .adm(getAdm(adgenerationResponse, imp.getId()))\n+                        .price(adgenerationResponse.getCpm())\n+                        .w(adgenerationResponse.getW())\n+                        .h(adgenerationResponse.getH())\n+                        .crid(adgenerationResponse.getCreativeid())\n+                        .dealid(adgenerationResponse.getDealid())\n+                        .build();\n+                final BidderBid bidderBid = BidderBid.of(updatedBid, BidType.banner, DEFAULT_BID_CURRENCY);\n+                bidderBids.add(bidderBid);\n+                return Result.of(bidderBids, Collections.emptyList());\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private AdgenerationResponse decodeBodyToBidResponse(HttpCall<BidRequest> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdgenerationResponse.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getAdm(AdgenerationResponse adgenerationResponse, String impId) {\n+        String ad = adgenerationResponse.getAd();\n+        if (StringUtils.isNotBlank(adgenerationResponse.getVastxml())) {\n+            ad = \"<body><div id=\\\"apvad-\" + impId + \"\\\"></div><script type=\\\"text/javascript\\\" id=\\\"apv\\\" \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4NzY5OQ=="}, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzMyMDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDozNzo0NVrOGnjcCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDozNzo0NVrOGnjcCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyODI2Nw==", "bodyText": "Pattern.compile() methods have a significant performance cost\nConsider to use precompiled Pattern in static field, instead creating new Pattern for each response in replcaceAll method.", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444128267", "createdAt": "2020-06-23T10:37:45Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getCur())) {\n+            return DEFAULT_REQUEST_CURRENCY;\n+        } else {\n+            for (String cur : request.getCur()) {\n+                if (cur.equals(DEFAULT_REQUEST_CURRENCY)) {\n+                    return cur;\n+                }\n+            }\n+            return request.getCur().get(0);\n+        }\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String uri) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(uri)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdgenerationResponse adgenerationResponse;\n+        try {\n+            adgenerationResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            final ExtImpAdgeneration extImpAdgeneration;\n+            try {\n+                extImpAdgeneration = parseAndValidateImpExt(imp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+\n+            if (extImpAdgeneration.getId().equals(adgenerationResponse.getLocationid())) {\n+                final Bid updatedBid = Bid.builder()\n+                        .id(adgenerationResponse.getLocationid())\n+                        .impid(imp.getId())\n+                        .adm(getAdm(adgenerationResponse, imp.getId()))\n+                        .price(adgenerationResponse.getCpm())\n+                        .w(adgenerationResponse.getW())\n+                        .h(adgenerationResponse.getH())\n+                        .crid(adgenerationResponse.getCreativeid())\n+                        .dealid(adgenerationResponse.getDealid())\n+                        .build();\n+                final BidderBid bidderBid = BidderBid.of(updatedBid, BidType.banner, DEFAULT_BID_CURRENCY);\n+                bidderBids.add(bidderBid);\n+                return Result.of(bidderBids, Collections.emptyList());\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private AdgenerationResponse decodeBodyToBidResponse(HttpCall<BidRequest> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdgenerationResponse.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getAdm(AdgenerationResponse adgenerationResponse, String impId) {\n+        String ad = adgenerationResponse.getAd();\n+        if (StringUtils.isNotBlank(adgenerationResponse.getVastxml())) {\n+            ad = \"<body><div id=\\\"apvad-\" + impId + \"\\\"></div><script type=\\\"text/javascript\\\" id=\\\"apv\\\" \"\n+                    + \"src=\\\"https://cdn.apvdr.com/js/VideoAd.min.js\\\"></script>\" + insertVASTMethod(impId,\n+                    adgenerationResponse.getVastxml()) + \"</body>\";\n+        }\n+        ad = appendChildToBody(ad, adgenerationResponse.getBeacon());\n+        final String unwrappedAd = removeWrapper(ad);\n+        if (StringUtils.isNotBlank(unwrappedAd)) {\n+            return unwrappedAd;\n+        }\n+        return ad;\n+    }\n+\n+    private String insertVASTMethod(String impId, String vastXml) {\n+        final String replacedVastxml = vastXml.replaceAll(\"/\\\\r?\\\\n/g\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzMzNTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0MjozN1rOGnjl0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0MjozN1rOGnjl0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMDc2OQ==", "bodyText": "What if beacon is null?", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444130769", "createdAt": "2020-06-23T10:42:37Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getCur())) {\n+            return DEFAULT_REQUEST_CURRENCY;\n+        } else {\n+            for (String cur : request.getCur()) {\n+                if (cur.equals(DEFAULT_REQUEST_CURRENCY)) {\n+                    return cur;\n+                }\n+            }\n+            return request.getCur().get(0);\n+        }\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String uri) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(uri)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdgenerationResponse adgenerationResponse;\n+        try {\n+            adgenerationResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            final ExtImpAdgeneration extImpAdgeneration;\n+            try {\n+                extImpAdgeneration = parseAndValidateImpExt(imp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+\n+            if (extImpAdgeneration.getId().equals(adgenerationResponse.getLocationid())) {\n+                final Bid updatedBid = Bid.builder()\n+                        .id(adgenerationResponse.getLocationid())\n+                        .impid(imp.getId())\n+                        .adm(getAdm(adgenerationResponse, imp.getId()))\n+                        .price(adgenerationResponse.getCpm())\n+                        .w(adgenerationResponse.getW())\n+                        .h(adgenerationResponse.getH())\n+                        .crid(adgenerationResponse.getCreativeid())\n+                        .dealid(adgenerationResponse.getDealid())\n+                        .build();\n+                final BidderBid bidderBid = BidderBid.of(updatedBid, BidType.banner, DEFAULT_BID_CURRENCY);\n+                bidderBids.add(bidderBid);\n+                return Result.of(bidderBids, Collections.emptyList());\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private AdgenerationResponse decodeBodyToBidResponse(HttpCall<BidRequest> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdgenerationResponse.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getAdm(AdgenerationResponse adgenerationResponse, String impId) {\n+        String ad = adgenerationResponse.getAd();\n+        if (StringUtils.isNotBlank(adgenerationResponse.getVastxml())) {\n+            ad = \"<body><div id=\\\"apvad-\" + impId + \"\\\"></div><script type=\\\"text/javascript\\\" id=\\\"apv\\\" \"\n+                    + \"src=\\\"https://cdn.apvdr.com/js/VideoAd.min.js\\\"></script>\" + insertVASTMethod(impId,\n+                    adgenerationResponse.getVastxml()) + \"</body>\";\n+        }\n+        ad = appendChildToBody(ad, adgenerationResponse.getBeacon());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzMzNzU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0MzoxMFrOGnjm8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0MzoxMFrOGnjm8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMTA1OQ==", "bodyText": "not covered with test", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444131059", "createdAt": "2020-06-23T10:43:10Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getCur())) {\n+            return DEFAULT_REQUEST_CURRENCY;\n+        } else {\n+            for (String cur : request.getCur()) {\n+                if (cur.equals(DEFAULT_REQUEST_CURRENCY)) {\n+                    return cur;\n+                }\n+            }\n+            return request.getCur().get(0);\n+        }\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String uri) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(uri)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdgenerationResponse adgenerationResponse;\n+        try {\n+            adgenerationResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            final ExtImpAdgeneration extImpAdgeneration;\n+            try {\n+                extImpAdgeneration = parseAndValidateImpExt(imp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+\n+            if (extImpAdgeneration.getId().equals(adgenerationResponse.getLocationid())) {\n+                final Bid updatedBid = Bid.builder()\n+                        .id(adgenerationResponse.getLocationid())\n+                        .impid(imp.getId())\n+                        .adm(getAdm(adgenerationResponse, imp.getId()))\n+                        .price(adgenerationResponse.getCpm())\n+                        .w(adgenerationResponse.getW())\n+                        .h(adgenerationResponse.getH())\n+                        .crid(adgenerationResponse.getCreativeid())\n+                        .dealid(adgenerationResponse.getDealid())\n+                        .build();\n+                final BidderBid bidderBid = BidderBid.of(updatedBid, BidType.banner, DEFAULT_BID_CURRENCY);\n+                bidderBids.add(bidderBid);\n+                return Result.of(bidderBids, Collections.emptyList());\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private AdgenerationResponse decodeBodyToBidResponse(HttpCall<BidRequest> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdgenerationResponse.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getAdm(AdgenerationResponse adgenerationResponse, String impId) {\n+        String ad = adgenerationResponse.getAd();\n+        if (StringUtils.isNotBlank(adgenerationResponse.getVastxml())) {\n+            ad = \"<body><div id=\\\"apvad-\" + impId + \"\\\"></div><script type=\\\"text/javascript\\\" id=\\\"apv\\\" \"\n+                    + \"src=\\\"https://cdn.apvdr.com/js/VideoAd.min.js\\\"></script>\" + insertVASTMethod(impId,\n+                    adgenerationResponse.getVastxml()) + \"</body>\";\n+        }\n+        ad = appendChildToBody(ad, adgenerationResponse.getBeacon());\n+        final String unwrappedAd = removeWrapper(ad);\n+        if (StringUtils.isNotBlank(unwrappedAd)) {\n+            return unwrappedAd;\n+        }\n+        return ad;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzMzOTg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0NDowMVrOGnjocQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0NDowMVrOGnjocQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMTQ0MQ==", "bodyText": "not covered with test", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444131441", "createdAt": "2020-06-23T10:44:01Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getCur())) {\n+            return DEFAULT_REQUEST_CURRENCY;\n+        } else {\n+            for (String cur : request.getCur()) {\n+                if (cur.equals(DEFAULT_REQUEST_CURRENCY)) {\n+                    return cur;\n+                }\n+            }\n+            return request.getCur().get(0);\n+        }\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String uri) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(uri)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdgenerationResponse adgenerationResponse;\n+        try {\n+            adgenerationResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            final ExtImpAdgeneration extImpAdgeneration;\n+            try {\n+                extImpAdgeneration = parseAndValidateImpExt(imp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzM0MzIzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/prebid/server/bidder/adgeneration/AdgenerationBidderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0NTowN1rOGnjqjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0NTowN1rOGnjqjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzMTk4Mw==", "bodyText": "check exception instance and message", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444131983", "createdAt": "2020-06-23T10:45:07Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/test/java/org/prebid/server/bidder/adgeneration/AdgenerationBidderTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+\n+public class AdgenerationBidderTest extends VertxTest {\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com/\";\n+\n+    private AdgenerationBidder adgenerationBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adgenerationBidder = new AdgenerationBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdgenerationBidder(\"invalid_url\", jacksonMapper));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzM1Njc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0OTowNVrOGnjzBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0OTowNVrOGnjzBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDE0OQ==", "bodyText": "this else case is not covered, add tests for cases when currency is default and .get(0) currency", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444134149", "createdAt": "2020-06-23T10:49:05Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getCur())) {\n+            return DEFAULT_REQUEST_CURRENCY;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzM1Nzk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0OTozMVrOGnjz0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0OTozMVrOGnjz0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDM1Mw==", "bodyText": "cover with test", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444134353", "createdAt": "2020-06-23T10:49:31Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzM1ODMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0OTo0MVrOGnj0CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo0OTo0MVrOGnj0CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDQwOA==", "bodyText": "cover with test", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444134408", "createdAt": "2020-06-23T10:49:41Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzM2MzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1MToxMlrOGnj3NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1MToxMlrOGnj3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNTIyMA==", "bodyText": "Not all status codes covered with tests", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444135220", "createdAt": "2020-06-23T10:51:12Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getCur())) {\n+            return DEFAULT_REQUEST_CURRENCY;\n+        } else {\n+            for (String cur : request.getCur()) {\n+                if (cur.equals(DEFAULT_REQUEST_CURRENCY)) {\n+                    return cur;\n+                }\n+            }\n+            return request.getCur().get(0);\n+        }\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String uri) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(uri)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzM2NzcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1Mjo0OVrOGnj6Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1Mjo0OVrOGnj6Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNTk0Mw==", "bodyText": "Cover this case with test", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444135943", "createdAt": "2020-06-23T10:52:49Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getCur())) {\n+            return DEFAULT_REQUEST_CURRENCY;\n+        } else {\n+            for (String cur : request.getCur()) {\n+                if (cur.equals(DEFAULT_REQUEST_CURRENCY)) {\n+                    return cur;\n+                }\n+            }\n+            return request.getCur().get(0);\n+        }\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String uri) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(uri)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdgenerationResponse adgenerationResponse;\n+        try {\n+            adgenerationResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            final ExtImpAdgeneration extImpAdgeneration;\n+            try {\n+                extImpAdgeneration = parseAndValidateImpExt(imp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+\n+            if (extImpAdgeneration.getId().equals(adgenerationResponse.getLocationid())) {\n+                final Bid updatedBid = Bid.builder()\n+                        .id(adgenerationResponse.getLocationid())\n+                        .impid(imp.getId())\n+                        .adm(getAdm(adgenerationResponse, imp.getId()))\n+                        .price(adgenerationResponse.getCpm())\n+                        .w(adgenerationResponse.getW())\n+                        .h(adgenerationResponse.getH())\n+                        .crid(adgenerationResponse.getCreativeid())\n+                        .dealid(adgenerationResponse.getDealid())\n+                        .build();\n+                final BidderBid bidderBid = BidderBid.of(updatedBid, BidType.banner, DEFAULT_BID_CURRENCY);\n+                bidderBids.add(bidderBid);\n+                return Result.of(bidderBids, Collections.emptyList());\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private AdgenerationResponse decodeBodyToBidResponse(HttpCall<BidRequest> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdgenerationResponse.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getAdm(AdgenerationResponse adgenerationResponse, String impId) {\n+        String ad = adgenerationResponse.getAd();\n+        if (StringUtils.isNotBlank(adgenerationResponse.getVastxml())) {\n+            ad = \"<body><div id=\\\"apvad-\" + impId + \"\\\"></div><script type=\\\"text/javascript\\\" id=\\\"apv\\\" \"\n+                    + \"src=\\\"https://cdn.apvdr.com/js/VideoAd.min.js\\\"></script>\" + insertVASTMethod(impId,\n+                    adgenerationResponse.getVastxml()) + \"</body>\";\n+        }\n+        ad = appendChildToBody(ad, adgenerationResponse.getBeacon());\n+        final String unwrappedAd = removeWrapper(ad);\n+        if (StringUtils.isNotBlank(unwrappedAd)) {\n+            return unwrappedAd;\n+        }\n+        return ad;\n+    }\n+\n+    private String insertVASTMethod(String impId, String vastXml) {\n+        final String replacedVastxml = vastXml.replaceAll(\"/\\\\r?\\\\n/g\", \"\");\n+        return \"<script type=\\\"text/javascript\\\"> (function(){ new APV.VideoAd({s:\\\"\" + impId + \"\\\"}).load('\"\n+                + replacedVastxml + \"'); })(); </script>\";\n+    }\n+\n+    private String appendChildToBody(String ad, String beacon) {\n+        return ad.replaceAll(\"</\\\\s?body>\", beacon + \"</body>\");\n+    }\n+\n+    private String removeWrapper(String ad) {\n+        if (!ad.contains(\"<body>\") || ad.lastIndexOf(\"</body>\") == -1) {\n+            return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzQwMzM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTowNDo0OFrOGnkQHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTowNDo0OFrOGnkQHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MTU5Ng==", "bodyText": "missing\nif(CollectionUtils.isEmpty(adgenerationResponse.getResults())){\nreturn Result.empty();\n}\nPlease look at adgeneration.go line 178", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444141596", "createdAt": "2020-06-23T11:04:48Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/AdgenerationBidder.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.prebid.server.bidder.adgeneration;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adgeneration.model.AdgenerationResponse;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adgeneration.ExtImpAdgeneration;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * AdgenerationBidder {@link Bidder} implementation.\n+ */\n+public class AdgenerationBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdgeneration>> ADGENERATION_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdgeneration>>() {\n+            };\n+    private static final String VERSION = \"1.0.0\";\n+    private static final String DEFAULT_REQUEST_CURRENCY = \"JPY\";\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdgenerationBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpAdgeneration extImpAdgeneration = parseAndValidateImpExt(imp);\n+                final String uri = getUri(endpointUrl, getAdSize(imp), extImpAdgeneration.getId(),\n+                        getCurrency(request), request.getSite());\n+                result.add(createSingleRequest(imp, request, uri));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpAdgeneration parseAndValidateImpExt(Imp imp) {\n+        final ExtImpAdgeneration extImpAdgeneration;\n+        try {\n+            extImpAdgeneration = mapper.mapper().convertValue(imp.getExt(), ADGENERATION_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        if (StringUtils.isBlank(extImpAdgeneration.getId())) {\n+            throw new PreBidException(\"No Location ID in ExtImpAdgeneration.\");\n+        }\n+        return extImpAdgeneration;\n+    }\n+\n+    private String getUri(String endpointUrl, String adSize, String id, String currency, Site site) {\n+        final URIBuilder uriBuilder = new URIBuilder()\n+                .setPath(endpointUrl)\n+                .addParameter(\"posall\", \"SSPLOC\")\n+                .addParameter(\"id\", id)\n+                .addParameter(\"sdktype\", \"0\")\n+                .addParameter(\"hb\", \"true\")\n+                .addParameter(\"t\", \"json3\")\n+                .addParameter(\"currency\", currency)\n+                .addParameter(\"sdkname\", \"prebidserver\")\n+                .addParameter(\"adapterver\", VERSION);\n+\n+        if (StringUtils.isNotBlank(adSize)) {\n+            uriBuilder.addParameter(\"size\", adSize);\n+        }\n+\n+        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n+            uriBuilder.addParameter(\"tp\", site.getPage());\n+        }\n+\n+        return uriBuilder.toString();\n+    }\n+\n+    private String getAdSize(Imp imp) {\n+        if (imp.getBanner() == null || CollectionUtils.isEmpty(imp.getBanner().getFormat())) {\n+            return \"\";\n+        }\n+        StringBuilder adSize = new StringBuilder();\n+        for (Format format : imp.getBanner().getFormat()) {\n+            final Integer formatHeight = format.getH();\n+            final Integer formatWidth = format.getW();\n+            adSize.append(String.format(\"%s\u00d7%s,\", formatWidth, formatHeight));\n+        }\n+\n+        if (adSize.length() > 0 && adSize.lastIndexOf(\",\") == adSize.length() - 1) {\n+            adSize.deleteCharAt(adSize.length() - 1);\n+        }\n+\n+        return adSize.toString();\n+    }\n+\n+    private String getCurrency(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getCur())) {\n+            return DEFAULT_REQUEST_CURRENCY;\n+        } else {\n+            for (String cur : request.getCur()) {\n+                if (cur.equals(DEFAULT_REQUEST_CURRENCY)) {\n+                    return cur;\n+                }\n+            }\n+            return request.getCur().get(0);\n+        }\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String uri) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(uri)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdgenerationResponse adgenerationResponse;\n+        try {\n+            adgenerationResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzQwNjY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/prebid/server/bidder/adgeneration/model/AdgenerationResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTowNTo1NFrOGnkSJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTowNTo1NFrOGnkSJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MjExNw==", "bodyText": "Type beaconUrl", "url": "https://github.com/prebid/prebid-server-java/pull/737#discussion_r444142117", "createdAt": "2020-06-23T11:05:54Z", "author": {"login": "BraslavskiyAndrey"}, "path": "src/main/java/org/prebid/server/bidder/adgeneration/model/AdgenerationResponse.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.prebid.server.bidder.adgeneration.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+import java.math.BigDecimal;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class AdgenerationResponse<T> {\n+\n+    String locationid;\n+\n+    String dealid;\n+\n+    String ad;\n+\n+    String beacon;\n+\n+    String baconurl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e2ff354c6a999eaae0cda32df25359b33b355"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4077, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}