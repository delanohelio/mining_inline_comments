{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNjIwNDc0", "number": 889, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMToxNzowMFrOEl5GOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDo1ODo0NlrOEmQzDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTY4MjUwOnYy", "diffSide": "RIGHT", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMToxNzowMFrOHVne9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzoxNzo1MlrOHWEhBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyOTA0NQ==", "bodyText": "Is this a bug in SchemaUtil.getQualfiedTableName? This seems like something we shouldn't have to repeat everywhere.", "url": "https://github.com/apache/phoenix/pull/889#discussion_r492429045", "createdAt": "2020-09-22T01:17:00Z", "author": {"login": "gjacoby126"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -203,6 +203,9 @@ protected String extractCreateViewDDL(PTable table) throws SQLException {\n     private String generateCreateViewDDL(String columnInfoString, String baseTableFullName,\n             String whereClause, String pSchemaName, String pTableName) {\n         String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        if(Character.isDigit(pTableName.charAt(0))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d699a61e025ee4f40db8e1051b87d7ef7611134"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyOTgwNA==", "bodyText": "I think not, this is mainly for parsing. For Internals of phoenix, function should ignore quotes around the name.", "url": "https://github.com/apache/phoenix/pull/889#discussion_r492429804", "createdAt": "2020-09-22T01:20:22Z", "author": {"login": "swaroopak"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -203,6 +203,9 @@ protected String extractCreateViewDDL(PTable table) throws SQLException {\n     private String generateCreateViewDDL(String columnInfoString, String baseTableFullName,\n             String whereClause, String pSchemaName, String pTableName) {\n         String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        if(Character.isDigit(pTableName.charAt(0))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyOTA0NQ=="}, "originalCommit": {"oid": "3d699a61e025ee4f40db8e1051b87d7ef7611134"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5MzcxMw==", "bodyText": "If you look at the phoenix grammar for create table or create view the table name is of the format below: https://phoenix.apache.org/language/index.html#table_ref\nhttps://phoenix.apache.org/language/index.html#name\nSo table names can begin with [A-Z] or _ so any table name that doesn't begin with this has to begin with a quote. So just checking for isDigit is wrong as we might miss other cases where the first letter is something other than a digit for example like a $ or other character. The fix should be if the first character is not a letter or  underscore then quote.", "url": "https://github.com/apache/phoenix/pull/889#discussion_r492893713", "createdAt": "2020-09-22T16:59:37Z", "author": {"login": "tkhurana"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -203,6 +203,9 @@ protected String extractCreateViewDDL(PTable table) throws SQLException {\n     private String generateCreateViewDDL(String columnInfoString, String baseTableFullName,\n             String whereClause, String pSchemaName, String pTableName) {\n         String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        if(Character.isDigit(pTableName.charAt(0))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyOTA0NQ=="}, "originalCommit": {"oid": "3d699a61e025ee4f40db8e1051b87d7ef7611134"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwNDcxMA==", "bodyText": "Makes sense! However,  [a-zA-Z_0-9-.] these are the only acceptable characters in the name.", "url": "https://github.com/apache/phoenix/pull/889#discussion_r492904710", "createdAt": "2020-09-22T17:17:52Z", "author": {"login": "swaroopak"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -203,6 +203,9 @@ protected String extractCreateViewDDL(PTable table) throws SQLException {\n     private String generateCreateViewDDL(String columnInfoString, String baseTableFullName,\n             String whereClause, String pSchemaName, String pTableName) {\n         String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        if(Character.isDigit(pTableName.charAt(0))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyOTA0NQ=="}, "originalCommit": {"oid": "3d699a61e025ee4f40db8e1051b87d7ef7611134"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDkwMDc1OnYy", "diffSide": "RIGHT", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzo1MDoxM1rOHWFuEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDoyNTo1OVrOHWLEnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyNDQzNA==", "bodyText": "Why not add this function to SchemaUtil class itself?", "url": "https://github.com/apache/phoenix/pull/889#discussion_r492924434", "createdAt": "2020-09-22T17:50:13Z", "author": {"login": "priyankporwal"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -202,12 +202,20 @@ protected String extractCreateViewDDL(PTable table) throws SQLException {\n \n     private String generateCreateViewDDL(String columnInfoString, String baseTableFullName,\n             String whereClause, String pSchemaName, String pTableName) {\n-        String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        String viewFullName = getPTableFullName(pSchemaName, pTableName);\n         StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_VIEW, viewFullName,\n                 columnInfoString, baseTableFullName, whereClause));\n         return outputBuilder.toString();\n     }\n \n+    private String getPTableFullName(String pSchemaName, String pTableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c2707d1b7f1ff814697548f6b03ab2f1088225f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyNTMyMA==", "bodyText": "This is not needed in internals of phoenix.", "url": "https://github.com/apache/phoenix/pull/889#discussion_r492925320", "createdAt": "2020-09-22T17:51:43Z", "author": {"login": "swaroopak"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -202,12 +202,20 @@ protected String extractCreateViewDDL(PTable table) throws SQLException {\n \n     private String generateCreateViewDDL(String columnInfoString, String baseTableFullName,\n             String whereClause, String pSchemaName, String pTableName) {\n-        String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        String viewFullName = getPTableFullName(pSchemaName, pTableName);\n         StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_VIEW, viewFullName,\n                 columnInfoString, baseTableFullName, whereClause));\n         return outputBuilder.toString();\n     }\n \n+    private String getPTableFullName(String pSchemaName, String pTableName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyNDQzNA=="}, "originalCommit": {"oid": "0c2707d1b7f1ff814697548f6b03ab2f1088225f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMjEyNQ==", "bodyText": "Maybe so today, but we never know when it might be needed later. SchemaUtil seems like the right place for it instead of fragmented/duplicated in various tools.", "url": "https://github.com/apache/phoenix/pull/889#discussion_r493012125", "createdAt": "2020-09-22T20:25:59Z", "author": {"login": "priyankporwal"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -202,12 +202,20 @@ protected String extractCreateViewDDL(PTable table) throws SQLException {\n \n     private String generateCreateViewDDL(String columnInfoString, String baseTableFullName,\n             String whereClause, String pSchemaName, String pTableName) {\n-        String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        String viewFullName = getPTableFullName(pSchemaName, pTableName);\n         StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_VIEW, viewFullName,\n                 columnInfoString, baseTableFullName, whereClause));\n         return outputBuilder.toString();\n     }\n \n+    private String getPTableFullName(String pSchemaName, String pTableName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyNDQzNA=="}, "originalCommit": {"oid": "0c2707d1b7f1ff814697548f6b03ab2f1088225f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTQ2NjQ3OnYy", "diffSide": "RIGHT", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDoyOTo0NVrOHWLMlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDo0Nzo1NFrOHWLzhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNDE2Ng==", "bodyText": "what does digit in the first position signify? Perhaps add a comment as well.", "url": "https://github.com/apache/phoenix/pull/889#discussion_r493014166", "createdAt": "2020-09-22T20:29:45Z", "author": {"login": "priyankporwal"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -326,8 +334,13 @@ private String convertPropertiesToString() {\n                 if (optionBuilder.length() != 0) {\n                     optionBuilder.append(\", \");\n                 }\n-                key = columnFamilyName.equals(QueryConstants.DEFAULT_COLUMN_FAMILY)? key : String.format(\"\\\"%s\\\".%s\", columnFamilyName, key);\n-                optionBuilder.append(key+\"=\"+value);\n+                key = columnFamilyName.equals(QueryConstants.DEFAULT_COLUMN_FAMILY)?\n+                        key : String.format(\"\\\"%s\\\".%s\", columnFamilyName, key);\n+                if(!Character.isDigit(value.charAt(0)) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c2707d1b7f1ff814697548f6b03ab2f1088225f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNDEzNA==", "bodyText": "added a comment.", "url": "https://github.com/apache/phoenix/pull/889#discussion_r493024134", "createdAt": "2020-09-22T20:47:54Z", "author": {"login": "swaroopak"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -326,8 +334,13 @@ private String convertPropertiesToString() {\n                 if (optionBuilder.length() != 0) {\n                     optionBuilder.append(\", \");\n                 }\n-                key = columnFamilyName.equals(QueryConstants.DEFAULT_COLUMN_FAMILY)? key : String.format(\"\\\"%s\\\".%s\", columnFamilyName, key);\n-                optionBuilder.append(key+\"=\"+value);\n+                key = columnFamilyName.equals(QueryConstants.DEFAULT_COLUMN_FAMILY)?\n+                        key : String.format(\"\\\"%s\\\".%s\", columnFamilyName, key);\n+                if(!Character.isDigit(value.charAt(0)) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNDE2Ng=="}, "originalCommit": {"oid": "0c2707d1b7f1ff814697548f6b03ab2f1088225f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTU2NTU3OnYy", "diffSide": "RIGHT", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDo1ODo0NlrOHWMJ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMTo1OTo0NFrOHWN38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyOTg0Ng==", "bodyText": "Nit: given this comment, shouldn't we check that the string beginning with a digit is actually a number and not something like '72HOURS'? :)", "url": "https://github.com/apache/phoenix/pull/889#discussion_r493029846", "createdAt": "2020-09-22T20:58:46Z", "author": {"login": "priyankporwal"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -326,8 +327,15 @@ private String convertPropertiesToString() {\n                 if (optionBuilder.length() != 0) {\n                     optionBuilder.append(\", \");\n                 }\n-                key = columnFamilyName.equals(QueryConstants.DEFAULT_COLUMN_FAMILY)? key : String.format(\"\\\"%s\\\".%s\", columnFamilyName, key);\n-                optionBuilder.append(key+\"=\"+value);\n+                key = columnFamilyName.equals(QueryConstants.DEFAULT_COLUMN_FAMILY)?\n+                        key : String.format(\"\\\"%s\\\".%s\", columnFamilyName, key);\n+                // properties value that corresponds to a number will not need single quotes around it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f46b842d8c91bb32893ea19c5d553aa8764a8bc1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1ODAzMg==", "bodyText": "That makes sense, I changed it.", "url": "https://github.com/apache/phoenix/pull/889#discussion_r493058032", "createdAt": "2020-09-22T21:59:44Z", "author": {"login": "swaroopak"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -326,8 +327,15 @@ private String convertPropertiesToString() {\n                 if (optionBuilder.length() != 0) {\n                     optionBuilder.append(\", \");\n                 }\n-                key = columnFamilyName.equals(QueryConstants.DEFAULT_COLUMN_FAMILY)? key : String.format(\"\\\"%s\\\".%s\", columnFamilyName, key);\n-                optionBuilder.append(key+\"=\"+value);\n+                key = columnFamilyName.equals(QueryConstants.DEFAULT_COLUMN_FAMILY)?\n+                        key : String.format(\"\\\"%s\\\".%s\", columnFamilyName, key);\n+                // properties value that corresponds to a number will not need single quotes around it", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyOTg0Ng=="}, "originalCommit": {"oid": "f46b842d8c91bb32893ea19c5d553aa8764a8bc1"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4600, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}