{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzQxNTEw", "number": 679, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo0NjozNVrODX_5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMToxMDo1NlrODYCYjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDkwNjc3OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo0NjozNVrOFdm1UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMzozNVrOFdo2ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4OTI2NQ==", "bodyText": "Can we write the unit as part of const name?", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366589265", "createdAt": "2020-01-14T21:46:35Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -59,10 +57,31 @@\n @NeedsOwnMiniClusterTest\n public class MaxLookbackIT extends BaseUniqueNamesOwnClusterIT {\n     private static final Log LOG = LogFactory.getLog(MaxLookbackIT.class);\n-    private static final int MAX_LOOKBACK_AGE = 10;\n+    private static final int MAX_LOOKBACK_AGE = 15;\n     private static final int ROWS_POPULATED = 2;\n+    public static final int WAIT_AFTER_TABLE_CREATION = 600000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjM5NA==", "bodyText": "Suggest setting WAIT_AFTER_TABLE_CREATION = MAX_LOOKBACK_AGE * 100 ... just in case someone increases MAX_LOOKBACK_AGE and leaves WAIT_AFTER_TABLE_CREATION as is.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366622394", "createdAt": "2020-01-14T23:13:35Z", "author": {"login": "priyankporwal"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -59,10 +57,31 @@\n @NeedsOwnMiniClusterTest\n public class MaxLookbackIT extends BaseUniqueNamesOwnClusterIT {\n     private static final Log LOG = LogFactory.getLog(MaxLookbackIT.class);\n-    private static final int MAX_LOOKBACK_AGE = 10;\n+    private static final int MAX_LOOKBACK_AGE = 15;\n     private static final int ROWS_POPULATED = 2;\n+    public static final int WAIT_AFTER_TABLE_CREATION = 600000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4OTI2NQ=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDkxMTI3OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo0ODoxM1rOFdm39g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDo1MzoxOVrOFdqfXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4OTk0Mg==", "bodyText": "nit: remove commented code", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366589942", "createdAt": "2020-01-14T21:48:13Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1);\n+            long afterFirstInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasTtl(conn, dataTable, ttl);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertTableHasTtl(conn, indexTable, ttl);\n-\n             //first make sure we inserted correctly\n-            String sql = String.format(\"SELECT val2 FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT val2 FROM %s WHERE id = 'a'\", dataTableName);\n+          //  assertExplainPlan(conn, sql, dataTableName, fullIndexName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0OTE4MQ==", "bodyText": "Not commented out anymore. :-)", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366649181", "createdAt": "2020-01-15T00:53:19Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1);\n+            long afterFirstInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasTtl(conn, dataTable, ttl);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertTableHasTtl(conn, indexTable, ttl);\n-\n             //first make sure we inserted correctly\n-            String sql = String.format(\"SELECT val2 FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT val2 FROM %s WHERE id = 'a'\", dataTableName);\n+          //  assertExplainPlan(conn, sql, dataTableName, fullIndexName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4OTk0Mg=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDkzNjQyOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1NzoyOVrOFdnHpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDo1MzowMFrOFdqfGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mzk1Nw==", "bodyText": "nit: remove commented code", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366593957", "createdAt": "2020-01-14T21:57:29Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1);\n+            long afterFirstInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasTtl(conn, dataTable, ttl);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertTableHasTtl(conn, indexTable, ttl);\n-\n             //first make sure we inserted correctly\n-            String sql = String.format(\"SELECT val2 FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT val2 FROM %s WHERE id = 'a'\", dataTableName);\n+          //  assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n             assertRowExistsAtSCN(getUrl(),sql, afterFirstInsertSCN, true);\n             int originalRowCount = 2;\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n             //force a flush\n-            flush(indexTable);\n+            flush(dataTable);\n             //flush shouldn't have changed it\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n+                      // assertExplainPlan(conn, sql, dataTableName, fullIndexName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0OTExMw==", "bodyText": "Not commented out anymore. :-)", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366649113", "createdAt": "2020-01-15T00:53:00Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1);\n+            long afterFirstInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasTtl(conn, dataTable, ttl);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertTableHasTtl(conn, indexTable, ttl);\n-\n             //first make sure we inserted correctly\n-            String sql = String.format(\"SELECT val2 FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT val2 FROM %s WHERE id = 'a'\", dataTableName);\n+          //  assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n             assertRowExistsAtSCN(getUrl(),sql, afterFirstInsertSCN, true);\n             int originalRowCount = 2;\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n             //force a flush\n-            flush(indexTable);\n+            flush(dataTable);\n             //flush shouldn't have changed it\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n+                      // assertExplainPlan(conn, sql, dataTableName, fullIndexName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mzk1Nw=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDkzNzA3OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1Nzo0M1rOFdnIDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1Nzo0M1rOFdnIDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NDA2MQ==", "bodyText": "nit: remove commented code", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366594061", "createdAt": "2020-01-14T21:57:43Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1);\n+            long afterFirstInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasTtl(conn, dataTable, ttl);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertTableHasTtl(conn, indexTable, ttl);\n-\n             //first make sure we inserted correctly\n-            String sql = String.format(\"SELECT val2 FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT val2 FROM %s WHERE id = 'a'\", dataTableName);\n+          //  assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n             assertRowExistsAtSCN(getUrl(),sql, afterFirstInsertSCN, true);\n             int originalRowCount = 2;\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n             //force a flush\n-            flush(indexTable);\n+            flush(dataTable);\n             //flush shouldn't have changed it\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n+                      // assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            long timeToSleep = (MAX_LOOKBACK_AGE * 1000) -\n+                (EnvironmentEdgeManager.currentTimeMillis() - afterFirstInsertSCN);\n+            if (timeToSleep > 0) {\n+                injectEdge.incValue(timeToSleep);\n+                //Thread.sleep(timeToSleep);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTA5OTcyOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzowNTo1N1rOFdos1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMjozNDo1MFrOFdr13w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxOTg2MA==", "bodyText": "does this value change now?", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366619860", "createdAt": "2020-01-14T23:05:57Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -105,60 +129,52 @@ public void testTooLowSCNWithMaxLookbackAge() throws Exception {\n     public void testRecentlyDeletedRowsNotCompactedAway() throws Exception {\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            String fullIndexName = indexStem + \"1\";\n+            createTable(dataTableName);\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n             TableName dataTable = TableName.valueOf(dataTableName);\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n-            assertTableHasTtl(conn, indexTable, Integer.MAX_VALUE);\n-            long beforeDeleteSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n-            Thread.sleep(1); //make sure we delete at a different ts\n+            populateTable(dataTableName);\n+            //make sure we're after the inserts have been committed\n+            injectEdge.incValue(1);\n+            long beforeDeleteSCN = EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(10); //make sure we delete at a different ts\n             Statement stmt = conn.createStatement();\n             stmt.execute(\"DELETE FROM \" + dataTableName + \" WHERE \" + \" id = 'a'\");\n             Assert.assertEquals(1, stmt.getUpdateCount());\n             conn.commit();\n             //select stmt to get row we deleted\n-            String sql = String.format(\"SELECT * FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT * FROM %s WHERE id = 'a'\", dataTableName);\n             int rowsPlusDeleteMarker = ROWS_POPULATED;\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n             flush(dataTable);\n-            flush(indexTable);\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n-            long beforeFirstCompactSCN = EnvironmentEdgeManager.currentTime();\n-            Thread.sleep(1);\n-            majorCompact(indexTable, beforeFirstCompactSCN);\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n+            long beforeFirstCompactSCN = EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(1); //new ts for major compaction\n+            majorCompact(dataTable, beforeFirstCompactSCN);\n+            assertRawRowCount(conn, dataTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n             //wait for the lookback time. After this compactions should purge the deleted row\n-            Thread.sleep(MAX_LOOKBACK_AGE * 1000);\n-            long beforeSecondCompactSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(MAX_LOOKBACK_AGE * 1000);\n+            long beforeSecondCompactSCN = EnvironmentEdgeManager.currentTimeMillis();\n             String notDeletedRowSql =\n-                String.format(\"SELECT * FROM %s WHERE val1 = 'bc'\", dataTableName);\n-            assertExplainPlan(conn, notDeletedRowSql, dataTableName, fullIndexName);\n+                String.format(\"SELECT * FROM %s WHERE id = 'b'\", dataTableName);\n             assertRowExistsAtSCN(getUrl(), notDeletedRowSql, beforeSecondCompactSCN, true);\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n             assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n             conn.createStatement().execute(\"upsert into \" + dataTableName +\n                 \" values ('c', 'cd', 'cde', 'cdef')\");\n             conn.commit();\n-            majorCompact(indexTable, beforeSecondCompactSCN);\n             majorCompact(dataTable, beforeSecondCompactSCN);\n             assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n             //deleted row should be gone, but not deleted row should still be there.\n             assertRowExistsAtSCN(getUrl(), sql, beforeSecondCompactSCN, false);\n             assertRowExistsAtSCN(getUrl(), notDeletedRowSql, beforeSecondCompactSCN, true);\n             //1 deleted row should be gone\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n+            assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n         }\n     }\n \n     @Test(timeout=60000L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjExOA==", "bodyText": "Not sure exactly what the question means? Before it was testing the cleanup of the delete markers in an index, now it's testing the cleanup of the delete markers in a base table. The same code's getting exercised either way.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366622118", "createdAt": "2020-01-14T23:12:41Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -105,60 +129,52 @@ public void testTooLowSCNWithMaxLookbackAge() throws Exception {\n     public void testRecentlyDeletedRowsNotCompactedAway() throws Exception {\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            String fullIndexName = indexStem + \"1\";\n+            createTable(dataTableName);\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n             TableName dataTable = TableName.valueOf(dataTableName);\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n-            assertTableHasTtl(conn, indexTable, Integer.MAX_VALUE);\n-            long beforeDeleteSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n-            Thread.sleep(1); //make sure we delete at a different ts\n+            populateTable(dataTableName);\n+            //make sure we're after the inserts have been committed\n+            injectEdge.incValue(1);\n+            long beforeDeleteSCN = EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(10); //make sure we delete at a different ts\n             Statement stmt = conn.createStatement();\n             stmt.execute(\"DELETE FROM \" + dataTableName + \" WHERE \" + \" id = 'a'\");\n             Assert.assertEquals(1, stmt.getUpdateCount());\n             conn.commit();\n             //select stmt to get row we deleted\n-            String sql = String.format(\"SELECT * FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT * FROM %s WHERE id = 'a'\", dataTableName);\n             int rowsPlusDeleteMarker = ROWS_POPULATED;\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n             flush(dataTable);\n-            flush(indexTable);\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n-            long beforeFirstCompactSCN = EnvironmentEdgeManager.currentTime();\n-            Thread.sleep(1);\n-            majorCompact(indexTable, beforeFirstCompactSCN);\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n+            long beforeFirstCompactSCN = EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(1); //new ts for major compaction\n+            majorCompact(dataTable, beforeFirstCompactSCN);\n+            assertRawRowCount(conn, dataTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n             //wait for the lookback time. After this compactions should purge the deleted row\n-            Thread.sleep(MAX_LOOKBACK_AGE * 1000);\n-            long beforeSecondCompactSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(MAX_LOOKBACK_AGE * 1000);\n+            long beforeSecondCompactSCN = EnvironmentEdgeManager.currentTimeMillis();\n             String notDeletedRowSql =\n-                String.format(\"SELECT * FROM %s WHERE val1 = 'bc'\", dataTableName);\n-            assertExplainPlan(conn, notDeletedRowSql, dataTableName, fullIndexName);\n+                String.format(\"SELECT * FROM %s WHERE id = 'b'\", dataTableName);\n             assertRowExistsAtSCN(getUrl(), notDeletedRowSql, beforeSecondCompactSCN, true);\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n             assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n             conn.createStatement().execute(\"upsert into \" + dataTableName +\n                 \" values ('c', 'cd', 'cde', 'cdef')\");\n             conn.commit();\n-            majorCompact(indexTable, beforeSecondCompactSCN);\n             majorCompact(dataTable, beforeSecondCompactSCN);\n             assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n             //deleted row should be gone, but not deleted row should still be there.\n             assertRowExistsAtSCN(getUrl(), sql, beforeSecondCompactSCN, false);\n             assertRowExistsAtSCN(getUrl(), notDeletedRowSql, beforeSecondCompactSCN, true);\n             //1 deleted row should be gone\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n+            assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n         }\n     }\n \n     @Test(timeout=60000L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxOTg2MA=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyNTAwMA==", "bodyText": "aah! my bad, I misunderstood this.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366625000", "createdAt": "2020-01-14T23:21:56Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -105,60 +129,52 @@ public void testTooLowSCNWithMaxLookbackAge() throws Exception {\n     public void testRecentlyDeletedRowsNotCompactedAway() throws Exception {\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            String fullIndexName = indexStem + \"1\";\n+            createTable(dataTableName);\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n             TableName dataTable = TableName.valueOf(dataTableName);\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n-            assertTableHasTtl(conn, indexTable, Integer.MAX_VALUE);\n-            long beforeDeleteSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n-            Thread.sleep(1); //make sure we delete at a different ts\n+            populateTable(dataTableName);\n+            //make sure we're after the inserts have been committed\n+            injectEdge.incValue(1);\n+            long beforeDeleteSCN = EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(10); //make sure we delete at a different ts\n             Statement stmt = conn.createStatement();\n             stmt.execute(\"DELETE FROM \" + dataTableName + \" WHERE \" + \" id = 'a'\");\n             Assert.assertEquals(1, stmt.getUpdateCount());\n             conn.commit();\n             //select stmt to get row we deleted\n-            String sql = String.format(\"SELECT * FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT * FROM %s WHERE id = 'a'\", dataTableName);\n             int rowsPlusDeleteMarker = ROWS_POPULATED;\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n             flush(dataTable);\n-            flush(indexTable);\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n-            long beforeFirstCompactSCN = EnvironmentEdgeManager.currentTime();\n-            Thread.sleep(1);\n-            majorCompact(indexTable, beforeFirstCompactSCN);\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n+            long beforeFirstCompactSCN = EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(1); //new ts for major compaction\n+            majorCompact(dataTable, beforeFirstCompactSCN);\n+            assertRawRowCount(conn, dataTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n             //wait for the lookback time. After this compactions should purge the deleted row\n-            Thread.sleep(MAX_LOOKBACK_AGE * 1000);\n-            long beforeSecondCompactSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(MAX_LOOKBACK_AGE * 1000);\n+            long beforeSecondCompactSCN = EnvironmentEdgeManager.currentTimeMillis();\n             String notDeletedRowSql =\n-                String.format(\"SELECT * FROM %s WHERE val1 = 'bc'\", dataTableName);\n-            assertExplainPlan(conn, notDeletedRowSql, dataTableName, fullIndexName);\n+                String.format(\"SELECT * FROM %s WHERE id = 'b'\", dataTableName);\n             assertRowExistsAtSCN(getUrl(), notDeletedRowSql, beforeSecondCompactSCN, true);\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n             assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n             conn.createStatement().execute(\"upsert into \" + dataTableName +\n                 \" values ('c', 'cd', 'cde', 'cdef')\");\n             conn.commit();\n-            majorCompact(indexTable, beforeSecondCompactSCN);\n             majorCompact(dataTable, beforeSecondCompactSCN);\n             assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n             //deleted row should be gone, but not deleted row should still be there.\n             assertRowExistsAtSCN(getUrl(), sql, beforeSecondCompactSCN, false);\n             assertRowExistsAtSCN(getUrl(), notDeletedRowSql, beforeSecondCompactSCN, true);\n             //1 deleted row should be gone\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n+            assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n         }\n     }\n \n     @Test(timeout=60000L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxOTg2MA=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3MTMyNw==", "bodyText": "And now we're testing both.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366671327", "createdAt": "2020-01-15T02:34:50Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -105,60 +129,52 @@ public void testTooLowSCNWithMaxLookbackAge() throws Exception {\n     public void testRecentlyDeletedRowsNotCompactedAway() throws Exception {\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            String fullIndexName = indexStem + \"1\";\n+            createTable(dataTableName);\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n             TableName dataTable = TableName.valueOf(dataTableName);\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n-            assertTableHasTtl(conn, indexTable, Integer.MAX_VALUE);\n-            long beforeDeleteSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n-            Thread.sleep(1); //make sure we delete at a different ts\n+            populateTable(dataTableName);\n+            //make sure we're after the inserts have been committed\n+            injectEdge.incValue(1);\n+            long beforeDeleteSCN = EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(10); //make sure we delete at a different ts\n             Statement stmt = conn.createStatement();\n             stmt.execute(\"DELETE FROM \" + dataTableName + \" WHERE \" + \" id = 'a'\");\n             Assert.assertEquals(1, stmt.getUpdateCount());\n             conn.commit();\n             //select stmt to get row we deleted\n-            String sql = String.format(\"SELECT * FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT * FROM %s WHERE id = 'a'\", dataTableName);\n             int rowsPlusDeleteMarker = ROWS_POPULATED;\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n             flush(dataTable);\n-            flush(indexTable);\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n-            long beforeFirstCompactSCN = EnvironmentEdgeManager.currentTime();\n-            Thread.sleep(1);\n-            majorCompact(indexTable, beforeFirstCompactSCN);\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n+            long beforeFirstCompactSCN = EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(1); //new ts for major compaction\n+            majorCompact(dataTable, beforeFirstCompactSCN);\n+            assertRawRowCount(conn, dataTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n             //wait for the lookback time. After this compactions should purge the deleted row\n-            Thread.sleep(MAX_LOOKBACK_AGE * 1000);\n-            long beforeSecondCompactSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(MAX_LOOKBACK_AGE * 1000);\n+            long beforeSecondCompactSCN = EnvironmentEdgeManager.currentTimeMillis();\n             String notDeletedRowSql =\n-                String.format(\"SELECT * FROM %s WHERE val1 = 'bc'\", dataTableName);\n-            assertExplainPlan(conn, notDeletedRowSql, dataTableName, fullIndexName);\n+                String.format(\"SELECT * FROM %s WHERE id = 'b'\", dataTableName);\n             assertRowExistsAtSCN(getUrl(), notDeletedRowSql, beforeSecondCompactSCN, true);\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n             assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n             conn.createStatement().execute(\"upsert into \" + dataTableName +\n                 \" values ('c', 'cd', 'cde', 'cdef')\");\n             conn.commit();\n-            majorCompact(indexTable, beforeSecondCompactSCN);\n             majorCompact(dataTable, beforeSecondCompactSCN);\n             assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n             //deleted row should be gone, but not deleted row should still be there.\n             assertRowExistsAtSCN(getUrl(), sql, beforeSecondCompactSCN, false);\n             assertRowExistsAtSCN(getUrl(), notDeletedRowSql, beforeSecondCompactSCN, true);\n             //1 deleted row should be gone\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n+            assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n         }\n     }\n \n     @Test(timeout=60000L)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxOTg2MA=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTEwMTIwOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzowNjozOFrOFdotrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzowNjozOFrOFdotrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMDA3Nw==", "bodyText": "nit : timeToAdvance sounds better than timeToSleep to me", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366620077", "createdAt": "2020-01-14T23:06:38Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1);\n+            long afterFirstInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasTtl(conn, dataTable, ttl);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertTableHasTtl(conn, indexTable, ttl);\n-\n             //first make sure we inserted correctly\n-            String sql = String.format(\"SELECT val2 FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT val2 FROM %s WHERE id = 'a'\", dataTableName);\n+          //  assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n             assertRowExistsAtSCN(getUrl(),sql, afterFirstInsertSCN, true);\n             int originalRowCount = 2;\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n             //force a flush\n-            flush(indexTable);\n+            flush(dataTable);\n             //flush shouldn't have changed it\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n+                      // assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            long timeToSleep = (MAX_LOOKBACK_AGE * 1000) -\n+                (EnvironmentEdgeManager.currentTimeMillis() - afterFirstInsertSCN);\n+            if (timeToSleep > 0) {\n+                injectEdge.incValue(timeToSleep);\n+                //Thread.sleep(timeToSleep);\n+            }\n+            //make sure it's still on disk\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n+            injectEdge.incValue(1); //get a new timestamp for compaction\n+            majorCompact(dataTable, EnvironmentEdgeManager.currentTimeMillis());\n+            //nothing should have been purged by this major compaction\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n             //now wait the TTL\n-            Thread.sleep((ttl +1) * 1000);\n-            long afterTTLExpiresSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n-            //make sure we can't see it after expiration from masking\n-            assertRowExistsAtSCN(getUrl(), sql, afterTTLExpiresSCN, false);\n-            //but it's still on disk\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n-            long beforeMajorCompactSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n-            majorCompact(indexTable, beforeMajorCompactSCN);\n-            assertRawRowCount(conn, indexTable, 0);\n+            timeToSleep = (ttl * 1000) -", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTExMTE5OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMTowNlrOFdozwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoyMTowM1rOFdo_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMTYzNA==", "bodyText": "nit: increamentValue", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366621634", "createdAt": "2020-01-14T23:11:06Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -105,60 +129,52 @@ public void testTooLowSCNWithMaxLookbackAge() throws Exception {\n     public void testRecentlyDeletedRowsNotCompactedAway() throws Exception {\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            String fullIndexName = indexStem + \"1\";\n+            createTable(dataTableName);\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjYyOQ==", "bodyText": "The ManualEnvironmentEdge is copied from HBase code, where that's the method name. I couldn't use the HBase class because Phoenix's EEM is odd and requires a specific abstract subclass of Edge", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366622629", "createdAt": "2020-01-14T23:14:18Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -105,60 +129,52 @@ public void testTooLowSCNWithMaxLookbackAge() throws Exception {\n     public void testRecentlyDeletedRowsNotCompactedAway() throws Exception {\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            String fullIndexName = indexStem + \"1\";\n+            createTable(dataTableName);\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMTYzNA=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyNDczNA==", "bodyText": "Given that code does not override the method, it makes sense to rename the method.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366624734", "createdAt": "2020-01-14T23:21:03Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -105,60 +129,52 @@ public void testTooLowSCNWithMaxLookbackAge() throws Exception {\n     public void testRecentlyDeletedRowsNotCompactedAway() throws Exception {\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            String fullIndexName = indexStem + \"1\";\n+            createTable(dataTableName);\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMTYzNA=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTExNjcyOnYy", "diffSide": "LEFT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMzo1NFrOFdo3Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzo1NTowNVrOFdpkpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjUwNw==", "bodyText": "What was the reason for eliminating index tables from the tests? Was not this JIRA originally about index tables?", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366622507", "createdAt": "2020-01-14T23:13:54Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -213,62 +241,49 @@ public void testRecentMaxVersionsNotCompactedAway() throws Exception {\n         String thirdValue = \"ghi\";\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem, versions);\n-            long afterInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1); //increment by 1 so we can see our write\n+            long afterInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             //make sure table and index metadata is set up right for versions\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasVersions(conn, dataTable, versions);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyNTA2OQ==", "bodyText": "It was originally about index tables, but I eventually realized that this needed to apply to all tables in order for SCN to work properly, so there's nothing \"index specific\" about the functionality anymore.\nIf the consensus is that we should have specific index cases in here to make sure nothing in the indexing coprocs break the general behavior, I'll put some (back) in.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366625069", "createdAt": "2020-01-14T23:22:10Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -213,62 +241,49 @@ public void testRecentMaxVersionsNotCompactedAway() throws Exception {\n         String thirdValue = \"ghi\";\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem, versions);\n-            long afterInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1); //increment by 1 so we can see our write\n+            long afterInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             //make sure table and index metadata is set up right for versions\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasVersions(conn, dataTable, versions);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjUwNw=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyNzI3Ng==", "bodyText": "I suggest including indexes back and applying the same operations/checks to the index tables along with their data tables.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366627276", "createdAt": "2020-01-14T23:29:41Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -213,62 +241,49 @@ public void testRecentMaxVersionsNotCompactedAway() throws Exception {\n         String thirdValue = \"ghi\";\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem, versions);\n-            long afterInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1); //increment by 1 so we can see our write\n+            long afterInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             //make sure table and index metadata is set up right for versions\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasVersions(conn, dataTable, versions);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjUwNw=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzNDE1MQ==", "bodyText": "All right, will do.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366634151", "createdAt": "2020-01-14T23:55:05Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -213,62 +241,49 @@ public void testRecentMaxVersionsNotCompactedAway() throws Exception {\n         String thirdValue = \"ghi\";\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem, versions);\n-            long afterInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1); //increment by 1 so we can see our write\n+            long afterInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             //make sure table and index metadata is set up right for versions\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasVersions(conn, dataTable, versions);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjUwNw=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTExNjc5OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMzo1NVrOFdo3Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDo1Mzo1MVrOFdqf_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjUxNQ==", "bodyText": "Nit: consistent comment here", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366622515", "createdAt": "2020-01-14T23:13:55Z", "author": {"login": "priyankporwal"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyNjQzOA==", "bodyText": "WAIT_AFTER_TABLE_CREATION isn't meant to be a factor of MAX_LOOKBACK_AGE -- it's just an arbitrarily large number to make sure that all the metadata is older than the current timestamp. It could probably be lower, but since the size doesn't cost us anything I didn't spend too much time trying to optimize it.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366626438", "createdAt": "2020-01-14T23:26:42Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjUxNQ=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyNzQ3Ng==", "bodyText": "Turns out any value >= 1 works. I'll just switch it to 1", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366627476", "createdAt": "2020-01-14T23:30:25Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjUxNQ=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzNDA0MA==", "bodyText": "The suggestion was not to have WAIT_AFTER_TABLE_CREATION be a multiple of MAX_LOOKBACK_AGE necessarily, but something larger than MAX_LOOKBACK_AGE  -- just something so that if you did (now - MAX_LOOKBACK_AGE) it didn't go before table creation time.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366634040", "createdAt": "2020-01-14T23:54:38Z", "author": {"login": "priyankporwal"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjUxNQ=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0OTM0MQ==", "bodyText": "That's not necessary because we always advance time by MAX_LOOKBACK_AGE before trying to look back that far.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366649341", "createdAt": "2020-01-15T00:53:51Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjUxNQ=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTMxNDcxOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMToxMDo1NlrOFdqwRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMjozNDowMFrOFdr1Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1MzUxMQ==", "bodyText": "Nit: the comment is not right (nothing here equals 10mins).. wait is only 1 ms now", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366653511", "createdAt": "2020-01-15T01:10:56Z", "author": {"login": "priyankporwal"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -213,51 +274,57 @@ public void testRecentMaxVersionsNotCompactedAway() throws Exception {\n         String thirdValue = \"ghi\";\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem, versions);\n-            long afterInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            String indexName = generateUniqueName();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a379096486f55a77859eeea676c23f0e677914"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3MTExMQ==", "bodyText": "Thanks, good catch. Fixed.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366671111", "createdAt": "2020-01-15T02:34:00Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -213,51 +274,57 @@ public void testRecentMaxVersionsNotCompactedAway() throws Exception {\n         String thirdValue = \"ghi\";\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem, versions);\n-            long afterInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            String indexName = generateUniqueName();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1MzUxMQ=="}, "originalCommit": {"oid": "c1a379096486f55a77859eeea676c23f0e677914"}, "originalPosition": 294}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4681, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}