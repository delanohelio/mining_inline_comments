{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNjg5NjM0", "number": 737, "title": "PHOENIX-5773 Index tool output tables should support multiple simulta\u2026", "bodyText": "\u2026neous rebuilds", "createdAt": "2020-03-18T22:08:51Z", "url": "https://github.com/apache/phoenix/pull/737", "merged": true, "mergeCommit": {"oid": "49917a65c0af49822f5286da0ebbc5c3965307c0"}, "closed": true, "closedAt": "2020-03-24T20:02:19Z", "author": {"login": "kadirozde"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO-qbqgH2gAyMzkwNjg5NjM0OjQwZmQyOTBmMThiMzZhMmNiYmJlMGIwNTk4OTAzOTM2MjVjNzcwOWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQlfr3AFqTM3OTg0ODUzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "40fd290f18b36a2cbbbe0b059890393625c7709d", "author": {"user": {"login": "kadirozde", "name": null}}, "url": "https://github.com/apache/phoenix/commit/40fd290f18b36a2cbbbe0b059890393625c7709d", "committedDate": "2020-03-18T22:01:29Z", "message": "PHOENIX-5773 Index tool output tables should support multiple simultaneous rebuilds"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTcyODQ4", "url": "https://github.com/apache/phoenix/pull/737#pullrequestreview-377972848", "createdAt": "2020-03-19T18:08:44Z", "commit": {"oid": "40fd290f18b36a2cbbbe0b059890393625c7709d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MDkyMDQ5", "url": "https://github.com/apache/phoenix/pull/737#pullrequestreview-378092049", "createdAt": "2020-03-19T21:04:02Z", "commit": {"oid": "40fd290f18b36a2cbbbe0b059890393625c7709d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTowNDowM1rOF5AU_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMToxNDoyOFrOF5AoBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMxODUyNg==", "bodyText": "Would be good to extract row key building into its own function", "url": "https://github.com/apache/phoenix/pull/737#discussion_r395318526", "createdAt": "2020-03-19T21:04:03Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexRebuildRegionScanner.java", "diffHunk": "@@ -257,16 +258,29 @@ private void logToIndexToolResultTable() throws IOException {\n         long scanMaxTs = scan.getTimeRange().getMax();\n         byte[] keyPrefix = Bytes.toBytes(Long.toString(scanMaxTs));\n         byte[] regionName = Bytes.toBytes(region.getRegionInfo().getRegionNameAsString());\n-        // The row key for the result table is the max timestamp of the scan + the table region name + scan start row\n-        // + scan stop row\n-        byte[] rowKey = new byte[keyPrefix.length + regionName.length + scan.getStartRow().length +\n-                scan.getStopRow().length];\n-        Bytes.putBytes(rowKey, 0, keyPrefix, 0, keyPrefix.length);\n-        Bytes.putBytes(rowKey, keyPrefix.length, regionName, 0, regionName.length);\n-        Bytes.putBytes(rowKey, keyPrefix.length + regionName.length, scan.getStartRow(), 0,\n-                scan.getStartRow().length);\n-        Bytes.putBytes(rowKey, keyPrefix.length + regionName.length + scan.getStartRow().length,\n-                scan.getStopRow(), 0, scan.getStopRow().length);\n+        int targetOffset = 0;\n+        // The row key for the result table : timestamp | index table name | datable table region name |\n+        //                                    scan start row | scan stop row\n+        byte[] rowKey = new byte[keyPrefix.length + ROW_KEY_SEPARATOR_BYTE.length + indexHTable.getName().toBytes().length +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fd290f18b36a2cbbbe0b059890393625c7709d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMxOTM1Ng==", "bodyText": "What happens if the Scan start row contains the bytes for \"|\"? Does this need to be length encoded instead of using separators? Or perhaps escaped somehow?", "url": "https://github.com/apache/phoenix/pull/737#discussion_r395319356", "createdAt": "2020-03-19T21:05:57Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexRebuildRegionScanner.java", "diffHunk": "@@ -257,16 +258,29 @@ private void logToIndexToolResultTable() throws IOException {\n         long scanMaxTs = scan.getTimeRange().getMax();\n         byte[] keyPrefix = Bytes.toBytes(Long.toString(scanMaxTs));\n         byte[] regionName = Bytes.toBytes(region.getRegionInfo().getRegionNameAsString());\n-        // The row key for the result table is the max timestamp of the scan + the table region name + scan start row\n-        // + scan stop row\n-        byte[] rowKey = new byte[keyPrefix.length + regionName.length + scan.getStartRow().length +\n-                scan.getStopRow().length];\n-        Bytes.putBytes(rowKey, 0, keyPrefix, 0, keyPrefix.length);\n-        Bytes.putBytes(rowKey, keyPrefix.length, regionName, 0, regionName.length);\n-        Bytes.putBytes(rowKey, keyPrefix.length + regionName.length, scan.getStartRow(), 0,\n-                scan.getStartRow().length);\n-        Bytes.putBytes(rowKey, keyPrefix.length + regionName.length + scan.getStartRow().length,\n-                scan.getStopRow(), 0, scan.getStopRow().length);\n+        int targetOffset = 0;\n+        // The row key for the result table : timestamp | index table name | datable table region name |\n+        //                                    scan start row | scan stop row\n+        byte[] rowKey = new byte[keyPrefix.length + ROW_KEY_SEPARATOR_BYTE.length + indexHTable.getName().toBytes().length +\n+                ROW_KEY_SEPARATOR_BYTE.length + regionName.length + ROW_KEY_SEPARATOR_BYTE.length +\n+                scan.getStartRow().length + ROW_KEY_SEPARATOR_BYTE.length + scan.getStopRow().length];\n+        Bytes.putBytes(rowKey, targetOffset, keyPrefix, 0, keyPrefix.length);\n+        targetOffset += keyPrefix.length;\n+        Bytes.putBytes(rowKey, targetOffset, ROW_KEY_SEPARATOR_BYTE, 0, ROW_KEY_SEPARATOR_BYTE.length);\n+        targetOffset += ROW_KEY_SEPARATOR_BYTE.length;\n+        Bytes.putBytes(rowKey, targetOffset, indexHTable.getName().toBytes(), 0, indexHTable.getName().toBytes().length);\n+        targetOffset += indexHTable.getName().toBytes().length;\n+        Bytes.putBytes(rowKey, targetOffset, ROW_KEY_SEPARATOR_BYTE, 0, ROW_KEY_SEPARATOR_BYTE.length);\n+        targetOffset += ROW_KEY_SEPARATOR_BYTE.length;\n+        Bytes.putBytes(rowKey, targetOffset, regionName, 0, regionName.length);\n+        targetOffset += regionName.length;\n+        Bytes.putBytes(rowKey, targetOffset, ROW_KEY_SEPARATOR_BYTE, 0, ROW_KEY_SEPARATOR_BYTE.length);\n+        targetOffset += ROW_KEY_SEPARATOR_BYTE.length;\n+        Bytes.putBytes(rowKey, targetOffset, scan.getStartRow(), 0, scan.getStartRow().length);\n+        targetOffset += scan.getStartRow().length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fd290f18b36a2cbbbe0b059890393625c7709d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMxOTU3NA==", "bodyText": "likewise, extracting to a method to build the output table row key would be good.", "url": "https://github.com/apache/phoenix/pull/737#discussion_r395319574", "createdAt": "2020-03-19T21:06:26Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexRebuildRegionScanner.java", "diffHunk": "@@ -412,30 +426,31 @@ public void logToIndexToolOutputTable(byte[] dataRowKey, byte[] indexRowKey, lon\n         long scanMaxTs = scan.getTimeRange().getMax();\n         byte[] keyPrefix = Bytes.toBytes(Long.toString(scanMaxTs));\n         byte[] rowKey;\n-        // The row key for the output table is the max timestamp of the scan + data row key\n-        if (dataRowKey != null) {\n-            rowKey = new byte[keyPrefix.length + dataRowKey.length];\n-            Bytes.putBytes(rowKey, 0, keyPrefix, 0, keyPrefix.length);\n-            Bytes.putBytes(rowKey, keyPrefix.length, dataRowKey, 0, dataRowKey.length);\n-        } else {\n-            rowKey = new byte[keyPrefix.length];\n-            Bytes.putBytes(rowKey, 0, keyPrefix, 0, keyPrefix.length);\n-        }\n+        int targetOffset = 0;\n+        // The row key for the output table : timestamp | index table name | data row key\n+        rowKey = new byte[keyPrefix.length + ROW_KEY_SEPARATOR_BYTE.length + indexHTable.getName().toBytes().length +\n+                ROW_KEY_SEPARATOR_BYTE.length + dataRowKey.length];\n+        Bytes.putBytes(rowKey, targetOffset, keyPrefix, 0, keyPrefix.length);\n+        targetOffset += keyPrefix.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fd290f18b36a2cbbbe0b059890393625c7709d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMjMyOQ==", "bodyText": "Extracting the index tool result and index tool output writing code into separate classes (with read methods!) would facilitate testing -- I agree with @swaroopak that this needs some tests, I'd say probably for both insert and read. Adding read methods would also make life easier for utilities, whether in Phoenix or outside, to be able to programmatically parse the result and output tables. Otherwise a whole lot of boilerplate byte parsing has to be rewritten each time.", "url": "https://github.com/apache/phoenix/pull/737#discussion_r395322329", "createdAt": "2020-03-19T21:12:16Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexRebuildRegionScanner.java", "diffHunk": "@@ -257,16 +258,29 @@ private void logToIndexToolResultTable() throws IOException {\n         long scanMaxTs = scan.getTimeRange().getMax();\n         byte[] keyPrefix = Bytes.toBytes(Long.toString(scanMaxTs));\n         byte[] regionName = Bytes.toBytes(region.getRegionInfo().getRegionNameAsString());\n-        // The row key for the result table is the max timestamp of the scan + the table region name + scan start row\n-        // + scan stop row\n-        byte[] rowKey = new byte[keyPrefix.length + regionName.length + scan.getStartRow().length +\n-                scan.getStopRow().length];\n-        Bytes.putBytes(rowKey, 0, keyPrefix, 0, keyPrefix.length);\n-        Bytes.putBytes(rowKey, keyPrefix.length, regionName, 0, regionName.length);\n-        Bytes.putBytes(rowKey, keyPrefix.length + regionName.length, scan.getStartRow(), 0,\n-                scan.getStartRow().length);\n-        Bytes.putBytes(rowKey, keyPrefix.length + regionName.length + scan.getStartRow().length,\n-                scan.getStopRow(), 0, scan.getStopRow().length);\n+        int targetOffset = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fd290f18b36a2cbbbe0b059890393625c7709d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMzM5OA==", "bodyText": "If you don't have the bandwidth for the read part, I'm happy to help out with it, either in this JIRA or another. If it doesn't get put into Phoenix here it's code I have to write anyway. :-)", "url": "https://github.com/apache/phoenix/pull/737#discussion_r395323398", "createdAt": "2020-03-19T21:14:28Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexRebuildRegionScanner.java", "diffHunk": "@@ -257,16 +258,29 @@ private void logToIndexToolResultTable() throws IOException {\n         long scanMaxTs = scan.getTimeRange().getMax();\n         byte[] keyPrefix = Bytes.toBytes(Long.toString(scanMaxTs));\n         byte[] regionName = Bytes.toBytes(region.getRegionInfo().getRegionNameAsString());\n-        // The row key for the result table is the max timestamp of the scan + the table region name + scan start row\n-        // + scan stop row\n-        byte[] rowKey = new byte[keyPrefix.length + regionName.length + scan.getStartRow().length +\n-                scan.getStopRow().length];\n-        Bytes.putBytes(rowKey, 0, keyPrefix, 0, keyPrefix.length);\n-        Bytes.putBytes(rowKey, keyPrefix.length, regionName, 0, regionName.length);\n-        Bytes.putBytes(rowKey, keyPrefix.length + regionName.length, scan.getStartRow(), 0,\n-                scan.getStartRow().length);\n-        Bytes.putBytes(rowKey, keyPrefix.length + regionName.length + scan.getStartRow().length,\n-                scan.getStopRow(), 0, scan.getStopRow().length);\n+        int targetOffset = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMjMyOQ=="}, "originalCommit": {"oid": "40fd290f18b36a2cbbbe0b059890393625c7709d"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2494c201e260f057ba4046f300e14680a88c61b", "author": {"user": {"login": "kadirozde", "name": null}}, "url": "https://github.com/apache/phoenix/commit/e2494c201e260f057ba4046f300e14680a88c61b", "committedDate": "2020-03-20T19:52:08Z", "message": "PHOENIX-5773 Extract out the code generating row key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODI0NDIy", "url": "https://github.com/apache/phoenix/pull/737#pullrequestreview-378824422", "createdAt": "2020-03-20T21:33:16Z", "commit": {"oid": "e2494c201e260f057ba4046f300e14680a88c61b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64e8645b351e042feaa397275099ffe1ab6de261", "author": {"user": {"login": "kadirozde", "name": null}}, "url": "https://github.com/apache/phoenix/commit/64e8645b351e042feaa397275099ffe1ab6de261", "committedDate": "2020-03-23T20:25:37Z", "message": "PHOENIX-5773 Added testing for index tool table row keys"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODE5Njgz", "url": "https://github.com/apache/phoenix/pull/737#pullrequestreview-379819683", "createdAt": "2020-03-23T21:02:23Z", "commit": {"oid": "64e8645b351e042feaa397275099ffe1ab6de261"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODQ4NTMw", "url": "https://github.com/apache/phoenix/pull/737#pullrequestreview-379848530", "createdAt": "2020-03-23T21:49:58Z", "commit": {"oid": "64e8645b351e042feaa397275099ffe1ab6de261"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1971, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}