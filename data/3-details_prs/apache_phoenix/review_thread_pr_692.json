{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjIzMjAz", "number": 692, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTowNzoxNVrODbVnOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjowNDozMlrODbY3QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTkyMjUxOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexUpgradeToolIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTowNzoxNVrOFixAww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDo1NTowNFrOFi5oHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5ODkxNQ==", "bodyText": "Will this be adding null for multiTenant=false?", "url": "https://github.com/apache/phoenix/pull/692#discussion_r371998915", "createdAt": "2020-01-28T19:07:15Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexUpgradeToolIT.java", "diffHunk": "@@ -19,76 +19,121 @@\n \n import org.apache.phoenix.mapreduce.index.IndexUpgradeTool;\n import org.apache.phoenix.query.BaseTest;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.PropertiesUtil;\n import org.apache.phoenix.util.ReadOnlyProps;\n import org.apache.phoenix.util.SchemaUtil;\n import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n \n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n \n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+\n+@RunWith(Parameterized.class)\n public class IndexUpgradeToolIT extends BaseTest {\n \n     public static final String\n             VERIFY_COUNT_ASSERT_MESSAGE = \"view-index count in system table doesn't match\";\n+    private final boolean multiTenant;\n+    private String tenantId = null;\n+\n+    public IndexUpgradeToolIT(boolean multiTenant) {\n+        this.multiTenant = multiTenant;\n+    }\n+\n+    @Parameters(name=\"isMultiTenant = {0}\")\n+    public static synchronized Collection<Boolean[]> data() {\n+        return Arrays.asList(new Boolean[][] {\n+                { true },{ false }\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        Map<String, String> props = Collections.emptyMap();\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n \n     @Test\n     public void verifyViewAndViewIndexes() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Map<String, String> props = Collections.emptyMap();\n-        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), new Properties())) {\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        if (multiTenant) {\n+            tenantId = generateUniqueName();\n+            props.setProperty(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);\n+        }\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n             prepareForTest(conn, schemaName, tableName);\n-            IndexUpgradeTool iut = new IndexUpgradeTool();\n-            String viewQuery = iut.getViewSql(tableName, schemaName);\n+            String viewQuery = IndexUpgradeTool.getViewSql(tableName, schemaName);\n             ResultSet rs = conn.createStatement().executeQuery(viewQuery);\n             int countViews = 0;\n             List<String> views = new ArrayList<>();\n-            List<Integer> indexCount = new ArrayList<>();\n+            List<String> tenants = new ArrayList<>();\n             while (rs.next()) {\n                 views.add(rs.getString(1));\n+                if(multiTenant) {\n+                    Assert.assertNotNull(rs.getString(2));\n+                }\n+                tenants.add(rs.getString(2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efb417d4f58eaafeb5bb255d33098a84bd160e9a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0MDA2Mg==", "bodyText": "yes", "url": "https://github.com/apache/phoenix/pull/692#discussion_r372140062", "createdAt": "2020-01-29T00:55:04Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexUpgradeToolIT.java", "diffHunk": "@@ -19,76 +19,121 @@\n \n import org.apache.phoenix.mapreduce.index.IndexUpgradeTool;\n import org.apache.phoenix.query.BaseTest;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.PropertiesUtil;\n import org.apache.phoenix.util.ReadOnlyProps;\n import org.apache.phoenix.util.SchemaUtil;\n import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n \n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n \n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+\n+@RunWith(Parameterized.class)\n public class IndexUpgradeToolIT extends BaseTest {\n \n     public static final String\n             VERIFY_COUNT_ASSERT_MESSAGE = \"view-index count in system table doesn't match\";\n+    private final boolean multiTenant;\n+    private String tenantId = null;\n+\n+    public IndexUpgradeToolIT(boolean multiTenant) {\n+        this.multiTenant = multiTenant;\n+    }\n+\n+    @Parameters(name=\"isMultiTenant = {0}\")\n+    public static synchronized Collection<Boolean[]> data() {\n+        return Arrays.asList(new Boolean[][] {\n+                { true },{ false }\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        Map<String, String> props = Collections.emptyMap();\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n \n     @Test\n     public void verifyViewAndViewIndexes() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Map<String, String> props = Collections.emptyMap();\n-        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), new Properties())) {\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        if (multiTenant) {\n+            tenantId = generateUniqueName();\n+            props.setProperty(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);\n+        }\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n             prepareForTest(conn, schemaName, tableName);\n-            IndexUpgradeTool iut = new IndexUpgradeTool();\n-            String viewQuery = iut.getViewSql(tableName, schemaName);\n+            String viewQuery = IndexUpgradeTool.getViewSql(tableName, schemaName);\n             ResultSet rs = conn.createStatement().executeQuery(viewQuery);\n             int countViews = 0;\n             List<String> views = new ArrayList<>();\n-            List<Integer> indexCount = new ArrayList<>();\n+            List<String> tenants = new ArrayList<>();\n             while (rs.next()) {\n                 views.add(rs.getString(1));\n+                if(multiTenant) {\n+                    Assert.assertNotNull(rs.getString(2));\n+                }\n+                tenants.add(rs.getString(2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5ODkxNQ=="}, "originalCommit": {"oid": "efb417d4f58eaafeb5bb255d33098a84bd160e9a"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDMzMjExOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexUpgradeToolIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMToyMjoxN1rOFi1B8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMToyMjoxN1rOFi1B8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2NDc1NQ==", "bodyText": "Comment would be useful to remind that the first column is the view and the second column is the tenant id", "url": "https://github.com/apache/phoenix/pull/692#discussion_r372064755", "createdAt": "2020-01-28T21:22:17Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexUpgradeToolIT.java", "diffHunk": "@@ -19,76 +19,121 @@\n \n import org.apache.phoenix.mapreduce.index.IndexUpgradeTool;\n import org.apache.phoenix.query.BaseTest;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.PropertiesUtil;\n import org.apache.phoenix.util.ReadOnlyProps;\n import org.apache.phoenix.util.SchemaUtil;\n import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n \n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n \n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+\n+@RunWith(Parameterized.class)\n public class IndexUpgradeToolIT extends BaseTest {\n \n     public static final String\n             VERIFY_COUNT_ASSERT_MESSAGE = \"view-index count in system table doesn't match\";\n+    private final boolean multiTenant;\n+    private String tenantId = null;\n+\n+    public IndexUpgradeToolIT(boolean multiTenant) {\n+        this.multiTenant = multiTenant;\n+    }\n+\n+    @Parameters(name=\"isMultiTenant = {0}\")\n+    public static synchronized Collection<Boolean[]> data() {\n+        return Arrays.asList(new Boolean[][] {\n+                { true },{ false }\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        Map<String, String> props = Collections.emptyMap();\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n \n     @Test\n     public void verifyViewAndViewIndexes() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Map<String, String> props = Collections.emptyMap();\n-        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), new Properties())) {\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        if (multiTenant) {\n+            tenantId = generateUniqueName();\n+            props.setProperty(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);\n+        }\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n             prepareForTest(conn, schemaName, tableName);\n-            IndexUpgradeTool iut = new IndexUpgradeTool();\n-            String viewQuery = iut.getViewSql(tableName, schemaName);\n+            String viewQuery = IndexUpgradeTool.getViewSql(tableName, schemaName);\n             ResultSet rs = conn.createStatement().executeQuery(viewQuery);\n             int countViews = 0;\n             List<String> views = new ArrayList<>();\n-            List<Integer> indexCount = new ArrayList<>();\n+            List<String> tenants = new ArrayList<>();\n             while (rs.next()) {\n                 views.add(rs.getString(1));\n+                if(multiTenant) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efb417d4f58eaafeb5bb255d33098a84bd160e9a"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDM0MDUyOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexUpgradeToolIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMToyNToyOFrOFi1HgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDo1ODozNlrOFi5r4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2NjE3Nw==", "bodyText": "A comment somewhere around here would be good to remind us that there are 2 indexes on the first tenant's view, 1, on the second, and so on, to explain the assert, which is otherwise counterintuitive.\nAlternately, you could have a map of tenant id -> expected view index count that you build in the prepareForTest method and reference in the assert here, but that might be overkill. Up to you.", "url": "https://github.com/apache/phoenix/pull/692#discussion_r372066177", "createdAt": "2020-01-28T21:25:28Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexUpgradeToolIT.java", "diffHunk": "@@ -19,76 +19,121 @@\n \n import org.apache.phoenix.mapreduce.index.IndexUpgradeTool;\n import org.apache.phoenix.query.BaseTest;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.PropertiesUtil;\n import org.apache.phoenix.util.ReadOnlyProps;\n import org.apache.phoenix.util.SchemaUtil;\n import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n \n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n \n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+\n+@RunWith(Parameterized.class)\n public class IndexUpgradeToolIT extends BaseTest {\n \n     public static final String\n             VERIFY_COUNT_ASSERT_MESSAGE = \"view-index count in system table doesn't match\";\n+    private final boolean multiTenant;\n+    private String tenantId = null;\n+\n+    public IndexUpgradeToolIT(boolean multiTenant) {\n+        this.multiTenant = multiTenant;\n+    }\n+\n+    @Parameters(name=\"isMultiTenant = {0}\")\n+    public static synchronized Collection<Boolean[]> data() {\n+        return Arrays.asList(new Boolean[][] {\n+                { true },{ false }\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        Map<String, String> props = Collections.emptyMap();\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n \n     @Test\n     public void verifyViewAndViewIndexes() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Map<String, String> props = Collections.emptyMap();\n-        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), new Properties())) {\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        if (multiTenant) {\n+            tenantId = generateUniqueName();\n+            props.setProperty(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);\n+        }\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n             prepareForTest(conn, schemaName, tableName);\n-            IndexUpgradeTool iut = new IndexUpgradeTool();\n-            String viewQuery = iut.getViewSql(tableName, schemaName);\n+            String viewQuery = IndexUpgradeTool.getViewSql(tableName, schemaName);\n             ResultSet rs = conn.createStatement().executeQuery(viewQuery);\n             int countViews = 0;\n             List<String> views = new ArrayList<>();\n-            List<Integer> indexCount = new ArrayList<>();\n+            List<String> tenants = new ArrayList<>();\n             while (rs.next()) {\n                 views.add(rs.getString(1));\n+                if(multiTenant) {\n+                    Assert.assertNotNull(rs.getString(2));\n+                }\n+                tenants.add(rs.getString(2));\n                 countViews++;\n             }\n             Assert.assertEquals(\"view count in system table doesn't match\", 2, countViews);\n+\n             for (int i = 0; i < views.size(); i++) {\n                 String viewName = SchemaUtil.getTableNameFromFullName(views.get(i));\n-                String viewIndexQuery = iut.getViewIndexesSql(viewName, schemaName, null);\n+                String viewIndexQuery = IndexUpgradeTool.getViewIndexesSql(viewName, schemaName,\n+                        tenants.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efb417d4f58eaafeb5bb255d33098a84bd160e9a"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0MTAyNQ==", "bodyText": "There is only one tenant here in this test case. I ll pass.", "url": "https://github.com/apache/phoenix/pull/692#discussion_r372141025", "createdAt": "2020-01-29T00:58:36Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexUpgradeToolIT.java", "diffHunk": "@@ -19,76 +19,121 @@\n \n import org.apache.phoenix.mapreduce.index.IndexUpgradeTool;\n import org.apache.phoenix.query.BaseTest;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.PropertiesUtil;\n import org.apache.phoenix.util.ReadOnlyProps;\n import org.apache.phoenix.util.SchemaUtil;\n import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n \n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n \n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+\n+@RunWith(Parameterized.class)\n public class IndexUpgradeToolIT extends BaseTest {\n \n     public static final String\n             VERIFY_COUNT_ASSERT_MESSAGE = \"view-index count in system table doesn't match\";\n+    private final boolean multiTenant;\n+    private String tenantId = null;\n+\n+    public IndexUpgradeToolIT(boolean multiTenant) {\n+        this.multiTenant = multiTenant;\n+    }\n+\n+    @Parameters(name=\"isMultiTenant = {0}\")\n+    public static synchronized Collection<Boolean[]> data() {\n+        return Arrays.asList(new Boolean[][] {\n+                { true },{ false }\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        Map<String, String> props = Collections.emptyMap();\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n \n     @Test\n     public void verifyViewAndViewIndexes() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Map<String, String> props = Collections.emptyMap();\n-        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), new Properties())) {\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        if (multiTenant) {\n+            tenantId = generateUniqueName();\n+            props.setProperty(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);\n+        }\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n             prepareForTest(conn, schemaName, tableName);\n-            IndexUpgradeTool iut = new IndexUpgradeTool();\n-            String viewQuery = iut.getViewSql(tableName, schemaName);\n+            String viewQuery = IndexUpgradeTool.getViewSql(tableName, schemaName);\n             ResultSet rs = conn.createStatement().executeQuery(viewQuery);\n             int countViews = 0;\n             List<String> views = new ArrayList<>();\n-            List<Integer> indexCount = new ArrayList<>();\n+            List<String> tenants = new ArrayList<>();\n             while (rs.next()) {\n                 views.add(rs.getString(1));\n+                if(multiTenant) {\n+                    Assert.assertNotNull(rs.getString(2));\n+                }\n+                tenants.add(rs.getString(2));\n                 countViews++;\n             }\n             Assert.assertEquals(\"view count in system table doesn't match\", 2, countViews);\n+\n             for (int i = 0; i < views.size(); i++) {\n                 String viewName = SchemaUtil.getTableNameFromFullName(views.get(i));\n-                String viewIndexQuery = iut.getViewIndexesSql(viewName, schemaName, null);\n+                String viewIndexQuery = IndexUpgradeTool.getViewIndexesSql(viewName, schemaName,\n+                        tenants.get(i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2NjE3Nw=="}, "originalCommit": {"oid": "efb417d4f58eaafeb5bb255d33098a84bd160e9a"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDQ1NTA1OnYy", "diffSide": "LEFT", "path": "phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexUpgradeTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjowNDozMlrOFi2Prg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoxMjo1MFrOFi2dYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NDY1NA==", "bodyText": "this is now taken care of within the index tool?", "url": "https://github.com/apache/phoenix/pull/692#discussion_r372084654", "createdAt": "2020-01-28T22:04:32Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexUpgradeTool.java", "diffHunk": "@@ -652,51 +652,15 @@ private int startIndexRebuilds(Connection conn,\n                     (GLOBAL_INDEX_ID.equals(tenantId)?\"\":\"_\"+tenantId) +\"_\"\n                     + UUID.randomUUID().toString();\n             String[] args = getIndexToolArgValues(schema, baseTable, indexName, outFile, tenantId);\n-            Connection newConnection = conn;\n-            Connection tenantConnection = null;\n             try {\n                 LOGGER.info(\"Rebuilding index: \" + StringUtils.join( args,\",\"));\n                 if (!dryRun) {\n-                    // If the index is in DISABLED state, indexTool will fail.\n-                    // First to ALTER REBUILD ASYNC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efb417d4f58eaafeb5bb255d33098a84bd160e9a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4ODE2Mg==", "bodyText": "I am doing PHOENIX-5512 right now to take care of this", "url": "https://github.com/apache/phoenix/pull/692#discussion_r372088162", "createdAt": "2020-01-28T22:12:50Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexUpgradeTool.java", "diffHunk": "@@ -652,51 +652,15 @@ private int startIndexRebuilds(Connection conn,\n                     (GLOBAL_INDEX_ID.equals(tenantId)?\"\":\"_\"+tenantId) +\"_\"\n                     + UUID.randomUUID().toString();\n             String[] args = getIndexToolArgValues(schema, baseTable, indexName, outFile, tenantId);\n-            Connection newConnection = conn;\n-            Connection tenantConnection = null;\n             try {\n                 LOGGER.info(\"Rebuilding index: \" + StringUtils.join( args,\",\"));\n                 if (!dryRun) {\n-                    // If the index is in DISABLED state, indexTool will fail.\n-                    // First to ALTER REBUILD ASYNC.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NDY1NA=="}, "originalCommit": {"oid": "efb417d4f58eaafeb5bb255d33098a84bd160e9a"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4685, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}