{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MjU4NDkz", "number": 878, "reviewThreads": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowMzo0NlrOEisQJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQyMzo0ODowNFrOFqsRLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODEyMDY5OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Noop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowMzo0NlrOHQtzRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowMzo0NlrOHQtzRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4OTY3MA==", "bodyText": "please add apache license", "url": "https://github.com/apache/phoenix/pull/878#discussion_r487289670", "createdAt": "2020-09-11T21:03:46Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Noop.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.apache.phoenix.pherf.configuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05782529a415932a35fd0867e1f6e5a364f610e3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODEyMjQzOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/OperationGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowNDoyOFrOHQt0YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowNDoyOFrOHQt0YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4OTk1Mw==", "bodyText": "nit: please add apache license", "url": "https://github.com/apache/phoenix/pull/878#discussion_r487289953", "createdAt": "2020-09-11T21:04:28Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/OperationGroup.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.apache.phoenix.pherf.configuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05782529a415932a35fd0867e1f6e5a364f610e3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODEyODI1OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowNjo0MVrOHQt30A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowNjo0MVrOHQt30A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5MDgzMg==", "bodyText": "why we are setting this to a negative number? Should be at lease 1?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r487290832", "createdAt": "2020-09-11T21:06:41Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.List;\n+\n+@XmlType\n+public class LoadProfile {\n+\n+    private int batchSize;\n+    private int numOperations;\n+    List<TenantGroup> tenantDistribution;\n+    List<OperationGroup> opDistribution;\n+\n+    public LoadProfile() {\n+        this.batchSize = Integer.MIN_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05782529a415932a35fd0867e1f6e5a364f610e3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODEzMTgxOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowODowN1rOHQt6Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo1MTozM1rOHQ-hhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5MTM5OQ==", "bodyText": "I didn't see anywhere calling this set method. Where is the place that we are setting this batch size value?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r487291399", "createdAt": "2020-09-11T21:08:07Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.List;\n+\n+@XmlType\n+public class LoadProfile {\n+\n+    private int batchSize;\n+    private int numOperations;\n+    List<TenantGroup> tenantDistribution;\n+    List<OperationGroup> opDistribution;\n+\n+    public LoadProfile() {\n+        this.batchSize = Integer.MIN_VALUE;\n+    }\n+\n+    public int getBatchSize() {\n+        return batchSize;\n+    }\n+\n+    public void setBatchSize(int batchSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05782529a415932a35fd0867e1f6e5a364f610e3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MzY1NA==", "bodyText": "XML serialization/deserialization methods use getters and setter to marshal/unmarshal XML files into Objects.", "url": "https://github.com/apache/phoenix/pull/878#discussion_r487563654", "createdAt": "2020-09-13T18:51:33Z", "author": {"login": "jpisaac"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.List;\n+\n+@XmlType\n+public class LoadProfile {\n+\n+    private int batchSize;\n+    private int numOperations;\n+    List<TenantGroup> tenantDistribution;\n+    List<OperationGroup> opDistribution;\n+\n+    public LoadProfile() {\n+        this.batchSize = Integer.MIN_VALUE;\n+    }\n+\n+    public int getBatchSize() {\n+        return batchSize;\n+    }\n+\n+    public void setBatchSize(int batchSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5MTM5OQ=="}, "originalCommit": {"oid": "05782529a415932a35fd0867e1f6e5a364f610e3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDAwOTcwOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzo1Nzo0N1rOHRgevQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzo1Nzo0N1rOHRgevQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExOTk5Nw==", "bodyText": "not: can this be private?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r488119997", "createdAt": "2020-09-14T17:57:47Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.List;\n+\n+@XmlType\n+public class LoadProfile {\n+    public static int MIN_BATCH_SIZE = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDAxMzUzOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Noop.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzo1ODo1MlrOHRghLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozNzo0NVrOIINOPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMDYyMw==", "bodyText": "Why do we need this NoOp class for?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r488120623", "createdAt": "2020-09-14T17:58:52Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Noop.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+public class Noop {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMzg0NA==", "bodyText": "I think this is for no operation that simulates the idle time.", "url": "https://github.com/apache/phoenix/pull/878#discussion_r488133844", "createdAt": "2020-09-14T18:22:33Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Noop.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+public class Noop {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMDYyMw=="}, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMjE3Mw==", "bodyText": "@ChinmaySKulkarni This holds the idle time to be used for waiting. Modeled it as an operation, thus follows the same pattern as other operations.", "url": "https://github.com/apache/phoenix/pull/878#discussion_r490412173", "createdAt": "2020-09-17T16:50:39Z", "author": {"login": "jpisaac"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Noop.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+public class Noop {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMDYyMw=="}, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczNTc2NQ==", "bodyText": "Can we rename it so it reflects an operation aimed at injecting \"idle/wait time\"?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r539735765", "createdAt": "2020-12-09T23:50:36Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Noop.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+public class Noop {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMDYyMw=="}, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NjE1Nw==", "bodyText": "Ping @jpisaac I think we should still consider renaming the class so it is clear that it is introduced for the sole purpose of adding wait time. Maybe call it IdleOp", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545476157", "createdAt": "2020-12-17T23:37:45Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Noop.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+public class Noop {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMDYyMw=="}, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDAxNDk0OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzo1OToxN1rOHRgiDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozNjoxNlrOIINLrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMDg0NA==", "bodyText": "Can you add header comments for all newly introduced classes?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r488120844", "createdAt": "2020-09-14T17:59:17Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.List;\n+\n+@XmlType\n+public class LoadProfile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjY1MA==", "bodyText": "@ChinmaySKulkarni added the headers, since you commented let me know if I missed anything.", "url": "https://github.com/apache/phoenix/pull/878#discussion_r490416650", "createdAt": "2020-09-17T16:57:53Z", "author": {"login": "jpisaac"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.List;\n+\n+@XmlType\n+public class LoadProfile {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMDg0NA=="}, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NTUwMA==", "bodyText": "I meant class-level comments for all the new classes", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545475500", "createdAt": "2020-12-17T23:36:16Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.List;\n+\n+@XmlType\n+public class LoadProfile {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMDg0NA=="}, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDMwMTc2OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Upsert.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToyMTowMlrOHRjS8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1NjoxMFrOHTsl9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2NjEzMQ==", "bodyText": "nit: weird indent", "url": "https://github.com/apache/phoenix/pull/878#discussion_r488166131", "createdAt": "2020-09-14T19:21:02Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Upsert.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class Upsert {\n+\n+    private String id;\n+    private String upsertGroup;\n+    private String statement;\n+    private List<Column> columns;\n+    private Pattern pattern;\n+    private long timeoutDuration = Long.MAX_VALUE;\n+\n+    public Upsert() {\n+    \tpattern = Pattern.compile(\"\\\\[.*?\\\\]\");\n+    }\n+    \n+\n+    public String getDynamicStatement(RulesApplier ruleApplier, Scenario scenario) throws Exception {\n+    \tString ret = this.statement;\n+    \tString needQuotes = \"\";\n+    \tMatcher m = pattern.matcher(ret);\n+        while(m.find()) {\n+        \tString dynamicField = m.group(0).replace(\"[\", \"\").replace(\"]\", \"\");\n+        \tColumn dynamicColumn = ruleApplier.getRule(dynamicField, scenario);\n+\t\t\tneedQuotes = (dynamicColumn.getType() == DataTypeMapping.CHAR || dynamicColumn\n+\t\t\t\t\t.getType() == DataTypeMapping.VARCHAR) ? \"'\" : \"\";\n+\t\t\tret = ret.replace(\"[\" + dynamicField + \"]\",\n+\t\t\t\t\tneedQuotes + ruleApplier.getDataValue(dynamicColumn).getValue() + needQuotes);\n+     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNTYwNg==", "bodyText": "Will try and fix that!!", "url": "https://github.com/apache/phoenix/pull/878#discussion_r490415606", "createdAt": "2020-09-17T16:56:10Z", "author": {"login": "jpisaac"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Upsert.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class Upsert {\n+\n+    private String id;\n+    private String upsertGroup;\n+    private String statement;\n+    private List<Column> columns;\n+    private Pattern pattern;\n+    private long timeoutDuration = Long.MAX_VALUE;\n+\n+    public Upsert() {\n+    \tpattern = Pattern.compile(\"\\\\[.*?\\\\]\");\n+    }\n+    \n+\n+    public String getDynamicStatement(RulesApplier ruleApplier, Scenario scenario) throws Exception {\n+    \tString ret = this.statement;\n+    \tString needQuotes = \"\";\n+    \tMatcher m = pattern.matcher(ret);\n+        while(m.find()) {\n+        \tString dynamicField = m.group(0).replace(\"[\", \"\").replace(\"]\", \"\");\n+        \tColumn dynamicColumn = ruleApplier.getRule(dynamicField, scenario);\n+\t\t\tneedQuotes = (dynamicColumn.getType() == DataTypeMapping.CHAR || dynamicColumn\n+\t\t\t\t\t.getType() == DataTypeMapping.VARCHAR) ? \"'\" : \"\";\n+\t\t\tret = ret.replace(\"[\" + dynamicField + \"]\",\n+\t\t\t\t\tneedQuotes + ruleApplier.getDataValue(dynamicColumn).getValue() + needQuotes);\n+     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2NjEzMQ=="}, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDQ4MTA2OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/test/resources/scenario/test_scenario_with_load_profile.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDoxNjoxOVrOHRlCRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1NTo1MFrOHTslOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5NDYzMA==", "bodyText": "I prefer to put this scenario file under /phoenix-pherf/src/main/resources/scenario/ dir since this is an example of how to run instead of a test case.", "url": "https://github.com/apache/phoenix/pull/878#discussion_r488194630", "createdAt": "2020-09-14T20:16:19Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/test/resources/scenario/test_scenario_with_load_profile.xml", "diffHunk": "@@ -0,0 +1,362 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNTQxOA==", "bodyText": "@yanxinyi This file is used in testWorkloadWithLoadProfile in ConfigurationParserTest. So I think it makes sense to keep it in the test/resources folder.", "url": "https://github.com/apache/phoenix/pull/878#discussion_r490415418", "createdAt": "2020-09-17T16:55:50Z", "author": {"login": "jpisaac"}, "path": "phoenix-pherf/src/test/resources/scenario/test_scenario_with_load_profile.xml", "diffHunk": "@@ -0,0 +1,362 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5NDYzMA=="}, "originalCommit": {"oid": "ff277bf70eb2e10a9ed79bcdef895a7d6683675e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzA4ODYwOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/PherfMainIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1MzoxN1rOIBBxDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzoyNTo0N1rOIIM7Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0ODQzMQ==", "bodyText": "why we ignore this test?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r537948431", "createdAt": "2020-12-08T00:53:17Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/PherfMainIT.java", "diffHunk": "@@ -50,7 +51,7 @@\n     @Rule\n     public final ExpectedSystemExit exit = ExpectedSystemExit.none();\n \n-    @Test\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1086c208503063d8bdd8033bd925922af297b20a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3MTMwNw==", "bodyText": "Same question", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545471307", "createdAt": "2020-12-17T23:25:47Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/PherfMainIT.java", "diffHunk": "@@ -50,7 +51,7 @@\n     @Rule\n     public final ExpectedSystemExit exit = ExpectedSystemExit.none();\n \n-    @Test\n+    @Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0ODQzMQ=="}, "originalCommit": {"oid": "1086c208503063d8bdd8033bd925922af297b20a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzA5Njk1OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/MultiTenantOperationBaseIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1NjoyN1rOIBB1vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1NjoyN1rOIBB1vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0OTYyOA==", "bodyText": "nit:  apache header", "url": "https://github.com/apache/phoenix/pull/878#discussion_r537949628", "createdAt": "2020-12-08T00:56:27Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/MultiTenantOperationBaseIT.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1086c208503063d8bdd8033bd925922af297b20a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzEyNzAzOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowNzoxMVrOIBCGNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowNzoxMVrOIBCGNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1Mzg0Ng==", "bodyText": "nit:apache header", "url": "https://github.com/apache/phoenix/pull/878#discussion_r537953846", "createdAt": "2020-12-08T01:07:11Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationIT.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1086c208503063d8bdd8033bd925922af297b20a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzQ2OTQyOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/rules/RulesApplier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzoxNTo1N1rOIBFDGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzoxNTo1N1rOIBFDGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwMjIwMw==", "bodyText": "nit: remove unused statement", "url": "https://github.com/apache/phoenix/pull/878#discussion_r538002203", "createdAt": "2020-12-08T03:15:57Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/rules/RulesApplier.java", "diffHunk": "@@ -138,9 +161,10 @@ public DataValue getDataForRule(Scenario scenario, Column phxMetaColumn) throws\n             // Assume the first rule map\n             Map<DataTypeMapping, List> ruleMap = modelList.get(0);\n             List<Column> ruleList = ruleMap.get(phxMetaColumn.getType());\n+            //LOGGER.info(String.format(\"Did not found a correct override column rule, %s, %s\", phxMetaColumn.getName(), phxMetaColumn.getType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1086c208503063d8bdd8033bd925922af297b20a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzQ3MTI1OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/util/PhoenixUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzoxNjo0NVrOIBFEEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNlQwMDoxMTozNFrOI-CH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwMjQ0OQ==", "bodyText": "nit: style issue", "url": "https://github.com/apache/phoenix/pull/878#discussion_r538002449", "createdAt": "2020-12-08T03:16:45Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/util/PhoenixUtil.java", "diffHunk": "@@ -455,4 +473,156 @@ public String getExplainPlan(Query query, Scenario scenario, RulesApplier ruleAp\n         }\n         return buf.toString();\n     }\n+\n+    public PreparedStatement buildStatement(RulesApplier rulesApplier, Scenario scenario, List<Column> columns,\n+            PreparedStatement statement, SimpleDateFormat simpleDateFormat) throws Exception {\n+\n+        int count = 1;\n+        for (Column column : columns) {\n+            DataValue dataValue = rulesApplier.getDataForRule(scenario, column);\n+            switch (column.getType()) {\n+            case VARCHAR:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.VARCHAR);\n+                } else {\n+                    statement.setString(count, dataValue.getValue());\n+                }\n+                break;\n+            case CHAR:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.CHAR);\n+                } else {\n+                    statement.setString(count, dataValue.getValue());\n+                }\n+                break;\n+            case DECIMAL:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.DECIMAL);\n+                } else {\n+                    statement.setBigDecimal(count, new BigDecimal(dataValue.getValue()));\n+                }\n+                break;\n+            case INTEGER:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.INTEGER);\n+                } else {\n+                    statement.setInt(count, Integer.parseInt(dataValue.getValue()));\n+                }\n+                break;\n+            case UNSIGNED_LONG:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.OTHER);\n+                } else {\n+                    statement.setLong(count, Long.parseLong(dataValue.getValue()));\n+                }\n+                break;\n+            case BIGINT:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.BIGINT);\n+                } else {\n+                    statement.setLong(count, Long.parseLong(dataValue.getValue()));\n+                }\n+                break;\n+            case TINYINT:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.TINYINT);\n+                } else {\n+                    statement.setLong(count, Integer.parseInt(dataValue.getValue()));\n+                }\n+                break;\n+            case DATE:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.DATE);\n+                } else {\n+                    Date\n+                            date =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1086c208503063d8bdd8033bd925922af297b20a"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTkxNzQxMg==", "bodyText": "can you address this in the next PR", "url": "https://github.com/apache/phoenix/pull/878#discussion_r601917412", "createdAt": "2021-03-26T00:11:34Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/util/PhoenixUtil.java", "diffHunk": "@@ -455,4 +473,156 @@ public String getExplainPlan(Query query, Scenario scenario, RulesApplier ruleAp\n         }\n         return buf.toString();\n     }\n+\n+    public PreparedStatement buildStatement(RulesApplier rulesApplier, Scenario scenario, List<Column> columns,\n+            PreparedStatement statement, SimpleDateFormat simpleDateFormat) throws Exception {\n+\n+        int count = 1;\n+        for (Column column : columns) {\n+            DataValue dataValue = rulesApplier.getDataForRule(scenario, column);\n+            switch (column.getType()) {\n+            case VARCHAR:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.VARCHAR);\n+                } else {\n+                    statement.setString(count, dataValue.getValue());\n+                }\n+                break;\n+            case CHAR:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.CHAR);\n+                } else {\n+                    statement.setString(count, dataValue.getValue());\n+                }\n+                break;\n+            case DECIMAL:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.DECIMAL);\n+                } else {\n+                    statement.setBigDecimal(count, new BigDecimal(dataValue.getValue()));\n+                }\n+                break;\n+            case INTEGER:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.INTEGER);\n+                } else {\n+                    statement.setInt(count, Integer.parseInt(dataValue.getValue()));\n+                }\n+                break;\n+            case UNSIGNED_LONG:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.OTHER);\n+                } else {\n+                    statement.setLong(count, Long.parseLong(dataValue.getValue()));\n+                }\n+                break;\n+            case BIGINT:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.BIGINT);\n+                } else {\n+                    statement.setLong(count, Long.parseLong(dataValue.getValue()));\n+                }\n+                break;\n+            case TINYINT:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.TINYINT);\n+                } else {\n+                    statement.setLong(count, Integer.parseInt(dataValue.getValue()));\n+                }\n+                break;\n+            case DATE:\n+                if (dataValue.getValue().equals(\"\")) {\n+                    statement.setNull(count, Types.DATE);\n+                } else {\n+                    Date\n+                            date =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwMjQ0OQ=="}, "originalCommit": {"oid": "1086c208503063d8bdd8033bd925922af297b20a"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjM0ODIyOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1MDo0OVrOIBzUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1MDo0OVrOIBzUKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MDIzMw==", "bodyText": "same here", "url": "https://github.com/apache/phoenix/pull/878#discussion_r538760233", "createdAt": "2020-12-08T19:50:49Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1086c208503063d8bdd8033bd925922af297b20a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjM1MzE2OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1MjowMVrOIBzXIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1MjowMVrOIBzXIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MDk5NA==", "bodyText": "please remember using phoenix third party at the master branch", "url": "https://github.com/apache/phoenix/pull/878#discussion_r538760994", "createdAt": "2020-12-08T19:52:01Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.clearspring.analytics.util.Lists;\n+import com.google.common.collect.Maps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1086c208503063d8bdd8033bd925922af297b20a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDI1MTkzOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTowMToxMFrOIFot3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTowMToxMFrOIFot3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4MDg5Mw==", "bodyText": "nit: do you wanna remove logging here since we are not testing logging?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r542780893", "createdAt": "2020-12-14T21:01:10Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationIT.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.lmax.disruptor.LifecycleAware;\n+import com.lmax.disruptor.WorkHandler;\n+import org.apache.phoenix.end2end.BaseHBaseManagedTimeIT;\n+import org.apache.phoenix.end2end.ParallelStatsDisabledIT;\n+import org.apache.phoenix.pherf.PherfConstants;\n+import org.apache.phoenix.pherf.XMLConfigParserTest;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.schema.SchemaReader;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationEventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.NoopTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.PreScenarioTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.QueryTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.UpsertTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.UserDefinedOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactoryTest;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationInfo;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.bind.UnmarshalException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TenantOperationIT extends MultiTenantOperationBaseIT {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationIT.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTEzNTIxOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/test/resources/datamodel/test_schema_mt_view.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzozMDo1N1rOIFxW0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzozMDo1N1rOIFxW0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkyMjQ0OA==", "bodyText": "I didn't find the DDL for PHERF.TEST_MULTI_TENANT_TABLE", "url": "https://github.com/apache/phoenix/pull/878#discussion_r542922448", "createdAt": "2020-12-14T23:30:57Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/test/resources/datamodel/test_schema_mt_view.sql", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+  -- Licensed to the Apache Software Foundation (ASF) under one\n+  -- or more contributor license agreements.  See the NOTICE file\n+  -- distributed with this work for additional information\n+  -- regarding copyright ownership.  The ASF licenses this file\n+  -- to you under the Apache License, Version 2.0 (the\n+  -- \"License\"); you may not use this file except in compliance\n+  -- with the License.  You may obtain a copy of the License at\n+  --\n+  -- http://www.apache.org/licenses/LICENSE-2.0\n+  --\n+  -- Unless required by applicable law or agreed to in writing, software\n+  -- distributed under the License is distributed on an \"AS IS\" BASIS,\n+  -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  -- See the License for the specific language governing permissions and\n+  -- limitations under the License.\n+*/\n+\n+CREATE VIEW IF NOT EXISTS PHERF.TEST_GLOBAL_VIEW (\n+    GID CHAR(15) NOT NULL,\n+    FIELD1 VARCHAR,\n+    OTHER_INT INTEGER\n+    CONSTRAINT PK PRIMARY KEY\n+    (\n+        GID\n+    )\n+) AS SELECT * FROM PHERF.TEST_MULTI_TENANT_TABLE WHERE IDENTIFIER = 'EV1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODMyMTcwOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzoyNzoyN1rOIIM-Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzoyNzozOVrOIIM-gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3MjAxMA==", "bodyText": "nit: Use assertEquals() instead", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545472010", "createdAt": "2020-12-17T23:27:27Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationIT.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.lmax.disruptor.LifecycleAware;\n+import com.lmax.disruptor.WorkHandler;\n+import org.apache.phoenix.end2end.BaseHBaseManagedTimeIT;\n+import org.apache.phoenix.end2end.ParallelStatsDisabledIT;\n+import org.apache.phoenix.pherf.PherfConstants;\n+import org.apache.phoenix.pherf.XMLConfigParserTest;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.schema.SchemaReader;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationEventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.NoopTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.PreScenarioTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.QueryTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.UpsertTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.UserDefinedOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactoryTest;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationInfo;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.bind.UnmarshalException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TenantOperationIT extends MultiTenantOperationBaseIT {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationIT.class);\n+\n+    @Test\n+    public void testVariousOperations() throws Exception {\n+        int numTenantGroups = 3;\n+        int numOpGroups = 5;\n+        int numRuns = 10;\n+        int numOperations = 10;\n+\n+        PhoenixUtil pUtil = PhoenixUtil.create();\n+        DataModel model = readTestDataModel(\"/scenario/test_mt_workload.xml\");\n+        for (Scenario scenario : model.getScenarios()) {\n+            LOGGER.debug(String.format(\"Testing %s\", scenario.getName()));\n+            LoadProfile loadProfile = scenario.getLoadProfile();\n+            assertTrue(\"tenant group size is not as expected: \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3MjEzMQ==", "bodyText": "Same for other such instances", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545472131", "createdAt": "2020-12-17T23:27:39Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationIT.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.lmax.disruptor.LifecycleAware;\n+import com.lmax.disruptor.WorkHandler;\n+import org.apache.phoenix.end2end.BaseHBaseManagedTimeIT;\n+import org.apache.phoenix.end2end.ParallelStatsDisabledIT;\n+import org.apache.phoenix.pherf.PherfConstants;\n+import org.apache.phoenix.pherf.XMLConfigParserTest;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.schema.SchemaReader;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationEventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.NoopTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.PreScenarioTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.QueryTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.UpsertTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.UserDefinedOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactoryTest;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationInfo;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.bind.UnmarshalException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TenantOperationIT extends MultiTenantOperationBaseIT {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationIT.class);\n+\n+    @Test\n+    public void testVariousOperations() throws Exception {\n+        int numTenantGroups = 3;\n+        int numOpGroups = 5;\n+        int numRuns = 10;\n+        int numOperations = 10;\n+\n+        PhoenixUtil pUtil = PhoenixUtil.create();\n+        DataModel model = readTestDataModel(\"/scenario/test_mt_workload.xml\");\n+        for (Scenario scenario : model.getScenarios()) {\n+            LOGGER.debug(String.format(\"Testing %s\", scenario.getName()));\n+            LoadProfile loadProfile = scenario.getLoadProfile();\n+            assertTrue(\"tenant group size is not as expected: \",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3MjAxMA=="}, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODMyNzEwOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzoyOToxM1rOIINBCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzoyOToxM1rOIINBCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3Mjc3OA==", "bodyText": "can't we just use the enum value instead of referring to its ordinal here?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545472778", "createdAt": "2020-12-17T23:29:13Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationIT.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.lmax.disruptor.LifecycleAware;\n+import com.lmax.disruptor.WorkHandler;\n+import org.apache.phoenix.end2end.BaseHBaseManagedTimeIT;\n+import org.apache.phoenix.end2end.ParallelStatsDisabledIT;\n+import org.apache.phoenix.pherf.PherfConstants;\n+import org.apache.phoenix.pherf.XMLConfigParserTest;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.schema.SchemaReader;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationEventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.NoopTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.PreScenarioTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.QueryTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.UpsertTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.UserDefinedOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactoryTest;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationInfo;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.bind.UnmarshalException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TenantOperationIT extends MultiTenantOperationBaseIT {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationIT.class);\n+\n+    @Test\n+    public void testVariousOperations() throws Exception {\n+        int numTenantGroups = 3;\n+        int numOpGroups = 5;\n+        int numRuns = 10;\n+        int numOperations = 10;\n+\n+        PhoenixUtil pUtil = PhoenixUtil.create();\n+        DataModel model = readTestDataModel(\"/scenario/test_mt_workload.xml\");\n+        for (Scenario scenario : model.getScenarios()) {\n+            LOGGER.debug(String.format(\"Testing %s\", scenario.getName()));\n+            LoadProfile loadProfile = scenario.getLoadProfile();\n+            assertTrue(\"tenant group size is not as expected: \",\n+                    loadProfile.getTenantDistribution().size() == numTenantGroups);\n+            assertTrue(\"operation group size is not as expected: \",\n+                    loadProfile.getOpDistribution().size() == numOpGroups);\n+\n+            TenantOperationFactory opFactory = new TenantOperationFactory(pUtil, model, scenario);\n+            TenantOperationEventGenerator evtGen = new TenantOperationEventGenerator(\n+                    opFactory.getOperationsForScenario(), model, scenario);\n+\n+            assertTrue(\"operation group size from the factory is not as expected: \",\n+                    opFactory.getOperationsForScenario().size() == numOpGroups);\n+\n+            int numRowsInserted = 0;\n+            for (int i = 0; i < numRuns; i++) {\n+                int ops = numOperations;\n+                loadProfile.setNumOperations(ops);\n+                while (ops-- > 0) {\n+                    TenantOperationInfo info = evtGen.next();\n+                    TenantOperationImpl op = opFactory.getOperation(info);\n+                    int row = TestOperationGroup.valueOf(info.getOperationGroupId()).ordinal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODMzMzQxOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/MultiTenantOperationBaseIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozMToxOFrOIINEgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozMToxOFrOIINEgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3MzY2Ng==", "bodyText": "There seems to be some inherent assumption what each operation group does i.e. upsert vs NoOp, etc. as per my understanding. Can you rename the enum values and/or add some comments to clarify this?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545473666", "createdAt": "2020-12-17T23:31:18Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/MultiTenantOperationBaseIT.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.lmax.disruptor.LifecycleAware;\n+import com.lmax.disruptor.WorkHandler;\n+import org.apache.phoenix.end2end.ParallelStatsDisabledIT;\n+import org.apache.phoenix.pherf.PherfConstants;\n+import org.apache.phoenix.pherf.XMLConfigParserTest;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.schema.SchemaReader;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.Workload;\n+import org.junit.BeforeClass;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.bind.UnmarshalException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class MultiTenantOperationBaseIT extends ParallelStatsDisabledIT {\n+    static enum TestOperationGroup {\n+        op1, op2, op3, op4, op5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODMzNDk0OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozMTo0OVrOIINFUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozMTo0OVrOIINFUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3Mzg3Mw==", "bodyText": "Why not use switch on the enum values themselves rather than the ordinal?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545473873", "createdAt": "2020-12-17T23:31:49Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationIT.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.lmax.disruptor.LifecycleAware;\n+import com.lmax.disruptor.WorkHandler;\n+import org.apache.phoenix.end2end.BaseHBaseManagedTimeIT;\n+import org.apache.phoenix.end2end.ParallelStatsDisabledIT;\n+import org.apache.phoenix.pherf.PherfConstants;\n+import org.apache.phoenix.pherf.XMLConfigParserTest;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.schema.SchemaReader;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationEventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.NoopTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.PreScenarioTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.QueryTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.UpsertTenantOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactory.UserDefinedOperationImpl;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationFactoryTest;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationInfo;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.bind.UnmarshalException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TenantOperationIT extends MultiTenantOperationBaseIT {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationIT.class);\n+\n+    @Test\n+    public void testVariousOperations() throws Exception {\n+        int numTenantGroups = 3;\n+        int numOpGroups = 5;\n+        int numRuns = 10;\n+        int numOperations = 10;\n+\n+        PhoenixUtil pUtil = PhoenixUtil.create();\n+        DataModel model = readTestDataModel(\"/scenario/test_mt_workload.xml\");\n+        for (Scenario scenario : model.getScenarios()) {\n+            LOGGER.debug(String.format(\"Testing %s\", scenario.getName()));\n+            LoadProfile loadProfile = scenario.getLoadProfile();\n+            assertTrue(\"tenant group size is not as expected: \",\n+                    loadProfile.getTenantDistribution().size() == numTenantGroups);\n+            assertTrue(\"operation group size is not as expected: \",\n+                    loadProfile.getOpDistribution().size() == numOpGroups);\n+\n+            TenantOperationFactory opFactory = new TenantOperationFactory(pUtil, model, scenario);\n+            TenantOperationEventGenerator evtGen = new TenantOperationEventGenerator(\n+                    opFactory.getOperationsForScenario(), model, scenario);\n+\n+            assertTrue(\"operation group size from the factory is not as expected: \",\n+                    opFactory.getOperationsForScenario().size() == numOpGroups);\n+\n+            int numRowsInserted = 0;\n+            for (int i = 0; i < numRuns; i++) {\n+                int ops = numOperations;\n+                loadProfile.setNumOperations(ops);\n+                while (ops-- > 0) {\n+                    TenantOperationInfo info = evtGen.next();\n+                    TenantOperationImpl op = opFactory.getOperation(info);\n+                    int row = TestOperationGroup.valueOf(info.getOperationGroupId()).ordinal();\n+                    OperationStats stats = op.getMethod().apply(info);\n+                    LOGGER.info(pUtil.getGSON().toJson(stats));\n+                    if (info.getOperation().getType() == Operation.OperationType.PRE_RUN) continue;\n+                    switch (row) {\n+                    case 0:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODMzOTk2OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozMzo0MFrOIINICA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozMzo0MFrOIINICA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NDU2OA==", "bodyText": "Use assertEquals instead", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545474568", "createdAt": "2020-12-17T23:33:40Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.clearspring.analytics.util.Lists;\n+import com.google.common.collect.Maps;\n+import com.lmax.disruptor.LifecycleAware;\n+import com.lmax.disruptor.WorkHandler;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.Workload;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationWorkload.TenantOperationEvent;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetAddress;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class TenantOperationWorkloadIT extends MultiTenantOperationBaseIT {\n+\n+    private static class EventCountingWorkHandler implements\n+            WorkHandler<TenantOperationEvent>, LifecycleAware {\n+        private final String handlerId;\n+        private final TenantOperationFactory tenantOperationFactory;\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EventCountingWorkHandler.class);\n+        private final Map<String, CountDownLatch> latches;\n+        public EventCountingWorkHandler(TenantOperationFactory tenantOperationFactory,\n+                String handlerId, Map<String, CountDownLatch> latches) {\n+            this.handlerId = handlerId;\n+            this.tenantOperationFactory = tenantOperationFactory;\n+            this.latches = latches;\n+        }\n+\n+        @Override public void onStart() {}\n+\n+        @Override public void onShutdown() {}\n+\n+        @Override public void onEvent(TenantOperationEvent event)\n+                throws Exception {\n+            TenantOperationInfo input = event.getTenantOperationInfo();\n+            TenantOperationImpl op = tenantOperationFactory.getOperation(input);\n+            OperationStats stats = op.getMethod().apply(input);\n+            LOGGER.info(tenantOperationFactory.getPhoenixUtil().getGSON().toJson(stats));\n+            assertTrue(stats.getStatus() == 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM0MDY1OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozMzo1OFrOIINIcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozMzo1OFrOIINIcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NDY3NQ==", "bodyText": "ditto", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545474675", "createdAt": "2020-12-17T23:33:58Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.clearspring.analytics.util.Lists;\n+import com.google.common.collect.Maps;\n+import com.lmax.disruptor.LifecycleAware;\n+import com.lmax.disruptor.WorkHandler;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.Workload;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationWorkload.TenantOperationEvent;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetAddress;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class TenantOperationWorkloadIT extends MultiTenantOperationBaseIT {\n+\n+    private static class EventCountingWorkHandler implements\n+            WorkHandler<TenantOperationEvent>, LifecycleAware {\n+        private final String handlerId;\n+        private final TenantOperationFactory tenantOperationFactory;\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EventCountingWorkHandler.class);\n+        private final Map<String, CountDownLatch> latches;\n+        public EventCountingWorkHandler(TenantOperationFactory tenantOperationFactory,\n+                String handlerId, Map<String, CountDownLatch> latches) {\n+            this.handlerId = handlerId;\n+            this.tenantOperationFactory = tenantOperationFactory;\n+            this.latches = latches;\n+        }\n+\n+        @Override public void onStart() {}\n+\n+        @Override public void onShutdown() {}\n+\n+        @Override public void onEvent(TenantOperationEvent event)\n+                throws Exception {\n+            TenantOperationInfo input = event.getTenantOperationInfo();\n+            TenantOperationImpl op = tenantOperationFactory.getOperation(input);\n+            OperationStats stats = op.getMethod().apply(input);\n+            LOGGER.info(tenantOperationFactory.getPhoenixUtil().getGSON().toJson(stats));\n+            assertTrue(stats.getStatus() == 0);\n+            latches.get(handlerId).countDown();\n+        }\n+    }\n+\n+    @Test\n+    public void testWorkloadWithOneHandler() throws Exception {\n+        int numOpGroups = 5;\n+        int numHandlers = 1;\n+        int totalOperations = 50;\n+        int perHandlerCount = 50;\n+\n+        ExecutorService executor = null;\n+        try {\n+            executor = Executors.newFixedThreadPool(numHandlers);\n+            PhoenixUtil pUtil = PhoenixUtil.create();\n+            DataModel model = readTestDataModel(\"/scenario/test_mt_workload.xml\");\n+            for (Scenario scenario : model.getScenarios()) {\n+                // Set the total number of operations for this load profile\n+                scenario.getLoadProfile().setNumOperations(totalOperations);\n+                TenantOperationFactory opFactory = new TenantOperationFactory(pUtil, model, scenario);\n+                assertTrue(\"operation group size from the factory is not as expected: \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM0Mjg0OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozNDo0N1rOIINJvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozNDo0N1rOIINJvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NTAwNg==", "bodyText": "Please add class-level comments for all of these new classes", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545475006", "createdAt": "2020-12-17T23:34:47Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.clearspring.analytics.util.Lists;\n+import com.google.common.collect.Maps;\n+import com.lmax.disruptor.LifecycleAware;\n+import com.lmax.disruptor.WorkHandler;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.Workload;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationWorkload.TenantOperationEvent;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetAddress;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class TenantOperationWorkloadIT extends MultiTenantOperationBaseIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM0MzM2OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozNTowNFrOIINKDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozNTowNFrOIINKDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NTA4NQ==", "bodyText": "ditto", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545475085", "createdAt": "2020-12-17T23:35:04Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkloadIT.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.clearspring.analytics.util.Lists;\n+import com.google.common.collect.Maps;\n+import com.lmax.disruptor.LifecycleAware;\n+import com.lmax.disruptor.WorkHandler;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.Workload;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationWorkload.TenantOperationEvent;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetAddress;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class TenantOperationWorkloadIT extends MultiTenantOperationBaseIT {\n+\n+    private static class EventCountingWorkHandler implements\n+            WorkHandler<TenantOperationEvent>, LifecycleAware {\n+        private final String handlerId;\n+        private final TenantOperationFactory tenantOperationFactory;\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EventCountingWorkHandler.class);\n+        private final Map<String, CountDownLatch> latches;\n+        public EventCountingWorkHandler(TenantOperationFactory tenantOperationFactory,\n+                String handlerId, Map<String, CountDownLatch> latches) {\n+            this.handlerId = handlerId;\n+            this.tenantOperationFactory = tenantOperationFactory;\n+            this.latches = latches;\n+        }\n+\n+        @Override public void onStart() {}\n+\n+        @Override public void onShutdown() {}\n+\n+        @Override public void onEvent(TenantOperationEvent event)\n+                throws Exception {\n+            TenantOperationInfo input = event.getTenantOperationInfo();\n+            TenantOperationImpl op = tenantOperationFactory.getOperation(input);\n+            OperationStats stats = op.getMethod().apply(input);\n+            LOGGER.info(tenantOperationFactory.getPhoenixUtil().getGSON().toJson(stats));\n+            assertTrue(stats.getStatus() == 0);\n+            latches.get(handlerId).countDown();\n+        }\n+    }\n+\n+    @Test\n+    public void testWorkloadWithOneHandler() throws Exception {\n+        int numOpGroups = 5;\n+        int numHandlers = 1;\n+        int totalOperations = 50;\n+        int perHandlerCount = 50;\n+\n+        ExecutorService executor = null;\n+        try {\n+            executor = Executors.newFixedThreadPool(numHandlers);\n+            PhoenixUtil pUtil = PhoenixUtil.create();\n+            DataModel model = readTestDataModel(\"/scenario/test_mt_workload.xml\");\n+            for (Scenario scenario : model.getScenarios()) {\n+                // Set the total number of operations for this load profile\n+                scenario.getLoadProfile().setNumOperations(totalOperations);\n+                TenantOperationFactory opFactory = new TenantOperationFactory(pUtil, model, scenario);\n+                assertTrue(\"operation group size from the factory is not as expected: \",\n+                        opFactory.getOperationsForScenario().size() == numOpGroups);\n+\n+                // populate the handlers and countdown latches.\n+                String handlerId = String.format(\"%s.%d\", InetAddress.getLocalHost().getHostName(), numHandlers);\n+                List<WorkHandler> workers = Lists.newArrayList();\n+                Map<String, CountDownLatch> latches = Maps.newConcurrentMap();\n+                workers.add(new EventCountingWorkHandler(opFactory, handlerId, latches));\n+                latches.put(handlerId, new CountDownLatch(perHandlerCount));\n+                // submit the workload\n+                Workload workload = new TenantOperationWorkload(pUtil, model, scenario, workers, properties);\n+                Future status = executor.submit(workload.execute());\n+                // Just make sure there are no exceptions\n+                status.get();\n+\n+                // Wait for the handlers to count down\n+                for (Map.Entry<String, CountDownLatch> latch : latches.entrySet()) {\n+                    assertTrue(latch.getValue().await(60, TimeUnit.SECONDS));\n+                }\n+            }\n+        } finally {\n+            if (executor != null) {\n+                executor.shutdown();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testWorkloadWithManyHandlers() throws Exception {\n+        int numOpGroups = 5;\n+        int numHandlers = 5;\n+        int totalOperations = 500;\n+        int perHandlerCount = 50;\n+\n+        ExecutorService executor = Executors.newFixedThreadPool(numHandlers);\n+        PhoenixUtil pUtil = PhoenixUtil.create();\n+        DataModel model = readTestDataModel(\"/scenario/test_mt_workload.xml\");\n+        for (Scenario scenario : model.getScenarios()) {\n+            // Set the total number of operations for this load profile\n+            scenario.getLoadProfile().setNumOperations(totalOperations);\n+            TenantOperationFactory opFactory = new TenantOperationFactory(pUtil, model, scenario);\n+            assertTrue(\"operation group size from the factory is not as expected: \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM0ODA2OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozNjo0OFrOIINMpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozNjo0OFrOIINMpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NTc1MA==", "bodyText": "Change these lists to private?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545475750", "createdAt": "2020-12-17T23:36:48Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/LoadProfile.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.List;\n+\n+@XmlType\n+public class LoadProfile {\n+    private static final int MIN_BATCH_SIZE = 1;\n+    private static final String DEFAULT_TENANT_ID_FMT = \"00D%s%07d\";\n+    private static final int DEFAULT_GROUP_ID_LEN = 5;\n+    private static final int DEFAULT_TENANT_ID_LEN = 15;\n+\n+    // Holds the batch size to be used in upserts.\n+    private int batchSize;\n+    // Holds the number of operations to be generated.\n+    private long numOperations;\n+    /**\n+     * Holds the format to be used when generating tenantIds.\n+     * TenantId format should typically have 2 parts -\n+     * 1. string fmt - that hold the tenant group id.\n+     * 2. int fmt - that holds a random number between 1 and max tenants\n+     * for e.g DEFAULT_TENANT_ID_FMT = \"00D%s%07d\";\n+     */\n+    private String tenantIdFormat;\n+    private int groupIdLength;\n+    private int tenantIdLength;\n+    // Holds the desired tenant distribution for this load.\n+    List<TenantGroup> tenantDistribution;\n+    // Holds the desired operation distribution for this load.\n+    List<OperationGroup> opDistribution;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM1Mjk0OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Query.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozODozMVrOIINPQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozODozMVrOIINPQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NjQxOA==", "bodyText": "Is this method to generate queries on the fly or something else? Can you add a comment?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545476418", "createdAt": "2020-12-17T23:38:31Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Query.java", "diffHunk": "@@ -51,20 +51,24 @@ public Query() {\n     public String getStatement() {\n         return statement;\n     }\n-    \n-    public String getDynamicStatement(RulesApplier ruleApplier, Scenario scenario) throws Exception {\n-    \tString ret = this.statement;\n-    \tString needQuotes = \"\";\n-    \tMatcher m = pattern.matcher(ret);\n-        while(m.find()) {\n-        \tString dynamicField = m.group(0).replace(\"[\", \"\").replace(\"]\", \"\");\n-        \tColumn dynamicColumn = ruleApplier.getRule(dynamicField, scenario);\n-\t\t\tneedQuotes = (dynamicColumn.getType() == DataTypeMapping.CHAR || dynamicColumn\n-\t\t\t\t\t.getType() == DataTypeMapping.VARCHAR) ? \"'\" : \"\";\n-\t\t\tret = ret.replace(\"[\" + dynamicField + \"]\",\n-\t\t\t\t\tneedQuotes + ruleApplier.getDataValue(dynamicColumn).getValue() + needQuotes);\n-     }\n-      \treturn ret;    \t\n+\n+    public String getDynamicStatement(RulesApplier ruleApplier, Scenario scenario)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM3Nzg5OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Upsert.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0Nzo0OVrOIINc6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0Nzo0OVrOIINc6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3OTkxMg==", "bodyText": "Can Query and Upsert and other such classes be derived from some common base class/ implement a common interface? Seems like a lot of the behavior is common (at the methods if not implementations)", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545479912", "createdAt": "2020-12-17T23:47:49Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/configuration/Upsert.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.configuration;\n+\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class Upsert {\n+\n+    private String id;\n+    private String upsertGroup;\n+    private String statement;\n+    private List<Column> columns;\n+    private boolean useGlobalConnection;\n+    private Pattern pattern;\n+    private long timeoutDuration = Long.MAX_VALUE;\n+\n+    public Upsert() {\n+    \tpattern = Pattern.compile(\"\\\\[.*?\\\\]\");\n+    }\n+\n+    public String getDynamicStatement(RulesApplier ruleApplier, Scenario scenario)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM3OTg3OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/rules/RulesApplier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0ODozN1rOIINeCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0ODozN1rOIINeCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4MDIwMg==", "bodyText": "I didn't understand these comments. Can you please clarify?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545480202", "createdAt": "2020-12-17T23:48:37Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/rules/RulesApplier.java", "diffHunk": "@@ -59,13 +61,34 @@\n \n     private Map<Column,RuleBasedDataGenerator> columnRuleBasedDataGeneratorMap = new HashMap<>();\n \n+    // Support for multiple models, but rules are only relevant each model\n+    // TODO : This is a step towards getting the above comment fixed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM4MDUzOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/rules/RulesApplier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0ODo1OVrOIINeZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0ODo1OVrOIINeZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4MDI5Mg==", "bodyText": "same here. Didn't understand which comment we are fixing?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545480292", "createdAt": "2020-12-17T23:48:59Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/rules/RulesApplier.java", "diffHunk": "@@ -422,9 +446,15 @@ private void populateModelList() {\n         if (!modelList.isEmpty()) {\n             return;\n         }\n-        \n+\n         // Support for multiple models, but rules are only relevant each model\n-        for (DataModel model : parser.getDataModels()) {\n+        // TODO : This is a step towards getting the above comment fixed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM4MTQ3OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/util/PhoenixUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0OToyNlrOIINe8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0OToyNlrOIINe8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4MDQzNQ==", "bodyText": "nit: Make class final and add a private constructor if it doesn't exist since this is a Util.", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545480435", "createdAt": "2020-12-17T23:49:26Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/util/PhoenixUtil.java", "diffHunk": "@@ -45,14 +57,15 @@\n import static org.apache.phoenix.jdbc.PhoenixDatabaseMetaData.TABLE_SCHEM;\n \n public class PhoenixUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM4MjUxOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/util/PhoenixUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0OTo0M1rOIINffQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0OTo0M1rOIINffQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4MDU3Mw==", "bodyText": "is this change necessary?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545480573", "createdAt": "2020-12-17T23:49:43Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/util/PhoenixUtil.java", "diffHunk": "@@ -335,7 +353,7 @@ public void executeScenarioDdl(List<Ddl> ddls, String tenantId, DataLoadTimeSumm\n      * @param tableName\n      * @throws InterruptedException\n      */\n-    private void waitForAsyncIndexToFinish(String tableName) throws InterruptedException {\n+    public void waitForAsyncIndexToFinish(String tableName) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM4NDU4OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/util/ResourceList.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo1MDoyNVrOIINgkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo1MDoyNVrOIINgkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4MDg0OA==", "bodyText": "Do we want to remove this comment and also the one above it?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545480848", "createdAt": "2020-12-17T23:50:25Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/util/ResourceList.java", "diffHunk": "@@ -74,9 +76,11 @@ public ResourceList(String rootResourceDir) {\n     private Collection<Path> getResourcesPaths(\n             final Pattern pattern) throws Exception {\n \n-        final String classPath = System.getProperty(\"java.class.path\", \".\");\n+        //final String classPath = System.getProperty(\"java.class.path\", \".\");\n+        // TODO remove", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM4ODU5OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/OperationStats.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo1MTo1NFrOIINiyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo1MTo1NFrOIINiyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4MTQxNg==", "bodyText": "handlerId can't be private?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545481416", "createdAt": "2020-12-17T23:51:54Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/OperationStats.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt;\n+\n+import org.apache.phoenix.pherf.result.ResultValue;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationInfo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Holds metrics + contextual info on the operation run.\n+ */\n+public class OperationStats {\n+    private final String modelName;\n+    private final String scenarioName;\n+    private final String tableName;\n+    private final String tenantId;\n+    private final String tenantGroup;\n+    private final String operationGroup;\n+    private final Operation.OperationType opType;\n+    private String handlerId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODM5NjMwOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationEventGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo1NDo0M1rOIINm8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo1NDo0M1rOIINm8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4MjQ4MA==", "bodyText": "nit: Extract some of these steps into their own methods? This will make unit testing easier too.", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545482480", "createdAt": "2020-12-17T23:54:43Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationEventGenerator.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.sun.org.apache.xpath.internal.operations.Mod;\n+import org.apache.commons.math3.distribution.EnumeratedDistribution;\n+import org.apache.commons.math3.util.Pair;\n+import org.apache.phoenix.pherf.PherfConstants;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.OperationGroup;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Random;\n+\n+/**\n+ * A perf load event generator based on the supplied load profile.\n+ */\n+\n+public class TenantOperationEventGenerator\n+        implements EventGenerator<TenantOperationInfo> {\n+\n+    private static class WeightedRandomSampler {\n+        private final Random RANDOM = new Random();\n+        private final LoadProfile loadProfile;\n+        private final String modelName;\n+        private final String scenarioName;\n+        private final String tableName;\n+        private final EnumeratedDistribution<String> distribution;\n+\n+        private final Map<String, TenantGroup> tenantGroupMap = Maps.newHashMap();\n+        private final Map<String, Operation> operationMap = Maps.newHashMap();\n+        private final Map<String, OperationGroup> operationGroupMap = Maps.newHashMap();\n+\n+        public WeightedRandomSampler(List<Operation> operationList, DataModel model, Scenario scenario) {\n+            this.modelName = model.getName();\n+            this.scenarioName = scenario.getName();\n+            this.tableName = scenario.getTableName();\n+            this.loadProfile = scenario.getLoadProfile();\n+\n+            for (Operation op : operationList) {\n+                for (OperationGroup og : loadProfile.getOpDistribution()) {\n+                    if (op.getId().compareTo(og.getId()) == 0) {\n+                        operationMap.put(op.getId(), op);\n+                        operationGroupMap.put(op.getId(), og);\n+                    }\n+                }\n+            }\n+            Preconditions.checkArgument(!operationMap.isEmpty(),\n+                    \"Operation list and load profile operation do not match\");\n+\n+            double totalTenantGroupWeight = 0.0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ0ODA5OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxNToxNFrOIIODTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxNToxNFrOIIODTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4OTc0Mw==", "bodyText": "Can we break this method up too instead of putting it all in the constructor itself?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545489743", "createdAt": "2020-12-18T00:15:14Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ0OTM2OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxNTo0M1rOIIOD9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxNTo0M1rOIIOD9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4OTkwOA==", "bodyText": "nit: Might be worth refactoring all these anonymous classes", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545489908", "createdAt": "2020-12-18T00:15:43Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ1MjI4OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxNjo1NVrOIIOFow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxNjo1NVrOIIOFow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MDMzOQ==", "bodyText": "Are we doing this TODO?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545490339", "createdAt": "2020-12-18T00:16:55Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {\n+            Operation noopOperation = new NoopOperation() {\n+                @Override public Noop getNoop() {\n+                    return noOp;\n+                }\n+                @Override public String getId() {\n+                    return noOp.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.NO_OP;\n+                }\n+            };\n+            operationList.add(noopOperation);\n+        }\n+\n+        for (final Upsert upsert : scenario.getUpsert()) {\n+            Operation upsertOp = new UpsertOperation() {\n+                @Override public Upsert getUpsert() {\n+                    return upsert;\n+                }\n+\n+                @Override public String getId() {\n+                    return upsert.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.UPSERT;\n+                }\n+            };\n+            operationList.add(upsertOp);\n+        }\n+        for (final QuerySet querySet : scenario.getQuerySet()) {\n+            for (final Query query : querySet.getQuery()) {\n+                Operation queryOp = new QueryOperation() {\n+                    @Override public Query getQuery() {\n+                        return query;\n+                    }\n+\n+                    @Override public String getId() {\n+                        return query.getId();\n+                    }\n+\n+                    @Override public OperationType getType() {\n+                        return OperationType.SELECT;\n+                    }\n+                };\n+                operationList.add(queryOp);\n+            }\n+        }\n+\n+        for (final UserDefined udf : scenario.getUdf()) {\n+            Operation udfOperation = new UserDefinedOperation() {\n+                @Override public UserDefined getUserFunction() {\n+                    return udf;\n+                }\n+\n+                @Override public String getId() {\n+                    return udf.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.USER_DEFINED;\n+                }\n+            };\n+            operationList.add(udfOperation);\n+        }\n+    }\n+\n+    public PhoenixUtil getPhoenixUtil() {\n+        return phoenixUtil;\n+    }\n+\n+    public DataModel getModel() {\n+        return model;\n+    }\n+\n+    public Scenario getScenario() {\n+        return scenario;\n+    }\n+\n+    public List<Operation> getOperationsForScenario() {\n+        return operationList;\n+    }\n+\n+    public TenantOperationImpl getOperation(final TenantOperationInfo input) {\n+        TenantView tenantView = new TenantView(input.getTenantId(), scenario.getTableName());\n+\n+        // Check if pre run ddls are needed.\n+        if (!tenantsLoaded.mightContain(tenantView)) {\n+            // Initialize the tenant using the pre scenario ddls.\n+            final PreScenarioOperation operation = new PreScenarioOperation() {\n+                @Override public List<Ddl> getPreScenarioDdls() {\n+                    List<Ddl> ddls = scenario.getPreScenarioDdls();\n+                    return ddls == null ? Lists.<Ddl>newArrayList() : ddls;\n+                }\n+\n+                @Override public String getId() {\n+                    return OperationType.PRE_RUN.name();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.PRE_RUN;\n+                }\n+            };\n+            // Initialize with the pre run operation.\n+            TenantOperationInfo preRunSample = new TenantOperationInfo(\n+                    input.getModelName(),\n+                    input.getScenarioName(),\n+                    input.getTableName(),\n+                    input.getTenantGroupId(),\n+                    Operation.OperationType.PRE_RUN.name(),\n+                    input.getTenantId(), operation);\n+\n+            TenantOperationImpl impl = new PreScenarioTenantOperationImpl();\n+            try {\n+                // Run the initialization operation.\n+                OperationStats stats = impl.getMethod().apply(preRunSample);\n+                LOGGER.info(phoenixUtil.getGSON().toJson(stats));\n+            } catch (Exception e) {\n+                LOGGER.error(\n+                        String.format(\"Failed to initialize tenant. [%s, %s] \",\n+                                tenantView.tenantId,\n+                                tenantView.viewName\n+                        ), e.fillInStackTrace());\n+            }\n+            tenantsLoaded.put(tenantView);\n+        }\n+\n+        switch (input.getOperation().getType()) {\n+        case NO_OP:\n+            return new NoopTenantOperationImpl();\n+        case SELECT:\n+            return new QueryTenantOperationImpl();\n+        case UPSERT:\n+            return new UpsertTenantOperationImpl();\n+        case USER_DEFINED:\n+            return new UserDefinedOperationImpl();\n+        default:\n+            throw new IllegalArgumentException(\"Unknown operation type\");\n+        }\n+    }\n+\n+    class QueryTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+                    final QueryOperation operation = (QueryOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final String scenarioName = input.getScenarioName();\n+                    final String tableName = input.getTableName();\n+                    final Query query = operation.getQuery();\n+                    final long opCounter = 1;\n+\n+                    String opName = String.format(\"%s:%s:%s:%s:%s\", scenarioName, tableName,\n+                            opGroup, tenantGroup, tenantId);\n+                    LOGGER.info(\"\\nExecuting query \" + query.getStatement());\n+                    // TODO add explain plan output to the stats.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ1Mjg4OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxNzowN1rOIIOF8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxNzowN1rOIIOF8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MDQxNg==", "bodyText": "Use try-with-resources instead", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545490416", "createdAt": "2020-12-18T00:17:07Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {\n+            Operation noopOperation = new NoopOperation() {\n+                @Override public Noop getNoop() {\n+                    return noOp;\n+                }\n+                @Override public String getId() {\n+                    return noOp.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.NO_OP;\n+                }\n+            };\n+            operationList.add(noopOperation);\n+        }\n+\n+        for (final Upsert upsert : scenario.getUpsert()) {\n+            Operation upsertOp = new UpsertOperation() {\n+                @Override public Upsert getUpsert() {\n+                    return upsert;\n+                }\n+\n+                @Override public String getId() {\n+                    return upsert.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.UPSERT;\n+                }\n+            };\n+            operationList.add(upsertOp);\n+        }\n+        for (final QuerySet querySet : scenario.getQuerySet()) {\n+            for (final Query query : querySet.getQuery()) {\n+                Operation queryOp = new QueryOperation() {\n+                    @Override public Query getQuery() {\n+                        return query;\n+                    }\n+\n+                    @Override public String getId() {\n+                        return query.getId();\n+                    }\n+\n+                    @Override public OperationType getType() {\n+                        return OperationType.SELECT;\n+                    }\n+                };\n+                operationList.add(queryOp);\n+            }\n+        }\n+\n+        for (final UserDefined udf : scenario.getUdf()) {\n+            Operation udfOperation = new UserDefinedOperation() {\n+                @Override public UserDefined getUserFunction() {\n+                    return udf;\n+                }\n+\n+                @Override public String getId() {\n+                    return udf.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.USER_DEFINED;\n+                }\n+            };\n+            operationList.add(udfOperation);\n+        }\n+    }\n+\n+    public PhoenixUtil getPhoenixUtil() {\n+        return phoenixUtil;\n+    }\n+\n+    public DataModel getModel() {\n+        return model;\n+    }\n+\n+    public Scenario getScenario() {\n+        return scenario;\n+    }\n+\n+    public List<Operation> getOperationsForScenario() {\n+        return operationList;\n+    }\n+\n+    public TenantOperationImpl getOperation(final TenantOperationInfo input) {\n+        TenantView tenantView = new TenantView(input.getTenantId(), scenario.getTableName());\n+\n+        // Check if pre run ddls are needed.\n+        if (!tenantsLoaded.mightContain(tenantView)) {\n+            // Initialize the tenant using the pre scenario ddls.\n+            final PreScenarioOperation operation = new PreScenarioOperation() {\n+                @Override public List<Ddl> getPreScenarioDdls() {\n+                    List<Ddl> ddls = scenario.getPreScenarioDdls();\n+                    return ddls == null ? Lists.<Ddl>newArrayList() : ddls;\n+                }\n+\n+                @Override public String getId() {\n+                    return OperationType.PRE_RUN.name();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.PRE_RUN;\n+                }\n+            };\n+            // Initialize with the pre run operation.\n+            TenantOperationInfo preRunSample = new TenantOperationInfo(\n+                    input.getModelName(),\n+                    input.getScenarioName(),\n+                    input.getTableName(),\n+                    input.getTenantGroupId(),\n+                    Operation.OperationType.PRE_RUN.name(),\n+                    input.getTenantId(), operation);\n+\n+            TenantOperationImpl impl = new PreScenarioTenantOperationImpl();\n+            try {\n+                // Run the initialization operation.\n+                OperationStats stats = impl.getMethod().apply(preRunSample);\n+                LOGGER.info(phoenixUtil.getGSON().toJson(stats));\n+            } catch (Exception e) {\n+                LOGGER.error(\n+                        String.format(\"Failed to initialize tenant. [%s, %s] \",\n+                                tenantView.tenantId,\n+                                tenantView.viewName\n+                        ), e.fillInStackTrace());\n+            }\n+            tenantsLoaded.put(tenantView);\n+        }\n+\n+        switch (input.getOperation().getType()) {\n+        case NO_OP:\n+            return new NoopTenantOperationImpl();\n+        case SELECT:\n+            return new QueryTenantOperationImpl();\n+        case UPSERT:\n+            return new UpsertTenantOperationImpl();\n+        case USER_DEFINED:\n+            return new UserDefinedOperationImpl();\n+        default:\n+            throw new IllegalArgumentException(\"Unknown operation type\");\n+        }\n+    }\n+\n+    class QueryTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+                    final QueryOperation operation = (QueryOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final String scenarioName = input.getScenarioName();\n+                    final String tableName = input.getTableName();\n+                    final Query query = operation.getQuery();\n+                    final long opCounter = 1;\n+\n+                    String opName = String.format(\"%s:%s:%s:%s:%s\", scenarioName, tableName,\n+                            opGroup, tenantGroup, tenantId);\n+                    LOGGER.info(\"\\nExecuting query \" + query.getStatement());\n+                    // TODO add explain plan output to the stats.\n+\n+                    Connection conn = null;\n+                    PreparedStatement statement = null;\n+                    ResultSet rs = null;\n+                    Long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    Long resultRowCount = 0L;\n+                    Long queryElapsedTime = 0L;\n+                    String queryIteration = opName + \":\" + opCounter;\n+                    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ1NDY1OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxNzo1MVrOIIOG6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxNzo1MVrOIIOG6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MDY2Nw==", "bodyText": "Can you explain what you mean by 'dynamic statements' and do we want to uncomment/remove this?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545490667", "createdAt": "2020-12-18T00:17:51Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {\n+            Operation noopOperation = new NoopOperation() {\n+                @Override public Noop getNoop() {\n+                    return noOp;\n+                }\n+                @Override public String getId() {\n+                    return noOp.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.NO_OP;\n+                }\n+            };\n+            operationList.add(noopOperation);\n+        }\n+\n+        for (final Upsert upsert : scenario.getUpsert()) {\n+            Operation upsertOp = new UpsertOperation() {\n+                @Override public Upsert getUpsert() {\n+                    return upsert;\n+                }\n+\n+                @Override public String getId() {\n+                    return upsert.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.UPSERT;\n+                }\n+            };\n+            operationList.add(upsertOp);\n+        }\n+        for (final QuerySet querySet : scenario.getQuerySet()) {\n+            for (final Query query : querySet.getQuery()) {\n+                Operation queryOp = new QueryOperation() {\n+                    @Override public Query getQuery() {\n+                        return query;\n+                    }\n+\n+                    @Override public String getId() {\n+                        return query.getId();\n+                    }\n+\n+                    @Override public OperationType getType() {\n+                        return OperationType.SELECT;\n+                    }\n+                };\n+                operationList.add(queryOp);\n+            }\n+        }\n+\n+        for (final UserDefined udf : scenario.getUdf()) {\n+            Operation udfOperation = new UserDefinedOperation() {\n+                @Override public UserDefined getUserFunction() {\n+                    return udf;\n+                }\n+\n+                @Override public String getId() {\n+                    return udf.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.USER_DEFINED;\n+                }\n+            };\n+            operationList.add(udfOperation);\n+        }\n+    }\n+\n+    public PhoenixUtil getPhoenixUtil() {\n+        return phoenixUtil;\n+    }\n+\n+    public DataModel getModel() {\n+        return model;\n+    }\n+\n+    public Scenario getScenario() {\n+        return scenario;\n+    }\n+\n+    public List<Operation> getOperationsForScenario() {\n+        return operationList;\n+    }\n+\n+    public TenantOperationImpl getOperation(final TenantOperationInfo input) {\n+        TenantView tenantView = new TenantView(input.getTenantId(), scenario.getTableName());\n+\n+        // Check if pre run ddls are needed.\n+        if (!tenantsLoaded.mightContain(tenantView)) {\n+            // Initialize the tenant using the pre scenario ddls.\n+            final PreScenarioOperation operation = new PreScenarioOperation() {\n+                @Override public List<Ddl> getPreScenarioDdls() {\n+                    List<Ddl> ddls = scenario.getPreScenarioDdls();\n+                    return ddls == null ? Lists.<Ddl>newArrayList() : ddls;\n+                }\n+\n+                @Override public String getId() {\n+                    return OperationType.PRE_RUN.name();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.PRE_RUN;\n+                }\n+            };\n+            // Initialize with the pre run operation.\n+            TenantOperationInfo preRunSample = new TenantOperationInfo(\n+                    input.getModelName(),\n+                    input.getScenarioName(),\n+                    input.getTableName(),\n+                    input.getTenantGroupId(),\n+                    Operation.OperationType.PRE_RUN.name(),\n+                    input.getTenantId(), operation);\n+\n+            TenantOperationImpl impl = new PreScenarioTenantOperationImpl();\n+            try {\n+                // Run the initialization operation.\n+                OperationStats stats = impl.getMethod().apply(preRunSample);\n+                LOGGER.info(phoenixUtil.getGSON().toJson(stats));\n+            } catch (Exception e) {\n+                LOGGER.error(\n+                        String.format(\"Failed to initialize tenant. [%s, %s] \",\n+                                tenantView.tenantId,\n+                                tenantView.viewName\n+                        ), e.fillInStackTrace());\n+            }\n+            tenantsLoaded.put(tenantView);\n+        }\n+\n+        switch (input.getOperation().getType()) {\n+        case NO_OP:\n+            return new NoopTenantOperationImpl();\n+        case SELECT:\n+            return new QueryTenantOperationImpl();\n+        case UPSERT:\n+            return new UpsertTenantOperationImpl();\n+        case USER_DEFINED:\n+            return new UserDefinedOperationImpl();\n+        default:\n+            throw new IllegalArgumentException(\"Unknown operation type\");\n+        }\n+    }\n+\n+    class QueryTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+                    final QueryOperation operation = (QueryOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final String scenarioName = input.getScenarioName();\n+                    final String tableName = input.getTableName();\n+                    final Query query = operation.getQuery();\n+                    final long opCounter = 1;\n+\n+                    String opName = String.format(\"%s:%s:%s:%s:%s\", scenarioName, tableName,\n+                            opGroup, tenantGroup, tenantId);\n+                    LOGGER.info(\"\\nExecuting query \" + query.getStatement());\n+                    // TODO add explain plan output to the stats.\n+\n+                    Connection conn = null;\n+                    PreparedStatement statement = null;\n+                    ResultSet rs = null;\n+                    Long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    Long resultRowCount = 0L;\n+                    Long queryElapsedTime = 0L;\n+                    String queryIteration = opName + \":\" + opCounter;\n+                    try {\n+                        conn = phoenixUtil.getConnection(tenantId);\n+                        conn.setAutoCommit(true);\n+                        // TODO dynamic statements\n+                        //final String statementString = query.getDynamicStatement(rulesApplier, scenario);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ1NTUwOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxODoxM1rOIIOHaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxODoxM1rOIIOHaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MDc5NQ==", "bodyText": "nit: Logger.error(String, e) should be sufficient", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545490795", "createdAt": "2020-12-18T00:18:13Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {\n+            Operation noopOperation = new NoopOperation() {\n+                @Override public Noop getNoop() {\n+                    return noOp;\n+                }\n+                @Override public String getId() {\n+                    return noOp.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.NO_OP;\n+                }\n+            };\n+            operationList.add(noopOperation);\n+        }\n+\n+        for (final Upsert upsert : scenario.getUpsert()) {\n+            Operation upsertOp = new UpsertOperation() {\n+                @Override public Upsert getUpsert() {\n+                    return upsert;\n+                }\n+\n+                @Override public String getId() {\n+                    return upsert.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.UPSERT;\n+                }\n+            };\n+            operationList.add(upsertOp);\n+        }\n+        for (final QuerySet querySet : scenario.getQuerySet()) {\n+            for (final Query query : querySet.getQuery()) {\n+                Operation queryOp = new QueryOperation() {\n+                    @Override public Query getQuery() {\n+                        return query;\n+                    }\n+\n+                    @Override public String getId() {\n+                        return query.getId();\n+                    }\n+\n+                    @Override public OperationType getType() {\n+                        return OperationType.SELECT;\n+                    }\n+                };\n+                operationList.add(queryOp);\n+            }\n+        }\n+\n+        for (final UserDefined udf : scenario.getUdf()) {\n+            Operation udfOperation = new UserDefinedOperation() {\n+                @Override public UserDefined getUserFunction() {\n+                    return udf;\n+                }\n+\n+                @Override public String getId() {\n+                    return udf.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.USER_DEFINED;\n+                }\n+            };\n+            operationList.add(udfOperation);\n+        }\n+    }\n+\n+    public PhoenixUtil getPhoenixUtil() {\n+        return phoenixUtil;\n+    }\n+\n+    public DataModel getModel() {\n+        return model;\n+    }\n+\n+    public Scenario getScenario() {\n+        return scenario;\n+    }\n+\n+    public List<Operation> getOperationsForScenario() {\n+        return operationList;\n+    }\n+\n+    public TenantOperationImpl getOperation(final TenantOperationInfo input) {\n+        TenantView tenantView = new TenantView(input.getTenantId(), scenario.getTableName());\n+\n+        // Check if pre run ddls are needed.\n+        if (!tenantsLoaded.mightContain(tenantView)) {\n+            // Initialize the tenant using the pre scenario ddls.\n+            final PreScenarioOperation operation = new PreScenarioOperation() {\n+                @Override public List<Ddl> getPreScenarioDdls() {\n+                    List<Ddl> ddls = scenario.getPreScenarioDdls();\n+                    return ddls == null ? Lists.<Ddl>newArrayList() : ddls;\n+                }\n+\n+                @Override public String getId() {\n+                    return OperationType.PRE_RUN.name();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.PRE_RUN;\n+                }\n+            };\n+            // Initialize with the pre run operation.\n+            TenantOperationInfo preRunSample = new TenantOperationInfo(\n+                    input.getModelName(),\n+                    input.getScenarioName(),\n+                    input.getTableName(),\n+                    input.getTenantGroupId(),\n+                    Operation.OperationType.PRE_RUN.name(),\n+                    input.getTenantId(), operation);\n+\n+            TenantOperationImpl impl = new PreScenarioTenantOperationImpl();\n+            try {\n+                // Run the initialization operation.\n+                OperationStats stats = impl.getMethod().apply(preRunSample);\n+                LOGGER.info(phoenixUtil.getGSON().toJson(stats));\n+            } catch (Exception e) {\n+                LOGGER.error(\n+                        String.format(\"Failed to initialize tenant. [%s, %s] \",\n+                                tenantView.tenantId,\n+                                tenantView.viewName\n+                        ), e.fillInStackTrace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ1NzkwOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxOTowOVrOIIOIuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoxOTowOVrOIIOIuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MTEyOQ==", "bodyText": "nit: You can use Closables.closeQuietly() for these", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545491129", "createdAt": "2020-12-18T00:19:09Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {\n+            Operation noopOperation = new NoopOperation() {\n+                @Override public Noop getNoop() {\n+                    return noOp;\n+                }\n+                @Override public String getId() {\n+                    return noOp.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.NO_OP;\n+                }\n+            };\n+            operationList.add(noopOperation);\n+        }\n+\n+        for (final Upsert upsert : scenario.getUpsert()) {\n+            Operation upsertOp = new UpsertOperation() {\n+                @Override public Upsert getUpsert() {\n+                    return upsert;\n+                }\n+\n+                @Override public String getId() {\n+                    return upsert.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.UPSERT;\n+                }\n+            };\n+            operationList.add(upsertOp);\n+        }\n+        for (final QuerySet querySet : scenario.getQuerySet()) {\n+            for (final Query query : querySet.getQuery()) {\n+                Operation queryOp = new QueryOperation() {\n+                    @Override public Query getQuery() {\n+                        return query;\n+                    }\n+\n+                    @Override public String getId() {\n+                        return query.getId();\n+                    }\n+\n+                    @Override public OperationType getType() {\n+                        return OperationType.SELECT;\n+                    }\n+                };\n+                operationList.add(queryOp);\n+            }\n+        }\n+\n+        for (final UserDefined udf : scenario.getUdf()) {\n+            Operation udfOperation = new UserDefinedOperation() {\n+                @Override public UserDefined getUserFunction() {\n+                    return udf;\n+                }\n+\n+                @Override public String getId() {\n+                    return udf.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.USER_DEFINED;\n+                }\n+            };\n+            operationList.add(udfOperation);\n+        }\n+    }\n+\n+    public PhoenixUtil getPhoenixUtil() {\n+        return phoenixUtil;\n+    }\n+\n+    public DataModel getModel() {\n+        return model;\n+    }\n+\n+    public Scenario getScenario() {\n+        return scenario;\n+    }\n+\n+    public List<Operation> getOperationsForScenario() {\n+        return operationList;\n+    }\n+\n+    public TenantOperationImpl getOperation(final TenantOperationInfo input) {\n+        TenantView tenantView = new TenantView(input.getTenantId(), scenario.getTableName());\n+\n+        // Check if pre run ddls are needed.\n+        if (!tenantsLoaded.mightContain(tenantView)) {\n+            // Initialize the tenant using the pre scenario ddls.\n+            final PreScenarioOperation operation = new PreScenarioOperation() {\n+                @Override public List<Ddl> getPreScenarioDdls() {\n+                    List<Ddl> ddls = scenario.getPreScenarioDdls();\n+                    return ddls == null ? Lists.<Ddl>newArrayList() : ddls;\n+                }\n+\n+                @Override public String getId() {\n+                    return OperationType.PRE_RUN.name();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.PRE_RUN;\n+                }\n+            };\n+            // Initialize with the pre run operation.\n+            TenantOperationInfo preRunSample = new TenantOperationInfo(\n+                    input.getModelName(),\n+                    input.getScenarioName(),\n+                    input.getTableName(),\n+                    input.getTenantGroupId(),\n+                    Operation.OperationType.PRE_RUN.name(),\n+                    input.getTenantId(), operation);\n+\n+            TenantOperationImpl impl = new PreScenarioTenantOperationImpl();\n+            try {\n+                // Run the initialization operation.\n+                OperationStats stats = impl.getMethod().apply(preRunSample);\n+                LOGGER.info(phoenixUtil.getGSON().toJson(stats));\n+            } catch (Exception e) {\n+                LOGGER.error(\n+                        String.format(\"Failed to initialize tenant. [%s, %s] \",\n+                                tenantView.tenantId,\n+                                tenantView.viewName\n+                        ), e.fillInStackTrace());\n+            }\n+            tenantsLoaded.put(tenantView);\n+        }\n+\n+        switch (input.getOperation().getType()) {\n+        case NO_OP:\n+            return new NoopTenantOperationImpl();\n+        case SELECT:\n+            return new QueryTenantOperationImpl();\n+        case UPSERT:\n+            return new UpsertTenantOperationImpl();\n+        case USER_DEFINED:\n+            return new UserDefinedOperationImpl();\n+        default:\n+            throw new IllegalArgumentException(\"Unknown operation type\");\n+        }\n+    }\n+\n+    class QueryTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+                    final QueryOperation operation = (QueryOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final String scenarioName = input.getScenarioName();\n+                    final String tableName = input.getTableName();\n+                    final Query query = operation.getQuery();\n+                    final long opCounter = 1;\n+\n+                    String opName = String.format(\"%s:%s:%s:%s:%s\", scenarioName, tableName,\n+                            opGroup, tenantGroup, tenantId);\n+                    LOGGER.info(\"\\nExecuting query \" + query.getStatement());\n+                    // TODO add explain plan output to the stats.\n+\n+                    Connection conn = null;\n+                    PreparedStatement statement = null;\n+                    ResultSet rs = null;\n+                    Long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    Long resultRowCount = 0L;\n+                    Long queryElapsedTime = 0L;\n+                    String queryIteration = opName + \":\" + opCounter;\n+                    try {\n+                        conn = phoenixUtil.getConnection(tenantId);\n+                        conn.setAutoCommit(true);\n+                        // TODO dynamic statements\n+                        //final String statementString = query.getDynamicStatement(rulesApplier, scenario);\n+                        statement = conn.prepareStatement(query.getStatement());\n+                        boolean isQuery = statement.execute();\n+                        if (isQuery) {\n+                            rs = statement.getResultSet();\n+                            boolean isSelectCountStatement = query.getStatement().toUpperCase().trim().contains(\"COUNT(\") ? true : false;\n+                            org.apache.hadoop.hbase.util.Pair<Long, Long>\n+                                    r = phoenixUtil.getResults(query, rs, queryIteration, isSelectCountStatement, startTime);\n+                            resultRowCount = r.getFirst();\n+                            queryElapsedTime = r.getSecond();\n+                        } else {\n+                            conn.commit();\n+                        }\n+                    } catch (Exception e) {\n+                        LOGGER.error(\"Exception while executing query iteration \" + queryIteration, e);\n+                    } finally {\n+                        try {\n+                            if (rs != null) rs.close();\n+                            if (statement != null) statement.close();\n+                            if (conn != null) conn.close();\n+\n+                        } catch (Throwable t) {\n+                            // swallow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ2MDU3OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMDoyMFrOIIOKLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMDoyMFrOIIOKLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MTUwMg==", "bodyText": "We call commit() later anyways. Is setting this necessary? In case we run UPSERT SELECTS or DELETES with auto-commit, that will change the execution (client side vs server side) and this might be undesirable.", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545491502", "createdAt": "2020-12-18T00:20:20Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {\n+            Operation noopOperation = new NoopOperation() {\n+                @Override public Noop getNoop() {\n+                    return noOp;\n+                }\n+                @Override public String getId() {\n+                    return noOp.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.NO_OP;\n+                }\n+            };\n+            operationList.add(noopOperation);\n+        }\n+\n+        for (final Upsert upsert : scenario.getUpsert()) {\n+            Operation upsertOp = new UpsertOperation() {\n+                @Override public Upsert getUpsert() {\n+                    return upsert;\n+                }\n+\n+                @Override public String getId() {\n+                    return upsert.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.UPSERT;\n+                }\n+            };\n+            operationList.add(upsertOp);\n+        }\n+        for (final QuerySet querySet : scenario.getQuerySet()) {\n+            for (final Query query : querySet.getQuery()) {\n+                Operation queryOp = new QueryOperation() {\n+                    @Override public Query getQuery() {\n+                        return query;\n+                    }\n+\n+                    @Override public String getId() {\n+                        return query.getId();\n+                    }\n+\n+                    @Override public OperationType getType() {\n+                        return OperationType.SELECT;\n+                    }\n+                };\n+                operationList.add(queryOp);\n+            }\n+        }\n+\n+        for (final UserDefined udf : scenario.getUdf()) {\n+            Operation udfOperation = new UserDefinedOperation() {\n+                @Override public UserDefined getUserFunction() {\n+                    return udf;\n+                }\n+\n+                @Override public String getId() {\n+                    return udf.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.USER_DEFINED;\n+                }\n+            };\n+            operationList.add(udfOperation);\n+        }\n+    }\n+\n+    public PhoenixUtil getPhoenixUtil() {\n+        return phoenixUtil;\n+    }\n+\n+    public DataModel getModel() {\n+        return model;\n+    }\n+\n+    public Scenario getScenario() {\n+        return scenario;\n+    }\n+\n+    public List<Operation> getOperationsForScenario() {\n+        return operationList;\n+    }\n+\n+    public TenantOperationImpl getOperation(final TenantOperationInfo input) {\n+        TenantView tenantView = new TenantView(input.getTenantId(), scenario.getTableName());\n+\n+        // Check if pre run ddls are needed.\n+        if (!tenantsLoaded.mightContain(tenantView)) {\n+            // Initialize the tenant using the pre scenario ddls.\n+            final PreScenarioOperation operation = new PreScenarioOperation() {\n+                @Override public List<Ddl> getPreScenarioDdls() {\n+                    List<Ddl> ddls = scenario.getPreScenarioDdls();\n+                    return ddls == null ? Lists.<Ddl>newArrayList() : ddls;\n+                }\n+\n+                @Override public String getId() {\n+                    return OperationType.PRE_RUN.name();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.PRE_RUN;\n+                }\n+            };\n+            // Initialize with the pre run operation.\n+            TenantOperationInfo preRunSample = new TenantOperationInfo(\n+                    input.getModelName(),\n+                    input.getScenarioName(),\n+                    input.getTableName(),\n+                    input.getTenantGroupId(),\n+                    Operation.OperationType.PRE_RUN.name(),\n+                    input.getTenantId(), operation);\n+\n+            TenantOperationImpl impl = new PreScenarioTenantOperationImpl();\n+            try {\n+                // Run the initialization operation.\n+                OperationStats stats = impl.getMethod().apply(preRunSample);\n+                LOGGER.info(phoenixUtil.getGSON().toJson(stats));\n+            } catch (Exception e) {\n+                LOGGER.error(\n+                        String.format(\"Failed to initialize tenant. [%s, %s] \",\n+                                tenantView.tenantId,\n+                                tenantView.viewName\n+                        ), e.fillInStackTrace());\n+            }\n+            tenantsLoaded.put(tenantView);\n+        }\n+\n+        switch (input.getOperation().getType()) {\n+        case NO_OP:\n+            return new NoopTenantOperationImpl();\n+        case SELECT:\n+            return new QueryTenantOperationImpl();\n+        case UPSERT:\n+            return new UpsertTenantOperationImpl();\n+        case USER_DEFINED:\n+            return new UserDefinedOperationImpl();\n+        default:\n+            throw new IllegalArgumentException(\"Unknown operation type\");\n+        }\n+    }\n+\n+    class QueryTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+                    final QueryOperation operation = (QueryOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final String scenarioName = input.getScenarioName();\n+                    final String tableName = input.getTableName();\n+                    final Query query = operation.getQuery();\n+                    final long opCounter = 1;\n+\n+                    String opName = String.format(\"%s:%s:%s:%s:%s\", scenarioName, tableName,\n+                            opGroup, tenantGroup, tenantId);\n+                    LOGGER.info(\"\\nExecuting query \" + query.getStatement());\n+                    // TODO add explain plan output to the stats.\n+\n+                    Connection conn = null;\n+                    PreparedStatement statement = null;\n+                    ResultSet rs = null;\n+                    Long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    Long resultRowCount = 0L;\n+                    Long queryElapsedTime = 0L;\n+                    String queryIteration = opName + \":\" + opCounter;\n+                    try {\n+                        conn = phoenixUtil.getConnection(tenantId);\n+                        conn.setAutoCommit(true);\n+                        // TODO dynamic statements\n+                        //final String statementString = query.getDynamicStatement(rulesApplier, scenario);\n+                        statement = conn.prepareStatement(query.getStatement());\n+                        boolean isQuery = statement.execute();\n+                        if (isQuery) {\n+                            rs = statement.getResultSet();\n+                            boolean isSelectCountStatement = query.getStatement().toUpperCase().trim().contains(\"COUNT(\") ? true : false;\n+                            org.apache.hadoop.hbase.util.Pair<Long, Long>\n+                                    r = phoenixUtil.getResults(query, rs, queryIteration, isSelectCountStatement, startTime);\n+                            resultRowCount = r.getFirst();\n+                            queryElapsedTime = r.getSecond();\n+                        } else {\n+                            conn.commit();\n+                        }\n+                    } catch (Exception e) {\n+                        LOGGER.error(\"Exception while executing query iteration \" + queryIteration, e);\n+                    } finally {\n+                        try {\n+                            if (rs != null) rs.close();\n+                            if (statement != null) statement.close();\n+                            if (conn != null) conn.close();\n+\n+                        } catch (Throwable t) {\n+                            // swallow;\n+                        }\n+                    }\n+                    return new OperationStats(input, startTime, 0, resultRowCount, queryElapsedTime);\n+                }\n+            };\n+        }\n+    }\n+\n+    class UpsertTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+\n+                    final int batchSize = loadProfile.getBatchSize();\n+                    final boolean useBatchApi = batchSize != 0;\n+                    final int rowCount = useBatchApi ? batchSize : 1;\n+\n+                    final UpsertOperation operation = (UpsertOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final Upsert upsert = operation.getUpsert();\n+                    final String tableName = input.getTableName();\n+                    final String scenarioName = input.getScenarioName();\n+                    final List<Column> columns = upsert.getColumn();\n+\n+                    final String opName = String.format(\"%s:%s:%s:%s:%s\",\n+                            scenarioName, tableName, opGroup, tenantGroup, tenantId);\n+\n+                    long rowsCreated = 0;\n+                    long startTime = 0, duration, totalDuration;\n+                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+                    try (Connection connection = phoenixUtil.getConnection(tenantId)) {\n+                        connection.setAutoCommit(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 362}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ2MTc0OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMDo1MlrOIIOK0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMDo1MlrOIIOK0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MTY2Ng==", "bodyText": "Log instead", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545491666", "createdAt": "2020-12-18T00:20:52Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {\n+            Operation noopOperation = new NoopOperation() {\n+                @Override public Noop getNoop() {\n+                    return noOp;\n+                }\n+                @Override public String getId() {\n+                    return noOp.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.NO_OP;\n+                }\n+            };\n+            operationList.add(noopOperation);\n+        }\n+\n+        for (final Upsert upsert : scenario.getUpsert()) {\n+            Operation upsertOp = new UpsertOperation() {\n+                @Override public Upsert getUpsert() {\n+                    return upsert;\n+                }\n+\n+                @Override public String getId() {\n+                    return upsert.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.UPSERT;\n+                }\n+            };\n+            operationList.add(upsertOp);\n+        }\n+        for (final QuerySet querySet : scenario.getQuerySet()) {\n+            for (final Query query : querySet.getQuery()) {\n+                Operation queryOp = new QueryOperation() {\n+                    @Override public Query getQuery() {\n+                        return query;\n+                    }\n+\n+                    @Override public String getId() {\n+                        return query.getId();\n+                    }\n+\n+                    @Override public OperationType getType() {\n+                        return OperationType.SELECT;\n+                    }\n+                };\n+                operationList.add(queryOp);\n+            }\n+        }\n+\n+        for (final UserDefined udf : scenario.getUdf()) {\n+            Operation udfOperation = new UserDefinedOperation() {\n+                @Override public UserDefined getUserFunction() {\n+                    return udf;\n+                }\n+\n+                @Override public String getId() {\n+                    return udf.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.USER_DEFINED;\n+                }\n+            };\n+            operationList.add(udfOperation);\n+        }\n+    }\n+\n+    public PhoenixUtil getPhoenixUtil() {\n+        return phoenixUtil;\n+    }\n+\n+    public DataModel getModel() {\n+        return model;\n+    }\n+\n+    public Scenario getScenario() {\n+        return scenario;\n+    }\n+\n+    public List<Operation> getOperationsForScenario() {\n+        return operationList;\n+    }\n+\n+    public TenantOperationImpl getOperation(final TenantOperationInfo input) {\n+        TenantView tenantView = new TenantView(input.getTenantId(), scenario.getTableName());\n+\n+        // Check if pre run ddls are needed.\n+        if (!tenantsLoaded.mightContain(tenantView)) {\n+            // Initialize the tenant using the pre scenario ddls.\n+            final PreScenarioOperation operation = new PreScenarioOperation() {\n+                @Override public List<Ddl> getPreScenarioDdls() {\n+                    List<Ddl> ddls = scenario.getPreScenarioDdls();\n+                    return ddls == null ? Lists.<Ddl>newArrayList() : ddls;\n+                }\n+\n+                @Override public String getId() {\n+                    return OperationType.PRE_RUN.name();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.PRE_RUN;\n+                }\n+            };\n+            // Initialize with the pre run operation.\n+            TenantOperationInfo preRunSample = new TenantOperationInfo(\n+                    input.getModelName(),\n+                    input.getScenarioName(),\n+                    input.getTableName(),\n+                    input.getTenantGroupId(),\n+                    Operation.OperationType.PRE_RUN.name(),\n+                    input.getTenantId(), operation);\n+\n+            TenantOperationImpl impl = new PreScenarioTenantOperationImpl();\n+            try {\n+                // Run the initialization operation.\n+                OperationStats stats = impl.getMethod().apply(preRunSample);\n+                LOGGER.info(phoenixUtil.getGSON().toJson(stats));\n+            } catch (Exception e) {\n+                LOGGER.error(\n+                        String.format(\"Failed to initialize tenant. [%s, %s] \",\n+                                tenantView.tenantId,\n+                                tenantView.viewName\n+                        ), e.fillInStackTrace());\n+            }\n+            tenantsLoaded.put(tenantView);\n+        }\n+\n+        switch (input.getOperation().getType()) {\n+        case NO_OP:\n+            return new NoopTenantOperationImpl();\n+        case SELECT:\n+            return new QueryTenantOperationImpl();\n+        case UPSERT:\n+            return new UpsertTenantOperationImpl();\n+        case USER_DEFINED:\n+            return new UserDefinedOperationImpl();\n+        default:\n+            throw new IllegalArgumentException(\"Unknown operation type\");\n+        }\n+    }\n+\n+    class QueryTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+                    final QueryOperation operation = (QueryOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final String scenarioName = input.getScenarioName();\n+                    final String tableName = input.getTableName();\n+                    final Query query = operation.getQuery();\n+                    final long opCounter = 1;\n+\n+                    String opName = String.format(\"%s:%s:%s:%s:%s\", scenarioName, tableName,\n+                            opGroup, tenantGroup, tenantId);\n+                    LOGGER.info(\"\\nExecuting query \" + query.getStatement());\n+                    // TODO add explain plan output to the stats.\n+\n+                    Connection conn = null;\n+                    PreparedStatement statement = null;\n+                    ResultSet rs = null;\n+                    Long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    Long resultRowCount = 0L;\n+                    Long queryElapsedTime = 0L;\n+                    String queryIteration = opName + \":\" + opCounter;\n+                    try {\n+                        conn = phoenixUtil.getConnection(tenantId);\n+                        conn.setAutoCommit(true);\n+                        // TODO dynamic statements\n+                        //final String statementString = query.getDynamicStatement(rulesApplier, scenario);\n+                        statement = conn.prepareStatement(query.getStatement());\n+                        boolean isQuery = statement.execute();\n+                        if (isQuery) {\n+                            rs = statement.getResultSet();\n+                            boolean isSelectCountStatement = query.getStatement().toUpperCase().trim().contains(\"COUNT(\") ? true : false;\n+                            org.apache.hadoop.hbase.util.Pair<Long, Long>\n+                                    r = phoenixUtil.getResults(query, rs, queryIteration, isSelectCountStatement, startTime);\n+                            resultRowCount = r.getFirst();\n+                            queryElapsedTime = r.getSecond();\n+                        } else {\n+                            conn.commit();\n+                        }\n+                    } catch (Exception e) {\n+                        LOGGER.error(\"Exception while executing query iteration \" + queryIteration, e);\n+                    } finally {\n+                        try {\n+                            if (rs != null) rs.close();\n+                            if (statement != null) statement.close();\n+                            if (conn != null) conn.close();\n+\n+                        } catch (Throwable t) {\n+                            // swallow;\n+                        }\n+                    }\n+                    return new OperationStats(input, startTime, 0, resultRowCount, queryElapsedTime);\n+                }\n+            };\n+        }\n+    }\n+\n+    class UpsertTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+\n+                    final int batchSize = loadProfile.getBatchSize();\n+                    final boolean useBatchApi = batchSize != 0;\n+                    final int rowCount = useBatchApi ? batchSize : 1;\n+\n+                    final UpsertOperation operation = (UpsertOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final Upsert upsert = operation.getUpsert();\n+                    final String tableName = input.getTableName();\n+                    final String scenarioName = input.getScenarioName();\n+                    final List<Column> columns = upsert.getColumn();\n+\n+                    final String opName = String.format(\"%s:%s:%s:%s:%s\",\n+                            scenarioName, tableName, opGroup, tenantGroup, tenantId);\n+\n+                    long rowsCreated = 0;\n+                    long startTime = 0, duration, totalDuration;\n+                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+                    try (Connection connection = phoenixUtil.getConnection(tenantId)) {\n+                        connection.setAutoCommit(true);\n+                        startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                        String sql = phoenixUtil.buildSql(columns, tableName);\n+                        PreparedStatement stmt = null;\n+                        try {\n+                            stmt = connection.prepareStatement(sql);\n+                            for (long i = rowCount; i > 0; i--) {\n+                                LOGGER.debug(\"Operation \" + opName + \" executing \");\n+                                stmt = phoenixUtil.buildStatement(rulesApplier, scenario, columns, stmt, simpleDateFormat);\n+                                if (useBatchApi) {\n+                                    stmt.addBatch();\n+                                } else {\n+                                    rowsCreated += stmt.executeUpdate();\n+                                }\n+                            }\n+                        } catch (SQLException e) {\n+                            LOGGER.error(\"Operation \" + opName + \" failed with exception \", e);\n+                            throw e;\n+                        } finally {\n+                            // Need to keep the statement open to send the remaining batch of updates\n+                            if (!useBatchApi && stmt != null) {\n+                                stmt.close();\n+                            }\n+                            if (connection != null) {\n+                                if (useBatchApi && stmt != null) {\n+                                    int[] results = stmt.executeBatch();\n+                                    for (int x = 0; x < results.length; x++) {\n+                                        int result = results[x];\n+                                        if (result < 1) {\n+                                            final String msg =\n+                                                    \"Failed to write update in batch (update count=\"\n+                                                            + result + \")\";\n+                                            throw new RuntimeException(msg);\n+                                        }\n+                                        rowsCreated += result;\n+                                    }\n+                                    // Close the statement after our last batch execution.\n+                                    stmt.close();\n+                                }\n+\n+                                try {\n+                                    connection.commit();\n+                                    duration = EnvironmentEdgeManager.currentTimeMillis() - startTime;\n+                                    LOGGER.info(\"Writer ( \" + Thread.currentThread().getName()\n+                                            + \") committed Final Batch. Duration (\" + duration + \") Ms\");\n+                                    connection.close();\n+                                } catch (SQLException e) {\n+                                    // Swallow since we are closing anyway\n+                                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 410}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ2MjEwOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMTowNFrOIIOLEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMTowNFrOIIOLEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MTczMQ==", "bodyText": "Use try-with-resources.", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545491731", "createdAt": "2020-12-18T00:21:04Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {\n+            Operation noopOperation = new NoopOperation() {\n+                @Override public Noop getNoop() {\n+                    return noOp;\n+                }\n+                @Override public String getId() {\n+                    return noOp.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.NO_OP;\n+                }\n+            };\n+            operationList.add(noopOperation);\n+        }\n+\n+        for (final Upsert upsert : scenario.getUpsert()) {\n+            Operation upsertOp = new UpsertOperation() {\n+                @Override public Upsert getUpsert() {\n+                    return upsert;\n+                }\n+\n+                @Override public String getId() {\n+                    return upsert.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.UPSERT;\n+                }\n+            };\n+            operationList.add(upsertOp);\n+        }\n+        for (final QuerySet querySet : scenario.getQuerySet()) {\n+            for (final Query query : querySet.getQuery()) {\n+                Operation queryOp = new QueryOperation() {\n+                    @Override public Query getQuery() {\n+                        return query;\n+                    }\n+\n+                    @Override public String getId() {\n+                        return query.getId();\n+                    }\n+\n+                    @Override public OperationType getType() {\n+                        return OperationType.SELECT;\n+                    }\n+                };\n+                operationList.add(queryOp);\n+            }\n+        }\n+\n+        for (final UserDefined udf : scenario.getUdf()) {\n+            Operation udfOperation = new UserDefinedOperation() {\n+                @Override public UserDefined getUserFunction() {\n+                    return udf;\n+                }\n+\n+                @Override public String getId() {\n+                    return udf.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.USER_DEFINED;\n+                }\n+            };\n+            operationList.add(udfOperation);\n+        }\n+    }\n+\n+    public PhoenixUtil getPhoenixUtil() {\n+        return phoenixUtil;\n+    }\n+\n+    public DataModel getModel() {\n+        return model;\n+    }\n+\n+    public Scenario getScenario() {\n+        return scenario;\n+    }\n+\n+    public List<Operation> getOperationsForScenario() {\n+        return operationList;\n+    }\n+\n+    public TenantOperationImpl getOperation(final TenantOperationInfo input) {\n+        TenantView tenantView = new TenantView(input.getTenantId(), scenario.getTableName());\n+\n+        // Check if pre run ddls are needed.\n+        if (!tenantsLoaded.mightContain(tenantView)) {\n+            // Initialize the tenant using the pre scenario ddls.\n+            final PreScenarioOperation operation = new PreScenarioOperation() {\n+                @Override public List<Ddl> getPreScenarioDdls() {\n+                    List<Ddl> ddls = scenario.getPreScenarioDdls();\n+                    return ddls == null ? Lists.<Ddl>newArrayList() : ddls;\n+                }\n+\n+                @Override public String getId() {\n+                    return OperationType.PRE_RUN.name();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.PRE_RUN;\n+                }\n+            };\n+            // Initialize with the pre run operation.\n+            TenantOperationInfo preRunSample = new TenantOperationInfo(\n+                    input.getModelName(),\n+                    input.getScenarioName(),\n+                    input.getTableName(),\n+                    input.getTenantGroupId(),\n+                    Operation.OperationType.PRE_RUN.name(),\n+                    input.getTenantId(), operation);\n+\n+            TenantOperationImpl impl = new PreScenarioTenantOperationImpl();\n+            try {\n+                // Run the initialization operation.\n+                OperationStats stats = impl.getMethod().apply(preRunSample);\n+                LOGGER.info(phoenixUtil.getGSON().toJson(stats));\n+            } catch (Exception e) {\n+                LOGGER.error(\n+                        String.format(\"Failed to initialize tenant. [%s, %s] \",\n+                                tenantView.tenantId,\n+                                tenantView.viewName\n+                        ), e.fillInStackTrace());\n+            }\n+            tenantsLoaded.put(tenantView);\n+        }\n+\n+        switch (input.getOperation().getType()) {\n+        case NO_OP:\n+            return new NoopTenantOperationImpl();\n+        case SELECT:\n+            return new QueryTenantOperationImpl();\n+        case UPSERT:\n+            return new UpsertTenantOperationImpl();\n+        case USER_DEFINED:\n+            return new UserDefinedOperationImpl();\n+        default:\n+            throw new IllegalArgumentException(\"Unknown operation type\");\n+        }\n+    }\n+\n+    class QueryTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+                    final QueryOperation operation = (QueryOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final String scenarioName = input.getScenarioName();\n+                    final String tableName = input.getTableName();\n+                    final Query query = operation.getQuery();\n+                    final long opCounter = 1;\n+\n+                    String opName = String.format(\"%s:%s:%s:%s:%s\", scenarioName, tableName,\n+                            opGroup, tenantGroup, tenantId);\n+                    LOGGER.info(\"\\nExecuting query \" + query.getStatement());\n+                    // TODO add explain plan output to the stats.\n+\n+                    Connection conn = null;\n+                    PreparedStatement statement = null;\n+                    ResultSet rs = null;\n+                    Long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    Long resultRowCount = 0L;\n+                    Long queryElapsedTime = 0L;\n+                    String queryIteration = opName + \":\" + opCounter;\n+                    try {\n+                        conn = phoenixUtil.getConnection(tenantId);\n+                        conn.setAutoCommit(true);\n+                        // TODO dynamic statements\n+                        //final String statementString = query.getDynamicStatement(rulesApplier, scenario);\n+                        statement = conn.prepareStatement(query.getStatement());\n+                        boolean isQuery = statement.execute();\n+                        if (isQuery) {\n+                            rs = statement.getResultSet();\n+                            boolean isSelectCountStatement = query.getStatement().toUpperCase().trim().contains(\"COUNT(\") ? true : false;\n+                            org.apache.hadoop.hbase.util.Pair<Long, Long>\n+                                    r = phoenixUtil.getResults(query, rs, queryIteration, isSelectCountStatement, startTime);\n+                            resultRowCount = r.getFirst();\n+                            queryElapsedTime = r.getSecond();\n+                        } else {\n+                            conn.commit();\n+                        }\n+                    } catch (Exception e) {\n+                        LOGGER.error(\"Exception while executing query iteration \" + queryIteration, e);\n+                    } finally {\n+                        try {\n+                            if (rs != null) rs.close();\n+                            if (statement != null) statement.close();\n+                            if (conn != null) conn.close();\n+\n+                        } catch (Throwable t) {\n+                            // swallow;\n+                        }\n+                    }\n+                    return new OperationStats(input, startTime, 0, resultRowCount, queryElapsedTime);\n+                }\n+            };\n+        }\n+    }\n+\n+    class UpsertTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+\n+                    final int batchSize = loadProfile.getBatchSize();\n+                    final boolean useBatchApi = batchSize != 0;\n+                    final int rowCount = useBatchApi ? batchSize : 1;\n+\n+                    final UpsertOperation operation = (UpsertOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final Upsert upsert = operation.getUpsert();\n+                    final String tableName = input.getTableName();\n+                    final String scenarioName = input.getScenarioName();\n+                    final List<Column> columns = upsert.getColumn();\n+\n+                    final String opName = String.format(\"%s:%s:%s:%s:%s\",\n+                            scenarioName, tableName, opGroup, tenantGroup, tenantId);\n+\n+                    long rowsCreated = 0;\n+                    long startTime = 0, duration, totalDuration;\n+                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+                    try (Connection connection = phoenixUtil.getConnection(tenantId)) {\n+                        connection.setAutoCommit(true);\n+                        startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                        String sql = phoenixUtil.buildSql(columns, tableName);\n+                        PreparedStatement stmt = null;\n+                        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 366}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ2Mzg2OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMTo0OVrOIIOMFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMTo0OVrOIIOMFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MTk4OA==", "bodyText": "Might be better to just let the outer catch block catch the exception since you're rethrowing it anyways. And then we can log there.", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545491988", "createdAt": "2020-12-18T00:21:49Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {\n+            Operation noopOperation = new NoopOperation() {\n+                @Override public Noop getNoop() {\n+                    return noOp;\n+                }\n+                @Override public String getId() {\n+                    return noOp.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.NO_OP;\n+                }\n+            };\n+            operationList.add(noopOperation);\n+        }\n+\n+        for (final Upsert upsert : scenario.getUpsert()) {\n+            Operation upsertOp = new UpsertOperation() {\n+                @Override public Upsert getUpsert() {\n+                    return upsert;\n+                }\n+\n+                @Override public String getId() {\n+                    return upsert.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.UPSERT;\n+                }\n+            };\n+            operationList.add(upsertOp);\n+        }\n+        for (final QuerySet querySet : scenario.getQuerySet()) {\n+            for (final Query query : querySet.getQuery()) {\n+                Operation queryOp = new QueryOperation() {\n+                    @Override public Query getQuery() {\n+                        return query;\n+                    }\n+\n+                    @Override public String getId() {\n+                        return query.getId();\n+                    }\n+\n+                    @Override public OperationType getType() {\n+                        return OperationType.SELECT;\n+                    }\n+                };\n+                operationList.add(queryOp);\n+            }\n+        }\n+\n+        for (final UserDefined udf : scenario.getUdf()) {\n+            Operation udfOperation = new UserDefinedOperation() {\n+                @Override public UserDefined getUserFunction() {\n+                    return udf;\n+                }\n+\n+                @Override public String getId() {\n+                    return udf.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.USER_DEFINED;\n+                }\n+            };\n+            operationList.add(udfOperation);\n+        }\n+    }\n+\n+    public PhoenixUtil getPhoenixUtil() {\n+        return phoenixUtil;\n+    }\n+\n+    public DataModel getModel() {\n+        return model;\n+    }\n+\n+    public Scenario getScenario() {\n+        return scenario;\n+    }\n+\n+    public List<Operation> getOperationsForScenario() {\n+        return operationList;\n+    }\n+\n+    public TenantOperationImpl getOperation(final TenantOperationInfo input) {\n+        TenantView tenantView = new TenantView(input.getTenantId(), scenario.getTableName());\n+\n+        // Check if pre run ddls are needed.\n+        if (!tenantsLoaded.mightContain(tenantView)) {\n+            // Initialize the tenant using the pre scenario ddls.\n+            final PreScenarioOperation operation = new PreScenarioOperation() {\n+                @Override public List<Ddl> getPreScenarioDdls() {\n+                    List<Ddl> ddls = scenario.getPreScenarioDdls();\n+                    return ddls == null ? Lists.<Ddl>newArrayList() : ddls;\n+                }\n+\n+                @Override public String getId() {\n+                    return OperationType.PRE_RUN.name();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.PRE_RUN;\n+                }\n+            };\n+            // Initialize with the pre run operation.\n+            TenantOperationInfo preRunSample = new TenantOperationInfo(\n+                    input.getModelName(),\n+                    input.getScenarioName(),\n+                    input.getTableName(),\n+                    input.getTenantGroupId(),\n+                    Operation.OperationType.PRE_RUN.name(),\n+                    input.getTenantId(), operation);\n+\n+            TenantOperationImpl impl = new PreScenarioTenantOperationImpl();\n+            try {\n+                // Run the initialization operation.\n+                OperationStats stats = impl.getMethod().apply(preRunSample);\n+                LOGGER.info(phoenixUtil.getGSON().toJson(stats));\n+            } catch (Exception e) {\n+                LOGGER.error(\n+                        String.format(\"Failed to initialize tenant. [%s, %s] \",\n+                                tenantView.tenantId,\n+                                tenantView.viewName\n+                        ), e.fillInStackTrace());\n+            }\n+            tenantsLoaded.put(tenantView);\n+        }\n+\n+        switch (input.getOperation().getType()) {\n+        case NO_OP:\n+            return new NoopTenantOperationImpl();\n+        case SELECT:\n+            return new QueryTenantOperationImpl();\n+        case UPSERT:\n+            return new UpsertTenantOperationImpl();\n+        case USER_DEFINED:\n+            return new UserDefinedOperationImpl();\n+        default:\n+            throw new IllegalArgumentException(\"Unknown operation type\");\n+        }\n+    }\n+\n+    class QueryTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+                    final QueryOperation operation = (QueryOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final String scenarioName = input.getScenarioName();\n+                    final String tableName = input.getTableName();\n+                    final Query query = operation.getQuery();\n+                    final long opCounter = 1;\n+\n+                    String opName = String.format(\"%s:%s:%s:%s:%s\", scenarioName, tableName,\n+                            opGroup, tenantGroup, tenantId);\n+                    LOGGER.info(\"\\nExecuting query \" + query.getStatement());\n+                    // TODO add explain plan output to the stats.\n+\n+                    Connection conn = null;\n+                    PreparedStatement statement = null;\n+                    ResultSet rs = null;\n+                    Long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    Long resultRowCount = 0L;\n+                    Long queryElapsedTime = 0L;\n+                    String queryIteration = opName + \":\" + opCounter;\n+                    try {\n+                        conn = phoenixUtil.getConnection(tenantId);\n+                        conn.setAutoCommit(true);\n+                        // TODO dynamic statements\n+                        //final String statementString = query.getDynamicStatement(rulesApplier, scenario);\n+                        statement = conn.prepareStatement(query.getStatement());\n+                        boolean isQuery = statement.execute();\n+                        if (isQuery) {\n+                            rs = statement.getResultSet();\n+                            boolean isSelectCountStatement = query.getStatement().toUpperCase().trim().contains(\"COUNT(\") ? true : false;\n+                            org.apache.hadoop.hbase.util.Pair<Long, Long>\n+                                    r = phoenixUtil.getResults(query, rs, queryIteration, isSelectCountStatement, startTime);\n+                            resultRowCount = r.getFirst();\n+                            queryElapsedTime = r.getSecond();\n+                        } else {\n+                            conn.commit();\n+                        }\n+                    } catch (Exception e) {\n+                        LOGGER.error(\"Exception while executing query iteration \" + queryIteration, e);\n+                    } finally {\n+                        try {\n+                            if (rs != null) rs.close();\n+                            if (statement != null) statement.close();\n+                            if (conn != null) conn.close();\n+\n+                        } catch (Throwable t) {\n+                            // swallow;\n+                        }\n+                    }\n+                    return new OperationStats(input, startTime, 0, resultRowCount, queryElapsedTime);\n+                }\n+            };\n+        }\n+    }\n+\n+    class UpsertTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+\n+                    final int batchSize = loadProfile.getBatchSize();\n+                    final boolean useBatchApi = batchSize != 0;\n+                    final int rowCount = useBatchApi ? batchSize : 1;\n+\n+                    final UpsertOperation operation = (UpsertOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final Upsert upsert = operation.getUpsert();\n+                    final String tableName = input.getTableName();\n+                    final String scenarioName = input.getScenarioName();\n+                    final List<Column> columns = upsert.getColumn();\n+\n+                    final String opName = String.format(\"%s:%s:%s:%s:%s\",\n+                            scenarioName, tableName, opGroup, tenantGroup, tenantId);\n+\n+                    long rowsCreated = 0;\n+                    long startTime = 0, duration, totalDuration;\n+                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+                    try (Connection connection = phoenixUtil.getConnection(tenantId)) {\n+                        connection.setAutoCommit(true);\n+                        startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                        String sql = phoenixUtil.buildSql(columns, tableName);\n+                        PreparedStatement stmt = null;\n+                        try {\n+                            stmt = connection.prepareStatement(sql);\n+                            for (long i = rowCount; i > 0; i--) {\n+                                LOGGER.debug(\"Operation \" + opName + \" executing \");\n+                                stmt = phoenixUtil.buildStatement(rulesApplier, scenario, columns, stmt, simpleDateFormat);\n+                                if (useBatchApi) {\n+                                    stmt.addBatch();\n+                                } else {\n+                                    rowsCreated += stmt.executeUpdate();\n+                                }\n+                            }\n+                        } catch (SQLException e) {\n+                            LOGGER.error(\"Operation \" + opName + \" failed with exception \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 378}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ2NTc1OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMjo0MlrOIIONKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMjo0MlrOIIONKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MjI2NQ==", "bodyText": "Can you create a Jira for this and link that in the TODO so we keep track of it?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545492265", "createdAt": "2020-12-18T00:22:42Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {\n+            Operation noopOperation = new NoopOperation() {\n+                @Override public Noop getNoop() {\n+                    return noOp;\n+                }\n+                @Override public String getId() {\n+                    return noOp.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.NO_OP;\n+                }\n+            };\n+            operationList.add(noopOperation);\n+        }\n+\n+        for (final Upsert upsert : scenario.getUpsert()) {\n+            Operation upsertOp = new UpsertOperation() {\n+                @Override public Upsert getUpsert() {\n+                    return upsert;\n+                }\n+\n+                @Override public String getId() {\n+                    return upsert.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.UPSERT;\n+                }\n+            };\n+            operationList.add(upsertOp);\n+        }\n+        for (final QuerySet querySet : scenario.getQuerySet()) {\n+            for (final Query query : querySet.getQuery()) {\n+                Operation queryOp = new QueryOperation() {\n+                    @Override public Query getQuery() {\n+                        return query;\n+                    }\n+\n+                    @Override public String getId() {\n+                        return query.getId();\n+                    }\n+\n+                    @Override public OperationType getType() {\n+                        return OperationType.SELECT;\n+                    }\n+                };\n+                operationList.add(queryOp);\n+            }\n+        }\n+\n+        for (final UserDefined udf : scenario.getUdf()) {\n+            Operation udfOperation = new UserDefinedOperation() {\n+                @Override public UserDefined getUserFunction() {\n+                    return udf;\n+                }\n+\n+                @Override public String getId() {\n+                    return udf.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.USER_DEFINED;\n+                }\n+            };\n+            operationList.add(udfOperation);\n+        }\n+    }\n+\n+    public PhoenixUtil getPhoenixUtil() {\n+        return phoenixUtil;\n+    }\n+\n+    public DataModel getModel() {\n+        return model;\n+    }\n+\n+    public Scenario getScenario() {\n+        return scenario;\n+    }\n+\n+    public List<Operation> getOperationsForScenario() {\n+        return operationList;\n+    }\n+\n+    public TenantOperationImpl getOperation(final TenantOperationInfo input) {\n+        TenantView tenantView = new TenantView(input.getTenantId(), scenario.getTableName());\n+\n+        // Check if pre run ddls are needed.\n+        if (!tenantsLoaded.mightContain(tenantView)) {\n+            // Initialize the tenant using the pre scenario ddls.\n+            final PreScenarioOperation operation = new PreScenarioOperation() {\n+                @Override public List<Ddl> getPreScenarioDdls() {\n+                    List<Ddl> ddls = scenario.getPreScenarioDdls();\n+                    return ddls == null ? Lists.<Ddl>newArrayList() : ddls;\n+                }\n+\n+                @Override public String getId() {\n+                    return OperationType.PRE_RUN.name();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.PRE_RUN;\n+                }\n+            };\n+            // Initialize with the pre run operation.\n+            TenantOperationInfo preRunSample = new TenantOperationInfo(\n+                    input.getModelName(),\n+                    input.getScenarioName(),\n+                    input.getTableName(),\n+                    input.getTenantGroupId(),\n+                    Operation.OperationType.PRE_RUN.name(),\n+                    input.getTenantId(), operation);\n+\n+            TenantOperationImpl impl = new PreScenarioTenantOperationImpl();\n+            try {\n+                // Run the initialization operation.\n+                OperationStats stats = impl.getMethod().apply(preRunSample);\n+                LOGGER.info(phoenixUtil.getGSON().toJson(stats));\n+            } catch (Exception e) {\n+                LOGGER.error(\n+                        String.format(\"Failed to initialize tenant. [%s, %s] \",\n+                                tenantView.tenantId,\n+                                tenantView.viewName\n+                        ), e.fillInStackTrace());\n+            }\n+            tenantsLoaded.put(tenantView);\n+        }\n+\n+        switch (input.getOperation().getType()) {\n+        case NO_OP:\n+            return new NoopTenantOperationImpl();\n+        case SELECT:\n+            return new QueryTenantOperationImpl();\n+        case UPSERT:\n+            return new UpsertTenantOperationImpl();\n+        case USER_DEFINED:\n+            return new UserDefinedOperationImpl();\n+        default:\n+            throw new IllegalArgumentException(\"Unknown operation type\");\n+        }\n+    }\n+\n+    class QueryTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+                    final QueryOperation operation = (QueryOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final String scenarioName = input.getScenarioName();\n+                    final String tableName = input.getTableName();\n+                    final Query query = operation.getQuery();\n+                    final long opCounter = 1;\n+\n+                    String opName = String.format(\"%s:%s:%s:%s:%s\", scenarioName, tableName,\n+                            opGroup, tenantGroup, tenantId);\n+                    LOGGER.info(\"\\nExecuting query \" + query.getStatement());\n+                    // TODO add explain plan output to the stats.\n+\n+                    Connection conn = null;\n+                    PreparedStatement statement = null;\n+                    ResultSet rs = null;\n+                    Long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    Long resultRowCount = 0L;\n+                    Long queryElapsedTime = 0L;\n+                    String queryIteration = opName + \":\" + opCounter;\n+                    try {\n+                        conn = phoenixUtil.getConnection(tenantId);\n+                        conn.setAutoCommit(true);\n+                        // TODO dynamic statements\n+                        //final String statementString = query.getDynamicStatement(rulesApplier, scenario);\n+                        statement = conn.prepareStatement(query.getStatement());\n+                        boolean isQuery = statement.execute();\n+                        if (isQuery) {\n+                            rs = statement.getResultSet();\n+                            boolean isSelectCountStatement = query.getStatement().toUpperCase().trim().contains(\"COUNT(\") ? true : false;\n+                            org.apache.hadoop.hbase.util.Pair<Long, Long>\n+                                    r = phoenixUtil.getResults(query, rs, queryIteration, isSelectCountStatement, startTime);\n+                            resultRowCount = r.getFirst();\n+                            queryElapsedTime = r.getSecond();\n+                        } else {\n+                            conn.commit();\n+                        }\n+                    } catch (Exception e) {\n+                        LOGGER.error(\"Exception while executing query iteration \" + queryIteration, e);\n+                    } finally {\n+                        try {\n+                            if (rs != null) rs.close();\n+                            if (statement != null) statement.close();\n+                            if (conn != null) conn.close();\n+\n+                        } catch (Throwable t) {\n+                            // swallow;\n+                        }\n+                    }\n+                    return new OperationStats(input, startTime, 0, resultRowCount, queryElapsedTime);\n+                }\n+            };\n+        }\n+    }\n+\n+    class UpsertTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+\n+                    final int batchSize = loadProfile.getBatchSize();\n+                    final boolean useBatchApi = batchSize != 0;\n+                    final int rowCount = useBatchApi ? batchSize : 1;\n+\n+                    final UpsertOperation operation = (UpsertOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final Upsert upsert = operation.getUpsert();\n+                    final String tableName = input.getTableName();\n+                    final String scenarioName = input.getScenarioName();\n+                    final List<Column> columns = upsert.getColumn();\n+\n+                    final String opName = String.format(\"%s:%s:%s:%s:%s\",\n+                            scenarioName, tableName, opGroup, tenantGroup, tenantId);\n+\n+                    long rowsCreated = 0;\n+                    long startTime = 0, duration, totalDuration;\n+                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+                    try (Connection connection = phoenixUtil.getConnection(tenantId)) {\n+                        connection.setAutoCommit(true);\n+                        startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                        String sql = phoenixUtil.buildSql(columns, tableName);\n+                        PreparedStatement stmt = null;\n+                        try {\n+                            stmt = connection.prepareStatement(sql);\n+                            for (long i = rowCount; i > 0; i--) {\n+                                LOGGER.debug(\"Operation \" + opName + \" executing \");\n+                                stmt = phoenixUtil.buildStatement(rulesApplier, scenario, columns, stmt, simpleDateFormat);\n+                                if (useBatchApi) {\n+                                    stmt.addBatch();\n+                                } else {\n+                                    rowsCreated += stmt.executeUpdate();\n+                                }\n+                            }\n+                        } catch (SQLException e) {\n+                            LOGGER.error(\"Operation \" + opName + \" failed with exception \", e);\n+                            throw e;\n+                        } finally {\n+                            // Need to keep the statement open to send the remaining batch of updates\n+                            if (!useBatchApi && stmt != null) {\n+                                stmt.close();\n+                            }\n+                            if (connection != null) {\n+                                if (useBatchApi && stmt != null) {\n+                                    int[] results = stmt.executeBatch();\n+                                    for (int x = 0; x < results.length; x++) {\n+                                        int result = results[x];\n+                                        if (result < 1) {\n+                                            final String msg =\n+                                                    \"Failed to write update in batch (update count=\"\n+                                                            + result + \")\";\n+                                            throw new RuntimeException(msg);\n+                                        }\n+                                        rowsCreated += result;\n+                                    }\n+                                    // Close the statement after our last batch execution.\n+                                    stmt.close();\n+                                }\n+\n+                                try {\n+                                    connection.commit();\n+                                    duration = EnvironmentEdgeManager.currentTimeMillis() - startTime;\n+                                    LOGGER.info(\"Writer ( \" + Thread.currentThread().getName()\n+                                            + \") committed Final Batch. Duration (\" + duration + \") Ms\");\n+                                    connection.close();\n+                                } catch (SQLException e) {\n+                                    // Swallow since we are closing anyway\n+                                    e.printStackTrace();\n+                                }\n+                            }\n+                        }\n+                    } catch (SQLException throwables) {\n+                        throw new RuntimeException(throwables);\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(e);\n+                    }\n+\n+                    totalDuration = EnvironmentEdgeManager.currentTimeMillis() - startTime;\n+                    return new OperationStats(input, startTime, 0, rowsCreated, totalDuration);\n+                }\n+            };\n+        }\n+    }\n+\n+    class PreScenarioTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+                @Override public OperationStats apply(final TenantOperationInfo input) {\n+                    final PreScenarioOperation operation = (PreScenarioOperation) input.getOperation();\n+                    final String tenantId = input.getTenantId();\n+                    final String tableName = scenario.getTableName();\n+\n+                    long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    if (!operation.getPreScenarioDdls().isEmpty()) {\n+                        try (Connection conn = phoenixUtil.getConnection(tenantId)) {\n+                            for (Ddl ddl : scenario.getPreScenarioDdls()) {\n+                                LOGGER.info(\"\\nExecuting DDL:\" + ddl + \" on tenantId:\" + tenantId);\n+                                phoenixUtil.executeStatement(ddl.toString(), conn);\n+                                if (ddl.getStatement().toUpperCase().contains(phoenixUtil.ASYNC_KEYWORD)) {\n+                                    phoenixUtil.waitForAsyncIndexToFinish(ddl.getTableName());\n+                                }\n+                            }\n+                        } catch (SQLException throwables) {\n+                            throw new RuntimeException(throwables);\n+                        } catch (Exception e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    }\n+                    long totalDuration = EnvironmentEdgeManager.currentTimeMillis() - startTime;\n+                    return new OperationStats(input, startTime,0, operation.getPreScenarioDdls().size(), totalDuration);\n+\n+                }\n+            };\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    class NoopTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+                @Override public OperationStats apply(final TenantOperationInfo input) {\n+\n+                    final NoopOperation operation = (NoopOperation) input.getOperation();\n+                    final Noop noop = operation.getNoop();\n+\n+                    long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    // Sleep for the specified time to simulate idle time.\n+                    try {\n+                        TimeUnit.MILLISECONDS.sleep(noop.getIdleTime());\n+                        long duration = EnvironmentEdgeManager.currentTimeMillis() - startTime;\n+                        return new OperationStats(input, startTime, 0, 0, duration);\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                        long duration = EnvironmentEdgeManager.currentTimeMillis() - startTime;\n+                        return new OperationStats(input, startTime,-1, 0, duration);\n+                    }\n+                }\n+            };\n+        }\n+    }\n+\n+    class UserDefinedOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+                @Override public OperationStats apply(final TenantOperationInfo input) {\n+                    // TODO : implement user defined operation invocation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 491}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ2ODA4OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMzo0NVrOIIOOeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMzo0NVrOIIOOeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MjYwMg==", "bodyText": "nit: Interface name probably shouldn't end with Impl", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545492602", "createdAt": "2020-12-18T00:23:45Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.base.Function;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+\n+/**\n+ * An interface that implementers can use to provide a function that takes\n+ * @see {@link TenantOperationInfo} as an input and gives @see {@link OperationStats} as output.\n+ * This @see {@link Function} will invoked by the\n+ * @see {@link TenantOperationWorkHandler#onEvent(TenantOperationWorkload.TenantOperationEvent)}\n+ * when handling the events.\n+ */\n+public interface TenantOperationImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ2OTQxOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyNDoxOFrOIIOPNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyNDoxOFrOIIOPNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5Mjc4OQ==", "bodyText": "TODO", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545492789", "createdAt": "2020-12-18T00:24:18Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationWorkHandler.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.lmax.disruptor.LifecycleAware;\n+import com.lmax.disruptor.WorkHandler;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationWorkload.TenantOperationEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * TODO Documentation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ3NDIyOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/OperationStats.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyNjoxNlrOIIOR4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyNjoxNlrOIIOR4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MzQ3NQ==", "bodyText": "Shouldn't operationStats really be different per Operation? Operation is an interface whereas this is a concrete class. Each operation type might have their own stats, no? Maybe make this an abstract class instead and have each operation type implement their own stats which extend this?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545493475", "createdAt": "2020-12-18T00:26:16Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/OperationStats.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt;\n+\n+import org.apache.phoenix.pherf.result.ResultValue;\n+import org.apache.phoenix.pherf.workload.mt.tenantoperation.TenantOperationInfo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Holds metrics + contextual info on the operation run.\n+ */\n+public class OperationStats {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODQ5ODQwOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDozNjo0NFrOIIOfVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDozNjo0NFrOIIOfVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5NjkxOQ==", "bodyText": "log instead", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545496919", "createdAt": "2020-12-18T00:36:44Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/main/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationFactory.java", "diffHunk": "@@ -0,0 +1,501 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.collect.Lists;\n+import com.google.common.hash.BloomFilter;\n+import com.google.common.hash.Funnel;\n+import com.google.common.hash.PrimitiveSink;\n+import org.apache.phoenix.pherf.configuration.Column;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.Ddl;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Noop;\n+import org.apache.phoenix.pherf.configuration.Query;\n+import org.apache.phoenix.pherf.configuration.QuerySet;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.TenantGroup;\n+import org.apache.phoenix.pherf.configuration.Upsert;\n+import org.apache.phoenix.pherf.configuration.UserDefined;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.rules.DataValue;\n+import org.apache.phoenix.pherf.rules.RulesApplier;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.apache.phoenix.pherf.workload.mt.EventGenerator;\n+import org.apache.phoenix.pherf.workload.mt.NoopOperation;\n+import org.apache.phoenix.pherf.workload.mt.Operation;\n+import org.apache.phoenix.pherf.workload.mt.OperationStats;\n+import org.apache.phoenix.pherf.workload.mt.PreScenarioOperation;\n+import org.apache.phoenix.pherf.workload.mt.QueryOperation;\n+import org.apache.phoenix.pherf.workload.mt.UpsertOperation;\n+import org.apache.phoenix.pherf.workload.mt.UserDefinedOperation;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Connection;\n+import java.sql.Date;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory class for operations.\n+ * The class is responsible for creating new instances of various operation types.\n+ * Operations typically implement @see {@link TenantOperationImpl}\n+ * Operations that need to be executed are generated\n+ * by @see {@link EventGenerator}\n+ */\n+public class TenantOperationFactory {\n+\n+    private static class TenantView {\n+        private final String tenantId;\n+        private final String viewName;\n+\n+        public TenantView(String tenantId, String viewName) {\n+            this.tenantId = tenantId;\n+            this.viewName = viewName;\n+        }\n+\n+        public String getTenantId() {\n+            return tenantId;\n+        }\n+\n+        public String getViewName() {\n+            return viewName;\n+        }\n+    }\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationFactory.class);\n+    private final PhoenixUtil phoenixUtil;\n+    private final DataModel model;\n+    private final Scenario scenario;\n+    private final XMLConfigParser parser;\n+\n+    private final RulesApplier rulesApplier;\n+    private final LoadProfile loadProfile;\n+    private final List<Operation> operationList = Lists.newArrayList();\n+\n+    private final BloomFilter<TenantView> tenantsLoaded;\n+\n+    public TenantOperationFactory(PhoenixUtil phoenixUtil, DataModel model, Scenario scenario) {\n+        this.phoenixUtil = phoenixUtil;\n+        this.model = model;\n+        this.scenario = scenario;\n+        this.parser = null;\n+        this.rulesApplier = new RulesApplier(model);\n+        this.loadProfile = this.scenario.getLoadProfile();\n+        Funnel<TenantView> tenantViewFunnel = new Funnel<TenantView>() {\n+            @Override\n+            public void funnel(TenantView tenantView, PrimitiveSink into) {\n+                into.putString(tenantView.getTenantId(), Charsets.UTF_8)\n+                        .putString(tenantView.getViewName(), Charsets.UTF_8);\n+            }\n+        };\n+\n+        int numTenants = 0;\n+        for (TenantGroup tg : loadProfile.getTenantDistribution()) {\n+            numTenants += tg.getNumTenants();\n+        }\n+\n+        // This holds the info whether the tenant view was created (initialized) or not.\n+        tenantsLoaded = BloomFilter.create(tenantViewFunnel, numTenants, 0.01);\n+\n+        // Read the scenario definition and load the various operations.\n+        for (final Noop noOp : scenario.getNoop()) {\n+            Operation noopOperation = new NoopOperation() {\n+                @Override public Noop getNoop() {\n+                    return noOp;\n+                }\n+                @Override public String getId() {\n+                    return noOp.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.NO_OP;\n+                }\n+            };\n+            operationList.add(noopOperation);\n+        }\n+\n+        for (final Upsert upsert : scenario.getUpsert()) {\n+            Operation upsertOp = new UpsertOperation() {\n+                @Override public Upsert getUpsert() {\n+                    return upsert;\n+                }\n+\n+                @Override public String getId() {\n+                    return upsert.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.UPSERT;\n+                }\n+            };\n+            operationList.add(upsertOp);\n+        }\n+        for (final QuerySet querySet : scenario.getQuerySet()) {\n+            for (final Query query : querySet.getQuery()) {\n+                Operation queryOp = new QueryOperation() {\n+                    @Override public Query getQuery() {\n+                        return query;\n+                    }\n+\n+                    @Override public String getId() {\n+                        return query.getId();\n+                    }\n+\n+                    @Override public OperationType getType() {\n+                        return OperationType.SELECT;\n+                    }\n+                };\n+                operationList.add(queryOp);\n+            }\n+        }\n+\n+        for (final UserDefined udf : scenario.getUdf()) {\n+            Operation udfOperation = new UserDefinedOperation() {\n+                @Override public UserDefined getUserFunction() {\n+                    return udf;\n+                }\n+\n+                @Override public String getId() {\n+                    return udf.getId();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.USER_DEFINED;\n+                }\n+            };\n+            operationList.add(udfOperation);\n+        }\n+    }\n+\n+    public PhoenixUtil getPhoenixUtil() {\n+        return phoenixUtil;\n+    }\n+\n+    public DataModel getModel() {\n+        return model;\n+    }\n+\n+    public Scenario getScenario() {\n+        return scenario;\n+    }\n+\n+    public List<Operation> getOperationsForScenario() {\n+        return operationList;\n+    }\n+\n+    public TenantOperationImpl getOperation(final TenantOperationInfo input) {\n+        TenantView tenantView = new TenantView(input.getTenantId(), scenario.getTableName());\n+\n+        // Check if pre run ddls are needed.\n+        if (!tenantsLoaded.mightContain(tenantView)) {\n+            // Initialize the tenant using the pre scenario ddls.\n+            final PreScenarioOperation operation = new PreScenarioOperation() {\n+                @Override public List<Ddl> getPreScenarioDdls() {\n+                    List<Ddl> ddls = scenario.getPreScenarioDdls();\n+                    return ddls == null ? Lists.<Ddl>newArrayList() : ddls;\n+                }\n+\n+                @Override public String getId() {\n+                    return OperationType.PRE_RUN.name();\n+                }\n+\n+                @Override public OperationType getType() {\n+                    return OperationType.PRE_RUN;\n+                }\n+            };\n+            // Initialize with the pre run operation.\n+            TenantOperationInfo preRunSample = new TenantOperationInfo(\n+                    input.getModelName(),\n+                    input.getScenarioName(),\n+                    input.getTableName(),\n+                    input.getTenantGroupId(),\n+                    Operation.OperationType.PRE_RUN.name(),\n+                    input.getTenantId(), operation);\n+\n+            TenantOperationImpl impl = new PreScenarioTenantOperationImpl();\n+            try {\n+                // Run the initialization operation.\n+                OperationStats stats = impl.getMethod().apply(preRunSample);\n+                LOGGER.info(phoenixUtil.getGSON().toJson(stats));\n+            } catch (Exception e) {\n+                LOGGER.error(\n+                        String.format(\"Failed to initialize tenant. [%s, %s] \",\n+                                tenantView.tenantId,\n+                                tenantView.viewName\n+                        ), e.fillInStackTrace());\n+            }\n+            tenantsLoaded.put(tenantView);\n+        }\n+\n+        switch (input.getOperation().getType()) {\n+        case NO_OP:\n+            return new NoopTenantOperationImpl();\n+        case SELECT:\n+            return new QueryTenantOperationImpl();\n+        case UPSERT:\n+            return new UpsertTenantOperationImpl();\n+        case USER_DEFINED:\n+            return new UserDefinedOperationImpl();\n+        default:\n+            throw new IllegalArgumentException(\"Unknown operation type\");\n+        }\n+    }\n+\n+    class QueryTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+                    final QueryOperation operation = (QueryOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final String scenarioName = input.getScenarioName();\n+                    final String tableName = input.getTableName();\n+                    final Query query = operation.getQuery();\n+                    final long opCounter = 1;\n+\n+                    String opName = String.format(\"%s:%s:%s:%s:%s\", scenarioName, tableName,\n+                            opGroup, tenantGroup, tenantId);\n+                    LOGGER.info(\"\\nExecuting query \" + query.getStatement());\n+                    // TODO add explain plan output to the stats.\n+\n+                    Connection conn = null;\n+                    PreparedStatement statement = null;\n+                    ResultSet rs = null;\n+                    Long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    Long resultRowCount = 0L;\n+                    Long queryElapsedTime = 0L;\n+                    String queryIteration = opName + \":\" + opCounter;\n+                    try {\n+                        conn = phoenixUtil.getConnection(tenantId);\n+                        conn.setAutoCommit(true);\n+                        // TODO dynamic statements\n+                        //final String statementString = query.getDynamicStatement(rulesApplier, scenario);\n+                        statement = conn.prepareStatement(query.getStatement());\n+                        boolean isQuery = statement.execute();\n+                        if (isQuery) {\n+                            rs = statement.getResultSet();\n+                            boolean isSelectCountStatement = query.getStatement().toUpperCase().trim().contains(\"COUNT(\") ? true : false;\n+                            org.apache.hadoop.hbase.util.Pair<Long, Long>\n+                                    r = phoenixUtil.getResults(query, rs, queryIteration, isSelectCountStatement, startTime);\n+                            resultRowCount = r.getFirst();\n+                            queryElapsedTime = r.getSecond();\n+                        } else {\n+                            conn.commit();\n+                        }\n+                    } catch (Exception e) {\n+                        LOGGER.error(\"Exception while executing query iteration \" + queryIteration, e);\n+                    } finally {\n+                        try {\n+                            if (rs != null) rs.close();\n+                            if (statement != null) statement.close();\n+                            if (conn != null) conn.close();\n+\n+                        } catch (Throwable t) {\n+                            // swallow;\n+                        }\n+                    }\n+                    return new OperationStats(input, startTime, 0, resultRowCount, queryElapsedTime);\n+                }\n+            };\n+        }\n+    }\n+\n+    class UpsertTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+\n+                @Nullable @Override public OperationStats apply(@Nullable TenantOperationInfo input) {\n+\n+                    final int batchSize = loadProfile.getBatchSize();\n+                    final boolean useBatchApi = batchSize != 0;\n+                    final int rowCount = useBatchApi ? batchSize : 1;\n+\n+                    final UpsertOperation operation = (UpsertOperation) input.getOperation();\n+                    final String tenantGroup = input.getTenantGroupId();\n+                    final String opGroup = input.getOperationGroupId();\n+                    final String tenantId = input.getTenantId();\n+                    final Upsert upsert = operation.getUpsert();\n+                    final String tableName = input.getTableName();\n+                    final String scenarioName = input.getScenarioName();\n+                    final List<Column> columns = upsert.getColumn();\n+\n+                    final String opName = String.format(\"%s:%s:%s:%s:%s\",\n+                            scenarioName, tableName, opGroup, tenantGroup, tenantId);\n+\n+                    long rowsCreated = 0;\n+                    long startTime = 0, duration, totalDuration;\n+                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+                    try (Connection connection = phoenixUtil.getConnection(tenantId)) {\n+                        connection.setAutoCommit(true);\n+                        startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                        String sql = phoenixUtil.buildSql(columns, tableName);\n+                        PreparedStatement stmt = null;\n+                        try {\n+                            stmt = connection.prepareStatement(sql);\n+                            for (long i = rowCount; i > 0; i--) {\n+                                LOGGER.debug(\"Operation \" + opName + \" executing \");\n+                                stmt = phoenixUtil.buildStatement(rulesApplier, scenario, columns, stmt, simpleDateFormat);\n+                                if (useBatchApi) {\n+                                    stmt.addBatch();\n+                                } else {\n+                                    rowsCreated += stmt.executeUpdate();\n+                                }\n+                            }\n+                        } catch (SQLException e) {\n+                            LOGGER.error(\"Operation \" + opName + \" failed with exception \", e);\n+                            throw e;\n+                        } finally {\n+                            // Need to keep the statement open to send the remaining batch of updates\n+                            if (!useBatchApi && stmt != null) {\n+                                stmt.close();\n+                            }\n+                            if (connection != null) {\n+                                if (useBatchApi && stmt != null) {\n+                                    int[] results = stmt.executeBatch();\n+                                    for (int x = 0; x < results.length; x++) {\n+                                        int result = results[x];\n+                                        if (result < 1) {\n+                                            final String msg =\n+                                                    \"Failed to write update in batch (update count=\"\n+                                                            + result + \")\";\n+                                            throw new RuntimeException(msg);\n+                                        }\n+                                        rowsCreated += result;\n+                                    }\n+                                    // Close the statement after our last batch execution.\n+                                    stmt.close();\n+                                }\n+\n+                                try {\n+                                    connection.commit();\n+                                    duration = EnvironmentEdgeManager.currentTimeMillis() - startTime;\n+                                    LOGGER.info(\"Writer ( \" + Thread.currentThread().getName()\n+                                            + \") committed Final Batch. Duration (\" + duration + \") Ms\");\n+                                    connection.close();\n+                                } catch (SQLException e) {\n+                                    // Swallow since we are closing anyway\n+                                    e.printStackTrace();\n+                                }\n+                            }\n+                        }\n+                    } catch (SQLException throwables) {\n+                        throw new RuntimeException(throwables);\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(e);\n+                    }\n+\n+                    totalDuration = EnvironmentEdgeManager.currentTimeMillis() - startTime;\n+                    return new OperationStats(input, startTime, 0, rowsCreated, totalDuration);\n+                }\n+            };\n+        }\n+    }\n+\n+    class PreScenarioTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+                @Override public OperationStats apply(final TenantOperationInfo input) {\n+                    final PreScenarioOperation operation = (PreScenarioOperation) input.getOperation();\n+                    final String tenantId = input.getTenantId();\n+                    final String tableName = scenario.getTableName();\n+\n+                    long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    if (!operation.getPreScenarioDdls().isEmpty()) {\n+                        try (Connection conn = phoenixUtil.getConnection(tenantId)) {\n+                            for (Ddl ddl : scenario.getPreScenarioDdls()) {\n+                                LOGGER.info(\"\\nExecuting DDL:\" + ddl + \" on tenantId:\" + tenantId);\n+                                phoenixUtil.executeStatement(ddl.toString(), conn);\n+                                if (ddl.getStatement().toUpperCase().contains(phoenixUtil.ASYNC_KEYWORD)) {\n+                                    phoenixUtil.waitForAsyncIndexToFinish(ddl.getTableName());\n+                                }\n+                            }\n+                        } catch (SQLException throwables) {\n+                            throw new RuntimeException(throwables);\n+                        } catch (Exception e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    }\n+                    long totalDuration = EnvironmentEdgeManager.currentTimeMillis() - startTime;\n+                    return new OperationStats(input, startTime,0, operation.getPreScenarioDdls().size(), totalDuration);\n+\n+                }\n+            };\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    class NoopTenantOperationImpl implements TenantOperationImpl {\n+\n+        @Override public Function<TenantOperationInfo, OperationStats> getMethod() {\n+            return new Function<TenantOperationInfo, OperationStats>() {\n+                @Override public OperationStats apply(final TenantOperationInfo input) {\n+\n+                    final NoopOperation operation = (NoopOperation) input.getOperation();\n+                    final Noop noop = operation.getNoop();\n+\n+                    long startTime = EnvironmentEdgeManager.currentTimeMillis();\n+                    // Sleep for the specified time to simulate idle time.\n+                    try {\n+                        TimeUnit.MILLISECONDS.sleep(noop.getIdleTime());\n+                        long duration = EnvironmentEdgeManager.currentTimeMillis() - startTime;\n+                        return new OperationStats(input, startTime, 0, 0, duration);\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 477}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODUwMjYzOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/test/java/org/apache/phoenix/pherf/ConfigurationParserTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDozODoyNVrOIIOhnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDozODoyNVrOIIOhnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5NzUwMw==", "bodyText": "Nit: Use assertEquals() everywhere", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545497503", "createdAt": "2020-12-18T00:38:25Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/test/java/org/apache/phoenix/pherf/ConfigurationParserTest.java", "diffHunk": "@@ -122,22 +125,61 @@ public void testConfigReader() {\n         }\n     }\n \n-    private URL getResourceUrl() {\n-        URL resourceUrl = getClass().getResource(\"/scenario/test_scenario.xml\");\n+    @Test\n+    public void testWorkloadWithLoadProfile() throws Exception {\n+        String testResourceName = \"/scenario/test_scenario_with_load_profile.xml\";\n+        Set<String> scenarioNames = Sets.newHashSet(\"scenario_11\", \"scenario_12\");\n+        List<Scenario> scenarioList = getScenarios(testResourceName);\n+        Scenario target = null;\n+        for (Scenario scenario : scenarioList) {\n+            if (scenarioNames.contains(scenario.getName())) {\n+                target = scenario;\n+            }\n+            assertNotNull(\"Could not find scenario: \" + scenario.getName(), target);\n+        }\n+\n+        Scenario testScenarioWithLoadProfile = scenarioList.get(0);\n+        LoadProfile loadProfile = testScenarioWithLoadProfile.getLoadProfile();\n+        assertTrue(\"batch size not as expected: \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODUwNzAyOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/test/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationEventGeneratorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDo0MDoyMVrOIIOkDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDo0MDoyMVrOIIOkDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5ODEyNw==", "bodyText": "Are we handling this null value in the caller?", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545498127", "createdAt": "2020-12-18T00:40:21Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/test/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationEventGeneratorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import org.apache.phoenix.pherf.XMLConfigParserTest;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.bind.UnmarshalException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class TenantOperationEventGeneratorTest {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationEventGeneratorTest.class);\n+    private enum TestOperationGroup {\n+        op1, op2, op3, op4, op5\n+    }\n+\n+    private enum TestTenantGroup {\n+        tg1, tg2, tg3\n+    }\n+\n+    public DataModel readTestDataModel(String resourceName) throws Exception {\n+        URL scenarioUrl = XMLConfigParserTest.class.getResource(resourceName);\n+        assertNotNull(scenarioUrl);\n+        Path p = Paths.get(scenarioUrl.toURI());\n+        try {\n+            return XMLConfigParser.readDataModel(p);\n+        } catch (UnmarshalException e) {\n+            // If we don't parse the DTD, the variable 'name' won't be defined in the XML\n+            LOGGER.warn(\"Caught expected exception\", e);\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODUwNzgwOnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/test/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationEventGeneratorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDo0MDo0NVrOIIOkdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDo0MDo0NVrOIIOkdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5ODIyOQ==", "bodyText": "nit: assertEquals throughout", "url": "https://github.com/apache/phoenix/pull/878#discussion_r545498229", "createdAt": "2020-12-18T00:40:45Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-pherf/src/test/java/org/apache/phoenix/pherf/workload/mt/tenantoperation/TenantOperationEventGeneratorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.phoenix.pherf.workload.mt.tenantoperation;\n+\n+import org.apache.phoenix.pherf.XMLConfigParserTest;\n+import org.apache.phoenix.pherf.configuration.DataModel;\n+import org.apache.phoenix.pherf.configuration.LoadProfile;\n+import org.apache.phoenix.pherf.configuration.Scenario;\n+import org.apache.phoenix.pherf.configuration.XMLConfigParser;\n+import org.apache.phoenix.pherf.util.PhoenixUtil;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.bind.UnmarshalException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class TenantOperationEventGeneratorTest {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TenantOperationEventGeneratorTest.class);\n+    private enum TestOperationGroup {\n+        op1, op2, op3, op4, op5\n+    }\n+\n+    private enum TestTenantGroup {\n+        tg1, tg2, tg3\n+    }\n+\n+    public DataModel readTestDataModel(String resourceName) throws Exception {\n+        URL scenarioUrl = XMLConfigParserTest.class.getResource(resourceName);\n+        assertNotNull(scenarioUrl);\n+        Path p = Paths.get(scenarioUrl.toURI());\n+        try {\n+            return XMLConfigParser.readDataModel(p);\n+        } catch (UnmarshalException e) {\n+            // If we don't parse the DTD, the variable 'name' won't be defined in the XML\n+            LOGGER.warn(\"Caught expected exception\", e);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Case 1 : where some operations have zero weight\n+     * Case 2 : where some tenant groups have zero weight\n+     * Case 3 : where no operations and tenant groups have zero weight\n+     * Case 4 : where some combinations of operation and tenant groups have zero weight\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testVariousEventGeneration() throws Exception {\n+        int numRuns = 10;\n+        int numOperations = 100000;\n+        int allowedVariance = 1000;\n+        int normalizedOperations = (numOperations * numRuns) / 10000;\n+        int numTenantGroups = 3;\n+        int numOpGroups = 5;\n+\n+        PhoenixUtil pUtil = PhoenixUtil.create();\n+        DataModel model = readTestDataModel(\"/scenario/test_evt_gen1.xml\");\n+        for (Scenario scenario : model.getScenarios()) {\n+            LOGGER.debug(String.format(\"Testing %s\", scenario.getName()));\n+            LoadProfile loadProfile = scenario.getLoadProfile();\n+            assertTrue(\"tenant group size is not as expected: \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ede0f62202e57bbbcd900cc09faa6db95d551393"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgwMzA5ODA2OnYy", "diffSide": "RIGHT", "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/PherfMainIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQyMzo0ODowNFrOI-BoFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNVQyMzo0ODowNFrOI-BoFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTkwOTI3MA==", "bodyText": "nit: can you remove this unused import from the next PR. Don't need to fix it now", "url": "https://github.com/apache/phoenix/pull/878#discussion_r601909270", "createdAt": "2021-03-25T23:48:04Z", "author": {"login": "yanxinyi"}, "path": "phoenix-pherf/src/it/java/org/apache/phoenix/pherf/PherfMainIT.java", "diffHunk": "@@ -23,6 +23,7 @@\n import org.apache.phoenix.pherf.result.ResultValue;\n import org.apache.phoenix.pherf.result.file.ResultFileDetails;\n import org.apache.phoenix.pherf.result.impl.CSVFileResultHandler;\n+import org.junit.Ignore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bdcacd4320a18f4d1b83c4378d238c5dfe7a6fd"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4597, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}