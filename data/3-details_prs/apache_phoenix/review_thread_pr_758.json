{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNzA0ODg2", "number": 758, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozMzo1MlrODymu4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjoxMzoxMVrODz8i0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzg5OTg2OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozMzo1MlrOGGwABA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzozMzo1MlrOGGwABA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMTA3Ng==", "bodyText": "Since the scan we use for this scanner is not a raw scan, we should not get any delete cell. We should trow an exception if the type of the cell is not put.", "url": "https://github.com/apache/phoenix/pull/758#discussion_r409731076", "createdAt": "2020-04-16T17:33:52Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;\n+    private boolean verify = false;\n+    private Map<byte[], Put> indexKeyToDataPutMap;\n+    private Map<byte[], Put> dataKeyToDataPutMap;\n+    private TaskRunner pool;\n+    private TaskBatch<Boolean> tasks;\n+    private String exceptionMessage;\n+    private HTableFactory hTableFactory;\n+    private int indexTableTTL;\n+    private IndexToolVerificationResult verificationResult;\n+\n+    private IndexVerificationResultRepository verificationResultRepository;\n+\n+    IndexerRegionScanner (final RegionScanner innerScanner, final Region region, final Scan scan,\n+            final RegionCoprocessorEnvironment env) throws IOException {\n+        super(innerScanner);\n+        final Configuration config = env.getConfiguration();\n+        if (scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_PAGING) != null) {\n+            pageSizeInRows = config.getLong(INDEX_REBUILD_PAGE_SIZE_IN_ROWS,\n+                    QueryServicesOptions.DEFAULT_INDEX_REBUILD_PAGE_SIZE_IN_ROWS);\n+        }\n+        maxBatchSize = config.getInt(MUTATE_BATCH_SIZE_ATTRIB, QueryServicesOptions.DEFAULT_MUTATE_BATCH_SIZE);\n+        mutations = new UngroupedAggregateRegionObserver.MutationList(maxBatchSize);\n+        indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_PROTO_MD);\n+        if (indexMetaData == null) {\n+            indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_MD);\n+        }\n+        List<IndexMaintainer> maintainers = IndexMaintainer.deserialize(indexMetaData, true);\n+        indexMaintainer = maintainers.get(0);\n+        this.scan = scan;\n+        this.innerScanner = innerScanner;\n+        this.region = region;\n+        byte[] valueBytes = scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_VERIFY_TYPE);\n+        if (valueBytes != null) {\n+            verificationResult = new IndexToolVerificationResult(scan);\n+            verifyType = IndexTool.IndexVerifyType.fromValue(valueBytes);\n+            if (verifyType != IndexTool.IndexVerifyType.NONE) {\n+                verify = true;\n+                // Create the following objects only for rebuilds by IndexTool\n+                hTableFactory = ServerUtil.getDelegateHTableFactory(env, ServerUtil.ConnectionType.INDEX_WRITER_CONNECTION);\n+                indexHTable = hTableFactory.getTable(new ImmutableBytesPtr(indexMaintainer.getIndexTableName()));\n+                indexTableTTL = indexHTable.getTableDescriptor().getColumnFamilies()[0].getTimeToLive();\n+                verificationResultRepository =\n+                        new IndexVerificationResultRepository(indexMaintainer.getIndexTableName(), hTableFactory);\n+                indexKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                pool = new WaitForCompletionTaskRunner(ThreadPoolManager.getExecutor(\n+                        new ThreadPoolBuilder(\"IndexVerify\",\n+                                env.getConfiguration()).setMaxThread(NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY,\n+                                DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS).setCoreTimeout(\n+                                INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY), env));\n+                rowCountPerTask = config.getInt(INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY,\n+                        DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public HRegionInfo getRegionInfo() {\n+        return region.getRegionInfo();\n+    }\n+\n+    @Override\n+    public boolean isFilterDone() { return false; }\n+\n+    @Override\n+    public void close() throws IOException {\n+        innerScanner.close();\n+        if (verify) {\n+            try {\n+                verificationResultRepository.logToIndexToolResultTable(verificationResult,\n+                        verifyType, region.getRegionInfo().getRegionName());\n+            } finally {\n+                this.pool.stop(\"IndexerRegionScanner is closing\");\n+                hTableFactory.shutdown();\n+                indexHTable.close();\n+                verificationResultRepository.close();\n+            }\n+        }\n+    }\n+\n+    private class SimpleValueGetter implements ValueGetter {\n+        final ImmutableBytesWritable valuePtr = new ImmutableBytesWritable();\n+        final Put put;\n+        SimpleValueGetter (final Put put) {\n+            this.put = put;\n+        }\n+        @Override\n+        public ImmutableBytesWritable getLatestValue(ColumnReference ref, long ts) throws IOException {\n+            List<Cell> cellList = put.get(ref.getFamily(), ref.getQualifier());\n+            if (cellList == null || cellList.isEmpty()) {\n+                return null;\n+            }\n+            Cell cell = cellList.get(0);\n+            valuePtr.set(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n+            return valuePtr;\n+        }\n+\n+        @Override\n+        public byte[] getRowKey() {\n+            return put.getRow();\n+        }\n+\n+    }\n+\n+    private byte[] getIndexRowKey(final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        byte[] builtIndexRowKey = indexMaintainer.buildRowKey(valueGetter, new ImmutableBytesWritable(dataRow.getRow()),\n+                null, null, HConstants.LATEST_TIMESTAMP);\n+        return builtIndexRowKey;\n+    }\n+\n+    private long getMaxTimestamp(Put put) {\n+        long ts = 0;\n+        for (List<Cell> cells : put.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell cell : cells) {\n+                if (ts < cell.getTimestamp()) {\n+                    ts = cell.getTimestamp();\n+                }\n+            }\n+        }\n+        return ts;\n+    }\n+\n+    private boolean verifySingleIndexRow(Result indexRow, final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        long ts = getMaxTimestamp(dataRow);\n+        Put indexPut = indexMaintainer.buildUpdateMutation(GenericKeyValueBuilder.INSTANCE,\n+                valueGetter, new ImmutableBytesWritable(dataRow.getRow()), ts, null, null);\n+\n+        if (indexPut == null) {\n+            // This means the data row does not have any covered column values\n+            indexPut = new Put(indexRow.getRow());\n+        }\n+        // Add the empty column\n+        indexPut.addColumn(indexMaintainer.getEmptyKeyValueFamily().copyBytesIfNecessary(),\n+                indexMaintainer.getEmptyKeyValueQualifier(), ts, EMPTY_COLUMN_VALUE_BYTES);\n+\n+        int cellCount = 0;\n+        long currentTime = EnvironmentEdgeManager.currentTime();\n+        for (List<Cell> cells : indexPut.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell expectedCell : cells) {\n+                byte[] family = CellUtil.cloneFamily(expectedCell);\n+                byte[] qualifier = CellUtil.cloneQualifier(expectedCell);\n+                Cell actualCell = indexRow.getColumnLatestCell(family, qualifier);\n+                if (actualCell == null) {\n+                    // Check if cell expired as per the current server's time and data table ttl\n+                    // Index table should have the same ttl as the data table, hence we might not\n+                    // get a value back from index if it has already expired between our rebuild and\n+                    // verify\n+                    if (isTimestampBeforeTTL(currentTime, expectedCell.getTimestamp())) {\n+                        continue;\n+                    }\n+                    return false;\n+                }\n+                if (actualCell.getTimestamp() < ts) {\n+                    // Skip older cells since a Phoenix index row is composed of cells with the same timestamp\n+                    continue;\n+                }\n+                // Check all columns\n+                if (!CellUtil.matchingValue(actualCell, expectedCell)) {\n+                    return false;\n+                } else if (actualCell.getTimestamp() != ts) {\n+                    return false;\n+                }\n+                cellCount++;\n+            }\n+        }\n+        if (cellCount != indexRow.rawCells().length) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private void verifyIndexRows(List<KeyRange> keys, Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        int expectedRowCount = keys.size();\n+        ScanRanges scanRanges = ScanRanges.createPointLookup(keys);\n+        Scan indexScan = new Scan();\n+        indexScan.setTimeRange(scan.getTimeRange().getMin(), scan.getTimeRange().getMax());\n+        scanRanges.initializeScan(indexScan);\n+        SkipScanFilter skipScanFilter = scanRanges.getSkipScanFilter();\n+        indexScan.setFilter(skipScanFilter);\n+        int rowCount = 0;\n+        try (ResultScanner resultScanner = indexHTable.getScanner(indexScan)) {\n+            for (Result result = resultScanner.next(); (result != null); result = resultScanner.next()) {\n+                Put dataPut = indexKeyToDataPutMap.get(result.getRow());\n+                if (dataPut == null) {\n+                    // This should never happen\n+                    exceptionMessage = \"Index verify failed - Missing data row - \" + indexHTable.getName();\n+                    throw new IOException(exceptionMessage);\n+                }\n+                if (verifySingleIndexRow(result, dataPut)) {\n+                    verificationPhaseResult.setValidIndexRowCount(verificationPhaseResult.getValidIndexRowCount()+1);                    perTaskDataKeyToDataPutMap.remove(dataPut.getRow());\n+                } else {\n+                    verificationPhaseResult.setInvalidIndexRowCount(verificationPhaseResult.getInvalidIndexRowCount()+1);\n+                }\n+                rowCount++;\n+            }\n+        } catch (Throwable t) {\n+            ServerUtil.throwIOException(indexHTable.getName().toString(), t);\n+        }\n+        // Check if any expected rows from index(which we didn't get) are already expired due to TTL\n+        if (!perTaskDataKeyToDataPutMap.isEmpty()) {\n+            Iterator<Entry<byte[], Put>> itr = perTaskDataKeyToDataPutMap.entrySet().iterator();\n+            long currentTime = EnvironmentEdgeManager.currentTime();\n+            while(itr.hasNext()) {\n+                Entry<byte[], Put> entry = itr.next();\n+                long ts = getMaxTimestamp(entry.getValue());\n+                if (isTimestampBeforeTTL(currentTime, ts)) {\n+                    itr.remove();\n+                    rowCount++;\n+                    verificationPhaseResult.setExpiredIndexRowCount(verificationPhaseResult.getExpiredIndexRowCount()+1);                }\n+            }\n+        }\n+        if (rowCount != expectedRowCount) {\n+            verificationPhaseResult.setMissingIndexRowCount(verificationPhaseResult.getMissingIndexRowCount()+expectedRowCount - rowCount);\n+        }\n+    }\n+\n+    private boolean isTimestampBeforeTTL(long currentTime, long tsToCheck) {\n+        if (indexTableTTL == HConstants.FOREVER) {\n+            return false;\n+        }\n+        return tsToCheck < (currentTime - (long) indexTableTTL * 1000);\n+    }\n+\n+    private void addVerifyTask(final List<KeyRange> keys, final Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            final IndexToolVerificationResult.PhaseResult verificationPhaseResult) {\n+        tasks.add(new Task<Boolean>() {\n+            @Override\n+            public Boolean call() throws Exception {\n+                try {\n+                    if (Thread.currentThread().isInterrupted()) {\n+                        exceptionMessage = \"Pool closed, not attempting to verify index rows! \" + indexHTable.getName();\n+                        throw new IOException(exceptionMessage);\n+                    }\n+                    verifyIndexRows(keys, perTaskDataKeyToDataPutMap, verificationPhaseResult);\n+                } catch (Exception e) {\n+                    throw e;\n+                }\n+                return Boolean.TRUE;\n+            }\n+        });\n+    }\n+\n+    private void parallelizeIndexVerify(IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        for (Mutation mutation : mutations) {\n+            indexKeyToDataPutMap.put(getIndexRowKey((Put)mutation), (Put)mutation);\n+        }\n+        int taskCount = (indexKeyToDataPutMap.size() + rowCountPerTask - 1) / rowCountPerTask;\n+        tasks = new TaskBatch<>(taskCount);\n+        List<Map<byte[], Put>> dataPutMapList = new ArrayList<>(taskCount);\n+        List<IndexToolVerificationResult.PhaseResult> verificationPhaseResultList = new ArrayList<>(taskCount);\n+        List<KeyRange> keys = new ArrayList<>(rowCountPerTask);\n+        Map<byte[], Put> perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+        dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+        IndexToolVerificationResult.PhaseResult perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+        verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+        for (Map.Entry<byte[], Put> entry: indexKeyToDataPutMap.entrySet()) {\n+            keys.add(PVarbinary.INSTANCE.getKeyRange(entry.getKey()));\n+            perTaskDataKeyToDataPutMap.put(entry.getValue().getRow(), entry.getValue());\n+            if (keys.size() == rowCountPerTask) {\n+                addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+                keys = new ArrayList<>(rowCountPerTask);\n+                perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+                perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+                verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+            }\n+        }\n+        if (keys.size() > 0) {\n+            addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+        }\n+        List<Boolean> taskResultList = null;\n+        try {\n+            LOGGER.debug(\"Waiting on index verify tasks to complete...\");\n+            taskResultList = this.pool.submitUninterruptible(tasks);\n+        } catch (ExecutionException e) {\n+            throw new RuntimeException(\"Should not fail on the results while using a WaitForCompletionTaskRunner\", e);\n+        } catch (EarlyExitFailure e) {\n+            throw new RuntimeException(\"Stopped while waiting for batch, quitting!\", e);\n+        }\n+        for (Boolean result : taskResultList) {\n+            if (result == null) {\n+                // there was a failure\n+                throw new IOException(exceptionMessage);\n+            }\n+        }\n+        if (verifyType == IndexTool.IndexVerifyType.BEFORE || verifyType == IndexTool.IndexVerifyType.BOTH) {\n+            for (Map<byte[], Put> dataPutMap : dataPutMapList) {\n+                dataKeyToDataPutMap.putAll(dataPutMap);\n+            }\n+        }\n+        for (IndexToolVerificationResult.PhaseResult result : verificationPhaseResultList) {\n+            verificationPhaseResult.add(result);\n+        }\n+    }\n+\n+    private void verifyIndex() throws IOException {\n+        IndexToolVerificationResult nextVerificationResult = new IndexToolVerificationResult(scan);\n+        nextVerificationResult.setScannedDataRowCount(mutations.size());\n+        IndexToolVerificationResult.PhaseResult verificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+        // For these options we start with verifying index rows\n+        parallelizeIndexVerify(verificationPhaseResult);\n+        nextVerificationResult.getBefore().add(verificationPhaseResult);\n+        indexKeyToDataPutMap.clear();\n+        verificationResult.add(nextVerificationResult);\n+    }\n+\n+    @Override\n+    public boolean next(List<Cell> results) throws IOException {\n+        Cell lastCell = null;\n+        int rowCount = 0;\n+        region.startRegionOperation();\n+        try {\n+            synchronized (innerScanner) {\n+                do {\n+                    List<Cell> row = new ArrayList<>();\n+                    hasMore = innerScanner.nextRaw(row);\n+                    if (!row.isEmpty()) {\n+                        lastCell = row.get(0);\n+                        Put put = null;\n+                        Delete del = null;\n+                        for (Cell cell : row) {\n+                            if (KeyValue.Type.codeToType(cell.getTypeByte()) == KeyValue.Type.Put) {\n+                                if (put == null) {\n+                                    put = new Put(CellUtil.cloneRow(cell));\n+                                    mutations.add(put);\n+                                }\n+                                put.add(cell);\n+                            } else {\n+                                if (del == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 446}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzkzMDIwOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0MjoxOFrOGGwTog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzoyNDo0M1rOGJcnLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjA5OA==", "bodyText": "There is no need to have a mutation list. It should be removed. Instead of mutations.add(put), move the line\nindexKeyToDataPutMap.put(getIndexRowKey((Put)mutation), (Put)mutation) from parallelizeIndexVerify here.", "url": "https://github.com/apache/phoenix/pull/758#discussion_r409736098", "createdAt": "2020-04-16T17:42:18Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;\n+    private boolean verify = false;\n+    private Map<byte[], Put> indexKeyToDataPutMap;\n+    private Map<byte[], Put> dataKeyToDataPutMap;\n+    private TaskRunner pool;\n+    private TaskBatch<Boolean> tasks;\n+    private String exceptionMessage;\n+    private HTableFactory hTableFactory;\n+    private int indexTableTTL;\n+    private IndexToolVerificationResult verificationResult;\n+\n+    private IndexVerificationResultRepository verificationResultRepository;\n+\n+    IndexerRegionScanner (final RegionScanner innerScanner, final Region region, final Scan scan,\n+            final RegionCoprocessorEnvironment env) throws IOException {\n+        super(innerScanner);\n+        final Configuration config = env.getConfiguration();\n+        if (scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_PAGING) != null) {\n+            pageSizeInRows = config.getLong(INDEX_REBUILD_PAGE_SIZE_IN_ROWS,\n+                    QueryServicesOptions.DEFAULT_INDEX_REBUILD_PAGE_SIZE_IN_ROWS);\n+        }\n+        maxBatchSize = config.getInt(MUTATE_BATCH_SIZE_ATTRIB, QueryServicesOptions.DEFAULT_MUTATE_BATCH_SIZE);\n+        mutations = new UngroupedAggregateRegionObserver.MutationList(maxBatchSize);\n+        indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_PROTO_MD);\n+        if (indexMetaData == null) {\n+            indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_MD);\n+        }\n+        List<IndexMaintainer> maintainers = IndexMaintainer.deserialize(indexMetaData, true);\n+        indexMaintainer = maintainers.get(0);\n+        this.scan = scan;\n+        this.innerScanner = innerScanner;\n+        this.region = region;\n+        byte[] valueBytes = scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_VERIFY_TYPE);\n+        if (valueBytes != null) {\n+            verificationResult = new IndexToolVerificationResult(scan);\n+            verifyType = IndexTool.IndexVerifyType.fromValue(valueBytes);\n+            if (verifyType != IndexTool.IndexVerifyType.NONE) {\n+                verify = true;\n+                // Create the following objects only for rebuilds by IndexTool\n+                hTableFactory = ServerUtil.getDelegateHTableFactory(env, ServerUtil.ConnectionType.INDEX_WRITER_CONNECTION);\n+                indexHTable = hTableFactory.getTable(new ImmutableBytesPtr(indexMaintainer.getIndexTableName()));\n+                indexTableTTL = indexHTable.getTableDescriptor().getColumnFamilies()[0].getTimeToLive();\n+                verificationResultRepository =\n+                        new IndexVerificationResultRepository(indexMaintainer.getIndexTableName(), hTableFactory);\n+                indexKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                pool = new WaitForCompletionTaskRunner(ThreadPoolManager.getExecutor(\n+                        new ThreadPoolBuilder(\"IndexVerify\",\n+                                env.getConfiguration()).setMaxThread(NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY,\n+                                DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS).setCoreTimeout(\n+                                INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY), env));\n+                rowCountPerTask = config.getInt(INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY,\n+                        DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public HRegionInfo getRegionInfo() {\n+        return region.getRegionInfo();\n+    }\n+\n+    @Override\n+    public boolean isFilterDone() { return false; }\n+\n+    @Override\n+    public void close() throws IOException {\n+        innerScanner.close();\n+        if (verify) {\n+            try {\n+                verificationResultRepository.logToIndexToolResultTable(verificationResult,\n+                        verifyType, region.getRegionInfo().getRegionName());\n+            } finally {\n+                this.pool.stop(\"IndexerRegionScanner is closing\");\n+                hTableFactory.shutdown();\n+                indexHTable.close();\n+                verificationResultRepository.close();\n+            }\n+        }\n+    }\n+\n+    private class SimpleValueGetter implements ValueGetter {\n+        final ImmutableBytesWritable valuePtr = new ImmutableBytesWritable();\n+        final Put put;\n+        SimpleValueGetter (final Put put) {\n+            this.put = put;\n+        }\n+        @Override\n+        public ImmutableBytesWritable getLatestValue(ColumnReference ref, long ts) throws IOException {\n+            List<Cell> cellList = put.get(ref.getFamily(), ref.getQualifier());\n+            if (cellList == null || cellList.isEmpty()) {\n+                return null;\n+            }\n+            Cell cell = cellList.get(0);\n+            valuePtr.set(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n+            return valuePtr;\n+        }\n+\n+        @Override\n+        public byte[] getRowKey() {\n+            return put.getRow();\n+        }\n+\n+    }\n+\n+    private byte[] getIndexRowKey(final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        byte[] builtIndexRowKey = indexMaintainer.buildRowKey(valueGetter, new ImmutableBytesWritable(dataRow.getRow()),\n+                null, null, HConstants.LATEST_TIMESTAMP);\n+        return builtIndexRowKey;\n+    }\n+\n+    private long getMaxTimestamp(Put put) {\n+        long ts = 0;\n+        for (List<Cell> cells : put.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell cell : cells) {\n+                if (ts < cell.getTimestamp()) {\n+                    ts = cell.getTimestamp();\n+                }\n+            }\n+        }\n+        return ts;\n+    }\n+\n+    private boolean verifySingleIndexRow(Result indexRow, final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        long ts = getMaxTimestamp(dataRow);\n+        Put indexPut = indexMaintainer.buildUpdateMutation(GenericKeyValueBuilder.INSTANCE,\n+                valueGetter, new ImmutableBytesWritable(dataRow.getRow()), ts, null, null);\n+\n+        if (indexPut == null) {\n+            // This means the data row does not have any covered column values\n+            indexPut = new Put(indexRow.getRow());\n+        }\n+        // Add the empty column\n+        indexPut.addColumn(indexMaintainer.getEmptyKeyValueFamily().copyBytesIfNecessary(),\n+                indexMaintainer.getEmptyKeyValueQualifier(), ts, EMPTY_COLUMN_VALUE_BYTES);\n+\n+        int cellCount = 0;\n+        long currentTime = EnvironmentEdgeManager.currentTime();\n+        for (List<Cell> cells : indexPut.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell expectedCell : cells) {\n+                byte[] family = CellUtil.cloneFamily(expectedCell);\n+                byte[] qualifier = CellUtil.cloneQualifier(expectedCell);\n+                Cell actualCell = indexRow.getColumnLatestCell(family, qualifier);\n+                if (actualCell == null) {\n+                    // Check if cell expired as per the current server's time and data table ttl\n+                    // Index table should have the same ttl as the data table, hence we might not\n+                    // get a value back from index if it has already expired between our rebuild and\n+                    // verify\n+                    if (isTimestampBeforeTTL(currentTime, expectedCell.getTimestamp())) {\n+                        continue;\n+                    }\n+                    return false;\n+                }\n+                if (actualCell.getTimestamp() < ts) {\n+                    // Skip older cells since a Phoenix index row is composed of cells with the same timestamp\n+                    continue;\n+                }\n+                // Check all columns\n+                if (!CellUtil.matchingValue(actualCell, expectedCell)) {\n+                    return false;\n+                } else if (actualCell.getTimestamp() != ts) {\n+                    return false;\n+                }\n+                cellCount++;\n+            }\n+        }\n+        if (cellCount != indexRow.rawCells().length) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private void verifyIndexRows(List<KeyRange> keys, Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        int expectedRowCount = keys.size();\n+        ScanRanges scanRanges = ScanRanges.createPointLookup(keys);\n+        Scan indexScan = new Scan();\n+        indexScan.setTimeRange(scan.getTimeRange().getMin(), scan.getTimeRange().getMax());\n+        scanRanges.initializeScan(indexScan);\n+        SkipScanFilter skipScanFilter = scanRanges.getSkipScanFilter();\n+        indexScan.setFilter(skipScanFilter);\n+        int rowCount = 0;\n+        try (ResultScanner resultScanner = indexHTable.getScanner(indexScan)) {\n+            for (Result result = resultScanner.next(); (result != null); result = resultScanner.next()) {\n+                Put dataPut = indexKeyToDataPutMap.get(result.getRow());\n+                if (dataPut == null) {\n+                    // This should never happen\n+                    exceptionMessage = \"Index verify failed - Missing data row - \" + indexHTable.getName();\n+                    throw new IOException(exceptionMessage);\n+                }\n+                if (verifySingleIndexRow(result, dataPut)) {\n+                    verificationPhaseResult.setValidIndexRowCount(verificationPhaseResult.getValidIndexRowCount()+1);                    perTaskDataKeyToDataPutMap.remove(dataPut.getRow());\n+                } else {\n+                    verificationPhaseResult.setInvalidIndexRowCount(verificationPhaseResult.getInvalidIndexRowCount()+1);\n+                }\n+                rowCount++;\n+            }\n+        } catch (Throwable t) {\n+            ServerUtil.throwIOException(indexHTable.getName().toString(), t);\n+        }\n+        // Check if any expected rows from index(which we didn't get) are already expired due to TTL\n+        if (!perTaskDataKeyToDataPutMap.isEmpty()) {\n+            Iterator<Entry<byte[], Put>> itr = perTaskDataKeyToDataPutMap.entrySet().iterator();\n+            long currentTime = EnvironmentEdgeManager.currentTime();\n+            while(itr.hasNext()) {\n+                Entry<byte[], Put> entry = itr.next();\n+                long ts = getMaxTimestamp(entry.getValue());\n+                if (isTimestampBeforeTTL(currentTime, ts)) {\n+                    itr.remove();\n+                    rowCount++;\n+                    verificationPhaseResult.setExpiredIndexRowCount(verificationPhaseResult.getExpiredIndexRowCount()+1);                }\n+            }\n+        }\n+        if (rowCount != expectedRowCount) {\n+            verificationPhaseResult.setMissingIndexRowCount(verificationPhaseResult.getMissingIndexRowCount()+expectedRowCount - rowCount);\n+        }\n+    }\n+\n+    private boolean isTimestampBeforeTTL(long currentTime, long tsToCheck) {\n+        if (indexTableTTL == HConstants.FOREVER) {\n+            return false;\n+        }\n+        return tsToCheck < (currentTime - (long) indexTableTTL * 1000);\n+    }\n+\n+    private void addVerifyTask(final List<KeyRange> keys, final Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            final IndexToolVerificationResult.PhaseResult verificationPhaseResult) {\n+        tasks.add(new Task<Boolean>() {\n+            @Override\n+            public Boolean call() throws Exception {\n+                try {\n+                    if (Thread.currentThread().isInterrupted()) {\n+                        exceptionMessage = \"Pool closed, not attempting to verify index rows! \" + indexHTable.getName();\n+                        throw new IOException(exceptionMessage);\n+                    }\n+                    verifyIndexRows(keys, perTaskDataKeyToDataPutMap, verificationPhaseResult);\n+                } catch (Exception e) {\n+                    throw e;\n+                }\n+                return Boolean.TRUE;\n+            }\n+        });\n+    }\n+\n+    private void parallelizeIndexVerify(IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        for (Mutation mutation : mutations) {\n+            indexKeyToDataPutMap.put(getIndexRowKey((Put)mutation), (Put)mutation);\n+        }\n+        int taskCount = (indexKeyToDataPutMap.size() + rowCountPerTask - 1) / rowCountPerTask;\n+        tasks = new TaskBatch<>(taskCount);\n+        List<Map<byte[], Put>> dataPutMapList = new ArrayList<>(taskCount);\n+        List<IndexToolVerificationResult.PhaseResult> verificationPhaseResultList = new ArrayList<>(taskCount);\n+        List<KeyRange> keys = new ArrayList<>(rowCountPerTask);\n+        Map<byte[], Put> perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+        dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+        IndexToolVerificationResult.PhaseResult perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+        verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+        for (Map.Entry<byte[], Put> entry: indexKeyToDataPutMap.entrySet()) {\n+            keys.add(PVarbinary.INSTANCE.getKeyRange(entry.getKey()));\n+            perTaskDataKeyToDataPutMap.put(entry.getValue().getRow(), entry.getValue());\n+            if (keys.size() == rowCountPerTask) {\n+                addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+                keys = new ArrayList<>(rowCountPerTask);\n+                perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+                perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+                verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+            }\n+        }\n+        if (keys.size() > 0) {\n+            addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+        }\n+        List<Boolean> taskResultList = null;\n+        try {\n+            LOGGER.debug(\"Waiting on index verify tasks to complete...\");\n+            taskResultList = this.pool.submitUninterruptible(tasks);\n+        } catch (ExecutionException e) {\n+            throw new RuntimeException(\"Should not fail on the results while using a WaitForCompletionTaskRunner\", e);\n+        } catch (EarlyExitFailure e) {\n+            throw new RuntimeException(\"Stopped while waiting for batch, quitting!\", e);\n+        }\n+        for (Boolean result : taskResultList) {\n+            if (result == null) {\n+                // there was a failure\n+                throw new IOException(exceptionMessage);\n+            }\n+        }\n+        if (verifyType == IndexTool.IndexVerifyType.BEFORE || verifyType == IndexTool.IndexVerifyType.BOTH) {\n+            for (Map<byte[], Put> dataPutMap : dataPutMapList) {\n+                dataKeyToDataPutMap.putAll(dataPutMap);\n+            }\n+        }\n+        for (IndexToolVerificationResult.PhaseResult result : verificationPhaseResultList) {\n+            verificationPhaseResult.add(result);\n+        }\n+    }\n+\n+    private void verifyIndex() throws IOException {\n+        IndexToolVerificationResult nextVerificationResult = new IndexToolVerificationResult(scan);\n+        nextVerificationResult.setScannedDataRowCount(mutations.size());\n+        IndexToolVerificationResult.PhaseResult verificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+        // For these options we start with verifying index rows\n+        parallelizeIndexVerify(verificationPhaseResult);\n+        nextVerificationResult.getBefore().add(verificationPhaseResult);\n+        indexKeyToDataPutMap.clear();\n+        verificationResult.add(nextVerificationResult);\n+    }\n+\n+    @Override\n+    public boolean next(List<Cell> results) throws IOException {\n+        Cell lastCell = null;\n+        int rowCount = 0;\n+        region.startRegionOperation();\n+        try {\n+            synchronized (innerScanner) {\n+                do {\n+                    List<Cell> row = new ArrayList<>();\n+                    hasMore = innerScanner.nextRaw(row);\n+                    if (!row.isEmpty()) {\n+                        lastCell = row.get(0);\n+                        Put put = null;\n+                        Delete del = null;\n+                        for (Cell cell : row) {\n+                            if (KeyValue.Type.codeToType(cell.getTypeByte()) == KeyValue.Type.Put) {\n+                                if (put == null) {\n+                                    put = new Put(CellUtil.cloneRow(cell));\n+                                    mutations.add(put);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 442}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNjMwMQ==", "bodyText": "Are you planning to remove the mutation list (i.e.. mutations)?", "url": "https://github.com/apache/phoenix/pull/758#discussion_r411716301", "createdAt": "2020-04-20T21:50:31Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;\n+    private boolean verify = false;\n+    private Map<byte[], Put> indexKeyToDataPutMap;\n+    private Map<byte[], Put> dataKeyToDataPutMap;\n+    private TaskRunner pool;\n+    private TaskBatch<Boolean> tasks;\n+    private String exceptionMessage;\n+    private HTableFactory hTableFactory;\n+    private int indexTableTTL;\n+    private IndexToolVerificationResult verificationResult;\n+\n+    private IndexVerificationResultRepository verificationResultRepository;\n+\n+    IndexerRegionScanner (final RegionScanner innerScanner, final Region region, final Scan scan,\n+            final RegionCoprocessorEnvironment env) throws IOException {\n+        super(innerScanner);\n+        final Configuration config = env.getConfiguration();\n+        if (scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_PAGING) != null) {\n+            pageSizeInRows = config.getLong(INDEX_REBUILD_PAGE_SIZE_IN_ROWS,\n+                    QueryServicesOptions.DEFAULT_INDEX_REBUILD_PAGE_SIZE_IN_ROWS);\n+        }\n+        maxBatchSize = config.getInt(MUTATE_BATCH_SIZE_ATTRIB, QueryServicesOptions.DEFAULT_MUTATE_BATCH_SIZE);\n+        mutations = new UngroupedAggregateRegionObserver.MutationList(maxBatchSize);\n+        indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_PROTO_MD);\n+        if (indexMetaData == null) {\n+            indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_MD);\n+        }\n+        List<IndexMaintainer> maintainers = IndexMaintainer.deserialize(indexMetaData, true);\n+        indexMaintainer = maintainers.get(0);\n+        this.scan = scan;\n+        this.innerScanner = innerScanner;\n+        this.region = region;\n+        byte[] valueBytes = scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_VERIFY_TYPE);\n+        if (valueBytes != null) {\n+            verificationResult = new IndexToolVerificationResult(scan);\n+            verifyType = IndexTool.IndexVerifyType.fromValue(valueBytes);\n+            if (verifyType != IndexTool.IndexVerifyType.NONE) {\n+                verify = true;\n+                // Create the following objects only for rebuilds by IndexTool\n+                hTableFactory = ServerUtil.getDelegateHTableFactory(env, ServerUtil.ConnectionType.INDEX_WRITER_CONNECTION);\n+                indexHTable = hTableFactory.getTable(new ImmutableBytesPtr(indexMaintainer.getIndexTableName()));\n+                indexTableTTL = indexHTable.getTableDescriptor().getColumnFamilies()[0].getTimeToLive();\n+                verificationResultRepository =\n+                        new IndexVerificationResultRepository(indexMaintainer.getIndexTableName(), hTableFactory);\n+                indexKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                pool = new WaitForCompletionTaskRunner(ThreadPoolManager.getExecutor(\n+                        new ThreadPoolBuilder(\"IndexVerify\",\n+                                env.getConfiguration()).setMaxThread(NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY,\n+                                DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS).setCoreTimeout(\n+                                INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY), env));\n+                rowCountPerTask = config.getInt(INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY,\n+                        DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public HRegionInfo getRegionInfo() {\n+        return region.getRegionInfo();\n+    }\n+\n+    @Override\n+    public boolean isFilterDone() { return false; }\n+\n+    @Override\n+    public void close() throws IOException {\n+        innerScanner.close();\n+        if (verify) {\n+            try {\n+                verificationResultRepository.logToIndexToolResultTable(verificationResult,\n+                        verifyType, region.getRegionInfo().getRegionName());\n+            } finally {\n+                this.pool.stop(\"IndexerRegionScanner is closing\");\n+                hTableFactory.shutdown();\n+                indexHTable.close();\n+                verificationResultRepository.close();\n+            }\n+        }\n+    }\n+\n+    private class SimpleValueGetter implements ValueGetter {\n+        final ImmutableBytesWritable valuePtr = new ImmutableBytesWritable();\n+        final Put put;\n+        SimpleValueGetter (final Put put) {\n+            this.put = put;\n+        }\n+        @Override\n+        public ImmutableBytesWritable getLatestValue(ColumnReference ref, long ts) throws IOException {\n+            List<Cell> cellList = put.get(ref.getFamily(), ref.getQualifier());\n+            if (cellList == null || cellList.isEmpty()) {\n+                return null;\n+            }\n+            Cell cell = cellList.get(0);\n+            valuePtr.set(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n+            return valuePtr;\n+        }\n+\n+        @Override\n+        public byte[] getRowKey() {\n+            return put.getRow();\n+        }\n+\n+    }\n+\n+    private byte[] getIndexRowKey(final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        byte[] builtIndexRowKey = indexMaintainer.buildRowKey(valueGetter, new ImmutableBytesWritable(dataRow.getRow()),\n+                null, null, HConstants.LATEST_TIMESTAMP);\n+        return builtIndexRowKey;\n+    }\n+\n+    private long getMaxTimestamp(Put put) {\n+        long ts = 0;\n+        for (List<Cell> cells : put.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell cell : cells) {\n+                if (ts < cell.getTimestamp()) {\n+                    ts = cell.getTimestamp();\n+                }\n+            }\n+        }\n+        return ts;\n+    }\n+\n+    private boolean verifySingleIndexRow(Result indexRow, final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        long ts = getMaxTimestamp(dataRow);\n+        Put indexPut = indexMaintainer.buildUpdateMutation(GenericKeyValueBuilder.INSTANCE,\n+                valueGetter, new ImmutableBytesWritable(dataRow.getRow()), ts, null, null);\n+\n+        if (indexPut == null) {\n+            // This means the data row does not have any covered column values\n+            indexPut = new Put(indexRow.getRow());\n+        }\n+        // Add the empty column\n+        indexPut.addColumn(indexMaintainer.getEmptyKeyValueFamily().copyBytesIfNecessary(),\n+                indexMaintainer.getEmptyKeyValueQualifier(), ts, EMPTY_COLUMN_VALUE_BYTES);\n+\n+        int cellCount = 0;\n+        long currentTime = EnvironmentEdgeManager.currentTime();\n+        for (List<Cell> cells : indexPut.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell expectedCell : cells) {\n+                byte[] family = CellUtil.cloneFamily(expectedCell);\n+                byte[] qualifier = CellUtil.cloneQualifier(expectedCell);\n+                Cell actualCell = indexRow.getColumnLatestCell(family, qualifier);\n+                if (actualCell == null) {\n+                    // Check if cell expired as per the current server's time and data table ttl\n+                    // Index table should have the same ttl as the data table, hence we might not\n+                    // get a value back from index if it has already expired between our rebuild and\n+                    // verify\n+                    if (isTimestampBeforeTTL(currentTime, expectedCell.getTimestamp())) {\n+                        continue;\n+                    }\n+                    return false;\n+                }\n+                if (actualCell.getTimestamp() < ts) {\n+                    // Skip older cells since a Phoenix index row is composed of cells with the same timestamp\n+                    continue;\n+                }\n+                // Check all columns\n+                if (!CellUtil.matchingValue(actualCell, expectedCell)) {\n+                    return false;\n+                } else if (actualCell.getTimestamp() != ts) {\n+                    return false;\n+                }\n+                cellCount++;\n+            }\n+        }\n+        if (cellCount != indexRow.rawCells().length) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private void verifyIndexRows(List<KeyRange> keys, Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        int expectedRowCount = keys.size();\n+        ScanRanges scanRanges = ScanRanges.createPointLookup(keys);\n+        Scan indexScan = new Scan();\n+        indexScan.setTimeRange(scan.getTimeRange().getMin(), scan.getTimeRange().getMax());\n+        scanRanges.initializeScan(indexScan);\n+        SkipScanFilter skipScanFilter = scanRanges.getSkipScanFilter();\n+        indexScan.setFilter(skipScanFilter);\n+        int rowCount = 0;\n+        try (ResultScanner resultScanner = indexHTable.getScanner(indexScan)) {\n+            for (Result result = resultScanner.next(); (result != null); result = resultScanner.next()) {\n+                Put dataPut = indexKeyToDataPutMap.get(result.getRow());\n+                if (dataPut == null) {\n+                    // This should never happen\n+                    exceptionMessage = \"Index verify failed - Missing data row - \" + indexHTable.getName();\n+                    throw new IOException(exceptionMessage);\n+                }\n+                if (verifySingleIndexRow(result, dataPut)) {\n+                    verificationPhaseResult.setValidIndexRowCount(verificationPhaseResult.getValidIndexRowCount()+1);                    perTaskDataKeyToDataPutMap.remove(dataPut.getRow());\n+                } else {\n+                    verificationPhaseResult.setInvalidIndexRowCount(verificationPhaseResult.getInvalidIndexRowCount()+1);\n+                }\n+                rowCount++;\n+            }\n+        } catch (Throwable t) {\n+            ServerUtil.throwIOException(indexHTable.getName().toString(), t);\n+        }\n+        // Check if any expected rows from index(which we didn't get) are already expired due to TTL\n+        if (!perTaskDataKeyToDataPutMap.isEmpty()) {\n+            Iterator<Entry<byte[], Put>> itr = perTaskDataKeyToDataPutMap.entrySet().iterator();\n+            long currentTime = EnvironmentEdgeManager.currentTime();\n+            while(itr.hasNext()) {\n+                Entry<byte[], Put> entry = itr.next();\n+                long ts = getMaxTimestamp(entry.getValue());\n+                if (isTimestampBeforeTTL(currentTime, ts)) {\n+                    itr.remove();\n+                    rowCount++;\n+                    verificationPhaseResult.setExpiredIndexRowCount(verificationPhaseResult.getExpiredIndexRowCount()+1);                }\n+            }\n+        }\n+        if (rowCount != expectedRowCount) {\n+            verificationPhaseResult.setMissingIndexRowCount(verificationPhaseResult.getMissingIndexRowCount()+expectedRowCount - rowCount);\n+        }\n+    }\n+\n+    private boolean isTimestampBeforeTTL(long currentTime, long tsToCheck) {\n+        if (indexTableTTL == HConstants.FOREVER) {\n+            return false;\n+        }\n+        return tsToCheck < (currentTime - (long) indexTableTTL * 1000);\n+    }\n+\n+    private void addVerifyTask(final List<KeyRange> keys, final Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            final IndexToolVerificationResult.PhaseResult verificationPhaseResult) {\n+        tasks.add(new Task<Boolean>() {\n+            @Override\n+            public Boolean call() throws Exception {\n+                try {\n+                    if (Thread.currentThread().isInterrupted()) {\n+                        exceptionMessage = \"Pool closed, not attempting to verify index rows! \" + indexHTable.getName();\n+                        throw new IOException(exceptionMessage);\n+                    }\n+                    verifyIndexRows(keys, perTaskDataKeyToDataPutMap, verificationPhaseResult);\n+                } catch (Exception e) {\n+                    throw e;\n+                }\n+                return Boolean.TRUE;\n+            }\n+        });\n+    }\n+\n+    private void parallelizeIndexVerify(IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        for (Mutation mutation : mutations) {\n+            indexKeyToDataPutMap.put(getIndexRowKey((Put)mutation), (Put)mutation);\n+        }\n+        int taskCount = (indexKeyToDataPutMap.size() + rowCountPerTask - 1) / rowCountPerTask;\n+        tasks = new TaskBatch<>(taskCount);\n+        List<Map<byte[], Put>> dataPutMapList = new ArrayList<>(taskCount);\n+        List<IndexToolVerificationResult.PhaseResult> verificationPhaseResultList = new ArrayList<>(taskCount);\n+        List<KeyRange> keys = new ArrayList<>(rowCountPerTask);\n+        Map<byte[], Put> perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+        dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+        IndexToolVerificationResult.PhaseResult perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+        verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+        for (Map.Entry<byte[], Put> entry: indexKeyToDataPutMap.entrySet()) {\n+            keys.add(PVarbinary.INSTANCE.getKeyRange(entry.getKey()));\n+            perTaskDataKeyToDataPutMap.put(entry.getValue().getRow(), entry.getValue());\n+            if (keys.size() == rowCountPerTask) {\n+                addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+                keys = new ArrayList<>(rowCountPerTask);\n+                perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+                perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+                verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+            }\n+        }\n+        if (keys.size() > 0) {\n+            addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+        }\n+        List<Boolean> taskResultList = null;\n+        try {\n+            LOGGER.debug(\"Waiting on index verify tasks to complete...\");\n+            taskResultList = this.pool.submitUninterruptible(tasks);\n+        } catch (ExecutionException e) {\n+            throw new RuntimeException(\"Should not fail on the results while using a WaitForCompletionTaskRunner\", e);\n+        } catch (EarlyExitFailure e) {\n+            throw new RuntimeException(\"Stopped while waiting for batch, quitting!\", e);\n+        }\n+        for (Boolean result : taskResultList) {\n+            if (result == null) {\n+                // there was a failure\n+                throw new IOException(exceptionMessage);\n+            }\n+        }\n+        if (verifyType == IndexTool.IndexVerifyType.BEFORE || verifyType == IndexTool.IndexVerifyType.BOTH) {\n+            for (Map<byte[], Put> dataPutMap : dataPutMapList) {\n+                dataKeyToDataPutMap.putAll(dataPutMap);\n+            }\n+        }\n+        for (IndexToolVerificationResult.PhaseResult result : verificationPhaseResultList) {\n+            verificationPhaseResult.add(result);\n+        }\n+    }\n+\n+    private void verifyIndex() throws IOException {\n+        IndexToolVerificationResult nextVerificationResult = new IndexToolVerificationResult(scan);\n+        nextVerificationResult.setScannedDataRowCount(mutations.size());\n+        IndexToolVerificationResult.PhaseResult verificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+        // For these options we start with verifying index rows\n+        parallelizeIndexVerify(verificationPhaseResult);\n+        nextVerificationResult.getBefore().add(verificationPhaseResult);\n+        indexKeyToDataPutMap.clear();\n+        verificationResult.add(nextVerificationResult);\n+    }\n+\n+    @Override\n+    public boolean next(List<Cell> results) throws IOException {\n+        Cell lastCell = null;\n+        int rowCount = 0;\n+        region.startRegionOperation();\n+        try {\n+            synchronized (innerScanner) {\n+                do {\n+                    List<Cell> row = new ArrayList<>();\n+                    hasMore = innerScanner.nextRaw(row);\n+                    if (!row.isEmpty()) {\n+                        lastCell = row.get(0);\n+                        Put put = null;\n+                        Delete del = null;\n+                        for (Cell cell : row) {\n+                            if (KeyValue.Type.codeToType(cell.getTypeByte()) == KeyValue.Type.Put) {\n+                                if (put == null) {\n+                                    put = new Put(CellUtil.cloneRow(cell));\n+                                    mutations.add(put);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjA5OA=="}, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 442}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MzE2MA==", "bodyText": "Changing so is failing the tests that I added. We can pass this refactoring for followup if you would like?", "url": "https://github.com/apache/phoenix/pull/758#discussion_r411753160", "createdAt": "2020-04-20T23:13:39Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;\n+    private boolean verify = false;\n+    private Map<byte[], Put> indexKeyToDataPutMap;\n+    private Map<byte[], Put> dataKeyToDataPutMap;\n+    private TaskRunner pool;\n+    private TaskBatch<Boolean> tasks;\n+    private String exceptionMessage;\n+    private HTableFactory hTableFactory;\n+    private int indexTableTTL;\n+    private IndexToolVerificationResult verificationResult;\n+\n+    private IndexVerificationResultRepository verificationResultRepository;\n+\n+    IndexerRegionScanner (final RegionScanner innerScanner, final Region region, final Scan scan,\n+            final RegionCoprocessorEnvironment env) throws IOException {\n+        super(innerScanner);\n+        final Configuration config = env.getConfiguration();\n+        if (scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_PAGING) != null) {\n+            pageSizeInRows = config.getLong(INDEX_REBUILD_PAGE_SIZE_IN_ROWS,\n+                    QueryServicesOptions.DEFAULT_INDEX_REBUILD_PAGE_SIZE_IN_ROWS);\n+        }\n+        maxBatchSize = config.getInt(MUTATE_BATCH_SIZE_ATTRIB, QueryServicesOptions.DEFAULT_MUTATE_BATCH_SIZE);\n+        mutations = new UngroupedAggregateRegionObserver.MutationList(maxBatchSize);\n+        indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_PROTO_MD);\n+        if (indexMetaData == null) {\n+            indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_MD);\n+        }\n+        List<IndexMaintainer> maintainers = IndexMaintainer.deserialize(indexMetaData, true);\n+        indexMaintainer = maintainers.get(0);\n+        this.scan = scan;\n+        this.innerScanner = innerScanner;\n+        this.region = region;\n+        byte[] valueBytes = scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_VERIFY_TYPE);\n+        if (valueBytes != null) {\n+            verificationResult = new IndexToolVerificationResult(scan);\n+            verifyType = IndexTool.IndexVerifyType.fromValue(valueBytes);\n+            if (verifyType != IndexTool.IndexVerifyType.NONE) {\n+                verify = true;\n+                // Create the following objects only for rebuilds by IndexTool\n+                hTableFactory = ServerUtil.getDelegateHTableFactory(env, ServerUtil.ConnectionType.INDEX_WRITER_CONNECTION);\n+                indexHTable = hTableFactory.getTable(new ImmutableBytesPtr(indexMaintainer.getIndexTableName()));\n+                indexTableTTL = indexHTable.getTableDescriptor().getColumnFamilies()[0].getTimeToLive();\n+                verificationResultRepository =\n+                        new IndexVerificationResultRepository(indexMaintainer.getIndexTableName(), hTableFactory);\n+                indexKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                pool = new WaitForCompletionTaskRunner(ThreadPoolManager.getExecutor(\n+                        new ThreadPoolBuilder(\"IndexVerify\",\n+                                env.getConfiguration()).setMaxThread(NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY,\n+                                DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS).setCoreTimeout(\n+                                INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY), env));\n+                rowCountPerTask = config.getInt(INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY,\n+                        DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public HRegionInfo getRegionInfo() {\n+        return region.getRegionInfo();\n+    }\n+\n+    @Override\n+    public boolean isFilterDone() { return false; }\n+\n+    @Override\n+    public void close() throws IOException {\n+        innerScanner.close();\n+        if (verify) {\n+            try {\n+                verificationResultRepository.logToIndexToolResultTable(verificationResult,\n+                        verifyType, region.getRegionInfo().getRegionName());\n+            } finally {\n+                this.pool.stop(\"IndexerRegionScanner is closing\");\n+                hTableFactory.shutdown();\n+                indexHTable.close();\n+                verificationResultRepository.close();\n+            }\n+        }\n+    }\n+\n+    private class SimpleValueGetter implements ValueGetter {\n+        final ImmutableBytesWritable valuePtr = new ImmutableBytesWritable();\n+        final Put put;\n+        SimpleValueGetter (final Put put) {\n+            this.put = put;\n+        }\n+        @Override\n+        public ImmutableBytesWritable getLatestValue(ColumnReference ref, long ts) throws IOException {\n+            List<Cell> cellList = put.get(ref.getFamily(), ref.getQualifier());\n+            if (cellList == null || cellList.isEmpty()) {\n+                return null;\n+            }\n+            Cell cell = cellList.get(0);\n+            valuePtr.set(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n+            return valuePtr;\n+        }\n+\n+        @Override\n+        public byte[] getRowKey() {\n+            return put.getRow();\n+        }\n+\n+    }\n+\n+    private byte[] getIndexRowKey(final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        byte[] builtIndexRowKey = indexMaintainer.buildRowKey(valueGetter, new ImmutableBytesWritable(dataRow.getRow()),\n+                null, null, HConstants.LATEST_TIMESTAMP);\n+        return builtIndexRowKey;\n+    }\n+\n+    private long getMaxTimestamp(Put put) {\n+        long ts = 0;\n+        for (List<Cell> cells : put.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell cell : cells) {\n+                if (ts < cell.getTimestamp()) {\n+                    ts = cell.getTimestamp();\n+                }\n+            }\n+        }\n+        return ts;\n+    }\n+\n+    private boolean verifySingleIndexRow(Result indexRow, final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        long ts = getMaxTimestamp(dataRow);\n+        Put indexPut = indexMaintainer.buildUpdateMutation(GenericKeyValueBuilder.INSTANCE,\n+                valueGetter, new ImmutableBytesWritable(dataRow.getRow()), ts, null, null);\n+\n+        if (indexPut == null) {\n+            // This means the data row does not have any covered column values\n+            indexPut = new Put(indexRow.getRow());\n+        }\n+        // Add the empty column\n+        indexPut.addColumn(indexMaintainer.getEmptyKeyValueFamily().copyBytesIfNecessary(),\n+                indexMaintainer.getEmptyKeyValueQualifier(), ts, EMPTY_COLUMN_VALUE_BYTES);\n+\n+        int cellCount = 0;\n+        long currentTime = EnvironmentEdgeManager.currentTime();\n+        for (List<Cell> cells : indexPut.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell expectedCell : cells) {\n+                byte[] family = CellUtil.cloneFamily(expectedCell);\n+                byte[] qualifier = CellUtil.cloneQualifier(expectedCell);\n+                Cell actualCell = indexRow.getColumnLatestCell(family, qualifier);\n+                if (actualCell == null) {\n+                    // Check if cell expired as per the current server's time and data table ttl\n+                    // Index table should have the same ttl as the data table, hence we might not\n+                    // get a value back from index if it has already expired between our rebuild and\n+                    // verify\n+                    if (isTimestampBeforeTTL(currentTime, expectedCell.getTimestamp())) {\n+                        continue;\n+                    }\n+                    return false;\n+                }\n+                if (actualCell.getTimestamp() < ts) {\n+                    // Skip older cells since a Phoenix index row is composed of cells with the same timestamp\n+                    continue;\n+                }\n+                // Check all columns\n+                if (!CellUtil.matchingValue(actualCell, expectedCell)) {\n+                    return false;\n+                } else if (actualCell.getTimestamp() != ts) {\n+                    return false;\n+                }\n+                cellCount++;\n+            }\n+        }\n+        if (cellCount != indexRow.rawCells().length) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private void verifyIndexRows(List<KeyRange> keys, Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        int expectedRowCount = keys.size();\n+        ScanRanges scanRanges = ScanRanges.createPointLookup(keys);\n+        Scan indexScan = new Scan();\n+        indexScan.setTimeRange(scan.getTimeRange().getMin(), scan.getTimeRange().getMax());\n+        scanRanges.initializeScan(indexScan);\n+        SkipScanFilter skipScanFilter = scanRanges.getSkipScanFilter();\n+        indexScan.setFilter(skipScanFilter);\n+        int rowCount = 0;\n+        try (ResultScanner resultScanner = indexHTable.getScanner(indexScan)) {\n+            for (Result result = resultScanner.next(); (result != null); result = resultScanner.next()) {\n+                Put dataPut = indexKeyToDataPutMap.get(result.getRow());\n+                if (dataPut == null) {\n+                    // This should never happen\n+                    exceptionMessage = \"Index verify failed - Missing data row - \" + indexHTable.getName();\n+                    throw new IOException(exceptionMessage);\n+                }\n+                if (verifySingleIndexRow(result, dataPut)) {\n+                    verificationPhaseResult.setValidIndexRowCount(verificationPhaseResult.getValidIndexRowCount()+1);                    perTaskDataKeyToDataPutMap.remove(dataPut.getRow());\n+                } else {\n+                    verificationPhaseResult.setInvalidIndexRowCount(verificationPhaseResult.getInvalidIndexRowCount()+1);\n+                }\n+                rowCount++;\n+            }\n+        } catch (Throwable t) {\n+            ServerUtil.throwIOException(indexHTable.getName().toString(), t);\n+        }\n+        // Check if any expected rows from index(which we didn't get) are already expired due to TTL\n+        if (!perTaskDataKeyToDataPutMap.isEmpty()) {\n+            Iterator<Entry<byte[], Put>> itr = perTaskDataKeyToDataPutMap.entrySet().iterator();\n+            long currentTime = EnvironmentEdgeManager.currentTime();\n+            while(itr.hasNext()) {\n+                Entry<byte[], Put> entry = itr.next();\n+                long ts = getMaxTimestamp(entry.getValue());\n+                if (isTimestampBeforeTTL(currentTime, ts)) {\n+                    itr.remove();\n+                    rowCount++;\n+                    verificationPhaseResult.setExpiredIndexRowCount(verificationPhaseResult.getExpiredIndexRowCount()+1);                }\n+            }\n+        }\n+        if (rowCount != expectedRowCount) {\n+            verificationPhaseResult.setMissingIndexRowCount(verificationPhaseResult.getMissingIndexRowCount()+expectedRowCount - rowCount);\n+        }\n+    }\n+\n+    private boolean isTimestampBeforeTTL(long currentTime, long tsToCheck) {\n+        if (indexTableTTL == HConstants.FOREVER) {\n+            return false;\n+        }\n+        return tsToCheck < (currentTime - (long) indexTableTTL * 1000);\n+    }\n+\n+    private void addVerifyTask(final List<KeyRange> keys, final Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            final IndexToolVerificationResult.PhaseResult verificationPhaseResult) {\n+        tasks.add(new Task<Boolean>() {\n+            @Override\n+            public Boolean call() throws Exception {\n+                try {\n+                    if (Thread.currentThread().isInterrupted()) {\n+                        exceptionMessage = \"Pool closed, not attempting to verify index rows! \" + indexHTable.getName();\n+                        throw new IOException(exceptionMessage);\n+                    }\n+                    verifyIndexRows(keys, perTaskDataKeyToDataPutMap, verificationPhaseResult);\n+                } catch (Exception e) {\n+                    throw e;\n+                }\n+                return Boolean.TRUE;\n+            }\n+        });\n+    }\n+\n+    private void parallelizeIndexVerify(IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        for (Mutation mutation : mutations) {\n+            indexKeyToDataPutMap.put(getIndexRowKey((Put)mutation), (Put)mutation);\n+        }\n+        int taskCount = (indexKeyToDataPutMap.size() + rowCountPerTask - 1) / rowCountPerTask;\n+        tasks = new TaskBatch<>(taskCount);\n+        List<Map<byte[], Put>> dataPutMapList = new ArrayList<>(taskCount);\n+        List<IndexToolVerificationResult.PhaseResult> verificationPhaseResultList = new ArrayList<>(taskCount);\n+        List<KeyRange> keys = new ArrayList<>(rowCountPerTask);\n+        Map<byte[], Put> perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+        dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+        IndexToolVerificationResult.PhaseResult perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+        verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+        for (Map.Entry<byte[], Put> entry: indexKeyToDataPutMap.entrySet()) {\n+            keys.add(PVarbinary.INSTANCE.getKeyRange(entry.getKey()));\n+            perTaskDataKeyToDataPutMap.put(entry.getValue().getRow(), entry.getValue());\n+            if (keys.size() == rowCountPerTask) {\n+                addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+                keys = new ArrayList<>(rowCountPerTask);\n+                perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+                perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+                verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+            }\n+        }\n+        if (keys.size() > 0) {\n+            addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+        }\n+        List<Boolean> taskResultList = null;\n+        try {\n+            LOGGER.debug(\"Waiting on index verify tasks to complete...\");\n+            taskResultList = this.pool.submitUninterruptible(tasks);\n+        } catch (ExecutionException e) {\n+            throw new RuntimeException(\"Should not fail on the results while using a WaitForCompletionTaskRunner\", e);\n+        } catch (EarlyExitFailure e) {\n+            throw new RuntimeException(\"Stopped while waiting for batch, quitting!\", e);\n+        }\n+        for (Boolean result : taskResultList) {\n+            if (result == null) {\n+                // there was a failure\n+                throw new IOException(exceptionMessage);\n+            }\n+        }\n+        if (verifyType == IndexTool.IndexVerifyType.BEFORE || verifyType == IndexTool.IndexVerifyType.BOTH) {\n+            for (Map<byte[], Put> dataPutMap : dataPutMapList) {\n+                dataKeyToDataPutMap.putAll(dataPutMap);\n+            }\n+        }\n+        for (IndexToolVerificationResult.PhaseResult result : verificationPhaseResultList) {\n+            verificationPhaseResult.add(result);\n+        }\n+    }\n+\n+    private void verifyIndex() throws IOException {\n+        IndexToolVerificationResult nextVerificationResult = new IndexToolVerificationResult(scan);\n+        nextVerificationResult.setScannedDataRowCount(mutations.size());\n+        IndexToolVerificationResult.PhaseResult verificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+        // For these options we start with verifying index rows\n+        parallelizeIndexVerify(verificationPhaseResult);\n+        nextVerificationResult.getBefore().add(verificationPhaseResult);\n+        indexKeyToDataPutMap.clear();\n+        verificationResult.add(nextVerificationResult);\n+    }\n+\n+    @Override\n+    public boolean next(List<Cell> results) throws IOException {\n+        Cell lastCell = null;\n+        int rowCount = 0;\n+        region.startRegionOperation();\n+        try {\n+            synchronized (innerScanner) {\n+                do {\n+                    List<Cell> row = new ArrayList<>();\n+                    hasMore = innerScanner.nextRaw(row);\n+                    if (!row.isEmpty()) {\n+                        lastCell = row.get(0);\n+                        Put put = null;\n+                        Delete del = null;\n+                        for (Cell cell : row) {\n+                            if (KeyValue.Type.codeToType(cell.getTypeByte()) == KeyValue.Type.Put) {\n+                                if (put == null) {\n+                                    put = new Put(CellUtil.cloneRow(cell));\n+                                    mutations.add(put);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjA5OA=="}, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 442}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU1OTE0OA==", "bodyText": "Thanks for the help @kadirozde :)", "url": "https://github.com/apache/phoenix/pull/758#discussion_r412559148", "createdAt": "2020-04-21T23:24:43Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;\n+    private boolean verify = false;\n+    private Map<byte[], Put> indexKeyToDataPutMap;\n+    private Map<byte[], Put> dataKeyToDataPutMap;\n+    private TaskRunner pool;\n+    private TaskBatch<Boolean> tasks;\n+    private String exceptionMessage;\n+    private HTableFactory hTableFactory;\n+    private int indexTableTTL;\n+    private IndexToolVerificationResult verificationResult;\n+\n+    private IndexVerificationResultRepository verificationResultRepository;\n+\n+    IndexerRegionScanner (final RegionScanner innerScanner, final Region region, final Scan scan,\n+            final RegionCoprocessorEnvironment env) throws IOException {\n+        super(innerScanner);\n+        final Configuration config = env.getConfiguration();\n+        if (scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_PAGING) != null) {\n+            pageSizeInRows = config.getLong(INDEX_REBUILD_PAGE_SIZE_IN_ROWS,\n+                    QueryServicesOptions.DEFAULT_INDEX_REBUILD_PAGE_SIZE_IN_ROWS);\n+        }\n+        maxBatchSize = config.getInt(MUTATE_BATCH_SIZE_ATTRIB, QueryServicesOptions.DEFAULT_MUTATE_BATCH_SIZE);\n+        mutations = new UngroupedAggregateRegionObserver.MutationList(maxBatchSize);\n+        indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_PROTO_MD);\n+        if (indexMetaData == null) {\n+            indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_MD);\n+        }\n+        List<IndexMaintainer> maintainers = IndexMaintainer.deserialize(indexMetaData, true);\n+        indexMaintainer = maintainers.get(0);\n+        this.scan = scan;\n+        this.innerScanner = innerScanner;\n+        this.region = region;\n+        byte[] valueBytes = scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_VERIFY_TYPE);\n+        if (valueBytes != null) {\n+            verificationResult = new IndexToolVerificationResult(scan);\n+            verifyType = IndexTool.IndexVerifyType.fromValue(valueBytes);\n+            if (verifyType != IndexTool.IndexVerifyType.NONE) {\n+                verify = true;\n+                // Create the following objects only for rebuilds by IndexTool\n+                hTableFactory = ServerUtil.getDelegateHTableFactory(env, ServerUtil.ConnectionType.INDEX_WRITER_CONNECTION);\n+                indexHTable = hTableFactory.getTable(new ImmutableBytesPtr(indexMaintainer.getIndexTableName()));\n+                indexTableTTL = indexHTable.getTableDescriptor().getColumnFamilies()[0].getTimeToLive();\n+                verificationResultRepository =\n+                        new IndexVerificationResultRepository(indexMaintainer.getIndexTableName(), hTableFactory);\n+                indexKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                pool = new WaitForCompletionTaskRunner(ThreadPoolManager.getExecutor(\n+                        new ThreadPoolBuilder(\"IndexVerify\",\n+                                env.getConfiguration()).setMaxThread(NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY,\n+                                DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS).setCoreTimeout(\n+                                INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY), env));\n+                rowCountPerTask = config.getInt(INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY,\n+                        DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public HRegionInfo getRegionInfo() {\n+        return region.getRegionInfo();\n+    }\n+\n+    @Override\n+    public boolean isFilterDone() { return false; }\n+\n+    @Override\n+    public void close() throws IOException {\n+        innerScanner.close();\n+        if (verify) {\n+            try {\n+                verificationResultRepository.logToIndexToolResultTable(verificationResult,\n+                        verifyType, region.getRegionInfo().getRegionName());\n+            } finally {\n+                this.pool.stop(\"IndexerRegionScanner is closing\");\n+                hTableFactory.shutdown();\n+                indexHTable.close();\n+                verificationResultRepository.close();\n+            }\n+        }\n+    }\n+\n+    private class SimpleValueGetter implements ValueGetter {\n+        final ImmutableBytesWritable valuePtr = new ImmutableBytesWritable();\n+        final Put put;\n+        SimpleValueGetter (final Put put) {\n+            this.put = put;\n+        }\n+        @Override\n+        public ImmutableBytesWritable getLatestValue(ColumnReference ref, long ts) throws IOException {\n+            List<Cell> cellList = put.get(ref.getFamily(), ref.getQualifier());\n+            if (cellList == null || cellList.isEmpty()) {\n+                return null;\n+            }\n+            Cell cell = cellList.get(0);\n+            valuePtr.set(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n+            return valuePtr;\n+        }\n+\n+        @Override\n+        public byte[] getRowKey() {\n+            return put.getRow();\n+        }\n+\n+    }\n+\n+    private byte[] getIndexRowKey(final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        byte[] builtIndexRowKey = indexMaintainer.buildRowKey(valueGetter, new ImmutableBytesWritable(dataRow.getRow()),\n+                null, null, HConstants.LATEST_TIMESTAMP);\n+        return builtIndexRowKey;\n+    }\n+\n+    private long getMaxTimestamp(Put put) {\n+        long ts = 0;\n+        for (List<Cell> cells : put.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell cell : cells) {\n+                if (ts < cell.getTimestamp()) {\n+                    ts = cell.getTimestamp();\n+                }\n+            }\n+        }\n+        return ts;\n+    }\n+\n+    private boolean verifySingleIndexRow(Result indexRow, final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        long ts = getMaxTimestamp(dataRow);\n+        Put indexPut = indexMaintainer.buildUpdateMutation(GenericKeyValueBuilder.INSTANCE,\n+                valueGetter, new ImmutableBytesWritable(dataRow.getRow()), ts, null, null);\n+\n+        if (indexPut == null) {\n+            // This means the data row does not have any covered column values\n+            indexPut = new Put(indexRow.getRow());\n+        }\n+        // Add the empty column\n+        indexPut.addColumn(indexMaintainer.getEmptyKeyValueFamily().copyBytesIfNecessary(),\n+                indexMaintainer.getEmptyKeyValueQualifier(), ts, EMPTY_COLUMN_VALUE_BYTES);\n+\n+        int cellCount = 0;\n+        long currentTime = EnvironmentEdgeManager.currentTime();\n+        for (List<Cell> cells : indexPut.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell expectedCell : cells) {\n+                byte[] family = CellUtil.cloneFamily(expectedCell);\n+                byte[] qualifier = CellUtil.cloneQualifier(expectedCell);\n+                Cell actualCell = indexRow.getColumnLatestCell(family, qualifier);\n+                if (actualCell == null) {\n+                    // Check if cell expired as per the current server's time and data table ttl\n+                    // Index table should have the same ttl as the data table, hence we might not\n+                    // get a value back from index if it has already expired between our rebuild and\n+                    // verify\n+                    if (isTimestampBeforeTTL(currentTime, expectedCell.getTimestamp())) {\n+                        continue;\n+                    }\n+                    return false;\n+                }\n+                if (actualCell.getTimestamp() < ts) {\n+                    // Skip older cells since a Phoenix index row is composed of cells with the same timestamp\n+                    continue;\n+                }\n+                // Check all columns\n+                if (!CellUtil.matchingValue(actualCell, expectedCell)) {\n+                    return false;\n+                } else if (actualCell.getTimestamp() != ts) {\n+                    return false;\n+                }\n+                cellCount++;\n+            }\n+        }\n+        if (cellCount != indexRow.rawCells().length) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private void verifyIndexRows(List<KeyRange> keys, Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        int expectedRowCount = keys.size();\n+        ScanRanges scanRanges = ScanRanges.createPointLookup(keys);\n+        Scan indexScan = new Scan();\n+        indexScan.setTimeRange(scan.getTimeRange().getMin(), scan.getTimeRange().getMax());\n+        scanRanges.initializeScan(indexScan);\n+        SkipScanFilter skipScanFilter = scanRanges.getSkipScanFilter();\n+        indexScan.setFilter(skipScanFilter);\n+        int rowCount = 0;\n+        try (ResultScanner resultScanner = indexHTable.getScanner(indexScan)) {\n+            for (Result result = resultScanner.next(); (result != null); result = resultScanner.next()) {\n+                Put dataPut = indexKeyToDataPutMap.get(result.getRow());\n+                if (dataPut == null) {\n+                    // This should never happen\n+                    exceptionMessage = \"Index verify failed - Missing data row - \" + indexHTable.getName();\n+                    throw new IOException(exceptionMessage);\n+                }\n+                if (verifySingleIndexRow(result, dataPut)) {\n+                    verificationPhaseResult.setValidIndexRowCount(verificationPhaseResult.getValidIndexRowCount()+1);                    perTaskDataKeyToDataPutMap.remove(dataPut.getRow());\n+                } else {\n+                    verificationPhaseResult.setInvalidIndexRowCount(verificationPhaseResult.getInvalidIndexRowCount()+1);\n+                }\n+                rowCount++;\n+            }\n+        } catch (Throwable t) {\n+            ServerUtil.throwIOException(indexHTable.getName().toString(), t);\n+        }\n+        // Check if any expected rows from index(which we didn't get) are already expired due to TTL\n+        if (!perTaskDataKeyToDataPutMap.isEmpty()) {\n+            Iterator<Entry<byte[], Put>> itr = perTaskDataKeyToDataPutMap.entrySet().iterator();\n+            long currentTime = EnvironmentEdgeManager.currentTime();\n+            while(itr.hasNext()) {\n+                Entry<byte[], Put> entry = itr.next();\n+                long ts = getMaxTimestamp(entry.getValue());\n+                if (isTimestampBeforeTTL(currentTime, ts)) {\n+                    itr.remove();\n+                    rowCount++;\n+                    verificationPhaseResult.setExpiredIndexRowCount(verificationPhaseResult.getExpiredIndexRowCount()+1);                }\n+            }\n+        }\n+        if (rowCount != expectedRowCount) {\n+            verificationPhaseResult.setMissingIndexRowCount(verificationPhaseResult.getMissingIndexRowCount()+expectedRowCount - rowCount);\n+        }\n+    }\n+\n+    private boolean isTimestampBeforeTTL(long currentTime, long tsToCheck) {\n+        if (indexTableTTL == HConstants.FOREVER) {\n+            return false;\n+        }\n+        return tsToCheck < (currentTime - (long) indexTableTTL * 1000);\n+    }\n+\n+    private void addVerifyTask(final List<KeyRange> keys, final Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            final IndexToolVerificationResult.PhaseResult verificationPhaseResult) {\n+        tasks.add(new Task<Boolean>() {\n+            @Override\n+            public Boolean call() throws Exception {\n+                try {\n+                    if (Thread.currentThread().isInterrupted()) {\n+                        exceptionMessage = \"Pool closed, not attempting to verify index rows! \" + indexHTable.getName();\n+                        throw new IOException(exceptionMessage);\n+                    }\n+                    verifyIndexRows(keys, perTaskDataKeyToDataPutMap, verificationPhaseResult);\n+                } catch (Exception e) {\n+                    throw e;\n+                }\n+                return Boolean.TRUE;\n+            }\n+        });\n+    }\n+\n+    private void parallelizeIndexVerify(IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        for (Mutation mutation : mutations) {\n+            indexKeyToDataPutMap.put(getIndexRowKey((Put)mutation), (Put)mutation);\n+        }\n+        int taskCount = (indexKeyToDataPutMap.size() + rowCountPerTask - 1) / rowCountPerTask;\n+        tasks = new TaskBatch<>(taskCount);\n+        List<Map<byte[], Put>> dataPutMapList = new ArrayList<>(taskCount);\n+        List<IndexToolVerificationResult.PhaseResult> verificationPhaseResultList = new ArrayList<>(taskCount);\n+        List<KeyRange> keys = new ArrayList<>(rowCountPerTask);\n+        Map<byte[], Put> perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+        dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+        IndexToolVerificationResult.PhaseResult perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+        verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+        for (Map.Entry<byte[], Put> entry: indexKeyToDataPutMap.entrySet()) {\n+            keys.add(PVarbinary.INSTANCE.getKeyRange(entry.getKey()));\n+            perTaskDataKeyToDataPutMap.put(entry.getValue().getRow(), entry.getValue());\n+            if (keys.size() == rowCountPerTask) {\n+                addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+                keys = new ArrayList<>(rowCountPerTask);\n+                perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+                perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+                verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+            }\n+        }\n+        if (keys.size() > 0) {\n+            addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+        }\n+        List<Boolean> taskResultList = null;\n+        try {\n+            LOGGER.debug(\"Waiting on index verify tasks to complete...\");\n+            taskResultList = this.pool.submitUninterruptible(tasks);\n+        } catch (ExecutionException e) {\n+            throw new RuntimeException(\"Should not fail on the results while using a WaitForCompletionTaskRunner\", e);\n+        } catch (EarlyExitFailure e) {\n+            throw new RuntimeException(\"Stopped while waiting for batch, quitting!\", e);\n+        }\n+        for (Boolean result : taskResultList) {\n+            if (result == null) {\n+                // there was a failure\n+                throw new IOException(exceptionMessage);\n+            }\n+        }\n+        if (verifyType == IndexTool.IndexVerifyType.BEFORE || verifyType == IndexTool.IndexVerifyType.BOTH) {\n+            for (Map<byte[], Put> dataPutMap : dataPutMapList) {\n+                dataKeyToDataPutMap.putAll(dataPutMap);\n+            }\n+        }\n+        for (IndexToolVerificationResult.PhaseResult result : verificationPhaseResultList) {\n+            verificationPhaseResult.add(result);\n+        }\n+    }\n+\n+    private void verifyIndex() throws IOException {\n+        IndexToolVerificationResult nextVerificationResult = new IndexToolVerificationResult(scan);\n+        nextVerificationResult.setScannedDataRowCount(mutations.size());\n+        IndexToolVerificationResult.PhaseResult verificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+        // For these options we start with verifying index rows\n+        parallelizeIndexVerify(verificationPhaseResult);\n+        nextVerificationResult.getBefore().add(verificationPhaseResult);\n+        indexKeyToDataPutMap.clear();\n+        verificationResult.add(nextVerificationResult);\n+    }\n+\n+    @Override\n+    public boolean next(List<Cell> results) throws IOException {\n+        Cell lastCell = null;\n+        int rowCount = 0;\n+        region.startRegionOperation();\n+        try {\n+            synchronized (innerScanner) {\n+                do {\n+                    List<Cell> row = new ArrayList<>();\n+                    hasMore = innerScanner.nextRaw(row);\n+                    if (!row.isEmpty()) {\n+                        lastCell = row.get(0);\n+                        Put put = null;\n+                        Delete del = null;\n+                        for (Cell cell : row) {\n+                            if (KeyValue.Type.codeToType(cell.getTypeByte()) == KeyValue.Type.Put) {\n+                                if (put == null) {\n+                                    put = new Put(CellUtil.cloneRow(cell));\n+                                    mutations.add(put);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjA5OA=="}, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 442}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzk1NzAzOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0OToxOVrOGGwkjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0OToxOVrOGGwkjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MDQzMA==", "bodyText": "Remove this block. Also remove dataKeyToDataPutMap as it is not used anymore.", "url": "https://github.com/apache/phoenix/pull/758#discussion_r409740430", "createdAt": "2020-04-16T17:49:19Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;\n+    private boolean verify = false;\n+    private Map<byte[], Put> indexKeyToDataPutMap;\n+    private Map<byte[], Put> dataKeyToDataPutMap;\n+    private TaskRunner pool;\n+    private TaskBatch<Boolean> tasks;\n+    private String exceptionMessage;\n+    private HTableFactory hTableFactory;\n+    private int indexTableTTL;\n+    private IndexToolVerificationResult verificationResult;\n+\n+    private IndexVerificationResultRepository verificationResultRepository;\n+\n+    IndexerRegionScanner (final RegionScanner innerScanner, final Region region, final Scan scan,\n+            final RegionCoprocessorEnvironment env) throws IOException {\n+        super(innerScanner);\n+        final Configuration config = env.getConfiguration();\n+        if (scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_PAGING) != null) {\n+            pageSizeInRows = config.getLong(INDEX_REBUILD_PAGE_SIZE_IN_ROWS,\n+                    QueryServicesOptions.DEFAULT_INDEX_REBUILD_PAGE_SIZE_IN_ROWS);\n+        }\n+        maxBatchSize = config.getInt(MUTATE_BATCH_SIZE_ATTRIB, QueryServicesOptions.DEFAULT_MUTATE_BATCH_SIZE);\n+        mutations = new UngroupedAggregateRegionObserver.MutationList(maxBatchSize);\n+        indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_PROTO_MD);\n+        if (indexMetaData == null) {\n+            indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_MD);\n+        }\n+        List<IndexMaintainer> maintainers = IndexMaintainer.deserialize(indexMetaData, true);\n+        indexMaintainer = maintainers.get(0);\n+        this.scan = scan;\n+        this.innerScanner = innerScanner;\n+        this.region = region;\n+        byte[] valueBytes = scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_VERIFY_TYPE);\n+        if (valueBytes != null) {\n+            verificationResult = new IndexToolVerificationResult(scan);\n+            verifyType = IndexTool.IndexVerifyType.fromValue(valueBytes);\n+            if (verifyType != IndexTool.IndexVerifyType.NONE) {\n+                verify = true;\n+                // Create the following objects only for rebuilds by IndexTool\n+                hTableFactory = ServerUtil.getDelegateHTableFactory(env, ServerUtil.ConnectionType.INDEX_WRITER_CONNECTION);\n+                indexHTable = hTableFactory.getTable(new ImmutableBytesPtr(indexMaintainer.getIndexTableName()));\n+                indexTableTTL = indexHTable.getTableDescriptor().getColumnFamilies()[0].getTimeToLive();\n+                verificationResultRepository =\n+                        new IndexVerificationResultRepository(indexMaintainer.getIndexTableName(), hTableFactory);\n+                indexKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                pool = new WaitForCompletionTaskRunner(ThreadPoolManager.getExecutor(\n+                        new ThreadPoolBuilder(\"IndexVerify\",\n+                                env.getConfiguration()).setMaxThread(NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY,\n+                                DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS).setCoreTimeout(\n+                                INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY), env));\n+                rowCountPerTask = config.getInt(INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY,\n+                        DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public HRegionInfo getRegionInfo() {\n+        return region.getRegionInfo();\n+    }\n+\n+    @Override\n+    public boolean isFilterDone() { return false; }\n+\n+    @Override\n+    public void close() throws IOException {\n+        innerScanner.close();\n+        if (verify) {\n+            try {\n+                verificationResultRepository.logToIndexToolResultTable(verificationResult,\n+                        verifyType, region.getRegionInfo().getRegionName());\n+            } finally {\n+                this.pool.stop(\"IndexerRegionScanner is closing\");\n+                hTableFactory.shutdown();\n+                indexHTable.close();\n+                verificationResultRepository.close();\n+            }\n+        }\n+    }\n+\n+    private class SimpleValueGetter implements ValueGetter {\n+        final ImmutableBytesWritable valuePtr = new ImmutableBytesWritable();\n+        final Put put;\n+        SimpleValueGetter (final Put put) {\n+            this.put = put;\n+        }\n+        @Override\n+        public ImmutableBytesWritable getLatestValue(ColumnReference ref, long ts) throws IOException {\n+            List<Cell> cellList = put.get(ref.getFamily(), ref.getQualifier());\n+            if (cellList == null || cellList.isEmpty()) {\n+                return null;\n+            }\n+            Cell cell = cellList.get(0);\n+            valuePtr.set(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n+            return valuePtr;\n+        }\n+\n+        @Override\n+        public byte[] getRowKey() {\n+            return put.getRow();\n+        }\n+\n+    }\n+\n+    private byte[] getIndexRowKey(final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        byte[] builtIndexRowKey = indexMaintainer.buildRowKey(valueGetter, new ImmutableBytesWritable(dataRow.getRow()),\n+                null, null, HConstants.LATEST_TIMESTAMP);\n+        return builtIndexRowKey;\n+    }\n+\n+    private long getMaxTimestamp(Put put) {\n+        long ts = 0;\n+        for (List<Cell> cells : put.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell cell : cells) {\n+                if (ts < cell.getTimestamp()) {\n+                    ts = cell.getTimestamp();\n+                }\n+            }\n+        }\n+        return ts;\n+    }\n+\n+    private boolean verifySingleIndexRow(Result indexRow, final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        long ts = getMaxTimestamp(dataRow);\n+        Put indexPut = indexMaintainer.buildUpdateMutation(GenericKeyValueBuilder.INSTANCE,\n+                valueGetter, new ImmutableBytesWritable(dataRow.getRow()), ts, null, null);\n+\n+        if (indexPut == null) {\n+            // This means the data row does not have any covered column values\n+            indexPut = new Put(indexRow.getRow());\n+        }\n+        // Add the empty column\n+        indexPut.addColumn(indexMaintainer.getEmptyKeyValueFamily().copyBytesIfNecessary(),\n+                indexMaintainer.getEmptyKeyValueQualifier(), ts, EMPTY_COLUMN_VALUE_BYTES);\n+\n+        int cellCount = 0;\n+        long currentTime = EnvironmentEdgeManager.currentTime();\n+        for (List<Cell> cells : indexPut.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell expectedCell : cells) {\n+                byte[] family = CellUtil.cloneFamily(expectedCell);\n+                byte[] qualifier = CellUtil.cloneQualifier(expectedCell);\n+                Cell actualCell = indexRow.getColumnLatestCell(family, qualifier);\n+                if (actualCell == null) {\n+                    // Check if cell expired as per the current server's time and data table ttl\n+                    // Index table should have the same ttl as the data table, hence we might not\n+                    // get a value back from index if it has already expired between our rebuild and\n+                    // verify\n+                    if (isTimestampBeforeTTL(currentTime, expectedCell.getTimestamp())) {\n+                        continue;\n+                    }\n+                    return false;\n+                }\n+                if (actualCell.getTimestamp() < ts) {\n+                    // Skip older cells since a Phoenix index row is composed of cells with the same timestamp\n+                    continue;\n+                }\n+                // Check all columns\n+                if (!CellUtil.matchingValue(actualCell, expectedCell)) {\n+                    return false;\n+                } else if (actualCell.getTimestamp() != ts) {\n+                    return false;\n+                }\n+                cellCount++;\n+            }\n+        }\n+        if (cellCount != indexRow.rawCells().length) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private void verifyIndexRows(List<KeyRange> keys, Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        int expectedRowCount = keys.size();\n+        ScanRanges scanRanges = ScanRanges.createPointLookup(keys);\n+        Scan indexScan = new Scan();\n+        indexScan.setTimeRange(scan.getTimeRange().getMin(), scan.getTimeRange().getMax());\n+        scanRanges.initializeScan(indexScan);\n+        SkipScanFilter skipScanFilter = scanRanges.getSkipScanFilter();\n+        indexScan.setFilter(skipScanFilter);\n+        int rowCount = 0;\n+        try (ResultScanner resultScanner = indexHTable.getScanner(indexScan)) {\n+            for (Result result = resultScanner.next(); (result != null); result = resultScanner.next()) {\n+                Put dataPut = indexKeyToDataPutMap.get(result.getRow());\n+                if (dataPut == null) {\n+                    // This should never happen\n+                    exceptionMessage = \"Index verify failed - Missing data row - \" + indexHTable.getName();\n+                    throw new IOException(exceptionMessage);\n+                }\n+                if (verifySingleIndexRow(result, dataPut)) {\n+                    verificationPhaseResult.setValidIndexRowCount(verificationPhaseResult.getValidIndexRowCount()+1);                    perTaskDataKeyToDataPutMap.remove(dataPut.getRow());\n+                } else {\n+                    verificationPhaseResult.setInvalidIndexRowCount(verificationPhaseResult.getInvalidIndexRowCount()+1);\n+                }\n+                rowCount++;\n+            }\n+        } catch (Throwable t) {\n+            ServerUtil.throwIOException(indexHTable.getName().toString(), t);\n+        }\n+        // Check if any expected rows from index(which we didn't get) are already expired due to TTL\n+        if (!perTaskDataKeyToDataPutMap.isEmpty()) {\n+            Iterator<Entry<byte[], Put>> itr = perTaskDataKeyToDataPutMap.entrySet().iterator();\n+            long currentTime = EnvironmentEdgeManager.currentTime();\n+            while(itr.hasNext()) {\n+                Entry<byte[], Put> entry = itr.next();\n+                long ts = getMaxTimestamp(entry.getValue());\n+                if (isTimestampBeforeTTL(currentTime, ts)) {\n+                    itr.remove();\n+                    rowCount++;\n+                    verificationPhaseResult.setExpiredIndexRowCount(verificationPhaseResult.getExpiredIndexRowCount()+1);                }\n+            }\n+        }\n+        if (rowCount != expectedRowCount) {\n+            verificationPhaseResult.setMissingIndexRowCount(verificationPhaseResult.getMissingIndexRowCount()+expectedRowCount - rowCount);\n+        }\n+    }\n+\n+    private boolean isTimestampBeforeTTL(long currentTime, long tsToCheck) {\n+        if (indexTableTTL == HConstants.FOREVER) {\n+            return false;\n+        }\n+        return tsToCheck < (currentTime - (long) indexTableTTL * 1000);\n+    }\n+\n+    private void addVerifyTask(final List<KeyRange> keys, final Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            final IndexToolVerificationResult.PhaseResult verificationPhaseResult) {\n+        tasks.add(new Task<Boolean>() {\n+            @Override\n+            public Boolean call() throws Exception {\n+                try {\n+                    if (Thread.currentThread().isInterrupted()) {\n+                        exceptionMessage = \"Pool closed, not attempting to verify index rows! \" + indexHTable.getName();\n+                        throw new IOException(exceptionMessage);\n+                    }\n+                    verifyIndexRows(keys, perTaskDataKeyToDataPutMap, verificationPhaseResult);\n+                } catch (Exception e) {\n+                    throw e;\n+                }\n+                return Boolean.TRUE;\n+            }\n+        });\n+    }\n+\n+    private void parallelizeIndexVerify(IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        for (Mutation mutation : mutations) {\n+            indexKeyToDataPutMap.put(getIndexRowKey((Put)mutation), (Put)mutation);\n+        }\n+        int taskCount = (indexKeyToDataPutMap.size() + rowCountPerTask - 1) / rowCountPerTask;\n+        tasks = new TaskBatch<>(taskCount);\n+        List<Map<byte[], Put>> dataPutMapList = new ArrayList<>(taskCount);\n+        List<IndexToolVerificationResult.PhaseResult> verificationPhaseResultList = new ArrayList<>(taskCount);\n+        List<KeyRange> keys = new ArrayList<>(rowCountPerTask);\n+        Map<byte[], Put> perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+        dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+        IndexToolVerificationResult.PhaseResult perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+        verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+        for (Map.Entry<byte[], Put> entry: indexKeyToDataPutMap.entrySet()) {\n+            keys.add(PVarbinary.INSTANCE.getKeyRange(entry.getKey()));\n+            perTaskDataKeyToDataPutMap.put(entry.getValue().getRow(), entry.getValue());\n+            if (keys.size() == rowCountPerTask) {\n+                addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+                keys = new ArrayList<>(rowCountPerTask);\n+                perTaskDataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataPutMapList.add(perTaskDataKeyToDataPutMap);\n+                perTaskVerificationPhaseResult = new IndexToolVerificationResult.PhaseResult();\n+                verificationPhaseResultList.add(perTaskVerificationPhaseResult);\n+            }\n+        }\n+        if (keys.size() > 0) {\n+            addVerifyTask(keys, perTaskDataKeyToDataPutMap, perTaskVerificationPhaseResult);\n+        }\n+        List<Boolean> taskResultList = null;\n+        try {\n+            LOGGER.debug(\"Waiting on index verify tasks to complete...\");\n+            taskResultList = this.pool.submitUninterruptible(tasks);\n+        } catch (ExecutionException e) {\n+            throw new RuntimeException(\"Should not fail on the results while using a WaitForCompletionTaskRunner\", e);\n+        } catch (EarlyExitFailure e) {\n+            throw new RuntimeException(\"Stopped while waiting for batch, quitting!\", e);\n+        }\n+        for (Boolean result : taskResultList) {\n+            if (result == null) {\n+                // there was a failure\n+                throw new IOException(exceptionMessage);\n+            }\n+        }\n+        if (verifyType == IndexTool.IndexVerifyType.BEFORE || verifyType == IndexTool.IndexVerifyType.BOTH) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 403}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzk2OTA1OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1MjozNVrOGGwsaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1MjozNVrOGGwsaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MjQ0MA==", "bodyText": "You can remove this class and use the one from IndexRebuildRegionScanner", "url": "https://github.com/apache/phoenix/pull/758#discussion_r409742440", "createdAt": "2020-04-16T17:52:35Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;\n+    private boolean verify = false;\n+    private Map<byte[], Put> indexKeyToDataPutMap;\n+    private Map<byte[], Put> dataKeyToDataPutMap;\n+    private TaskRunner pool;\n+    private TaskBatch<Boolean> tasks;\n+    private String exceptionMessage;\n+    private HTableFactory hTableFactory;\n+    private int indexTableTTL;\n+    private IndexToolVerificationResult verificationResult;\n+\n+    private IndexVerificationResultRepository verificationResultRepository;\n+\n+    IndexerRegionScanner (final RegionScanner innerScanner, final Region region, final Scan scan,\n+            final RegionCoprocessorEnvironment env) throws IOException {\n+        super(innerScanner);\n+        final Configuration config = env.getConfiguration();\n+        if (scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_PAGING) != null) {\n+            pageSizeInRows = config.getLong(INDEX_REBUILD_PAGE_SIZE_IN_ROWS,\n+                    QueryServicesOptions.DEFAULT_INDEX_REBUILD_PAGE_SIZE_IN_ROWS);\n+        }\n+        maxBatchSize = config.getInt(MUTATE_BATCH_SIZE_ATTRIB, QueryServicesOptions.DEFAULT_MUTATE_BATCH_SIZE);\n+        mutations = new UngroupedAggregateRegionObserver.MutationList(maxBatchSize);\n+        indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_PROTO_MD);\n+        if (indexMetaData == null) {\n+            indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_MD);\n+        }\n+        List<IndexMaintainer> maintainers = IndexMaintainer.deserialize(indexMetaData, true);\n+        indexMaintainer = maintainers.get(0);\n+        this.scan = scan;\n+        this.innerScanner = innerScanner;\n+        this.region = region;\n+        byte[] valueBytes = scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_VERIFY_TYPE);\n+        if (valueBytes != null) {\n+            verificationResult = new IndexToolVerificationResult(scan);\n+            verifyType = IndexTool.IndexVerifyType.fromValue(valueBytes);\n+            if (verifyType != IndexTool.IndexVerifyType.NONE) {\n+                verify = true;\n+                // Create the following objects only for rebuilds by IndexTool\n+                hTableFactory = ServerUtil.getDelegateHTableFactory(env, ServerUtil.ConnectionType.INDEX_WRITER_CONNECTION);\n+                indexHTable = hTableFactory.getTable(new ImmutableBytesPtr(indexMaintainer.getIndexTableName()));\n+                indexTableTTL = indexHTable.getTableDescriptor().getColumnFamilies()[0].getTimeToLive();\n+                verificationResultRepository =\n+                        new IndexVerificationResultRepository(indexMaintainer.getIndexTableName(), hTableFactory);\n+                indexKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                pool = new WaitForCompletionTaskRunner(ThreadPoolManager.getExecutor(\n+                        new ThreadPoolBuilder(\"IndexVerify\",\n+                                env.getConfiguration()).setMaxThread(NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY,\n+                                DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS).setCoreTimeout(\n+                                INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY), env));\n+                rowCountPerTask = config.getInt(INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY,\n+                        DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public HRegionInfo getRegionInfo() {\n+        return region.getRegionInfo();\n+    }\n+\n+    @Override\n+    public boolean isFilterDone() { return false; }\n+\n+    @Override\n+    public void close() throws IOException {\n+        innerScanner.close();\n+        if (verify) {\n+            try {\n+                verificationResultRepository.logToIndexToolResultTable(verificationResult,\n+                        verifyType, region.getRegionInfo().getRegionName());\n+            } finally {\n+                this.pool.stop(\"IndexerRegionScanner is closing\");\n+                hTableFactory.shutdown();\n+                indexHTable.close();\n+                verificationResultRepository.close();\n+            }\n+        }\n+    }\n+\n+    private class SimpleValueGetter implements ValueGetter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzk3NDE1OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1Mzo0NVrOGGwvkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1Mzo0NVrOGGwvkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MzI1MA==", "bodyText": "You can remove this method and use the one from IndexRebuildRegionScanner", "url": "https://github.com/apache/phoenix/pull/758#discussion_r409743250", "createdAt": "2020-04-16T17:53:45Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;\n+    private boolean verify = false;\n+    private Map<byte[], Put> indexKeyToDataPutMap;\n+    private Map<byte[], Put> dataKeyToDataPutMap;\n+    private TaskRunner pool;\n+    private TaskBatch<Boolean> tasks;\n+    private String exceptionMessage;\n+    private HTableFactory hTableFactory;\n+    private int indexTableTTL;\n+    private IndexToolVerificationResult verificationResult;\n+\n+    private IndexVerificationResultRepository verificationResultRepository;\n+\n+    IndexerRegionScanner (final RegionScanner innerScanner, final Region region, final Scan scan,\n+            final RegionCoprocessorEnvironment env) throws IOException {\n+        super(innerScanner);\n+        final Configuration config = env.getConfiguration();\n+        if (scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_PAGING) != null) {\n+            pageSizeInRows = config.getLong(INDEX_REBUILD_PAGE_SIZE_IN_ROWS,\n+                    QueryServicesOptions.DEFAULT_INDEX_REBUILD_PAGE_SIZE_IN_ROWS);\n+        }\n+        maxBatchSize = config.getInt(MUTATE_BATCH_SIZE_ATTRIB, QueryServicesOptions.DEFAULT_MUTATE_BATCH_SIZE);\n+        mutations = new UngroupedAggregateRegionObserver.MutationList(maxBatchSize);\n+        indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_PROTO_MD);\n+        if (indexMetaData == null) {\n+            indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_MD);\n+        }\n+        List<IndexMaintainer> maintainers = IndexMaintainer.deserialize(indexMetaData, true);\n+        indexMaintainer = maintainers.get(0);\n+        this.scan = scan;\n+        this.innerScanner = innerScanner;\n+        this.region = region;\n+        byte[] valueBytes = scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_VERIFY_TYPE);\n+        if (valueBytes != null) {\n+            verificationResult = new IndexToolVerificationResult(scan);\n+            verifyType = IndexTool.IndexVerifyType.fromValue(valueBytes);\n+            if (verifyType != IndexTool.IndexVerifyType.NONE) {\n+                verify = true;\n+                // Create the following objects only for rebuilds by IndexTool\n+                hTableFactory = ServerUtil.getDelegateHTableFactory(env, ServerUtil.ConnectionType.INDEX_WRITER_CONNECTION);\n+                indexHTable = hTableFactory.getTable(new ImmutableBytesPtr(indexMaintainer.getIndexTableName()));\n+                indexTableTTL = indexHTable.getTableDescriptor().getColumnFamilies()[0].getTimeToLive();\n+                verificationResultRepository =\n+                        new IndexVerificationResultRepository(indexMaintainer.getIndexTableName(), hTableFactory);\n+                indexKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                pool = new WaitForCompletionTaskRunner(ThreadPoolManager.getExecutor(\n+                        new ThreadPoolBuilder(\"IndexVerify\",\n+                                env.getConfiguration()).setMaxThread(NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY,\n+                                DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS).setCoreTimeout(\n+                                INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY), env));\n+                rowCountPerTask = config.getInt(INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY,\n+                        DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public HRegionInfo getRegionInfo() {\n+        return region.getRegionInfo();\n+    }\n+\n+    @Override\n+    public boolean isFilterDone() { return false; }\n+\n+    @Override\n+    public void close() throws IOException {\n+        innerScanner.close();\n+        if (verify) {\n+            try {\n+                verificationResultRepository.logToIndexToolResultTable(verificationResult,\n+                        verifyType, region.getRegionInfo().getRegionName());\n+            } finally {\n+                this.pool.stop(\"IndexerRegionScanner is closing\");\n+                hTableFactory.shutdown();\n+                indexHTable.close();\n+                verificationResultRepository.close();\n+            }\n+        }\n+    }\n+\n+    private class SimpleValueGetter implements ValueGetter {\n+        final ImmutableBytesWritable valuePtr = new ImmutableBytesWritable();\n+        final Put put;\n+        SimpleValueGetter (final Put put) {\n+            this.put = put;\n+        }\n+        @Override\n+        public ImmutableBytesWritable getLatestValue(ColumnReference ref, long ts) throws IOException {\n+            List<Cell> cellList = put.get(ref.getFamily(), ref.getQualifier());\n+            if (cellList == null || cellList.isEmpty()) {\n+                return null;\n+            }\n+            Cell cell = cellList.get(0);\n+            valuePtr.set(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n+            return valuePtr;\n+        }\n+\n+        @Override\n+        public byte[] getRowKey() {\n+            return put.getRow();\n+        }\n+\n+    }\n+\n+    private byte[] getIndexRowKey(final Put dataRow) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzk3ODI1OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1NDo0MVrOGGwx_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1NDo0MVrOGGwx_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0Mzg3MQ==", "bodyText": "You can remove this method and use the one from IndexRebuildRegionScanner", "url": "https://github.com/apache/phoenix/pull/758#discussion_r409743871", "createdAt": "2020-04-16T17:54:41Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;\n+    private boolean verify = false;\n+    private Map<byte[], Put> indexKeyToDataPutMap;\n+    private Map<byte[], Put> dataKeyToDataPutMap;\n+    private TaskRunner pool;\n+    private TaskBatch<Boolean> tasks;\n+    private String exceptionMessage;\n+    private HTableFactory hTableFactory;\n+    private int indexTableTTL;\n+    private IndexToolVerificationResult verificationResult;\n+\n+    private IndexVerificationResultRepository verificationResultRepository;\n+\n+    IndexerRegionScanner (final RegionScanner innerScanner, final Region region, final Scan scan,\n+            final RegionCoprocessorEnvironment env) throws IOException {\n+        super(innerScanner);\n+        final Configuration config = env.getConfiguration();\n+        if (scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_PAGING) != null) {\n+            pageSizeInRows = config.getLong(INDEX_REBUILD_PAGE_SIZE_IN_ROWS,\n+                    QueryServicesOptions.DEFAULT_INDEX_REBUILD_PAGE_SIZE_IN_ROWS);\n+        }\n+        maxBatchSize = config.getInt(MUTATE_BATCH_SIZE_ATTRIB, QueryServicesOptions.DEFAULT_MUTATE_BATCH_SIZE);\n+        mutations = new UngroupedAggregateRegionObserver.MutationList(maxBatchSize);\n+        indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_PROTO_MD);\n+        if (indexMetaData == null) {\n+            indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_MD);\n+        }\n+        List<IndexMaintainer> maintainers = IndexMaintainer.deserialize(indexMetaData, true);\n+        indexMaintainer = maintainers.get(0);\n+        this.scan = scan;\n+        this.innerScanner = innerScanner;\n+        this.region = region;\n+        byte[] valueBytes = scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_VERIFY_TYPE);\n+        if (valueBytes != null) {\n+            verificationResult = new IndexToolVerificationResult(scan);\n+            verifyType = IndexTool.IndexVerifyType.fromValue(valueBytes);\n+            if (verifyType != IndexTool.IndexVerifyType.NONE) {\n+                verify = true;\n+                // Create the following objects only for rebuilds by IndexTool\n+                hTableFactory = ServerUtil.getDelegateHTableFactory(env, ServerUtil.ConnectionType.INDEX_WRITER_CONNECTION);\n+                indexHTable = hTableFactory.getTable(new ImmutableBytesPtr(indexMaintainer.getIndexTableName()));\n+                indexTableTTL = indexHTable.getTableDescriptor().getColumnFamilies()[0].getTimeToLive();\n+                verificationResultRepository =\n+                        new IndexVerificationResultRepository(indexMaintainer.getIndexTableName(), hTableFactory);\n+                indexKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                pool = new WaitForCompletionTaskRunner(ThreadPoolManager.getExecutor(\n+                        new ThreadPoolBuilder(\"IndexVerify\",\n+                                env.getConfiguration()).setMaxThread(NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY,\n+                                DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS).setCoreTimeout(\n+                                INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY), env));\n+                rowCountPerTask = config.getInt(INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY,\n+                        DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public HRegionInfo getRegionInfo() {\n+        return region.getRegionInfo();\n+    }\n+\n+    @Override\n+    public boolean isFilterDone() { return false; }\n+\n+    @Override\n+    public void close() throws IOException {\n+        innerScanner.close();\n+        if (verify) {\n+            try {\n+                verificationResultRepository.logToIndexToolResultTable(verificationResult,\n+                        verifyType, region.getRegionInfo().getRegionName());\n+            } finally {\n+                this.pool.stop(\"IndexerRegionScanner is closing\");\n+                hTableFactory.shutdown();\n+                indexHTable.close();\n+                verificationResultRepository.close();\n+            }\n+        }\n+    }\n+\n+    private class SimpleValueGetter implements ValueGetter {\n+        final ImmutableBytesWritable valuePtr = new ImmutableBytesWritable();\n+        final Put put;\n+        SimpleValueGetter (final Put put) {\n+            this.put = put;\n+        }\n+        @Override\n+        public ImmutableBytesWritable getLatestValue(ColumnReference ref, long ts) throws IOException {\n+            List<Cell> cellList = put.get(ref.getFamily(), ref.getQualifier());\n+            if (cellList == null || cellList.isEmpty()) {\n+                return null;\n+            }\n+            Cell cell = cellList.get(0);\n+            valuePtr.set(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n+            return valuePtr;\n+        }\n+\n+        @Override\n+        public byte[] getRowKey() {\n+            return put.getRow();\n+        }\n+\n+    }\n+\n+    private byte[] getIndexRowKey(final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        byte[] builtIndexRowKey = indexMaintainer.buildRowKey(valueGetter, new ImmutableBytesWritable(dataRow.getRow()),\n+                null, null, HConstants.LATEST_TIMESTAMP);\n+        return builtIndexRowKey;\n+    }\n+\n+    private long getMaxTimestamp(Put put) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzk5MzI1OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1ODozOFrOGGw7lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1ODozOFrOGGw7lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NjMyNA==", "bodyText": "VerifyTpe for this class is always IndexTool.IndexVerifyType.ONLY. No need to have verifyType. You can remove the code checking the verify type.", "url": "https://github.com/apache/phoenix/pull/758#discussion_r409746324", "createdAt": "2020-04-16T17:58:38Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzk5ODkwOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowMDowNlrOGGw_Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowMDowNlrOGGw_Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NzIzNQ==", "bodyText": "You can remove this method and use the one from IndexRebuildRegionScanner", "url": "https://github.com/apache/phoenix/pull/758#discussion_r409747235", "createdAt": "2020-04-16T18:00:06Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;\n+    private boolean verify = false;\n+    private Map<byte[], Put> indexKeyToDataPutMap;\n+    private Map<byte[], Put> dataKeyToDataPutMap;\n+    private TaskRunner pool;\n+    private TaskBatch<Boolean> tasks;\n+    private String exceptionMessage;\n+    private HTableFactory hTableFactory;\n+    private int indexTableTTL;\n+    private IndexToolVerificationResult verificationResult;\n+\n+    private IndexVerificationResultRepository verificationResultRepository;\n+\n+    IndexerRegionScanner (final RegionScanner innerScanner, final Region region, final Scan scan,\n+            final RegionCoprocessorEnvironment env) throws IOException {\n+        super(innerScanner);\n+        final Configuration config = env.getConfiguration();\n+        if (scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_PAGING) != null) {\n+            pageSizeInRows = config.getLong(INDEX_REBUILD_PAGE_SIZE_IN_ROWS,\n+                    QueryServicesOptions.DEFAULT_INDEX_REBUILD_PAGE_SIZE_IN_ROWS);\n+        }\n+        maxBatchSize = config.getInt(MUTATE_BATCH_SIZE_ATTRIB, QueryServicesOptions.DEFAULT_MUTATE_BATCH_SIZE);\n+        mutations = new UngroupedAggregateRegionObserver.MutationList(maxBatchSize);\n+        indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_PROTO_MD);\n+        if (indexMetaData == null) {\n+            indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_MD);\n+        }\n+        List<IndexMaintainer> maintainers = IndexMaintainer.deserialize(indexMetaData, true);\n+        indexMaintainer = maintainers.get(0);\n+        this.scan = scan;\n+        this.innerScanner = innerScanner;\n+        this.region = region;\n+        byte[] valueBytes = scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_VERIFY_TYPE);\n+        if (valueBytes != null) {\n+            verificationResult = new IndexToolVerificationResult(scan);\n+            verifyType = IndexTool.IndexVerifyType.fromValue(valueBytes);\n+            if (verifyType != IndexTool.IndexVerifyType.NONE) {\n+                verify = true;\n+                // Create the following objects only for rebuilds by IndexTool\n+                hTableFactory = ServerUtil.getDelegateHTableFactory(env, ServerUtil.ConnectionType.INDEX_WRITER_CONNECTION);\n+                indexHTable = hTableFactory.getTable(new ImmutableBytesPtr(indexMaintainer.getIndexTableName()));\n+                indexTableTTL = indexHTable.getTableDescriptor().getColumnFamilies()[0].getTimeToLive();\n+                verificationResultRepository =\n+                        new IndexVerificationResultRepository(indexMaintainer.getIndexTableName(), hTableFactory);\n+                indexKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                pool = new WaitForCompletionTaskRunner(ThreadPoolManager.getExecutor(\n+                        new ThreadPoolBuilder(\"IndexVerify\",\n+                                env.getConfiguration()).setMaxThread(NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY,\n+                                DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS).setCoreTimeout(\n+                                INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY), env));\n+                rowCountPerTask = config.getInt(INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY,\n+                        DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public HRegionInfo getRegionInfo() {\n+        return region.getRegionInfo();\n+    }\n+\n+    @Override\n+    public boolean isFilterDone() { return false; }\n+\n+    @Override\n+    public void close() throws IOException {\n+        innerScanner.close();\n+        if (verify) {\n+            try {\n+                verificationResultRepository.logToIndexToolResultTable(verificationResult,\n+                        verifyType, region.getRegionInfo().getRegionName());\n+            } finally {\n+                this.pool.stop(\"IndexerRegionScanner is closing\");\n+                hTableFactory.shutdown();\n+                indexHTable.close();\n+                verificationResultRepository.close();\n+            }\n+        }\n+    }\n+\n+    private class SimpleValueGetter implements ValueGetter {\n+        final ImmutableBytesWritable valuePtr = new ImmutableBytesWritable();\n+        final Put put;\n+        SimpleValueGetter (final Put put) {\n+            this.put = put;\n+        }\n+        @Override\n+        public ImmutableBytesWritable getLatestValue(ColumnReference ref, long ts) throws IOException {\n+            List<Cell> cellList = put.get(ref.getFamily(), ref.getQualifier());\n+            if (cellList == null || cellList.isEmpty()) {\n+                return null;\n+            }\n+            Cell cell = cellList.get(0);\n+            valuePtr.set(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n+            return valuePtr;\n+        }\n+\n+        @Override\n+        public byte[] getRowKey() {\n+            return put.getRow();\n+        }\n+\n+    }\n+\n+    private byte[] getIndexRowKey(final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        byte[] builtIndexRowKey = indexMaintainer.buildRowKey(valueGetter, new ImmutableBytesWritable(dataRow.getRow()),\n+                null, null, HConstants.LATEST_TIMESTAMP);\n+        return builtIndexRowKey;\n+    }\n+\n+    private long getMaxTimestamp(Put put) {\n+        long ts = 0;\n+        for (List<Cell> cells : put.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell cell : cells) {\n+                if (ts < cell.getTimestamp()) {\n+                    ts = cell.getTimestamp();\n+                }\n+            }\n+        }\n+        return ts;\n+    }\n+\n+    private boolean verifySingleIndexRow(Result indexRow, final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        long ts = getMaxTimestamp(dataRow);\n+        Put indexPut = indexMaintainer.buildUpdateMutation(GenericKeyValueBuilder.INSTANCE,\n+                valueGetter, new ImmutableBytesWritable(dataRow.getRow()), ts, null, null);\n+\n+        if (indexPut == null) {\n+            // This means the data row does not have any covered column values\n+            indexPut = new Put(indexRow.getRow());\n+        }\n+        // Add the empty column\n+        indexPut.addColumn(indexMaintainer.getEmptyKeyValueFamily().copyBytesIfNecessary(),\n+                indexMaintainer.getEmptyKeyValueQualifier(), ts, EMPTY_COLUMN_VALUE_BYTES);\n+\n+        int cellCount = 0;\n+        long currentTime = EnvironmentEdgeManager.currentTime();\n+        for (List<Cell> cells : indexPut.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell expectedCell : cells) {\n+                byte[] family = CellUtil.cloneFamily(expectedCell);\n+                byte[] qualifier = CellUtil.cloneQualifier(expectedCell);\n+                Cell actualCell = indexRow.getColumnLatestCell(family, qualifier);\n+                if (actualCell == null) {\n+                    // Check if cell expired as per the current server's time and data table ttl\n+                    // Index table should have the same ttl as the data table, hence we might not\n+                    // get a value back from index if it has already expired between our rebuild and\n+                    // verify\n+                    if (isTimestampBeforeTTL(currentTime, expectedCell.getTimestamp())) {\n+                        continue;\n+                    }\n+                    return false;\n+                }\n+                if (actualCell.getTimestamp() < ts) {\n+                    // Skip older cells since a Phoenix index row is composed of cells with the same timestamp\n+                    continue;\n+                }\n+                // Check all columns\n+                if (!CellUtil.matchingValue(actualCell, expectedCell)) {\n+                    return false;\n+                } else if (actualCell.getTimestamp() != ts) {\n+                    return false;\n+                }\n+                cellCount++;\n+            }\n+        }\n+        if (cellCount != indexRow.rawCells().length) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private void verifyIndexRows(List<KeyRange> keys, Map<byte[], Put> perTaskDataKeyToDataPutMap,\n+            IndexToolVerificationResult.PhaseResult verificationPhaseResult) throws IOException {\n+        int expectedRowCount = keys.size();\n+        ScanRanges scanRanges = ScanRanges.createPointLookup(keys);\n+        Scan indexScan = new Scan();\n+        indexScan.setTimeRange(scan.getTimeRange().getMin(), scan.getTimeRange().getMax());\n+        scanRanges.initializeScan(indexScan);\n+        SkipScanFilter skipScanFilter = scanRanges.getSkipScanFilter();\n+        indexScan.setFilter(skipScanFilter);\n+        int rowCount = 0;\n+        try (ResultScanner resultScanner = indexHTable.getScanner(indexScan)) {\n+            for (Result result = resultScanner.next(); (result != null); result = resultScanner.next()) {\n+                Put dataPut = indexKeyToDataPutMap.get(result.getRow());\n+                if (dataPut == null) {\n+                    // This should never happen\n+                    exceptionMessage = \"Index verify failed - Missing data row - \" + indexHTable.getName();\n+                    throw new IOException(exceptionMessage);\n+                }\n+                if (verifySingleIndexRow(result, dataPut)) {\n+                    verificationPhaseResult.setValidIndexRowCount(verificationPhaseResult.getValidIndexRowCount()+1);                    perTaskDataKeyToDataPutMap.remove(dataPut.getRow());\n+                } else {\n+                    verificationPhaseResult.setInvalidIndexRowCount(verificationPhaseResult.getInvalidIndexRowCount()+1);\n+                }\n+                rowCount++;\n+            }\n+        } catch (Throwable t) {\n+            ServerUtil.throwIOException(indexHTable.getName().toString(), t);\n+        }\n+        // Check if any expected rows from index(which we didn't get) are already expired due to TTL\n+        if (!perTaskDataKeyToDataPutMap.isEmpty()) {\n+            Iterator<Entry<byte[], Put>> itr = perTaskDataKeyToDataPutMap.entrySet().iterator();\n+            long currentTime = EnvironmentEdgeManager.currentTime();\n+            while(itr.hasNext()) {\n+                Entry<byte[], Put> entry = itr.next();\n+                long ts = getMaxTimestamp(entry.getValue());\n+                if (isTimestampBeforeTTL(currentTime, ts)) {\n+                    itr.remove();\n+                    rowCount++;\n+                    verificationPhaseResult.setExpiredIndexRowCount(verificationPhaseResult.getExpiredIndexRowCount()+1);                }\n+            }\n+        }\n+        if (rowCount != expectedRowCount) {\n+            verificationPhaseResult.setMissingIndexRowCount(verificationPhaseResult.getMissingIndexRowCount()+expectedRowCount - rowCount);\n+        }\n+    }\n+\n+    private boolean isTimestampBeforeTTL(long currentTime, long tsToCheck) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 334}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDAwOTUzOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowMzowMFrOGGxF5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowMzowMFrOGGxF5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0ODk2Ng==", "bodyText": "No need to have separate config params for this class. Please use the ones from IndexRebuilRegionScanner.", "url": "https://github.com/apache/phoenix/pull/758#discussion_r409748966", "createdAt": "2020-04-16T18:03:00Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDAzMzE1OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowOToyN1rOGGxUjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowOToyN1rOGGxUjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc1MjcxOA==", "bodyText": "This method should also check the max lookback window and update the max lookback counters", "url": "https://github.com/apache/phoenix/pull/758#discussion_r409752718", "createdAt": "2020-04-16T18:09:27Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/IndexerRegionScanner.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import static org.apache.phoenix.hbase.index.write.AbstractParallelWriterIndexCommitter.INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY;\n+import static org.apache.phoenix.query.QueryConstants.AGG_TIMESTAMP;\n+import static org.apache.phoenix.query.QueryConstants.EMPTY_COLUMN_VALUE_BYTES;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN;\n+import static org.apache.phoenix.query.QueryConstants.SINGLE_COLUMN_FAMILY;\n+import static org.apache.phoenix.query.QueryConstants.UNGROUPED_AGG_ROW_KEY;\n+import static org.apache.phoenix.query.QueryServices.INDEX_REBUILD_PAGE_SIZE_IN_ROWS;\n+import static org.apache.phoenix.query.QueryServices.MUTATE_BATCH_SIZE_ATTRIB;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.client.Delete;\n+\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.ResultScanner;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+\n+import org.apache.phoenix.compile.ScanRanges;\n+import org.apache.phoenix.filter.SkipScanFilter;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.EarlyExitFailure;\n+import org.apache.phoenix.hbase.index.parallel.Task;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolBuilder;\n+import org.apache.phoenix.hbase.index.parallel.ThreadPoolManager;\n+import org.apache.phoenix.hbase.index.parallel.WaitForCompletionTaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.hbase.index.util.GenericKeyValueBuilder;\n+import org.apache.phoenix.hbase.index.util.ImmutableBytesPtr;\n+\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.index.PhoenixIndexCodec;\n+import org.apache.phoenix.mapreduce.index.IndexTool;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+import org.apache.phoenix.query.KeyRange;\n+import org.apache.phoenix.query.QueryServicesOptions;\n+import org.apache.phoenix.schema.types.PLong;\n+import org.apache.phoenix.schema.types.PVarbinary;\n+import org.apache.phoenix.util.KeyValueUtil;\n+import org.apache.phoenix.util.ServerUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.collect.Maps;\n+\n+public class IndexerRegionScanner extends BaseRegionScanner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerRegionScanner.class);\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    private static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    private long pageSizeInRows = Long.MAX_VALUE;\n+    private int rowCountPerTask;\n+    private boolean hasMore;\n+    private final int maxBatchSize;\n+    private UngroupedAggregateRegionObserver.MutationList mutations;\n+    private byte[] indexMetaData;\n+    private Scan scan;\n+    private RegionScanner innerScanner;\n+    private Region region;\n+    private IndexMaintainer indexMaintainer;\n+    private Table indexHTable = null;\n+    private IndexTool.IndexVerifyType verifyType = IndexTool.IndexVerifyType.NONE;\n+    private boolean verify = false;\n+    private Map<byte[], Put> indexKeyToDataPutMap;\n+    private Map<byte[], Put> dataKeyToDataPutMap;\n+    private TaskRunner pool;\n+    private TaskBatch<Boolean> tasks;\n+    private String exceptionMessage;\n+    private HTableFactory hTableFactory;\n+    private int indexTableTTL;\n+    private IndexToolVerificationResult verificationResult;\n+\n+    private IndexVerificationResultRepository verificationResultRepository;\n+\n+    IndexerRegionScanner (final RegionScanner innerScanner, final Region region, final Scan scan,\n+            final RegionCoprocessorEnvironment env) throws IOException {\n+        super(innerScanner);\n+        final Configuration config = env.getConfiguration();\n+        if (scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_PAGING) != null) {\n+            pageSizeInRows = config.getLong(INDEX_REBUILD_PAGE_SIZE_IN_ROWS,\n+                    QueryServicesOptions.DEFAULT_INDEX_REBUILD_PAGE_SIZE_IN_ROWS);\n+        }\n+        maxBatchSize = config.getInt(MUTATE_BATCH_SIZE_ATTRIB, QueryServicesOptions.DEFAULT_MUTATE_BATCH_SIZE);\n+        mutations = new UngroupedAggregateRegionObserver.MutationList(maxBatchSize);\n+        indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_PROTO_MD);\n+        if (indexMetaData == null) {\n+            indexMetaData = scan.getAttribute(PhoenixIndexCodec.INDEX_MD);\n+        }\n+        List<IndexMaintainer> maintainers = IndexMaintainer.deserialize(indexMetaData, true);\n+        indexMaintainer = maintainers.get(0);\n+        this.scan = scan;\n+        this.innerScanner = innerScanner;\n+        this.region = region;\n+        byte[] valueBytes = scan.getAttribute(BaseScannerRegionObserver.INDEX_REBUILD_VERIFY_TYPE);\n+        if (valueBytes != null) {\n+            verificationResult = new IndexToolVerificationResult(scan);\n+            verifyType = IndexTool.IndexVerifyType.fromValue(valueBytes);\n+            if (verifyType != IndexTool.IndexVerifyType.NONE) {\n+                verify = true;\n+                // Create the following objects only for rebuilds by IndexTool\n+                hTableFactory = ServerUtil.getDelegateHTableFactory(env, ServerUtil.ConnectionType.INDEX_WRITER_CONNECTION);\n+                indexHTable = hTableFactory.getTable(new ImmutableBytesPtr(indexMaintainer.getIndexTableName()));\n+                indexTableTTL = indexHTable.getTableDescriptor().getColumnFamilies()[0].getTimeToLive();\n+                verificationResultRepository =\n+                        new IndexVerificationResultRepository(indexMaintainer.getIndexTableName(), hTableFactory);\n+                indexKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                dataKeyToDataPutMap = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n+                pool = new WaitForCompletionTaskRunner(ThreadPoolManager.getExecutor(\n+                        new ThreadPoolBuilder(\"IndexVerify\",\n+                                env.getConfiguration()).setMaxThread(NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY,\n+                                DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS).setCoreTimeout(\n+                                INDEX_WRITER_KEEP_ALIVE_TIME_CONF_KEY), env));\n+                rowCountPerTask = config.getInt(INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY,\n+                        DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public HRegionInfo getRegionInfo() {\n+        return region.getRegionInfo();\n+    }\n+\n+    @Override\n+    public boolean isFilterDone() { return false; }\n+\n+    @Override\n+    public void close() throws IOException {\n+        innerScanner.close();\n+        if (verify) {\n+            try {\n+                verificationResultRepository.logToIndexToolResultTable(verificationResult,\n+                        verifyType, region.getRegionInfo().getRegionName());\n+            } finally {\n+                this.pool.stop(\"IndexerRegionScanner is closing\");\n+                hTableFactory.shutdown();\n+                indexHTable.close();\n+                verificationResultRepository.close();\n+            }\n+        }\n+    }\n+\n+    private class SimpleValueGetter implements ValueGetter {\n+        final ImmutableBytesWritable valuePtr = new ImmutableBytesWritable();\n+        final Put put;\n+        SimpleValueGetter (final Put put) {\n+            this.put = put;\n+        }\n+        @Override\n+        public ImmutableBytesWritable getLatestValue(ColumnReference ref, long ts) throws IOException {\n+            List<Cell> cellList = put.get(ref.getFamily(), ref.getQualifier());\n+            if (cellList == null || cellList.isEmpty()) {\n+                return null;\n+            }\n+            Cell cell = cellList.get(0);\n+            valuePtr.set(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n+            return valuePtr;\n+        }\n+\n+        @Override\n+        public byte[] getRowKey() {\n+            return put.getRow();\n+        }\n+\n+    }\n+\n+    private byte[] getIndexRowKey(final Put dataRow) throws IOException {\n+        ValueGetter valueGetter = new SimpleValueGetter(dataRow);\n+        byte[] builtIndexRowKey = indexMaintainer.buildRowKey(valueGetter, new ImmutableBytesWritable(dataRow.getRow()),\n+                null, null, HConstants.LATEST_TIMESTAMP);\n+        return builtIndexRowKey;\n+    }\n+\n+    private long getMaxTimestamp(Put put) {\n+        long ts = 0;\n+        for (List<Cell> cells : put.getFamilyCellMap().values()) {\n+            if (cells == null) {\n+                break;\n+            }\n+            for (Cell cell : cells) {\n+                if (ts < cell.getTimestamp()) {\n+                    ts = cell.getTimestamp();\n+                }\n+            }\n+        }\n+        return ts;\n+    }\n+\n+    private boolean verifySingleIndexRow(Result indexRow, final Put dataRow) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553a812965c93f85ead8bd638efc568aa19e8c6e"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Nzg4MDcwOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/GlobalIndexRegionScanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTo0OToyMVrOGIpILA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTo1MDo1NlrOGIpLfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNTYyOA==", "bodyText": "This constructor can initialize the attributes that are defined in this class. This will allow you to remove the common code from the subclass constructors.", "url": "https://github.com/apache/phoenix/pull/758#discussion_r411715628", "createdAt": "2020-04-20T21:49:21Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/GlobalIndexRegionScanner.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.client.Delete;\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.regionserver.ScanInfoUtil;\n+import org.apache.hadoop.hbase.util.Pair;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public abstract class GlobalIndexRegionScanner extends BaseRegionScanner {\n+\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    public static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    public static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    public static final String NO_EXPECTED_MUTATION = \"No expected mutation\";\n+    public static final String ACTUAL_MUTATION_IS_NULL_OR_EMPTY = \"actualMutationList is null or empty\";\n+    public static final String ERROR_MESSAGE_MISSING_INDEX_ROW_BEYOND_MAX_LOOKBACK = \"Missing index row beyond maxLookBack\";\n+    public static final String ERROR_MESSAGE_MISSING_INDEX_ROW = \"Missing index row\";\n+\n+    protected long pageSizeInRows = Long.MAX_VALUE;\n+    protected int rowCountPerTask;\n+    protected boolean hasMore;\n+    protected int maxBatchSize;\n+    protected UngroupedAggregateRegionObserver.MutationList mutations;\n+    protected byte[] indexMetaData;\n+    protected Scan scan;\n+    protected RegionScanner innerScanner;\n+    protected Region region;\n+    protected IndexMaintainer indexMaintainer;\n+    protected Table indexHTable = null;\n+    protected Map<byte[], Put> indexKeyToDataPutMap;\n+    protected TaskRunner pool;\n+    protected TaskBatch<Boolean> tasks;\n+    protected String exceptionMessage;\n+    protected HTableFactory hTableFactory;\n+    protected int indexTableTTL;\n+    protected long maxLookBackInMills;\n+    protected IndexToolVerificationResult verificationResult;\n+    protected IndexVerificationResultRepository verificationResultRepository;\n+\n+    public GlobalIndexRegionScanner(RegionScanner delegate) {\n+        super(delegate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c1a1011384365d5390a1b343c6beae30f1b9ded"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNjQ3Nw==", "bodyText": "Oh, yeah that's right!", "url": "https://github.com/apache/phoenix/pull/758#discussion_r411716477", "createdAt": "2020-04-20T21:50:56Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/GlobalIndexRegionScanner.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.coprocessor;\n+\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.client.Delete;\n+import org.apache.hadoop.hbase.client.Mutation;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.regionserver.ScanInfoUtil;\n+import org.apache.hadoop.hbase.util.Pair;\n+import org.apache.phoenix.hbase.index.ValueGetter;\n+import org.apache.phoenix.hbase.index.covered.update.ColumnReference;\n+import org.apache.phoenix.hbase.index.parallel.TaskBatch;\n+import org.apache.phoenix.hbase.index.parallel.TaskRunner;\n+import org.apache.phoenix.hbase.index.table.HTableFactory;\n+import org.apache.phoenix.index.IndexMaintainer;\n+import org.apache.phoenix.mapreduce.index.IndexVerificationResultRepository;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public abstract class GlobalIndexRegionScanner extends BaseRegionScanner {\n+\n+    public static final String NUM_CONCURRENT_INDEX_VERIFY_THREADS_CONF_KEY = \"index.verify.threads.max\";\n+    public static final int DEFAULT_CONCURRENT_INDEX_VERIFY_THREADS = 17;\n+    public static final String INDEX_VERIFY_ROW_COUNTS_PER_TASK_CONF_KEY = \"index.verify.threads.max\";\n+    public static final int DEFAULT_INDEX_VERIFY_ROW_COUNTS_PER_TASK = 2048;\n+    public static final String NO_EXPECTED_MUTATION = \"No expected mutation\";\n+    public static final String ACTUAL_MUTATION_IS_NULL_OR_EMPTY = \"actualMutationList is null or empty\";\n+    public static final String ERROR_MESSAGE_MISSING_INDEX_ROW_BEYOND_MAX_LOOKBACK = \"Missing index row beyond maxLookBack\";\n+    public static final String ERROR_MESSAGE_MISSING_INDEX_ROW = \"Missing index row\";\n+\n+    protected long pageSizeInRows = Long.MAX_VALUE;\n+    protected int rowCountPerTask;\n+    protected boolean hasMore;\n+    protected int maxBatchSize;\n+    protected UngroupedAggregateRegionObserver.MutationList mutations;\n+    protected byte[] indexMetaData;\n+    protected Scan scan;\n+    protected RegionScanner innerScanner;\n+    protected Region region;\n+    protected IndexMaintainer indexMaintainer;\n+    protected Table indexHTable = null;\n+    protected Map<byte[], Put> indexKeyToDataPutMap;\n+    protected TaskRunner pool;\n+    protected TaskBatch<Boolean> tasks;\n+    protected String exceptionMessage;\n+    protected HTableFactory hTableFactory;\n+    protected int indexTableTTL;\n+    protected long maxLookBackInMills;\n+    protected IndexToolVerificationResult verificationResult;\n+    protected IndexVerificationResultRepository verificationResultRepository;\n+\n+    public GlobalIndexRegionScanner(RegionScanner delegate) {\n+        super(delegate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNTYyOA=="}, "originalCommit": {"oid": "9c1a1011384365d5390a1b343c6beae30f1b9ded"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Nzk1OTIzOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolForNonTxGlobalIndexIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjoxMzoxMVrOGIp1Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjoxMzoxMVrOGIp1Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyNzE2Ng==", "bodyText": "Thanks for moving the test cases that are specific to non transactional global indexes here. Good idea!", "url": "https://github.com/apache/phoenix/pull/758#discussion_r411727166", "createdAt": "2020-04-20T22:13:11Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolForNonTxGlobalIndexIT.java", "diffHunk": "@@ -0,0 +1,483 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c1a1011384365d5390a1b343c6beae30f1b9ded"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4643, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}