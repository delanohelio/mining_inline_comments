{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5OTk2Mzgy", "number": 735, "title": "PHOENIX-5734 - IndexScrutinyTool should not report rows beyond maxLoo\u2026", "bodyText": "\u2026kBack age", "createdAt": "2020-03-17T18:10:44Z", "url": "https://github.com/apache/phoenix/pull/735", "merged": true, "mergeCommit": {"oid": "5521fd9d130629ac17ba431a423e58e17432e303"}, "closed": true, "closedAt": "2020-03-26T18:03:52Z", "author": {"login": "gjacoby126"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO7ZCTAFqTM3NzExOTIyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRgBKzABqjMxNjk0NDA0NDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTE5MjI1", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377119225", "createdAt": "2020-03-18T18:12:46Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoxMjo0NlrOF4RPXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoxMjo0NlrOF4RPXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NzAzNg==", "bodyText": "aah! nice :)", "url": "https://github.com/apache/phoenix/pull/735#discussion_r394547036", "createdAt": "2020-03-18T18:12:46Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexScrutinyToolBaseIT.java", "diffHunk": "@@ -54,8 +54,9 @@\n                 new ReadOnlyProps(clientProps.entrySet().iterator()));\n     }\n \n-    protected List<Job> runScrutiny(String[] cmdArgs) throws Exception {\n-        IndexScrutinyTool scrutiny = new IndexScrutinyTool(IndexScrutinyMapperForTest.class);\n+    protected List<Job> runScrutiny(Class<? extends IndexScrutinyMapper> mapperClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTQ3NDc5", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377147479", "createdAt": "2020-03-18T18:52:37Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo1MjozN1rOF4Soxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo1MjozN1rOF4Soxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2OTkyNg==", "bodyText": "nit : consider expected size = 2", "url": "https://github.com/apache/phoenix/pull/735#discussion_r394569926", "createdAt": "2020-03-18T18:52:37Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexScrutinyWithMaxLookbackIT.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.end2end;\n+\n+import com.google.common.collect.Maps;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.regionserver.ScanInfoUtil;\n+import org.apache.hadoop.mapreduce.Counters;\n+import org.apache.hadoop.mapreduce.Job;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyMapper;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyTool;\n+import org.apache.phoenix.query.QueryServices;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.apache.phoenix.util.ManualEnvironmentEdge;\n+import org.apache.phoenix.util.MetaDataUtil;\n+import org.apache.phoenix.util.PropertiesUtil;\n+import org.apache.phoenix.util.ReadOnlyProps;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.apache.phoenix.util.TestUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.phoenix.mapreduce.index.IndexScrutinyMapperForTest.MAX_LOOKBACK;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.INVALID_ROW_COUNT;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.BEYOND_MAX_LOOKBACK;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.VALID_ROW_COUNT;\n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class IndexScrutinyWithMaxLookbackIT extends IndexScrutinyToolBaseIT {\n+\n+    private static PreparedStatement upsertDataStmt;\n+    private static String dataTableFullName;\n+    private static String schema;\n+    private static String dataTableName;\n+    private static String indexTableName;\n+    private static String viewName;\n+    private static boolean isViewIndex;\n+    private static ManualEnvironmentEdge testClock;\n+    public static final String UPSERT_DATA = \"UPSERT INTO %s VALUES (?, ?, ?)\";\n+\n+    @BeforeClass\n+    public static synchronized void doSetup() throws Exception {\n+        Map<String, String> props = Maps.newHashMapWithExpectedSize(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTQ4MTc3", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377148177", "createdAt": "2020-03-18T18:53:38Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo1MzozOVrOF4SrDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo1MzozOVrOF4SrDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3MDUxMQ==", "bodyText": "nit: consider prepending \"I_\" and \"D_\" to names", "url": "https://github.com/apache/phoenix/pull/735#discussion_r394570511", "createdAt": "2020-03-18T18:53:39Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexScrutinyWithMaxLookbackIT.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.end2end;\n+\n+import com.google.common.collect.Maps;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.regionserver.ScanInfoUtil;\n+import org.apache.hadoop.mapreduce.Counters;\n+import org.apache.hadoop.mapreduce.Job;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyMapper;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyTool;\n+import org.apache.phoenix.query.QueryServices;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.apache.phoenix.util.ManualEnvironmentEdge;\n+import org.apache.phoenix.util.MetaDataUtil;\n+import org.apache.phoenix.util.PropertiesUtil;\n+import org.apache.phoenix.util.ReadOnlyProps;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.apache.phoenix.util.TestUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.phoenix.mapreduce.index.IndexScrutinyMapperForTest.MAX_LOOKBACK;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.INVALID_ROW_COUNT;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.BEYOND_MAX_LOOKBACK;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.VALID_ROW_COUNT;\n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class IndexScrutinyWithMaxLookbackIT extends IndexScrutinyToolBaseIT {\n+\n+    private static PreparedStatement upsertDataStmt;\n+    private static String dataTableFullName;\n+    private static String schema;\n+    private static String dataTableName;\n+    private static String indexTableName;\n+    private static String viewName;\n+    private static boolean isViewIndex;\n+    private static ManualEnvironmentEdge testClock;\n+    public static final String UPSERT_DATA = \"UPSERT INTO %s VALUES (?, ?, ?)\";\n+\n+    @BeforeClass\n+    public static synchronized void doSetup() throws Exception {\n+        Map<String, String> props = Maps.newHashMapWithExpectedSize(1);\n+        props.put(QueryServices.GLOBAL_INDEX_ROW_AGE_THRESHOLD_TO_DELETE_MS_ATTRIB, Long.toString(0));\n+        props.put(ScanInfoUtil.PHOENIX_MAX_LOOKBACK_AGE_CONF_KEY,\n+            Integer.toString(MAX_LOOKBACK));\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n+\n+    @Test\n+    public void testScrutinyOnRowsBeyondMaxLookBack() throws Exception {\n+        schema = generateUniqueName();\n+        dataTableName = generateUniqueName();\n+        indexTableName = generateUniqueName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTUwMTEz", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377150113", "createdAt": "2020-03-18T18:56:33Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo1NjozM1rOF4SxAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo1NjozM1rOF4SxAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3MjAzNA==", "bodyText": "nit: Would be good to have a comment on what the clock increments are doing.", "url": "https://github.com/apache/phoenix/pull/735#discussion_r394572034", "createdAt": "2020-03-18T18:56:33Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexScrutinyWithMaxLookbackIT.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.end2end;\n+\n+import com.google.common.collect.Maps;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.regionserver.ScanInfoUtil;\n+import org.apache.hadoop.mapreduce.Counters;\n+import org.apache.hadoop.mapreduce.Job;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyMapper;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyTool;\n+import org.apache.phoenix.query.QueryServices;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.apache.phoenix.util.ManualEnvironmentEdge;\n+import org.apache.phoenix.util.MetaDataUtil;\n+import org.apache.phoenix.util.PropertiesUtil;\n+import org.apache.phoenix.util.ReadOnlyProps;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.apache.phoenix.util.TestUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.phoenix.mapreduce.index.IndexScrutinyMapperForTest.MAX_LOOKBACK;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.INVALID_ROW_COUNT;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.BEYOND_MAX_LOOKBACK;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.VALID_ROW_COUNT;\n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class IndexScrutinyWithMaxLookbackIT extends IndexScrutinyToolBaseIT {\n+\n+    private static PreparedStatement upsertDataStmt;\n+    private static String dataTableFullName;\n+    private static String schema;\n+    private static String dataTableName;\n+    private static String indexTableName;\n+    private static String viewName;\n+    private static boolean isViewIndex;\n+    private static ManualEnvironmentEdge testClock;\n+    public static final String UPSERT_DATA = \"UPSERT INTO %s VALUES (?, ?, ?)\";\n+\n+    @BeforeClass\n+    public static synchronized void doSetup() throws Exception {\n+        Map<String, String> props = Maps.newHashMapWithExpectedSize(1);\n+        props.put(QueryServices.GLOBAL_INDEX_ROW_AGE_THRESHOLD_TO_DELETE_MS_ATTRIB, Long.toString(0));\n+        props.put(ScanInfoUtil.PHOENIX_MAX_LOOKBACK_AGE_CONF_KEY,\n+            Integer.toString(MAX_LOOKBACK));\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n+\n+    @Test\n+    public void testScrutinyOnRowsBeyondMaxLookBack() throws Exception {\n+        schema = generateUniqueName();\n+        dataTableName = generateUniqueName();\n+        indexTableName = generateUniqueName();\n+        dataTableFullName = SchemaUtil.getTableName(schema, dataTableName);\n+        isViewIndex = false;\n+        String dataTableDDL = \"CREATE TABLE %s (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, \"\n+            + \"ZIP INTEGER) COLUMN_ENCODED_BYTES=0, VERSIONS=1\";\n+        String indexTableDDL = \"CREATE INDEX %s ON %s (NAME) INCLUDE (ZIP)\";\n+        testClock = new ManualEnvironmentEdge();\n+\n+        try (Connection conn =\n+                 DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            conn.createStatement().execute(String.format(dataTableDDL, dataTableFullName));\n+            conn.createStatement().execute(String.format(indexTableDDL, indexTableName,\n+                dataTableFullName));\n+            conn.commit();\n+        }\n+        upsertDataAndScrutinize(dataTableName, dataTableFullName, testClock);\n+    }\n+\n+    @Test\n+    public void testScrutinyOnRowsBeyondMaxLookback_viewIndex() throws Exception {\n+        schema = \"S\"+generateUniqueName();\n+        dataTableName = \"T\"+generateUniqueName();\n+        dataTableFullName = SchemaUtil.getTableName(schema,dataTableName);\n+        indexTableName = \"VI\"+generateUniqueName();\n+        isViewIndex = true;\n+        viewName = \"V\"+generateUniqueName();\n+        String viewFullName = SchemaUtil.getTableName(schema,viewName);\n+        String dataTableDDL = \"CREATE TABLE %s (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, \"\n+            + \"ZIP INTEGER) COLUMN_ENCODED_BYTES = 0, VERSIONS = 1 \";\n+        String viewDDL = \"CREATE VIEW %s AS SELECT * FROM %s\";\n+        String indexTableDDL = \"CREATE INDEX %s ON %s (NAME) INCLUDE (ZIP) VERSIONS = 1\";\n+        testClock = new ManualEnvironmentEdge();\n+\n+        try (Connection conn =\n+                 DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            conn.createStatement().execute(String.format(dataTableDDL, dataTableFullName));\n+            conn.createStatement().execute(String.format(viewDDL, viewFullName, dataTableFullName));\n+            conn.createStatement().execute(String.format(indexTableDDL, indexTableName,\n+                viewFullName));\n+            conn.commit();\n+        }\n+        upsertDataAndScrutinize(viewName, viewFullName, testClock);\n+    }\n+\n+    private void upsertDataAndScrutinize(String tableName, String tableFullName,\n+                                         ManualEnvironmentEdge testClock)\n+        throws Exception {\n+        try(Connection conn =\n+                DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            // insert two rows\n+            upsertDataStmt = getUpsertDataStmt(tableFullName, conn);\n+\n+            NonParameterizedIndexScrutinyToolIT.upsertRow(upsertDataStmt, 1, \"name-1\", 98051);\n+            NonParameterizedIndexScrutinyToolIT.upsertRow(upsertDataStmt, 2, \"name-2\", 98052);\n+            conn.commit();\n+            long afterInsertSCN = EnvironmentEdgeManager.currentTimeMillis() + 1;\n+            testClock.setValue(afterInsertSCN);\n+            EnvironmentEdgeManager.injectEdge(testClock);\n+            testClock.incrementValue(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTUwNDI1", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377150425", "createdAt": "2020-03-18T18:57:00Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo1NzowMFrOF4SyBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo1NzowMFrOF4SyBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3MjI5NA==", "bodyText": "Suggest to rename this function to be updateIndexRow", "url": "https://github.com/apache/phoenix/pull/735#discussion_r394572294", "createdAt": "2020-03-18T18:57:00Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexScrutinyWithMaxLookbackIT.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.end2end;\n+\n+import com.google.common.collect.Maps;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.regionserver.ScanInfoUtil;\n+import org.apache.hadoop.mapreduce.Counters;\n+import org.apache.hadoop.mapreduce.Job;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyMapper;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyTool;\n+import org.apache.phoenix.query.QueryServices;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.apache.phoenix.util.ManualEnvironmentEdge;\n+import org.apache.phoenix.util.MetaDataUtil;\n+import org.apache.phoenix.util.PropertiesUtil;\n+import org.apache.phoenix.util.ReadOnlyProps;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.apache.phoenix.util.TestUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.phoenix.mapreduce.index.IndexScrutinyMapperForTest.MAX_LOOKBACK;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.INVALID_ROW_COUNT;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.BEYOND_MAX_LOOKBACK;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.VALID_ROW_COUNT;\n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class IndexScrutinyWithMaxLookbackIT extends IndexScrutinyToolBaseIT {\n+\n+    private static PreparedStatement upsertDataStmt;\n+    private static String dataTableFullName;\n+    private static String schema;\n+    private static String dataTableName;\n+    private static String indexTableName;\n+    private static String viewName;\n+    private static boolean isViewIndex;\n+    private static ManualEnvironmentEdge testClock;\n+    public static final String UPSERT_DATA = \"UPSERT INTO %s VALUES (?, ?, ?)\";\n+\n+    @BeforeClass\n+    public static synchronized void doSetup() throws Exception {\n+        Map<String, String> props = Maps.newHashMapWithExpectedSize(1);\n+        props.put(QueryServices.GLOBAL_INDEX_ROW_AGE_THRESHOLD_TO_DELETE_MS_ATTRIB, Long.toString(0));\n+        props.put(ScanInfoUtil.PHOENIX_MAX_LOOKBACK_AGE_CONF_KEY,\n+            Integer.toString(MAX_LOOKBACK));\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n+\n+    @Test\n+    public void testScrutinyOnRowsBeyondMaxLookBack() throws Exception {\n+        schema = generateUniqueName();\n+        dataTableName = generateUniqueName();\n+        indexTableName = generateUniqueName();\n+        dataTableFullName = SchemaUtil.getTableName(schema, dataTableName);\n+        isViewIndex = false;\n+        String dataTableDDL = \"CREATE TABLE %s (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, \"\n+            + \"ZIP INTEGER) COLUMN_ENCODED_BYTES=0, VERSIONS=1\";\n+        String indexTableDDL = \"CREATE INDEX %s ON %s (NAME) INCLUDE (ZIP)\";\n+        testClock = new ManualEnvironmentEdge();\n+\n+        try (Connection conn =\n+                 DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            conn.createStatement().execute(String.format(dataTableDDL, dataTableFullName));\n+            conn.createStatement().execute(String.format(indexTableDDL, indexTableName,\n+                dataTableFullName));\n+            conn.commit();\n+        }\n+        upsertDataAndScrutinize(dataTableName, dataTableFullName, testClock);\n+    }\n+\n+    @Test\n+    public void testScrutinyOnRowsBeyondMaxLookback_viewIndex() throws Exception {\n+        schema = \"S\"+generateUniqueName();\n+        dataTableName = \"T\"+generateUniqueName();\n+        dataTableFullName = SchemaUtil.getTableName(schema,dataTableName);\n+        indexTableName = \"VI\"+generateUniqueName();\n+        isViewIndex = true;\n+        viewName = \"V\"+generateUniqueName();\n+        String viewFullName = SchemaUtil.getTableName(schema,viewName);\n+        String dataTableDDL = \"CREATE TABLE %s (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, \"\n+            + \"ZIP INTEGER) COLUMN_ENCODED_BYTES = 0, VERSIONS = 1 \";\n+        String viewDDL = \"CREATE VIEW %s AS SELECT * FROM %s\";\n+        String indexTableDDL = \"CREATE INDEX %s ON %s (NAME) INCLUDE (ZIP) VERSIONS = 1\";\n+        testClock = new ManualEnvironmentEdge();\n+\n+        try (Connection conn =\n+                 DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            conn.createStatement().execute(String.format(dataTableDDL, dataTableFullName));\n+            conn.createStatement().execute(String.format(viewDDL, viewFullName, dataTableFullName));\n+            conn.createStatement().execute(String.format(indexTableDDL, indexTableName,\n+                viewFullName));\n+            conn.commit();\n+        }\n+        upsertDataAndScrutinize(viewName, viewFullName, testClock);\n+    }\n+\n+    private void upsertDataAndScrutinize(String tableName, String tableFullName,\n+                                         ManualEnvironmentEdge testClock)\n+        throws Exception {\n+        try(Connection conn =\n+                DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            // insert two rows\n+            upsertDataStmt = getUpsertDataStmt(tableFullName, conn);\n+\n+            NonParameterizedIndexScrutinyToolIT.upsertRow(upsertDataStmt, 1, \"name-1\", 98051);\n+            NonParameterizedIndexScrutinyToolIT.upsertRow(upsertDataStmt, 2, \"name-2\", 98052);\n+            conn.commit();\n+            long afterInsertSCN = EnvironmentEdgeManager.currentTimeMillis() + 1;\n+            testClock.setValue(afterInsertSCN);\n+            EnvironmentEdgeManager.injectEdge(testClock);\n+            testClock.incrementValue(1);\n+            testClock.incrementValue(MAX_LOOKBACK /2  * 1000);\n+            long scrutinyTs = EnvironmentEdgeManager.currentTimeMillis();\n+            changeIndexValue();\n+            testClock.incrementValue(MAX_LOOKBACK /2  * 1000);\n+            List<Job> completedJobs = runScrutiny(schema, tableName, indexTableName, scrutinyTs);\n+            Job job = completedJobs.get(0);\n+            assertTrue(job.isSuccessful());\n+            assertCounters(job.getCounters());\n+        }\n+    }\n+    private void changeIndexValue() throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTcxNjk2", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377171696", "createdAt": "2020-03-18T19:28:42Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOToyODo0MlrOF4T0Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOToyODo0MlrOF4T0Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4OTE5NA==", "bodyText": "nit: unnecessary change", "url": "https://github.com/apache/phoenix/pull/735#discussion_r394589194", "createdAt": "2020-03-18T19:28:42Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/test/java/org/apache/phoenix/mapreduce/index/IndexScrutinyMapperForTest.java", "diffHunk": "@@ -23,6 +23,8 @@\n public class IndexScrutinyMapperForTest extends IndexScrutinyMapper {\n \n     public static final int TEST_TABLE_TTL = 3600;\n+    public static final int MAX_LOOKBACK = 6;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTc3Mzk0", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377177394", "createdAt": "2020-03-18T19:37:19Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTozNzoyMFrOF4UFsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTozNzoyMFrOF4UFsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5MzcxMg==", "bodyText": "why do we need them around?", "url": "https://github.com/apache/phoenix/pull/735#discussion_r394593712", "createdAt": "2020-03-18T19:37:20Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexScrutinyMapper.java", "diffHunk": "@@ -288,8 +301,15 @@ protected void checkIfInvalidRowsExpired(Context context,\n             Pair<Long, List<Object>> sourceValues = entry.getValue();\n             Long sourceTS = sourceValues.getFirst();\n             if (hasRowExpiredOnSource(sourceTS, ttl)) {\n-                context.getCounter(PhoenixScrutinyJobCounters.EXPIRED_ROW_COUNT).increment(1);\n-                itr.remove();\n+                context.getCounter(PhoenixScrutinyJobCounters.EXPIRED_ROW_COUNT).increment(1L);\n+                itr.remove(); //don't output to the scrutiny table\n+            } else if (isRowOlderThanMaxLookback(sourceTS)){\n+                context.getCounter(PhoenixScrutinyJobCounters.BEYOND_MAX_LOOKBACK).increment(1L);\n+                //still output to the scrutiny table just in case it's useful", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTc4NTIw", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377178520", "createdAt": "2020-03-18T19:39:11Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTozOToxMVrOF4UJSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTozOToxMVrOF4UJSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5NDYzNQ==", "bodyText": "nit: space before '{' this and some other places.", "url": "https://github.com/apache/phoenix/pull/735#discussion_r394594635", "createdAt": "2020-03-18T19:39:11Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexScrutinyMapper.java", "diffHunk": "@@ -299,7 +319,16 @@ protected boolean hasRowExpiredOnSource(Long sourceTS, Long ttl) {\n         return ttl != Integer.MAX_VALUE && sourceTS + ttl*1000 < currentTS;\n     }\n \n-    private long getTableTtl() throws SQLException, IOException {\n+    protected boolean isRowOlderThanMaxLookback(Long sourceTS){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTg3MDYw", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377187060", "createdAt": "2020-03-18T19:52:03Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTo1MjowM1rOF4UjEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTo1MjowM1rOF4UjEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMTIzMg==", "bodyText": "why not take isNamespaceEnabled property from the config?", "url": "https://github.com/apache/phoenix/pull/735#discussion_r394601232", "createdAt": "2020-03-18T19:52:03Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexScrutinyWithMaxLookbackIT.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.end2end;\n+\n+import com.google.common.collect.Maps;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.regionserver.ScanInfoUtil;\n+import org.apache.hadoop.mapreduce.Counters;\n+import org.apache.hadoop.mapreduce.Job;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyMapper;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyTool;\n+import org.apache.phoenix.query.QueryServices;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.apache.phoenix.util.ManualEnvironmentEdge;\n+import org.apache.phoenix.util.MetaDataUtil;\n+import org.apache.phoenix.util.PropertiesUtil;\n+import org.apache.phoenix.util.ReadOnlyProps;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.apache.phoenix.util.TestUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.phoenix.mapreduce.index.IndexScrutinyMapperForTest.MAX_LOOKBACK;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.INVALID_ROW_COUNT;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.BEYOND_MAX_LOOKBACK;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.VALID_ROW_COUNT;\n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class IndexScrutinyWithMaxLookbackIT extends IndexScrutinyToolBaseIT {\n+\n+    private static PreparedStatement upsertDataStmt;\n+    private static String dataTableFullName;\n+    private static String schema;\n+    private static String dataTableName;\n+    private static String indexTableName;\n+    private static String viewName;\n+    private static boolean isViewIndex;\n+    private static ManualEnvironmentEdge testClock;\n+    public static final String UPSERT_DATA = \"UPSERT INTO %s VALUES (?, ?, ?)\";\n+\n+    @BeforeClass\n+    public static synchronized void doSetup() throws Exception {\n+        Map<String, String> props = Maps.newHashMapWithExpectedSize(1);\n+        props.put(QueryServices.GLOBAL_INDEX_ROW_AGE_THRESHOLD_TO_DELETE_MS_ATTRIB, Long.toString(0));\n+        props.put(ScanInfoUtil.PHOENIX_MAX_LOOKBACK_AGE_CONF_KEY,\n+            Integer.toString(MAX_LOOKBACK));\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n+\n+    @Test\n+    public void testScrutinyOnRowsBeyondMaxLookBack() throws Exception {\n+        schema = generateUniqueName();\n+        dataTableName = generateUniqueName();\n+        indexTableName = generateUniqueName();\n+        dataTableFullName = SchemaUtil.getTableName(schema, dataTableName);\n+        isViewIndex = false;\n+        String dataTableDDL = \"CREATE TABLE %s (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, \"\n+            + \"ZIP INTEGER) COLUMN_ENCODED_BYTES=0, VERSIONS=1\";\n+        String indexTableDDL = \"CREATE INDEX %s ON %s (NAME) INCLUDE (ZIP)\";\n+        testClock = new ManualEnvironmentEdge();\n+\n+        try (Connection conn =\n+                 DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            conn.createStatement().execute(String.format(dataTableDDL, dataTableFullName));\n+            conn.createStatement().execute(String.format(indexTableDDL, indexTableName,\n+                dataTableFullName));\n+            conn.commit();\n+        }\n+        upsertDataAndScrutinize(dataTableName, dataTableFullName, testClock);\n+    }\n+\n+    @Test\n+    public void testScrutinyOnRowsBeyondMaxLookback_viewIndex() throws Exception {\n+        schema = \"S\"+generateUniqueName();\n+        dataTableName = \"T\"+generateUniqueName();\n+        dataTableFullName = SchemaUtil.getTableName(schema,dataTableName);\n+        indexTableName = \"VI\"+generateUniqueName();\n+        isViewIndex = true;\n+        viewName = \"V\"+generateUniqueName();\n+        String viewFullName = SchemaUtil.getTableName(schema,viewName);\n+        String dataTableDDL = \"CREATE TABLE %s (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, \"\n+            + \"ZIP INTEGER) COLUMN_ENCODED_BYTES = 0, VERSIONS = 1 \";\n+        String viewDDL = \"CREATE VIEW %s AS SELECT * FROM %s\";\n+        String indexTableDDL = \"CREATE INDEX %s ON %s (NAME) INCLUDE (ZIP) VERSIONS = 1\";\n+        testClock = new ManualEnvironmentEdge();\n+\n+        try (Connection conn =\n+                 DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            conn.createStatement().execute(String.format(dataTableDDL, dataTableFullName));\n+            conn.createStatement().execute(String.format(viewDDL, viewFullName, dataTableFullName));\n+            conn.createStatement().execute(String.format(indexTableDDL, indexTableName,\n+                viewFullName));\n+            conn.commit();\n+        }\n+        upsertDataAndScrutinize(viewName, viewFullName, testClock);\n+    }\n+\n+    private void upsertDataAndScrutinize(String tableName, String tableFullName,\n+                                         ManualEnvironmentEdge testClock)\n+        throws Exception {\n+        try(Connection conn =\n+                DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            // insert two rows\n+            upsertDataStmt = getUpsertDataStmt(tableFullName, conn);\n+\n+            NonParameterizedIndexScrutinyToolIT.upsertRow(upsertDataStmt, 1, \"name-1\", 98051);\n+            NonParameterizedIndexScrutinyToolIT.upsertRow(upsertDataStmt, 2, \"name-2\", 98052);\n+            conn.commit();\n+            long afterInsertSCN = EnvironmentEdgeManager.currentTimeMillis() + 1;\n+            testClock.setValue(afterInsertSCN);\n+            EnvironmentEdgeManager.injectEdge(testClock);\n+            testClock.incrementValue(1);\n+            testClock.incrementValue(MAX_LOOKBACK /2  * 1000);\n+            long scrutinyTs = EnvironmentEdgeManager.currentTimeMillis();\n+            changeIndexValue();\n+            testClock.incrementValue(MAX_LOOKBACK /2  * 1000);\n+            List<Job> completedJobs = runScrutiny(schema, tableName, indexTableName, scrutinyTs);\n+            Job job = completedJobs.get(0);\n+            assertTrue(job.isSuccessful());\n+            assertCounters(job.getCounters());\n+        }\n+    }\n+    private void changeIndexValue() throws SQLException {\n+        try (Connection conn =\n+                 DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            String tableName = isViewIndex ?\n+                SchemaUtil.getTableName(schema, viewName) : dataTableFullName;\n+            PreparedStatement stmt = getUpsertDataStmt(tableName, conn);\n+            NonParameterizedIndexScrutinyToolIT.upsertRow(stmt, 1, \"name-1\", 38139);\n+            conn.commit();\n+        }\n+    }\n+\n+    private static PreparedStatement getUpsertDataStmt(String tableFullName, Connection conn) throws SQLException {\n+        return conn.prepareStatement(String.format(UPSERT_DATA, tableFullName));\n+    }\n+\n+    private void assertCounters(Counters counters) {\n+        assertEquals(1, getCounterValue(counters, VALID_ROW_COUNT));\n+        assertEquals(1, getCounterValue(counters, BEYOND_MAX_LOOKBACK));\n+        assertEquals(0, getCounterValue(counters, INVALID_ROW_COUNT));\n+    }\n+\n+    private List<Job> runScrutiny(String schemaName, String dataTableName, String indexTableName,\n+                                  Long scrutinyTs)\n+        throws Exception {\n+        return runScrutiny(schemaName, dataTableName, indexTableName, null, null, scrutinyTs);\n+    }\n+\n+    private List<Job> runScrutiny(String schemaName, String dataTableName, String indexTableName,\n+                                  Long batchSize, IndexScrutinyTool.SourceTable sourceTable,\n+                                  Long scrutinyTs) throws Exception {\n+        final String[]\n+            cmdArgs =\n+            getArgValues(schemaName, dataTableName, indexTableName, batchSize, sourceTable,\n+                false, null, null, null, scrutinyTs);\n+        return runScrutiny(MaxLookbackIndexScrutinyMapper.class, cmdArgs);\n+    }\n+\n+    private static class MaxLookbackIndexScrutinyMapper extends IndexScrutinyMapper {\n+        @Override\n+        public void postSetup(){\n+            try {\n+                String tableToCompact;\n+                if (isViewIndex){\n+                    String physicalDataTableName =\n+                        SchemaUtil.getPhysicalHBaseTableName(schema, dataTableName, false).getString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "originalPosition": 191}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTkyMTc0", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377192174", "createdAt": "2020-03-18T19:59:45Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTk4MDUw", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377198050", "createdAt": "2020-03-18T20:08:54Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDowODo1NFrOF4VEaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDowODo1NFrOF4VEaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwOTc3MQ==", "bodyText": "Any reasons to have these empty methods?", "url": "https://github.com/apache/phoenix/pull/735#discussion_r394609771", "createdAt": "2020-03-18T20:08:54Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexScrutinyMapper.java", "diffHunk": "@@ -161,12 +168,22 @@ protected void setup(final Context context) throws IOException, InterruptedExcep\n             LOGGER.info(\"Target table base query: \" + targetTableQuery);\n             md5 = MessageDigest.getInstance(\"MD5\");\n             ttl = getTableTtl();\n+            maxLookbackAgeMillis = ScanInfoUtil.getMaxLookbackInMillis(configuration);\n         } catch (SQLException | NoSuchAlgorithmException e) {\n             tryClosingResourceSilently(this.outputUpsertStmt);\n             tryClosingResourceSilently(this.connection);\n             tryClosingResourceSilently(this.outputConn);\n             throw new RuntimeException(e);\n         }\n+        postSetup();\n+    }\n+\n+    protected void preSetup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTk5OTk5", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377199999", "createdAt": "2020-03-18T20:11:56Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMTo1NlrOF4VKkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMTo1NlrOF4VKkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTM0Nw==", "bodyText": "Is there a chance that people coincidentally pick the same Max lookback age as the default one?", "url": "https://github.com/apache/phoenix/pull/735#discussion_r394611347", "createdAt": "2020-03-18T20:11:56Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexScrutinyTool.java", "diffHunk": "@@ -505,6 +509,18 @@ public int run(String[] args) throws Exception {\n         }\n     }\n \n+    private void validateTimestamp(Configuration configuration, long ts) {\n+        long maxLookBackAge = ScanInfoUtil.getMaxLookbackInMillis(configuration);\n+        if (maxLookBackAge != ScanInfoUtil.DEFAULT_PHOENIX_MAX_LOOKBACK_AGE * 1000L) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwOTUz", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377200953", "createdAt": "2020-03-18T20:13:28Z", "commit": {"oid": "f799d86859f4eaaf6ca8415e3559d2a739d5f9b4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTg4MzQz", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377988343", "createdAt": "2020-03-19T18:29:46Z", "commit": {"oid": "4d4383ce79123ba01271282d6a16ff7e90b26a3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyOTo0N1rOF47SoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoyOTo0N1rOF47SoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzNjAwMA==", "bodyText": "Can we have tests for deletes in addition to upserts? I am also interested in the cases where rows are deleted within the max loopback window and before and after the scn.", "url": "https://github.com/apache/phoenix/pull/735#discussion_r395236000", "createdAt": "2020-03-19T18:29:47Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexScrutinyWithMaxLookbackIT.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.phoenix.end2end;\n+\n+import com.google.common.collect.Maps;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.regionserver.ScanInfoUtil;\n+import org.apache.hadoop.mapreduce.Counters;\n+import org.apache.hadoop.mapreduce.Job;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyMapper;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyTool;\n+import org.apache.phoenix.query.QueryServices;\n+import org.apache.phoenix.util.EnvironmentEdgeManager;\n+import org.apache.phoenix.util.ManualEnvironmentEdge;\n+import org.apache.phoenix.util.MetaDataUtil;\n+import org.apache.phoenix.util.PropertiesUtil;\n+import org.apache.phoenix.util.ReadOnlyProps;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.apache.phoenix.util.TestUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.INVALID_ROW_COUNT;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.BEYOND_MAX_LOOKBACK;\n+import static org.apache.phoenix.mapreduce.index.PhoenixScrutinyJobCounters.VALID_ROW_COUNT;\n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class IndexScrutinyWithMaxLookbackIT extends IndexScrutinyToolBaseIT {\n+\n+    private static PreparedStatement upsertDataStmt;\n+    private static String dataTableFullName;\n+    private static String schema;\n+    private static String dataTableName;\n+    private static String indexTableName;\n+    private static String viewName;\n+    private static boolean isViewIndex;\n+    private static ManualEnvironmentEdge testClock;\n+    public static final String UPSERT_DATA = \"UPSERT INTO %s VALUES (?, ?, ?)\";\n+    public static final int MAX_LOOKBACK = 6;\n+\n+\n+    @BeforeClass\n+    public static synchronized void doSetup() throws Exception {\n+        Map<String, String> props = Maps.newHashMapWithExpectedSize(2);\n+        props.put(QueryServices.GLOBAL_INDEX_ROW_AGE_THRESHOLD_TO_DELETE_MS_ATTRIB, Long.toString(0));\n+        props.put(ScanInfoUtil.PHOENIX_MAX_LOOKBACK_AGE_CONF_KEY,\n+            Integer.toString(MAX_LOOKBACK));\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n+\n+    @Test\n+    public void testScrutinyOnRowsBeyondMaxLookBack() throws Exception {\n+        schema = \"S\" + generateUniqueName();\n+        dataTableName = \"T\" + generateUniqueName();\n+        indexTableName = \"I\" + generateUniqueName();\n+        dataTableFullName = SchemaUtil.getTableName(schema, dataTableName);\n+        isViewIndex = false;\n+        String dataTableDDL = \"CREATE TABLE %s (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, \"\n+            + \"ZIP INTEGER) COLUMN_ENCODED_BYTES=0, VERSIONS=1\";\n+        String indexTableDDL = \"CREATE INDEX %s ON %s (NAME) INCLUDE (ZIP)\";\n+        testClock = new ManualEnvironmentEdge();\n+\n+        try (Connection conn =\n+                 DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            conn.createStatement().execute(String.format(dataTableDDL, dataTableFullName));\n+            conn.createStatement().execute(String.format(indexTableDDL, indexTableName,\n+                dataTableFullName));\n+            conn.commit();\n+        }\n+        upsertDataAndScrutinize(dataTableName, dataTableFullName, testClock);\n+    }\n+\n+    @Test\n+    public void testScrutinyOnRowsBeyondMaxLookback_viewIndex() throws Exception {\n+        schema = \"S\"+generateUniqueName();\n+        dataTableName = \"T\"+generateUniqueName();\n+        dataTableFullName = SchemaUtil.getTableName(schema,dataTableName);\n+        indexTableName = \"VI\"+generateUniqueName();\n+        isViewIndex = true;\n+        viewName = \"V\"+generateUniqueName();\n+        String viewFullName = SchemaUtil.getTableName(schema,viewName);\n+        String dataTableDDL = \"CREATE TABLE %s (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, \"\n+            + \"ZIP INTEGER) COLUMN_ENCODED_BYTES = 0, VERSIONS = 1 \";\n+        String viewDDL = \"CREATE VIEW %s AS SELECT * FROM %s\";\n+        String indexTableDDL = \"CREATE INDEX %s ON %s (NAME) INCLUDE (ZIP) VERSIONS = 1\";\n+        testClock = new ManualEnvironmentEdge();\n+\n+        try (Connection conn =\n+                 DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n+            conn.createStatement().execute(String.format(dataTableDDL, dataTableFullName));\n+            conn.createStatement().execute(String.format(viewDDL, viewFullName, dataTableFullName));\n+            conn.createStatement().execute(String.format(indexTableDDL, indexTableName,\n+                viewFullName));\n+            conn.commit();\n+        }\n+        upsertDataAndScrutinize(viewName, viewFullName, testClock);\n+    }\n+\n+    private void upsertDataAndScrutinize(String tableName, String tableFullName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4383ce79123ba01271282d6a16ff7e90b26a3d"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTkyMDQx", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-377992041", "createdAt": "2020-03-19T18:34:49Z", "commit": {"oid": "4d4383ce79123ba01271282d6a16ff7e90b26a3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODozNDo0OVrOF47d_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODozNDo0OVrOF47d_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzODkxMA==", "bodyText": "In the tests above, major compactions run on both the data and index table. Can we pick only one table for one test, the other for another test, and so on? The interesting problems arise when compaction runs on one table but not on both", "url": "https://github.com/apache/phoenix/pull/735#discussion_r395238910", "createdAt": "2020-03-19T18:34:49Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -317,16 +300,16 @@ public void testRecentMaxVersionsNotCompactedAway() throws Exception {\n             //after flush, check to make sure we can see all three versions at the appropriate times\n             assertMultiVersionLookbacks(dataTableSelectSql, allValues, allSCNs);\n             assertMultiVersionLookbacks(indexTableSelectSql, allValues, allSCNs);\n-            majorCompact(dataTable, EnvironmentEdgeManager.currentTimeMillis());\n-            majorCompact(indexTable, EnvironmentEdgeManager.currentTimeMillis());\n+            majorCompact(dataTable);\n+            majorCompact(indexTable);\n             //after major compaction, check to make sure we can see all three versions\n             // at the appropriate times\n             assertMultiVersionLookbacks(dataTableSelectSql, allValues, allSCNs);\n             assertMultiVersionLookbacks(indexTableSelectSql, allValues, allSCNs);\n             injectEdge.incrementValue(MAX_LOOKBACK_AGE * 1000);\n             long afterLookbackAgeSCN = EnvironmentEdgeManager.currentTimeMillis();\n-            majorCompact(dataTable, afterLookbackAgeSCN);\n-            majorCompact(indexTable, afterLookbackAgeSCN);\n+            majorCompact(dataTable);\n+            majorCompact(indexTable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4383ce79123ba01271282d6a16ff7e90b26a3d"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4Nzc2Mjgw", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-378776280", "createdAt": "2020-03-20T19:59:40Z", "commit": {"oid": "6a6443bd976bd2689722513d3d3367e40140c86b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4Nzc2NDc1", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-378776475", "createdAt": "2020-03-20T19:59:59Z", "commit": {"oid": "6a6443bd976bd2689722513d3d3367e40140c86b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDowMDowMFrOF5hiog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDowMDowMFrOF5hiog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2MjY5MA==", "bodyText": "All counters end with '_COUNT' here ... Perhaps we should remain consistent. That said, 'BEYOND_MAX_LOOKBACK_ROW_COUNT' looks too long. How about 'NO_LOOKBACK_ROW_COUNT'?", "url": "https://github.com/apache/phoenix/pull/735#discussion_r395862690", "createdAt": "2020-03-20T20:00:00Z", "author": {"login": "priyankporwal"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/PhoenixScrutinyJobCounters.java", "diffHunk": "@@ -41,5 +41,11 @@\n     /**\n      * Number of batches processed\n      */\n-    BATCHES_PROCESSED_COUNT;\n+    BATCHES_PROCESSED_COUNT,\n+    /**\n+     * Number of rows in source that became older than the max lookback age while scrutiny\n+     * was comparing them with the target, and didn't match. We break these out separately because\n+     * they could be due to extra versions being compacted, and are harmless.\n+     */\n+    BEYOND_MAX_LOOKBACK;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a6443bd976bd2689722513d3d3367e40140c86b"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4Nzc4NTg4", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-378778588", "createdAt": "2020-03-20T20:03:39Z", "commit": {"oid": "6a6443bd976bd2689722513d3d3367e40140c86b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDowMzozOVrOF5hpBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDowMzozOVrOF5hpBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NDMyNQ==", "bodyText": "when would this be the case? i.e. #CF==0", "url": "https://github.com/apache/phoenix/pull/735#discussion_r395864325", "createdAt": "2020-03-20T20:03:39Z", "author": {"login": "priyankporwal"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/util/SchemaUtil.java", "diffHunk": "@@ -1183,6 +1186,22 @@ public static int getIsNullableInt(boolean isNullable) {\n \t\treturn isNullable ? ResultSetMetaData.columnNullable : ResultSetMetaData.columnNoNulls;\n \t}\n \n+\tpublic static int getTimeToLive(PhoenixConnection conn, String physicalName) throws SQLException {\n+        byte[] tableQualifier = Bytes.toBytes(physicalName);\n+        return getTimeToLive(conn, tableQualifier);\n+    }\n+\n+    public static int getTimeToLive(PhoenixConnection conn, byte[] tableQualifier)\n+     throws SQLException {\n+        HTableDescriptor td = conn.getQueryServices().getTableDescriptor(tableQualifier);\n+        HColumnDescriptor[] cds = td.getColumnFamilies();\n+        if (cds.length > 0){\n+            return cds[0].getTimeToLive();\n+        } else {\n+            return HConstants.FOREVER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a6443bd976bd2689722513d3d3367e40140c86b"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e25ff93732a00a4a5c38edd7463353288aa9a88", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/7e25ff93732a00a4a5c38edd7463353288aa9a88", "committedDate": "2020-03-25T01:46:18Z", "message": "PHOENIX-5734 - IndexScrutinyTool should not report rows beyond maxLookBack age"}, "afterCommit": {"oid": "c274ac28e88f4c103f9b13b37b6a3cc7f9be1123", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/c274ac28e88f4c103f9b13b37b6a3cc7f9be1123", "committedDate": "2020-03-25T16:21:51Z", "message": "PHOENIX-5734 - IndexScrutinyTool should not report rows beyond maxLookBack age"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTc3NTcz", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-381577573", "createdAt": "2020-03-25T22:18:04Z", "commit": {"oid": "c274ac28e88f4c103f9b13b37b6a3cc7f9be1123"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNzI4Mzc4", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-381728378", "createdAt": "2020-03-26T06:24:18Z", "commit": {"oid": "c274ac28e88f4c103f9b13b37b6a3cc7f9be1123"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoyNDoxOFrOF74yyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjoyNDoxOFrOF74yyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0MDgwOA==", "bodyText": "Do we need to do anything to disable COLUMN_ENCODING for clusters with this table already existing?", "url": "https://github.com/apache/phoenix/pull/735#discussion_r398340808", "createdAt": "2020-03-26T06:24:18Z", "author": {"login": "priyankporwal"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexScrutinyTableOutput.java", "diffHunk": "@@ -68,14 +68,18 @@\n             \"    SOURCE_TS BIGINT,\\n\" +\n             \"    TARGET_TS BIGINT,\\n\" +\n             \"    HAS_TARGET_ROW BOOLEAN,\\n\" +\n+            \"    BEYOND_MAX_LOOKBACK BOOLEAN,\\n\" +\n             \"    CONSTRAINT PK PRIMARY KEY\\n\" +\n             \"    (\\n\" +\n             \"        \" + SOURCE_TABLE_COL_NAME + \",\\n\" +\n             \"        \" + TARGET_TABLE_COL_NAME + \",\\n\" +\n             \"        \" + SCRUTINY_EXECUTE_TIME_COL_NAME + \",\\n\" + // time at which the scrutiny ran\n             \"        SOURCE_ROW_PK_HASH\\n\" + //  this hash makes the PK unique\n             \"    )\\n\" + // dynamic columns consisting of the source and target columns will follow\n-            \")\";\n+            \")  COLUMN_ENCODED_BYTES = 0 \"; //column encoding not supported with dyn columns (PHOENIX-5107)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c274ac28e88f4c103f9b13b37b6a3cc7f9be1123"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNzI4NTE4", "url": "https://github.com/apache/phoenix/pull/735#pullrequestreview-381728518", "createdAt": "2020-03-26T06:24:43Z", "commit": {"oid": "c274ac28e88f4c103f9b13b37b6a3cc7f9be1123"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a810fdb8ead861dcd2207e130792f88977a7552c", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/a810fdb8ead861dcd2207e130792f88977a7552c", "committedDate": "2020-03-26T18:00:42Z", "message": "PHOENIX-5734 - IndexScrutinyTool should not report rows beyond maxLookBack age"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c274ac28e88f4c103f9b13b37b6a3cc7f9be1123", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/c274ac28e88f4c103f9b13b37b6a3cc7f9be1123", "committedDate": "2020-03-25T16:21:51Z", "message": "PHOENIX-5734 - IndexScrutinyTool should not report rows beyond maxLookBack age"}, "afterCommit": {"oid": "a810fdb8ead861dcd2207e130792f88977a7552c", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/a810fdb8ead861dcd2207e130792f88977a7552c", "committedDate": "2020-03-26T18:00:42Z", "message": "PHOENIX-5734 - IndexScrutinyTool should not report rows beyond maxLookBack age"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1968, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}