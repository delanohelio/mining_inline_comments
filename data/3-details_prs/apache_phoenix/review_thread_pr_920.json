{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMzEyODc4", "number": 920, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowMTozM1rOEth1ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzozMjo1NVrOEwXfrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTc1ODExOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowMTozM1rOHhXjOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNjoxMDo0OVrOHioPZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MDkwNw==", "bodyText": "byte[] sysMutexPhysicalTableNameBytes = getSysMutexPhysicalTableNameBytes();\nIf I understand correctly what @ChinmaySKulkarni described in the ticket, this call will still result to an admin.tableExists call to check the existance of SYSTEM.MUTEX/SYSTEM:MUTEX and you didn't changed that.", "url": "https://github.com/apache/phoenix/pull/920#discussion_r504750907", "createdAt": "2020-10-14T15:01:33Z", "author": {"login": "richardantal"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4294,11 +4295,9 @@ public boolean acquireUpgradeMutex(long currentServerSideTableTimestamp)\n     public boolean writeMutexCell(String tenantId, String schemaName, String tableName,\n             String columnName, String familyName) throws SQLException {\n         try {\n-            byte[] rowKey =\n-                    columnName != null\n-                            ? SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName,\n-                                familyName)\n-                            : SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n+            byte[] rowKey = columnName != null ?\n+                SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName, familyName) :\n+                SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n             // at this point the system mutex table should have been created or\n             // an exception thrown\n             byte[] sysMutexPhysicalTableNameBytes = getSysMutexPhysicalTableNameBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e3b5d9720a39519b1710642ea2dd19b2ad86b75"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MzEyNA==", "bodyText": "try (Table sysMutexTable = getTable(sysMutexPhysicalTableNameBytes)) {\nInstead We could try the Table sysMutexTable =getTable() call with one of them and catch HBase TableNotFoundException, in that case try with the other one.", "url": "https://github.com/apache/phoenix/pull/920#discussion_r504753124", "createdAt": "2020-10-14T15:04:24Z", "author": {"login": "richardantal"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4294,11 +4295,9 @@ public boolean acquireUpgradeMutex(long currentServerSideTableTimestamp)\n     public boolean writeMutexCell(String tenantId, String schemaName, String tableName,\n             String columnName, String familyName) throws SQLException {\n         try {\n-            byte[] rowKey =\n-                    columnName != null\n-                            ? SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName,\n-                                familyName)\n-                            : SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n+            byte[] rowKey = columnName != null ?\n+                SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName, familyName) :\n+                SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n             // at this point the system mutex table should have been created or\n             // an exception thrown\n             byte[] sysMutexPhysicalTableNameBytes = getSysMutexPhysicalTableNameBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MDkwNw=="}, "originalCommit": {"oid": "5e3b5d9720a39519b1710642ea2dd19b2ad86b75"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1OTQyNA==", "bodyText": "If getSysMutexPhysicalTableNameBytes() start throwing TableNotFoundException, then at this point the Exception would be thrown and caught, so we would not go ahead with next getTable() call.", "url": "https://github.com/apache/phoenix/pull/920#discussion_r504759424", "createdAt": "2020-10-14T15:12:40Z", "author": {"login": "virajjasani"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4294,11 +4295,9 @@ public boolean acquireUpgradeMutex(long currentServerSideTableTimestamp)\n     public boolean writeMutexCell(String tenantId, String schemaName, String tableName,\n             String columnName, String familyName) throws SQLException {\n         try {\n-            byte[] rowKey =\n-                    columnName != null\n-                            ? SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName,\n-                                familyName)\n-                            : SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n+            byte[] rowKey = columnName != null ?\n+                SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName, familyName) :\n+                SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n             // at this point the system mutex table should have been created or\n             // an exception thrown\n             byte[] sysMutexPhysicalTableNameBytes = getSysMutexPhysicalTableNameBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MDkwNw=="}, "originalCommit": {"oid": "5e3b5d9720a39519b1710642ea2dd19b2ad86b75"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MDA2OQ==", "bodyText": "Here is the throw part: https://github.com/apache/phoenix/pull/920/files#diff-539e6818644fa837ebee4e4b61f4c570f75ac439437050c9a0459762ef8e385cR4373", "url": "https://github.com/apache/phoenix/pull/920#discussion_r504760069", "createdAt": "2020-10-14T15:13:29Z", "author": {"login": "virajjasani"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4294,11 +4295,9 @@ public boolean acquireUpgradeMutex(long currentServerSideTableTimestamp)\n     public boolean writeMutexCell(String tenantId, String schemaName, String tableName,\n             String columnName, String familyName) throws SQLException {\n         try {\n-            byte[] rowKey =\n-                    columnName != null\n-                            ? SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName,\n-                                familyName)\n-                            : SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n+            byte[] rowKey = columnName != null ?\n+                SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName, familyName) :\n+                SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n             // at this point the system mutex table should have been created or\n             // an exception thrown\n             byte[] sysMutexPhysicalTableNameBytes = getSysMutexPhysicalTableNameBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MDkwNw=="}, "originalCommit": {"oid": "5e3b5d9720a39519b1710642ea2dd19b2ad86b75"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMDExOA==", "bodyText": "@virajjasani I think there is some confusion here. The aim of this Jira is to reduce the HBase calls to get the table. Currently, the call to writeMutexCell() calls getSysMutexPhysicalTableNameBytes() which does 1 or 2 HBase admin calls (tableExists()) and then we still do a getTable() call here.\nThe same happens for deleteMutexCell().\nInstead of calling getSysMutexPhysicalTableNameBytes(), we can do 1 getTable() call with SYSTEM.MUTEX and if that throws a TNFE, try again with SYSTEM:MUTEX thus eliminating the tableExists() calls.", "url": "https://github.com/apache/phoenix/pull/920#discussion_r505900118", "createdAt": "2020-10-15T22:29:15Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4294,11 +4295,9 @@ public boolean acquireUpgradeMutex(long currentServerSideTableTimestamp)\n     public boolean writeMutexCell(String tenantId, String schemaName, String tableName,\n             String columnName, String familyName) throws SQLException {\n         try {\n-            byte[] rowKey =\n-                    columnName != null\n-                            ? SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName,\n-                                familyName)\n-                            : SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n+            byte[] rowKey = columnName != null ?\n+                SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName, familyName) :\n+                SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n             // at this point the system mutex table should have been created or\n             // an exception thrown\n             byte[] sysMutexPhysicalTableNameBytes = getSysMutexPhysicalTableNameBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MDkwNw=="}, "originalCommit": {"oid": "5e3b5d9720a39519b1710642ea2dd19b2ad86b75"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA3MjkzMw==", "bodyText": "My bad for this misunderstanding. Addressed concerns, updated the PR.", "url": "https://github.com/apache/phoenix/pull/920#discussion_r506072933", "createdAt": "2020-10-16T06:10:49Z", "author": {"login": "virajjasani"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4294,11 +4295,9 @@ public boolean acquireUpgradeMutex(long currentServerSideTableTimestamp)\n     public boolean writeMutexCell(String tenantId, String schemaName, String tableName,\n             String columnName, String familyName) throws SQLException {\n         try {\n-            byte[] rowKey =\n-                    columnName != null\n-                            ? SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName,\n-                                familyName)\n-                            : SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n+            byte[] rowKey = columnName != null ?\n+                SchemaUtil.getColumnKey(tenantId, schemaName, tableName, columnName, familyName) :\n+                SchemaUtil.getTableKey(tenantId, schemaName, tableName);\n             // at this point the system mutex table should have been created or\n             // an exception thrown\n             byte[] sysMutexPhysicalTableNameBytes = getSysMutexPhysicalTableNameBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MDkwNw=="}, "originalCommit": {"oid": "5e3b5d9720a39519b1710642ea2dd19b2ad86b75"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTQ1MTk4OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMjo1NFrOHl3mOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOToxNDoxMVrOHl_kNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MDI2NA==", "bodyText": "nit: table variable is unnecessary here", "url": "https://github.com/apache/phoenix/pull/920#discussion_r509470264", "createdAt": "2020-10-21T17:22:54Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4364,17 +4353,17 @@ public void deleteMutexCell(String tenantId, String schemaName, String tableName\n         }\n     }\n \n-    private byte[] getSysMutexPhysicalTableNameBytes() throws IOException, SQLException {\n-        byte[] sysMutexPhysicalTableNameBytes = null;\n-        try(Admin admin = getAdmin()) {\n-            if(admin.tableExists(PhoenixDatabaseMetaData.SYSTEM_MUTEX_HBASE_TABLE_NAME)) {\n-                sysMutexPhysicalTableNameBytes = PhoenixDatabaseMetaData.SYSTEM_MUTEX_NAME_BYTES;\n-            } else if (admin.tableExists(TableName.valueOf(\n-                    SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName()))) {\n-                sysMutexPhysicalTableNameBytes = SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName();\n+    private Table getSysMutexTable() throws SQLException, IOException {\n+        String table = SYSTEM_MUTEX_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f376592bd41cc38122f4d823b74e2da104f36d22"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYwMDgyMg==", "bodyText": "It's being used here also, hence kept it for simplicity:\n                table = table.replace(QueryConstants.NAME_SEPARATOR,\n                    QueryConstants.NAMESPACE_SEPARATOR);\n\nIs that fine keeping table as is? It might look simplified. Thought?", "url": "https://github.com/apache/phoenix/pull/920#discussion_r509600822", "createdAt": "2020-10-21T19:14:11Z", "author": {"login": "virajjasani"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4364,17 +4353,17 @@ public void deleteMutexCell(String tenantId, String schemaName, String tableName\n         }\n     }\n \n-    private byte[] getSysMutexPhysicalTableNameBytes() throws IOException, SQLException {\n-        byte[] sysMutexPhysicalTableNameBytes = null;\n-        try(Admin admin = getAdmin()) {\n-            if(admin.tableExists(PhoenixDatabaseMetaData.SYSTEM_MUTEX_HBASE_TABLE_NAME)) {\n-                sysMutexPhysicalTableNameBytes = PhoenixDatabaseMetaData.SYSTEM_MUTEX_NAME_BYTES;\n-            } else if (admin.tableExists(TableName.valueOf(\n-                    SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName()))) {\n-                sysMutexPhysicalTableNameBytes = SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName();\n+    private Table getSysMutexTable() throws SQLException, IOException {\n+        String table = SYSTEM_MUTEX_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MDI2NA=="}, "originalCommit": {"oid": "f376592bd41cc38122f4d823b74e2da104f36d22"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTQ3OTIxOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyNzozMlrOHl34kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyNzozMlrOHl34kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3NDk2MQ==", "bodyText": "Please add a unit test for this new method.", "url": "https://github.com/apache/phoenix/pull/920#discussion_r509474961", "createdAt": "2020-10-21T17:27:32Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4364,17 +4353,17 @@ public void deleteMutexCell(String tenantId, String schemaName, String tableName\n         }\n     }\n \n-    private byte[] getSysMutexPhysicalTableNameBytes() throws IOException, SQLException {\n-        byte[] sysMutexPhysicalTableNameBytes = null;\n-        try(Admin admin = getAdmin()) {\n-            if(admin.tableExists(PhoenixDatabaseMetaData.SYSTEM_MUTEX_HBASE_TABLE_NAME)) {\n-                sysMutexPhysicalTableNameBytes = PhoenixDatabaseMetaData.SYSTEM_MUTEX_NAME_BYTES;\n-            } else if (admin.tableExists(TableName.valueOf(\n-                    SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName()))) {\n-                sysMutexPhysicalTableNameBytes = SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName();\n+    private Table getSysMutexTable() throws SQLException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f376592bd41cc38122f4d823b74e2da104f36d22"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTUyMDQ0OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzozMjo1NVrOHl4UIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzoyOTozNFrOHoasTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ4MjAxOA==", "bodyText": "Just want to clarify one thing based on your comment about connection.getTable(). At this point, SYS.MUTEX doesn't exist so we try to retrieve SYS:MUTEX. As per your findings, connection.getTable(SYS:MUTEX) would return a Table object however it is not guaranteed that the table actually exists. This scenario is the same as returning null from the previous getSysMutexPhysicalTableNameBytes() method and then attempting to retrieve a null table.\nCan you confirm that this scenario (probably an impossible one albeit) is safe and we don't run into any weirdness?", "url": "https://github.com/apache/phoenix/pull/920#discussion_r509482018", "createdAt": "2020-10-21T17:32:55Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4364,17 +4353,17 @@ public void deleteMutexCell(String tenantId, String schemaName, String tableName\n         }\n     }\n \n-    private byte[] getSysMutexPhysicalTableNameBytes() throws IOException, SQLException {\n-        byte[] sysMutexPhysicalTableNameBytes = null;\n-        try(Admin admin = getAdmin()) {\n-            if(admin.tableExists(PhoenixDatabaseMetaData.SYSTEM_MUTEX_HBASE_TABLE_NAME)) {\n-                sysMutexPhysicalTableNameBytes = PhoenixDatabaseMetaData.SYSTEM_MUTEX_NAME_BYTES;\n-            } else if (admin.tableExists(TableName.valueOf(\n-                    SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName()))) {\n-                sysMutexPhysicalTableNameBytes = SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName();\n+    private Table getSysMutexTable() throws SQLException, IOException {\n+        String table = SYSTEM_MUTEX_NAME;\n+        TableName tableName = TableName.valueOf(table);\n+        try (Admin admin = getAdmin()) {\n+            if (!admin.tableExists(tableName)) {\n+                table = table.replace(QueryConstants.NAME_SEPARATOR,\n+                    QueryConstants.NAMESPACE_SEPARATOR);\n+                tableName = TableName.valueOf(table);\n             }\n+            return connection.getTable(tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f376592bd41cc38122f4d823b74e2da104f36d22"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUwOTcyNw==", "bodyText": "This scenario is the same as returning null from the previous getSysMutexPhysicalTableNameBytes() method and then attempting to retrieve a null table.\n\nBasically, we are certain that either SYSTEM.MUTEX or SYSTEM:MUTEX exist at any point in time right? e.g if we are performing namespace upgrade (e.g MigrateSystemTablesToSystemNamespaceIT test), when SYSTEM.MUTEX no longer exists, if we call HBaseFactoryProvider.getHTableFactory().getTable(), it does return Table object, it doesn't return null as such. However, using that table object, we can't perform any operation because actual table would not exist.\nAs for this comment, the scenario is not same as previous getSysMutexPhysicalTableNameBytes() because when we reach at this point, based on above Admin.tableExists() call, we would call connection.getTable() with correct table name only (I hope we never have situation where SYSTEM.MUTEX and SYSTEM:MUTEX both are dropped. Should we really worry about this case?)", "url": "https://github.com/apache/phoenix/pull/920#discussion_r509509727", "createdAt": "2020-10-21T17:52:53Z", "author": {"login": "virajjasani"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4364,17 +4353,17 @@ public void deleteMutexCell(String tenantId, String schemaName, String tableName\n         }\n     }\n \n-    private byte[] getSysMutexPhysicalTableNameBytes() throws IOException, SQLException {\n-        byte[] sysMutexPhysicalTableNameBytes = null;\n-        try(Admin admin = getAdmin()) {\n-            if(admin.tableExists(PhoenixDatabaseMetaData.SYSTEM_MUTEX_HBASE_TABLE_NAME)) {\n-                sysMutexPhysicalTableNameBytes = PhoenixDatabaseMetaData.SYSTEM_MUTEX_NAME_BYTES;\n-            } else if (admin.tableExists(TableName.valueOf(\n-                    SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName()))) {\n-                sysMutexPhysicalTableNameBytes = SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName();\n+    private Table getSysMutexTable() throws SQLException, IOException {\n+        String table = SYSTEM_MUTEX_NAME;\n+        TableName tableName = TableName.valueOf(table);\n+        try (Admin admin = getAdmin()) {\n+            if (!admin.tableExists(tableName)) {\n+                table = table.replace(QueryConstants.NAME_SEPARATOR,\n+                    QueryConstants.NAMESPACE_SEPARATOR);\n+                tableName = TableName.valueOf(table);\n             }\n+            return connection.getTable(tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ4MjAxOA=="}, "originalCommit": {"oid": "f376592bd41cc38122f4d823b74e2da104f36d22"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2MTI2NQ==", "bodyText": "On high level, connection.getTable() will never return null, it will return new Table object even for non existing tables, so we won't encounter NPE due to this for sure. However, I believe we should make just one API call admin.tableExists() so that we will know either SYSTEM.MUTEX or SYSTEM:MUTEX exist at any time. Sounds good?", "url": "https://github.com/apache/phoenix/pull/920#discussion_r511761265", "createdAt": "2020-10-26T07:32:37Z", "author": {"login": "virajjasani"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4364,17 +4353,17 @@ public void deleteMutexCell(String tenantId, String schemaName, String tableName\n         }\n     }\n \n-    private byte[] getSysMutexPhysicalTableNameBytes() throws IOException, SQLException {\n-        byte[] sysMutexPhysicalTableNameBytes = null;\n-        try(Admin admin = getAdmin()) {\n-            if(admin.tableExists(PhoenixDatabaseMetaData.SYSTEM_MUTEX_HBASE_TABLE_NAME)) {\n-                sysMutexPhysicalTableNameBytes = PhoenixDatabaseMetaData.SYSTEM_MUTEX_NAME_BYTES;\n-            } else if (admin.tableExists(TableName.valueOf(\n-                    SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName()))) {\n-                sysMutexPhysicalTableNameBytes = SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName();\n+    private Table getSysMutexTable() throws SQLException, IOException {\n+        String table = SYSTEM_MUTEX_NAME;\n+        TableName tableName = TableName.valueOf(table);\n+        try (Admin admin = getAdmin()) {\n+            if (!admin.tableExists(tableName)) {\n+                table = table.replace(QueryConstants.NAME_SEPARATOR,\n+                    QueryConstants.NAMESPACE_SEPARATOR);\n+                tableName = TableName.valueOf(table);\n             }\n+            return connection.getTable(tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ4MjAxOA=="}, "originalCommit": {"oid": "f376592bd41cc38122f4d823b74e2da104f36d22"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0MjQxNA==", "bodyText": "Got it. Makes sense", "url": "https://github.com/apache/phoenix/pull/920#discussion_r512142414", "createdAt": "2020-10-26T17:29:34Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -4364,17 +4353,17 @@ public void deleteMutexCell(String tenantId, String schemaName, String tableName\n         }\n     }\n \n-    private byte[] getSysMutexPhysicalTableNameBytes() throws IOException, SQLException {\n-        byte[] sysMutexPhysicalTableNameBytes = null;\n-        try(Admin admin = getAdmin()) {\n-            if(admin.tableExists(PhoenixDatabaseMetaData.SYSTEM_MUTEX_HBASE_TABLE_NAME)) {\n-                sysMutexPhysicalTableNameBytes = PhoenixDatabaseMetaData.SYSTEM_MUTEX_NAME_BYTES;\n-            } else if (admin.tableExists(TableName.valueOf(\n-                    SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName()))) {\n-                sysMutexPhysicalTableNameBytes = SchemaUtil.getPhysicalTableName(SYSTEM_MUTEX_NAME, props).getName();\n+    private Table getSysMutexTable() throws SQLException, IOException {\n+        String table = SYSTEM_MUTEX_NAME;\n+        TableName tableName = TableName.valueOf(table);\n+        try (Admin admin = getAdmin()) {\n+            if (!admin.tableExists(tableName)) {\n+                table = table.replace(QueryConstants.NAME_SEPARATOR,\n+                    QueryConstants.NAMESPACE_SEPARATOR);\n+                tableName = TableName.valueOf(table);\n             }\n+            return connection.getTable(tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ4MjAxOA=="}, "originalCommit": {"oid": "f376592bd41cc38122f4d823b74e2da104f36d22"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4618, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}