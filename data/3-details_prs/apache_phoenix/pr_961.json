{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODE0MjIz", "number": 961, "title": "PHOENIX-6218 Rows deleted count is incorrect for immutable tables with indexes", "bodyText": "MutationState.join() ignores index rows in row count so totalRowCount calculated\nwill reflect the data table always and the index table only if the bestPlan\nuses the index table. So ignore the other index tables when determining\nthe number of tables updated.", "createdAt": "2020-11-10T22:58:46Z", "url": "https://github.com/apache/phoenix/pull/961", "merged": true, "mergeCommit": {"oid": "b97696bac07adaf4e6df9c6cefba45de2a082c32"}, "closed": true, "closedAt": "2020-11-13T19:11:20Z", "author": {"login": "tkhurana"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbRfCugH2gAyNTE4ODE0MjIzOjdiNjExMWI2ZDRjNTU1YmQ3N2RmYzBjN2I1ZDBhMWEzODcwNjQwNGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcMC88AFqTUzMDMzNDcyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7b6111b6d4c555bd77dfc0c7b5d0a1a38706404c", "author": {"user": {"login": "tkhurana", "name": null}}, "url": "https://github.com/apache/phoenix/commit/7b6111b6d4c555bd77dfc0c7b5d0a1a38706404c", "committedDate": "2020-11-10T22:55:29Z", "message": "PHOENIX-6218 Rows deleted count is incorrect for immutable tables with indexes\n\nMutationState.join() ignores index rows in row count so totalRowCount calculated\nwill reflect the data table always and the index table only if the bestPlan\nuses the index table. So ignore the other index tables when determining\nthe number of tables updated."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDE4Mjcx", "url": "https://github.com/apache/phoenix/pull/961#pullrequestreview-528418271", "createdAt": "2020-11-11T18:10:29Z", "commit": {"oid": "7b6111b6d4c555bd77dfc0c7b5d0a1a38706404c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d3ed1db669777174bf869876fc73cacab71c3e7", "author": {"user": {"login": "tkhurana", "name": null}}, "url": "https://github.com/apache/phoenix/commit/3d3ed1db669777174bf869876fc73cacab71c3e7", "committedDate": "2020-11-12T04:32:19Z", "message": "Always return the number of rows deleted in the mutation state object.\nThis way we don't have to fix the inflated row count by dividing the\nnumber of tables updated.\nWorks for DELETE queries with and without LIMIT filter."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTY0MzYw", "url": "https://github.com/apache/phoenix/pull/961#pullrequestreview-529564360", "createdAt": "2020-11-12T22:48:56Z", "commit": {"oid": "3d3ed1db669777174bf869876fc73cacab71c3e7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjo0ODo1N1rOHyRvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjo1MToxMVrOHyR1_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MTQ1Nw==", "bodyText": "Setup code looks copy-pasted multiple times; could you please extract to a helper method?", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522481457", "createdAt": "2020-11-12T22:48:57Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/ImmutableIndexIT.java", "diffHunk": "@@ -630,4 +632,181 @@ public Thread newThread(Runnable r) {\n         }\n     }\n \n+    @Test\n+    public void testDeleteCount_PK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE ID > 5\");\n+            assertEquals(5, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_nonPK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6\");\n+            assertEquals(5, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_limit() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6 LIMIT 3\");\n+            assertEquals(3, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_noCoveredColumn() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3ed1db669777174bf869876fc73cacab71c3e7"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzE5Nw==", "bodyText": "is there a reason we need this test carried over from the immutable index test but not the others?", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522483197", "createdAt": "2020-11-12T22:51:11Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/MutableIndexIT.java", "diffHunk": "@@ -899,6 +899,39 @@ public void testUpdateNonIndexedColumn() throws Exception {\n       }\n   }\n \n+    @Test\n+    public void testDeleteCount_nonPK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3ed1db669777174bf869876fc73cacab71c3e7"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a511e38519d7de9658dd7d6bdd4f061f45f70ed2", "author": {"user": {"login": "tkhurana", "name": null}}, "url": "https://github.com/apache/phoenix/commit/a511e38519d7de9658dd7d6bdd4f061f45f70ed2", "committedDate": "2020-11-13T02:16:15Z", "message": "Refactor tests to reduce duplicate code. Also, added similar tests for\nmutable indexes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7f744ac7e55f8a0f55d6e13027f1382a5ded751", "author": {"user": {"login": "tkhurana", "name": null}}, "url": "https://github.com/apache/phoenix/commit/f7f744ac7e55f8a0f55d6e13027f1382a5ded751", "committedDate": "2020-11-13T00:41:00Z", "message": "Refactor tests to reduce duplicate code. Also, added similar tests for\nmutable indexes."}, "afterCommit": {"oid": "a511e38519d7de9658dd7d6bdd4f061f45f70ed2", "author": {"user": {"login": "tkhurana", "name": null}}, "url": "https://github.com/apache/phoenix/commit/a511e38519d7de9658dd7d6bdd4f061f45f70ed2", "committedDate": "2020-11-13T02:16:15Z", "message": "Refactor tests to reduce duplicate code. Also, added similar tests for\nmutable indexes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMzM0NzI1", "url": "https://github.com/apache/phoenix/pull/961#pullrequestreview-530334725", "createdAt": "2020-11-13T19:09:12Z", "commit": {"oid": "a511e38519d7de9658dd7d6bdd4f061f45f70ed2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1840, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}