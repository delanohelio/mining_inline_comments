{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODE0MjIz", "number": 961, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjo0ODo1NlrOE4YywA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjo1MToxMVrOE4Y3Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTYxOTIwOnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/ImmutableIndexIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjo0ODo1N1rOHyRvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjo1NToyMVrOHySCKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MTQ1Nw==", "bodyText": "Setup code looks copy-pasted multiple times; could you please extract to a helper method?", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522481457", "createdAt": "2020-11-12T22:48:57Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/ImmutableIndexIT.java", "diffHunk": "@@ -630,4 +632,181 @@ public Thread newThread(Runnable r) {\n         }\n     }\n \n+    @Test\n+    public void testDeleteCount_PK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE ID > 5\");\n+            assertEquals(5, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_nonPK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6\");\n+            assertEquals(5, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_limit() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6 LIMIT 3\");\n+            assertEquals(3, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_noCoveredColumn() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3ed1db669777174bf869876fc73cacab71c3e7"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4NjMxMg==", "bodyText": "Sure, will do that", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522486312", "createdAt": "2020-11-12T22:55:21Z", "author": {"login": "tkhurana"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/ImmutableIndexIT.java", "diffHunk": "@@ -630,4 +632,181 @@ public Thread newThread(Runnable r) {\n         }\n     }\n \n+    @Test\n+    public void testDeleteCount_PK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE ID > 5\");\n+            assertEquals(5, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_nonPK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6\");\n+            assertEquals(5, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_limit() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6 LIMIT 3\");\n+            assertEquals(3, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_noCoveredColumn() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MTQ1Nw=="}, "originalCommit": {"oid": "3d3ed1db669777174bf869876fc73cacab71c3e7"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTYzMDE1OnYy", "diffSide": "RIGHT", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/MutableIndexIT.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjo1MToxMVrOHyR1_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzozNDoyNlrOHyTNHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzE5Nw==", "bodyText": "is there a reason we need this test carried over from the immutable index test but not the others?", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522483197", "createdAt": "2020-11-12T22:51:11Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/MutableIndexIT.java", "diffHunk": "@@ -899,6 +899,39 @@ public void testUpdateNonIndexedColumn() throws Exception {\n       }\n   }\n \n+    @Test\n+    public void testDeleteCount_nonPK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3ed1db669777174bf869876fc73cacab71c3e7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5NzQ3MQ==", "bodyText": "I just wanted to make sure I didn't break anything for mutable indexes so added a test to verify. The bug only applies to immutable index but the code is shared between both immutable and mutable. I could carry all the tests. What do you suggest ? @gjacoby126", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522497471", "createdAt": "2020-11-12T23:21:15Z", "author": {"login": "tkhurana"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/MutableIndexIT.java", "diffHunk": "@@ -899,6 +899,39 @@ public void testUpdateNonIndexedColumn() throws Exception {\n       }\n   }\n \n+    @Test\n+    public void testDeleteCount_nonPK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzE5Nw=="}, "originalCommit": {"oid": "3d3ed1db669777174bf869876fc73cacab71c3e7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwMTk2NQ==", "bodyText": "I'd lean toward carrying them all over. It seems like we had a testing gap around affected row counts and you've written a good set of tests to cover that gap for both kinds of table (even if we have no reason to think there's anything wrong with mutable tables).\nWith the right common helper methods it won't add much code and I don't expect it to lengthen test suite runtime much.", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522501965", "createdAt": "2020-11-12T23:29:19Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/MutableIndexIT.java", "diffHunk": "@@ -899,6 +899,39 @@ public void testUpdateNonIndexedColumn() throws Exception {\n       }\n   }\n \n+    @Test\n+    public void testDeleteCount_nonPK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzE5Nw=="}, "originalCommit": {"oid": "3d3ed1db669777174bf869876fc73cacab71c3e7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNTUwMg==", "bodyText": "Sounds good", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522505502", "createdAt": "2020-11-12T23:34:26Z", "author": {"login": "tkhurana"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/MutableIndexIT.java", "diffHunk": "@@ -899,6 +899,39 @@ public void testUpdateNonIndexedColumn() throws Exception {\n       }\n   }\n \n+    @Test\n+    public void testDeleteCount_nonPK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzE5Nw=="}, "originalCommit": {"oid": "3d3ed1db669777174bf869876fc73cacab71c3e7"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4563, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}