{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzQxNTEw", "number": 679, "title": "PHOENIX-5645 - BaseScannerRegionObserver should prevent compaction from purg\u2026", "bodyText": "\u2026ing very recently deleted cells (addendum)", "createdAt": "2020-01-13T21:56:32Z", "url": "https://github.com/apache/phoenix/pull/679", "merged": true, "mergeCommit": {"oid": "164305aad6c0a9a770ad506d92fcf1cbb57e9e20"}, "closed": true, "closedAt": "2020-01-15T02:37:08Z", "author": {"login": "gjacoby126"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6EmGFABqjI5NDUwODU1Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6cOYNgFqTM0Mjk1OTQ5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5080163e27640e44e0d56b291309dffbbed96872", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/5080163e27640e44e0d56b291309dffbbed96872", "committedDate": "2020-01-13T21:55:49Z", "message": "PHOENIX-5645 - GlobalIndexChecker should prevent compaction from purging very recently deleted cells (addendum)"}, "afterCommit": {"oid": "d6db13289202c5c2ae4a8f59e3f6c57b8f20d179", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/d6db13289202c5c2ae4a8f59e3f6c57b8f20d179", "committedDate": "2020-01-13T23:03:25Z", "message": "PHOENIX-5645 - GlobalIndexChecker should prevent compaction from purging very recently deleted cells (addendum)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6db13289202c5c2ae4a8f59e3f6c57b8f20d179", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/d6db13289202c5c2ae4a8f59e3f6c57b8f20d179", "committedDate": "2020-01-13T23:03:25Z", "message": "PHOENIX-5645 - GlobalIndexChecker should prevent compaction from purging very recently deleted cells (addendum)"}, "afterCommit": {"oid": "986bd50c2f8518b61afc4613438d39ee485b3c80", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/986bd50c2f8518b61afc4613438d39ee485b3c80", "committedDate": "2020-01-14T19:00:06Z", "message": "PHOENIX-5645 - GlobalIndexChecker should prevent compaction from purging very recently deleted cells (addendum)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/28edd1500a192ab700a56569f074503db7e409d4", "committedDate": "2020-01-14T21:44:21Z", "message": "PHOENIX-5645 - GlobalIndexChecker should prevent compaction from purging very recently deleted cells (addendum)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "986bd50c2f8518b61afc4613438d39ee485b3c80", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/986bd50c2f8518b61afc4613438d39ee485b3c80", "committedDate": "2020-01-14T19:00:06Z", "message": "PHOENIX-5645 - GlobalIndexChecker should prevent compaction from purging very recently deleted cells (addendum)"}, "afterCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/28edd1500a192ab700a56569f074503db7e409d4", "committedDate": "2020-01-14T21:44:21Z", "message": "PHOENIX-5645 - GlobalIndexChecker should prevent compaction from purging very recently deleted cells (addendum)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODYwMTcw", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342860170", "createdAt": "2020-01-14T21:46:35Z", "commit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo0NjozNVrOFdm1UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo0NjozNVrOFdm1UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4OTI2NQ==", "bodyText": "Can we write the unit as part of const name?", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366589265", "createdAt": "2020-01-14T21:46:35Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -59,10 +57,31 @@\n @NeedsOwnMiniClusterTest\n public class MaxLookbackIT extends BaseUniqueNamesOwnClusterIT {\n     private static final Log LOG = LogFactory.getLog(MaxLookbackIT.class);\n-    private static final int MAX_LOOKBACK_AGE = 10;\n+    private static final int MAX_LOOKBACK_AGE = 15;\n     private static final int ROWS_POPULATED = 2;\n+    public static final int WAIT_AFTER_TABLE_CREATION = 600000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODYxMDAz", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342861003", "createdAt": "2020-01-14T21:48:12Z", "commit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo0ODoxM1rOFdm39g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo0ODoxM1rOFdm39g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4OTk0Mg==", "bodyText": "nit: remove commented code", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366589942", "createdAt": "2020-01-14T21:48:13Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1);\n+            long afterFirstInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasTtl(conn, dataTable, ttl);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertTableHasTtl(conn, indexTable, ttl);\n-\n             //first make sure we inserted correctly\n-            String sql = String.format(\"SELECT val2 FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT val2 FROM %s WHERE id = 'a'\", dataTableName);\n+          //  assertExplainPlan(conn, sql, dataTableName, fullIndexName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 216}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODY2MDY3", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342866067", "createdAt": "2020-01-14T21:57:28Z", "commit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1NzoyOVrOFdnHpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1NzoyOVrOFdnHpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mzk1Nw==", "bodyText": "nit: remove commented code", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366593957", "createdAt": "2020-01-14T21:57:29Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1);\n+            long afterFirstInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasTtl(conn, dataTable, ttl);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertTableHasTtl(conn, indexTable, ttl);\n-\n             //first make sure we inserted correctly\n-            String sql = String.format(\"SELECT val2 FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT val2 FROM %s WHERE id = 'a'\", dataTableName);\n+          //  assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n             assertRowExistsAtSCN(getUrl(),sql, afterFirstInsertSCN, true);\n             int originalRowCount = 2;\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n             //force a flush\n-            flush(indexTable);\n+            flush(dataTable);\n             //flush shouldn't have changed it\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n+                      // assertExplainPlan(conn, sql, dataTableName, fullIndexName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 227}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODY2MjA3", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342866207", "createdAt": "2020-01-14T21:57:43Z", "commit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1Nzo0M1rOFdnIDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1Nzo0M1rOFdnIDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NDA2MQ==", "bodyText": "nit: remove commented code", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366594061", "createdAt": "2020-01-14T21:57:43Z", "author": {"login": "gokceni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1);\n+            long afterFirstInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasTtl(conn, dataTable, ttl);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertTableHasTtl(conn, indexTable, ttl);\n-\n             //first make sure we inserted correctly\n-            String sql = String.format(\"SELECT val2 FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT val2 FROM %s WHERE id = 'a'\", dataTableName);\n+          //  assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n             assertRowExistsAtSCN(getUrl(),sql, afterFirstInsertSCN, true);\n             int originalRowCount = 2;\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n             //force a flush\n-            flush(indexTable);\n+            flush(dataTable);\n             //flush shouldn't have changed it\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n+                      // assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            long timeToSleep = (MAX_LOOKBACK_AGE * 1000) -\n+                (EnvironmentEdgeManager.currentTimeMillis() - afterFirstInsertSCN);\n+            if (timeToSleep > 0) {\n+                injectEdge.incValue(timeToSleep);\n+                //Thread.sleep(timeToSleep);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 232}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODk4NDY0", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342898464", "createdAt": "2020-01-14T23:05:56Z", "commit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzowNTo1N1rOFdos1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzowNTo1N1rOFdos1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxOTg2MA==", "bodyText": "does this value change now?", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366619860", "createdAt": "2020-01-14T23:05:57Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -105,60 +129,52 @@ public void testTooLowSCNWithMaxLookbackAge() throws Exception {\n     public void testRecentlyDeletedRowsNotCompactedAway() throws Exception {\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            String fullIndexName = indexStem + \"1\";\n+            createTable(dataTableName);\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n             TableName dataTable = TableName.valueOf(dataTableName);\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n-            assertTableHasTtl(conn, indexTable, Integer.MAX_VALUE);\n-            long beforeDeleteSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n-            Thread.sleep(1); //make sure we delete at a different ts\n+            populateTable(dataTableName);\n+            //make sure we're after the inserts have been committed\n+            injectEdge.incValue(1);\n+            long beforeDeleteSCN = EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(10); //make sure we delete at a different ts\n             Statement stmt = conn.createStatement();\n             stmt.execute(\"DELETE FROM \" + dataTableName + \" WHERE \" + \" id = 'a'\");\n             Assert.assertEquals(1, stmt.getUpdateCount());\n             conn.commit();\n             //select stmt to get row we deleted\n-            String sql = String.format(\"SELECT * FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT * FROM %s WHERE id = 'a'\", dataTableName);\n             int rowsPlusDeleteMarker = ROWS_POPULATED;\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n             flush(dataTable);\n-            flush(indexTable);\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n-            long beforeFirstCompactSCN = EnvironmentEdgeManager.currentTime();\n-            Thread.sleep(1);\n-            majorCompact(indexTable, beforeFirstCompactSCN);\n-            assertRawRowCount(conn, indexTable, rowsPlusDeleteMarker);\n+            long beforeFirstCompactSCN = EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(1); //new ts for major compaction\n+            majorCompact(dataTable, beforeFirstCompactSCN);\n+            assertRawRowCount(conn, dataTable, rowsPlusDeleteMarker);\n             assertRowExistsAtSCN(getUrl(), sql, beforeDeleteSCN, true);\n             //wait for the lookback time. After this compactions should purge the deleted row\n-            Thread.sleep(MAX_LOOKBACK_AGE * 1000);\n-            long beforeSecondCompactSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            injectEdge.incValue(MAX_LOOKBACK_AGE * 1000);\n+            long beforeSecondCompactSCN = EnvironmentEdgeManager.currentTimeMillis();\n             String notDeletedRowSql =\n-                String.format(\"SELECT * FROM %s WHERE val1 = 'bc'\", dataTableName);\n-            assertExplainPlan(conn, notDeletedRowSql, dataTableName, fullIndexName);\n+                String.format(\"SELECT * FROM %s WHERE id = 'b'\", dataTableName);\n             assertRowExistsAtSCN(getUrl(), notDeletedRowSql, beforeSecondCompactSCN, true);\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n             assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n             conn.createStatement().execute(\"upsert into \" + dataTableName +\n                 \" values ('c', 'cd', 'cde', 'cdef')\");\n             conn.commit();\n-            majorCompact(indexTable, beforeSecondCompactSCN);\n             majorCompact(dataTable, beforeSecondCompactSCN);\n             assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n             //deleted row should be gone, but not deleted row should still be there.\n             assertRowExistsAtSCN(getUrl(), sql, beforeSecondCompactSCN, false);\n             assertRowExistsAtSCN(getUrl(), notDeletedRowSql, beforeSecondCompactSCN, true);\n             //1 deleted row should be gone\n-            assertRawRowCount(conn, indexTable, ROWS_POPULATED);\n+            assertRawRowCount(conn, dataTable, ROWS_POPULATED);\n         }\n     }\n \n     @Test(timeout=60000L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 186}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODk4NzUw", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342898750", "createdAt": "2020-01-14T23:06:38Z", "commit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzowNjozOFrOFdotrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzowNjozOFrOFdotrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMDA3Nw==", "bodyText": "nit : timeToAdvance sounds better than timeToSleep to me", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366620077", "createdAt": "2020-01-14T23:06:38Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1);\n+            long afterFirstInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasTtl(conn, dataTable, ttl);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);\n-            assertTableHasTtl(conn, indexTable, ttl);\n-\n             //first make sure we inserted correctly\n-            String sql = String.format(\"SELECT val2 FROM %s WHERE val1 = 'ab'\", dataTableName);\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            String sql = String.format(\"SELECT val2 FROM %s WHERE id = 'a'\", dataTableName);\n+          //  assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n             assertRowExistsAtSCN(getUrl(),sql, afterFirstInsertSCN, true);\n             int originalRowCount = 2;\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n             //force a flush\n-            flush(indexTable);\n+            flush(dataTable);\n             //flush shouldn't have changed it\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n+                      // assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n+            long timeToSleep = (MAX_LOOKBACK_AGE * 1000) -\n+                (EnvironmentEdgeManager.currentTimeMillis() - afterFirstInsertSCN);\n+            if (timeToSleep > 0) {\n+                injectEdge.incValue(timeToSleep);\n+                //Thread.sleep(timeToSleep);\n+            }\n+            //make sure it's still on disk\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n+            injectEdge.incValue(1); //get a new timestamp for compaction\n+            majorCompact(dataTable, EnvironmentEdgeManager.currentTimeMillis());\n+            //nothing should have been purged by this major compaction\n+            assertRawRowCount(conn, dataTable, originalRowCount);\n             //now wait the TTL\n-            Thread.sleep((ttl +1) * 1000);\n-            long afterTTLExpiresSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n-            assertExplainPlan(conn, sql, dataTableName, fullIndexName);\n-            //make sure we can't see it after expiration from masking\n-            assertRowExistsAtSCN(getUrl(), sql, afterTTLExpiresSCN, false);\n-            //but it's still on disk\n-            assertRawRowCount(conn, indexTable, originalRowCount);\n-            long beforeMajorCompactSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n-            majorCompact(indexTable, beforeMajorCompactSCN);\n-            assertRawRowCount(conn, indexTable, 0);\n+            timeToSleep = (ttl * 1000) -", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 251}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTAwNTI4", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342900528", "createdAt": "2020-01-14T23:11:05Z", "commit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMTowNlrOFdozwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMTowNlrOFdozwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMTYzNA==", "bodyText": "nit: increamentValue", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366621634", "createdAt": "2020-01-14T23:11:06Z", "author": {"login": "swaroopak"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -105,60 +129,52 @@ public void testTooLowSCNWithMaxLookbackAge() throws Exception {\n     public void testRecentlyDeletedRowsNotCompactedAway() throws Exception {\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            String fullIndexName = indexStem + \"1\";\n+            createTable(dataTableName);\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTAxNjAy", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342901602", "createdAt": "2020-01-14T23:13:54Z", "commit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMzo1NFrOFdo3Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMzo1NFrOFdo3Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjUwNw==", "bodyText": "What was the reason for eliminating index tables from the tests? Was not this JIRA originally about index tables?", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366622507", "createdAt": "2020-01-14T23:13:54Z", "author": {"login": "kadirozde"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -213,62 +241,49 @@ public void testRecentMaxVersionsNotCompactedAway() throws Exception {\n         String thirdValue = \"ghi\";\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem, versions);\n-            long afterInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation\n+            injectEdge.incValue(WAIT_AFTER_TABLE_CREATION);\n+            populateTable(dataTableName);\n+            injectEdge.incValue(1); //increment by 1 so we can see our write\n+            long afterInsertSCN = EnvironmentEdgeManager.currentTimeMillis();\n             //make sure table and index metadata is set up right for versions\n             TableName dataTable = TableName.valueOf(dataTableName);\n             assertTableHasVersions(conn, dataTable, versions);\n-            String fullIndexName = indexStem + \"1\";\n-            TableName indexTable = TableName.valueOf(fullIndexName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 281}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTAxNDcy", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342901472", "createdAt": "2020-01-14T23:13:35Z", "commit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMzozNVrOFdo2ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMzo1NVrOFdo3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjM5NA==", "bodyText": "Suggest setting WAIT_AFTER_TABLE_CREATION = MAX_LOOKBACK_AGE * 100 ... just in case someone increases MAX_LOOKBACK_AGE and leaves WAIT_AFTER_TABLE_CREATION as is.", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366622394", "createdAt": "2020-01-14T23:13:35Z", "author": {"login": "priyankporwal"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -59,10 +57,31 @@\n @NeedsOwnMiniClusterTest\n public class MaxLookbackIT extends BaseUniqueNamesOwnClusterIT {\n     private static final Log LOG = LogFactory.getLog(MaxLookbackIT.class);\n-    private static final int MAX_LOOKBACK_AGE = 10;\n+    private static final int MAX_LOOKBACK_AGE = 15;\n     private static final int ROWS_POPULATED = 2;\n+    public static final int WAIT_AFTER_TABLE_CREATION = 600000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4OTI2NQ=="}, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjUxNQ==", "bodyText": "Nit: consistent comment here", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366622515", "createdAt": "2020-01-14T23:13:55Z", "author": {"login": "priyankporwal"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -168,36 +184,48 @@ public void testTTLAndMaxLookbackAge() throws Exception {\n         conf.setLong(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL, 0L);\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem);\n-            long afterFirstInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28edd1500a192ab700a56569f074503db7e409d4"}, "originalPosition": 201}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1a379096486f55a77859eeea676c23f0e677914", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/c1a379096486f55a77859eeea676c23f0e677914", "committedDate": "2020-01-15T00:51:40Z", "message": "PHOENIX-5645 - GlobalIndexChecker should prevent compaction from purging very recently deleted cells (addendum)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTM0NzY1", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342934765", "createdAt": "2020-01-15T00:58:50Z", "commit": {"oid": "c1a379096486f55a77859eeea676c23f0e677914"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTM4MTk4", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342938198", "createdAt": "2020-01-15T01:10:56Z", "commit": {"oid": "c1a379096486f55a77859eeea676c23f0e677914"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMToxMDo1NlrOFdqwRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMToxMDo1NlrOFdqwRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1MzUxMQ==", "bodyText": "Nit: the comment is not right (nothing here equals 10mins).. wait is only 1 ms now", "url": "https://github.com/apache/phoenix/pull/679#discussion_r366653511", "createdAt": "2020-01-15T01:10:56Z", "author": {"login": "priyankporwal"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/MaxLookbackIT.java", "diffHunk": "@@ -213,51 +274,57 @@ public void testRecentMaxVersionsNotCompactedAway() throws Exception {\n         String thirdValue = \"ghi\";\n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n             String dataTableName = generateUniqueName();\n-            String indexStem = generateUniqueName();\n-            createTableAndIndexes(conn, dataTableName, indexStem, versions);\n-            long afterInsertSCN = org.apache.phoenix.util.EnvironmentEdgeManager.currentTimeMillis();\n+            String indexName = generateUniqueName();\n+            createTable(dataTableName);\n+            //increment by 10 min to make sure we don't \"look back\" past table creation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a379096486f55a77859eeea676c23f0e677914"}, "originalPosition": 294}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f94f04345f37e091f04241090f0b03256b63ad6", "author": {"user": {"login": "gjacoby126", "name": "Geoffrey Jacoby"}}, "url": "https://github.com/apache/phoenix/commit/6f94f04345f37e091f04241090f0b03256b63ad6", "committedDate": "2020-01-15T02:33:10Z", "message": "PHOENIX-5645 - GlobalIndexChecker should prevent compaction from purging very recently deleted cells (addendum)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTU5NDk0", "url": "https://github.com/apache/phoenix/pull/679#pullrequestreview-342959494", "createdAt": "2020-01-15T02:35:35Z", "commit": {"oid": "6f94f04345f37e091f04241090f0b03256b63ad6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2080, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}