{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NjEyNTgw", "number": 960, "title": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client", "bodyText": "", "createdAt": "2020-11-10T16:31:03Z", "url": "https://github.com/apache/phoenix/pull/960", "merged": true, "mergeCommit": {"oid": "68ac1b4decd09b3f83a8e909695ccf91cc9a122f"}, "closed": true, "closedAt": "2020-11-18T18:47:25Z", "author": {"login": "virajjasani"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbS0bkgFqTUyNzcwOTY2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABddyuqyAFqTUzMzc3MDIyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NzA5NjYw", "url": "https://github.com/apache/phoenix/pull/960#pullrequestreview-527709660", "createdAt": "2020-11-11T00:15:53Z", "commit": {"oid": "81aab47ba9c16de77992f955ec08a52b9de898a2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDoxNTo1NFrOHw0pdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDoyNzowNFrOHw03tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1NjI3Ng==", "bodyText": "nit: Change to \"SYSTEM.TASK\" table", "url": "https://github.com/apache/phoenix/pull/960#discussion_r520956276", "createdAt": "2020-11-11T00:15:54Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/exception/SQLExceptionCode.java", "diffHunk": "@@ -431,6 +431,8 @@ public SQLException newException(SQLExceptionInfo info) {\n             PTable.LinkType.CHILD_TABLE + \") for view\"),\n     TABLE_NOT_IN_REGION(1145, \"XCL45\", \"No modifications allowed on this table. \"\n     + \"Table not in this region.\"),\n+    UNABLE_TO_UPSERT_TASK(1146, \"XCL46\",\n+        \"Error upserting records in Task system table\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81aab47ba9c16de77992f955ec08a52b9de898a2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1NzUxMQ==", "bodyText": "If SYSTEM.TASK already exists on a cluster and you upgrade to 4.16 server bits and connect with a 4.16 client, will we still install this new coproc or does that need extra steps in the upgrade path?", "url": "https://github.com/apache/phoenix/pull/960#discussion_r520957511", "createdAt": "2020-11-11T00:19:42Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/query/ConnectionQueryServicesImpl.java", "diffHunk": "@@ -1094,6 +1095,11 @@ private void addCoprocessors(byte[] tableName, TableDescriptorBuilder builder,\n                 if(!newDesc.hasCoprocessor(TaskRegionObserver.class.getName())) {\n                     builder.addCoprocessor(TaskRegionObserver.class.getName(), null, priority, null);\n                 }\n+                if (!newDesc.hasCoprocessor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81aab47ba9c16de77992f955ec08a52b9de898a2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1ODg2NA==", "bodyText": "If other mutations were made using the same connection, we will be returning the joined state of all of them here right? Don't we want to restrict to just returning mutations corresponding to the upsert into the SYSTEM.TASK table?", "url": "https://github.com/apache/phoenix/pull/960#discussion_r520958864", "createdAt": "2020-11-11T00:23:49Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/task/Task.java", "diffHunk": "@@ -75,6 +85,38 @@ public Void run() throws Exception {\n         }\n     }\n \n+    private static List<Mutation> getMutationsForSystemTaskTable(\n+            PhoenixConnection conn, PreparedStatement stmt,\n+            boolean accessCheckEnabled) throws IOException {\n+        // we need to mutate SYSTEM.TASK with HBase/login user if access is enabled.\n+        if (accessCheckEnabled) {\n+            return User.runAsLoginUser(() -> {\n+                final RpcCall rpcContext = RpcUtil.getRpcContext();\n+                // setting RPC context as null so that user can be reset\n+                try {\n+                    RpcUtil.setRpcContext(null);\n+                    stmt.execute();\n+                    // retrieve mutations for SYSTEM.TASK upsert query\n+                    return conn.getMutationState().toMutations().next()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81aab47ba9c16de77992f955ec08a52b9de898a2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1OTQzMA==", "bodyText": "I'm not sure I understand this comment. We want to use the endpoint if triggered from client-side right? Can you please explain the use of useTaskEndpoint?", "url": "https://github.com/apache/phoenix/pull/960#discussion_r520959430", "createdAt": "2020-11-11T00:25:33Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/task/Task.java", "diffHunk": "@@ -141,12 +181,67 @@ public static void addTask(PhoenixConnection conn, PTable.TaskType taskType, Str\n                     PhoenixDatabaseMetaData.TASK_END_TS + \", \" +\n                     PhoenixDatabaseMetaData.TASK_DATA +\n                     \" ) VALUES(?,?,?,?,?,?,?,?,?)\");\n-            stmt = setValuesToAddTaskPS(stmt, taskType, tenantId, schemaName, tableName, taskStatus, data, priority, startTs, endTs);\n-            LOGGER.info(\"Adding task \" + taskType + \",\" +tableName + \",\" + taskStatus + \",\" + startTs, \",\"+endTs);\n+            stmt = setValuesToAddTaskPS(stmt, systemTaskParams.getTaskType(),\n+                systemTaskParams.getTenantId(),\n+                systemTaskParams.getSchemaName(),\n+                systemTaskParams.getTableName(),\n+                systemTaskParams.getTaskStatus(), systemTaskParams.getData(),\n+                systemTaskParams.getPriority(), systemTaskParams.getStartTs(),\n+                systemTaskParams.getEndTs());\n+            LOGGER.info(\"Adding task type: {} , tableName: {} , taskStatus: {}\"\n+                + \" , startTs: {} , endTs: {}\", systemTaskParams.getTaskType(),\n+                systemTaskParams.getTableName(),\n+                systemTaskParams.getTaskStatus(), systemTaskParams.getStartTs(),\n+                systemTaskParams.getEndTs());\n         } catch (SQLException e) {\n             throw new IOException(e);\n         }\n-        mutateSystemTaskTable(conn, stmt, accessCheckEnabled);\n+        // if query is getting executed by client (useTaskEndpoint is false),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81aab47ba9c16de77992f955ec08a52b9de898a2"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1OTkyNQ==", "bodyText": "I'm unclear on the use of useTaskEndpoint. Here we are calling the endpoint anyways. In which cases are we planning on not using the endpoint? server-side invocations?", "url": "https://github.com/apache/phoenix/pull/960#discussion_r520959925", "createdAt": "2020-11-11T00:27:04Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/MetaDataClient.java", "diffHunk": "@@ -4668,11 +4669,32 @@ public MutationState alterIndex(AlterIndexStatement statement) throws SQLExcepti\n                                 }};\n                                 try {\n                                     String json = JacksonUtil.getObjectWriter().writeValueAsString(props);\n-                                    Task.addTask(connection, PTable.TaskType.INDEX_REBUILD,\n-                                            tenantId, schemaName,\n-                                            dataTableName, PTable.TaskStatus.CREATED.toString(),\n-                                            json, null, ts, null, true);\n-                                    connection.commit();\n+                                    List<Mutation> sysTaskUpsertMutations = Task.getMutationsForAddTask(new SystemTaskParams.SystemTaskParamsBuilder()\n+                                        .setConn(connection)\n+                                        .setTaskType(\n+                                            PTable.TaskType.INDEX_REBUILD)\n+                                        .setTenantId(tenantId)\n+                                        .setSchemaName(schemaName)\n+                                        .setTableName(dataTableName)\n+                                        .setTaskStatus(\n+                                            PTable.TaskStatus.CREATED.toString())\n+                                        .setData(json)\n+                                        .setPriority(null)\n+                                        .setStartTs(ts)\n+                                        .setEndTs(null)\n+                                        .setAccessCheckEnabled(true)\n+                                        .setUseTaskEndpoint(true).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81aab47ba9c16de77992f955ec08a52b9de898a2"}, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81aab47ba9c16de77992f955ec08a52b9de898a2", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/81aab47ba9c16de77992f955ec08a52b9de898a2", "committedDate": "2020-11-10T16:29:01Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}, "afterCommit": {"oid": "29b7780a2357f00c3d1a65f078026a709f574d5e", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/29b7780a2357f00c3d1a65f078026a709f574d5e", "committedDate": "2020-11-11T10:03:38Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29b7780a2357f00c3d1a65f078026a709f574d5e", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/29b7780a2357f00c3d1a65f078026a709f574d5e", "committedDate": "2020-11-11T10:03:38Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}, "afterCommit": {"oid": "d715f8f82f3cb0d5cd1b136dc607ef63d7a53f1d", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/d715f8f82f3cb0d5cd1b136dc607ef63d7a53f1d", "committedDate": "2020-11-11T12:35:38Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTExODYx", "url": "https://github.com/apache/phoenix/pull/960#pullrequestreview-531911861", "createdAt": "2020-11-16T23:42:44Z", "commit": {"oid": "8353f00b2503862856169ae4fef4c1bbc7b9f8a1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMzo0Mjo0NFrOH0c8wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMzo1MjowMVrOH0dhnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc2MjMwNA==", "bodyText": "I don't think this is a good idea. Instead why not just create a separate connectionOnServer and ensure that it contains just the mutations related to SYSTEM.TASK?", "url": "https://github.com/apache/phoenix/pull/960#discussion_r524762304", "createdAt": "2020-11-16T23:42:44Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/task/Task.java", "diffHunk": "@@ -75,6 +87,55 @@ public Void run() throws Exception {\n         }\n     }\n \n+    private static List<Mutation> getMutationsForSystemTaskTable(\n+            PhoenixConnection conn, PreparedStatement stmt,\n+            boolean accessCheckEnabled) throws IOException {\n+        // we need to mutate SYSTEM.TASK with HBase/login user if access is enabled.\n+        if (accessCheckEnabled) {\n+            return User.runAsLoginUser(() -> {\n+                final RpcCall rpcContext = RpcUtil.getRpcContext();\n+                // setting RPC context as null so that user can be reset\n+                try {\n+                    RpcUtil.setRpcContext(null);\n+                    stmt.execute();\n+                    // retrieve mutations for SYSTEM.TASK upsert query\n+                    Iterator<Pair<byte[], List<Mutation>>> iterator =\n+                        conn.getMutationState().toMutations();\n+                    List<Mutation> taskMutations = iterator.next().getSecond();\n+                    // we are expecting conn to be used for single upsert", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8353f00b2503862856169ae4fef4c1bbc7b9f8a1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc2MzAxNA==", "bodyText": "Can it not be that the first next() gave you mutations corresponding to some other upsert/delete? Let's just use our own connection", "url": "https://github.com/apache/phoenix/pull/960#discussion_r524763014", "createdAt": "2020-11-16T23:43:27Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/task/Task.java", "diffHunk": "@@ -75,6 +87,55 @@ public Void run() throws Exception {\n         }\n     }\n \n+    private static List<Mutation> getMutationsForSystemTaskTable(\n+            PhoenixConnection conn, PreparedStatement stmt,\n+            boolean accessCheckEnabled) throws IOException {\n+        // we need to mutate SYSTEM.TASK with HBase/login user if access is enabled.\n+        if (accessCheckEnabled) {\n+            return User.runAsLoginUser(() -> {\n+                final RpcCall rpcContext = RpcUtil.getRpcContext();\n+                // setting RPC context as null so that user can be reset\n+                try {\n+                    RpcUtil.setRpcContext(null);\n+                    stmt.execute();\n+                    // retrieve mutations for SYSTEM.TASK upsert query\n+                    Iterator<Pair<byte[], List<Mutation>>> iterator =\n+                        conn.getMutationState().toMutations();\n+                    List<Mutation> taskMutations = iterator.next().getSecond();\n+                    // we are expecting conn to be used for single upsert\n+                    // query on SYSTEM.TASK\n+                    if (iterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8353f00b2503862856169ae4fef4c1bbc7b9f8a1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc2NDQ0NA==", "bodyText": "Can we extract the this part into a small helper method? The else case is similar to the if just that we aren't running with impersonation", "url": "https://github.com/apache/phoenix/pull/960#discussion_r524764444", "createdAt": "2020-11-16T23:44:47Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/task/Task.java", "diffHunk": "@@ -75,6 +87,55 @@ public Void run() throws Exception {\n         }\n     }\n \n+    private static List<Mutation> getMutationsForSystemTaskTable(\n+            PhoenixConnection conn, PreparedStatement stmt,\n+            boolean accessCheckEnabled) throws IOException {\n+        // we need to mutate SYSTEM.TASK with HBase/login user if access is enabled.\n+        if (accessCheckEnabled) {\n+            return User.runAsLoginUser(() -> {\n+                final RpcCall rpcContext = RpcUtil.getRpcContext();\n+                // setting RPC context as null so that user can be reset\n+                try {\n+                    RpcUtil.setRpcContext(null);\n+                    stmt.execute();\n+                    // retrieve mutations for SYSTEM.TASK upsert query\n+                    Iterator<Pair<byte[], List<Mutation>>> iterator =\n+                        conn.getMutationState().toMutations();\n+                    List<Mutation> taskMutations = iterator.next().getSecond();\n+                    // we are expecting conn to be used for single upsert\n+                    // query on SYSTEM.TASK\n+                    if (iterator.hasNext()) {\n+                        throw new IOException(\"Provided connection should only \"\n+                            + \"contain mutations related to SYSTEM.TASK table\");\n+                    }\n+                    return taskMutations;\n+                } catch (SQLException e) {\n+                    throw new IOException(e);\n+                } finally {\n+                    // setting RPC context back to original context of the RPC\n+                    RpcUtil.setRpcContext(rpcContext);\n+                }\n+            });\n+        } else {\n+            try {\n+                stmt.execute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8353f00b2503862856169ae4fef4c1bbc7b9f8a1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3MTc0MA==", "bodyText": "Can we rename this variable? Sounds like it is set to false when we don't really want to commit, but rather just get the stmt object which we later use to get the List<Mutation>. This is used just for the index rebuild task that gets triggered from the client-side, right? For the tasks that are triggered from the server (i.e. from MetaDataEndpointImpl and TaskRO, we can just directly call Task.addTask() right?\nA more appropriate name would be shouldCommit or something.", "url": "https://github.com/apache/phoenix/pull/960#discussion_r524771740", "createdAt": "2020-11-16T23:52:01Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/task/Task.java", "diffHunk": "@@ -141,12 +216,68 @@ public static void addTask(PhoenixConnection conn, PTable.TaskType taskType, Str\n                     PhoenixDatabaseMetaData.TASK_END_TS + \", \" +\n                     PhoenixDatabaseMetaData.TASK_DATA +\n                     \" ) VALUES(?,?,?,?,?,?,?,?,?)\");\n-            stmt = setValuesToAddTaskPS(stmt, taskType, tenantId, schemaName, tableName, taskStatus, data, priority, startTs, endTs);\n-            LOGGER.info(\"Adding task \" + taskType + \",\" +tableName + \",\" + taskStatus + \",\" + startTs, \",\"+endTs);\n+            stmt = setValuesToAddTaskPS(stmt, systemTaskParams.getTaskType(),\n+                systemTaskParams.getTenantId(),\n+                systemTaskParams.getSchemaName(),\n+                systemTaskParams.getTableName(),\n+                systemTaskParams.getTaskStatus(), systemTaskParams.getData(),\n+                systemTaskParams.getPriority(), systemTaskParams.getStartTs(),\n+                systemTaskParams.getEndTs());\n+            LOGGER.info(\"Adding task type: {} , tableName: {} , taskStatus: {}\"\n+                + \" , startTs: {} , endTs: {}\", systemTaskParams.getTaskType(),\n+                systemTaskParams.getTableName(),\n+                systemTaskParams.getTaskStatus(), systemTaskParams.getStartTs(),\n+                systemTaskParams.getEndTs());\n         } catch (SQLException e) {\n             throw new IOException(e);\n         }\n-        mutateSystemTaskTable(conn, stmt, accessCheckEnabled);\n+        // if query is getting executed by client, do not execute and commit\n+        // mutations\n+        if (isCommitAllowed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8353f00b2503862856169ae4fef4c1bbc7b9f8a1"}, "originalPosition": 149}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTY1OTM5", "url": "https://github.com/apache/phoenix/pull/960#pullrequestreview-531965939", "createdAt": "2020-11-17T01:59:18Z", "commit": {"oid": "8353f00b2503862856169ae4fef4c1bbc7b9f8a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTo1OToxOFrOH0hbag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTo1OToxOFrOH0hbag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzNTY5MA==", "bodyText": "nice check for the coproc", "url": "https://github.com/apache/phoenix/pull/960#discussion_r524835690", "createdAt": "2020-11-17T01:59:18Z", "author": {"login": "yanxinyi"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/BackwardCompatibilityIT.java", "diffHunk": "@@ -319,6 +321,10 @@ public void testUpdatedSplitPolicyForSysTask() throws Exception {\n                 + compatibleClientVersion,\n                 tableDescriptor.getRegionSplitPolicyClassName(),\n                 SystemTaskSplitPolicy.class.getName());\n+            assertTrue(\"Coprocessor \" + TaskMetaDataEndpoint.class.getName()\n+                + \" has not been added with compatible client version: \"\n+                + compatibleClientVersion, tableDescriptor.hasCoprocessor(\n+                    TaskMetaDataEndpoint.class.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8353f00b2503862856169ae4fef4c1bbc7b9f8a1"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b96dc65a25217263c977fec8ec17a33018d71f26", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/b96dc65a25217263c977fec8ec17a33018d71f26", "committedDate": "2020-11-17T07:23:19Z", "message": "addressing Chinmay's review comments"}, "afterCommit": {"oid": "9a45d6526f99d126bfc3632c0e698e2de92563b1", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/9a45d6526f99d126bfc3632c0e698e2de92563b1", "committedDate": "2020-11-17T07:26:22Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a45d6526f99d126bfc3632c0e698e2de92563b1", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/9a45d6526f99d126bfc3632c0e698e2de92563b1", "committedDate": "2020-11-17T07:26:22Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}, "afterCommit": {"oid": "4e73f70444c977c610e75e365e6b11c0d6b71365", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/4e73f70444c977c610e75e365e6b11c0d6b71365", "committedDate": "2020-11-17T07:32:27Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e73f70444c977c610e75e365e6b11c0d6b71365", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/4e73f70444c977c610e75e365e6b11c0d6b71365", "committedDate": "2020-11-17T07:32:27Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}, "afterCommit": {"oid": "bc35c71c6bdb2a7b505f20a0994d45d6898cba96", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/bc35c71c6bdb2a7b505f20a0994d45d6898cba96", "committedDate": "2020-11-17T12:34:39Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc35c71c6bdb2a7b505f20a0994d45d6898cba96", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/bc35c71c6bdb2a7b505f20a0994d45d6898cba96", "committedDate": "2020-11-17T12:34:39Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}, "afterCommit": {"oid": "ab57bb7cc2c4cc83917b11ac67b1746cda8fc037", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/ab57bb7cc2c4cc83917b11ac67b1746cda8fc037", "committedDate": "2020-11-17T13:07:15Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODUxMjk3", "url": "https://github.com/apache/phoenix/pull/960#pullrequestreview-532851297", "createdAt": "2020-11-17T22:04:44Z", "commit": {"oid": "ab57bb7cc2c4cc83917b11ac67b1746cda8fc037"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowNDo0NVrOH1NWwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowNDo0NVrOH1NWwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NTM5NA==", "bodyText": "We should rename this test since we are no longer just checking that the split policy is updated. Also, better if we can do something like the following:\n\nConnect with an old client: If <4.15, SYS.TASK doesn't even exist, so nothing to do. If 4.15, confirm that SYS.TASK doesn't have the coproc loaded.\nThen connect with a new client (4.16) which will trigger the metadata upgrade and update the coproc. Now do your check for existence of the coproc. Similarly can be done for the split policy too.", "url": "https://github.com/apache/phoenix/pull/960#discussion_r525555394", "createdAt": "2020-11-17T22:04:45Z", "author": {"login": "ChinmaySKulkarni"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/BackwardCompatibilityIT.java", "diffHunk": "@@ -319,7 +323,26 @@ public void testUpdatedSplitPolicyForSysTask() throws Exception {\n                 + compatibleClientVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab57bb7cc2c4cc83917b11ac67b1746cda8fc037"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc92f74df34ee4860dd21027c6d61a076b1728a5", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/dc92f74df34ee4860dd21027c6d61a076b1728a5", "committedDate": "2020-11-18T08:41:15Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f57f8899e22ba49d79dc3ad7d263c19beb3153c7", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/f57f8899e22ba49d79dc3ad7d263c19beb3153c7", "committedDate": "2020-11-18T08:38:59Z", "message": "change"}, "afterCommit": {"oid": "dc92f74df34ee4860dd21027c6d61a076b1728a5", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/phoenix/commit/dc92f74df34ee4860dd21027c6d61a076b1728a5", "committedDate": "2020-11-18T08:41:15Z", "message": "PHOENIX-6155 : Provide a coprocessor endpoint to avoid direct upserts into SYSTEM.TASK from the client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzcwMjIx", "url": "https://github.com/apache/phoenix/pull/960#pullrequestreview-533770221", "createdAt": "2020-11-18T18:47:16Z", "commit": {"oid": "dc92f74df34ee4860dd21027c6d61a076b1728a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1839, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}