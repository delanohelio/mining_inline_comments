{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2OTA2ODM2", "number": 806, "title": "PHOENIX-5946: Implement SchemaExtractionTool utility to get effective\u2026", "bodyText": "\u2026 DDL from cluster (Co-authored by Tanuj Khurana)\nThis is an initial commit and has limited test coverage (have filed PHOENIX-5947 to add tests in the branch)", "createdAt": "2020-06-19T05:57:31Z", "url": "https://github.com/apache/phoenix/pull/806", "merged": true, "mergeCommit": {"oid": "63bf4a9dd5390ec001e27c42a0077c1b6d6795e4"}, "closed": true, "closedAt": "2020-07-27T22:58:56Z", "author": {"login": "swaroopak"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcw0GL4AH2gAyNDM2OTA2ODM2OjUxN2ZlZDA1M2JhN2IyN2VkNmEwMGZmNjMxY2MyYWZhZDlkZGI3NzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5J95RgFqTQ1NjE5MDM2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "517fed053ba7b27ed6a00ff631cc2afad9ddb772", "author": {"user": null}, "url": "https://github.com/apache/phoenix/commit/517fed053ba7b27ed6a00ff631cc2afad9ddb772", "committedDate": "2020-07-02T00:56:16Z", "message": "PHOENIX-5946: Implement SchemaExtractionTool utility to get effective DDL from cluster (Co-authored by Tanuj Khurana)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "082800bdb06862da6369e9641928e4dc51b0b0eb", "author": {"user": null}, "url": "https://github.com/apache/phoenix/commit/082800bdb06862da6369e9641928e4dc51b0b0eb", "committedDate": "2020-06-19T05:55:53Z", "message": "PHOENIX-5946: Implement SchemaExtractionTool utility to get effective DDL from cluster (Co-authored by Tanuj Khurana)"}, "afterCommit": {"oid": "517fed053ba7b27ed6a00ff631cc2afad9ddb772", "author": {"user": null}, "url": "https://github.com/apache/phoenix/commit/517fed053ba7b27ed6a00ff631cc2afad9ddb772", "committedDate": "2020-07-02T00:56:16Z", "message": "PHOENIX-5946: Implement SchemaExtractionTool utility to get effective DDL from cluster (Co-authored by Tanuj Khurana)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NzAzNTU3", "url": "https://github.com/apache/phoenix/pull/806#pullrequestreview-447703557", "createdAt": "2020-07-14T00:30:41Z", "commit": {"oid": "517fed053ba7b27ed6a00ff631cc2afad9ddb772"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDozMDo0MVrOGw_ipw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzoyNDowN1rOGxdrAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyNTg5NQ==", "bodyText": "The test is only comparing the properties but not the entire create table statement.", "url": "https://github.com/apache/phoenix/pull/806#discussion_r454025895", "createdAt": "2020-07-14T00:30:41Z", "author": {"login": "tkhurana"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/SchemaExtractionToolIT.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.apache.phoenix.end2end;\n+\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.query.BaseTest;\n+import org.apache.phoenix.schema.SchemaExtractionTool;\n+import org.apache.phoenix.util.PropertiesUtil;\n+import org.apache.phoenix.util.ReadOnlyProps;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+\n+public class SchemaExtractionToolIT extends BaseTest {\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        Map<String, String> props = Collections.emptyMap();\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n+\n+    @Test\n+    public void testCreateTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_MIGRATION=true,DISABLE_SOR=true,DISABLE_WAL=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n+                    + properties);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            String actualProperties = set.output.substring(set.output.lastIndexOf(\")\")+1).replace(\" \",\"\");\n+            Assert.assertEquals(5, actualProperties.split(\",\").length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "517fed053ba7b27ed6a00ff631cc2afad9ddb772"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNzgyNg==", "bodyText": "might be better if we have 2 different APIs getColumnInfoStringForTable and getColumnInfoStringForView rather than using null", "url": "https://github.com/apache/phoenix/pull/806#discussion_r454517826", "createdAt": "2020-07-14T17:21:21Z", "author": {"login": "tkhurana"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/SchemaExtractionTool.java", "diffHunk": "@@ -0,0 +1,473 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.conf.Configured;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.util.Tool;\n+import org.apache.hadoop.util.ToolRunner;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import static org.apache.hadoop.hbase.HColumnDescriptor.BLOOMFILTER;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.COMPRESSION;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.DATA_BLOCK_ENCODING;\n+import static org.apache.hadoop.hbase.HTableDescriptor.IS_META;\n+import static org.apache.phoenix.util.MetaDataUtil.VIEW_INDEX_ID_COLUMN_NAME;\n+import static org.apache.phoenix.util.SchemaUtil.DEFAULT_DATA_BLOCK_ENCODING;\n+\n+public class SchemaExtractionTool extends Configured implements Tool {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SchemaExtractionTool.class.getName());\n+    private static final Option HELP_OPTION = new Option(\"h\", \"help\",\n+            false, \"Help\");\n+    private static final Option TABLE_OPTION = new Option(\"tb\", \"table\", true,\n+            \"[Required] Table name ex. table1\");\n+    private static final Option SCHEMA_OPTION = new Option(\"s\", \"schema\", true,\n+            \"[Optional] Schema name ex. schema\");\n+\n+    private String pTableName;\n+    private String pSchemaName;\n+\n+    private static final String CREATE_TABLE = \"CREATE TABLE %s\";\n+    private static final String CREATE_INDEX = \"CREATE %sINDEX %s ON %s\";\n+    private static final String CREATE_VIEW = \"CREATE VIEW %s%s AS SELECT * FROM %s%s\";\n+    public static Configuration conf;\n+    Map<String, String> defaultProps = new HashMap<>();\n+    Map<String, String> definedProps = new HashMap<>();\n+    public String output;\n+\n+    @Override\n+    public int run(String[] args) throws Exception {\n+        populateToolAttributes(args);\n+        conf = HBaseConfiguration.addHbaseResources(getConf());\n+        PTable table = getPTable(pSchemaName, pTableName);\n+        output = getDDL(table);\n+        return 0;\n+    }\n+\n+    private String getDDL(PTable table) throws Exception {\n+        String ddl = null;\n+        if(table.getType().equals(PTableType.TABLE)) {\n+            ddl = extractCreateTableDDL(table);\n+        } else if(table.getType().equals(PTableType.INDEX)) {\n+            ddl = extractCreateIndexDDL(table);\n+        } else if(table.getType().equals(PTableType.VIEW)) {\n+            ddl = extractCreateViewDDL(table);\n+        }\n+        return ddl;\n+    }\n+\n+    protected String extractCreateIndexDDL(PTable indexPTable)\n+            throws SQLException {\n+        String pSchemaName = indexPTable.getSchemaName().getString();\n+        String pTableName = indexPTable.getTableName().getString();\n+\n+        String baseTableName = indexPTable.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(indexPTable.getSchemaName().getString(), baseTableName);\n+        PTable dataPTable = getPTable(baseTableFullName);\n+\n+        String defaultCF = SchemaUtil.getEmptyColumnFamilyAsString(indexPTable);\n+        String indexedColumnsString = getIndexedColumnsString(indexPTable, dataPTable, defaultCF);\n+        String coveredColumnsString = getCoveredColumnsString(indexPTable, defaultCF);\n+\n+        return generateIndexDDLString(baseTableFullName, indexedColumnsString, coveredColumnsString,\n+                indexPTable.getIndexType().equals(PTable.IndexType.LOCAL), pSchemaName, pTableName);\n+    }\n+\n+    //TODO: Indexed on an expression\n+    // test with different default CF, key is a included column\n+    private String getIndexedColumnsString(PTable indexPTable, PTable dataPTable, String defaultCF) {\n+\n+        List<PColumn> indexPK = indexPTable.getPKColumns();\n+        List<PColumn> dataPK = dataPTable.getPKColumns();\n+        Set<String> indexPkSet = new HashSet<>();\n+        Set<String> dataPkSet = new HashSet<>();\n+        Map<String, SortOrder> sortOrderMap = new HashMap<>();\n+        StringBuilder indexedColumnsBuilder = new StringBuilder();\n+        for (PColumn indexedColumn : indexPK) {\n+            String indexColumn = extractIndexColumn(indexedColumn.getName().getString(), defaultCF);\n+            if(indexColumn.equalsIgnoreCase(VIEW_INDEX_ID_COLUMN_NAME)) {\n+                continue;\n+            }\n+            indexPkSet.add(indexColumn);\n+            sortOrderMap.put(indexColumn, indexedColumn.getSortOrder());\n+        }\n+\n+        for(PColumn pColumn : dataPK) {\n+            dataPkSet.add(pColumn.getName().getString());\n+        }\n+\n+        Set<String> effectivePK = Sets.symmetricDifference(indexPkSet, dataPkSet);\n+        if (effectivePK.isEmpty()) {\n+            effectivePK = indexPkSet;\n+        }\n+        for (String column : effectivePK) {\n+            if(indexedColumnsBuilder.length()!=0) {\n+                indexedColumnsBuilder.append(\", \");\n+            }\n+            indexedColumnsBuilder.append(column);\n+            if(sortOrderMap.get(column)!= SortOrder.getDefault()) {\n+                indexedColumnsBuilder.append(\" \");\n+                indexedColumnsBuilder.append(sortOrderMap.get(column));\n+            }\n+        }\n+        return indexedColumnsBuilder.toString();\n+    }\n+\n+    private String extractIndexColumn(String columnName, String defaultCF) {\n+        String [] columnNameSplit = columnName.split(\":\");\n+        if(columnNameSplit[0].equals(\"\") || columnNameSplit[0].equalsIgnoreCase(defaultCF)) {\n+            return columnNameSplit[1];\n+        } else {\n+            return columnName.replace(\":\", \".\");\n+        }\n+    }\n+\n+    private String getCoveredColumnsString(PTable indexPTable, String defaultCF) {\n+        StringBuilder coveredColumnsBuilder = new StringBuilder();\n+        List<PColumn> pkColumns = indexPTable.getColumns();\n+        for (PColumn cc : pkColumns) {\n+            if(coveredColumnsBuilder.length()!=0) {\n+                coveredColumnsBuilder.append(\", \");\n+            }\n+            if(cc.getFamilyName()!=null) {\n+                String indexColumn = extractIndexColumn(cc.getName().getString(), defaultCF);\n+                coveredColumnsBuilder.append(indexColumn);\n+            }\n+        }\n+        return coveredColumnsBuilder.toString();\n+    }\n+\n+    protected String generateIndexDDLString(String baseTableFullName, String indexedColumnString, String coveredColumnString, boolean local, String pSchemaName, String pTableName) {\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_INDEX, local ? \"LOCAL \" : \"\", pTableName, baseTableFullName));\n+        outputBuilder.append(\"(\");\n+        outputBuilder.append(indexedColumnString);\n+        outputBuilder.append(\")\");\n+        if(!coveredColumnString.equals(\"\")) {\n+            outputBuilder.append(\" INCLUDE (\");\n+            outputBuilder.append(coveredColumnString);\n+            outputBuilder.append(\")\");\n+        }\n+        return outputBuilder.toString();\n+    }\n+\n+    PTable getPTable(String pTableFullName) throws SQLException {\n+        try (Connection conn = getConnection()) {\n+            return PhoenixRuntime.getTable(conn, pTableFullName);\n+        }\n+    }\n+\n+    protected String extractCreateViewDDL(PTable table) throws SQLException {\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+        String baseTableName = table.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, baseTableName);\n+        PTable baseTable = getPTable(baseTableFullName);\n+        String columnInfoString = getColumnInfoString(table, baseTable);\n+\n+        String whereClause = table.getViewStatement();\n+        if(whereClause != null) {\n+            whereClause = whereClause.substring(whereClause.indexOf(\"WHERE\"));\n+        }\n+        return generateCreateViewDDL(columnInfoString, baseTableFullName, whereClause == null ? \"\" : \" \"+whereClause, pSchemaName, pTableName);\n+    }\n+\n+    private String generateCreateViewDDL(String columnInfoString, String baseTableFullName, String whereClause, String pSchemaName, String pTableName) {\n+        String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_VIEW, viewFullName, columnInfoString, baseTableFullName, whereClause));\n+        return outputBuilder.toString();\n+    }\n+\n+    public String extractCreateTableDDL(PTable table) throws IOException, SQLException {\n+\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+\n+        ConnectionQueryServices cqsi = getCQSIObject();\n+        HTableDescriptor htd = getHTableDescriptor(cqsi, table);\n+        HColumnDescriptor hcd = htd.getFamily(SchemaUtil.getEmptyColumnFamily(table));\n+\n+        populateDefaultProperties(table);\n+        setPTableProperties(table);\n+        setHTableProperties(htd);\n+        setHColumnFamilyProperties(hcd);\n+\n+        String columnInfoString = getColumnInfoString(table, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "517fed053ba7b27ed6a00ff631cc2afad9ddb772"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxOTU1Mw==", "bodyText": "As mentioned above also, it might be cleaner to refactor this API into two different APIs for table and view and move common functionality to a shared function.", "url": "https://github.com/apache/phoenix/pull/806#discussion_r454519553", "createdAt": "2020-07-14T17:24:07Z", "author": {"login": "tkhurana"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/SchemaExtractionTool.java", "diffHunk": "@@ -0,0 +1,473 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.conf.Configured;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.util.Tool;\n+import org.apache.hadoop.util.ToolRunner;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import static org.apache.hadoop.hbase.HColumnDescriptor.BLOOMFILTER;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.COMPRESSION;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.DATA_BLOCK_ENCODING;\n+import static org.apache.hadoop.hbase.HTableDescriptor.IS_META;\n+import static org.apache.phoenix.util.MetaDataUtil.VIEW_INDEX_ID_COLUMN_NAME;\n+import static org.apache.phoenix.util.SchemaUtil.DEFAULT_DATA_BLOCK_ENCODING;\n+\n+public class SchemaExtractionTool extends Configured implements Tool {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SchemaExtractionTool.class.getName());\n+    private static final Option HELP_OPTION = new Option(\"h\", \"help\",\n+            false, \"Help\");\n+    private static final Option TABLE_OPTION = new Option(\"tb\", \"table\", true,\n+            \"[Required] Table name ex. table1\");\n+    private static final Option SCHEMA_OPTION = new Option(\"s\", \"schema\", true,\n+            \"[Optional] Schema name ex. schema\");\n+\n+    private String pTableName;\n+    private String pSchemaName;\n+\n+    private static final String CREATE_TABLE = \"CREATE TABLE %s\";\n+    private static final String CREATE_INDEX = \"CREATE %sINDEX %s ON %s\";\n+    private static final String CREATE_VIEW = \"CREATE VIEW %s%s AS SELECT * FROM %s%s\";\n+    public static Configuration conf;\n+    Map<String, String> defaultProps = new HashMap<>();\n+    Map<String, String> definedProps = new HashMap<>();\n+    public String output;\n+\n+    @Override\n+    public int run(String[] args) throws Exception {\n+        populateToolAttributes(args);\n+        conf = HBaseConfiguration.addHbaseResources(getConf());\n+        PTable table = getPTable(pSchemaName, pTableName);\n+        output = getDDL(table);\n+        return 0;\n+    }\n+\n+    private String getDDL(PTable table) throws Exception {\n+        String ddl = null;\n+        if(table.getType().equals(PTableType.TABLE)) {\n+            ddl = extractCreateTableDDL(table);\n+        } else if(table.getType().equals(PTableType.INDEX)) {\n+            ddl = extractCreateIndexDDL(table);\n+        } else if(table.getType().equals(PTableType.VIEW)) {\n+            ddl = extractCreateViewDDL(table);\n+        }\n+        return ddl;\n+    }\n+\n+    protected String extractCreateIndexDDL(PTable indexPTable)\n+            throws SQLException {\n+        String pSchemaName = indexPTable.getSchemaName().getString();\n+        String pTableName = indexPTable.getTableName().getString();\n+\n+        String baseTableName = indexPTable.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(indexPTable.getSchemaName().getString(), baseTableName);\n+        PTable dataPTable = getPTable(baseTableFullName);\n+\n+        String defaultCF = SchemaUtil.getEmptyColumnFamilyAsString(indexPTable);\n+        String indexedColumnsString = getIndexedColumnsString(indexPTable, dataPTable, defaultCF);\n+        String coveredColumnsString = getCoveredColumnsString(indexPTable, defaultCF);\n+\n+        return generateIndexDDLString(baseTableFullName, indexedColumnsString, coveredColumnsString,\n+                indexPTable.getIndexType().equals(PTable.IndexType.LOCAL), pSchemaName, pTableName);\n+    }\n+\n+    //TODO: Indexed on an expression\n+    // test with different default CF, key is a included column\n+    private String getIndexedColumnsString(PTable indexPTable, PTable dataPTable, String defaultCF) {\n+\n+        List<PColumn> indexPK = indexPTable.getPKColumns();\n+        List<PColumn> dataPK = dataPTable.getPKColumns();\n+        Set<String> indexPkSet = new HashSet<>();\n+        Set<String> dataPkSet = new HashSet<>();\n+        Map<String, SortOrder> sortOrderMap = new HashMap<>();\n+        StringBuilder indexedColumnsBuilder = new StringBuilder();\n+        for (PColumn indexedColumn : indexPK) {\n+            String indexColumn = extractIndexColumn(indexedColumn.getName().getString(), defaultCF);\n+            if(indexColumn.equalsIgnoreCase(VIEW_INDEX_ID_COLUMN_NAME)) {\n+                continue;\n+            }\n+            indexPkSet.add(indexColumn);\n+            sortOrderMap.put(indexColumn, indexedColumn.getSortOrder());\n+        }\n+\n+        for(PColumn pColumn : dataPK) {\n+            dataPkSet.add(pColumn.getName().getString());\n+        }\n+\n+        Set<String> effectivePK = Sets.symmetricDifference(indexPkSet, dataPkSet);\n+        if (effectivePK.isEmpty()) {\n+            effectivePK = indexPkSet;\n+        }\n+        for (String column : effectivePK) {\n+            if(indexedColumnsBuilder.length()!=0) {\n+                indexedColumnsBuilder.append(\", \");\n+            }\n+            indexedColumnsBuilder.append(column);\n+            if(sortOrderMap.get(column)!= SortOrder.getDefault()) {\n+                indexedColumnsBuilder.append(\" \");\n+                indexedColumnsBuilder.append(sortOrderMap.get(column));\n+            }\n+        }\n+        return indexedColumnsBuilder.toString();\n+    }\n+\n+    private String extractIndexColumn(String columnName, String defaultCF) {\n+        String [] columnNameSplit = columnName.split(\":\");\n+        if(columnNameSplit[0].equals(\"\") || columnNameSplit[0].equalsIgnoreCase(defaultCF)) {\n+            return columnNameSplit[1];\n+        } else {\n+            return columnName.replace(\":\", \".\");\n+        }\n+    }\n+\n+    private String getCoveredColumnsString(PTable indexPTable, String defaultCF) {\n+        StringBuilder coveredColumnsBuilder = new StringBuilder();\n+        List<PColumn> pkColumns = indexPTable.getColumns();\n+        for (PColumn cc : pkColumns) {\n+            if(coveredColumnsBuilder.length()!=0) {\n+                coveredColumnsBuilder.append(\", \");\n+            }\n+            if(cc.getFamilyName()!=null) {\n+                String indexColumn = extractIndexColumn(cc.getName().getString(), defaultCF);\n+                coveredColumnsBuilder.append(indexColumn);\n+            }\n+        }\n+        return coveredColumnsBuilder.toString();\n+    }\n+\n+    protected String generateIndexDDLString(String baseTableFullName, String indexedColumnString, String coveredColumnString, boolean local, String pSchemaName, String pTableName) {\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_INDEX, local ? \"LOCAL \" : \"\", pTableName, baseTableFullName));\n+        outputBuilder.append(\"(\");\n+        outputBuilder.append(indexedColumnString);\n+        outputBuilder.append(\")\");\n+        if(!coveredColumnString.equals(\"\")) {\n+            outputBuilder.append(\" INCLUDE (\");\n+            outputBuilder.append(coveredColumnString);\n+            outputBuilder.append(\")\");\n+        }\n+        return outputBuilder.toString();\n+    }\n+\n+    PTable getPTable(String pTableFullName) throws SQLException {\n+        try (Connection conn = getConnection()) {\n+            return PhoenixRuntime.getTable(conn, pTableFullName);\n+        }\n+    }\n+\n+    protected String extractCreateViewDDL(PTable table) throws SQLException {\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+        String baseTableName = table.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, baseTableName);\n+        PTable baseTable = getPTable(baseTableFullName);\n+        String columnInfoString = getColumnInfoString(table, baseTable);\n+\n+        String whereClause = table.getViewStatement();\n+        if(whereClause != null) {\n+            whereClause = whereClause.substring(whereClause.indexOf(\"WHERE\"));\n+        }\n+        return generateCreateViewDDL(columnInfoString, baseTableFullName, whereClause == null ? \"\" : \" \"+whereClause, pSchemaName, pTableName);\n+    }\n+\n+    private String generateCreateViewDDL(String columnInfoString, String baseTableFullName, String whereClause, String pSchemaName, String pTableName) {\n+        String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_VIEW, viewFullName, columnInfoString, baseTableFullName, whereClause));\n+        return outputBuilder.toString();\n+    }\n+\n+    public String extractCreateTableDDL(PTable table) throws IOException, SQLException {\n+\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+\n+        ConnectionQueryServices cqsi = getCQSIObject();\n+        HTableDescriptor htd = getHTableDescriptor(cqsi, table);\n+        HColumnDescriptor hcd = htd.getFamily(SchemaUtil.getEmptyColumnFamily(table));\n+\n+        populateDefaultProperties(table);\n+        setPTableProperties(table);\n+        setHTableProperties(htd);\n+        setHColumnFamilyProperties(hcd);\n+\n+        String columnInfoString = getColumnInfoString(table, null);\n+        String propertiesString = convertPropertiesToString();\n+\n+        return generateTableDDLString(columnInfoString, propertiesString, pSchemaName, pTableName);\n+    }\n+    private String generateTableDDLString(String columnInfoString,String propertiesString,String pSchemaName,String pTableName) {\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_TABLE, pTableFullName));\n+        outputBuilder.append(columnInfoString).append(\" \").append(propertiesString);\n+        return outputBuilder.toString();\n+    }\n+\n+    private void populateDefaultProperties(PTable table) {\n+        Map<String, String> propsMap = HColumnDescriptor.getDefaultValues();\n+        for (Map.Entry<String, String> entry : propsMap.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            defaultProps.put(key, value);\n+            if(key.equalsIgnoreCase(BLOOMFILTER) || key.equalsIgnoreCase(COMPRESSION)) {\n+                defaultProps.put(key, \"NONE\");\n+            }\n+            if(key.equalsIgnoreCase(DATA_BLOCK_ENCODING)) {\n+                defaultProps.put(key, String.valueOf(DEFAULT_DATA_BLOCK_ENCODING));\n+            }\n+        }\n+        defaultProps.putAll(table.getDefaultValues());\n+    }\n+\n+    private void setHTableProperties(HTableDescriptor htd) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = htd.getValues();\n+        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+            ImmutableBytesWritable key = entry.getKey();\n+            ImmutableBytesWritable value = entry.getValue();\n+            if(Bytes.toString(key.get()).contains(\"coprocessor\") || Bytes.toString(key.get()).contains(IS_META)) {\n+                continue;\n+            }\n+            defaultProps.put(Bytes.toString(key.get()), \"false\");\n+            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+        }\n+    }\n+\n+    private void setHColumnFamilyProperties(HColumnDescriptor columnDescriptor) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptor.getValues();\n+        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+            ImmutableBytesWritable key = entry.getKey();\n+            ImmutableBytesWritable value = entry.getValue();\n+            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+        }\n+    }\n+\n+    private void setPTableProperties(PTable table) {\n+        Map <String, String> map = table.getValues();\n+        for(Map.Entry<String, String> entry : map.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if(value != null) {\n+                definedProps.put(key, value);\n+            }\n+        }\n+    }\n+\n+    private HTableDescriptor getHTableDescriptor(ConnectionQueryServices cqsi, PTable table)\n+            throws SQLException, IOException {\n+        return cqsi.getAdmin().getTableDescriptor(\n+                TableName.valueOf(table.getPhysicalName().getString()));\n+    }\n+\n+    private String convertPropertiesToString() {\n+        StringBuilder optionBuilder = new StringBuilder();\n+\n+        for(Map.Entry<String, String> entry : definedProps.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if(value!=null && defaultProps.get(key) != null && !value.equals(defaultProps.get(key))) {\n+                if (optionBuilder.length() != 0) {\n+                    optionBuilder.append(\", \");\n+                }\n+                optionBuilder.append(key+\"=\"+value);\n+            }\n+        }\n+        return optionBuilder.toString();\n+    }\n+\n+    private PTable getPTable(String pSchemaName, String pTableName) throws SQLException {\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        return getPTable(pTableFullName);\n+    }\n+\n+    private ConnectionQueryServices getCQSIObject() throws SQLException {\n+        try(Connection conn = getConnection()) {\n+            return conn.unwrap(PhoenixConnection.class).getQueryServices();\n+        }\n+    }\n+\n+    public static Connection getConnection() throws SQLException {\n+        return ConnectionUtil.getInputConnection(conf);\n+    }\n+\n+    private String getColumnInfoString(PTable table, PTable baseTable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "517fed053ba7b27ed6a00ff631cc2afad9ddb772"}, "originalPosition": 322}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "744025c30ab6f31038b17e28f3c2bab2695f3374", "author": {"user": null}, "url": "https://github.com/apache/phoenix/commit/744025c30ab6f31038b17e28f3c2bab2695f3374", "committedDate": "2020-07-16T21:20:46Z", "message": "Fixing review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjM2ODQ4", "url": "https://github.com/apache/phoenix/pull/806#pullrequestreview-450236848", "createdAt": "2020-07-16T21:42:28Z", "commit": {"oid": "744025c30ab6f31038b17e28f3c2bab2695f3374"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2382e0aae613357b68db6e6aea710e637b340b4", "author": {"user": null}, "url": "https://github.com/apache/phoenix/commit/e2382e0aae613357b68db6e6aea710e637b340b4", "committedDate": "2020-07-16T23:35:51Z", "message": "Fixing review comments 2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjgyMzU1", "url": "https://github.com/apache/phoenix/pull/806#pullrequestreview-450282355", "createdAt": "2020-07-16T23:30:11Z", "commit": {"oid": "744025c30ab6f31038b17e28f3c2bab2695f3374"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzozMDoxMVrOGzANag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzo1OTo1NVrOGzAxfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzMzk5NA==", "bodyText": "nit: long line", "url": "https://github.com/apache/phoenix/pull/806#discussion_r456133994", "createdAt": "2020-07-16T23:30:11Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/SchemaExtractionToolIT.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.apache.phoenix.end2end;\n+\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.query.BaseTest;\n+import org.apache.phoenix.schema.SchemaExtractionTool;\n+import org.apache.phoenix.util.PropertiesUtil;\n+import org.apache.phoenix.util.ReadOnlyProps;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+\n+public class SchemaExtractionToolIT extends BaseTest {\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        Map<String, String> props = Collections.emptyMap();\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n+\n+    @Test\n+    public void testCreateTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_MIGRATION=true,DISABLE_SOR=true,DISABLE_WAL=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n+                    + properties);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            String actualProperties = set.output.substring(set.output.lastIndexOf(\")\")+1).replace(\" \",\"\");\n+            Assert.assertEquals(5, actualProperties.split(\",\").length);\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateIndexStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String indexName = generateUniqueName();\n+        String indexName1 = generateUniqueName();\n+        String indexName2 = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_MIGRATION=true,DISABLE_SOR=true,DISABLE_WAL=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n+                    + properties);\n+\n+            String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+pTableFullName+\"(v1 DESC) INCLUDE (v2)\";\n+\n+            String createIndexStatement1 = \"CREATE INDEX \"+indexName1 + \" ON \"+pTableFullName+\"(v2 DESC) INCLUDE (v1)\";\n+\n+            String createIndexStatement2 = \"CREATE INDEX \"+indexName2 + \" ON \"+pTableFullName+\"(k)\";\n+\n+            conn.createStatement().execute(createIndexStatement);\n+            conn.createStatement().execute(createIndexStatement1);\n+            conn.createStatement().execute(createIndexStatement2);\n+            conn.commit();\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+\n+            String [] args = {\"-tb\", indexName, \"-s\", schemaName};\n+            set.run(args);\n+            Assert.assertEquals(createIndexStatement.toUpperCase(), set.output.toUpperCase());\n+\n+            String [] args1 = {\"-tb\", indexName1, \"-s\", schemaName};\n+            set.run(args1);\n+            Assert.assertEquals(createIndexStatement1.toUpperCase(), set.output.toUpperCase());\n+\n+            String [] args2 = {\"-tb\", indexName2, \"-s\", schemaName};\n+            set.run(args2);\n+            Assert.assertEquals(createIndexStatement2.toUpperCase(), set.output.toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateViewStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String viewName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_MIGRATION=true,DISABLE_SOR=true,DISABLE_WAL=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n+                    + properties);\n+            String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n+            String viewFullName1 = SchemaUtil.getQualifiedTableName(schemaName, viewName+\"1\");\n+\n+\n+            String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) AS SELECT * FROM \"+pTableFullName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744025c30ab6f31038b17e28f3c2bab2695f3374"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNDA0Mg==", "bodyText": "ditto", "url": "https://github.com/apache/phoenix/pull/806#discussion_r456134042", "createdAt": "2020-07-16T23:30:18Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/SchemaExtractionToolIT.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.apache.phoenix.end2end;\n+\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.query.BaseTest;\n+import org.apache.phoenix.schema.SchemaExtractionTool;\n+import org.apache.phoenix.util.PropertiesUtil;\n+import org.apache.phoenix.util.ReadOnlyProps;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+\n+public class SchemaExtractionToolIT extends BaseTest {\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        Map<String, String> props = Collections.emptyMap();\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n+\n+    @Test\n+    public void testCreateTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_MIGRATION=true,DISABLE_SOR=true,DISABLE_WAL=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n+                    + properties);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            String actualProperties = set.output.substring(set.output.lastIndexOf(\")\")+1).replace(\" \",\"\");\n+            Assert.assertEquals(5, actualProperties.split(\",\").length);\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateIndexStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String indexName = generateUniqueName();\n+        String indexName1 = generateUniqueName();\n+        String indexName2 = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_MIGRATION=true,DISABLE_SOR=true,DISABLE_WAL=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n+                    + properties);\n+\n+            String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+pTableFullName+\"(v1 DESC) INCLUDE (v2)\";\n+\n+            String createIndexStatement1 = \"CREATE INDEX \"+indexName1 + \" ON \"+pTableFullName+\"(v2 DESC) INCLUDE (v1)\";\n+\n+            String createIndexStatement2 = \"CREATE INDEX \"+indexName2 + \" ON \"+pTableFullName+\"(k)\";\n+\n+            conn.createStatement().execute(createIndexStatement);\n+            conn.createStatement().execute(createIndexStatement1);\n+            conn.createStatement().execute(createIndexStatement2);\n+            conn.commit();\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+\n+            String [] args = {\"-tb\", indexName, \"-s\", schemaName};\n+            set.run(args);\n+            Assert.assertEquals(createIndexStatement.toUpperCase(), set.output.toUpperCase());\n+\n+            String [] args1 = {\"-tb\", indexName1, \"-s\", schemaName};\n+            set.run(args1);\n+            Assert.assertEquals(createIndexStatement1.toUpperCase(), set.output.toUpperCase());\n+\n+            String [] args2 = {\"-tb\", indexName2, \"-s\", schemaName};\n+            set.run(args2);\n+            Assert.assertEquals(createIndexStatement2.toUpperCase(), set.output.toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateViewStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String viewName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_MIGRATION=true,DISABLE_SOR=true,DISABLE_WAL=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n+                    + properties);\n+            String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n+            String viewFullName1 = SchemaUtil.getQualifiedTableName(schemaName, viewName+\"1\");\n+\n+\n+            String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) AS SELECT * FROM \"+pTableFullName;\n+            String createView1 = \"CREATE VIEW \"+viewFullName1 + \"(id1 BIGINT, id2 BIGINT NOT NULL, id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) AS SELECT * FROM \"+pTableFullName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744025c30ab6f31038b17e28f3c2bab2695f3374"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNDE1NA==", "bodyText": "nit: long line", "url": "https://github.com/apache/phoenix/pull/806#discussion_r456134154", "createdAt": "2020-07-16T23:30:39Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/SchemaExtractionToolIT.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.apache.phoenix.end2end;\n+\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.query.BaseTest;\n+import org.apache.phoenix.schema.SchemaExtractionTool;\n+import org.apache.phoenix.util.PropertiesUtil;\n+import org.apache.phoenix.util.ReadOnlyProps;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;\n+\n+public class SchemaExtractionToolIT extends BaseTest {\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        Map<String, String> props = Collections.emptyMap();\n+        setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));\n+    }\n+\n+    @Test\n+    public void testCreateTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_MIGRATION=true,DISABLE_SOR=true,DISABLE_WAL=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n+                    + properties);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            String actualProperties = set.output.substring(set.output.lastIndexOf(\")\")+1).replace(\" \",\"\");\n+            Assert.assertEquals(5, actualProperties.split(\",\").length);\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateIndexStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String indexName = generateUniqueName();\n+        String indexName1 = generateUniqueName();\n+        String indexName2 = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_MIGRATION=true,DISABLE_SOR=true,DISABLE_WAL=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n+                    + properties);\n+\n+            String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+pTableFullName+\"(v1 DESC) INCLUDE (v2)\";\n+\n+            String createIndexStatement1 = \"CREATE INDEX \"+indexName1 + \" ON \"+pTableFullName+\"(v2 DESC) INCLUDE (v1)\";\n+\n+            String createIndexStatement2 = \"CREATE INDEX \"+indexName2 + \" ON \"+pTableFullName+\"(k)\";\n+\n+            conn.createStatement().execute(createIndexStatement);\n+            conn.createStatement().execute(createIndexStatement1);\n+            conn.createStatement().execute(createIndexStatement2);\n+            conn.commit();\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+\n+            String [] args = {\"-tb\", indexName, \"-s\", schemaName};\n+            set.run(args);\n+            Assert.assertEquals(createIndexStatement.toUpperCase(), set.output.toUpperCase());\n+\n+            String [] args1 = {\"-tb\", indexName1, \"-s\", schemaName};\n+            set.run(args1);\n+            Assert.assertEquals(createIndexStatement1.toUpperCase(), set.output.toUpperCase());\n+\n+            String [] args2 = {\"-tb\", indexName2, \"-s\", schemaName};\n+            set.run(args2);\n+            Assert.assertEquals(createIndexStatement2.toUpperCase(), set.output.toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateViewStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String viewName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_MIGRATION=true,DISABLE_SOR=true,DISABLE_WAL=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n+                    + properties);\n+            String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n+            String viewFullName1 = SchemaUtil.getQualifiedTableName(schemaName, viewName+\"1\");\n+\n+\n+            String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) AS SELECT * FROM \"+pTableFullName;\n+            String createView1 = \"CREATE VIEW \"+viewFullName1 + \"(id1 BIGINT, id2 BIGINT NOT NULL, id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) AS SELECT * FROM \"+pTableFullName;\n+\n+            conn.createStatement().execute(createView);\n+            conn.createStatement().execute(createView1);\n+            conn.commit();\n+            String [] args = {\"-tb\", viewName, \"-s\", schemaName};\n+\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            Assert.assertEquals(createView.toUpperCase(), set.output.toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateViewIndexStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String viewName = generateUniqueName();\n+        String childView = generateUniqueName();\n+        String indexName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_MIGRATION=true,DISABLE_SOR=true,DISABLE_WAL=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n+                    + properties);\n+            String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n+            String childviewName = SchemaUtil.getQualifiedTableName(schemaName, childView);\n+\n+            String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) AS SELECT * FROM \"+pTableFullName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744025c30ab6f31038b17e28f3c2bab2695f3374"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNTI0Nw==", "bodyText": "Maybe a more precise name here? If these are table properties, then getPropertyValues() and getDefaultPropertyValues()?", "url": "https://github.com/apache/phoenix/pull/806#discussion_r456135247", "createdAt": "2020-07-16T23:33:45Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/PTable.java", "diffHunk": "@@ -800,6 +801,8 @@ private static int getReservedQualifier(byte[] bytes, int offset, int length) {\n     Boolean useStatsForParallelization();\n     boolean hasViewModifiedUpdateCacheFrequency();\n     boolean hasViewModifiedUseStatsForParallelization();\n+    Map<String, String> getValues();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744025c30ab6f31038b17e28f3c2bab2695f3374"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNjA2Mw==", "bodyText": "What if a table has more than one column family?", "url": "https://github.com/apache/phoenix/pull/806#discussion_r456136063", "createdAt": "2020-07-16T23:36:27Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/SchemaExtractionTool.java", "diffHunk": "@@ -0,0 +1,488 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.conf.Configured;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.util.Tool;\n+import org.apache.hadoop.util.ToolRunner;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import static org.apache.hadoop.hbase.HColumnDescriptor.BLOOMFILTER;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.COMPRESSION;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.DATA_BLOCK_ENCODING;\n+import static org.apache.hadoop.hbase.HTableDescriptor.IS_META;\n+import static org.apache.phoenix.util.MetaDataUtil.VIEW_INDEX_ID_COLUMN_NAME;\n+import static org.apache.phoenix.util.SchemaUtil.DEFAULT_DATA_BLOCK_ENCODING;\n+\n+public class SchemaExtractionTool extends Configured implements Tool {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SchemaExtractionTool.class.getName());\n+    private static final Option HELP_OPTION = new Option(\"h\", \"help\",\n+            false, \"Help\");\n+    private static final Option TABLE_OPTION = new Option(\"tb\", \"table\", true,\n+            \"[Required] Table name ex. table1\");\n+    private static final Option SCHEMA_OPTION = new Option(\"s\", \"schema\", true,\n+            \"[Optional] Schema name ex. schema\");\n+\n+    private String pTableName;\n+    private String pSchemaName;\n+\n+    private static final String CREATE_TABLE = \"CREATE TABLE %s\";\n+    private static final String CREATE_INDEX = \"CREATE %sINDEX %s ON %s\";\n+    private static final String CREATE_VIEW = \"CREATE VIEW %s%s AS SELECT * FROM %s%s\";\n+    public static Configuration conf;\n+    Map<String, String> defaultProps = new HashMap<>();\n+    Map<String, String> definedProps = new HashMap<>();\n+    public String output;\n+\n+    @Override\n+    public int run(String[] args) throws Exception {\n+        populateToolAttributes(args);\n+        conf = HBaseConfiguration.addHbaseResources(getConf());\n+        PTable table = getPTable(pSchemaName, pTableName);\n+        output = getDDL(table);\n+        return 0;\n+    }\n+\n+    private String getDDL(PTable table) throws Exception {\n+        String ddl = null;\n+        if(table.getType().equals(PTableType.TABLE)) {\n+            ddl = extractCreateTableDDL(table);\n+        } else if(table.getType().equals(PTableType.INDEX)) {\n+            ddl = extractCreateIndexDDL(table);\n+        } else if(table.getType().equals(PTableType.VIEW)) {\n+            ddl = extractCreateViewDDL(table);\n+        }\n+        return ddl;\n+    }\n+\n+    protected String extractCreateIndexDDL(PTable indexPTable)\n+            throws SQLException {\n+        String pSchemaName = indexPTable.getSchemaName().getString();\n+        String pTableName = indexPTable.getTableName().getString();\n+\n+        String baseTableName = indexPTable.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(indexPTable.getSchemaName().getString(), baseTableName);\n+        PTable dataPTable = getPTable(baseTableFullName);\n+\n+        String defaultCF = SchemaUtil.getEmptyColumnFamilyAsString(indexPTable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "744025c30ab6f31038b17e28f3c2bab2695f3374"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNzEwMQ==", "bodyText": "(If you want to make supporting multiple column families a separate subtask JIRA and not block this PR that's fine, but I think it would be part of the requirement to merge the feature branch into a release branch.)", "url": "https://github.com/apache/phoenix/pull/806#discussion_r456137101", "createdAt": "2020-07-16T23:40:00Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/SchemaExtractionTool.java", "diffHunk": "@@ -0,0 +1,488 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.conf.Configured;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.util.Tool;\n+import org.apache.hadoop.util.ToolRunner;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import static org.apache.hadoop.hbase.HColumnDescriptor.BLOOMFILTER;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.COMPRESSION;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.DATA_BLOCK_ENCODING;\n+import static org.apache.hadoop.hbase.HTableDescriptor.IS_META;\n+import static org.apache.phoenix.util.MetaDataUtil.VIEW_INDEX_ID_COLUMN_NAME;\n+import static org.apache.phoenix.util.SchemaUtil.DEFAULT_DATA_BLOCK_ENCODING;\n+\n+public class SchemaExtractionTool extends Configured implements Tool {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SchemaExtractionTool.class.getName());\n+    private static final Option HELP_OPTION = new Option(\"h\", \"help\",\n+            false, \"Help\");\n+    private static final Option TABLE_OPTION = new Option(\"tb\", \"table\", true,\n+            \"[Required] Table name ex. table1\");\n+    private static final Option SCHEMA_OPTION = new Option(\"s\", \"schema\", true,\n+            \"[Optional] Schema name ex. schema\");\n+\n+    private String pTableName;\n+    private String pSchemaName;\n+\n+    private static final String CREATE_TABLE = \"CREATE TABLE %s\";\n+    private static final String CREATE_INDEX = \"CREATE %sINDEX %s ON %s\";\n+    private static final String CREATE_VIEW = \"CREATE VIEW %s%s AS SELECT * FROM %s%s\";\n+    public static Configuration conf;\n+    Map<String, String> defaultProps = new HashMap<>();\n+    Map<String, String> definedProps = new HashMap<>();\n+    public String output;\n+\n+    @Override\n+    public int run(String[] args) throws Exception {\n+        populateToolAttributes(args);\n+        conf = HBaseConfiguration.addHbaseResources(getConf());\n+        PTable table = getPTable(pSchemaName, pTableName);\n+        output = getDDL(table);\n+        return 0;\n+    }\n+\n+    private String getDDL(PTable table) throws Exception {\n+        String ddl = null;\n+        if(table.getType().equals(PTableType.TABLE)) {\n+            ddl = extractCreateTableDDL(table);\n+        } else if(table.getType().equals(PTableType.INDEX)) {\n+            ddl = extractCreateIndexDDL(table);\n+        } else if(table.getType().equals(PTableType.VIEW)) {\n+            ddl = extractCreateViewDDL(table);\n+        }\n+        return ddl;\n+    }\n+\n+    protected String extractCreateIndexDDL(PTable indexPTable)\n+            throws SQLException {\n+        String pSchemaName = indexPTable.getSchemaName().getString();\n+        String pTableName = indexPTable.getTableName().getString();\n+\n+        String baseTableName = indexPTable.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(indexPTable.getSchemaName().getString(), baseTableName);\n+        PTable dataPTable = getPTable(baseTableFullName);\n+\n+        String defaultCF = SchemaUtil.getEmptyColumnFamilyAsString(indexPTable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNjA2Mw=="}, "originalCommit": {"oid": "744025c30ab6f31038b17e28f3c2bab2695f3374"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzODQyMQ==", "bodyText": "As this class evolves, and before merging it to a release branch, let's split out the business logic from the \"tool\" parts that handle command-line parsing. Having an object API will make unit testing (and future reuse) easier.\nThe example to avoid here is IndexTool, which mixes in command-line parsing, MapReduce configuration, and some business logic all together.", "url": "https://github.com/apache/phoenix/pull/806#discussion_r456138421", "createdAt": "2020-07-16T23:44:17Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/SchemaExtractionTool.java", "diffHunk": "@@ -0,0 +1,488 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.conf.Configured;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.util.Tool;\n+import org.apache.hadoop.util.ToolRunner;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import static org.apache.hadoop.hbase.HColumnDescriptor.BLOOMFILTER;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.COMPRESSION;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.DATA_BLOCK_ENCODING;\n+import static org.apache.hadoop.hbase.HTableDescriptor.IS_META;\n+import static org.apache.phoenix.util.MetaDataUtil.VIEW_INDEX_ID_COLUMN_NAME;\n+import static org.apache.phoenix.util.SchemaUtil.DEFAULT_DATA_BLOCK_ENCODING;\n+\n+public class SchemaExtractionTool extends Configured implements Tool {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2382e0aae613357b68db6e6aea710e637b340b4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE0MjQ2MQ==", "bodyText": "It's also just useful to have a class that takes in a PTable and spits out SQL.", "url": "https://github.com/apache/phoenix/pull/806#discussion_r456142461", "createdAt": "2020-07-16T23:57:12Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/SchemaExtractionTool.java", "diffHunk": "@@ -0,0 +1,488 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.conf.Configured;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.util.Tool;\n+import org.apache.hadoop.util.ToolRunner;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import static org.apache.hadoop.hbase.HColumnDescriptor.BLOOMFILTER;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.COMPRESSION;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.DATA_BLOCK_ENCODING;\n+import static org.apache.hadoop.hbase.HTableDescriptor.IS_META;\n+import static org.apache.phoenix.util.MetaDataUtil.VIEW_INDEX_ID_COLUMN_NAME;\n+import static org.apache.phoenix.util.SchemaUtil.DEFAULT_DATA_BLOCK_ENCODING;\n+\n+public class SchemaExtractionTool extends Configured implements Tool {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzODQyMQ=="}, "originalCommit": {"oid": "e2382e0aae613357b68db6e6aea710e637b340b4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE0Mjc1Mg==", "bodyText": "How do we make sure these are kept up to date?", "url": "https://github.com/apache/phoenix/pull/806#discussion_r456142752", "createdAt": "2020-07-16T23:58:18Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/SchemaExtractionTool.java", "diffHunk": "@@ -0,0 +1,488 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.conf.Configured;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.util.Tool;\n+import org.apache.hadoop.util.ToolRunner;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import static org.apache.hadoop.hbase.HColumnDescriptor.BLOOMFILTER;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.COMPRESSION;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.DATA_BLOCK_ENCODING;\n+import static org.apache.hadoop.hbase.HTableDescriptor.IS_META;\n+import static org.apache.phoenix.util.MetaDataUtil.VIEW_INDEX_ID_COLUMN_NAME;\n+import static org.apache.phoenix.util.SchemaUtil.DEFAULT_DATA_BLOCK_ENCODING;\n+\n+public class SchemaExtractionTool extends Configured implements Tool {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SchemaExtractionTool.class.getName());\n+    private static final Option HELP_OPTION = new Option(\"h\", \"help\",\n+            false, \"Help\");\n+    private static final Option TABLE_OPTION = new Option(\"tb\", \"table\", true,\n+            \"[Required] Table name ex. table1\");\n+    private static final Option SCHEMA_OPTION = new Option(\"s\", \"schema\", true,\n+            \"[Optional] Schema name ex. schema\");\n+\n+    private String pTableName;\n+    private String pSchemaName;\n+\n+    private static final String CREATE_TABLE = \"CREATE TABLE %s\";\n+    private static final String CREATE_INDEX = \"CREATE %sINDEX %s ON %s\";\n+    private static final String CREATE_VIEW = \"CREATE VIEW %s%s AS SELECT * FROM %s%s\";\n+    public static Configuration conf;\n+    Map<String, String> defaultProps = new HashMap<>();\n+    Map<String, String> definedProps = new HashMap<>();\n+    public String output;\n+\n+    @Override\n+    public int run(String[] args) throws Exception {\n+        populateToolAttributes(args);\n+        conf = HBaseConfiguration.addHbaseResources(getConf());\n+        PTable table = getPTable(pSchemaName, pTableName);\n+        output = getDDL(table);\n+        return 0;\n+    }\n+\n+    private String getDDL(PTable table) throws Exception {\n+        String ddl = null;\n+        if(table.getType().equals(PTableType.TABLE)) {\n+            ddl = extractCreateTableDDL(table);\n+        } else if(table.getType().equals(PTableType.INDEX)) {\n+            ddl = extractCreateIndexDDL(table);\n+        } else if(table.getType().equals(PTableType.VIEW)) {\n+            ddl = extractCreateViewDDL(table);\n+        }\n+        return ddl;\n+    }\n+\n+    protected String extractCreateIndexDDL(PTable indexPTable)\n+            throws SQLException {\n+        String pSchemaName = indexPTable.getSchemaName().getString();\n+        String pTableName = indexPTable.getTableName().getString();\n+\n+        String baseTableName = indexPTable.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(indexPTable.getSchemaName().getString(), baseTableName);\n+        PTable dataPTable = getPTable(baseTableFullName);\n+\n+        String defaultCF = SchemaUtil.getEmptyColumnFamilyAsString(indexPTable);\n+        String indexedColumnsString = getIndexedColumnsString(indexPTable, dataPTable, defaultCF);\n+        String coveredColumnsString = getCoveredColumnsString(indexPTable, defaultCF);\n+\n+        return generateIndexDDLString(baseTableFullName, indexedColumnsString, coveredColumnsString,\n+                indexPTable.getIndexType().equals(PTable.IndexType.LOCAL), pTableName);\n+    }\n+\n+    //TODO: Indexed on an expression\n+    // test with different default CF, key is a included column\n+    private String getIndexedColumnsString(PTable indexPTable, PTable dataPTable, String defaultCF) {\n+\n+        List<PColumn> indexPK = indexPTable.getPKColumns();\n+        List<PColumn> dataPK = dataPTable.getPKColumns();\n+        Set<String> indexPkSet = new HashSet<>();\n+        Set<String> dataPkSet = new HashSet<>();\n+        Map<String, SortOrder> sortOrderMap = new HashMap<>();\n+        StringBuilder indexedColumnsBuilder = new StringBuilder();\n+        for (PColumn indexedColumn : indexPK) {\n+            String indexColumn = extractIndexColumn(indexedColumn.getName().getString(), defaultCF);\n+            if(indexColumn.equalsIgnoreCase(VIEW_INDEX_ID_COLUMN_NAME)) {\n+                continue;\n+            }\n+            indexPkSet.add(indexColumn);\n+            sortOrderMap.put(indexColumn, indexedColumn.getSortOrder());\n+        }\n+\n+        for(PColumn pColumn : dataPK) {\n+            dataPkSet.add(pColumn.getName().getString());\n+        }\n+\n+        Set<String> effectivePK = Sets.symmetricDifference(indexPkSet, dataPkSet);\n+        if (effectivePK.isEmpty()) {\n+            effectivePK = indexPkSet;\n+        }\n+        for (String column : effectivePK) {\n+            if(indexedColumnsBuilder.length()!=0) {\n+                indexedColumnsBuilder.append(\", \");\n+            }\n+            indexedColumnsBuilder.append(column);\n+            if(sortOrderMap.get(column)!= SortOrder.getDefault()) {\n+                indexedColumnsBuilder.append(\" \");\n+                indexedColumnsBuilder.append(sortOrderMap.get(column));\n+            }\n+        }\n+        return indexedColumnsBuilder.toString();\n+    }\n+\n+    private String extractIndexColumn(String columnName, String defaultCF) {\n+        String [] columnNameSplit = columnName.split(\":\");\n+        if(columnNameSplit[0].equals(\"\") || columnNameSplit[0].equalsIgnoreCase(defaultCF)) {\n+            return columnNameSplit[1];\n+        } else {\n+            return columnName.replace(\":\", \".\");\n+        }\n+    }\n+\n+    private String getCoveredColumnsString(PTable indexPTable, String defaultCF) {\n+        StringBuilder coveredColumnsBuilder = new StringBuilder();\n+        List<PColumn> pkColumns = indexPTable.getColumns();\n+        for (PColumn cc : pkColumns) {\n+            if(coveredColumnsBuilder.length()!=0) {\n+                coveredColumnsBuilder.append(\", \");\n+            }\n+            if(cc.getFamilyName()!=null) {\n+                String indexColumn = extractIndexColumn(cc.getName().getString(), defaultCF);\n+                coveredColumnsBuilder.append(indexColumn);\n+            }\n+        }\n+        return coveredColumnsBuilder.toString();\n+    }\n+\n+    protected String generateIndexDDLString(String baseTableFullName, String indexedColumnString, String coveredColumnString, boolean local, String pTableName) {\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_INDEX, local ? \"LOCAL \" : \"\", pTableName, baseTableFullName));\n+        outputBuilder.append(\"(\");\n+        outputBuilder.append(indexedColumnString);\n+        outputBuilder.append(\")\");\n+        if(!coveredColumnString.equals(\"\")) {\n+            outputBuilder.append(\" INCLUDE (\");\n+            outputBuilder.append(coveredColumnString);\n+            outputBuilder.append(\")\");\n+        }\n+        return outputBuilder.toString();\n+    }\n+\n+    PTable getPTable(String pTableFullName) throws SQLException {\n+        try (Connection conn = getConnection()) {\n+            return PhoenixRuntime.getTable(conn, pTableFullName);\n+        }\n+    }\n+\n+    protected String extractCreateViewDDL(PTable table) throws SQLException {\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+        String baseTableName = table.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, baseTableName);\n+        PTable baseTable = getPTable(baseTableFullName);\n+        String columnInfoString = getColumnInfoStringForView(table, baseTable);\n+\n+        String whereClause = table.getViewStatement();\n+        if(whereClause != null) {\n+            whereClause = whereClause.substring(whereClause.indexOf(\"WHERE\"));\n+        }\n+        return generateCreateViewDDL(columnInfoString, baseTableFullName, whereClause == null ? \"\" : \" \"+whereClause, pSchemaName, pTableName);\n+    }\n+\n+    private String generateCreateViewDDL(String columnInfoString, String baseTableFullName, String whereClause, String pSchemaName, String pTableName) {\n+        String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_VIEW, viewFullName, columnInfoString, baseTableFullName, whereClause));\n+        return outputBuilder.toString();\n+    }\n+\n+    public String extractCreateTableDDL(PTable table) throws IOException, SQLException {\n+\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+\n+        ConnectionQueryServices cqsi = getCQSIObject();\n+        HTableDescriptor htd = getHTableDescriptor(cqsi, table);\n+        HColumnDescriptor hcd = htd.getFamily(SchemaUtil.getEmptyColumnFamily(table));\n+\n+        populateDefaultProperties(table);\n+        setPTableProperties(table);\n+        setHTableProperties(htd);\n+        setHColumnFamilyProperties(hcd);\n+\n+        String columnInfoString = getColumnInfoStringForTable(table);\n+        String propertiesString = convertPropertiesToString();\n+\n+        return generateTableDDLString(columnInfoString, propertiesString, pSchemaName, pTableName);\n+    }\n+    private String generateTableDDLString(String columnInfoString,String propertiesString,String pSchemaName,String pTableName) {\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_TABLE, pTableFullName));\n+        outputBuilder.append(columnInfoString).append(\" \").append(propertiesString);\n+        return outputBuilder.toString();\n+    }\n+\n+    private void populateDefaultProperties(PTable table) {\n+        Map<String, String> propsMap = HColumnDescriptor.getDefaultValues();\n+        for (Map.Entry<String, String> entry : propsMap.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            defaultProps.put(key, value);\n+            if(key.equalsIgnoreCase(BLOOMFILTER) || key.equalsIgnoreCase(COMPRESSION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2382e0aae613357b68db6e6aea710e637b340b4"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE0MjkxOA==", "bodyText": "And what about if they're different for different major or minor HBase versions?", "url": "https://github.com/apache/phoenix/pull/806#discussion_r456142918", "createdAt": "2020-07-16T23:58:53Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/SchemaExtractionTool.java", "diffHunk": "@@ -0,0 +1,488 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.conf.Configured;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.util.Tool;\n+import org.apache.hadoop.util.ToolRunner;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import static org.apache.hadoop.hbase.HColumnDescriptor.BLOOMFILTER;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.COMPRESSION;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.DATA_BLOCK_ENCODING;\n+import static org.apache.hadoop.hbase.HTableDescriptor.IS_META;\n+import static org.apache.phoenix.util.MetaDataUtil.VIEW_INDEX_ID_COLUMN_NAME;\n+import static org.apache.phoenix.util.SchemaUtil.DEFAULT_DATA_BLOCK_ENCODING;\n+\n+public class SchemaExtractionTool extends Configured implements Tool {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SchemaExtractionTool.class.getName());\n+    private static final Option HELP_OPTION = new Option(\"h\", \"help\",\n+            false, \"Help\");\n+    private static final Option TABLE_OPTION = new Option(\"tb\", \"table\", true,\n+            \"[Required] Table name ex. table1\");\n+    private static final Option SCHEMA_OPTION = new Option(\"s\", \"schema\", true,\n+            \"[Optional] Schema name ex. schema\");\n+\n+    private String pTableName;\n+    private String pSchemaName;\n+\n+    private static final String CREATE_TABLE = \"CREATE TABLE %s\";\n+    private static final String CREATE_INDEX = \"CREATE %sINDEX %s ON %s\";\n+    private static final String CREATE_VIEW = \"CREATE VIEW %s%s AS SELECT * FROM %s%s\";\n+    public static Configuration conf;\n+    Map<String, String> defaultProps = new HashMap<>();\n+    Map<String, String> definedProps = new HashMap<>();\n+    public String output;\n+\n+    @Override\n+    public int run(String[] args) throws Exception {\n+        populateToolAttributes(args);\n+        conf = HBaseConfiguration.addHbaseResources(getConf());\n+        PTable table = getPTable(pSchemaName, pTableName);\n+        output = getDDL(table);\n+        return 0;\n+    }\n+\n+    private String getDDL(PTable table) throws Exception {\n+        String ddl = null;\n+        if(table.getType().equals(PTableType.TABLE)) {\n+            ddl = extractCreateTableDDL(table);\n+        } else if(table.getType().equals(PTableType.INDEX)) {\n+            ddl = extractCreateIndexDDL(table);\n+        } else if(table.getType().equals(PTableType.VIEW)) {\n+            ddl = extractCreateViewDDL(table);\n+        }\n+        return ddl;\n+    }\n+\n+    protected String extractCreateIndexDDL(PTable indexPTable)\n+            throws SQLException {\n+        String pSchemaName = indexPTable.getSchemaName().getString();\n+        String pTableName = indexPTable.getTableName().getString();\n+\n+        String baseTableName = indexPTable.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(indexPTable.getSchemaName().getString(), baseTableName);\n+        PTable dataPTable = getPTable(baseTableFullName);\n+\n+        String defaultCF = SchemaUtil.getEmptyColumnFamilyAsString(indexPTable);\n+        String indexedColumnsString = getIndexedColumnsString(indexPTable, dataPTable, defaultCF);\n+        String coveredColumnsString = getCoveredColumnsString(indexPTable, defaultCF);\n+\n+        return generateIndexDDLString(baseTableFullName, indexedColumnsString, coveredColumnsString,\n+                indexPTable.getIndexType().equals(PTable.IndexType.LOCAL), pTableName);\n+    }\n+\n+    //TODO: Indexed on an expression\n+    // test with different default CF, key is a included column\n+    private String getIndexedColumnsString(PTable indexPTable, PTable dataPTable, String defaultCF) {\n+\n+        List<PColumn> indexPK = indexPTable.getPKColumns();\n+        List<PColumn> dataPK = dataPTable.getPKColumns();\n+        Set<String> indexPkSet = new HashSet<>();\n+        Set<String> dataPkSet = new HashSet<>();\n+        Map<String, SortOrder> sortOrderMap = new HashMap<>();\n+        StringBuilder indexedColumnsBuilder = new StringBuilder();\n+        for (PColumn indexedColumn : indexPK) {\n+            String indexColumn = extractIndexColumn(indexedColumn.getName().getString(), defaultCF);\n+            if(indexColumn.equalsIgnoreCase(VIEW_INDEX_ID_COLUMN_NAME)) {\n+                continue;\n+            }\n+            indexPkSet.add(indexColumn);\n+            sortOrderMap.put(indexColumn, indexedColumn.getSortOrder());\n+        }\n+\n+        for(PColumn pColumn : dataPK) {\n+            dataPkSet.add(pColumn.getName().getString());\n+        }\n+\n+        Set<String> effectivePK = Sets.symmetricDifference(indexPkSet, dataPkSet);\n+        if (effectivePK.isEmpty()) {\n+            effectivePK = indexPkSet;\n+        }\n+        for (String column : effectivePK) {\n+            if(indexedColumnsBuilder.length()!=0) {\n+                indexedColumnsBuilder.append(\", \");\n+            }\n+            indexedColumnsBuilder.append(column);\n+            if(sortOrderMap.get(column)!= SortOrder.getDefault()) {\n+                indexedColumnsBuilder.append(\" \");\n+                indexedColumnsBuilder.append(sortOrderMap.get(column));\n+            }\n+        }\n+        return indexedColumnsBuilder.toString();\n+    }\n+\n+    private String extractIndexColumn(String columnName, String defaultCF) {\n+        String [] columnNameSplit = columnName.split(\":\");\n+        if(columnNameSplit[0].equals(\"\") || columnNameSplit[0].equalsIgnoreCase(defaultCF)) {\n+            return columnNameSplit[1];\n+        } else {\n+            return columnName.replace(\":\", \".\");\n+        }\n+    }\n+\n+    private String getCoveredColumnsString(PTable indexPTable, String defaultCF) {\n+        StringBuilder coveredColumnsBuilder = new StringBuilder();\n+        List<PColumn> pkColumns = indexPTable.getColumns();\n+        for (PColumn cc : pkColumns) {\n+            if(coveredColumnsBuilder.length()!=0) {\n+                coveredColumnsBuilder.append(\", \");\n+            }\n+            if(cc.getFamilyName()!=null) {\n+                String indexColumn = extractIndexColumn(cc.getName().getString(), defaultCF);\n+                coveredColumnsBuilder.append(indexColumn);\n+            }\n+        }\n+        return coveredColumnsBuilder.toString();\n+    }\n+\n+    protected String generateIndexDDLString(String baseTableFullName, String indexedColumnString, String coveredColumnString, boolean local, String pTableName) {\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_INDEX, local ? \"LOCAL \" : \"\", pTableName, baseTableFullName));\n+        outputBuilder.append(\"(\");\n+        outputBuilder.append(indexedColumnString);\n+        outputBuilder.append(\")\");\n+        if(!coveredColumnString.equals(\"\")) {\n+            outputBuilder.append(\" INCLUDE (\");\n+            outputBuilder.append(coveredColumnString);\n+            outputBuilder.append(\")\");\n+        }\n+        return outputBuilder.toString();\n+    }\n+\n+    PTable getPTable(String pTableFullName) throws SQLException {\n+        try (Connection conn = getConnection()) {\n+            return PhoenixRuntime.getTable(conn, pTableFullName);\n+        }\n+    }\n+\n+    protected String extractCreateViewDDL(PTable table) throws SQLException {\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+        String baseTableName = table.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, baseTableName);\n+        PTable baseTable = getPTable(baseTableFullName);\n+        String columnInfoString = getColumnInfoStringForView(table, baseTable);\n+\n+        String whereClause = table.getViewStatement();\n+        if(whereClause != null) {\n+            whereClause = whereClause.substring(whereClause.indexOf(\"WHERE\"));\n+        }\n+        return generateCreateViewDDL(columnInfoString, baseTableFullName, whereClause == null ? \"\" : \" \"+whereClause, pSchemaName, pTableName);\n+    }\n+\n+    private String generateCreateViewDDL(String columnInfoString, String baseTableFullName, String whereClause, String pSchemaName, String pTableName) {\n+        String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_VIEW, viewFullName, columnInfoString, baseTableFullName, whereClause));\n+        return outputBuilder.toString();\n+    }\n+\n+    public String extractCreateTableDDL(PTable table) throws IOException, SQLException {\n+\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+\n+        ConnectionQueryServices cqsi = getCQSIObject();\n+        HTableDescriptor htd = getHTableDescriptor(cqsi, table);\n+        HColumnDescriptor hcd = htd.getFamily(SchemaUtil.getEmptyColumnFamily(table));\n+\n+        populateDefaultProperties(table);\n+        setPTableProperties(table);\n+        setHTableProperties(htd);\n+        setHColumnFamilyProperties(hcd);\n+\n+        String columnInfoString = getColumnInfoStringForTable(table);\n+        String propertiesString = convertPropertiesToString();\n+\n+        return generateTableDDLString(columnInfoString, propertiesString, pSchemaName, pTableName);\n+    }\n+    private String generateTableDDLString(String columnInfoString,String propertiesString,String pSchemaName,String pTableName) {\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_TABLE, pTableFullName));\n+        outputBuilder.append(columnInfoString).append(\" \").append(propertiesString);\n+        return outputBuilder.toString();\n+    }\n+\n+    private void populateDefaultProperties(PTable table) {\n+        Map<String, String> propsMap = HColumnDescriptor.getDefaultValues();\n+        for (Map.Entry<String, String> entry : propsMap.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            defaultProps.put(key, value);\n+            if(key.equalsIgnoreCase(BLOOMFILTER) || key.equalsIgnoreCase(COMPRESSION)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE0Mjc1Mg=="}, "originalCommit": {"oid": "e2382e0aae613357b68db6e6aea710e637b340b4"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE0MzIzMA==", "bodyText": "Easier for forward porting to call this getTableDescriptor and have it return a TableDescriptor, since HTableDescriptor is deprecated in 2.x", "url": "https://github.com/apache/phoenix/pull/806#discussion_r456143230", "createdAt": "2020-07-16T23:59:55Z", "author": {"login": "gjacoby126"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/SchemaExtractionTool.java", "diffHunk": "@@ -0,0 +1,488 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.conf.Configured;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.util.Tool;\n+import org.apache.hadoop.util.ToolRunner;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import static org.apache.hadoop.hbase.HColumnDescriptor.BLOOMFILTER;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.COMPRESSION;\n+import static org.apache.hadoop.hbase.HColumnDescriptor.DATA_BLOCK_ENCODING;\n+import static org.apache.hadoop.hbase.HTableDescriptor.IS_META;\n+import static org.apache.phoenix.util.MetaDataUtil.VIEW_INDEX_ID_COLUMN_NAME;\n+import static org.apache.phoenix.util.SchemaUtil.DEFAULT_DATA_BLOCK_ENCODING;\n+\n+public class SchemaExtractionTool extends Configured implements Tool {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SchemaExtractionTool.class.getName());\n+    private static final Option HELP_OPTION = new Option(\"h\", \"help\",\n+            false, \"Help\");\n+    private static final Option TABLE_OPTION = new Option(\"tb\", \"table\", true,\n+            \"[Required] Table name ex. table1\");\n+    private static final Option SCHEMA_OPTION = new Option(\"s\", \"schema\", true,\n+            \"[Optional] Schema name ex. schema\");\n+\n+    private String pTableName;\n+    private String pSchemaName;\n+\n+    private static final String CREATE_TABLE = \"CREATE TABLE %s\";\n+    private static final String CREATE_INDEX = \"CREATE %sINDEX %s ON %s\";\n+    private static final String CREATE_VIEW = \"CREATE VIEW %s%s AS SELECT * FROM %s%s\";\n+    public static Configuration conf;\n+    Map<String, String> defaultProps = new HashMap<>();\n+    Map<String, String> definedProps = new HashMap<>();\n+    public String output;\n+\n+    @Override\n+    public int run(String[] args) throws Exception {\n+        populateToolAttributes(args);\n+        conf = HBaseConfiguration.addHbaseResources(getConf());\n+        PTable table = getPTable(pSchemaName, pTableName);\n+        output = getDDL(table);\n+        return 0;\n+    }\n+\n+    private String getDDL(PTable table) throws Exception {\n+        String ddl = null;\n+        if(table.getType().equals(PTableType.TABLE)) {\n+            ddl = extractCreateTableDDL(table);\n+        } else if(table.getType().equals(PTableType.INDEX)) {\n+            ddl = extractCreateIndexDDL(table);\n+        } else if(table.getType().equals(PTableType.VIEW)) {\n+            ddl = extractCreateViewDDL(table);\n+        }\n+        return ddl;\n+    }\n+\n+    protected String extractCreateIndexDDL(PTable indexPTable)\n+            throws SQLException {\n+        String pSchemaName = indexPTable.getSchemaName().getString();\n+        String pTableName = indexPTable.getTableName().getString();\n+\n+        String baseTableName = indexPTable.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(indexPTable.getSchemaName().getString(), baseTableName);\n+        PTable dataPTable = getPTable(baseTableFullName);\n+\n+        String defaultCF = SchemaUtil.getEmptyColumnFamilyAsString(indexPTable);\n+        String indexedColumnsString = getIndexedColumnsString(indexPTable, dataPTable, defaultCF);\n+        String coveredColumnsString = getCoveredColumnsString(indexPTable, defaultCF);\n+\n+        return generateIndexDDLString(baseTableFullName, indexedColumnsString, coveredColumnsString,\n+                indexPTable.getIndexType().equals(PTable.IndexType.LOCAL), pTableName);\n+    }\n+\n+    //TODO: Indexed on an expression\n+    // test with different default CF, key is a included column\n+    private String getIndexedColumnsString(PTable indexPTable, PTable dataPTable, String defaultCF) {\n+\n+        List<PColumn> indexPK = indexPTable.getPKColumns();\n+        List<PColumn> dataPK = dataPTable.getPKColumns();\n+        Set<String> indexPkSet = new HashSet<>();\n+        Set<String> dataPkSet = new HashSet<>();\n+        Map<String, SortOrder> sortOrderMap = new HashMap<>();\n+        StringBuilder indexedColumnsBuilder = new StringBuilder();\n+        for (PColumn indexedColumn : indexPK) {\n+            String indexColumn = extractIndexColumn(indexedColumn.getName().getString(), defaultCF);\n+            if(indexColumn.equalsIgnoreCase(VIEW_INDEX_ID_COLUMN_NAME)) {\n+                continue;\n+            }\n+            indexPkSet.add(indexColumn);\n+            sortOrderMap.put(indexColumn, indexedColumn.getSortOrder());\n+        }\n+\n+        for(PColumn pColumn : dataPK) {\n+            dataPkSet.add(pColumn.getName().getString());\n+        }\n+\n+        Set<String> effectivePK = Sets.symmetricDifference(indexPkSet, dataPkSet);\n+        if (effectivePK.isEmpty()) {\n+            effectivePK = indexPkSet;\n+        }\n+        for (String column : effectivePK) {\n+            if(indexedColumnsBuilder.length()!=0) {\n+                indexedColumnsBuilder.append(\", \");\n+            }\n+            indexedColumnsBuilder.append(column);\n+            if(sortOrderMap.get(column)!= SortOrder.getDefault()) {\n+                indexedColumnsBuilder.append(\" \");\n+                indexedColumnsBuilder.append(sortOrderMap.get(column));\n+            }\n+        }\n+        return indexedColumnsBuilder.toString();\n+    }\n+\n+    private String extractIndexColumn(String columnName, String defaultCF) {\n+        String [] columnNameSplit = columnName.split(\":\");\n+        if(columnNameSplit[0].equals(\"\") || columnNameSplit[0].equalsIgnoreCase(defaultCF)) {\n+            return columnNameSplit[1];\n+        } else {\n+            return columnName.replace(\":\", \".\");\n+        }\n+    }\n+\n+    private String getCoveredColumnsString(PTable indexPTable, String defaultCF) {\n+        StringBuilder coveredColumnsBuilder = new StringBuilder();\n+        List<PColumn> pkColumns = indexPTable.getColumns();\n+        for (PColumn cc : pkColumns) {\n+            if(coveredColumnsBuilder.length()!=0) {\n+                coveredColumnsBuilder.append(\", \");\n+            }\n+            if(cc.getFamilyName()!=null) {\n+                String indexColumn = extractIndexColumn(cc.getName().getString(), defaultCF);\n+                coveredColumnsBuilder.append(indexColumn);\n+            }\n+        }\n+        return coveredColumnsBuilder.toString();\n+    }\n+\n+    protected String generateIndexDDLString(String baseTableFullName, String indexedColumnString, String coveredColumnString, boolean local, String pTableName) {\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_INDEX, local ? \"LOCAL \" : \"\", pTableName, baseTableFullName));\n+        outputBuilder.append(\"(\");\n+        outputBuilder.append(indexedColumnString);\n+        outputBuilder.append(\")\");\n+        if(!coveredColumnString.equals(\"\")) {\n+            outputBuilder.append(\" INCLUDE (\");\n+            outputBuilder.append(coveredColumnString);\n+            outputBuilder.append(\")\");\n+        }\n+        return outputBuilder.toString();\n+    }\n+\n+    PTable getPTable(String pTableFullName) throws SQLException {\n+        try (Connection conn = getConnection()) {\n+            return PhoenixRuntime.getTable(conn, pTableFullName);\n+        }\n+    }\n+\n+    protected String extractCreateViewDDL(PTable table) throws SQLException {\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+        String baseTableName = table.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, baseTableName);\n+        PTable baseTable = getPTable(baseTableFullName);\n+        String columnInfoString = getColumnInfoStringForView(table, baseTable);\n+\n+        String whereClause = table.getViewStatement();\n+        if(whereClause != null) {\n+            whereClause = whereClause.substring(whereClause.indexOf(\"WHERE\"));\n+        }\n+        return generateCreateViewDDL(columnInfoString, baseTableFullName, whereClause == null ? \"\" : \" \"+whereClause, pSchemaName, pTableName);\n+    }\n+\n+    private String generateCreateViewDDL(String columnInfoString, String baseTableFullName, String whereClause, String pSchemaName, String pTableName) {\n+        String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_VIEW, viewFullName, columnInfoString, baseTableFullName, whereClause));\n+        return outputBuilder.toString();\n+    }\n+\n+    public String extractCreateTableDDL(PTable table) throws IOException, SQLException {\n+\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+\n+        ConnectionQueryServices cqsi = getCQSIObject();\n+        HTableDescriptor htd = getHTableDescriptor(cqsi, table);\n+        HColumnDescriptor hcd = htd.getFamily(SchemaUtil.getEmptyColumnFamily(table));\n+\n+        populateDefaultProperties(table);\n+        setPTableProperties(table);\n+        setHTableProperties(htd);\n+        setHColumnFamilyProperties(hcd);\n+\n+        String columnInfoString = getColumnInfoStringForTable(table);\n+        String propertiesString = convertPropertiesToString();\n+\n+        return generateTableDDLString(columnInfoString, propertiesString, pSchemaName, pTableName);\n+    }\n+    private String generateTableDDLString(String columnInfoString,String propertiesString,String pSchemaName,String pTableName) {\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_TABLE, pTableFullName));\n+        outputBuilder.append(columnInfoString).append(\" \").append(propertiesString);\n+        return outputBuilder.toString();\n+    }\n+\n+    private void populateDefaultProperties(PTable table) {\n+        Map<String, String> propsMap = HColumnDescriptor.getDefaultValues();\n+        for (Map.Entry<String, String> entry : propsMap.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            defaultProps.put(key, value);\n+            if(key.equalsIgnoreCase(BLOOMFILTER) || key.equalsIgnoreCase(COMPRESSION)) {\n+                defaultProps.put(key, \"NONE\");\n+            }\n+            if(key.equalsIgnoreCase(DATA_BLOCK_ENCODING)) {\n+                defaultProps.put(key, String.valueOf(DEFAULT_DATA_BLOCK_ENCODING));\n+            }\n+        }\n+        defaultProps.putAll(table.getDefaultValues());\n+    }\n+\n+    private void setHTableProperties(HTableDescriptor htd) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = htd.getValues();\n+        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+            ImmutableBytesWritable key = entry.getKey();\n+            ImmutableBytesWritable value = entry.getValue();\n+            if(Bytes.toString(key.get()).contains(\"coprocessor\") || Bytes.toString(key.get()).contains(IS_META)) {\n+                continue;\n+            }\n+            defaultProps.put(Bytes.toString(key.get()), \"false\");\n+            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+        }\n+    }\n+\n+    private void setHColumnFamilyProperties(HColumnDescriptor columnDescriptor) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptor.getValues();\n+        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+            ImmutableBytesWritable key = entry.getKey();\n+            ImmutableBytesWritable value = entry.getValue();\n+            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+        }\n+    }\n+\n+    private void setPTableProperties(PTable table) {\n+        Map <String, String> map = table.getValues();\n+        for(Map.Entry<String, String> entry : map.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            if(value != null) {\n+                definedProps.put(key, value);\n+            }\n+        }\n+    }\n+\n+    private HTableDescriptor getHTableDescriptor(ConnectionQueryServices cqsi, PTable table)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2382e0aae613357b68db6e6aea710e637b340b4"}, "originalPosition": 285}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c717ea07ca7271829c6bcab20678499fdd1d53", "author": {"user": null}, "url": "https://github.com/apache/phoenix/commit/f4c717ea07ca7271829c6bcab20678499fdd1d53", "committedDate": "2020-07-21T23:32:08Z", "message": "Fixing review comments 2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTE2NjA1", "url": "https://github.com/apache/phoenix/pull/806#pullrequestreview-453516605", "createdAt": "2020-07-22T17:05:54Z", "commit": {"oid": "f4c717ea07ca7271829c6bcab20678499fdd1d53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzowNTo1NFrOG1r9fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzowNTo1NFrOG1r9fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0Nzk2Ng==", "bodyText": "\"values\" seem like a bad name for maps that has both keys and values - how about \"properties\"? Looks like that's what are being put there.", "url": "https://github.com/apache/phoenix/pull/806#discussion_r458947966", "createdAt": "2020-07-22T17:05:54Z", "author": {"login": "priyankporwal"}, "path": "phoenix-core/src/main/java/org/apache/phoenix/schema/PTableImpl.java", "diffHunk": "@@ -230,6 +254,7 @@\n         private Boolean useStatsForParallelization;\n         private long viewTTL;\n         private long viewTTLHighWaterMark;\n+        private Map<String, String> values = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c717ea07ca7271829c6bcab20678499fdd1d53"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "455795967624c46fc9f174691b717ba7254a1a4e", "author": {"user": null}, "url": "https://github.com/apache/phoenix/commit/455795967624c46fc9f174691b717ba7254a1a4e", "committedDate": "2020-07-22T18:41:05Z", "message": "Fixing review comments 4"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTY5MTkw", "url": "https://github.com/apache/phoenix/pull/806#pullrequestreview-455969190", "createdAt": "2020-07-27T17:01:17Z", "commit": {"oid": "455795967624c46fc9f174691b717ba7254a1a4e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzowMjoyOVrOG3rclQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozMDowMFrOG3sciA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNjY5Mw==", "bodyText": "output should have a getter since you're accessing it lots of times from tests and I assume it's read-only externally.", "url": "https://github.com/apache/phoenix/pull/806#discussion_r461036693", "createdAt": "2020-07-27T17:02:29Z", "author": {"login": "gjacoby126"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionTool.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.apache.phoenix.schema;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.conf.Configured;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+\n+import org.apache.hadoop.util.Tool;\n+import org.apache.hadoop.util.ToolRunner;\n+import java.util.logging.Logger;\n+\n+public class SchemaExtractionTool extends Configured implements Tool {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SchemaExtractionTool.class.getName());\n+    private static final Option HELP_OPTION = new Option(\"h\", \"help\",\n+            false, \"Help\");\n+    private static final Option TABLE_OPTION = new Option(\"tb\", \"table\", true,\n+            \"[Required] Table name ex. table1\");\n+    private static final Option SCHEMA_OPTION = new Option(\"s\", \"schema\", true,\n+            \"[Optional] Schema name ex. schema\");\n+\n+    private String pTableName;\n+    private String pSchemaName;\n+\n+    public static Configuration conf;\n+    public String output;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455795967624c46fc9f174691b717ba7254a1a4e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0MDAxNg==", "bodyText": "This will be incorrect for multiple column families. (e.g two CFs with different values for the same property will overwrite each other)", "url": "https://github.com/apache/phoenix/pull/806#discussion_r461040016", "createdAt": "2020-07-27T17:07:50Z", "author": {"login": "gjacoby126"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.MetaDataUtil;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SchemaExtractionProcessor {\n+\n+    Map<String, String> defaultProps = new HashMap<>();\n+    Map<String, String> definedProps = new HashMap<>();\n+\n+    private static final String CREATE_TABLE = \"CREATE TABLE %s\";\n+    private static final String CREATE_INDEX = \"CREATE %sINDEX %s ON %s\";\n+    private static final String CREATE_VIEW = \"CREATE VIEW %s%s AS SELECT * FROM %s%s\";\n+\n+    private PTable table;\n+    private Configuration conf;\n+    public SchemaExtractionProcessor(Configuration conf, String pSchemaName, String pTableName)\n+            throws SQLException {\n+        this.conf = conf;\n+        this.table = getPTable(pSchemaName, pTableName);\n+    }\n+\n+    public String process() throws Exception {\n+        String ddl = null;\n+        if(this.table.getType().equals(PTableType.TABLE)) {\n+            ddl = extractCreateTableDDL(this.table);\n+        } else if(this.table.getType().equals(PTableType.INDEX)) {\n+            ddl = extractCreateIndexDDL(this.table);\n+        } else if(this.table.getType().equals(PTableType.VIEW)) {\n+            ddl = extractCreateViewDDL(this.table);\n+        }\n+        return ddl;\n+    }\n+\n+    protected String extractCreateIndexDDL(PTable indexPTable)\n+            throws SQLException {\n+        String pTableName = indexPTable.getTableName().getString();\n+\n+        String baseTableName = indexPTable.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil\n+                .getQualifiedTableName(indexPTable.getSchemaName().getString(), baseTableName);\n+        PTable dataPTable = getPTable(baseTableFullName);\n+\n+        String defaultCF = SchemaUtil.getEmptyColumnFamilyAsString(indexPTable);\n+        String indexedColumnsString = getIndexedColumnsString(indexPTable, dataPTable, defaultCF);\n+        String coveredColumnsString = getCoveredColumnsString(indexPTable, defaultCF);\n+\n+        return generateIndexDDLString(baseTableFullName, indexedColumnsString, coveredColumnsString,\n+                indexPTable.getIndexType().equals(PTable.IndexType.LOCAL), pTableName);\n+    }\n+\n+    //TODO: Indexed on an expression\n+    //TODO: test with different CF\n+    private String getIndexedColumnsString(PTable indexPTable, PTable dataPTable, String defaultCF) {\n+\n+        List<PColumn> indexPK = indexPTable.getPKColumns();\n+        List<PColumn> dataPK = dataPTable.getPKColumns();\n+        Set<String> indexPkSet = new HashSet<>();\n+        Set<String> dataPkSet = new HashSet<>();\n+        Map<String, SortOrder> sortOrderMap = new HashMap<>();\n+        StringBuilder indexedColumnsBuilder = new StringBuilder();\n+        for (PColumn indexedColumn : indexPK) {\n+            String indexColumn = extractIndexColumn(indexedColumn.getName().getString(), defaultCF);\n+            if(indexColumn.equalsIgnoreCase(MetaDataUtil.VIEW_INDEX_ID_COLUMN_NAME)) {\n+                continue;\n+            }\n+            indexPkSet.add(indexColumn);\n+            sortOrderMap.put(indexColumn, indexedColumn.getSortOrder());\n+        }\n+\n+        for(PColumn pColumn : dataPK) {\n+            dataPkSet.add(pColumn.getName().getString());\n+        }\n+\n+        Set<String> effectivePK = Sets.symmetricDifference(indexPkSet, dataPkSet);\n+        if (effectivePK.isEmpty()) {\n+            effectivePK = indexPkSet;\n+        }\n+        for (String column : effectivePK) {\n+            if(indexedColumnsBuilder.length()!=0) {\n+                indexedColumnsBuilder.append(\", \");\n+            }\n+            indexedColumnsBuilder.append(column);\n+            if(sortOrderMap.get(column)!= SortOrder.getDefault()) {\n+                indexedColumnsBuilder.append(\" \");\n+                indexedColumnsBuilder.append(sortOrderMap.get(column));\n+            }\n+        }\n+        return indexedColumnsBuilder.toString();\n+    }\n+\n+    private String extractIndexColumn(String columnName, String defaultCF) {\n+        String [] columnNameSplit = columnName.split(\":\");\n+        if(columnNameSplit[0].equals(\"\") || columnNameSplit[0].equalsIgnoreCase(defaultCF)) {\n+            return columnNameSplit[1];\n+        } else {\n+            return columnName.replace(\":\", \".\");\n+        }\n+    }\n+\n+    private String getCoveredColumnsString(PTable indexPTable, String defaultCF) {\n+        StringBuilder coveredColumnsBuilder = new StringBuilder();\n+        List<PColumn> pkColumns = indexPTable.getColumns();\n+        for (PColumn cc : pkColumns) {\n+            if(coveredColumnsBuilder.length()!=0) {\n+                coveredColumnsBuilder.append(\", \");\n+            }\n+            if(cc.getFamilyName()!=null) {\n+                String indexColumn = extractIndexColumn(cc.getName().getString(), defaultCF);\n+                coveredColumnsBuilder.append(indexColumn);\n+            }\n+        }\n+        return coveredColumnsBuilder.toString();\n+    }\n+\n+    protected String generateIndexDDLString(String baseTableFullName, String indexedColumnString,\n+            String coveredColumnString, boolean local, String pTableName) {\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_INDEX,\n+                local ? \"LOCAL \" : \"\", pTableName, baseTableFullName));\n+        outputBuilder.append(\"(\");\n+        outputBuilder.append(indexedColumnString);\n+        outputBuilder.append(\")\");\n+        if(!coveredColumnString.equals(\"\")) {\n+            outputBuilder.append(\" INCLUDE (\");\n+            outputBuilder.append(coveredColumnString);\n+            outputBuilder.append(\")\");\n+        }\n+        return outputBuilder.toString();\n+    }\n+\n+    PTable getPTable(String pTableFullName) throws SQLException {\n+        try (Connection conn = getConnection()) {\n+            return PhoenixRuntime.getTable(conn, pTableFullName);\n+        }\n+    }\n+\n+    protected String extractCreateViewDDL(PTable table) throws SQLException {\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+        String baseTableName = table.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, baseTableName);\n+        PTable baseTable = getPTable(baseTableFullName);\n+        String columnInfoString = getColumnInfoStringForView(table, baseTable);\n+\n+        String whereClause = table.getViewStatement();\n+        if(whereClause != null) {\n+            whereClause = whereClause.substring(whereClause.indexOf(\"WHERE\"));\n+        }\n+        return generateCreateViewDDL(columnInfoString, baseTableFullName,\n+                whereClause == null ? \"\" : \" \"+whereClause, pSchemaName, pTableName);\n+    }\n+\n+    private String generateCreateViewDDL(String columnInfoString, String baseTableFullName,\n+            String whereClause, String pSchemaName, String pTableName) {\n+        String viewFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_VIEW, viewFullName,\n+                columnInfoString, baseTableFullName, whereClause));\n+        return outputBuilder.toString();\n+    }\n+\n+    public String extractCreateTableDDL(PTable table) throws IOException, SQLException {\n+\n+        String pSchemaName = table.getSchemaName().getString();\n+        String pTableName = table.getTableName().getString();\n+\n+        ConnectionQueryServices cqsi = getCQSIObject();\n+        HTableDescriptor htd = getTableDescriptor(cqsi, table);\n+        HColumnDescriptor hcd = htd.getFamily(SchemaUtil.getEmptyColumnFamily(table));\n+\n+        populateDefaultProperties(table);\n+        setPTableProperties(table);\n+        setHTableProperties(htd);\n+        setHColumnFamilyProperties(hcd);\n+\n+        String columnInfoString = getColumnInfoStringForTable(table);\n+        String propertiesString = convertPropertiesToString();\n+\n+        return generateTableDDLString(columnInfoString, propertiesString, pSchemaName, pTableName);\n+    }\n+    private String generateTableDDLString(String columnInfoString, String propertiesString,\n+            String pSchemaName, String pTableName) {\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(pSchemaName, pTableName);\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_TABLE, pTableFullName));\n+        outputBuilder.append(columnInfoString).append(\" \").append(propertiesString);\n+        return outputBuilder.toString();\n+    }\n+\n+    private void populateDefaultProperties(PTable table) {\n+        Map<String, String> propsMap = HColumnDescriptor.getDefaultValues();\n+        for (Map.Entry<String, String> entry : propsMap.entrySet()) {\n+            String key = entry.getKey();\n+            String value = entry.getValue();\n+            defaultProps.put(key, value);\n+            if(key.equalsIgnoreCase(HColumnDescriptor.BLOOMFILTER) || key.equalsIgnoreCase(\n+                    HColumnDescriptor.COMPRESSION)) {\n+                defaultProps.put(key, \"NONE\");\n+            }\n+            if(key.equalsIgnoreCase(HColumnDescriptor.DATA_BLOCK_ENCODING)) {\n+                defaultProps.put(key, String.valueOf(SchemaUtil.DEFAULT_DATA_BLOCK_ENCODING));\n+            }\n+        }\n+        defaultProps.putAll(table.getDefaultPropertyValues());\n+    }\n+\n+    private void setHTableProperties(HTableDescriptor htd) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = htd.getValues();\n+        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+            ImmutableBytesWritable key = entry.getKey();\n+            ImmutableBytesWritable value = entry.getValue();\n+            if(Bytes.toString(key.get()).contains(\"coprocessor\") || Bytes.toString(key.get()).contains(\n+                    HTableDescriptor.IS_META)) {\n+                continue;\n+            }\n+            defaultProps.put(Bytes.toString(key.get()), \"false\");\n+            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+        }\n+    }\n+\n+    private void setHColumnFamilyProperties(HColumnDescriptor columnDescriptor) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptor.getValues();\n+        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+            ImmutableBytesWritable key = entry.getKey();\n+            ImmutableBytesWritable value = entry.getValue();\n+            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455795967624c46fc9f174691b717ba7254a1a4e"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0MDQ0NQ==", "bodyText": "Since the object's immutable, any reason not to cache the generated DDL and return the cached copy if process() is called more than once?", "url": "https://github.com/apache/phoenix/pull/806#discussion_r461040445", "createdAt": "2020-07-27T17:08:41Z", "author": {"login": "gjacoby126"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.MetaDataUtil;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SchemaExtractionProcessor {\n+\n+    Map<String, String> defaultProps = new HashMap<>();\n+    Map<String, String> definedProps = new HashMap<>();\n+\n+    private static final String CREATE_TABLE = \"CREATE TABLE %s\";\n+    private static final String CREATE_INDEX = \"CREATE %sINDEX %s ON %s\";\n+    private static final String CREATE_VIEW = \"CREATE VIEW %s%s AS SELECT * FROM %s%s\";\n+\n+    private PTable table;\n+    private Configuration conf;\n+    public SchemaExtractionProcessor(Configuration conf, String pSchemaName, String pTableName)\n+            throws SQLException {\n+        this.conf = conf;\n+        this.table = getPTable(pSchemaName, pTableName);\n+    }\n+\n+    public String process() throws Exception {\n+        String ddl = null;\n+        if(this.table.getType().equals(PTableType.TABLE)) {\n+            ddl = extractCreateTableDDL(this.table);\n+        } else if(this.table.getType().equals(PTableType.INDEX)) {\n+            ddl = extractCreateIndexDDL(this.table);\n+        } else if(this.table.getType().equals(PTableType.VIEW)) {\n+            ddl = extractCreateViewDDL(this.table);\n+        }\n+        return ddl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455795967624c46fc9f174691b717ba7254a1a4e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1MzA2NA==", "bodyText": "This won't work for tenant-owned schema objects -- if you're not going to tackle this now please file a subtask JIRA to do so before we merge into a real branch", "url": "https://github.com/apache/phoenix/pull/806#discussion_r461053064", "createdAt": "2020-07-27T17:30:00Z", "author": {"login": "gjacoby126"}, "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package org.apache.phoenix.schema;\n+\n+import com.google.common.collect.Sets;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HTableDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.phoenix.jdbc.PhoenixConnection;\n+import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n+import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.util.MetaDataUtil;\n+import org.apache.phoenix.util.PhoenixRuntime;\n+import org.apache.phoenix.util.SchemaUtil;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SchemaExtractionProcessor {\n+\n+    Map<String, String> defaultProps = new HashMap<>();\n+    Map<String, String> definedProps = new HashMap<>();\n+\n+    private static final String CREATE_TABLE = \"CREATE TABLE %s\";\n+    private static final String CREATE_INDEX = \"CREATE %sINDEX %s ON %s\";\n+    private static final String CREATE_VIEW = \"CREATE VIEW %s%s AS SELECT * FROM %s%s\";\n+\n+    private PTable table;\n+    private Configuration conf;\n+    public SchemaExtractionProcessor(Configuration conf, String pSchemaName, String pTableName)\n+            throws SQLException {\n+        this.conf = conf;\n+        this.table = getPTable(pSchemaName, pTableName);\n+    }\n+\n+    public String process() throws Exception {\n+        String ddl = null;\n+        if(this.table.getType().equals(PTableType.TABLE)) {\n+            ddl = extractCreateTableDDL(this.table);\n+        } else if(this.table.getType().equals(PTableType.INDEX)) {\n+            ddl = extractCreateIndexDDL(this.table);\n+        } else if(this.table.getType().equals(PTableType.VIEW)) {\n+            ddl = extractCreateViewDDL(this.table);\n+        }\n+        return ddl;\n+    }\n+\n+    protected String extractCreateIndexDDL(PTable indexPTable)\n+            throws SQLException {\n+        String pTableName = indexPTable.getTableName().getString();\n+\n+        String baseTableName = indexPTable.getParentTableName().getString();\n+        String baseTableFullName = SchemaUtil\n+                .getQualifiedTableName(indexPTable.getSchemaName().getString(), baseTableName);\n+        PTable dataPTable = getPTable(baseTableFullName);\n+\n+        String defaultCF = SchemaUtil.getEmptyColumnFamilyAsString(indexPTable);\n+        String indexedColumnsString = getIndexedColumnsString(indexPTable, dataPTable, defaultCF);\n+        String coveredColumnsString = getCoveredColumnsString(indexPTable, defaultCF);\n+\n+        return generateIndexDDLString(baseTableFullName, indexedColumnsString, coveredColumnsString,\n+                indexPTable.getIndexType().equals(PTable.IndexType.LOCAL), pTableName);\n+    }\n+\n+    //TODO: Indexed on an expression\n+    //TODO: test with different CF\n+    private String getIndexedColumnsString(PTable indexPTable, PTable dataPTable, String defaultCF) {\n+\n+        List<PColumn> indexPK = indexPTable.getPKColumns();\n+        List<PColumn> dataPK = dataPTable.getPKColumns();\n+        Set<String> indexPkSet = new HashSet<>();\n+        Set<String> dataPkSet = new HashSet<>();\n+        Map<String, SortOrder> sortOrderMap = new HashMap<>();\n+        StringBuilder indexedColumnsBuilder = new StringBuilder();\n+        for (PColumn indexedColumn : indexPK) {\n+            String indexColumn = extractIndexColumn(indexedColumn.getName().getString(), defaultCF);\n+            if(indexColumn.equalsIgnoreCase(MetaDataUtil.VIEW_INDEX_ID_COLUMN_NAME)) {\n+                continue;\n+            }\n+            indexPkSet.add(indexColumn);\n+            sortOrderMap.put(indexColumn, indexedColumn.getSortOrder());\n+        }\n+\n+        for(PColumn pColumn : dataPK) {\n+            dataPkSet.add(pColumn.getName().getString());\n+        }\n+\n+        Set<String> effectivePK = Sets.symmetricDifference(indexPkSet, dataPkSet);\n+        if (effectivePK.isEmpty()) {\n+            effectivePK = indexPkSet;\n+        }\n+        for (String column : effectivePK) {\n+            if(indexedColumnsBuilder.length()!=0) {\n+                indexedColumnsBuilder.append(\", \");\n+            }\n+            indexedColumnsBuilder.append(column);\n+            if(sortOrderMap.get(column)!= SortOrder.getDefault()) {\n+                indexedColumnsBuilder.append(\" \");\n+                indexedColumnsBuilder.append(sortOrderMap.get(column));\n+            }\n+        }\n+        return indexedColumnsBuilder.toString();\n+    }\n+\n+    private String extractIndexColumn(String columnName, String defaultCF) {\n+        String [] columnNameSplit = columnName.split(\":\");\n+        if(columnNameSplit[0].equals(\"\") || columnNameSplit[0].equalsIgnoreCase(defaultCF)) {\n+            return columnNameSplit[1];\n+        } else {\n+            return columnName.replace(\":\", \".\");\n+        }\n+    }\n+\n+    private String getCoveredColumnsString(PTable indexPTable, String defaultCF) {\n+        StringBuilder coveredColumnsBuilder = new StringBuilder();\n+        List<PColumn> pkColumns = indexPTable.getColumns();\n+        for (PColumn cc : pkColumns) {\n+            if(coveredColumnsBuilder.length()!=0) {\n+                coveredColumnsBuilder.append(\", \");\n+            }\n+            if(cc.getFamilyName()!=null) {\n+                String indexColumn = extractIndexColumn(cc.getName().getString(), defaultCF);\n+                coveredColumnsBuilder.append(indexColumn);\n+            }\n+        }\n+        return coveredColumnsBuilder.toString();\n+    }\n+\n+    protected String generateIndexDDLString(String baseTableFullName, String indexedColumnString,\n+            String coveredColumnString, boolean local, String pTableName) {\n+        StringBuilder outputBuilder = new StringBuilder(String.format(CREATE_INDEX,\n+                local ? \"LOCAL \" : \"\", pTableName, baseTableFullName));\n+        outputBuilder.append(\"(\");\n+        outputBuilder.append(indexedColumnString);\n+        outputBuilder.append(\")\");\n+        if(!coveredColumnString.equals(\"\")) {\n+            outputBuilder.append(\" INCLUDE (\");\n+            outputBuilder.append(coveredColumnString);\n+            outputBuilder.append(\")\");\n+        }\n+        return outputBuilder.toString();\n+    }\n+\n+    PTable getPTable(String pTableFullName) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455795967624c46fc9f174691b717ba7254a1a4e"}, "originalPosition": 153}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a889a7415f49520b4f584f8c8c52e5854c68b06f", "author": {"user": null}, "url": "https://github.com/apache/phoenix/commit/a889a7415f49520b4f584f8c8c52e5854c68b06f", "committedDate": "2020-07-27T17:48:11Z", "message": "Fixing review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b548b0512a72f77b329c4e04920f205df55d14b", "author": {"user": null}, "url": "https://github.com/apache/phoenix/commit/3b548b0512a72f77b329c4e04920f205df55d14b", "committedDate": "2020-07-27T20:09:16Z", "message": "Added appropriate message and support for tenant schema object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTkwMzY1", "url": "https://github.com/apache/phoenix/pull/806#pullrequestreview-456190365", "createdAt": "2020-07-27T22:56:31Z", "commit": {"oid": "3b548b0512a72f77b329c4e04920f205df55d14b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2047, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}