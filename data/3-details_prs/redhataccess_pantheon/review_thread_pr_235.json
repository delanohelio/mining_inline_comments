{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MzczNjEz", "number": 235, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo0NjowN1rODhN0IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODowNzozOFrODhoEqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU1OTM2OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo0NjowN1rOFr2_0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0Mjo1MVrOFr4rug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNDE2Mw==", "bodyText": "massive import order change \ud83d\ude1e\nWe should align all of our editors... somehow, as these changes obfuscate things", "url": "https://github.com/redhataccess/pantheon/pull/235#discussion_r381534163", "createdAt": "2020-02-19T20:46:07Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "diffHunk": "@@ -27,10 +25,21 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.annotation.Nonnull;\n-import java.util.Map;\n-\n-import static java.util.stream.Collectors.toMap;\n+import com.google.common.base.Charsets;\n+import com.google.common.hash.HashCode;\n+import com.google.common.hash.Hashing;\n+import com.ibm.icu.text.DateFormat;\n+import com.redhat.pantheon.asciidoctor.extension.HtmlModulePostprocessor;\n+import com.redhat.pantheon.asciidoctor.extension.MetadataExtractorTreeProcessor;\n+import com.redhat.pantheon.asciidoctor.extension.SlingResourceIncludeProcessor;\n+import com.redhat.pantheon.conf.GlobalConfig;\n+import com.redhat.pantheon.extension.HydraIntegration;\n+import com.redhat.pantheon.model.ProductVersion;\n+import com.redhat.pantheon.model.module.Content;\n+import com.redhat.pantheon.model.module.Metadata;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleVersion;\n+import com.redhat.pantheon.sling.ServiceResourceResolverProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77552a500b3ec7663a7fd2d0072f32ee2ecddea"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MTc4Ng==", "bodyText": "yes! I need start using IntelliJ.", "url": "https://github.com/redhataccess/pantheon/pull/235#discussion_r381561786", "createdAt": "2020-02-19T21:42:51Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "diffHunk": "@@ -27,10 +25,21 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.annotation.Nonnull;\n-import java.util.Map;\n-\n-import static java.util.stream.Collectors.toMap;\n+import com.google.common.base.Charsets;\n+import com.google.common.hash.HashCode;\n+import com.google.common.hash.Hashing;\n+import com.ibm.icu.text.DateFormat;\n+import com.redhat.pantheon.asciidoctor.extension.HtmlModulePostprocessor;\n+import com.redhat.pantheon.asciidoctor.extension.MetadataExtractorTreeProcessor;\n+import com.redhat.pantheon.asciidoctor.extension.SlingResourceIncludeProcessor;\n+import com.redhat.pantheon.conf.GlobalConfig;\n+import com.redhat.pantheon.extension.HydraIntegration;\n+import com.redhat.pantheon.model.ProductVersion;\n+import com.redhat.pantheon.model.module.Content;\n+import com.redhat.pantheon.model.module.Metadata;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleVersion;\n+import com.redhat.pantheon.sling.ServiceResourceResolverProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNDE2Mw=="}, "originalCommit": {"oid": "a77552a500b3ec7663a7fd2d0072f32ee2ecddea"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU2Nzk0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo0ODo1OFrOFr3FKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjowODozNFrOFsZiHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNTUzMA==", "bodyText": "you should use the new method here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            productName = productVersion.getProduct().getValueMap().get(\"name\").toString();\n          \n          \n            \n                            productName = productVersion.getProduct().name().get();", "url": "https://github.com/redhataccess/pantheon/pull/235#discussion_r381535530", "createdAt": "2020-02-19T20:48:58Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "diffHunk": "@@ -142,25 +151,55 @@ private String buildModule(Module base, ModuleVersion moduleVersion, Map<String,\n         try (ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver()) {\n             moduleVersion = serviceResourceResolver.getResource(moduleVersion.getPath()).adaptTo(ModuleVersion.class);\n \n+            // process product and version.\n+            ProductVersion productVersion = null;\n+            productVersion = moduleVersion.metadata().map(Metadata::productVersion)\n+                    .map(t -> {\n+                        try {\n+                            return t.getReference();\n+                        } catch (RepositoryException e) {\n+                            return null;\n+                        }\n+                    })\n+                    .get();\n+            String productName = null;\n+            if (productVersion != null) {\n+                productName = productVersion.getProduct().getValueMap().get(\"name\").toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77552a500b3ec7663a7fd2d0072f32ee2ecddea"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA5OTk5OA==", "bodyText": "done", "url": "https://github.com/redhataccess/pantheon/pull/235#discussion_r382099998", "createdAt": "2020-02-20T16:08:34Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "diffHunk": "@@ -142,25 +151,55 @@ private String buildModule(Module base, ModuleVersion moduleVersion, Map<String,\n         try (ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver()) {\n             moduleVersion = serviceResourceResolver.getResource(moduleVersion.getPath()).adaptTo(ModuleVersion.class);\n \n+            // process product and version.\n+            ProductVersion productVersion = null;\n+            productVersion = moduleVersion.metadata().map(Metadata::productVersion)\n+                    .map(t -> {\n+                        try {\n+                            return t.getReference();\n+                        } catch (RepositoryException e) {\n+                            return null;\n+                        }\n+                    })\n+                    .get();\n+            String productName = null;\n+            if (productVersion != null) {\n+                productName = productVersion.getProduct().getValueMap().get(\"name\").toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNTUzMA=="}, "originalCommit": {"oid": "a77552a500b3ec7663a7fd2d0072f32ee2ecddea"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjU2NjUzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjozMTozN1rOFsABRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoxODoxOFrOFseCpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY4MTk4OA==", "bodyText": "I think this can be simplified. The map calls are supposed to provide null-safety, but from your changes I suspect they aren\u2019t at the end. The last get() call will throw a NoSuchElementException if the updated date is not present, so I suggest the following:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (moduleVersion.metadata().get().getValueMap().containsKey(\"dateUploaded\")) {\n          \n          \n            \n                        Optional<Calendar> updatedDate = moduleVersion.metadata()\n          \n          \n            \n                                .map(Metadata::dataUploaded)\n          \n          \n            \n                                .map(Supplier::get);\n          \n      \n    \n    \n  \n\nAnd then in line 179 you should be able to do:\n            if(updatedDate.isPresent()) {\n                arts.attribute(\u201cpantheonupdateddate\u201d,  dateFormat.format(updatedDate.get().getTime()));\n            }", "url": "https://github.com/redhataccess/pantheon/pull/235#discussion_r381681988", "createdAt": "2020-02-20T02:31:37Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "diffHunk": "@@ -153,30 +151,38 @@ private String buildModule(Module base, ModuleVersion moduleVersion, Map<String,\n \n             // process product and version.\n             ProductVersion productVersion = null;\n-            productVersion = moduleVersion.metadata().map(Metadata::productVersion)\n-                    .map(t -> {\n-                        try {\n-                            return t.getReference();\n-                        } catch (RepositoryException e) {\n-                            return null;\n-                        }\n-                    })\n-                    .get();\n+            if (moduleVersion.metadata().get().getValueMap().containsKey(\"productVersion\")) {\n+                productVersion = moduleVersion.metadata().map(Metadata::productVersion)\n+                        .map(t -> {\n+                            try {\n+                                return t.getReference();\n+                            } catch (RepositoryException e) {\n+                                return null;\n+                            }\n+                        })\n+                        .get();\n+            }\n+\n             String productName = null;\n             if (productVersion != null) {\n-                productName = productVersion.getProduct().getValueMap().get(\"name\").toString();\n+                productName = productVersion.getProduct().name().get();\n+            }\n+            Calendar updatedDate = null;\n+            if (moduleVersion.metadata().get().getValueMap().containsKey(\"dateUploaded\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bf00bb62625fec5d151f6ef70cd2c898b3c138"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3Mzg2MQ==", "bodyText": "updated!", "url": "https://github.com/redhataccess/pantheon/pull/235#discussion_r382173861", "createdAt": "2020-02-20T18:18:18Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "diffHunk": "@@ -153,30 +151,38 @@ private String buildModule(Module base, ModuleVersion moduleVersion, Map<String,\n \n             // process product and version.\n             ProductVersion productVersion = null;\n-            productVersion = moduleVersion.metadata().map(Metadata::productVersion)\n-                    .map(t -> {\n-                        try {\n-                            return t.getReference();\n-                        } catch (RepositoryException e) {\n-                            return null;\n-                        }\n-                    })\n-                    .get();\n+            if (moduleVersion.metadata().get().getValueMap().containsKey(\"productVersion\")) {\n+                productVersion = moduleVersion.metadata().map(Metadata::productVersion)\n+                        .map(t -> {\n+                            try {\n+                                return t.getReference();\n+                            } catch (RepositoryException e) {\n+                                return null;\n+                            }\n+                        })\n+                        .get();\n+            }\n+\n             String productName = null;\n             if (productVersion != null) {\n-                productName = productVersion.getProduct().getValueMap().get(\"name\").toString();\n+                productName = productVersion.getProduct().name().get();\n+            }\n+            Calendar updatedDate = null;\n+            if (moduleVersion.metadata().get().getValueMap().containsKey(\"dateUploaded\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY4MTk4OA=="}, "originalCommit": {"oid": "45bf00bb62625fec5d151f6ef70cd2c898b3c138"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTg2MTU0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/AsciidoctorServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODowNzozOFrOFsdtAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoxMDoyM1rOFsdyuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE2ODMyMw==", "bodyText": "\ud83d\udc4d I guess this was never changed, but I wonder why it's presenting problems only now \ud83e\udd14", "url": "https://github.com/redhataccess/pantheon/pull/235#discussion_r382168323", "createdAt": "2020-02-20T18:07:38Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/AsciidoctorServiceTest.java", "diffHunk": "@@ -75,16 +76,16 @@ public void testGetModuleHtmlWhenCached() throws Exception {\n \n         // Given\n         slingContext.build()\n-                .resource(\"/module/locales/en_US/released/metadata\")\n-                .resource(\"/module/locales/en_US/released/content/asciidoc/jcr:content\",\n+                .resource(\"/module/en_US/released/metadata\")\n+                .resource(\"/module/en_US/released/content/asciidoc/jcr:content\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bf00bb62625fec5d151f6ef70cd2c898b3c138"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE2OTc4Nw==", "bodyText": "Line 60 failed on NoSuchElementException. Line 79-84 didn't fail. I changed it so that they are consistent.", "url": "https://github.com/redhataccess/pantheon/pull/235#discussion_r382169787", "createdAt": "2020-02-20T18:10:23Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/AsciidoctorServiceTest.java", "diffHunk": "@@ -75,16 +76,16 @@ public void testGetModuleHtmlWhenCached() throws Exception {\n \n         // Given\n         slingContext.build()\n-                .resource(\"/module/locales/en_US/released/metadata\")\n-                .resource(\"/module/locales/en_US/released/content/asciidoc/jcr:content\",\n+                .resource(\"/module/en_US/released/metadata\")\n+                .resource(\"/module/en_US/released/content/asciidoc/jcr:content\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE2ODMyMw=="}, "originalCommit": {"oid": "45bf00bb62625fec5d151f6ef70cd2c898b3c138"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 240, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}