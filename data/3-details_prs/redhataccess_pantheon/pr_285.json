{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjkxNzMx", "number": 285, "title": "Hash introduce to compare docs and early exit in case already exists", "bodyText": "", "createdAt": "2020-05-05T18:51:38Z", "url": "https://github.com/redhataccess/pantheon/pull/285", "merged": true, "mergeCommit": {"oid": "3a44aeea37d5ecdf6b66b6990954e3624c5dd539"}, "closed": true, "closedAt": "2020-05-14T07:03:59Z", "author": {"login": "rednitish"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceYr7ngH2gAyNDEzNjkxNzMxOmU0OTk5YTYzOGU5MDRiNzdiZGNjYTUxYjAxYjNkMDIzZjJlODg3MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgkvflgFqTQxMDA3MTg0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e4999a638e904b77bdcca51b01b3d023f2e88714", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/e4999a638e904b77bdcca51b01b3d023f2e88714", "committedDate": "2020-05-05T18:49:31Z", "message": "Hash introduce to compare docs and early exit in case already exists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7767cdcac125aa21f00b31265b84b0d63099da3", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/a7767cdcac125aa21f00b31265b84b0d63099da3", "committedDate": "2020-05-06T07:02:08Z", "message": "Hash introduce to compare docs and early exit in case already exists with test cases included"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd04370d8c1b3042aae5f00adef5a0364634ecee", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/dd04370d8c1b3042aae5f00adef5a0364634ecee", "committedDate": "2020-05-06T09:09:11Z", "message": "Hash introduce to compare docs and early exit in case already exists with coverage improved"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NzU1NDI1", "url": "https://github.com/redhataccess/pantheon/pull/285#pullrequestreview-406755425", "createdAt": "2020-05-06T15:55:57Z", "commit": {"oid": "dd04370d8c1b3042aae5f00adef5a0364634ecee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTo1NTo1OFrOGRZ6JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTo1NTo1OFrOGRZ6JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwMzQ2MQ==", "bodyText": "ooff... this formating \ud83e\udd22", "url": "https://github.com/redhataccess/pantheon/pull/285#discussion_r420903461", "createdAt": "2020-05-06T15:55:58Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/module/ModuleVersionUploadTest.java", "diffHunk": "@@ -280,6 +280,139 @@ void uploadIdenticalDraftVersion() throws Exception {\n         slingContext.resourceResolver().getResource(\"/new/module/es_ES\").adaptTo(ModifiableValueMap.class)\n                 .put(\"released\", slingContext.resourceResolver().getResource(\"/new/module/es_ES/1\").getValueMap().get(\"jcr:uuid\"));\n \n+        slingContext.resourceResolver().getResource(\"/new/module/es_ES/1\").adaptTo(ModifiableValueMap.class)\n+                .put(\"pant:hash\", \"bd7b5944327dce6ee8eb9573cb856d7528fbf8d634a4e8389a09f982571bf6c699f6dfefcd34fa6234e0acb19f46d1ee6d333a951476f1a712566bbc8d3552a2\");\n+        slingContext.resourceResolver().getResource(\"/new/module/es_ES/2\").adaptTo(ModifiableValueMap.class)\n+                .put(\"pant:hash\", \"bd7b5944327dce6ee8eb9573cb856d7528fbf8d634a4e8389a09f982571bf6c699f6dfefcd34fa6234e0acb19f46d1ee6d333a951476f1a712566bbc8d3552a2\");\n+\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(ModuleVersion.class), any(Resource.class), anyMap(), anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+        lenient().when(serviceResourceResolverProvider.getServiceResourceResolver())\n+                .thenReturn(slingContext.resourceResolver());\n+        ModuleVersionUpload upload = new ModuleVersionUpload(asciidoctorService, serviceResourceResolverProvider);\n+        Map<String, Object> params = newHashMap();\n+        params.put(\"locale\", \"es_ES\");\n+        params.put(\"asciidoc\", \"This is the draft adoc content\");\n+        registerMockAdapter(Module.class, slingContext);\n+        slingContext.request().setParameterMap(params);\n+        slingContext.request().setResource(new NonExistingResource(slingContext.resourceResolver(), \"/new/module\"));\n+\n+        // when\n+        upload.doRun(slingContext.request(), new HtmlResponse(), null);\n+\n+        // Then\n+        assertNotNull(slingContext.resourceResolver().getResource(\"/new/module/es_ES/2/content\"));\n+        assertNotNull(slingContext.resourceResolver().getResource(\"/new/module/es_ES/2/metadata\"));\n+        assertNotNull(slingContext.resourceResolver().getResource(\"/new/module/es_ES/1/content\"));\n+        assertNotNull(slingContext.resourceResolver().getResource(\"/new/module/es_ES/1/metadata\"));\n+\n+        Module module =\n+                SlingModels.getModel(slingContext.resourceResolver().getResource(\"/new/module\"), Module.class);\n+        assertEquals(\"This is the draft adoc content\",\n+                module.getDraftContent(LocaleUtils.toLocale(\"es_ES\")).get().asciidocContent().get()\n+        );\n+        assertEquals(\"This is the draft html content\",\n+                module.getDraftContent(LocaleUtils.toLocale(\"es_ES\")).get().cachedHtml().get().data().get()\n+        );\n+        assertEquals(\"This is the released adoc content\",\n+                module.getReleasedContent(LocaleUtils.toLocale(\"es_ES\")).get().asciidocContent().get()\n+        );\n+        verify(asciidoctorService, never()).getModuleHtml(\n+                any(ModuleVersion.class), any(Resource.class), anyMap(), anyBoolean());\n+    }\n+        @Test\n+    void uploadIdenticalDraftVersionWithDifferentHash() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/new/module/es_ES/1\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\") // released\n+                .resource(\"/new/module/es_ES/2\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\") // draft\n+                // Draft version\n+                .resource(\"/new/module/es_ES/2/metadata\")\n+                .resource(\"/new/module/es_ES/2/content/asciidoc/jcr:content\",\n+                        \"jcr:data\", \"This is the draft adoc content\")\n+                .resource(\"/new/module/es_ES/2/content/cachedHtml\",\n+                        \"jcr:data\", \"This is the draft html content\")\n+                // Released version\n+                .resource(\"/new/module/es_ES/1/metadata\")\n+                .resource(\"/new/module/es_ES/1/content/asciidoc/jcr:content\",\n+                        \"jcr:data\", \"This is the released adoc content\")\n+                .commit();\n+        // set the draft and released 'pointers'\n+        slingContext.resourceResolver().getResource(\"/new/module/es_ES\").adaptTo(ModifiableValueMap.class)\n+                .put(\"draft\", slingContext.resourceResolver().getResource(\"/new/module/es_ES/2\").getValueMap().get(\"jcr:uuid\"));\n+        slingContext.resourceResolver().getResource(\"/new/module/es_ES\").adaptTo(ModifiableValueMap.class)\n+                .put(\"released\", slingContext.resourceResolver().getResource(\"/new/module/es_ES/1\").getValueMap().get(\"jcr:uuid\"));\n+\n+        slingContext.resourceResolver().getResource(\"/new/module/es_ES/1\").adaptTo(ModifiableValueMap.class)\n+                .put(\"pant:hash\", \"bd7b5944327dce6ee8eb9573cb856d7528fbf8d634a4e8389a09f982571bf6c699f6dfefcd34fa6234e0acb19f46d1ee6d333a951476f1a712566bbc8d3552a2\");\n+        slingContext.resourceResolver().getResource(\"/new/module/es_ES/2\").adaptTo(ModifiableValueMap.class)\n+                .put(\"pant:hash\", \"cd7b5944327dce6ee8eb9573cb856d7528fbf8d634a4e8389a09f982571bf6c699f6dfefcd34fa6234e0acb19f46d1ee6d333a951476f1a712566bbc8d3552a2\");\n+\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(ModuleVersion.class), any(Resource.class), anyMap(), anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+        lenient().when(serviceResourceResolverProvider.getServiceResourceResolver())\n+                .thenReturn(slingContext.resourceResolver());\n+        ModuleVersionUpload upload = new ModuleVersionUpload(asciidoctorService, serviceResourceResolverProvider);\n+        Map<String, Object> params = newHashMap();\n+        params.put(\"locale\", \"es_ES\");\n+        params.put(\"asciidoc\", \"This is the draft adoc content\");\n+        registerMockAdapter(Module.class, slingContext);\n+        slingContext.request().setParameterMap(params);\n+        slingContext.request().setResource(new NonExistingResource(slingContext.resourceResolver(), \"/new/module\"));\n+\n+        // when\n+        upload.doRun(slingContext.request(), new HtmlResponse(), null);\n+\n+        // Then\n+        assertNotNull(slingContext.resourceResolver().getResource(\"/new/module/es_ES/2/content\"));\n+        assertNotNull(slingContext.resourceResolver().getResource(\"/new/module/es_ES/2/metadata\"));\n+        assertNotNull(slingContext.resourceResolver().getResource(\"/new/module/es_ES/1/content\"));\n+        assertNotNull(slingContext.resourceResolver().getResource(\"/new/module/es_ES/1/metadata\"));\n+\n+        Module module =\n+                SlingModels.getModel(slingContext.resourceResolver().getResource(\"/new/module\"), Module.class);\n+        assertEquals(\"This is the draft adoc content\",\n+                module.getDraftContent(LocaleUtils.toLocale(\"es_ES\")).get().asciidocContent().get()\n+        );\n+        assertEquals(\"This is the draft html content\",\n+                module.getDraftContent(LocaleUtils.toLocale(\"es_ES\")).get().cachedHtml().get().data().get()\n+        );\n+        assertEquals(\"This is the released adoc content\",\n+                module.getReleasedContent(LocaleUtils.toLocale(\"es_ES\")).get().asciidocContent().get()\n+        );\n+        verify(asciidoctorService, never()).getModuleHtml(\n+                any(ModuleVersion.class), any(Resource.class), anyMap(), anyBoolean());\n+    }        @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd04370d8c1b3042aae5f00adef5a0364634ecee"}, "originalPosition": 121}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23799193bd836fae6f9bf45bb260fcb49f333068", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/23799193bd836fae6f9bf45bb260fcb49f333068", "committedDate": "2020-05-07T07:21:54Z", "message": "Formatting issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMDcxODQx", "url": "https://github.com/redhataccess/pantheon/pull/285#pullrequestreview-410071841", "createdAt": "2020-05-12T14:00:07Z", "commit": {"oid": "23799193bd836fae6f9bf45bb260fcb49f333068"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2114, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}