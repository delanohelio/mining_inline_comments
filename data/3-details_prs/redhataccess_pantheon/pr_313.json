{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNTMyMjc5", "number": 313, "title": "Ccs 3225 Upload single product assembly", "bodyText": "This PR introduces the single produce assembly. Changes includes\n\nupdate uploader to handle assembly\na new servlet for DraftVersionUpload\nnodetypes for assembly\na simple assembly interface", "createdAt": "2020-06-10T15:25:04Z", "url": "https://github.com/redhataccess/pantheon/pull/313", "merged": true, "mergeCommit": {"oid": "31ba6f5fc9ab305f791ce8e5417dc9cafa35ce9e"}, "closed": true, "closedAt": "2020-06-16T20:02:21Z", "author": {"login": "xdavidson"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpXzE7gH2gAyNDMyNTMyMjc5Ojc1YjMzNzk1ZGEzZmI2NjZiZDgwOGUwMzY2ODU2YTRlYjI4ZGFiZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr612IAFqTQzMTg0NjIwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "75b33795da3fb666bd808e0366856a4eb28dabd5", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/75b33795da3fb666bd808e0366856a4eb28dabd5", "committedDate": "2020-06-08T22:00:35Z", "message": "initial work for assembly upload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31692e72b349869cade0fcf675bbcf60154280fc", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/31692e72b349869cade0fcf675bbcf60154280fc", "committedDate": "2020-06-10T15:20:06Z", "message": "initial unit tests for assembly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e65d194cee42c2d3fd5a4a8d670268efe20cfca", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/3e65d194cee42c2d3fd5a4a8d670268efe20cfca", "committedDate": "2020-06-10T15:36:08Z", "message": "remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/ceac6ebd78a978618a962eb0b3450b51c2ff89ef", "committedDate": "2020-06-10T15:45:58Z", "message": "update sample yaml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjkzNjYx", "url": "https://github.com/redhataccess/pantheon/pull/313#pullrequestreview-428293661", "createdAt": "2020-06-10T17:49:48Z", "commit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0OTo0OVrOGiAAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo1MjowMVrOGiAFjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDg5Nw==", "bodyText": "I'm not sure I love this. Perhaps we create a common interface called ContentLocale and have AssemblyLocale and ModuleLocale extend from it and change the JCR primary type.\nIs there a reason why we would need separate node types for this? We could have a single pant:contentLocale.", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438304897", "createdAt": "2020-06-10T17:49:49Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyLocale.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+\n+/**\n+ * A specific assembly locale node which houses asciidoc source and variants.\n+ * A locale will contain two folders to store the source content (draft and released),\n+ * and the different variants (the rendered content)\n+ */\n+@JcrPrimaryType(\"pant:assemblyLocale\")\n+public interface AssemblyLocale extends ModuleLocale {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTczNw==", "bodyText": "I would call the operation pant:newAssemblyVersion so that it aligns with the module-centric endpoint", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438305737", "createdAt": "2020-06-10T17:51:14Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.hash.HashCode;\n+import com.google.common.hash.Hashing;\n+import com.redhat.pantheon.conf.GlobalConfig;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyLocale;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import com.redhat.pantheon.servlet.module.ModuleVersionUpload;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.servlets.post.AbstractPostOperation;\n+import org.apache.sling.servlets.post.Modification;\n+import org.apache.sling.servlets.post.PostOperation;\n+import org.apache.sling.servlets.post.PostResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.RepositoryException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Locale;\n+\n+@Component(\n+        service = PostOperation.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet POST operation which accepts module uploads and versions them appropriately\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\",\n+                PostOperation.PROP_OPERATION_NAME + \"=pant:newDraftVersion\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNjE4OQ==", "bodyText": "We need to extract this into a common class as it's used in more than one place now", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438306189", "createdAt": "2020-06-10T17:52:01Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.hash.HashCode;\n+import com.google.common.hash.Hashing;\n+import com.redhat.pantheon.conf.GlobalConfig;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyLocale;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import com.redhat.pantheon.servlet.module.ModuleVersionUpload;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.servlets.post.AbstractPostOperation;\n+import org.apache.sling.servlets.post.Modification;\n+import org.apache.sling.servlets.post.PostOperation;\n+import org.apache.sling.servlets.post.PostResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.RepositoryException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Locale;\n+\n+@Component(\n+        service = PostOperation.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet POST operation which accepts module uploads and versions them appropriately\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\",\n+                PostOperation.PROP_OPERATION_NAME + \"=pant:newDraftVersion\"\n+        })\n+public class DraftVersionUpload extends AbstractPostOperation {\n+    private static final Logger log = LoggerFactory.getLogger(ModuleVersionUpload.class);\n+\n+    @Override\n+    protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) throws RepositoryException {\n+\n+        try {\n+            String locale = ServletUtils.paramValue(request, \"locale\", GlobalConfig.DEFAULT_MODULE_LOCALE.toString());\n+            String asciidocContent = ServletUtils.paramValue(request, \"asciidoc\");\n+//            String contentType = ServletUtils.paramValue(request, \"type\", \"assembly\");\n+\n+            String encoding = request.getCharacterEncoding();\n+            if (encoding != null) {\n+                asciidocContent = new String(asciidocContent.getBytes(encoding), StandardCharsets.UTF_8);\n+            }\n+\n+            String path = request.getResource().getPath();\n+\n+            log.debug(\"Pushing new version at: \" + path + \" with locale: \" + locale);\n+            log.trace(\"and content: \" + asciidocContent);\n+            int responseCode = HttpServletResponse.SC_OK;\n+\n+            // Try to find the resource\n+            ResourceResolver resolver = request.getResourceResolver();\n+            Resource resource = resolver.getResource(path);\n+            // TODO: need make it more generic so that it can create both module and assemly contentTypes\n+            Assembly assembly;\n+            if (resource == null) {\n+                assembly =\n+                        SlingModels.createModel(\n+                                resolver,\n+                                path,\n+                                Assembly.class);\n+                responseCode = HttpServletResponse.SC_CREATED;\n+            } else {\n+                assembly = resource.adaptTo(Assembly.class);\n+            }\n+\n+            Locale localeObj = LocaleUtils.toLocale(locale);\n+            AssemblyLocale assemblyLocale = assembly.assemblyLocale(localeObj).getOrCreate();\n+            HashableFileResource draftSrc = assemblyLocale\n+                    .source().getOrCreate()\n+                    .draft().getOrCreate();\n+\n+            // Check if the content is the same as what is hashed already\n+            HashCode incomingSrcHash = hash(asciidocContent);\n+            String storedSrcHash = draftSrc.hash().get();\n+            // If the source content is the same, don't update it\n+            if (incomingSrcHash.toString().equals(storedSrcHash)) {\n+                responseCode = HttpServletResponse.SC_NOT_MODIFIED;\n+            } else {\n+                draftSrc.jcrContent().getOrCreate()\n+                        .jcrData().set(asciidocContent);\n+                draftSrc.jcrContent().getOrCreate()\n+                        .mimeType().set(\"text/x-asciidoc\");\n+            }\n+\n+            resolver.commit();\n+\n+            // TODO: trigger an event to generate the html asynchronous\n+            response.setStatus(responseCode, \"\");\n+        } catch (Exception e) {\n+            throw new RepositoryException(\"Error uploading an assembly version\", e);\n+        }\n+    }\n+\n+    /*\n+     * calculates a hash for a string\n+     * TODO This should probably be moved elsewhere\n+     */\n+    private HashCode hash(String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTM5NDE1", "url": "https://github.com/redhataccess/pantheon/pull/313#pullrequestreview-429139415", "createdAt": "2020-06-11T17:35:55Z", "commit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzozNTo1NVrOGinryQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1NDozMVrOGiokIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NDk1Mw==", "bodyText": "Why does Assembly extend Module? Are we sure that it should? Perhaps it would make more sense for both Assembly and Module to extend a common parent.", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438954953", "createdAt": "2020-06-11T17:35:55Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/Assembly.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.Field;\n+import com.redhat.pantheon.model.api.WorkspaceChild;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.module.Module;\n+\n+import javax.inject.Named;\n+import java.util.Locale;\n+\n+@JcrPrimaryType(\"pant:assembly\")\n+public interface Assembly extends Module {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NTMwMA==", "bodyText": "And for that matter, maybe Resource should extend from the parent as well, depending on what turns out to be shared.", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438955300", "createdAt": "2020-06-11T17:36:31Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/Assembly.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.Field;\n+import com.redhat.pantheon.model.api.WorkspaceChild;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.module.Module;\n+\n+import javax.inject.Named;\n+import java.util.Locale;\n+\n+@JcrPrimaryType(\"pant:assembly\")\n+public interface Assembly extends Module {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NDk1Mw=="}, "originalCommit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1OTY4NA==", "bodyText": "So I agree with the first part - I'm not sure that it makes sense for any Assembly classes to extend the Module classes.\nHowever, I'm not sold on the second idea for ContentLocale. I do like the idea of having separate node types, because otherwise we could accidentally \"jump the tracks\" in the code, like this example that I'll make up:\nModule m;\nm.getContentLocale(\"en-US\").getAsmVariant(\"rhel-8\").getReleased().getPage(3);\n\nNotice that we started with a Module object but somehow wound up with a call to getPage which only makes sense in an assembly context - but the code could be syntactically correct and could compile (if not run successfully) because the ContentLocale object would need to have methods for both assemblies and modules if we don't break them out into separate nodes/classes.", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438959684", "createdAt": "2020-06-11T17:43:11Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyLocale.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+\n+/**\n+ * A specific assembly locale node which houses asciidoc source and variants.\n+ * A locale will contain two folders to store the source content (draft and released),\n+ * and the different variants (the rendered content)\n+ */\n+@JcrPrimaryType(\"pant:assemblyLocale\")\n+public interface AssemblyLocale extends ModuleLocale {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDg5Nw=="}, "originalCommit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2MTAzMQ==", "bodyText": "+1", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438961031", "createdAt": "2020-06-11T17:44:46Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.hash.HashCode;\n+import com.google.common.hash.Hashing;\n+import com.redhat.pantheon.conf.GlobalConfig;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyLocale;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import com.redhat.pantheon.servlet.module.ModuleVersionUpload;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.servlets.post.AbstractPostOperation;\n+import org.apache.sling.servlets.post.Modification;\n+import org.apache.sling.servlets.post.PostOperation;\n+import org.apache.sling.servlets.post.PostResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.RepositoryException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Locale;\n+\n+@Component(\n+        service = PostOperation.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet POST operation which accepts module uploads and versions them appropriately\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\",\n+                PostOperation.PROP_OPERATION_NAME + \"=pant:newDraftVersion\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTczNw=="}, "originalCommit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2NDgyNQ==", "bodyText": "Not sure what was your scope of \"this\" in your comment, but I would include extracting the bits like getting the parameters, figuring out the encoding, the commit() line, maybe even storing the source on the draft node if we can find a generic way to do that.", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438964825", "createdAt": "2020-06-11T17:49:10Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/DraftVersionUpload.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.hash.HashCode;\n+import com.google.common.hash.Hashing;\n+import com.redhat.pantheon.conf.GlobalConfig;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyLocale;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import com.redhat.pantheon.servlet.module.ModuleVersionUpload;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.servlets.post.AbstractPostOperation;\n+import org.apache.sling.servlets.post.Modification;\n+import org.apache.sling.servlets.post.PostOperation;\n+import org.apache.sling.servlets.post.PostResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.RepositoryException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Locale;\n+\n+@Component(\n+        service = PostOperation.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet POST operation which accepts module uploads and versions them appropriately\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\",\n+                PostOperation.PROP_OPERATION_NAME + \"=pant:newDraftVersion\"\n+        })\n+public class DraftVersionUpload extends AbstractPostOperation {\n+    private static final Logger log = LoggerFactory.getLogger(ModuleVersionUpload.class);\n+\n+    @Override\n+    protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) throws RepositoryException {\n+\n+        try {\n+            String locale = ServletUtils.paramValue(request, \"locale\", GlobalConfig.DEFAULT_MODULE_LOCALE.toString());\n+            String asciidocContent = ServletUtils.paramValue(request, \"asciidoc\");\n+//            String contentType = ServletUtils.paramValue(request, \"type\", \"assembly\");\n+\n+            String encoding = request.getCharacterEncoding();\n+            if (encoding != null) {\n+                asciidocContent = new String(asciidocContent.getBytes(encoding), StandardCharsets.UTF_8);\n+            }\n+\n+            String path = request.getResource().getPath();\n+\n+            log.debug(\"Pushing new version at: \" + path + \" with locale: \" + locale);\n+            log.trace(\"and content: \" + asciidocContent);\n+            int responseCode = HttpServletResponse.SC_OK;\n+\n+            // Try to find the resource\n+            ResourceResolver resolver = request.getResourceResolver();\n+            Resource resource = resolver.getResource(path);\n+            // TODO: need make it more generic so that it can create both module and assemly contentTypes\n+            Assembly assembly;\n+            if (resource == null) {\n+                assembly =\n+                        SlingModels.createModel(\n+                                resolver,\n+                                path,\n+                                Assembly.class);\n+                responseCode = HttpServletResponse.SC_CREATED;\n+            } else {\n+                assembly = resource.adaptTo(Assembly.class);\n+            }\n+\n+            Locale localeObj = LocaleUtils.toLocale(locale);\n+            AssemblyLocale assemblyLocale = assembly.assemblyLocale(localeObj).getOrCreate();\n+            HashableFileResource draftSrc = assemblyLocale\n+                    .source().getOrCreate()\n+                    .draft().getOrCreate();\n+\n+            // Check if the content is the same as what is hashed already\n+            HashCode incomingSrcHash = hash(asciidocContent);\n+            String storedSrcHash = draftSrc.hash().get();\n+            // If the source content is the same, don't update it\n+            if (incomingSrcHash.toString().equals(storedSrcHash)) {\n+                responseCode = HttpServletResponse.SC_NOT_MODIFIED;\n+            } else {\n+                draftSrc.jcrContent().getOrCreate()\n+                        .jcrData().set(asciidocContent);\n+                draftSrc.jcrContent().getOrCreate()\n+                        .mimeType().set(\"text/x-asciidoc\");\n+            }\n+\n+            resolver.commit();\n+\n+            // TODO: trigger an event to generate the html asynchronous\n+            response.setStatus(responseCode, \"\");\n+        } catch (Exception e) {\n+            throw new RepositoryException(\"Error uploading an assembly version\", e);\n+        }\n+    }\n+\n+    /*\n+     * calculates a hash for a string\n+     * TODO This should probably be moved elsewhere\n+     */\n+    private HashCode hash(String str) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNjE4OQ=="}, "originalCommit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTM3OA==", "bodyText": "Pointing out here that if you change the servlet operation to 'pant:newAssemblyVersion' as Carlos suggested, you'd need to change it here, too.", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r438969378", "createdAt": "2020-06-11T17:54:31Z", "author": {"login": "benradey"}, "path": "uploader/pantheon.py", "diffHunk": "@@ -283,6 +287,18 @@ def process_file(path, filetype):\n             if not args.dry:\n                 r = requests.post(url, headers=HEADERS, files=files, auth=(args.user, pw))\n                 _print_response('resource', path, r.status_code, r.reason)\n+    elif isAssembly:\n+        url += '/' + path.name\n+        logger.debug('url: %s', url)\n+        jcr_primary_type = 'pant:assembly'\n+        data = _generate_data(jcr_primary_type, base_name, path.name, asccidoc_type='nt:file')\n+        # This is needed to add a new module version, otherwise it won't be handled\n+        data[':operation'] = 'pant:newDraftVersion'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceac6ebd78a978618a962eb0b3450b51c2ff89ef"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b908e9edb8a980590a6813e79232b3f067bc388", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/4b908e9edb8a980590a6813e79232b3f067bc388", "committedDate": "2020-06-11T19:36:42Z", "message": "update ackStatus per recent module/variant.json api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6908b81fa4afefca93b05d9fd029562a27ca911", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/d6908b81fa4afefca93b05d9fd029562a27ca911", "committedDate": "2020-06-11T20:27:05Z", "message": "python exception when keyword is missing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b46ecd6d1ff9b9880e706ac6e666aade0eb6292", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/8b46ecd6d1ff9b9880e706ac6e666aade0eb6292", "committedDate": "2020-06-11T20:54:15Z", "message": "update ackStatus test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/9f7c54dc90567916cc758855f1cea1f0b23e4ac9", "committedDate": "2020-06-15T20:34:12Z", "message": "code reivew fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNjA2NTY0", "url": "https://github.com/redhataccess/pantheon/pull/313#pullrequestreview-431606564", "createdAt": "2020-06-16T15:09:32Z", "commit": {"oid": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTowOTozMlrOGkgCTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTowOTozMlrOGkgCTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNjc5OA==", "bodyText": "Thanks! \ud83d\udc4d", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r440926798", "createdAt": "2020-06-16T15:09:32Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/jcr/JcrResources.java", "diffHunk": "@@ -16,4 +19,12 @@ public static void rename(Resource resource, String newName) throws RepositoryEx\n         Session session = resourceResolver.adaptTo(Session.class);\n         session.move(resource.getPath(), resource.getParent().getPath() + \"/\" + newName);\n     }\n+\n+    /*\n+     * calculates a hash for a string\n+     *\n+     */\n+    public static HashCode hash(String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNjA4MTA5", "url": "https://github.com/redhataccess/pantheon/pull/313#pullrequestreview-431608109", "createdAt": "2020-06-16T15:10:40Z", "commit": {"oid": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxMDo0MFrOGkgFmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxMDo0MFrOGkgFmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNzY0Mw==", "bodyText": "I would just get rid of these comments.", "url": "https://github.com/redhataccess/pantheon/pull/313#discussion_r440927643", "createdAt": "2020-06-16T15:10:40Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/ModuleLocale.java", "diffHunk": "@@ -10,11 +11,11 @@\n  * and the different variants (the rendered content)\n  */\n @JcrPrimaryType(\"pant:moduleLocale\")\n-public interface ModuleLocale extends WorkspaceChild {\n+public interface ModuleLocale extends DocumentLocale {\n \n-    Child<SourceContent> source();\n-\n-    Child<Variants> variants();\n+//    Child<SourceContent> source();\n+//\n+//    Child<Variants> variants();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7c54dc90567916cc758855f1cea1f0b23e4ac9"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d189de1e75142cc24b64677d106a0acb331cc32b", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/d189de1e75142cc24b64677d106a0acb331cc32b", "committedDate": "2020-06-16T19:56:47Z", "message": "rename assembly upload servlet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODQ2MjA1", "url": "https://github.com/redhataccess/pantheon/pull/313#pullrequestreview-431846205", "createdAt": "2020-06-16T19:58:08Z", "commit": {"oid": "d189de1e75142cc24b64677d106a0acb331cc32b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2146, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}