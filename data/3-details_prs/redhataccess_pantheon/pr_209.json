{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODIzNjAw", "number": 209, "title": "Ccs-3262", "bodyText": "Changes in the search page as per the updated wireframe.", "createdAt": "2020-01-16T20:08:52Z", "url": "https://github.com/redhataccess/pantheon/pull/209", "merged": true, "mergeCommit": {"oid": "b77eb63f50d540fc89513406e340e1e07d46d338"}, "closed": true, "closedAt": "2020-01-24T15:58:30Z", "author": {"login": "ankkit24"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4DZ1IgH2gAyMzYzODIzNjAwOmM0YjJmNmFmYTM5NzI2MWE3NzM4OWUyNDYwYzJkN2JlZjkwYzZiNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9PsZrgFqTM0NzU1OTA3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c4b2f6afa397261a77389e2460c2d7bef90c6b47", "author": {"user": null}, "url": "https://github.com/redhataccess/pantheon/commit/c4b2f6afa397261a77389e2460c2d7bef90c6b47", "committedDate": "2020-01-07T16:32:37Z", "message": "add: search page changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16371b3912a7d69b68125738b94d85b564982a41", "author": {"user": null}, "url": "https://github.com/redhataccess/pantheon/commit/16371b3912a7d69b68125738b94d85b564982a41", "committedDate": "2020-01-07T16:33:34Z", "message": "Merge remote-tracking branch 'upstream/master' into CCS-3262"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da6a9343d51b34f9ca3c53e8ac2864ed04aeca69", "author": {"user": null}, "url": "https://github.com/redhataccess/pantheon/commit/da6a9343d51b34f9ca3c53e8ac2864ed04aeca69", "committedDate": "2020-01-09T14:44:13Z", "message": "Add: published and draft uploaded dates populated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7eb7cdae664b305f9a833afa33319083b6192a6", "author": {"user": null}, "url": "https://github.com/redhataccess/pantheon/commit/e7eb7cdae664b305f9a833afa33319083b6192a6", "committedDate": "2020-01-14T21:48:45Z", "message": "Date format changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34241b8e49339f40752d9d9d7d0af554e70537a9", "author": {"user": null}, "url": "https://github.com/redhataccess/pantheon/commit/34241b8e49339f40752d9d9d7d0af554e70537a9", "committedDate": "2020-01-16T20:04:24Z", "message": "Update: date format update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njc2Mjgz", "url": "https://github.com/redhataccess/pantheon/pull/209#pullrequestreview-344676283", "createdAt": "2020-01-17T15:59:48Z", "commit": {"oid": "34241b8e49339f40752d9d9d7d0af554e70537a9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1OTo0OFrOFe9isA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjowNjowMlrOFe9vAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTkwNA==", "bodyText": "Hey Ankit, please uncomment all these tests.", "url": "https://github.com/redhataccess/pantheon/pull/209#discussion_r368009904", "createdAt": "2020-01-17T15:59:48Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/frontend/src/app/search.test.tsx", "diffHunk": "@@ -21,185 +21,185 @@ describe('Search tests', () => {\n     expect(button.exists()).toBe(true)\n   })\n \n-  it('should render a DataList', () => {\n-    const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n-    const dataList = wrapper.find(DataList)\n-    expect(dataList.exists()).toBe(true)\n-  })\n-\n-  it('should render a TextInput', () => {\n-    const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n-    const textInput = wrapper.find(TextInput)\n-    expect(textInput.exists()).toBe(true)\n-  })\n-\n-  it('should render a BuildInfo component', () => {\n-    const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n-    const buildInfo = wrapper.find(BuildInfo)\n-    expect(buildInfo.exists()).toBe(true)\n-  })\n-\n-  it('should render a level component', () => {\n-    const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n-    const level = wrapper.find(Level)\n-    expect(level.exists()).toBe(true)\n-  })\n-\n-  it('should render a Level component', () => {\n-    const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n-    const level = wrapper.find(Level)\n-    expect(level.exists()).toBe(true)\n-  })\n-\n-  it('should render a levelItem component', () => {\n-    const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n-    const levelItem = wrapper.find(LevelItem)\n-    expect(levelItem.exists()).toBe(true)\n-  })\n-\n-  it('should not render a dangerAlert for null or positive search results', () => {\n-    const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n-    const dangerAlert = wrapper.find(Alert)\n-    expect(dangerAlert.exists()).toBe(false)\n-  })\n-\n-  it('should handle state changes for displayLoadIcon', () => {\n-    const wrapper = shallow(<Router><Search {...mockStateUser} /></Router>)\n-    wrapper.setState({ 'displayLoadIcon': true })\n-    expect(wrapper.state('displayLoadIcon')).toBe(true)\n-    wrapper.setState({ 'displayLoadIcon': false })\n-    expect(wrapper.state('displayLoadIcon')).toBe(false)\n-  })\n-\n-  it('should handle state changes for isSearchException', () => {\n-    const wrapper = shallow(<Router><Search {...mockStateUser} /></Router>)\n-    wrapper.setState({ 'isSearchException': false })\n-    expect(wrapper.state('isSearchException')).toBe(false)\n-    wrapper.setState({ 'isSearchException': true })\n-    expect(wrapper.state('isSearchException')).toBe(true)\n-  })\n-\n-  it('should handle state changes for empty results for search', () => {\n-    const wrapper = shallow(<Router><Search {...mockStateUser} /></Router>)\n-    wrapper.setState({ 'isEmptyResults': false })\n-    expect(wrapper.state('isEmptyResults')).toBe(false)\n-    wrapper.setState({ 'isEmptyResults': true })\n-    expect(wrapper.state('isEmptyResults')).toBe(true)\n-  })\n-\n-  it('should render a level component', () => {\n-    const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n-    const level = wrapper.find(Level)\n-    expect(level.exists()).toBe(true)\n-  })\n-\n-\n-  it('test getRows function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.getRows).toMatchSnapshot()\n-  })\n-\n-  it('test buildSearchUrl function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.buildSearchUrl).toMatchSnapshot()\n-  })\n-\n-  it('test hideAlertOne function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.hideAlertOne).toMatchSnapshot()\n-  })\n-\n-  it('test confirmDeleteOperation function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.confirmDeleteOperation).toMatchSnapshot()\n-  })\n-\n-  it('test cancelDeleteOperation function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.cancelDeleteOperation).toMatchSnapshot()\n-  })\n-\n-  it('test sortByUploadTime function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.sortByUploadTime).toMatchSnapshot()\n-  })\n-\n-  it('test sortByDescription function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.sortByDescription).toMatchSnapshot()\n-  })\n-\n-  it('test sortByName function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.sortByName).toMatchSnapshot()\n-  })\n-\n-  it('test dismissNotification function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.dismissNotification).toMatchSnapshot()\n-  })\n-\n-  it('test doSearch function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.doSearch).toMatchSnapshot()\n-  })\n-\n-  it('test newSearch function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.newSearch).toMatchSnapshot()\n-  })\n-\n-  it('test delete function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.delete).toMatchSnapshot()\n-  })\n-\n-  it('test handleDeleteCheckboxChange function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.handleDeleteCheckboxChange).toMatchSnapshot()\n-  })\n-\n-  it('test handleSelectAll function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.handleSelectAll).toMatchSnapshot()\n-  })\n-\n-  it('test setInput function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.setInput).toMatchSnapshot()\n-  })\n-\n-  it('test fetchTimeout function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.fetchTimeout).toMatchSnapshot()\n-  })\n-\n-  it('test changePerPageLimit function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.changePerPageLimit).toMatchSnapshot()\n-  })\n-\n-  it('test buildTransientPathArray function', () => {\n-    const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n-    const inst = wrapper.getInstance()\n-    expect(inst.buildTransientPathArray).toMatchSnapshot()\n-  })\n+  // it('should render a DataList', () => {\n+  //   const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n+  //   const dataList = wrapper.find(DataList)\n+  //   expect(dataList.exists()).toBe(true)\n+  // })\n+\n+  // it('should render a TextInput', () => {\n+  //   const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n+  //   const textInput = wrapper.find(TextInput)\n+  //   expect(textInput.exists()).toBe(true)\n+  // })\n+\n+  // it('should render a BuildInfo component', () => {\n+  //   const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n+  //   const buildInfo = wrapper.find(BuildInfo)\n+  //   expect(buildInfo.exists()).toBe(true)\n+  // })\n+\n+  // it('should render a level component', () => {\n+  //   const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n+  //   const level = wrapper.find(Level)\n+  //   expect(level.exists()).toBe(true)\n+  // })\n+\n+  // it('should render a Level component', () => {\n+  //   const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n+  //   const level = wrapper.find(Level)\n+  //   expect(level.exists()).toBe(true)\n+  // })\n+\n+  // it('should render a levelItem component', () => {\n+  //   const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n+  //   const levelItem = wrapper.find(LevelItem)\n+  //   expect(levelItem.exists()).toBe(true)\n+  // })\n+\n+  // it('should not render a dangerAlert for null or positive search results', () => {\n+  //   const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n+  //   const dangerAlert = wrapper.find(Alert)\n+  //   expect(dangerAlert.exists()).toBe(false)\n+  // })\n+\n+  // it('should handle state changes for displayLoadIcon', () => {\n+  //   const wrapper = shallow(<Router><Search {...mockStateUser} /></Router>)\n+  //   wrapper.setState({ 'displayLoadIcon': true })\n+  //   expect(wrapper.state('displayLoadIcon')).toBe(true)\n+  //   wrapper.setState({ 'displayLoadIcon': false })\n+  //   expect(wrapper.state('displayLoadIcon')).toBe(false)\n+  // })\n+\n+  // it('should handle state changes for isSearchException', () => {\n+  //   const wrapper = shallow(<Router><Search {...mockStateUser} /></Router>)\n+  //   wrapper.setState({ 'isSearchException': false })\n+  //   expect(wrapper.state('isSearchException')).toBe(false)\n+  //   wrapper.setState({ 'isSearchException': true })\n+  //   expect(wrapper.state('isSearchException')).toBe(true)\n+  // })\n+\n+  // it('should handle state changes for empty results for search', () => {\n+  //   const wrapper = shallow(<Router><Search {...mockStateUser} /></Router>)\n+  //   wrapper.setState({ 'isEmptyResults': false })\n+  //   expect(wrapper.state('isEmptyResults')).toBe(false)\n+  //   wrapper.setState({ 'isEmptyResults': true })\n+  //   expect(wrapper.state('isEmptyResults')).toBe(true)\n+  // })\n+\n+  // it('should render a level component', () => {\n+  //   const wrapper = mount(<Router><Search {...mockStateUser} /></Router>)\n+  //   const level = wrapper.find(Level)\n+  //   expect(level.exists()).toBe(true)\n+  // })\n+\n+\n+  // it('test getRows function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.getRows).toMatchSnapshot()\n+  // })\n+\n+  // it('test buildSearchUrl function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.buildSearchUrl).toMatchSnapshot()\n+  // })\n+\n+  // it('test hideAlertOne function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.hideAlertOne).toMatchSnapshot()\n+  // })\n+\n+  // it('test confirmDeleteOperation function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.confirmDeleteOperation).toMatchSnapshot()\n+  // })\n+\n+  // it('test cancelDeleteOperation function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.cancelDeleteOperation).toMatchSnapshot()\n+  // })\n+\n+  // it('test sortByUploadTime function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.sortByUploadTime).toMatchSnapshot()\n+  // })\n+\n+  // it('test sortByDescription function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.sortByDescription).toMatchSnapshot()\n+  // })\n+\n+  // it('test sortByName function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.sortByName).toMatchSnapshot()\n+  // })\n+\n+  // it('test dismissNotification function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.dismissNotification).toMatchSnapshot()\n+  // })\n+\n+  // it('test doSearch function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.doSearch).toMatchSnapshot()\n+  // })\n+\n+  // it('test newSearch function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.newSearch).toMatchSnapshot()\n+  // })\n+\n+  // it('test delete function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.delete).toMatchSnapshot()\n+  // })\n+\n+  // it('test handleDeleteCheckboxChange function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.handleDeleteCheckboxChange).toMatchSnapshot()\n+  // })\n+\n+  // it('test handleSelectAll function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.handleSelectAll).toMatchSnapshot()\n+  // })\n+\n+  // it('test setInput function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.setInput).toMatchSnapshot()\n+  // })\n+\n+  // it('test fetchTimeout function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.fetchTimeout).toMatchSnapshot()\n+  // })\n+\n+  // it('test changePerPageLimit function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.changePerPageLimit).toMatchSnapshot()\n+  // })\n+\n+  // it('test buildTransientPathArray function', () => {\n+  //   const wrapper = renderer.create(<Router><Search {...mockStateUser} /></Router>)\n+  //   const inst = wrapper.getInstance()\n+  //   expect(inst.buildTransientPathArray).toMatchSnapshot()\n+  // })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34241b8e49339f40752d9d9d7d0af554e70537a9"}, "originalPosition": 363}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMDQ5NA==", "bodyText": "Unless this is still necessary for some reason, can you delete this line?", "url": "https://github.com/redhataccess/pantheon/pull/209#discussion_r368010494", "createdAt": "2020-01-17T16:00:47Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/frontend/src/app/search.tsx", "diffHunk": "@@ -158,6 +156,9 @@ class Search extends Component<IAppState, ISearchState> {\n                   </Level>\n \n                 )}\n+                \n+                {console.log(\"res ui: \",this.state.results)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34241b8e49339f40752d9d9d7d0af554e70537a9"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMTc0Mw==", "bodyText": "This isn't a BIG deal, but since I asked for other changes anyway, can you make sure that the key property is not only uniquely named, but also has something to do with its purpose? So in this case, change it from \"transient-source_\" to \"published-date_\" or something like that. Same thing for the 'date uploaded' field below. Please update attributes, especially key and id when appropriate as a general rule.", "url": "https://github.com/redhataccess/pantheon/pull/209#discussion_r368011743", "createdAt": "2020-01-17T16:03:23Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/frontend/src/app/search.tsx", "diffHunk": "@@ -170,27 +171,23 @@ class Search extends Component<IAppState, ISearchState> {\n                         name={data[Search.KEY_TRANSIENTPATH]}\n                         onChange={this.handleDeleteCheckboxChange}\n                         key={'checked_' + key}\n-                      />}\n-\n+                      />}                                   \n                     <DataListItemCells key={\"cells_\" + key}\n                       dataListCells={[\n                         <DataListCell key={\"title_\" + key} width={2}>\n                           {this.props.userAuthenticated &&\n                             <Link to={data['pant:transientPath']} key={\"link_\" + key}>{data[\"jcr:title\"]}</Link>}\n                           {!this.props.userAuthenticated &&\n                             <a href={\"/\" + data['pant:transientPath'] + \".preview\"} target=\"_blank\">{data[\"jcr:title\"]}</a>}\n+                        </DataListCell>,      \n+                        <DataListCell key={\"transient-source_\" + key}>                          ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34241b8e49339f40752d9d9d7d0af554e70537a9"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMjQxOQ==", "bodyText": "Again not a big deal here, but can you just revert this file since there are no meaningful changes?", "url": "https://github.com/redhataccess/pantheon/pull/209#discussion_r368012419", "createdAt": "2020-01-17T16:04:46Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Metadata.java", "diffHunk": "@@ -8,6 +8,7 @@\n \n import javax.inject.Named;\n import java.util.Calendar;\n+import java.util.Date;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34241b8e49339f40752d9d9d7d0af554e70537a9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMzA1Nw==", "bodyText": "Ah, same thing here, if there are no meaningful changes in this file then please revert it.", "url": "https://github.com/redhataccess/pantheon/pull/209#discussion_r368013057", "createdAt": "2020-01-17T16:06:02Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java", "diffHunk": "@@ -91,7 +91,7 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             versionToRelease.get()\n                     .metadata().getOrCreate()\n                     .datePublished().set(Calendar.getInstance());\n-            changes.add(Modification.onModified(module.getPath()));\n+            changes.add(Modification.onModified(module.getPath())); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34241b8e49339f40752d9d9d7d0af554e70537a9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80665236cf021a6bc22b2b26ff41d2a77826b682", "author": {"user": null}, "url": "https://github.com/redhataccess/pantheon/commit/80665236cf021a6bc22b2b26ff41d2a77826b682", "committedDate": "2020-01-22T14:19:23Z", "message": "Update: review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTU5MDc4", "url": "https://github.com/redhataccess/pantheon/pull/209#pullrequestreview-347559078", "createdAt": "2020-01-23T19:41:23Z", "commit": {"oid": "80665236cf021a6bc22b2b26ff41d2a77826b682"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2167, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}