{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTY1Njg5", "number": 356, "title": "PnT JIRA (CCS-3683) unable to publish module when logged in as a demo\u2026", "bodyText": "Fix to provided access to users other than admin, to publish the modules.", "createdAt": "2020-07-29T17:00:54Z", "url": "https://github.com/redhataccess/pantheon/pull/356", "merged": true, "mergeCommit": {"oid": "9f1595b43b8a84f2b5572893d9e867bd0031a3f7"}, "closed": true, "closedAt": "2020-08-03T08:39:09Z", "author": {"login": "rednitish"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5uBRJgH2gAyNDU4NTY1Njg5OjY1ZDBiMWI1ZDI0MWI0YjU4NDZiODJkNTBjYzFhNzYxY2Y4YTY1M2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6YHZ9AFqTQ1OTM1OTk3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "65d0b1b5d241b4b5846b82d50cc1a761cf8a653e", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/65d0b1b5d241b4b5846b82d50cc1a761cf8a653e", "committedDate": "2020-07-29T16:56:47Z", "message": "PnT JIRA (CCS-3683) unable to publish module when logged in as a demo user"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0995302e7f46cbf30523ddc222649c38ba3d66f4", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/0995302e7f46cbf30523ddc222649c38ba3d66f4", "committedDate": "2020-07-30T10:38:10Z", "message": "Fix: resoure resolver closed with try with resource block"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Mjg2ODUy", "url": "https://github.com/redhataccess/pantheon/pull/356#pullrequestreview-458286852", "createdAt": "2020-07-30T10:42:44Z", "commit": {"oid": "65d0b1b5d241b4b5846b82d50cc1a761cf8a653e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0Mjo0NVrOG5dxWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0Mjo0NVrOG5dxWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwOTc4Ng==", "bodyText": "Do we need this as info rather than debug? Just curious.", "url": "https://github.com/redhataccess/pantheon/pull/356#discussion_r462909786", "createdAt": "2020-07-30T10:42:45Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java", "diffHunk": "@@ -75,64 +84,74 @@ public void run(SlingHttpServletRequest request, PostResponse response, SlingPos\n             asciidoctorService.getModuleHtml(module, locale, variant, false, new HashMap(), true);\n             events.fireEvent(new ModuleVersionPublishedEvent(moduleVersion), 15);\n         }\n+        log.debug(\"Operation Publishinging draft version,  completed\");\n+        long elapseTime = System.currentTimeMillis() - startTime;\n+        log.info(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d0b1b5d241b4b5846b82d50cc1a761cf8a653e"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Mjg5Nzgw", "url": "https://github.com/redhataccess/pantheon/pull/356#pullrequestreview-458289780", "createdAt": "2020-07-30T10:47:43Z", "commit": {"oid": "65d0b1b5d241b4b5846b82d50cc1a761cf8a653e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0Nzo0M1rOG5d6Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0Nzo0M1rOG5d6Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMjA3NA==", "bodyText": "Rather than if/else if,  if and return  would be better as you don't want the process to go further after setting response.", "url": "https://github.com/redhataccess/pantheon/pull/356#discussion_r462912074", "createdAt": "2020-07-30T10:47:43Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/PublishDraftVersion.java", "diffHunk": "@@ -75,64 +84,74 @@ public void run(SlingHttpServletRequest request, PostResponse response, SlingPos\n             asciidoctorService.getModuleHtml(module, locale, variant, false, new HashMap(), true);\n             events.fireEvent(new ModuleVersionPublishedEvent(moduleVersion), 15);\n         }\n+        log.debug(\"Operation Publishinging draft version,  completed\");\n+        long elapseTime = System.currentTimeMillis() - startTime;\n+        log.info(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);\n     }\n \n     @Override\n-    protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) {\n-        Locale locale = getLocale(request);\n-        Module module = getModule(request);\n-        String variant = getVariant(request);\n+    protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) throws  RepositoryException{\n+        try (ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver()) {\n+            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+            Locale locale = getLocale(request);\n+            String variant = getVariant(request);\n \n-        // Get the draft version, there should be one\n-        Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n-        if( !versionToRelease.isPresent() ) {\n-            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n-                    \"The module doesn't have a draft version to be released\");\n-        } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n-        \t\t||  versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n-        \t// Check if productVersion is set\n-        \tresponse.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n-                    \"The version to be released doesn't have productVersion metadata\");\n-        } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n-        \t\t||  versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n-        \t// Check if urlFragment is set\n-        \tresponse.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n-                    \"The version to be released doesn't have urlFragment metadata\");\n-        } else {\n-            // Draft becomes the new released version\n-            ModuleVariant moduleVariant = traverseFrom(module)\n-                    .toChild(m -> module.locale(locale))\n-                    .toChild(ModuleLocale::variants)\n-                    .toChild(variants -> variants.variant(variant))\n-                    .get();\n-            moduleVariant.releaseDraft();\n-            changes.add(Modification.onModified(module.getPath()));\n-            // source/draft becomes source/released\n-            FileResource draftSource = traverseFrom(module)\n-                    .toChild(m -> module.locale(locale))\n-                    .toChild(ModuleLocale::source)\n-                    .toChild(sourceContent -> sourceContent.draft())\n-                    .get();\n-            // Check for released version\n-            Optional<HashableFileResource> releasedSource = traverseFrom(module)\n-                    .toChild(m -> module.locale(locale))\n-                    .toChild(ModuleLocale::source)\n-                    .toChild(sourceContent -> sourceContent.released())\n-                    .getAsOptional();\n-            if (draftSource != null) {\n-                if (releasedSource.isPresent()) {\n+            // Get the draft version, there should be one\n+            Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+            if (!versionToRelease.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d0b1b5d241b4b5846b82d50cc1a761cf8a653e"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjkwOTU5", "url": "https://github.com/redhataccess/pantheon/pull/356#pullrequestreview-458290959", "createdAt": "2020-07-30T10:49:40Z", "commit": {"oid": "65d0b1b5d241b4b5846b82d50cc1a761cf8a653e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0OTo0MFrOG5d91w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDo0OTo0MFrOG5d91w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMjk4Mw==", "bodyText": "Return would be better as processing need not to run after setting the status.", "url": "https://github.com/redhataccess/pantheon/pull/356#discussion_r462912983", "createdAt": "2020-07-30T10:49:40Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/UnpublishVersion.java", "diffHunk": "@@ -81,52 +91,62 @@ public void run(SlingHttpServletRequest request, PostResponse response, SlingPos\n             // TODO We need to change the event so that the right variant is processed\n             events.fireEvent(new ModuleVersionUnpublishedEvent(moduleVersion), 15);\n         }\n+        log.debug(\"Operation UnPublishinging draft version,  completed\");\n+        long elapseTime = System.currentTimeMillis() - startTime;\n+        log.info(\"Total elapsed http request/response time in milliseconds: \" + elapseTime);\n     }\n \n     @Override\n-    protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) {\n-        Locale locale = getLocale(request);\n-        Module module = getModule(request);\n-        String variant = getVariant(request);\n-\n-        // Get the released version, there should be one\n-        Optional<? extends DocumentVersion> foundVariant = module.getReleasedVersion(locale, variant);\n-\n-        if(!foundVariant.isPresent()) {\n-            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n-                    \"The module is not released (published)\");\n-        } else {\n-            foundVariant.get()\n-                    .getParent()\n-                    .revertReleased();\n-\n-            changes.add(Modification.onModified(module.getPath()));\n-            // Change source/released to source/draft\n-            Optional<HashableFileResource> draftSource = traverseFrom(module)\n-                    .toChild(m -> module.locale(locale))\n-                    .toChild(ModuleLocale::source)\n-                    .toChild(sourceContent -> sourceContent.draft())\n-                    .getAsOptional();\n-            FileResource releasedSource = traverseFrom(module)\n-                    .toChild(m -> module.locale(locale))\n-                    .toChild(ModuleLocale::source)\n-                    .toChild(sourceContent -> sourceContent.released())\n-                    .get();\n-            if (draftSource.isPresent()) {\n-                // Delete released\n-                try {\n-                    releasedSource.delete();\n-                } catch (PersistenceException e) {\n-                    throw new RuntimeException(\"Failed to delete source/released: \" + releasedSource.getPath());\n-                }\n+    protected void doRun(SlingHttpServletRequest request, PostResponse response, List<Modification> changes) throws RepositoryException{\n+        try (ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver()) {\n+            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+            Locale locale = getLocale(request);\n+            String variant = getVariant(request);\n \n+            // Get the released version, there should be one\n+            Optional<? extends DocumentVersion> foundVariant = module.getReleasedVersion(locale, variant);\n+\n+            if(!foundVariant.isPresent()) {\n+                response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                        \"The module is not released (published)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d0b1b5d241b4b5846b82d50cc1a761cf8a653e"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a44de84898cf20f93ad8ad518cd5507b285893dc", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/a44de84898cf20f93ad8ad518cd5507b285893dc", "committedDate": "2020-07-30T10:55:45Z", "message": "Fix: resoure resolver closed with try with resource block : review comments from AP"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzU5OTc3", "url": "https://github.com/redhataccess/pantheon/pull/356#pullrequestreview-459359977", "createdAt": "2020-07-31T17:59:30Z", "commit": {"oid": "a44de84898cf20f93ad8ad518cd5507b285893dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1970, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}