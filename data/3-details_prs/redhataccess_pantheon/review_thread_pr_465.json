{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzM1MDEz", "number": 465, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDozMjoxN1rOFARbfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDozNDo0MFrOFARj3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODI5ODg0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/searchBeta.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDozMjoxN1rOH-en2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNTo1MjowMVrOH-jj-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI3NTQ4MQ==", "bodyText": "do you need the onDelete function here?", "url": "https://github.com/redhataccess/pantheon/pull/465#discussion_r535275481", "createdAt": "2020-12-03T14:32:17Z", "author": {"login": "grantsydney"}, "path": "pantheon-bundle/frontend/src/app/searchBeta.tsx", "diffHunk": "@@ -0,0 +1,570 @@\n+import React, { Component } from \"react\";\n+import {\n+  Drawer,\n+  DrawerPanelContent,\n+  DrawerContent,\n+  DrawerContentBody,\n+  DrawerPanelBody,\n+  DrawerHead,\n+  DrawerActions,\n+  DrawerCloseButton,\n+  Button, ButtonVariant,\n+  InputGroup,\n+  Select,\n+  SelectOption,\n+  Dropdown,\n+  DropdownItem,\n+  DropdownSeparator,\n+  KebabToggle,\n+  Toolbar, ToolbarItem, ToolbarContent, ToolbarFilter, ToolbarToggleGroup, ToolbarGroup,\n+  TextInput,\n+  SelectVariant,\n+  ExpandableSection,\n+  Checkbox,\n+  Divider,\n+  SimpleListItem,\n+  SimpleList,\n+  SearchInput,\n+  Alert,\n+\n+} from \"@patternfly/react-core\";\n+\n+import { SearchResults } from \"@app/searchResults\";\n+\n+import \"@app/app.css\";\n+import SearchIcon from \"@patternfly/react-icons/dist/js/icons/search-icon\";\n+import FilterIcon from \"@patternfly/react-icons/dist/js/icons/filter-icon\";\n+import { IAppState } from \"@app/app\"\n+\n+export interface ISearchState {\n+  filterLabel: string\n+  isExpanded: boolean\n+  assembliesIsExpanded: boolean\n+  expandableSectionIsExpanded: boolean\n+  modulesIsExpanded: boolean\n+  productFilterIsExpanded: boolean\n+  repoFilterIsExpanded: boolean\n+  products: Array<{ name: string, id: string }>\n+  repositories: Array<{ name: string, id: string, checked: boolean }>\n+\n+  inputValue: string,\n+  statusIsExpanded: boolean,\n+  ctypeIsExpanded: boolean,\n+  filters: {\n+    ctype: any,\n+    status: any\n+  },\n+\n+  productFilterValue: string\n+  repoFilterValue: string\n+\n+  productsSelected: string[]\n+  repositoriesSelected: string[]\n+}\n+class SearchBeta extends Component<IAppState, ISearchState> {\n+  private drawerRef: React.RefObject<HTMLInputElement>;\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      // states for drawer\n+      filterLabel: \"repo\",\n+      isExpanded: true,\n+      assembliesIsExpanded: true,\n+      expandableSectionIsExpanded: true,\n+      modulesIsExpanded: true,\n+      productFilterIsExpanded: true,\n+      repoFilterIsExpanded: true,\n+      products: [{ name: \"\", id: \"\" }],\n+      repositories: [{ name: \"\", id: \"\", checked: false }],\n+      // states for toolbar\n+      inputValue: \"\",\n+      statusIsExpanded: false,\n+      ctypeIsExpanded: false,\n+      filters: {\n+        ctype: [],\n+        status: []\n+      },\n+\n+      // filters\n+      productFilterValue: \"\",\n+      repoFilterValue: \"\",\n+\n+      // search\n+      productsSelected: [],\n+      repositoriesSelected: [],\n+    };\n+    this.drawerRef = React.createRef();\n+\n+  }\n+\n+  public componentDidMount() {\n+    // list repos inside the drawer\n+    this.getRepositories()\n+    // this.getProducts()\n+\n+    // TODO: enable resize\n+    // toolbar\n+    // window.addEventListener(\"resize\", this.closeExpandableContent);\n+  }\n+\n+  public componentWillMount() {\n+    // list repos inside the drawer\n+    this.getRepositories()\n+    // this.getProducts()\n+  }\n+\n+  public componentWillUnmount() {\n+    // TODO: enable resize\n+    // toolbar\n+    // window.removeEventListener(\"resize\", this.closeExpandableContent);\n+  }\n+  public render() {\n+    const { filterLabel, isExpanded, assembliesIsExpanded, modulesIsExpanded, productFilterIsExpanded, repoFilterIsExpanded, expandableSectionIsExpanded, repositories, inputValue, filters, statusIsExpanded, ctypeIsExpanded } = this.state;\n+\n+    const panelContent = (\n+      <DrawerPanelContent widths={{ lg: \"width_25\" }}>\n+        <DrawerHead>\n+          <span className=\"pf-c-title pf-m-2xl\" tabIndex={isExpanded ? 0 : -1} ref={this.drawerRef}>Filters</span>\n+          <DrawerActions>\n+            <DrawerCloseButton onClick={this.onCloseClick} />\n+          </DrawerActions>\n+          <ExpandableSection toggleText=\"By repo\" isActive={true} isExpanded={repoFilterIsExpanded} onToggle={this.onRepositoriesToggle}>\n+            <SearchInput\n+              placeholder=\"Filter\"\n+              value={this.state.repoFilterValue}\n+              onChange={this.onChangeRepoFilter}\n+              onClear={(evt) => this.onChangeRepoFilter(\"\", evt)}\n+            />\n+            <SimpleList aria-label=\"Repository List\">\n+              {this.state.repositories.map((data) => (\n+                <SimpleListItem key={data.id}>\n+                  <Checkbox label={data.name} aria-label=\"uncontrolled checkbox\" id={data.id} onClick={this.onSelectRepositories} />\n+                </SimpleListItem>\n+              ))}\n+            </SimpleList>\n+\n+          </ExpandableSection>\n+          <br />\n+          {/* <ExpandableSection toggleText=\"By product\">\n+            <SearchInput\n+              placeholder=\"Filter\"\n+              value={this.state.productFilterValue}\n+              onChange={this.onChangeProductFilter}\n+              onClear={(evt) => this.onChangeProductFilter(\"\", evt)}\n+            />\n+            <SimpleList aria-label=\"Product List\">\n+              {this.state.products.map((data) => (\n+                <SimpleListItem key={data.id}>\n+                  <Checkbox label={data.name} aria-label=\"uncontrolled checkbox\" id={data.id} />\n+                </SimpleListItem>\n+              ))}\n+            </SimpleList>\n+\n+          </ExpandableSection> */}\n+        </DrawerHead>\n+      </DrawerPanelContent>\n+    );\n+    const drawerContent = (\n+      <React.Fragment>\n+        <ExpandableSection toggleText=\"Modules\" className=\"pf-c-title\" isActive={true} isExpanded={modulesIsExpanded} onToggle={this.onModulesToggle}>\n+          <SearchResults\n+            contentType=\"module\"\n+            keyWord={this.state.inputValue}\n+            repositoriesSelected={this.state.repositoriesSelected}\n+            productsSelected={this.state.productsSelected}\n+            userAuthenticated={this.props.userAuthenticated}\n+            filters={this.state.filters}\n+          />\n+\n+        </ExpandableSection>\n+        <br />\n+        <ExpandableSection toggleText=\"Assemblies\" className=\"pf-c-title\" isActive={true} isExpanded={assembliesIsExpanded} onToggle={this.onAssembliesToggle}>\n+          <SearchResults\n+            contentType=\"assembly\"\n+            keyWord={this.state.inputValue}\n+            repositoriesSelected={this.state.repositoriesSelected}\n+            productsSelected={this.state.productsSelected}\n+            userAuthenticated={this.props.userAuthenticated}\n+            filters={this.state.filters}\n+          />\n+\n+        </ExpandableSection>\n+      </React.Fragment>\n+    );\n+\n+    const statusMenuItems = [\n+      <SelectOption key=\"statusDraft\" value=\"draft\" label= \"Draft\" />,\n+      <SelectOption key=\"statusPublished\" value=\"released\" label=\"Published\" />\n+    ];\n+\n+    const contentTypeMenuItems = [\n+      <SelectOption key=\"ctypeConcept\" value=\"CONCEPT\" label=\"Concept\" />,\n+      <SelectOption key=\"ctypeProcedure\" value=\"PROCEDURE\" label=\"Procedure\" />,\n+      <SelectOption key=\"ctypeReference\" value=\"REFERENCE\" label=\"Reference\" />\n+    ];\n+\n+    const toggleGroupItems = (\n+      <React.Fragment>\n+        <ToolbarItem>\n+          <Button variant=\"tertiary\" aria-expanded={isExpanded} onClick={this.onClick} icon={<FilterIcon />} />\n+        </ToolbarItem>\n+        <ToolbarItem>\n+          <InputGroup>\n+            <SearchInput\n+              name=\"textInput\"\n+              id=\"textInput\"\n+              placeholder=\"Find by name\"\n+              type=\"search\"\n+              aria-label=\"search input\"\n+              onChange={this.onInputChange}\n+              onClear={this.onInputClear}\n+              value={inputValue}\n+            />\n+            <Button variant={ButtonVariant.control} aria-label=\"search button for search input\">\n+              <SearchIcon />\n+            </Button>\n+          </InputGroup>\n+        </ToolbarItem>\n+        <ToolbarGroup variant=\"filter-group\">\n+          <ToolbarFilter\n+            chips={filters.status}\n+            // deleteChip={this.onDelete}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a6a96e3cb064ef7e2bfcc50fa51c0d0a931cf12"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1NjQwOQ==", "bodyText": "Currently, users have two options to remove filter chips\n\n\n\"clear all filters\"\n\n\nuncheck items from the dropdown\n\n\nideally, we enable deleteChip prop for ToobarFilter component. This gives user a third option to remove chip. I created a jira ticket to capture the effort: CCS-3975", "url": "https://github.com/redhataccess/pantheon/pull/465#discussion_r535356409", "createdAt": "2020-12-03T15:52:01Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/frontend/src/app/searchBeta.tsx", "diffHunk": "@@ -0,0 +1,570 @@\n+import React, { Component } from \"react\";\n+import {\n+  Drawer,\n+  DrawerPanelContent,\n+  DrawerContent,\n+  DrawerContentBody,\n+  DrawerPanelBody,\n+  DrawerHead,\n+  DrawerActions,\n+  DrawerCloseButton,\n+  Button, ButtonVariant,\n+  InputGroup,\n+  Select,\n+  SelectOption,\n+  Dropdown,\n+  DropdownItem,\n+  DropdownSeparator,\n+  KebabToggle,\n+  Toolbar, ToolbarItem, ToolbarContent, ToolbarFilter, ToolbarToggleGroup, ToolbarGroup,\n+  TextInput,\n+  SelectVariant,\n+  ExpandableSection,\n+  Checkbox,\n+  Divider,\n+  SimpleListItem,\n+  SimpleList,\n+  SearchInput,\n+  Alert,\n+\n+} from \"@patternfly/react-core\";\n+\n+import { SearchResults } from \"@app/searchResults\";\n+\n+import \"@app/app.css\";\n+import SearchIcon from \"@patternfly/react-icons/dist/js/icons/search-icon\";\n+import FilterIcon from \"@patternfly/react-icons/dist/js/icons/filter-icon\";\n+import { IAppState } from \"@app/app\"\n+\n+export interface ISearchState {\n+  filterLabel: string\n+  isExpanded: boolean\n+  assembliesIsExpanded: boolean\n+  expandableSectionIsExpanded: boolean\n+  modulesIsExpanded: boolean\n+  productFilterIsExpanded: boolean\n+  repoFilterIsExpanded: boolean\n+  products: Array<{ name: string, id: string }>\n+  repositories: Array<{ name: string, id: string, checked: boolean }>\n+\n+  inputValue: string,\n+  statusIsExpanded: boolean,\n+  ctypeIsExpanded: boolean,\n+  filters: {\n+    ctype: any,\n+    status: any\n+  },\n+\n+  productFilterValue: string\n+  repoFilterValue: string\n+\n+  productsSelected: string[]\n+  repositoriesSelected: string[]\n+}\n+class SearchBeta extends Component<IAppState, ISearchState> {\n+  private drawerRef: React.RefObject<HTMLInputElement>;\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      // states for drawer\n+      filterLabel: \"repo\",\n+      isExpanded: true,\n+      assembliesIsExpanded: true,\n+      expandableSectionIsExpanded: true,\n+      modulesIsExpanded: true,\n+      productFilterIsExpanded: true,\n+      repoFilterIsExpanded: true,\n+      products: [{ name: \"\", id: \"\" }],\n+      repositories: [{ name: \"\", id: \"\", checked: false }],\n+      // states for toolbar\n+      inputValue: \"\",\n+      statusIsExpanded: false,\n+      ctypeIsExpanded: false,\n+      filters: {\n+        ctype: [],\n+        status: []\n+      },\n+\n+      // filters\n+      productFilterValue: \"\",\n+      repoFilterValue: \"\",\n+\n+      // search\n+      productsSelected: [],\n+      repositoriesSelected: [],\n+    };\n+    this.drawerRef = React.createRef();\n+\n+  }\n+\n+  public componentDidMount() {\n+    // list repos inside the drawer\n+    this.getRepositories()\n+    // this.getProducts()\n+\n+    // TODO: enable resize\n+    // toolbar\n+    // window.addEventListener(\"resize\", this.closeExpandableContent);\n+  }\n+\n+  public componentWillMount() {\n+    // list repos inside the drawer\n+    this.getRepositories()\n+    // this.getProducts()\n+  }\n+\n+  public componentWillUnmount() {\n+    // TODO: enable resize\n+    // toolbar\n+    // window.removeEventListener(\"resize\", this.closeExpandableContent);\n+  }\n+  public render() {\n+    const { filterLabel, isExpanded, assembliesIsExpanded, modulesIsExpanded, productFilterIsExpanded, repoFilterIsExpanded, expandableSectionIsExpanded, repositories, inputValue, filters, statusIsExpanded, ctypeIsExpanded } = this.state;\n+\n+    const panelContent = (\n+      <DrawerPanelContent widths={{ lg: \"width_25\" }}>\n+        <DrawerHead>\n+          <span className=\"pf-c-title pf-m-2xl\" tabIndex={isExpanded ? 0 : -1} ref={this.drawerRef}>Filters</span>\n+          <DrawerActions>\n+            <DrawerCloseButton onClick={this.onCloseClick} />\n+          </DrawerActions>\n+          <ExpandableSection toggleText=\"By repo\" isActive={true} isExpanded={repoFilterIsExpanded} onToggle={this.onRepositoriesToggle}>\n+            <SearchInput\n+              placeholder=\"Filter\"\n+              value={this.state.repoFilterValue}\n+              onChange={this.onChangeRepoFilter}\n+              onClear={(evt) => this.onChangeRepoFilter(\"\", evt)}\n+            />\n+            <SimpleList aria-label=\"Repository List\">\n+              {this.state.repositories.map((data) => (\n+                <SimpleListItem key={data.id}>\n+                  <Checkbox label={data.name} aria-label=\"uncontrolled checkbox\" id={data.id} onClick={this.onSelectRepositories} />\n+                </SimpleListItem>\n+              ))}\n+            </SimpleList>\n+\n+          </ExpandableSection>\n+          <br />\n+          {/* <ExpandableSection toggleText=\"By product\">\n+            <SearchInput\n+              placeholder=\"Filter\"\n+              value={this.state.productFilterValue}\n+              onChange={this.onChangeProductFilter}\n+              onClear={(evt) => this.onChangeProductFilter(\"\", evt)}\n+            />\n+            <SimpleList aria-label=\"Product List\">\n+              {this.state.products.map((data) => (\n+                <SimpleListItem key={data.id}>\n+                  <Checkbox label={data.name} aria-label=\"uncontrolled checkbox\" id={data.id} />\n+                </SimpleListItem>\n+              ))}\n+            </SimpleList>\n+\n+          </ExpandableSection> */}\n+        </DrawerHead>\n+      </DrawerPanelContent>\n+    );\n+    const drawerContent = (\n+      <React.Fragment>\n+        <ExpandableSection toggleText=\"Modules\" className=\"pf-c-title\" isActive={true} isExpanded={modulesIsExpanded} onToggle={this.onModulesToggle}>\n+          <SearchResults\n+            contentType=\"module\"\n+            keyWord={this.state.inputValue}\n+            repositoriesSelected={this.state.repositoriesSelected}\n+            productsSelected={this.state.productsSelected}\n+            userAuthenticated={this.props.userAuthenticated}\n+            filters={this.state.filters}\n+          />\n+\n+        </ExpandableSection>\n+        <br />\n+        <ExpandableSection toggleText=\"Assemblies\" className=\"pf-c-title\" isActive={true} isExpanded={assembliesIsExpanded} onToggle={this.onAssembliesToggle}>\n+          <SearchResults\n+            contentType=\"assembly\"\n+            keyWord={this.state.inputValue}\n+            repositoriesSelected={this.state.repositoriesSelected}\n+            productsSelected={this.state.productsSelected}\n+            userAuthenticated={this.props.userAuthenticated}\n+            filters={this.state.filters}\n+          />\n+\n+        </ExpandableSection>\n+      </React.Fragment>\n+    );\n+\n+    const statusMenuItems = [\n+      <SelectOption key=\"statusDraft\" value=\"draft\" label= \"Draft\" />,\n+      <SelectOption key=\"statusPublished\" value=\"released\" label=\"Published\" />\n+    ];\n+\n+    const contentTypeMenuItems = [\n+      <SelectOption key=\"ctypeConcept\" value=\"CONCEPT\" label=\"Concept\" />,\n+      <SelectOption key=\"ctypeProcedure\" value=\"PROCEDURE\" label=\"Procedure\" />,\n+      <SelectOption key=\"ctypeReference\" value=\"REFERENCE\" label=\"Reference\" />\n+    ];\n+\n+    const toggleGroupItems = (\n+      <React.Fragment>\n+        <ToolbarItem>\n+          <Button variant=\"tertiary\" aria-expanded={isExpanded} onClick={this.onClick} icon={<FilterIcon />} />\n+        </ToolbarItem>\n+        <ToolbarItem>\n+          <InputGroup>\n+            <SearchInput\n+              name=\"textInput\"\n+              id=\"textInput\"\n+              placeholder=\"Find by name\"\n+              type=\"search\"\n+              aria-label=\"search input\"\n+              onChange={this.onInputChange}\n+              onClear={this.onInputClear}\n+              value={inputValue}\n+            />\n+            <Button variant={ButtonVariant.control} aria-label=\"search button for search input\">\n+              <SearchIcon />\n+            </Button>\n+          </InputGroup>\n+        </ToolbarItem>\n+        <ToolbarGroup variant=\"filter-group\">\n+          <ToolbarFilter\n+            chips={filters.status}\n+            // deleteChip={this.onDelete}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI3NTQ4MQ=="}, "originalCommit": {"oid": "3a6a96e3cb064ef7e2bfcc50fa51c0d0a931cf12"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODMyMDI4OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/searchBeta.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDozNDo0MVrOH-ezHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowMzoyN1rOH-kIlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI3ODM2Ng==", "bodyText": "Is this duplicate code? Looks the same starting on line 249", "url": "https://github.com/redhataccess/pantheon/pull/465#discussion_r535278366", "createdAt": "2020-12-03T14:34:41Z", "author": {"login": "grantsydney"}, "path": "pantheon-bundle/frontend/src/app/searchBeta.tsx", "diffHunk": "@@ -0,0 +1,570 @@\n+import React, { Component } from \"react\";\n+import {\n+  Drawer,\n+  DrawerPanelContent,\n+  DrawerContent,\n+  DrawerContentBody,\n+  DrawerPanelBody,\n+  DrawerHead,\n+  DrawerActions,\n+  DrawerCloseButton,\n+  Button, ButtonVariant,\n+  InputGroup,\n+  Select,\n+  SelectOption,\n+  Dropdown,\n+  DropdownItem,\n+  DropdownSeparator,\n+  KebabToggle,\n+  Toolbar, ToolbarItem, ToolbarContent, ToolbarFilter, ToolbarToggleGroup, ToolbarGroup,\n+  TextInput,\n+  SelectVariant,\n+  ExpandableSection,\n+  Checkbox,\n+  Divider,\n+  SimpleListItem,\n+  SimpleList,\n+  SearchInput,\n+  Alert,\n+\n+} from \"@patternfly/react-core\";\n+\n+import { SearchResults } from \"@app/searchResults\";\n+\n+import \"@app/app.css\";\n+import SearchIcon from \"@patternfly/react-icons/dist/js/icons/search-icon\";\n+import FilterIcon from \"@patternfly/react-icons/dist/js/icons/filter-icon\";\n+import { IAppState } from \"@app/app\"\n+\n+export interface ISearchState {\n+  filterLabel: string\n+  isExpanded: boolean\n+  assembliesIsExpanded: boolean\n+  expandableSectionIsExpanded: boolean\n+  modulesIsExpanded: boolean\n+  productFilterIsExpanded: boolean\n+  repoFilterIsExpanded: boolean\n+  products: Array<{ name: string, id: string }>\n+  repositories: Array<{ name: string, id: string, checked: boolean }>\n+\n+  inputValue: string,\n+  statusIsExpanded: boolean,\n+  ctypeIsExpanded: boolean,\n+  filters: {\n+    ctype: any,\n+    status: any\n+  },\n+\n+  productFilterValue: string\n+  repoFilterValue: string\n+\n+  productsSelected: string[]\n+  repositoriesSelected: string[]\n+}\n+class SearchBeta extends Component<IAppState, ISearchState> {\n+  private drawerRef: React.RefObject<HTMLInputElement>;\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      // states for drawer\n+      filterLabel: \"repo\",\n+      isExpanded: true,\n+      assembliesIsExpanded: true,\n+      expandableSectionIsExpanded: true,\n+      modulesIsExpanded: true,\n+      productFilterIsExpanded: true,\n+      repoFilterIsExpanded: true,\n+      products: [{ name: \"\", id: \"\" }],\n+      repositories: [{ name: \"\", id: \"\", checked: false }],\n+      // states for toolbar\n+      inputValue: \"\",\n+      statusIsExpanded: false,\n+      ctypeIsExpanded: false,\n+      filters: {\n+        ctype: [],\n+        status: []\n+      },\n+\n+      // filters\n+      productFilterValue: \"\",\n+      repoFilterValue: \"\",\n+\n+      // search\n+      productsSelected: [],\n+      repositoriesSelected: [],\n+    };\n+    this.drawerRef = React.createRef();\n+\n+  }\n+\n+  public componentDidMount() {\n+    // list repos inside the drawer\n+    this.getRepositories()\n+    // this.getProducts()\n+\n+    // TODO: enable resize\n+    // toolbar\n+    // window.addEventListener(\"resize\", this.closeExpandableContent);\n+  }\n+\n+  public componentWillMount() {\n+    // list repos inside the drawer\n+    this.getRepositories()\n+    // this.getProducts()\n+  }\n+\n+  public componentWillUnmount() {\n+    // TODO: enable resize\n+    // toolbar\n+    // window.removeEventListener(\"resize\", this.closeExpandableContent);\n+  }\n+  public render() {\n+    const { filterLabel, isExpanded, assembliesIsExpanded, modulesIsExpanded, productFilterIsExpanded, repoFilterIsExpanded, expandableSectionIsExpanded, repositories, inputValue, filters, statusIsExpanded, ctypeIsExpanded } = this.state;\n+\n+    const panelContent = (\n+      <DrawerPanelContent widths={{ lg: \"width_25\" }}>\n+        <DrawerHead>\n+          <span className=\"pf-c-title pf-m-2xl\" tabIndex={isExpanded ? 0 : -1} ref={this.drawerRef}>Filters</span>\n+          <DrawerActions>\n+            <DrawerCloseButton onClick={this.onCloseClick} />\n+          </DrawerActions>\n+          <ExpandableSection toggleText=\"By repo\" isActive={true} isExpanded={repoFilterIsExpanded} onToggle={this.onRepositoriesToggle}>\n+            <SearchInput\n+              placeholder=\"Filter\"\n+              value={this.state.repoFilterValue}\n+              onChange={this.onChangeRepoFilter}\n+              onClear={(evt) => this.onChangeRepoFilter(\"\", evt)}\n+            />\n+            <SimpleList aria-label=\"Repository List\">\n+              {this.state.repositories.map((data) => (\n+                <SimpleListItem key={data.id}>\n+                  <Checkbox label={data.name} aria-label=\"uncontrolled checkbox\" id={data.id} onClick={this.onSelectRepositories} />\n+                </SimpleListItem>\n+              ))}\n+            </SimpleList>\n+\n+          </ExpandableSection>\n+          <br />\n+          {/* <ExpandableSection toggleText=\"By product\">\n+            <SearchInput\n+              placeholder=\"Filter\"\n+              value={this.state.productFilterValue}\n+              onChange={this.onChangeProductFilter}\n+              onClear={(evt) => this.onChangeProductFilter(\"\", evt)}\n+            />\n+            <SimpleList aria-label=\"Product List\">\n+              {this.state.products.map((data) => (\n+                <SimpleListItem key={data.id}>\n+                  <Checkbox label={data.name} aria-label=\"uncontrolled checkbox\" id={data.id} />\n+                </SimpleListItem>\n+              ))}\n+            </SimpleList>\n+\n+          </ExpandableSection> */}\n+        </DrawerHead>\n+      </DrawerPanelContent>\n+    );\n+    const drawerContent = (\n+      <React.Fragment>\n+        <ExpandableSection toggleText=\"Modules\" className=\"pf-c-title\" isActive={true} isExpanded={modulesIsExpanded} onToggle={this.onModulesToggle}>\n+          <SearchResults\n+            contentType=\"module\"\n+            keyWord={this.state.inputValue}\n+            repositoriesSelected={this.state.repositoriesSelected}\n+            productsSelected={this.state.productsSelected}\n+            userAuthenticated={this.props.userAuthenticated}\n+            filters={this.state.filters}\n+          />\n+\n+        </ExpandableSection>\n+        <br />\n+        <ExpandableSection toggleText=\"Assemblies\" className=\"pf-c-title\" isActive={true} isExpanded={assembliesIsExpanded} onToggle={this.onAssembliesToggle}>\n+          <SearchResults\n+            contentType=\"assembly\"\n+            keyWord={this.state.inputValue}\n+            repositoriesSelected={this.state.repositoriesSelected}\n+            productsSelected={this.state.productsSelected}\n+            userAuthenticated={this.props.userAuthenticated}\n+            filters={this.state.filters}\n+          />\n+\n+        </ExpandableSection>\n+      </React.Fragment>\n+    );\n+\n+    const statusMenuItems = [\n+      <SelectOption key=\"statusDraft\" value=\"draft\" label= \"Draft\" />,\n+      <SelectOption key=\"statusPublished\" value=\"released\" label=\"Published\" />\n+    ];\n+\n+    const contentTypeMenuItems = [\n+      <SelectOption key=\"ctypeConcept\" value=\"CONCEPT\" label=\"Concept\" />,\n+      <SelectOption key=\"ctypeProcedure\" value=\"PROCEDURE\" label=\"Procedure\" />,\n+      <SelectOption key=\"ctypeReference\" value=\"REFERENCE\" label=\"Reference\" />\n+    ];\n+\n+    const toggleGroupItems = (\n+      <React.Fragment>\n+        <ToolbarItem>\n+          <Button variant=\"tertiary\" aria-expanded={isExpanded} onClick={this.onClick} icon={<FilterIcon />} />\n+        </ToolbarItem>\n+        <ToolbarItem>\n+          <InputGroup>\n+            <SearchInput\n+              name=\"textInput\"\n+              id=\"textInput\"\n+              placeholder=\"Find by name\"\n+              type=\"search\"\n+              aria-label=\"search input\"\n+              onChange={this.onInputChange}\n+              onClear={this.onInputClear}\n+              value={inputValue}\n+            />\n+            <Button variant={ButtonVariant.control} aria-label=\"search button for search input\">\n+              <SearchIcon />\n+            </Button>\n+          </InputGroup>\n+        </ToolbarItem>\n+        <ToolbarGroup variant=\"filter-group\">\n+          <ToolbarFilter\n+            chips={filters.status}\n+            // deleteChip={this.onDelete}\n+            deleteChipGroup={this.onDeleteGroup}\n+            categoryName=\"Status\"\n+          >\n+            <Select\n+              variant={SelectVariant.checkbox}\n+              aria-label=\"Status\"\n+              onToggle={this.onStatusToggle}\n+              onSelect={this.onStatusSelect}\n+              selections={filters.status}\n+              isOpen={statusIsExpanded}\n+              placeholderText=\"Status\"\n+            >\n+              {statusMenuItems}\n+            </Select>\n+          </ToolbarFilter>\n+          {/* <ToolbarFilter chips={filters.ctype} deleteChip={this.onDelete} categoryName=\"Content Type\"> */}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a6a96e3cb064ef7e2bfcc50fa51c0d0a931cf12"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1Nzc1OQ==", "bodyText": "This is not duplicated code, line 248 enables \"deleteChip\" function while line 249 doesn't. Ideally, we want to have \"deleteChip\" enabled. this work effort is captured in CCS-3975", "url": "https://github.com/redhataccess/pantheon/pull/465#discussion_r535357759", "createdAt": "2020-12-03T15:53:39Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/frontend/src/app/searchBeta.tsx", "diffHunk": "@@ -0,0 +1,570 @@\n+import React, { Component } from \"react\";\n+import {\n+  Drawer,\n+  DrawerPanelContent,\n+  DrawerContent,\n+  DrawerContentBody,\n+  DrawerPanelBody,\n+  DrawerHead,\n+  DrawerActions,\n+  DrawerCloseButton,\n+  Button, ButtonVariant,\n+  InputGroup,\n+  Select,\n+  SelectOption,\n+  Dropdown,\n+  DropdownItem,\n+  DropdownSeparator,\n+  KebabToggle,\n+  Toolbar, ToolbarItem, ToolbarContent, ToolbarFilter, ToolbarToggleGroup, ToolbarGroup,\n+  TextInput,\n+  SelectVariant,\n+  ExpandableSection,\n+  Checkbox,\n+  Divider,\n+  SimpleListItem,\n+  SimpleList,\n+  SearchInput,\n+  Alert,\n+\n+} from \"@patternfly/react-core\";\n+\n+import { SearchResults } from \"@app/searchResults\";\n+\n+import \"@app/app.css\";\n+import SearchIcon from \"@patternfly/react-icons/dist/js/icons/search-icon\";\n+import FilterIcon from \"@patternfly/react-icons/dist/js/icons/filter-icon\";\n+import { IAppState } from \"@app/app\"\n+\n+export interface ISearchState {\n+  filterLabel: string\n+  isExpanded: boolean\n+  assembliesIsExpanded: boolean\n+  expandableSectionIsExpanded: boolean\n+  modulesIsExpanded: boolean\n+  productFilterIsExpanded: boolean\n+  repoFilterIsExpanded: boolean\n+  products: Array<{ name: string, id: string }>\n+  repositories: Array<{ name: string, id: string, checked: boolean }>\n+\n+  inputValue: string,\n+  statusIsExpanded: boolean,\n+  ctypeIsExpanded: boolean,\n+  filters: {\n+    ctype: any,\n+    status: any\n+  },\n+\n+  productFilterValue: string\n+  repoFilterValue: string\n+\n+  productsSelected: string[]\n+  repositoriesSelected: string[]\n+}\n+class SearchBeta extends Component<IAppState, ISearchState> {\n+  private drawerRef: React.RefObject<HTMLInputElement>;\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      // states for drawer\n+      filterLabel: \"repo\",\n+      isExpanded: true,\n+      assembliesIsExpanded: true,\n+      expandableSectionIsExpanded: true,\n+      modulesIsExpanded: true,\n+      productFilterIsExpanded: true,\n+      repoFilterIsExpanded: true,\n+      products: [{ name: \"\", id: \"\" }],\n+      repositories: [{ name: \"\", id: \"\", checked: false }],\n+      // states for toolbar\n+      inputValue: \"\",\n+      statusIsExpanded: false,\n+      ctypeIsExpanded: false,\n+      filters: {\n+        ctype: [],\n+        status: []\n+      },\n+\n+      // filters\n+      productFilterValue: \"\",\n+      repoFilterValue: \"\",\n+\n+      // search\n+      productsSelected: [],\n+      repositoriesSelected: [],\n+    };\n+    this.drawerRef = React.createRef();\n+\n+  }\n+\n+  public componentDidMount() {\n+    // list repos inside the drawer\n+    this.getRepositories()\n+    // this.getProducts()\n+\n+    // TODO: enable resize\n+    // toolbar\n+    // window.addEventListener(\"resize\", this.closeExpandableContent);\n+  }\n+\n+  public componentWillMount() {\n+    // list repos inside the drawer\n+    this.getRepositories()\n+    // this.getProducts()\n+  }\n+\n+  public componentWillUnmount() {\n+    // TODO: enable resize\n+    // toolbar\n+    // window.removeEventListener(\"resize\", this.closeExpandableContent);\n+  }\n+  public render() {\n+    const { filterLabel, isExpanded, assembliesIsExpanded, modulesIsExpanded, productFilterIsExpanded, repoFilterIsExpanded, expandableSectionIsExpanded, repositories, inputValue, filters, statusIsExpanded, ctypeIsExpanded } = this.state;\n+\n+    const panelContent = (\n+      <DrawerPanelContent widths={{ lg: \"width_25\" }}>\n+        <DrawerHead>\n+          <span className=\"pf-c-title pf-m-2xl\" tabIndex={isExpanded ? 0 : -1} ref={this.drawerRef}>Filters</span>\n+          <DrawerActions>\n+            <DrawerCloseButton onClick={this.onCloseClick} />\n+          </DrawerActions>\n+          <ExpandableSection toggleText=\"By repo\" isActive={true} isExpanded={repoFilterIsExpanded} onToggle={this.onRepositoriesToggle}>\n+            <SearchInput\n+              placeholder=\"Filter\"\n+              value={this.state.repoFilterValue}\n+              onChange={this.onChangeRepoFilter}\n+              onClear={(evt) => this.onChangeRepoFilter(\"\", evt)}\n+            />\n+            <SimpleList aria-label=\"Repository List\">\n+              {this.state.repositories.map((data) => (\n+                <SimpleListItem key={data.id}>\n+                  <Checkbox label={data.name} aria-label=\"uncontrolled checkbox\" id={data.id} onClick={this.onSelectRepositories} />\n+                </SimpleListItem>\n+              ))}\n+            </SimpleList>\n+\n+          </ExpandableSection>\n+          <br />\n+          {/* <ExpandableSection toggleText=\"By product\">\n+            <SearchInput\n+              placeholder=\"Filter\"\n+              value={this.state.productFilterValue}\n+              onChange={this.onChangeProductFilter}\n+              onClear={(evt) => this.onChangeProductFilter(\"\", evt)}\n+            />\n+            <SimpleList aria-label=\"Product List\">\n+              {this.state.products.map((data) => (\n+                <SimpleListItem key={data.id}>\n+                  <Checkbox label={data.name} aria-label=\"uncontrolled checkbox\" id={data.id} />\n+                </SimpleListItem>\n+              ))}\n+            </SimpleList>\n+\n+          </ExpandableSection> */}\n+        </DrawerHead>\n+      </DrawerPanelContent>\n+    );\n+    const drawerContent = (\n+      <React.Fragment>\n+        <ExpandableSection toggleText=\"Modules\" className=\"pf-c-title\" isActive={true} isExpanded={modulesIsExpanded} onToggle={this.onModulesToggle}>\n+          <SearchResults\n+            contentType=\"module\"\n+            keyWord={this.state.inputValue}\n+            repositoriesSelected={this.state.repositoriesSelected}\n+            productsSelected={this.state.productsSelected}\n+            userAuthenticated={this.props.userAuthenticated}\n+            filters={this.state.filters}\n+          />\n+\n+        </ExpandableSection>\n+        <br />\n+        <ExpandableSection toggleText=\"Assemblies\" className=\"pf-c-title\" isActive={true} isExpanded={assembliesIsExpanded} onToggle={this.onAssembliesToggle}>\n+          <SearchResults\n+            contentType=\"assembly\"\n+            keyWord={this.state.inputValue}\n+            repositoriesSelected={this.state.repositoriesSelected}\n+            productsSelected={this.state.productsSelected}\n+            userAuthenticated={this.props.userAuthenticated}\n+            filters={this.state.filters}\n+          />\n+\n+        </ExpandableSection>\n+      </React.Fragment>\n+    );\n+\n+    const statusMenuItems = [\n+      <SelectOption key=\"statusDraft\" value=\"draft\" label= \"Draft\" />,\n+      <SelectOption key=\"statusPublished\" value=\"released\" label=\"Published\" />\n+    ];\n+\n+    const contentTypeMenuItems = [\n+      <SelectOption key=\"ctypeConcept\" value=\"CONCEPT\" label=\"Concept\" />,\n+      <SelectOption key=\"ctypeProcedure\" value=\"PROCEDURE\" label=\"Procedure\" />,\n+      <SelectOption key=\"ctypeReference\" value=\"REFERENCE\" label=\"Reference\" />\n+    ];\n+\n+    const toggleGroupItems = (\n+      <React.Fragment>\n+        <ToolbarItem>\n+          <Button variant=\"tertiary\" aria-expanded={isExpanded} onClick={this.onClick} icon={<FilterIcon />} />\n+        </ToolbarItem>\n+        <ToolbarItem>\n+          <InputGroup>\n+            <SearchInput\n+              name=\"textInput\"\n+              id=\"textInput\"\n+              placeholder=\"Find by name\"\n+              type=\"search\"\n+              aria-label=\"search input\"\n+              onChange={this.onInputChange}\n+              onClear={this.onInputClear}\n+              value={inputValue}\n+            />\n+            <Button variant={ButtonVariant.control} aria-label=\"search button for search input\">\n+              <SearchIcon />\n+            </Button>\n+          </InputGroup>\n+        </ToolbarItem>\n+        <ToolbarGroup variant=\"filter-group\">\n+          <ToolbarFilter\n+            chips={filters.status}\n+            // deleteChip={this.onDelete}\n+            deleteChipGroup={this.onDeleteGroup}\n+            categoryName=\"Status\"\n+          >\n+            <Select\n+              variant={SelectVariant.checkbox}\n+              aria-label=\"Status\"\n+              onToggle={this.onStatusToggle}\n+              onSelect={this.onStatusSelect}\n+              selections={filters.status}\n+              isOpen={statusIsExpanded}\n+              placeholderText=\"Status\"\n+            >\n+              {statusMenuItems}\n+            </Select>\n+          </ToolbarFilter>\n+          {/* <ToolbarFilter chips={filters.ctype} deleteChip={this.onDelete} categoryName=\"Content Type\"> */}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI3ODM2Ng=="}, "originalCommit": {"oid": "3a6a96e3cb064ef7e2bfcc50fa51c0d0a931cf12"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2NTc4Mw==", "bodyText": "Ah got it, thanks for clarifying", "url": "https://github.com/redhataccess/pantheon/pull/465#discussion_r535365783", "createdAt": "2020-12-03T16:03:27Z", "author": {"login": "grantsydney"}, "path": "pantheon-bundle/frontend/src/app/searchBeta.tsx", "diffHunk": "@@ -0,0 +1,570 @@\n+import React, { Component } from \"react\";\n+import {\n+  Drawer,\n+  DrawerPanelContent,\n+  DrawerContent,\n+  DrawerContentBody,\n+  DrawerPanelBody,\n+  DrawerHead,\n+  DrawerActions,\n+  DrawerCloseButton,\n+  Button, ButtonVariant,\n+  InputGroup,\n+  Select,\n+  SelectOption,\n+  Dropdown,\n+  DropdownItem,\n+  DropdownSeparator,\n+  KebabToggle,\n+  Toolbar, ToolbarItem, ToolbarContent, ToolbarFilter, ToolbarToggleGroup, ToolbarGroup,\n+  TextInput,\n+  SelectVariant,\n+  ExpandableSection,\n+  Checkbox,\n+  Divider,\n+  SimpleListItem,\n+  SimpleList,\n+  SearchInput,\n+  Alert,\n+\n+} from \"@patternfly/react-core\";\n+\n+import { SearchResults } from \"@app/searchResults\";\n+\n+import \"@app/app.css\";\n+import SearchIcon from \"@patternfly/react-icons/dist/js/icons/search-icon\";\n+import FilterIcon from \"@patternfly/react-icons/dist/js/icons/filter-icon\";\n+import { IAppState } from \"@app/app\"\n+\n+export interface ISearchState {\n+  filterLabel: string\n+  isExpanded: boolean\n+  assembliesIsExpanded: boolean\n+  expandableSectionIsExpanded: boolean\n+  modulesIsExpanded: boolean\n+  productFilterIsExpanded: boolean\n+  repoFilterIsExpanded: boolean\n+  products: Array<{ name: string, id: string }>\n+  repositories: Array<{ name: string, id: string, checked: boolean }>\n+\n+  inputValue: string,\n+  statusIsExpanded: boolean,\n+  ctypeIsExpanded: boolean,\n+  filters: {\n+    ctype: any,\n+    status: any\n+  },\n+\n+  productFilterValue: string\n+  repoFilterValue: string\n+\n+  productsSelected: string[]\n+  repositoriesSelected: string[]\n+}\n+class SearchBeta extends Component<IAppState, ISearchState> {\n+  private drawerRef: React.RefObject<HTMLInputElement>;\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      // states for drawer\n+      filterLabel: \"repo\",\n+      isExpanded: true,\n+      assembliesIsExpanded: true,\n+      expandableSectionIsExpanded: true,\n+      modulesIsExpanded: true,\n+      productFilterIsExpanded: true,\n+      repoFilterIsExpanded: true,\n+      products: [{ name: \"\", id: \"\" }],\n+      repositories: [{ name: \"\", id: \"\", checked: false }],\n+      // states for toolbar\n+      inputValue: \"\",\n+      statusIsExpanded: false,\n+      ctypeIsExpanded: false,\n+      filters: {\n+        ctype: [],\n+        status: []\n+      },\n+\n+      // filters\n+      productFilterValue: \"\",\n+      repoFilterValue: \"\",\n+\n+      // search\n+      productsSelected: [],\n+      repositoriesSelected: [],\n+    };\n+    this.drawerRef = React.createRef();\n+\n+  }\n+\n+  public componentDidMount() {\n+    // list repos inside the drawer\n+    this.getRepositories()\n+    // this.getProducts()\n+\n+    // TODO: enable resize\n+    // toolbar\n+    // window.addEventListener(\"resize\", this.closeExpandableContent);\n+  }\n+\n+  public componentWillMount() {\n+    // list repos inside the drawer\n+    this.getRepositories()\n+    // this.getProducts()\n+  }\n+\n+  public componentWillUnmount() {\n+    // TODO: enable resize\n+    // toolbar\n+    // window.removeEventListener(\"resize\", this.closeExpandableContent);\n+  }\n+  public render() {\n+    const { filterLabel, isExpanded, assembliesIsExpanded, modulesIsExpanded, productFilterIsExpanded, repoFilterIsExpanded, expandableSectionIsExpanded, repositories, inputValue, filters, statusIsExpanded, ctypeIsExpanded } = this.state;\n+\n+    const panelContent = (\n+      <DrawerPanelContent widths={{ lg: \"width_25\" }}>\n+        <DrawerHead>\n+          <span className=\"pf-c-title pf-m-2xl\" tabIndex={isExpanded ? 0 : -1} ref={this.drawerRef}>Filters</span>\n+          <DrawerActions>\n+            <DrawerCloseButton onClick={this.onCloseClick} />\n+          </DrawerActions>\n+          <ExpandableSection toggleText=\"By repo\" isActive={true} isExpanded={repoFilterIsExpanded} onToggle={this.onRepositoriesToggle}>\n+            <SearchInput\n+              placeholder=\"Filter\"\n+              value={this.state.repoFilterValue}\n+              onChange={this.onChangeRepoFilter}\n+              onClear={(evt) => this.onChangeRepoFilter(\"\", evt)}\n+            />\n+            <SimpleList aria-label=\"Repository List\">\n+              {this.state.repositories.map((data) => (\n+                <SimpleListItem key={data.id}>\n+                  <Checkbox label={data.name} aria-label=\"uncontrolled checkbox\" id={data.id} onClick={this.onSelectRepositories} />\n+                </SimpleListItem>\n+              ))}\n+            </SimpleList>\n+\n+          </ExpandableSection>\n+          <br />\n+          {/* <ExpandableSection toggleText=\"By product\">\n+            <SearchInput\n+              placeholder=\"Filter\"\n+              value={this.state.productFilterValue}\n+              onChange={this.onChangeProductFilter}\n+              onClear={(evt) => this.onChangeProductFilter(\"\", evt)}\n+            />\n+            <SimpleList aria-label=\"Product List\">\n+              {this.state.products.map((data) => (\n+                <SimpleListItem key={data.id}>\n+                  <Checkbox label={data.name} aria-label=\"uncontrolled checkbox\" id={data.id} />\n+                </SimpleListItem>\n+              ))}\n+            </SimpleList>\n+\n+          </ExpandableSection> */}\n+        </DrawerHead>\n+      </DrawerPanelContent>\n+    );\n+    const drawerContent = (\n+      <React.Fragment>\n+        <ExpandableSection toggleText=\"Modules\" className=\"pf-c-title\" isActive={true} isExpanded={modulesIsExpanded} onToggle={this.onModulesToggle}>\n+          <SearchResults\n+            contentType=\"module\"\n+            keyWord={this.state.inputValue}\n+            repositoriesSelected={this.state.repositoriesSelected}\n+            productsSelected={this.state.productsSelected}\n+            userAuthenticated={this.props.userAuthenticated}\n+            filters={this.state.filters}\n+          />\n+\n+        </ExpandableSection>\n+        <br />\n+        <ExpandableSection toggleText=\"Assemblies\" className=\"pf-c-title\" isActive={true} isExpanded={assembliesIsExpanded} onToggle={this.onAssembliesToggle}>\n+          <SearchResults\n+            contentType=\"assembly\"\n+            keyWord={this.state.inputValue}\n+            repositoriesSelected={this.state.repositoriesSelected}\n+            productsSelected={this.state.productsSelected}\n+            userAuthenticated={this.props.userAuthenticated}\n+            filters={this.state.filters}\n+          />\n+\n+        </ExpandableSection>\n+      </React.Fragment>\n+    );\n+\n+    const statusMenuItems = [\n+      <SelectOption key=\"statusDraft\" value=\"draft\" label= \"Draft\" />,\n+      <SelectOption key=\"statusPublished\" value=\"released\" label=\"Published\" />\n+    ];\n+\n+    const contentTypeMenuItems = [\n+      <SelectOption key=\"ctypeConcept\" value=\"CONCEPT\" label=\"Concept\" />,\n+      <SelectOption key=\"ctypeProcedure\" value=\"PROCEDURE\" label=\"Procedure\" />,\n+      <SelectOption key=\"ctypeReference\" value=\"REFERENCE\" label=\"Reference\" />\n+    ];\n+\n+    const toggleGroupItems = (\n+      <React.Fragment>\n+        <ToolbarItem>\n+          <Button variant=\"tertiary\" aria-expanded={isExpanded} onClick={this.onClick} icon={<FilterIcon />} />\n+        </ToolbarItem>\n+        <ToolbarItem>\n+          <InputGroup>\n+            <SearchInput\n+              name=\"textInput\"\n+              id=\"textInput\"\n+              placeholder=\"Find by name\"\n+              type=\"search\"\n+              aria-label=\"search input\"\n+              onChange={this.onInputChange}\n+              onClear={this.onInputClear}\n+              value={inputValue}\n+            />\n+            <Button variant={ButtonVariant.control} aria-label=\"search button for search input\">\n+              <SearchIcon />\n+            </Button>\n+          </InputGroup>\n+        </ToolbarItem>\n+        <ToolbarGroup variant=\"filter-group\">\n+          <ToolbarFilter\n+            chips={filters.status}\n+            // deleteChip={this.onDelete}\n+            deleteChipGroup={this.onDeleteGroup}\n+            categoryName=\"Status\"\n+          >\n+            <Select\n+              variant={SelectVariant.checkbox}\n+              aria-label=\"Status\"\n+              onToggle={this.onStatusToggle}\n+              onSelect={this.onStatusSelect}\n+              selections={filters.status}\n+              isOpen={statusIsExpanded}\n+              placeholderText=\"Status\"\n+            >\n+              {statusMenuItems}\n+            </Select>\n+          </ToolbarFilter>\n+          {/* <ToolbarFilter chips={filters.ctype} deleteChip={this.onDelete} categoryName=\"Content Type\"> */}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI3ODM2Ng=="}, "originalCommit": {"oid": "3a6a96e3cb064ef7e2bfcc50fa51c0d0a931cf12"}, "originalPosition": 248}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 109, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}