{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1OTIzMjc1", "number": 351, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxMjo0MFrOERmXTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNToxN1rOERmaYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODg5ODA2OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/MetadataExtractorTreeProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxMjo0MFrOG2Z6yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxNzo0MVrOG2xIEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMDkzNg==", "bodyText": "I dislike instanceof \ud83d\ude22\nI wonder if extracting the module type is something we should externalize to a different asciidoctor extension. One that specializes in Modules. That way we build the extension set based on the type of document that we need to generate.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459700936", "createdAt": "2020-07-23T20:12:40Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/MetadataExtractorTreeProcessor.java", "diffHunk": "@@ -136,18 +137,24 @@ private void extractAbstract(List<StructuralNode> allNodes) {\n      */\n     private void extractModuleType(Document document) {\n         Object attValue = document.getAttribute(MODULE_TYPE_ATT_NAME);\n+        ModuleMetadata mm = null;\n+        if (documentMetadata instanceof ModuleMetadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MTE3MA==", "bodyText": "Per our gchat conversation, I feel that this is a strength of the code, not a weakness. I would like to leave it as-is for now. We could revisit the decision later if things get more complicated.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r460081170", "createdAt": "2020-07-24T14:17:41Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/MetadataExtractorTreeProcessor.java", "diffHunk": "@@ -136,18 +137,24 @@ private void extractAbstract(List<StructuralNode> allNodes) {\n      */\n     private void extractModuleType(Document document) {\n         Object attValue = document.getAttribute(MODULE_TYPE_ATT_NAME);\n+        ModuleMetadata mm = null;\n+        if (documentMetadata instanceof ModuleMetadata) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMDkzNg=="}, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODkwMzIwOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariant.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNDozMVrOG2Z-GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxOToxN1rOG2xMJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTc4NA==", "bodyText": "I don't think we need this.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459701784", "createdAt": "2020-07-23T20:14:31Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariant.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+\n+/**\n+ * A specific assembly variant node which houses all the versions for a specific language in the assembly.\n+ */\n+@JcrPrimaryType(\"pant:assemblyVariant\")\n+public interface AssemblyVariant extends DocumentVariant {\n+\n+    Child<AssemblyVersion> draft();\n+\n+    Child<AssemblyVersion> released();\n+\n+    @Override\n+    AssemblyVariants getParent();\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion getOrCreateVersion(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MjIxMw==", "bodyText": "Removed.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r460082213", "createdAt": "2020-07-24T14:19:17Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariant.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+\n+/**\n+ * A specific assembly variant node which houses all the versions for a specific language in the assembly.\n+ */\n+@JcrPrimaryType(\"pant:assemblyVariant\")\n+public interface AssemblyVariant extends DocumentVariant {\n+\n+    Child<AssemblyVersion> draft();\n+\n+    Child<AssemblyVersion> released();\n+\n+    @Override\n+    AssemblyVariants getParent();\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion getOrCreateVersion(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTc4NA=="}, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODkwMzgzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariant.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNDo0NVrOG2Z-gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxOToyMFrOG2xMPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTg5MA==", "bodyText": "I don't think we need this.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459701890", "createdAt": "2020-07-23T20:14:45Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariant.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+\n+/**\n+ * A specific assembly variant node which houses all the versions for a specific language in the assembly.\n+ */\n+@JcrPrimaryType(\"pant:assemblyVariant\")\n+public interface AssemblyVariant extends DocumentVariant {\n+\n+    Child<AssemblyVersion> draft();\n+\n+    Child<AssemblyVersion> released();\n+\n+    @Override\n+    AssemblyVariants getParent();\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion getOrCreateVersion(String name) {\n+        return child(name, AssemblyVersion.class).get();\n+    }\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion createNextVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MjIzOA==", "bodyText": "Removed.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r460082238", "createdAt": "2020-07-24T14:19:20Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariant.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+\n+/**\n+ * A specific assembly variant node which houses all the versions for a specific language in the assembly.\n+ */\n+@JcrPrimaryType(\"pant:assemblyVariant\")\n+public interface AssemblyVariant extends DocumentVariant {\n+\n+    Child<AssemblyVersion> draft();\n+\n+    Child<AssemblyVersion> released();\n+\n+    @Override\n+    AssemblyVariants getParent();\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion getOrCreateVersion(String name) {\n+        return child(name, AssemblyVersion.class).get();\n+    }\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion createNextVersion() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTg5MA=="}, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODkwNTk0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNToxN1rOG2Z_vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxOToyM1rOG2xMXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMjIwNA==", "bodyText": "this method is not needed either.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459702204", "createdAt": "2020-07-23T20:15:17Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariants.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariants;\n+\n+import javax.inject.Named;\n+import java.util.stream.Stream;\n+\n+import static com.redhat.pantheon.model.document.DocumentVariant.DEFAULT_VARIANT_NAME;\n+\n+/**\n+ * @author Carlos Munoz\n+ */\n+@JcrPrimaryType(\"sling:OrderedFolder\")\n+public interface AssemblyVariants extends DocumentVariants {\n+\n+    // The default variant\n+    @Named(DEFAULT_VARIANT_NAME)\n+    Child<AssemblyVariant> defaultVariant();\n+\n+    default Stream<AssemblyVariant> getVariants() {\n+        return this.as(AssemblyVariant.class);\n+    }\n+\n+    default AssemblyVariant getOrCreateVariant(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MjI2OQ==", "bodyText": "Removed.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r460082269", "createdAt": "2020-07-24T14:19:23Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariants.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariants;\n+\n+import javax.inject.Named;\n+import java.util.stream.Stream;\n+\n+import static com.redhat.pantheon.model.document.DocumentVariant.DEFAULT_VARIANT_NAME;\n+\n+/**\n+ * @author Carlos Munoz\n+ */\n+@JcrPrimaryType(\"sling:OrderedFolder\")\n+public interface AssemblyVariants extends DocumentVariants {\n+\n+    // The default variant\n+    @Named(DEFAULT_VARIANT_NAME)\n+    Child<AssemblyVariant> defaultVariant();\n+\n+    default Stream<AssemblyVariant> getVariants() {\n+        return this.as(AssemblyVariant.class);\n+    }\n+\n+    default AssemblyVariant getOrCreateVariant(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMjIwNA=="}, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 142, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}