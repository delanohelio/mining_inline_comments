{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2ODI0Mzkz", "number": 369, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNjoxM1rOEXv7Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTozMDozNFrOEaHsAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM3ODc0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNjoxM1rOG_tssg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo0Mjo0MFrOHAMHIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MjE5NA==", "bodyText": "urlFragment is an optional field", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469462194", "createdAt": "2020-08-12T18:36:13Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -114,46 +129,145 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+\n+            // if request constitues of Assembly, publish Assembly\n+            if (request.getRequestParameter(PantheonConstants.TYPE).getString().equals(PantheonConstants.ASSEMBLY))\n+                publishAssembly(request, response, changes, serviceResourceResolver);\n+            // else publish it as module\n+            else\n+               publishModule(request, response, changes, serviceResourceResolver);\n+\n+            if (serviceResourceResolver.hasChanges()) {\n+                serviceResourceResolver.commit();\n+            }\n+\n+        }catch (Exception ex){\n+            logger.error(\"Error occured, rolled back last changes\", ex.getMessage());\n+        }\n+\n+    }\n+\n+    /**\n+     * Method to check if request contains a Module and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @throws PersistenceException\n+     */\n+    private void publishModule(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+        Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+        Locale locale = getLocale(request);\n+        String variant = getVariant(request);\n+        // Get the draft version, there should be one\n+        Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+        if (!versionToRelease.isPresent()) {\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The module doesn't have a draft version to be released\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n+            // Check if productVersion is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have productVersion metadata\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n+            // Check if urlFragment is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have urlFragment metadata\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d792a4ef456809dfed794a464305bd29ef4c0831"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MDQ4MQ==", "bodyText": "+1", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469960481", "createdAt": "2020-08-13T13:42:40Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -114,46 +129,145 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+\n+            // if request constitues of Assembly, publish Assembly\n+            if (request.getRequestParameter(PantheonConstants.TYPE).getString().equals(PantheonConstants.ASSEMBLY))\n+                publishAssembly(request, response, changes, serviceResourceResolver);\n+            // else publish it as module\n+            else\n+               publishModule(request, response, changes, serviceResourceResolver);\n+\n+            if (serviceResourceResolver.hasChanges()) {\n+                serviceResourceResolver.commit();\n+            }\n+\n+        }catch (Exception ex){\n+            logger.error(\"Error occured, rolled back last changes\", ex.getMessage());\n+        }\n+\n+    }\n+\n+    /**\n+     * Method to check if request contains a Module and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @throws PersistenceException\n+     */\n+    private void publishModule(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+        Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+        Locale locale = getLocale(request);\n+        String variant = getVariant(request);\n+        // Get the draft version, there should be one\n+        Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+        if (!versionToRelease.isPresent()) {\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The module doesn't have a draft version to be released\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n+            // Check if productVersion is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have productVersion metadata\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n+            // Check if urlFragment is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have urlFragment metadata\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MjE5NA=="}, "originalCommit": {"oid": "d792a4ef456809dfed794a464305bd29ef4c0831"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM4MzM5OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNzozNFrOG_tvkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1OToyNlrOHAM2aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MjkyOA==", "bodyText": "urlFragment is an optional field", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469462928", "createdAt": "2020-08-12T18:37:34Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -114,46 +129,145 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+\n+            // if request constitues of Assembly, publish Assembly\n+            if (request.getRequestParameter(PantheonConstants.TYPE).getString().equals(PantheonConstants.ASSEMBLY))\n+                publishAssembly(request, response, changes, serviceResourceResolver);\n+            // else publish it as module\n+            else\n+               publishModule(request, response, changes, serviceResourceResolver);\n+\n+            if (serviceResourceResolver.hasChanges()) {\n+                serviceResourceResolver.commit();\n+            }\n+\n+        }catch (Exception ex){\n+            logger.error(\"Error occured, rolled back last changes\", ex.getMessage());\n+        }\n+\n+    }\n+\n+    /**\n+     * Method to check if request contains a Module and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @throws PersistenceException\n+     */\n+    private void publishModule(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+        Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+        Locale locale = getLocale(request);\n+        String variant = getVariant(request);\n+        // Get the draft version, there should be one\n+        Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+        if (!versionToRelease.isPresent()) {\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The module doesn't have a draft version to be released\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n+            // Check if productVersion is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have productVersion metadata\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n+            // Check if urlFragment is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have urlFragment metadata\");\n+            return ;\n+        }\n+        // Draft becomes the new released version\n+        ModuleVariant moduleVariant = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::variants)\n+                .toChild(variants -> variants.variant(variant))\n+                .get();\n+        moduleVariant.releaseDraft();\n+        changes.add(Modification.onModified(module.getPath()));\n+        // source/draft becomes source/released\n+        FileResource draftSource = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::source)\n+                .toChild(sourceContent -> sourceContent.draft())\n+                .get();\n+        // Check for released version\n+        Optional<HashableFileResource> releasedSource = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::source)\n+                .toChild(sourceContent -> sourceContent.released())\n+                .getAsOptional();\n+        if (draftSource != null) {\n+            if (releasedSource.isPresent()) {\n+                try {\n+                    releasedSource.get().delete();\n+                } catch (PersistenceException e) {\n+                    throw new RuntimeException(\"Failed to remove source/released: \" + releasedSource.get().getPath());\n+                }\n+            }\n+            try {\n+                rename(draftSource, \"released\");\n+            } catch (RepositoryException e) {\n+                throw new RuntimeException(\"Cannot find source/draft: \" + draftSource.getPath());\n+            }\n+\n+    }\n+    }\n+\n+    /**\n+     *  Method to check if request contains an assembly and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @return\n+     * @throws PersistenceException\n+     */\n+    private void publishAssembly(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+            Assembly assembly = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Assembly.class);\n             Locale locale = getLocale(request);\n             String variant = getVariant(request);\n             // Get the draft version, there should be one\n-            Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+            Optional<AssemblyVersion> versionToRelease = assembly.getDraftVersion(locale, variant);\n             if (!versionToRelease.isPresent()) {\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The module doesn't have a draft version to be released\");\n-                return;\n-            } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                return ;\n+            }\n+            else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n                     || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n                 // Check if productVersion is set\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The version to be released doesn't have productVersion metadata\");\n-                return;\n+                return ;\n             } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n                     || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n                 // Check if urlFragment is set\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The version to be released doesn't have urlFragment metadata\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d792a4ef456809dfed794a464305bd29ef4c0831"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0ODY5Nw==", "bodyText": "@xdavidson, urlFragment is not a part of this ticket.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469748697", "createdAt": "2020-08-13T07:23:42Z", "author": {"login": "rednitish"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -114,46 +129,145 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+\n+            // if request constitues of Assembly, publish Assembly\n+            if (request.getRequestParameter(PantheonConstants.TYPE).getString().equals(PantheonConstants.ASSEMBLY))\n+                publishAssembly(request, response, changes, serviceResourceResolver);\n+            // else publish it as module\n+            else\n+               publishModule(request, response, changes, serviceResourceResolver);\n+\n+            if (serviceResourceResolver.hasChanges()) {\n+                serviceResourceResolver.commit();\n+            }\n+\n+        }catch (Exception ex){\n+            logger.error(\"Error occured, rolled back last changes\", ex.getMessage());\n+        }\n+\n+    }\n+\n+    /**\n+     * Method to check if request contains a Module and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @throws PersistenceException\n+     */\n+    private void publishModule(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+        Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+        Locale locale = getLocale(request);\n+        String variant = getVariant(request);\n+        // Get the draft version, there should be one\n+        Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+        if (!versionToRelease.isPresent()) {\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The module doesn't have a draft version to be released\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n+            // Check if productVersion is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have productVersion metadata\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n+            // Check if urlFragment is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have urlFragment metadata\");\n+            return ;\n+        }\n+        // Draft becomes the new released version\n+        ModuleVariant moduleVariant = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::variants)\n+                .toChild(variants -> variants.variant(variant))\n+                .get();\n+        moduleVariant.releaseDraft();\n+        changes.add(Modification.onModified(module.getPath()));\n+        // source/draft becomes source/released\n+        FileResource draftSource = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::source)\n+                .toChild(sourceContent -> sourceContent.draft())\n+                .get();\n+        // Check for released version\n+        Optional<HashableFileResource> releasedSource = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::source)\n+                .toChild(sourceContent -> sourceContent.released())\n+                .getAsOptional();\n+        if (draftSource != null) {\n+            if (releasedSource.isPresent()) {\n+                try {\n+                    releasedSource.get().delete();\n+                } catch (PersistenceException e) {\n+                    throw new RuntimeException(\"Failed to remove source/released: \" + releasedSource.get().getPath());\n+                }\n+            }\n+            try {\n+                rename(draftSource, \"released\");\n+            } catch (RepositoryException e) {\n+                throw new RuntimeException(\"Cannot find source/draft: \" + draftSource.getPath());\n+            }\n+\n+    }\n+    }\n+\n+    /**\n+     *  Method to check if request contains an assembly and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @return\n+     * @throws PersistenceException\n+     */\n+    private void publishAssembly(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+            Assembly assembly = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Assembly.class);\n             Locale locale = getLocale(request);\n             String variant = getVariant(request);\n             // Get the draft version, there should be one\n-            Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+            Optional<AssemblyVersion> versionToRelease = assembly.getDraftVersion(locale, variant);\n             if (!versionToRelease.isPresent()) {\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The module doesn't have a draft version to be released\");\n-                return;\n-            } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                return ;\n+            }\n+            else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n                     || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n                 // Check if productVersion is set\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The version to be released doesn't have productVersion metadata\");\n-                return;\n+                return ;\n             } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n                     || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n                 // Check if urlFragment is set\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The version to be released doesn't have urlFragment metadata\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MjkyOA=="}, "originalCommit": {"oid": "d792a4ef456809dfed794a464305bd29ef4c0831"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MjkyMg==", "bodyText": "No, Lisa has a good point. Vanity URL has not been required in the Edit Metadata screen for some time, and we should not be checking for it during a publish operation. It would be trivial for you to remove this check; please do so.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469962922", "createdAt": "2020-08-13T13:46:06Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -114,46 +129,145 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+\n+            // if request constitues of Assembly, publish Assembly\n+            if (request.getRequestParameter(PantheonConstants.TYPE).getString().equals(PantheonConstants.ASSEMBLY))\n+                publishAssembly(request, response, changes, serviceResourceResolver);\n+            // else publish it as module\n+            else\n+               publishModule(request, response, changes, serviceResourceResolver);\n+\n+            if (serviceResourceResolver.hasChanges()) {\n+                serviceResourceResolver.commit();\n+            }\n+\n+        }catch (Exception ex){\n+            logger.error(\"Error occured, rolled back last changes\", ex.getMessage());\n+        }\n+\n+    }\n+\n+    /**\n+     * Method to check if request contains a Module and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @throws PersistenceException\n+     */\n+    private void publishModule(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+        Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+        Locale locale = getLocale(request);\n+        String variant = getVariant(request);\n+        // Get the draft version, there should be one\n+        Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+        if (!versionToRelease.isPresent()) {\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The module doesn't have a draft version to be released\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n+            // Check if productVersion is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have productVersion metadata\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n+            // Check if urlFragment is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have urlFragment metadata\");\n+            return ;\n+        }\n+        // Draft becomes the new released version\n+        ModuleVariant moduleVariant = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::variants)\n+                .toChild(variants -> variants.variant(variant))\n+                .get();\n+        moduleVariant.releaseDraft();\n+        changes.add(Modification.onModified(module.getPath()));\n+        // source/draft becomes source/released\n+        FileResource draftSource = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::source)\n+                .toChild(sourceContent -> sourceContent.draft())\n+                .get();\n+        // Check for released version\n+        Optional<HashableFileResource> releasedSource = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::source)\n+                .toChild(sourceContent -> sourceContent.released())\n+                .getAsOptional();\n+        if (draftSource != null) {\n+            if (releasedSource.isPresent()) {\n+                try {\n+                    releasedSource.get().delete();\n+                } catch (PersistenceException e) {\n+                    throw new RuntimeException(\"Failed to remove source/released: \" + releasedSource.get().getPath());\n+                }\n+            }\n+            try {\n+                rename(draftSource, \"released\");\n+            } catch (RepositoryException e) {\n+                throw new RuntimeException(\"Cannot find source/draft: \" + draftSource.getPath());\n+            }\n+\n+    }\n+    }\n+\n+    /**\n+     *  Method to check if request contains an assembly and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @return\n+     * @throws PersistenceException\n+     */\n+    private void publishAssembly(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+            Assembly assembly = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Assembly.class);\n             Locale locale = getLocale(request);\n             String variant = getVariant(request);\n             // Get the draft version, there should be one\n-            Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+            Optional<AssemblyVersion> versionToRelease = assembly.getDraftVersion(locale, variant);\n             if (!versionToRelease.isPresent()) {\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The module doesn't have a draft version to be released\");\n-                return;\n-            } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                return ;\n+            }\n+            else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n                     || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n                 // Check if productVersion is set\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The version to be released doesn't have productVersion metadata\");\n-                return;\n+                return ;\n             } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n                     || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n                 // Check if urlFragment is set\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The version to be released doesn't have urlFragment metadata\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MjkyOA=="}, "originalCommit": {"oid": "d792a4ef456809dfed794a464305bd29ef4c0831"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3MjU4NA==", "bodyText": "Agreed. But it would be super awesome if you can remove the validation on requiring urlFragment.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469972584", "createdAt": "2020-08-13T13:59:26Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -114,46 +129,145 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+\n+            // if request constitues of Assembly, publish Assembly\n+            if (request.getRequestParameter(PantheonConstants.TYPE).getString().equals(PantheonConstants.ASSEMBLY))\n+                publishAssembly(request, response, changes, serviceResourceResolver);\n+            // else publish it as module\n+            else\n+               publishModule(request, response, changes, serviceResourceResolver);\n+\n+            if (serviceResourceResolver.hasChanges()) {\n+                serviceResourceResolver.commit();\n+            }\n+\n+        }catch (Exception ex){\n+            logger.error(\"Error occured, rolled back last changes\", ex.getMessage());\n+        }\n+\n+    }\n+\n+    /**\n+     * Method to check if request contains a Module and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @throws PersistenceException\n+     */\n+    private void publishModule(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+        Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+        Locale locale = getLocale(request);\n+        String variant = getVariant(request);\n+        // Get the draft version, there should be one\n+        Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+        if (!versionToRelease.isPresent()) {\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The module doesn't have a draft version to be released\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n+            // Check if productVersion is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have productVersion metadata\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n+            // Check if urlFragment is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have urlFragment metadata\");\n+            return ;\n+        }\n+        // Draft becomes the new released version\n+        ModuleVariant moduleVariant = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::variants)\n+                .toChild(variants -> variants.variant(variant))\n+                .get();\n+        moduleVariant.releaseDraft();\n+        changes.add(Modification.onModified(module.getPath()));\n+        // source/draft becomes source/released\n+        FileResource draftSource = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::source)\n+                .toChild(sourceContent -> sourceContent.draft())\n+                .get();\n+        // Check for released version\n+        Optional<HashableFileResource> releasedSource = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::source)\n+                .toChild(sourceContent -> sourceContent.released())\n+                .getAsOptional();\n+        if (draftSource != null) {\n+            if (releasedSource.isPresent()) {\n+                try {\n+                    releasedSource.get().delete();\n+                } catch (PersistenceException e) {\n+                    throw new RuntimeException(\"Failed to remove source/released: \" + releasedSource.get().getPath());\n+                }\n+            }\n+            try {\n+                rename(draftSource, \"released\");\n+            } catch (RepositoryException e) {\n+                throw new RuntimeException(\"Cannot find source/draft: \" + draftSource.getPath());\n+            }\n+\n+    }\n+    }\n+\n+    /**\n+     *  Method to check if request contains an assembly and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @return\n+     * @throws PersistenceException\n+     */\n+    private void publishAssembly(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+            Assembly assembly = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Assembly.class);\n             Locale locale = getLocale(request);\n             String variant = getVariant(request);\n             // Get the draft version, there should be one\n-            Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+            Optional<AssemblyVersion> versionToRelease = assembly.getDraftVersion(locale, variant);\n             if (!versionToRelease.isPresent()) {\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The module doesn't have a draft version to be released\");\n-                return;\n-            } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                return ;\n+            }\n+            else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n                     || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n                 // Check if productVersion is set\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The version to be released doesn't have productVersion metadata\");\n-                return;\n+                return ;\n             } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n                     || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n                 // Check if urlFragment is set\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The version to be released doesn't have urlFragment metadata\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MjkyOA=="}, "originalCommit": {"oid": "d792a4ef456809dfed794a464305bd29ef4c0831"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzQzMjY1OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/assemblyDisplay.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo1MToxNlrOG_uNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo1MToxNlrOG_uNkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MDYwOA==", "bodyText": "please create an entry for assembly in pantheon-bundle/frontend/src/app/Constants.tsx", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469470608", "createdAt": "2020-08-12T18:51:16Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/frontend/src/app/assemblyDisplay.tsx", "diffHunk": "@@ -143,6 +144,7 @@ class AssemblyDisplay extends Component<any, any, any> {\n                         <Card>\n                             <Versions\n                                 modulePath={this.state.modulePath}\n+                                type=\"assembly\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d792a4ef456809dfed794a464305bd29ef4c0831"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzQzNDA3OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/moduleDisplay.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo1MTozNVrOG_uOWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo1MTozNVrOG_uOWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MDgwOQ==", "bodyText": "please create an entry for module in pantheon-bundle/frontend/src/app/Constants.tsx", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469470809", "createdAt": "2020-08-12T18:51:35Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/frontend/src/app/moduleDisplay.tsx", "diffHunk": "@@ -143,6 +144,7 @@ class ModuleDisplay extends Component<any, any, any> {\n                         <Card>\n                             <Versions\n                                 modulePath={this.state.modulePath}\n+                                type=\"module\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d792a4ef456809dfed794a464305bd29ef4c0831"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjU2NDYzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoyODowMFrOHALfLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNTo1MjozOVrOHBaiDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MDI1Mw==", "bodyText": "I don't think this comment is accurate.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469950253", "createdAt": "2020-08-13T13:28:00Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java", "diffHunk": "@@ -96,7 +93,7 @@ public boolean canProcessEvent(Event event) {\n     }\n \n     /**\n-     * Process ModuleVersionPublishedEvent. It sends a simple text message to the Message Broker.\n+     * Process AssemblyVersionPublishedEvent. It sends a simple text message to the Message Broker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0NTMyNQ==", "bodyText": "@benradey please check below answer", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471245325", "createdAt": "2020-08-17T05:52:39Z", "author": {"login": "rednitish"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java", "diffHunk": "@@ -96,7 +93,7 @@ public boolean canProcessEvent(Event event) {\n     }\n \n     /**\n-     * Process ModuleVersionPublishedEvent. It sends a simple text message to the Message Broker.\n+     * Process AssemblyVersionPublishedEvent. It sends a simple text message to the Message Broker.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MDI1Mw=="}, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjU3MDc5OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/events/assembly/AssemblyVersionPublishStateEvent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoyOToyN1rOHALi_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo1MzoxN1rOHB26vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MTIyOQ==", "bodyText": "Why do you have these method/variable names using the word 'module' when this is for assemblies?", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469951229", "createdAt": "2020-08-13T13:29:27Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/events/assembly/AssemblyVersionPublishStateEvent.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.redhat.pantheon.extension.events.assembly;\n+\n+import com.redhat.pantheon.extension.Event;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.model.module.ModuleVersion;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Event fired when a module version has been published.\n+ * Includes the module version path so it can be re-fetched in the\n+ * handlers if necessary.\n+ */\n+public class AssemblyVersionPublishStateEvent implements Event {\n+\n+    private final String moduleVersionPath;\n+\n+    protected AssemblyVersionPublishStateEvent(@Nonnull AssemblyVersion assemblyVersion) {\n+        this.moduleVersionPath = assemblyVersion.getPath();\n+    }\n+\n+    public String getModuleVersionPath() {\n+        return moduleVersionPath;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0NTI1MQ==", "bodyText": "@benradey  There is a separate ticket to handle hydra messaging part, I added this class, as it had a dependency on changes.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471245251", "createdAt": "2020-08-17T05:52:16Z", "author": {"login": "rednitish"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/events/assembly/AssemblyVersionPublishStateEvent.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.redhat.pantheon.extension.events.assembly;\n+\n+import com.redhat.pantheon.extension.Event;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.model.module.ModuleVersion;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Event fired when a module version has been published.\n+ * Includes the module version path so it can be re-fetched in the\n+ * handlers if necessary.\n+ */\n+public class AssemblyVersionPublishStateEvent implements Event {\n+\n+    private final String moduleVersionPath;\n+\n+    protected AssemblyVersionPublishStateEvent(@Nonnull AssemblyVersion assemblyVersion) {\n+        this.moduleVersionPath = assemblyVersion.getPath();\n+    }\n+\n+    public String getModuleVersionPath() {\n+        return moduleVersionPath;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MTIyOQ=="}, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxMDM5OA==", "bodyText": "Ok, I am not sure I understand. Can you please explain why the field names we use in Java has an impact on the JSON payload that we product for Hydra to consume? Theoretically we should be able to rename this variable to private final String bigYellowBanana and Hydra should not care... am I mistaken?", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471710398", "createdAt": "2020-08-17T18:53:17Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/events/assembly/AssemblyVersionPublishStateEvent.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.redhat.pantheon.extension.events.assembly;\n+\n+import com.redhat.pantheon.extension.Event;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.model.module.ModuleVersion;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Event fired when a module version has been published.\n+ * Includes the module version path so it can be re-fetched in the\n+ * handlers if necessary.\n+ */\n+public class AssemblyVersionPublishStateEvent implements Event {\n+\n+    private final String moduleVersionPath;\n+\n+    protected AssemblyVersionPublishStateEvent(@Nonnull AssemblyVersion assemblyVersion) {\n+        this.moduleVersionPath = assemblyVersion.getPath();\n+    }\n+\n+    public String getModuleVersionPath() {\n+        return moduleVersionPath;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MTIyOQ=="}, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjU3NzA2OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/events/assembly/AssemblyVersionUnpublishedEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozMDo0MVrOHALmng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozMDo0MVrOHALmng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MjE1OA==", "bodyText": "-module +assembly", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469952158", "createdAt": "2020-08-13T13:30:41Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/events/assembly/AssemblyVersionUnpublishedEvent.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.redhat.pantheon.extension.events.assembly;\n+\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.model.module.ModuleVersion;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Event fired when a module version has been published.\n+ * Includes the module version path so it can be re-fetched in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjYwNjUyOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozNjo1OVrOHAL4Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozNjo1OVrOHAL4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1NjY2Mg==", "bodyText": "There are a couple problems with this block.\n\nDo not rely on the client to tell you whether this is a module or assembly. You have direct access to the document, inspect its type to get the answer.\nDon't copy and paste code. In these two blocks, only lines 97 and 106 are substantially different, because you need to know which type of event to fire. The rest of the logic can be made generic by using Document classes, and then this if/else can be collapsed. Please refactor this.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469956662", "createdAt": "2020-08-13T13:36:59Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -80,16 +86,25 @@ public void run(SlingHttpServletRequest request, PostResponse response, SlingPos\n         if (response.getError() == null) {\n             // call the extension point\n             Locale locale = getLocale(request);\n-            Module module = getModule(request);\n             String variant = getVariant(request);\n-            ModuleVersion moduleVersion = module.locale(locale).get()\n-                    .variants().get()\n-                    .variant(variant).get()\n-                    .released().get();\n-\n-            // Regenerate the module once more\n-            asciidoctorService.getModuleHtml(module, locale, variant, false, new HashMap(), true);\n-            events.fireEvent(new ModuleVersionPublishedEvent(moduleVersion), 15);\n+            if(request.getRequestParameter(\"type\").equals(\"assembly\")) {\n+                AssemblyVersion assemblyVersion = getAssembly(request).locale(locale).get()\n+                        .variants().get()\n+                        .variant(variant).get()\n+                        .released().get();\n+                // Regenerate the module once more\n+                asciidoctorService.getModuleHtml(getAssembly(request), locale, variant, false, new HashMap(), true);\n+                events.fireEvent(new AssemblyVersionPublishedEvent(assemblyVersion), 15);\n+\n+            }\n+            else {\n+                ModuleVersion moduleVersion =  getModule(request).locale(locale).get()\n+                        .variants().get()\n+                        .variant(variant).get()\n+                        .released().get();\n+                asciidoctorService.getModuleHtml(getModule(request), locale, variant, false, new HashMap(), true);\n+                events.fireEvent(new ModuleVersionPublishedEvent(moduleVersion), 15);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjYwODQ1OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozNzoyNVrOHAL5Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozNzoyNVrOHAL5Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1Njk2Nw==", "bodyText": "Same thing here, don't rely on the client to tell you what document type you're working with.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469956967", "createdAt": "2020-08-13T13:37:25Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -114,46 +129,145 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+\n+            // if request constitues of Assembly, publish Assembly\n+            if (request.getRequestParameter(PantheonConstants.TYPE).getString().equals(PantheonConstants.ASSEMBLY))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjYyNTE0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo0MToyN1rOHAMD1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo0MToyN1rOHAMD1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1OTYzOA==", "bodyText": "I'm going to put this comment on this method definition but it applies to the entire publishModule and publishAssembly block of code. Don't copy/paste code. Just like above, I'm betting you could make at least 90% of this generic by using Document classes and then you'll have a single publishDocument method that works for anything. There might be a few lines where you need to take special action for module/assembly but then just surround those few special lines with an if/else. You shouldn't duplicate the entire method like this.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469959638", "createdAt": "2020-08-13T13:41:27Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -114,46 +129,145 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+\n+            // if request constitues of Assembly, publish Assembly\n+            if (request.getRequestParameter(PantheonConstants.TYPE).getString().equals(PantheonConstants.ASSEMBLY))\n+                publishAssembly(request, response, changes, serviceResourceResolver);\n+            // else publish it as module\n+            else\n+               publishModule(request, response, changes, serviceResourceResolver);\n+\n+            if (serviceResourceResolver.hasChanges()) {\n+                serviceResourceResolver.commit();\n+            }\n+\n+        }catch (Exception ex){\n+            logger.error(\"Error occured, rolled back last changes\", ex.getMessage());\n+        }\n+\n+    }\n+\n+    /**\n+     * Method to check if request contains a Module and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @throws PersistenceException\n+     */\n+    private void publishModule(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjYzNzY4OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo0NDoyMFrOHAMLuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo0NDoyMFrOHAMLuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MTY1Ng==", "bodyText": "Not a big deal, but please be careful not to introduce meaningless whitespace.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469961656", "createdAt": "2020-08-13T13:44:20Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -114,46 +129,145 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+\n+            // if request constitues of Assembly, publish Assembly\n+            if (request.getRequestParameter(PantheonConstants.TYPE).getString().equals(PantheonConstants.ASSEMBLY))\n+                publishAssembly(request, response, changes, serviceResourceResolver);\n+            // else publish it as module\n+            else\n+               publishModule(request, response, changes, serviceResourceResolver);\n+\n+            if (serviceResourceResolver.hasChanges()) {\n+                serviceResourceResolver.commit();\n+            }\n+\n+        }catch (Exception ex){\n+            logger.error(\"Error occured, rolled back last changes\", ex.getMessage());\n+        }\n+\n+    }\n+\n+    /**\n+     * Method to check if request contains a Module and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @throws PersistenceException\n+     */\n+    private void publishModule(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+        Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+        Locale locale = getLocale(request);\n+        String variant = getVariant(request);\n+        // Get the draft version, there should be one\n+        Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+        if (!versionToRelease.isPresent()) {\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The module doesn't have a draft version to be released\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n+            // Check if productVersion is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have productVersion metadata\");\n+            return ;\n+        } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n+                || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n+            // Check if urlFragment is set\n+            response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n+                    \"The version to be released doesn't have urlFragment metadata\");\n+            return ;\n+        }\n+        // Draft becomes the new released version\n+        ModuleVariant moduleVariant = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::variants)\n+                .toChild(variants -> variants.variant(variant))\n+                .get();\n+        moduleVariant.releaseDraft();\n+        changes.add(Modification.onModified(module.getPath()));\n+        // source/draft becomes source/released\n+        FileResource draftSource = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::source)\n+                .toChild(sourceContent -> sourceContent.draft())\n+                .get();\n+        // Check for released version\n+        Optional<HashableFileResource> releasedSource = traverseFrom(module)\n+                .toChild(m -> module.locale(locale))\n+                .toChild(ModuleLocale::source)\n+                .toChild(sourceContent -> sourceContent.released())\n+                .getAsOptional();\n+        if (draftSource != null) {\n+            if (releasedSource.isPresent()) {\n+                try {\n+                    releasedSource.get().delete();\n+                } catch (PersistenceException e) {\n+                    throw new RuntimeException(\"Failed to remove source/released: \" + releasedSource.get().getPath());\n+                }\n+            }\n+            try {\n+                rename(draftSource, \"released\");\n+            } catch (RepositoryException e) {\n+                throw new RuntimeException(\"Cannot find source/draft: \" + draftSource.getPath());\n+            }\n+\n+    }\n+    }\n+\n+    /**\n+     *  Method to check if request contains an assembly and it needs to get published\n+     *\n+     * @param request\n+     * @param response\n+     * @param changes\n+     * @param serviceResourceResolver\n+     * @return\n+     * @throws PersistenceException\n+     */\n+    private void publishAssembly(SlingHttpServletRequest request, PostResponse response, List<Modification> changes, ResourceResolver serviceResourceResolver) throws PersistenceException {\n+            Assembly assembly = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Assembly.class);\n             Locale locale = getLocale(request);\n             String variant = getVariant(request);\n             // Get the draft version, there should be one\n-            Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+            Optional<AssemblyVersion> versionToRelease = assembly.getDraftVersion(locale, variant);\n             if (!versionToRelease.isPresent()) {\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The module doesn't have a draft version to be released\");\n-                return;\n-            } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n+                return ;\n+            }\n+            else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n                     || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n                 // Check if productVersion is set\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The version to be released doesn't have productVersion metadata\");\n-                return;\n+                return ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjY2NTQ4OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/helper/PantheonConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1MDoyOVrOHAMccA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1MDoyOVrOHAMccA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2NTkzNg==", "bodyText": "Two things here:\n\nI see how you're using these constants elsewhere in the application - and I'm requesting changes there, so that should render these entries unnecessary\nNotwithstanding #1, if you were to introduce constants like these, please be more descriptive and follow any existing patterns. For example, you can see we have PARAM_VARIANT above, so you could have followed that pattern for PARAM_TYPE. There is no existing pattern for ASSEMBLY, but you could have gone with DOCUMENT_TYPE_ASSEMBLY, for example.\n\nAnyway, unless these constants have further purpose, please remove them.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469965936", "createdAt": "2020-08-13T13:50:29Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/helper/PantheonConstants.java", "diffHunk": "@@ -11,4 +11,8 @@\n     public static final String PARAM_VARIANT = \"variant\";\n \n     public static final String PANTHEON_PUBLISHERS = \"pantheon-publishers\";\n+\n+    public static final String TYPE = \"type\";\n+\n+    public static final String ASSEMBLY = \"assembly\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjY3NjI3OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1Mjo0M1rOHAMiwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1Mjo0M1rOHAMiwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2NzU1NA==", "bodyText": "Same thing here as before. No reason for these two methods to be copy/pasted. They appear to be identical. Please collapse them into a single method that handles Documents.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469967554", "createdAt": "2020-08-13T13:52:43Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "diffHunk": "@@ -121,32 +123,49 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canUnPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+            // if request constitues of Assembly, unpublish Assembly\n+            if (request.getRequestParameter(PantheonConstants.TYPE).getString().equals(PantheonConstants.ASSEMBLY))\n+                unpublishAssembly(request, response, changes, serviceResourceResolver);\n+            else\n+                // else unpublish it as module\n+                unPublishModule(request, response, changes, serviceResourceResolver);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjY4MzU5OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1NDoyMVrOHAMnPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1NDoyMVrOHAMnPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2ODcwMQ==", "bodyText": "Minor code style point, but please be consistent with brackets. Although if/else brackets are optional if you only have one line, people generally agree that the code is more readable if you include them. The fact that this if/else without brackets is immediately followed up by an if statement that does have brackets makes the inconsistency even more glaring.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469968701", "createdAt": "2020-08-13T13:54:21Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "diffHunk": "@@ -121,32 +123,49 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canUnPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+            // if request constitues of Assembly, unpublish Assembly\n+            if (request.getRequestParameter(PantheonConstants.TYPE).getString().equals(PantheonConstants.ASSEMBLY))\n+                unpublishAssembly(request, response, changes, serviceResourceResolver);\n+            else\n+                // else unpublish it as module\n+                unPublishModule(request, response, changes, serviceResourceResolver);\n+\n+            if (serviceResourceResolver.hasChanges()) {\n+                serviceResourceResolver.commit();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjY4Nzk5OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/PublishDraftVersionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1NToxMlrOHAMp1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1NToxMlrOHAMp1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2OTM2NA==", "bodyText": "Please remember to remove these 'type' parameters after you update the servlet to not need them.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469969364", "createdAt": "2020-08-13T13:55:12Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/PublishDraftVersionTest.java", "diffHunk": "@@ -56,6 +53,9 @@ void doRun() throws Exception {\n                         \"jcr:data\", \"The draft content\")\n                 .commit();\n         registerMockAdapter(Module.class, slingContext);\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"type\",\"module\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjY4ODcwOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/PublishDraftVersionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1NToxOFrOHAMqLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1NToxOFrOHAMqLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2OTQ1NA==", "bodyText": "Same", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469969454", "createdAt": "2020-08-13T13:55:18Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/PublishDraftVersionTest.java", "diffHunk": "@@ -98,6 +98,9 @@ void doRunNoDraftVersion() throws Exception {\n                 .resource(\"/content/repositories/repo/module/en_US/source/released/jcr:content\",\n                         \"jcr:data\", \"The released content\")\n                 .commit();\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"type\",\"module\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjY5MDk3OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/PublishDraftVersionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1NTo0MFrOHAMrcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1NTo0MFrOHAMrcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2OTc3Nw==", "bodyText": "Same", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469969777", "createdAt": "2020-08-13T13:55:40Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/PublishDraftVersionTest.java", "diffHunk": "@@ -118,4 +121,80 @@ void doRunNoDraftVersion() throws Exception {\n         assertEquals(HttpServletResponse.SC_PRECONDITION_FAILED, postResponse.getStatusCode());\n \n     }\n+    @Test\n+    void doRunForAssembly() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/content/repositories/repo/assembly/en_US/variants/DEFAULT/draft/metadata\",\n+                        \"jcr:title\", \"A draft title\",\n+                        \"productVersion\", \"123456\",\n+                        \"urlFragment\", \"/test\")\n+                .resource(\"/content/repositories/repo/assembly/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"The draft content\")\n+                .commit();\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"type\",\"assembly\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjcwMzQwOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/UnpublishVersionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1ODowNFrOHAMyyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1ODowNFrOHAMyyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3MTY1OQ==", "bodyText": "Same (There are more after this one but I'll stop commenting)", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469971659", "createdAt": "2020-08-13T13:58:04Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/UnpublishVersionTest.java", "diffHunk": "@@ -0,0 +1,313 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.extension.Events;\n+import com.redhat.pantheon.helper.PantheonConstants;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleVersion;\n+import com.redhat.pantheon.servlet.UnpublishVersion;\n+import com.redhat.pantheon.sling.ServiceResourceResolverProvider;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.servlets.post.HtmlResponse;\n+import org.apache.sling.servlets.post.Modification;\n+import org.apache.sling.servlets.post.ModificationType;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+\n+import javax.jcr.Session;\n+import javax.jcr.SimpleCredentials;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.common.collect.Lists.newArrayList;\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class})\n+class UnpublishVersionTest {\n+\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+    String testHTML = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head><title>test title</title></head> <body \" +\n+            \"class=\\\"article\\\"><h1>test title</h1> </header> </body> </html>\";\n+\n+    @Test\n+    @DisplayName(\"doRun for module with only released version\")\n+    void doRun() throws Exception {\n+        // Given\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/variants/DEFAULT/released\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/variants/DEFAULT/released/metadata\",\n+                        \"jcr:title\", \"A published title\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"Released content\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Released content\");\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"type\",\"module\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjcwOTU0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/UnpublishVersionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1OTozMlrOHAM2tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1OTozMlrOHAM2tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3MjY2Mw==", "bodyText": "Typo in method name", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r469972663", "createdAt": "2020-08-13T13:59:32Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/UnpublishVersionTest.java", "diffHunk": "@@ -0,0 +1,313 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.extension.Events;\n+import com.redhat.pantheon.helper.PantheonConstants;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleVersion;\n+import com.redhat.pantheon.servlet.UnpublishVersion;\n+import com.redhat.pantheon.sling.ServiceResourceResolverProvider;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.servlets.post.HtmlResponse;\n+import org.apache.sling.servlets.post.Modification;\n+import org.apache.sling.servlets.post.ModificationType;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+\n+import javax.jcr.Session;\n+import javax.jcr.SimpleCredentials;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.common.collect.Lists.newArrayList;\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class})\n+class UnpublishVersionTest {\n+\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+    String testHTML = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head><title>test title</title></head> <body \" +\n+            \"class=\\\"article\\\"><h1>test title</h1> </header> </body> </html>\";\n+\n+    @Test\n+    @DisplayName(\"doRun for module with only released version\")\n+    void doRun() throws Exception {\n+        // Given\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/variants/DEFAULT/released\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/variants/DEFAULT/released/metadata\",\n+                        \"jcr:title\", \"A published title\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"Released content\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Released content\");\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"type\",\"module\");\n+        slingContext.request().setParameterMap(map);\n+        registerMockAdapter(Module.class, slingContext);\n+        registerMockAdapter(ModuleVersion.class, slingContext);\n+        ServiceResourceResolverProvider serviceResourceResolverProvider = Mockito.mock(ServiceResourceResolverProvider.class);\n+        ResourceResolver resourceResolver = slingContext.request().getResourceResolver();\n+        Module module = slingContext.request().adaptTo(Module.class);\n+        lenient().doReturn(resourceResolver)\n+                .when(serviceResourceResolverProvider).getServiceResourceResolver();\n+        Events events = mock(Events.class);\n+        HtmlResponse postResponse = new HtmlResponse();\n+        List<Modification> changes = newArrayList();\n+        slingContext.request().setResource( slingContext.resourceResolver().getResource(\"/content/repositories/repo/module\") );\n+        UnpublishVersion operation = new UnpublishVersion(events, serviceResourceResolverProvider);\n+\n+        // When\n+        operation.doRun(slingContext.request(), postResponse, changes);\n+\n+        // Then\n+        assertEquals(1, changes.size());\n+        assertEquals(ModificationType.MODIFY, changes.get(0).getType());\n+        assertEquals(\"/content/repositories/repo/module\", changes.get(0).getSource());\n+        assertEquals(HttpServletResponse.SC_OK, postResponse.getStatusCode());\n+        assertNull(slingContext.resourceResolver().getResource(\"/content/repositories/repo/module/en_US/variants/DEFAULT/released\"));\n+        assertNotNull(slingContext.resourceResolver().getResource(\"/content/repositories/repo/module/en_US/variants/DEFAULT/draft\"));\n+        assertNull(slingContext.resourceResolver().getResource(\"/content/repositories/repo/module/en_US/source/released\"));\n+\n+    }\n+\n+    @Test\n+    @DisplayName(\"doRun for module with both released and draft version\")\n+    void doRunWithDraftVersoin() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f225302faffea8ee453da6ff97e65662238ed077"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODE2Nzk4OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/events/assembly/AssemblyVersionPublishStateEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODowNTo0MFrOHB0Ucw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODowNTo0MFrOHB0Ucw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2NzgyNw==", "bodyText": "Still need to rename this to Assembly (vs module)\nEdit: Keeping this comment, but you mentioned renaming this might impact Hydra somehow.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471667827", "createdAt": "2020-08-17T18:05:40Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/events/assembly/AssemblyVersionPublishStateEvent.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.redhat.pantheon.extension.events.assembly;\n+\n+import com.redhat.pantheon.extension.Event;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Event fired when a assembly version has been published.\n+ * Includes the assembly version path so it can be re-fetched in the\n+ * handlers if necessary.\n+ */\n+public class AssemblyVersionPublishStateEvent implements Event {\n+\n+    private final String moduleVersionPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67493422ea791c56642c224704867c6a692c1974"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODIyNDgzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODoyMTozN1rOHB02mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODoyMTozN1rOHB02mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY3NjU3MQ==", "bodyText": "@rednitish I realize you did not write this code originally, but now that I'm looking at it, I see that the variable m here is just unused. That has me wondering if the initial call to traverseFrom is unnecessary, or if this technique isn't being used in the wrong way.\n@carlosmunoz Since you're the mastermind behind most of the model api, can you comment on whether this is the best way to get from Document down to ultimately DocumentVariant? Am I right in thinking that the discarding of m is a code smell? And what's the difference between using ResourceTraversal vs using the model api directly, such as document.get().locale(whatever).get().variants().get().variant(\"variant\").get()?", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471676571", "createdAt": "2020-08-17T18:21:37Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -114,46 +120,40 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+            Optional<? extends Document> document = getDocument(request, serviceResourceResolver);\n             Locale locale = getLocale(request);\n             String variant = getVariant(request);\n             // Get the draft version, there should be one\n-            Optional<ModuleVersion> versionToRelease = module.getDraftVersion(locale, variant);\n+            Optional<? extends DocumentVersion> versionToRelease = document.get().getDraftVersion(locale, variant);\n             if (!versionToRelease.isPresent()) {\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n-                        \"The module doesn't have a draft version to be released\");\n+                        \"The document doesn't have a draft version to be released\");\n                 return;\n             } else if (versionToRelease.get().metadata().getOrCreate().productVersion().get() == null\n                     || versionToRelease.get().metadata().getOrCreate().productVersion().get().isEmpty()) {\n                 // Check if productVersion is set\n                 response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n                         \"The version to be released doesn't have productVersion metadata\");\n                 return;\n-            } else if (versionToRelease.get().metadata().getOrCreate().urlFragment().get() == null\n-                    || versionToRelease.get().metadata().getOrCreate().urlFragment().get().isEmpty()) {\n-                // Check if urlFragment is set\n-                response.setStatus(HttpServletResponse.SC_PRECONDITION_FAILED,\n-                        \"The version to be released doesn't have urlFragment metadata\");\n-                return;\n             } else {\n                 // Draft becomes the new released version\n-                ModuleVariant moduleVariant = traverseFrom(module)\n-                        .toChild(m -> module.locale(locale))\n-                        .toChild(ModuleLocale::variants)\n+                DocumentVariant docVariant = traverseFrom(document.get())\n+                        .toChild(m -> document.get().locale(locale))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67493422ea791c56642c224704867c6a692c1974"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODI3ODYzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODozMDowOFrOHB1cSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODozMDowOFrOHB1cSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY4NjIxOQ==", "bodyText": "You shouldn't need a call to a new getDocument() method here, you should just be able to use the original line and just replace Module with Document.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471686219", "createdAt": "2020-08-17T18:30:08Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -114,46 +120,40 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+            Optional<? extends Document> document = getDocument(request, serviceResourceResolver);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67493422ea791c56642c224704867c6a692c1974"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODM3NzMyOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0MzoxM1rOHB2jUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0MzoxM1rOHB2jUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNDQwMg==", "bodyText": "I have a bunch of thoughts about this method.\n\nIt doesn't make a whole lot of sense to use both @NotNull and the Optional construct together. The whole point of Optional is to wrap something that may be null, so if your method returns an Optional, then of course the reference to the Optional itself is never going to be null (even if the thing that it wraps might be). Having said that, Sling makes sure that your servlet is only called when your Resource actually exists, so we don't need to worry about a null check. If I weren't about to recommend that you just remove this method, then I would recommend that you just drop both constructs because it's not worth worrying about.\nThe if () statement here is a bit long. If I were writing this method, here's how I'd do it instead:\n\nResource r = serviceResourceResolver.getResource(request.getResource().getPath());\nif (\"pantheon/assembly\".equals(r.getResourceType()) {\n    return r.adaptTo(Assembly.class);\n} else {\n    return r.adaptTo(Module.class);\n}\n\n\nHowever, you really don't need the method at all. Just call .adaptTo(Document.class) on line 123 and use that for the entire servlet. Since you need to know what type of event to fire on line 97, just check the resource type there. The rest of the servlet can be completely generic.\nIf you get rid of the unnecessary Optional construct, you don't need .get() cluttering up the code.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471704402", "createdAt": "2020-08-17T18:43:13Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -179,4 +179,14 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             throw new RepositoryException(ex.getMessage());\n         }\n     }\n+\n+    @NotNull\n+    private Optional<? extends Document> getDocument(SlingHttpServletRequest request, ResourceResolver serviceResourceResolver) {\n+        if(serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Document.class).getResourceType().equalsIgnoreCase(\"pantheon/assembly\")){\n+            Assembly assembly = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Assembly.class);\n+            return Optional.ofNullable(assembly);\n+        }\n+            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+            return Optional.ofNullable(module);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67493422ea791c56642c224704867c6a692c1974"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODM5MTc1OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0NjowMVrOHB2sKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0NjowMVrOHB2sKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNjY2Nw==", "bodyText": "This is the only place where you need to know whether it's assembly vs module. I would not use instanceof here - rather, I would just use if (\"pantheon/assemblyVersion\".equals(documentVersion.getResourceType()) or something similar. Let me know if you don't understand why, we can talk about the difference on chat.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471706667", "createdAt": "2020-08-17T18:46:01Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -80,16 +81,21 @@ public void run(SlingHttpServletRequest request, PostResponse response, SlingPos\n         if (response.getError() == null) {\n             // call the extension point\n             Locale locale = getLocale(request);\n-            Module module = getModule(request);\n+            Optional<? extends Document> document = getDocument(request, request.getResourceResolver());\n             String variant = getVariant(request);\n-            ModuleVersion moduleVersion = module.locale(locale).get()\n+            Optional<? extends DocumentVersion> documentVersion = Optional.of(document.get().locale(locale).get()\n                     .variants().get()\n                     .variant(variant).get()\n-                    .released().get();\n+                    .released().get());\n+\n+            // Regenerate the document once more\n+            asciidoctorService.getModuleHtml(document.get(), locale, variant, false, new HashMap(), true);\n \n-            // Regenerate the module once more\n-            asciidoctorService.getModuleHtml(module, locale, variant, false, new HashMap(), true);\n-            events.fireEvent(new ModuleVersionPublishedEvent(moduleVersion), 15);\n+            if(documentVersion.get() instanceof AssemblyVersion){\n+                events.fireEvent(new AssemblyVersionPublishedEvent((AssemblyVersion) documentVersion.get()), 15);\n+            }else{\n+                events.fireEvent(new ModuleVersionPublishedEvent((ModuleVersion)documentVersion.get()), 15);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67493422ea791c56642c224704867c6a692c1974"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODM5NDE4OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0Njo1MFrOHB2trw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0Njo1MFrOHB2trw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNzA1NQ==", "bodyText": "Same comment here as publish servlet.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471707055", "createdAt": "2020-08-17T18:46:50Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "diffHunk": "@@ -88,15 +91,19 @@ public void run(SlingHttpServletRequest request, PostResponse response, SlingPos\n         if (response.getError() == null) {\n             // call the extension point\n             Locale locale = getLocale(request);\n-            Module module = getModule(request);\n+            Optional<? extends Document> document = getDocument(request, request.getResourceResolver());\n             String variant = getVariant(request);\n-            ModuleVersion moduleVersion = module.locale(locale).get()\n+            Optional<? extends DocumentVersion> documentVersion = Optional.of(document.get().locale(locale).get()\n                     .variants().get()\n                     .variant(variant).get()\n-                    .draft().get();\n+                    .draft().get());\n \n             // TODO We need to change the event so that the right variant is processed\n-            events.fireEvent(new ModuleVersionUnpublishedEvent(moduleVersion), 15);\n+            if(documentVersion.get() instanceof AssemblyVersion){\n+                events.fireEvent(new AssemblyVersionPublishedEvent((AssemblyVersion) documentVersion.get()), 15);\n+            }else{\n+                events.fireEvent(new ModuleVersionPublishedEvent((ModuleVersion)documentVersion.get()), 15);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67493422ea791c56642c224704867c6a692c1974"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODM5NjA5OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0NzoyNlrOHB2u2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0NzoyNlrOHB2u2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNzM1NQ==", "bodyText": "Same comments here, I am betting this Optional construct is unnecessary.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471707355", "createdAt": "2020-08-17T18:47:26Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "diffHunk": "@@ -88,15 +91,19 @@ public void run(SlingHttpServletRequest request, PostResponse response, SlingPos\n         if (response.getError() == null) {\n             // call the extension point\n             Locale locale = getLocale(request);\n-            Module module = getModule(request);\n+            Optional<? extends Document> document = getDocument(request, request.getResourceResolver());\n             String variant = getVariant(request);\n-            ModuleVersion moduleVersion = module.locale(locale).get()\n+            Optional<? extends DocumentVersion> documentVersion = Optional.of(document.get().locale(locale).get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67493422ea791c56642c224704867c6a692c1974"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODQwMDQxOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0ODo0OFrOHB2xiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0ODo0OFrOHB2xiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwODA0Mw==", "bodyText": "Again, unnecessary, you should just be able to .adaptTo(Document.class) and the code should still function.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471708043", "createdAt": "2020-08-17T18:48:48Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "diffHunk": "@@ -121,32 +128,41 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             if(canUnPublish) {\n                 serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver();\n             }\n-            Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+            Optional<? extends Document> document;\n+            if(serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Document.class).getResourceType().equalsIgnoreCase(\"pantheon/assembly\")){\n+                Assembly assembly = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Assembly.class);\n+                document = Optional.ofNullable(assembly);\n+            }\n+            else{\n+                Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+                document = Optional.ofNullable(module);\n+\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67493422ea791c56642c224704867c6a692c1974"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODQwMTA4OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0OTowMlrOHB2x9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0OTowMlrOHB2x9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwODE0OA==", "bodyText": "Same comment as publish servlet, please remove this method.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r471708148", "createdAt": "2020-08-17T18:49:02Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/UnpublishVersion.java", "diffHunk": "@@ -173,4 +189,13 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n             throw new RepositoryException(ex.getMessage());\n         }\n     }\n+    @NotNull\n+    private Optional<? extends Document> getDocument(SlingHttpServletRequest request, ResourceResolver serviceResourceResolver) {\n+        if(serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Document.class).getResourceType().equalsIgnoreCase(\"pantheon/assembly\")){\n+            Assembly assembly = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Assembly.class);\n+            return Optional.ofNullable(assembly);\n+        }\n+        Module module = serviceResourceResolver.getResource(request.getResource().getPath()).adaptTo(Module.class);\n+        return Optional.ofNullable(module);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67493422ea791c56642c224704867c6a692c1974"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODIyMTc3OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToyMzo1OVrOHDV5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDo0MjoxOVrOHEE5oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2NjQ1OA==", "bodyText": "This is interesting. It looks like we're putting effort into figuring out whether the resource is a module or an assembly, but then we're ultimately discarding the answer and just casting to a generic document class for the rest of the method. I bet this could be removed.\nI know you didn't write this originally, but since it looks like you have a conflict to resolve anyway, bonus points for taking care of this at the same time. :)", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r473266458", "createdAt": "2020-08-19T19:23:59Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "diffHunk": "@@ -176,10 +177,10 @@ private String buildDocument(@Nonnull Document base, @Nonnull Locale locale, @No\n                     + \",variant: \" + variantName + \", draft: \" + isDraft);\n         }\n \n-        // Use a service-level resource resolver to build the module as it will require write access to the resources\n+        // Use a service-level resource resolver to build the module or assemblies as it will require write access to the resources\n         try (ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver()) {\n \n-            Class cls = base instanceof Module ? Module.class : Assembly.class;\n+            Class cls = base.getResourceType().equals(PantheonConstants.RESOURCETYPE_ASSEMBLY) ? Assembly.class : Module.class;\n             Document serviceDocument = (Document) SlingModels.getModel(serviceResourceResolver, base.getPath(), cls);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6250ccd62f56d2b55f4425ad652e169d182cf779"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAzNjY0MA==", "bodyText": "@benradey  I have created a separate ticket, to track this code quality issue, we can work on it separately.\nhttps://projects.engineering.redhat.com/browse/CCS-3772", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r474036640", "createdAt": "2020-08-20T14:42:19Z", "author": {"login": "rednitish"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "diffHunk": "@@ -176,10 +177,10 @@ private String buildDocument(@Nonnull Document base, @Nonnull Locale locale, @No\n                     + \",variant: \" + variantName + \", draft: \" + isDraft);\n         }\n \n-        // Use a service-level resource resolver to build the module as it will require write access to the resources\n+        // Use a service-level resource resolver to build the module or assemblies as it will require write access to the resources\n         try (ResourceResolver serviceResourceResolver = serviceResourceResolverProvider.getServiceResourceResolver()) {\n \n-            Class cls = base instanceof Module ? Module.class : Assembly.class;\n+            Class cls = base.getResourceType().equals(PantheonConstants.RESOURCETYPE_ASSEMBLY) ? Assembly.class : Module.class;\n             Document serviceDocument = (Document) SlingModels.getModel(serviceResourceResolver, base.getPath(), cls);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2NjQ1OA=="}, "originalCommit": {"oid": "6250ccd62f56d2b55f4425ad652e169d182cf779"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODI0Mzg1OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTozMDozNFrOHDWGPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDo0MjozN1rOHEE6dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2OTgyMg==", "bodyText": "Not your code, but I worry that we have a bug here, so also tagging @carlosmunoz @xdavidson @aprajshekhar.\nI don't think it's appropriate to assume that if the caller doesn't specify a variant parameter for publishing, that we assume DEFAULT_VARIANT_NAME.\nBetter options:\n\nAssume document.getWorkspace().getCanonicalVariantName()\nThrow an exception, because if the caller is publishing something, they should be explicit about which variant they want rather than us potentially guessing wrong.\n\nThoughts / other opinions?", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r473269822", "createdAt": "2020-08-19T19:30:34Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -60,16 +63,16 @@ public PublishDraftVersion(@Reference Events events,\n         this.serviceResourceResolverProvider = serviceResourceResolverProvider;\n     }\n \n-    private Module getModule(SlingHttpServletRequest request) {\n-        return request.getResource().adaptTo(Module.class);\n+    private Document getDocument(SlingHttpServletRequest request) {\n+        return request.getResource().adaptTo(Document.class);\n     }\n \n     private Locale getLocale(SlingHttpServletRequest request) {\n         return paramValueAsLocale(request, \"locale\", GlobalConfig.DEFAULT_MODULE_LOCALE);\n     }\n \n     private String getVariant(SlingHttpServletRequest request) {\n-        return paramValue(request, \"variant\", ModuleVariant.DEFAULT_VARIANT_NAME);\n+        return paramValue(request, \"variant\", DocumentVariant.DEFAULT_VARIANT_NAME);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6250ccd62f56d2b55f4425ad652e169d182cf779"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTE4Nw==", "bodyText": "For the record, the same method appears in UnpublishVersion.java as well.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r473275187", "createdAt": "2020-08-19T19:41:18Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -60,16 +63,16 @@ public PublishDraftVersion(@Reference Events events,\n         this.serviceResourceResolverProvider = serviceResourceResolverProvider;\n     }\n \n-    private Module getModule(SlingHttpServletRequest request) {\n-        return request.getResource().adaptTo(Module.class);\n+    private Document getDocument(SlingHttpServletRequest request) {\n+        return request.getResource().adaptTo(Document.class);\n     }\n \n     private Locale getLocale(SlingHttpServletRequest request) {\n         return paramValueAsLocale(request, \"locale\", GlobalConfig.DEFAULT_MODULE_LOCALE);\n     }\n \n     private String getVariant(SlingHttpServletRequest request) {\n-        return paramValue(request, \"variant\", ModuleVariant.DEFAULT_VARIANT_NAME);\n+        return paramValue(request, \"variant\", DocumentVariant.DEFAULT_VARIANT_NAME);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2OTgyMg=="}, "originalCommit": {"oid": "6250ccd62f56d2b55f4425ad652e169d182cf779"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczOTE3OA==", "bodyText": "@benradey since this logic appears at multiple files, I would say let's table it till MS3 is done. Creating a JIRA to track this is what I would suggest and lets discuss the options there. Discussing it here would need updating the JIRA and that would be a overhead. Just my two cents.", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r473739178", "createdAt": "2020-08-20T08:05:32Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -60,16 +63,16 @@ public PublishDraftVersion(@Reference Events events,\n         this.serviceResourceResolverProvider = serviceResourceResolverProvider;\n     }\n \n-    private Module getModule(SlingHttpServletRequest request) {\n-        return request.getResource().adaptTo(Module.class);\n+    private Document getDocument(SlingHttpServletRequest request) {\n+        return request.getResource().adaptTo(Document.class);\n     }\n \n     private Locale getLocale(SlingHttpServletRequest request) {\n         return paramValueAsLocale(request, \"locale\", GlobalConfig.DEFAULT_MODULE_LOCALE);\n     }\n \n     private String getVariant(SlingHttpServletRequest request) {\n-        return paramValue(request, \"variant\", ModuleVariant.DEFAULT_VARIANT_NAME);\n+        return paramValue(request, \"variant\", DocumentVariant.DEFAULT_VARIANT_NAME);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2OTgyMg=="}, "originalCommit": {"oid": "6250ccd62f56d2b55f4425ad652e169d182cf779"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAzNjg1Mg==", "bodyText": "@benradey  please check my comment above", "url": "https://github.com/redhataccess/pantheon/pull/369#discussion_r474036852", "createdAt": "2020-08-20T14:42:37Z", "author": {"login": "rednitish"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/PublishDraftVersion.java", "diffHunk": "@@ -60,16 +63,16 @@ public PublishDraftVersion(@Reference Events events,\n         this.serviceResourceResolverProvider = serviceResourceResolverProvider;\n     }\n \n-    private Module getModule(SlingHttpServletRequest request) {\n-        return request.getResource().adaptTo(Module.class);\n+    private Document getDocument(SlingHttpServletRequest request) {\n+        return request.getResource().adaptTo(Document.class);\n     }\n \n     private Locale getLocale(SlingHttpServletRequest request) {\n         return paramValueAsLocale(request, \"locale\", GlobalConfig.DEFAULT_MODULE_LOCALE);\n     }\n \n     private String getVariant(SlingHttpServletRequest request) {\n-        return paramValue(request, \"variant\", ModuleVariant.DEFAULT_VARIANT_NAME);\n+        return paramValue(request, \"variant\", DocumentVariant.DEFAULT_VARIANT_NAME);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2OTgyMg=="}, "originalCommit": {"oid": "6250ccd62f56d2b55f4425ad652e169d182cf779"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 176, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}