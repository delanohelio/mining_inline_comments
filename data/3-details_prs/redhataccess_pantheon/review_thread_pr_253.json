{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDg4NTM4", "number": 253, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1MDo1MVrODpHkaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo0ODowNlrODqkTGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQyMjE3OnYy", "diffSide": "RIGHT", "path": "uploader/pantheon.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzo1MDo1MVrOF4F1Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozMToyNlrOF4PtGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MDA4Ng==", "bodyText": "Is camel-casing the right standard for yaml files?\nAlso, are you envisioning this as an attributes' file for the whole repository? or just modules? If the latter, I would consider naming this something like moduleAttributesFile", "url": "https://github.com/redhataccess/pantheon/pull/253#discussion_r394360086", "createdAt": "2020-03-18T13:50:51Z", "author": {"login": "carlosmunoz"}, "path": "uploader/pantheon.py", "diffHunk": "@@ -108,6 +123,7 @@ def _print_response(filetype, path, response_code, reason):\n \n server: http://localhost:8080\n repository: pantheonSampleRepo\n+attributeFile: path/to/attribute.adoc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a84a1337a5087d36f9f808a3db7e8cdf1c6cc9f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NDI0Mw==", "bodyText": "camelCase is the right standard for everything. :)", "url": "https://github.com/redhataccess/pantheon/pull/253#discussion_r394454243", "createdAt": "2020-03-18T15:53:47Z", "author": {"login": "benradey"}, "path": "uploader/pantheon.py", "diffHunk": "@@ -108,6 +123,7 @@ def _print_response(filetype, path, response_code, reason):\n \n server: http://localhost:8080\n repository: pantheonSampleRepo\n+attributeFile: path/to/attribute.adoc", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MDA4Ng=="}, "originalCommit": {"oid": "9a84a1337a5087d36f9f808a3db7e8cdf1c6cc9f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxODc5MQ==", "bodyText": "kubernetes use camelCase:\nhttps://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\nansible uses snake_case:\nhttps://github.com/ansible/ansible-examples/blob/master/lamp_simple/site.yml", "url": "https://github.com/redhataccess/pantheon/pull/253#discussion_r394518791", "createdAt": "2020-03-18T17:26:51Z", "author": {"login": "xdavidson"}, "path": "uploader/pantheon.py", "diffHunk": "@@ -108,6 +123,7 @@ def _print_response(filetype, path, response_code, reason):\n \n server: http://localhost:8080\n repository: pantheonSampleRepo\n+attributeFile: path/to/attribute.adoc", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MDA4Ng=="}, "originalCommit": {"oid": "9a84a1337a5087d36f9f808a3db7e8cdf1c6cc9f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMTg4Mw==", "bodyText": "@carlosmunoz i'm envisioning it as an attribute fiel for the whole repository.", "url": "https://github.com/redhataccess/pantheon/pull/253#discussion_r394521883", "createdAt": "2020-03-18T17:31:26Z", "author": {"login": "xdavidson"}, "path": "uploader/pantheon.py", "diffHunk": "@@ -108,6 +123,7 @@ def _print_response(filetype, path, response_code, reason):\n \n server: http://localhost:8080\n repository: pantheonSampleRepo\n+attributeFile: path/to/attribute.adoc", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MDA4Ng=="}, "originalCommit": {"oid": "9a84a1337a5087d36f9f808a3db7e8cdf1c6cc9f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDk4MjAzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/resources/SLING-INF/nodetypes/nodetypes.cnd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1MjozM1rOF4Lg3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyODo0OFrOF4Pmcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MzIxNQ==", "bodyText": "I asked earlier in our QA call but I'll ask here so it's recorded - why is creating this new type necessary?", "url": "https://github.com/redhataccess/pantheon/pull/253#discussion_r394453215", "createdAt": "2020-03-18T15:52:33Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/resources/SLING-INF/nodetypes/nodetypes.cnd", "diffHunk": "@@ -57,6 +57,8 @@\n [pant:symlink] > nt:unstructured\n     - sling:resourceType (string) = 'pantheon/symlink' mandatory autocreated\n \n+[pant:bucket] > nt:unstructured, mix:created, mix:lastModified\n+    - sling:resourceType (string) = 'pantheon/bucket' mandatory autocreated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a84a1337a5087d36f9f808a3db7e8cdf1c6cc9f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMDE3OA==", "bodyText": "The node defines with this new type has a special purpose. for instance, it's a repository level node. It may contain a standaloneAttributeFile for the repository.", "url": "https://github.com/redhataccess/pantheon/pull/253#discussion_r394520178", "createdAt": "2020-03-18T17:28:48Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/resources/SLING-INF/nodetypes/nodetypes.cnd", "diffHunk": "@@ -57,6 +57,8 @@\n [pant:symlink] > nt:unstructured\n     - sling:resourceType (string) = 'pantheon/symlink' mandatory autocreated\n \n+[pant:bucket] > nt:unstructured, mix:created, mix:lastModified\n+    - sling:resourceType (string) = 'pantheon/bucket' mandatory autocreated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MzIxNQ=="}, "originalCommit": {"oid": "9a84a1337a5087d36f9f808a3db7e8cdf1c6cc9f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDk5NDcyOnYy", "diffSide": "RIGHT", "path": "uploader/pantheon.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1NDo1OFrOF4Losw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozMDo0M1rOF4PrTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NTIxOQ==", "bodyText": "Is this part of some doc syntax that I'm not familiar with? Otherwise, it looks like these lines are unnecessary, since you describe the method above.", "url": "https://github.com/redhataccess/pantheon/pull/253#discussion_r394455219", "createdAt": "2020-03-18T15:54:58Z", "author": {"login": "benradey"}, "path": "uploader/pantheon.py", "diffHunk": "@@ -180,6 +197,9 @@ def process_file(path, filetype):\n \n     Returns:\n     list: It returns a list with value of the API call status_code and reason\n+    :param path:\n+    :param filetype:\n+    :return:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a84a1337a5087d36f9f808a3db7e8cdf1c6cc9f"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMTQyMA==", "bodyText": "those were generated by my editor. i will move those", "url": "https://github.com/redhataccess/pantheon/pull/253#discussion_r394521420", "createdAt": "2020-03-18T17:30:43Z", "author": {"login": "xdavidson"}, "path": "uploader/pantheon.py", "diffHunk": "@@ -180,6 +197,9 @@ def process_file(path, filetype):\n \n     Returns:\n     list: It returns a list with value of the API call status_code and reason\n+    :param path:\n+    :param filetype:\n+    :return:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NTIxOQ=="}, "originalCommit": {"oid": "9a84a1337a5087d36f9f808a3db7e8cdf1c6cc9f"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTYxNDk3OnYy", "diffSide": "RIGHT", "path": "uploader/pantheon.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo0ODowNlrOF6ZV0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTo0ODowNlrOF6ZV0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3NjkxNA==", "bodyText": "Since process_workspace is the method that creates the pant:workspace jcr node, this should run regardless of the presence of any attributeFile.", "url": "https://github.com/redhataccess/pantheon/pull/253#discussion_r396776914", "createdAt": "2020-03-23T21:48:06Z", "author": {"login": "benradey"}, "path": "uploader/pantheon.py", "diffHunk": "@@ -325,27 +354,58 @@ def processRegexMatches(files, globs, filetype):\n     sys.exit('server ' + server + ' is not reachable')\n \n _info('Using server: ' + server)\n-_info('Using ' + mode + ': ' + repository)\n-print('--------------')\n-\n-moduleGlobs = readYamlGlob(config, 'modules')\n-resourceGlobs = readYamlGlob(config, 'resources')\n-non_resource_files = []\n-logger.debug('moduleGlobs: %s', moduleGlobs)\n-logger.debug('resourceGlobs: %s', resourceGlobs)\n-logger.debug('args.directory: %s', args.directory)\n-\n-# List all files in the directory\n-allFiles = []\n-listdir_recursive(args.directory, allFiles)\n-\n-processRegexMatches(allFiles, resourceGlobs, 'resources')\n-processRegexMatches(allFiles, moduleGlobs, 'modules')\n-\n-leftoverFiles = len(allFiles)\n-if leftoverFiles > 0:\n-    _warn(f'{leftoverFiles} additional files detected but not uploaded. Only files specified in '\n-          + CONFIG_FILE\n-          + ' are handled for upload.')\n+\n+if len(config.keys()) > 0 and 'repositories' in config:\n+    for repo_list in config['repositories']:\n+        repository = resolveOption(args.repository, '', repo_list['name'])\n+        # Enforce a repository being set in the pantheon.yml\n+        if repository == \"\" and mode == 'repository':\n+            sys.exit('repository is not set')\n+\n+        mode = 'sandbox' if args.sandbox else 'repository'\n+        # override repository if sandbox is chosen (sandbox name is the user name)\n+        if args.sandbox:\n+            repository = args.user\n+\n+        if 'attributes' in repo_list:\n+            attributeFile = resolveOption(args.attrFile, '', repo_list['attributes'])\n+        else:\n+            attributeFile = resolveOption(args.attrFile, '', '')\n+\n+        if attributeFile and not os.path.isfile(attributeFile.strip()):\n+            sys.exit('attributes: ' + attributeFile + ' does not exist.')\n+\n+        _info('Using ' + mode + ': ' + repository)\n+        _info('Using attributes: ' + attributeFile)\n+        print('--------------')\n+\n+        if attributeFile:\n+            process_workspace(repository)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14eb808731335b35bbeb43ba50348908473e1c92"}, "originalPosition": 234}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 248, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}