{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTQzMjkz", "number": 362, "title": "CCS-3661: Json API for assembly", "bodyText": "This PR adds:\n\nURL for assembly data\nResponse for assembly data identified by assembly uuid and variant\n\nSample response has been attached to the corresponding JIRA ticket.", "createdAt": "2020-08-06T10:39:00Z", "url": "https://github.com/redhataccess/pantheon/pull/362", "merged": true, "mergeCommit": {"oid": "e672d87df1f7f221367aa06fa45daca1f23289ca"}, "closed": true, "closedAt": "2020-08-06T15:21:38Z", "author": {"login": "aprajshekhar"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8OMzyAH2gAyNDYzOTQzMjkzOjhjNWMxNTk1MzNhN2YzNzcwYmRhNmNiYmI2NDZiMTZiZWYxZGJlZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8RZFBgFqTQ2MjYyMDE1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8c5c159533a7f3770bda6cbbb646b16bef1dbed5", "author": {"user": {"login": "aprajshekhar", "name": "A.P.Rajshekhar"}}, "url": "https://github.com/redhataccess/pantheon/commit/8c5c159533a7f3770bda6cbbb646b16bef1dbed5", "committedDate": "2020-08-06T11:34:12Z", "message": "CCS-3661: Json API for assembly"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3df048d59d9fce51fdd026d9ec58edfbfa20175", "author": {"user": {"login": "aprajshekhar", "name": "A.P.Rajshekhar"}}, "url": "https://github.com/redhataccess/pantheon/commit/b3df048d59d9fce51fdd026d9ec58edfbfa20175", "committedDate": "2020-08-06T10:34:04Z", "message": "CCS-3661: Json API for assembly"}, "afterCommit": {"oid": "8c5c159533a7f3770bda6cbbb646b16bef1dbed5", "author": {"user": {"login": "aprajshekhar", "name": "A.P.Rajshekhar"}}, "url": "https://github.com/redhataccess/pantheon/commit/8c5c159533a7f3770bda6cbbb646b16bef1dbed5", "committedDate": "2020-08-06T11:34:12Z", "message": "CCS-3661: Json API for assembly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNTQyNTQw", "url": "https://github.com/redhataccess/pantheon/pull/362#pullrequestreview-462542540", "createdAt": "2020-08-06T13:55:26Z", "commit": {"oid": "8c5c159533a7f3770bda6cbbb646b16bef1dbed5"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzo1NToyNlrOG80p5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDowNjo1NVrOG81JaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzMDQzOQ==", "bodyText": "we should replace 'module' with 'assembly'.", "url": "https://github.com/redhataccess/pantheon/pull/362#discussion_r466430439", "createdAt": "2020-08-06T13:55:26Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyJsonServlet.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.redhat.pantheon.html.Html;\n+import com.redhat.pantheon.model.ProductVersion;\n+import com.redhat.pantheon.model.api.FileResource;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyMetadata;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.servlet.AbstractJsonSingleQueryServlet;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import java.util.*;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.assembly.AssemblyVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+/**\n+ * Get operation to render a Released Assembly data in JSON format.\n+ * Only two parameters are expected in the Get request:\n+ * 1. locale - Optional; indicates the locale that the assembly content is in, defaulted to en-US\n+ * 2. assembly_id - indicates the uuid string which uniquely identifies an assembly\n+ *\n+ * The url to GET a request from the server is /api/module\n+ * Example: <server_url>/api/assembly?locale=en-us&module_id=xyz&variant=abc\n+ * The said url is accessible outside of the system without any authentication.\n+ *\n+ * @author A.P. Rajjshekhar\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and assembly uuid to output module data\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5c159533a7f3770bda6cbbb646b16bef1dbed5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzMDk1MA==", "bodyText": "line 50 should be updated with assembly path.", "url": "https://github.com/redhataccess/pantheon/pull/362#discussion_r466430950", "createdAt": "2020-08-06T13:56:11Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyJsonServlet.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.redhat.pantheon.html.Html;\n+import com.redhat.pantheon.model.ProductVersion;\n+import com.redhat.pantheon.model.api.FileResource;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyMetadata;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.servlet.AbstractJsonSingleQueryServlet;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import java.util.*;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.assembly.AssemblyVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+/**\n+ * Get operation to render a Released Assembly data in JSON format.\n+ * Only two parameters are expected in the Get request:\n+ * 1. locale - Optional; indicates the locale that the assembly content is in, defaulted to en-US\n+ * 2. assembly_id - indicates the uuid string which uniquely identifies an assembly\n+ *\n+ * The url to GET a request from the server is /api/module\n+ * Example: <server_url>/api/assembly?locale=en-us&module_id=xyz&variant=abc\n+ * The said url is accessible outside of the system without any authentication.\n+ *\n+ * @author A.P. Rajjshekhar\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and assembly uuid to output module data\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+// /api/module.json?module_id=${moduleUuid}&locale=${localeId}&variant=${variantName}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5c159533a7f3770bda6cbbb646b16bef1dbed5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNDk4OQ==", "bodyText": "can we rename module_uuid to assembly_uuid?", "url": "https://github.com/redhataccess/pantheon/pull/362#discussion_r466434989", "createdAt": "2020-08-06T14:01:46Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyJsonServlet.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.redhat.pantheon.html.Html;\n+import com.redhat.pantheon.model.ProductVersion;\n+import com.redhat.pantheon.model.api.FileResource;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyMetadata;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.servlet.AbstractJsonSingleQueryServlet;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import java.util.*;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.assembly.AssemblyVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+/**\n+ * Get operation to render a Released Assembly data in JSON format.\n+ * Only two parameters are expected in the Get request:\n+ * 1. locale - Optional; indicates the locale that the assembly content is in, defaulted to en-US\n+ * 2. assembly_id - indicates the uuid string which uniquely identifies an assembly\n+ *\n+ * The url to GET a request from the server is /api/module\n+ * Example: <server_url>/api/assembly?locale=en-us&module_id=xyz&variant=abc\n+ * The said url is accessible outside of the system without any authentication.\n+ *\n+ * @author A.P. Rajjshekhar\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and assembly uuid to output module data\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+// /api/module.json?module_id=${moduleUuid}&locale=${localeId}&variant=${variantName}\";\n+@SlingServletPaths(value = \"/api/assembly\")\n+public class AssemblyJsonServlet extends AbstractJsonSingleQueryServlet {\n+    public static final String PRODUCT_VERSION = \"product_version\";\n+    public static final String PRODUCT_NAME = \"product_name\";\n+    public static final String PRODUCT_LINK = \"product_link\";\n+    public static final String VANITY_URL_FRAGMENT = \"vanity_url_fragment\";\n+    public static final String SEARCH_KEYWORDS = \"search_keywords\";\n+    public static final String VIEW_URI = \"view_uri\";\n+    public static final String PORTAL_URL = \"PORTAL_URL\";\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyJsonServlet.class);\n+\n+    @Override\n+    protected String getQuery(SlingHttpServletRequest request) {\n+        // Get the query parameter(s)\n+        String uuidParam = paramValue(request, \"assembly_id\", \"\");\n+\n+        StringBuilder query = new StringBuilder(\"select * from [pant:assembly] as assembly WHERE assembly.[jcr:uuid] = '\")\n+                .append(uuidParam)\n+                .append(\"'\");\n+        return query.toString();\n+    }\n+\n+    @Override\n+    protected boolean isValidResource(@Nonnull SlingHttpServletRequest request, @Nonnull Resource resource) {\n+        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n+        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n+        Assembly assembly = resource.adaptTo(Assembly.class);\n+        Optional<AssemblyVersion> releasedRevision = assembly.getReleasedVersion(locale, variantName);\n+        return releasedRevision.isPresent();\n+    }\n+\n+    //ToDo: Refactor map based to builder pattern based POJO backed response entity\n+    @Override\n+    protected Map<String, Object> resourceToMap(@Nonnull SlingHttpServletRequest request,\n+                                                @NotNull Resource resource) throws RepositoryException {\n+        Assembly assembly = resource.adaptTo(Assembly.class);\n+\n+        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n+        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n+        Optional<AssemblyMetadata> releasedMetadata = assembly.getReleasedMetadata(locale, variantName);\n+        Optional<FileResource> releasedContent = assembly.getReleasedContent(locale, variantName);\n+        Optional<AssemblyVersion> releasedRevision = assembly.getReleasedVersion(locale, variantName);\n+\n+        Map<String, Object> assemblyMap = super.resourceToMap(request, resource);\n+        Map<String, Object> assemblyDetails = new HashMap<>();\n+\n+        assemblyDetails.put(\"status\", SC_OK);\n+        assemblyDetails.put(\"message\", \"Assembly Found\");\n+\n+        String resourcePath = resource.getPath();\n+        assemblyMap.put(\"locale\", ServletUtils.toLanguageTag(locale));\n+        assemblyMap.put(\"revision_id\", releasedRevision.get().getName());\n+        assemblyMap.put(\"title\", releasedMetadata.get().title().get());\n+        assemblyMap.put(\"headline\", releasedMetadata.get().getValueMap().containsKey(\"pant:headline\") ? releasedMetadata.get().headline().get() : \"\");\n+        //assemblyMap.put(\"description\", releasedMetadata.get().description().get());\n+        assemblyMap.put(\"content_type\", \"assembly\");\n+        assemblyMap.put(\"date_published\", releasedMetadata.get().getValueMap().containsKey(\"pant:datePublished\") ? releasedMetadata.get().datePublished().get().toInstant().toString() : \"\");\n+        assemblyMap.put(\"status\", \"published\");\n+\n+        // Assume the path is something like: /content/<something>/my/resource/path\n+        assemblyMap.put(\"assembly_url_fragment\", resourcePath.substring(\"/content/repositories/\".length()));\n+\n+        // Striping out the jcr: from key name\n+        String module_uuid = (String) assemblyMap.remove(\"jcr:uuid\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5c159533a7f3770bda6cbbb646b16bef1dbed5"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNTMwMQ==", "bodyText": "same as above", "url": "https://github.com/redhataccess/pantheon/pull/362#discussion_r466435301", "createdAt": "2020-08-06T14:02:15Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyJsonServlet.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.redhat.pantheon.html.Html;\n+import com.redhat.pantheon.model.ProductVersion;\n+import com.redhat.pantheon.model.api.FileResource;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyMetadata;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.servlet.AbstractJsonSingleQueryServlet;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import java.util.*;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.assembly.AssemblyVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+/**\n+ * Get operation to render a Released Assembly data in JSON format.\n+ * Only two parameters are expected in the Get request:\n+ * 1. locale - Optional; indicates the locale that the assembly content is in, defaulted to en-US\n+ * 2. assembly_id - indicates the uuid string which uniquely identifies an assembly\n+ *\n+ * The url to GET a request from the server is /api/module\n+ * Example: <server_url>/api/assembly?locale=en-us&module_id=xyz&variant=abc\n+ * The said url is accessible outside of the system without any authentication.\n+ *\n+ * @author A.P. Rajjshekhar\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and assembly uuid to output module data\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+// /api/module.json?module_id=${moduleUuid}&locale=${localeId}&variant=${variantName}\";\n+@SlingServletPaths(value = \"/api/assembly\")\n+public class AssemblyJsonServlet extends AbstractJsonSingleQueryServlet {\n+    public static final String PRODUCT_VERSION = \"product_version\";\n+    public static final String PRODUCT_NAME = \"product_name\";\n+    public static final String PRODUCT_LINK = \"product_link\";\n+    public static final String VANITY_URL_FRAGMENT = \"vanity_url_fragment\";\n+    public static final String SEARCH_KEYWORDS = \"search_keywords\";\n+    public static final String VIEW_URI = \"view_uri\";\n+    public static final String PORTAL_URL = \"PORTAL_URL\";\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyJsonServlet.class);\n+\n+    @Override\n+    protected String getQuery(SlingHttpServletRequest request) {\n+        // Get the query parameter(s)\n+        String uuidParam = paramValue(request, \"assembly_id\", \"\");\n+\n+        StringBuilder query = new StringBuilder(\"select * from [pant:assembly] as assembly WHERE assembly.[jcr:uuid] = '\")\n+                .append(uuidParam)\n+                .append(\"'\");\n+        return query.toString();\n+    }\n+\n+    @Override\n+    protected boolean isValidResource(@Nonnull SlingHttpServletRequest request, @Nonnull Resource resource) {\n+        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n+        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n+        Assembly assembly = resource.adaptTo(Assembly.class);\n+        Optional<AssemblyVersion> releasedRevision = assembly.getReleasedVersion(locale, variantName);\n+        return releasedRevision.isPresent();\n+    }\n+\n+    //ToDo: Refactor map based to builder pattern based POJO backed response entity\n+    @Override\n+    protected Map<String, Object> resourceToMap(@Nonnull SlingHttpServletRequest request,\n+                                                @NotNull Resource resource) throws RepositoryException {\n+        Assembly assembly = resource.adaptTo(Assembly.class);\n+\n+        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n+        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n+        Optional<AssemblyMetadata> releasedMetadata = assembly.getReleasedMetadata(locale, variantName);\n+        Optional<FileResource> releasedContent = assembly.getReleasedContent(locale, variantName);\n+        Optional<AssemblyVersion> releasedRevision = assembly.getReleasedVersion(locale, variantName);\n+\n+        Map<String, Object> assemblyMap = super.resourceToMap(request, resource);\n+        Map<String, Object> assemblyDetails = new HashMap<>();\n+\n+        assemblyDetails.put(\"status\", SC_OK);\n+        assemblyDetails.put(\"message\", \"Assembly Found\");\n+\n+        String resourcePath = resource.getPath();\n+        assemblyMap.put(\"locale\", ServletUtils.toLanguageTag(locale));\n+        assemblyMap.put(\"revision_id\", releasedRevision.get().getName());\n+        assemblyMap.put(\"title\", releasedMetadata.get().title().get());\n+        assemblyMap.put(\"headline\", releasedMetadata.get().getValueMap().containsKey(\"pant:headline\") ? releasedMetadata.get().headline().get() : \"\");\n+        //assemblyMap.put(\"description\", releasedMetadata.get().description().get());\n+        assemblyMap.put(\"content_type\", \"assembly\");\n+        assemblyMap.put(\"date_published\", releasedMetadata.get().getValueMap().containsKey(\"pant:datePublished\") ? releasedMetadata.get().datePublished().get().toInstant().toString() : \"\");\n+        assemblyMap.put(\"status\", \"published\");\n+\n+        // Assume the path is something like: /content/<something>/my/resource/path\n+        assemblyMap.put(\"assembly_url_fragment\", resourcePath.substring(\"/content/repositories/\".length()));\n+\n+        // Striping out the jcr: from key name\n+        String module_uuid = (String) assemblyMap.remove(\"jcr:uuid\");\n+        assemblyMap.put(\"assembly_uuid\", module_uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5c159533a7f3770bda6cbbb646b16bef1dbed5"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNTgwNg==", "bodyText": "please replace \"module\" with \"assembly\"", "url": "https://github.com/redhataccess/pantheon/pull/362#discussion_r466435806", "createdAt": "2020-08-06T14:03:02Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyJsonServlet.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.redhat.pantheon.html.Html;\n+import com.redhat.pantheon.model.ProductVersion;\n+import com.redhat.pantheon.model.api.FileResource;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyMetadata;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.servlet.AbstractJsonSingleQueryServlet;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import java.util.*;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.assembly.AssemblyVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+/**\n+ * Get operation to render a Released Assembly data in JSON format.\n+ * Only two parameters are expected in the Get request:\n+ * 1. locale - Optional; indicates the locale that the assembly content is in, defaulted to en-US\n+ * 2. assembly_id - indicates the uuid string which uniquely identifies an assembly\n+ *\n+ * The url to GET a request from the server is /api/module\n+ * Example: <server_url>/api/assembly?locale=en-us&module_id=xyz&variant=abc\n+ * The said url is accessible outside of the system without any authentication.\n+ *\n+ * @author A.P. Rajjshekhar\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and assembly uuid to output module data\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+// /api/module.json?module_id=${moduleUuid}&locale=${localeId}&variant=${variantName}\";\n+@SlingServletPaths(value = \"/api/assembly\")\n+public class AssemblyJsonServlet extends AbstractJsonSingleQueryServlet {\n+    public static final String PRODUCT_VERSION = \"product_version\";\n+    public static final String PRODUCT_NAME = \"product_name\";\n+    public static final String PRODUCT_LINK = \"product_link\";\n+    public static final String VANITY_URL_FRAGMENT = \"vanity_url_fragment\";\n+    public static final String SEARCH_KEYWORDS = \"search_keywords\";\n+    public static final String VIEW_URI = \"view_uri\";\n+    public static final String PORTAL_URL = \"PORTAL_URL\";\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyJsonServlet.class);\n+\n+    @Override\n+    protected String getQuery(SlingHttpServletRequest request) {\n+        // Get the query parameter(s)\n+        String uuidParam = paramValue(request, \"assembly_id\", \"\");\n+\n+        StringBuilder query = new StringBuilder(\"select * from [pant:assembly] as assembly WHERE assembly.[jcr:uuid] = '\")\n+                .append(uuidParam)\n+                .append(\"'\");\n+        return query.toString();\n+    }\n+\n+    @Override\n+    protected boolean isValidResource(@Nonnull SlingHttpServletRequest request, @Nonnull Resource resource) {\n+        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n+        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n+        Assembly assembly = resource.adaptTo(Assembly.class);\n+        Optional<AssemblyVersion> releasedRevision = assembly.getReleasedVersion(locale, variantName);\n+        return releasedRevision.isPresent();\n+    }\n+\n+    //ToDo: Refactor map based to builder pattern based POJO backed response entity\n+    @Override\n+    protected Map<String, Object> resourceToMap(@Nonnull SlingHttpServletRequest request,\n+                                                @NotNull Resource resource) throws RepositoryException {\n+        Assembly assembly = resource.adaptTo(Assembly.class);\n+\n+        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n+        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n+        Optional<AssemblyMetadata> releasedMetadata = assembly.getReleasedMetadata(locale, variantName);\n+        Optional<FileResource> releasedContent = assembly.getReleasedContent(locale, variantName);\n+        Optional<AssemblyVersion> releasedRevision = assembly.getReleasedVersion(locale, variantName);\n+\n+        Map<String, Object> assemblyMap = super.resourceToMap(request, resource);\n+        Map<String, Object> assemblyDetails = new HashMap<>();\n+\n+        assemblyDetails.put(\"status\", SC_OK);\n+        assemblyDetails.put(\"message\", \"Assembly Found\");\n+\n+        String resourcePath = resource.getPath();\n+        assemblyMap.put(\"locale\", ServletUtils.toLanguageTag(locale));\n+        assemblyMap.put(\"revision_id\", releasedRevision.get().getName());\n+        assemblyMap.put(\"title\", releasedMetadata.get().title().get());\n+        assemblyMap.put(\"headline\", releasedMetadata.get().getValueMap().containsKey(\"pant:headline\") ? releasedMetadata.get().headline().get() : \"\");\n+        //assemblyMap.put(\"description\", releasedMetadata.get().description().get());\n+        assemblyMap.put(\"content_type\", \"assembly\");\n+        assemblyMap.put(\"date_published\", releasedMetadata.get().getValueMap().containsKey(\"pant:datePublished\") ? releasedMetadata.get().datePublished().get().toInstant().toString() : \"\");\n+        assemblyMap.put(\"status\", \"published\");\n+\n+        // Assume the path is something like: /content/<something>/my/resource/path\n+        assemblyMap.put(\"assembly_url_fragment\", resourcePath.substring(\"/content/repositories/\".length()));\n+\n+        // Striping out the jcr: from key name\n+        String module_uuid = (String) assemblyMap.remove(\"jcr:uuid\");\n+        assemblyMap.put(\"assembly_uuid\", module_uuid);\n+        // Convert date string to UTC\n+        Date dateModified = new Date(resource.getResourceMetadata().getModificationTime());\n+        assemblyMap.put(\"date_modified\", dateModified.toInstant().toString());\n+        // Return the body content of the module ONLY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5c159533a7f3770bda6cbbb646b16bef1dbed5"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzODUwNQ==", "bodyText": "please rename module_uuid to assembly_uuid", "url": "https://github.com/redhataccess/pantheon/pull/362#discussion_r466438505", "createdAt": "2020-08-06T14:06:55Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyJsonServlet.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.google.common.base.Charsets;\n+import com.redhat.pantheon.html.Html;\n+import com.redhat.pantheon.model.ProductVersion;\n+import com.redhat.pantheon.model.api.FileResource;\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.assembly.AssemblyMetadata;\n+import com.redhat.pantheon.model.assembly.AssemblyVersion;\n+import com.redhat.pantheon.servlet.AbstractJsonSingleQueryServlet;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import java.util.*;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.assembly.AssemblyVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+/**\n+ * Get operation to render a Released Assembly data in JSON format.\n+ * Only two parameters are expected in the Get request:\n+ * 1. locale - Optional; indicates the locale that the assembly content is in, defaulted to en-US\n+ * 2. assembly_id - indicates the uuid string which uniquely identifies an assembly\n+ *\n+ * The url to GET a request from the server is /api/module\n+ * Example: <server_url>/api/assembly?locale=en-us&module_id=xyz&variant=abc\n+ * The said url is accessible outside of the system without any authentication.\n+ *\n+ * @author A.P. Rajjshekhar\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and assembly uuid to output module data\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+// /api/module.json?module_id=${moduleUuid}&locale=${localeId}&variant=${variantName}\";\n+@SlingServletPaths(value = \"/api/assembly\")\n+public class AssemblyJsonServlet extends AbstractJsonSingleQueryServlet {\n+    public static final String PRODUCT_VERSION = \"product_version\";\n+    public static final String PRODUCT_NAME = \"product_name\";\n+    public static final String PRODUCT_LINK = \"product_link\";\n+    public static final String VANITY_URL_FRAGMENT = \"vanity_url_fragment\";\n+    public static final String SEARCH_KEYWORDS = \"search_keywords\";\n+    public static final String VIEW_URI = \"view_uri\";\n+    public static final String PORTAL_URL = \"PORTAL_URL\";\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyJsonServlet.class);\n+\n+    @Override\n+    protected String getQuery(SlingHttpServletRequest request) {\n+        // Get the query parameter(s)\n+        String uuidParam = paramValue(request, \"assembly_id\", \"\");\n+\n+        StringBuilder query = new StringBuilder(\"select * from [pant:assembly] as assembly WHERE assembly.[jcr:uuid] = '\")\n+                .append(uuidParam)\n+                .append(\"'\");\n+        return query.toString();\n+    }\n+\n+    @Override\n+    protected boolean isValidResource(@Nonnull SlingHttpServletRequest request, @Nonnull Resource resource) {\n+        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n+        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n+        Assembly assembly = resource.adaptTo(Assembly.class);\n+        Optional<AssemblyVersion> releasedRevision = assembly.getReleasedVersion(locale, variantName);\n+        return releasedRevision.isPresent();\n+    }\n+\n+    //ToDo: Refactor map based to builder pattern based POJO backed response entity\n+    @Override\n+    protected Map<String, Object> resourceToMap(@Nonnull SlingHttpServletRequest request,\n+                                                @NotNull Resource resource) throws RepositoryException {\n+        Assembly assembly = resource.adaptTo(Assembly.class);\n+\n+        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n+        String variantName = paramValue(request, \"variant\", DEFAULT_VARIANT_NAME);\n+        Optional<AssemblyMetadata> releasedMetadata = assembly.getReleasedMetadata(locale, variantName);\n+        Optional<FileResource> releasedContent = assembly.getReleasedContent(locale, variantName);\n+        Optional<AssemblyVersion> releasedRevision = assembly.getReleasedVersion(locale, variantName);\n+\n+        Map<String, Object> assemblyMap = super.resourceToMap(request, resource);\n+        Map<String, Object> assemblyDetails = new HashMap<>();\n+\n+        assemblyDetails.put(\"status\", SC_OK);\n+        assemblyDetails.put(\"message\", \"Assembly Found\");\n+\n+        String resourcePath = resource.getPath();\n+        assemblyMap.put(\"locale\", ServletUtils.toLanguageTag(locale));\n+        assemblyMap.put(\"revision_id\", releasedRevision.get().getName());\n+        assemblyMap.put(\"title\", releasedMetadata.get().title().get());\n+        assemblyMap.put(\"headline\", releasedMetadata.get().getValueMap().containsKey(\"pant:headline\") ? releasedMetadata.get().headline().get() : \"\");\n+        //assemblyMap.put(\"description\", releasedMetadata.get().description().get());\n+        assemblyMap.put(\"content_type\", \"assembly\");\n+        assemblyMap.put(\"date_published\", releasedMetadata.get().getValueMap().containsKey(\"pant:datePublished\") ? releasedMetadata.get().datePublished().get().toInstant().toString() : \"\");\n+        assemblyMap.put(\"status\", \"published\");\n+\n+        // Assume the path is something like: /content/<something>/my/resource/path\n+        assemblyMap.put(\"assembly_url_fragment\", resourcePath.substring(\"/content/repositories/\".length()));\n+\n+        // Striping out the jcr: from key name\n+        String module_uuid = (String) assemblyMap.remove(\"jcr:uuid\");\n+        assemblyMap.put(\"assembly_uuid\", module_uuid);\n+        // Convert date string to UTC\n+        Date dateModified = new Date(resource.getResourceMetadata().getModificationTime());\n+        assemblyMap.put(\"date_modified\", dateModified.toInstant().toString());\n+        // Return the body content of the module ONLY\n+        assemblyMap.put(\"body\",\n+                Html.parse(Charsets.UTF_8.name())\n+                        .andThen(Html.getBody())\n+                        .apply(releasedContent.get().jcrContent().get().jcrData().get()));\n+\n+        // Fields that are part of the spec and yet to be implemented\n+        // TODO Should either of these be the variant name?\n+        assemblyMap.put(\"context_url_fragment\", \"\");\n+        assemblyMap.put(\"context_id\", \"\");\n+\n+        // Process productVersion from metadata\n+        // Making these arrays - in the future, we will have multi-product, so get the API right the first time\n+        List<Map> productList = new ArrayList<>();\n+        assemblyMap.put(\"products\", productList);\n+        ProductVersion pv = releasedMetadata.get().productVersion().getReference();\n+        if (pv != null) {\n+            Map<String, String> productMap = new HashMap<>();\n+            productList.add(productMap);\n+            productMap.put(PRODUCT_VERSION, pv.name().get());\n+            productMap.put(PRODUCT_NAME, pv.getProduct().name().get());\n+            productMap.put(PRODUCT_LINK, \"https://www.redhat.com/productlinkplaceholder\");\n+        }\n+\n+        // Process url_fragment from metadata\n+        String urlFragment = releasedMetadata.get().urlFragment().get() != null ? releasedMetadata.get().urlFragment().get() : \"\";\n+        if (!urlFragment.isEmpty()) {\n+            assemblyMap.put(VANITY_URL_FRAGMENT, urlFragment);\n+        }\n+        else {\n+            assemblyMap.put(VANITY_URL_FRAGMENT, \"\");\n+        }\n+\n+        String searchKeywords = releasedMetadata.get().searchKeywords().get();\n+        if (searchKeywords != null && !searchKeywords.isEmpty()) {\n+            assemblyMap.put(SEARCH_KEYWORDS, searchKeywords.split(\", *\"));\n+        }\n+        else {\n+            assemblyMap.put(SEARCH_KEYWORDS, new String[] {});\n+        }\n+\n+        // Process view_uri\n+        if (System.getenv(PORTAL_URL) != null) {\n+            String view_uri = System.getenv(PORTAL_URL) + \"/topics/\" + ServletUtils.toLanguageTag(locale) + \"/\" + module_uuid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5c159533a7f3770bda6cbbb646b16bef1dbed5"}, "originalPosition": 163}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd2e6c454588be1e57edf3485c01aaaeefb18778", "author": {"user": {"login": "aprajshekhar", "name": "A.P.Rajshekhar"}}, "url": "https://github.com/redhataccess/pantheon/commit/bd2e6c454588be1e57edf3485c01aaaeefb18778", "committedDate": "2020-08-06T14:22:10Z", "message": "CCS-3661: Json API for assembly. Code review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNTc2ODA4", "url": "https://github.com/redhataccess/pantheon/pull/362#pullrequestreview-462576808", "createdAt": "2020-08-06T14:31:23Z", "commit": {"oid": "bd2e6c454588be1e57edf3485c01aaaeefb18778"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDozMToyM1rOG82OcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDozMToyM1rOG82OcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1NjE3Nw==", "bodyText": "i wonder if we should call it something more generic so that both module api and assembly api can share the same name. Hydra team maps this field to id field in solr. The fact is this is assembly_id not module_id. Both are uuid of a node. we could call it \"uuid\", which will make the mapping more straightforward for hydra team.", "url": "https://github.com/redhataccess/pantheon/pull/362#discussion_r466456177", "createdAt": "2020-08-06T14:31:23Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/assembly/AssemblyJsonServletTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.redhat.pantheon.servlet.assembly;\n+\n+import com.redhat.pantheon.model.assembly.Assembly;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import com.redhat.pantheon.servlet.assembly.AssemblyJsonServlet;\n+import com.redhat.pantheon.servlet.module.ModuleJsonServlet;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledIf;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import javax.jcr.RepositoryException;\n+import javax.jcr.query.Query;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static com.google.common.collect.Maps.newHashMap;\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+@ExtendWith({SlingContextExtension.class})\n+class AssemblyJsonServletTest {\n+\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+    String testHTML = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head><title>test title</title></head> <body \" +\n+            \"class=\\\"article\\\"><h1>test title</h1> </header> </body> </html>\";\n+\n+    @Test\n+    void getQueryNoParams() {\n+        // Given\n+        AssemblyJsonServlet servlet = new AssemblyJsonServlet();\n+\n+        // When\n+        String query = servlet.getQuery(slingContext.request());\n+\n+        // Then\n+        // make sure queries don't throw exceptions when executed against the JCR repository\n+        assertDoesNotThrow(() -> slingContext.resourceResolver().queryResources(query, Query.JCR_SQL2));\n+    }\n+\n+    @Test\n+    void getQuery() {\n+        // Given\n+        AssemblyJsonServlet servlet = new AssemblyJsonServlet();\n+        Map<String, Object> map = newHashMap();\n+        map.put(\"locale\", ServletUtils.toLanguageTag(Locale.US));\n+        map.put(\"module_id\", \"jcr:uuid\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd2e6c454588be1e57edf3485c01aaaeefb18778"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41f485ab7dc3cdc503e458f5f46194e18eab590b", "author": {"user": {"login": "aprajshekhar", "name": "A.P.Rajshekhar"}}, "url": "https://github.com/redhataccess/pantheon/commit/41f485ab7dc3cdc503e458f5f46194e18eab590b", "committedDate": "2020-08-06T15:10:37Z", "message": "CCS-3661: Json API for assembly. Code review changes import opimizations for test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjIwMTUx", "url": "https://github.com/redhataccess/pantheon/pull/362#pullrequestreview-462620151", "createdAt": "2020-08-06T15:17:19Z", "commit": {"oid": "41f485ab7dc3cdc503e458f5f46194e18eab590b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1982, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}