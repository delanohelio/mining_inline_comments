{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTM5MTI5", "number": 371, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo1MDoyM1rOEaIEtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDowODowM1rOEaIaqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODMwNzEwOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo1MDoyM1rOHDWtdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo1MDoxNlrOHEO2vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTg2Mg==", "bodyText": "I wonder if we should change pantheon_module_id to something more generic? :pantheon_document_id?", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r473279862", "createdAt": "2020-08-19T19:50:23Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "diffHunk": "@@ -79,9 +79,13 @@ public void process(Document document, PreprocessorReader reader, String target,\n                         .toChild(FileResource::jcrContent)\n                         .toField(FileResource.JcrContent::jcrData)\n                         .get();\n-                content = new StringBuilder(\":pantheon_module_id: \")\n+                content = new StringBuilder()\n+                        .append(\":pantheon_module_id: \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72377fedd076442a6a11fdaf88436ef8be9c742e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4MDg5NQ==", "bodyText": "That's probably a solid idea but we'll have to bring @wesruv in to comment on that because it would have downstream impact.", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r473280895", "createdAt": "2020-08-19T19:52:18Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "diffHunk": "@@ -79,9 +79,13 @@ public void process(Document document, PreprocessorReader reader, String target,\n                         .toChild(FileResource::jcrContent)\n                         .toField(FileResource.JcrContent::jcrData)\n                         .get();\n-                content = new StringBuilder(\":pantheon_module_id: \")\n+                content = new StringBuilder()\n+                        .append(\":pantheon_module_id: \")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTg2Mg=="}, "originalCommit": {"oid": "72377fedd076442a6a11fdaf88436ef8be9c742e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NjY0Nw==", "bodyText": "I'm not picky, if it's not specific to modules, I'm for it. Better to get in now than later.", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r474066647", "createdAt": "2020-08-20T15:22:54Z", "author": {"login": "wesruv"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "diffHunk": "@@ -79,9 +79,13 @@ public void process(Document document, PreprocessorReader reader, String target,\n                         .toChild(FileResource::jcrContent)\n                         .toField(FileResource.JcrContent::jcrData)\n                         .get();\n-                content = new StringBuilder(\":pantheon_module_id: \")\n+                content = new StringBuilder()\n+                        .append(\":pantheon_module_id: \")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTg2Mg=="}, "originalCommit": {"oid": "72377fedd076442a6a11fdaf88436ef8be9c742e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5OTc0MA==", "bodyText": "Sorry! I don't know what I was thinking when I commented yesterday, but yes this is module-specific. So let's keep it as-is for now.\n(I saw \"for now\" because when we support assembly-of-assembly, that may change... or it may not... but we'll see when we get there.)", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r474199740", "createdAt": "2020-08-20T18:50:16Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "diffHunk": "@@ -79,9 +79,13 @@ public void process(Document document, PreprocessorReader reader, String target,\n                         .toChild(FileResource::jcrContent)\n                         .toField(FileResource.JcrContent::jcrData)\n                         .get();\n-                content = new StringBuilder(\":pantheon_module_id: \")\n+                content = new StringBuilder()\n+                        .append(\":pantheon_module_id: \")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTg2Mg=="}, "originalCommit": {"oid": "72377fedd076442a6a11fdaf88436ef8be9c742e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODMyNTU0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/XrefPreprocessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo1NTo1OVrOHDW5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo1ODoyNFrOHEPHjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4Mjg0Mg==", "bodyText": "if would be super if we can add some line wrap here to make it more readable :-)", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r473282842", "createdAt": "2020-08-19T19:55:59Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/XrefPreprocessor.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.redhat.pantheon.asciidoctor.extension;\n+\n+import com.redhat.pantheon.helper.PantheonConstants;\n+import com.redhat.pantheon.model.assembly.TableOfContents;\n+import com.redhat.pantheon.model.document.Document;\n+import com.redhat.pantheon.model.document.DocumentLocale;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.asciidoctor.extension.Preprocessor;\n+import org.asciidoctor.extension.PreprocessorReader;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class XrefPreprocessor extends Preprocessor {\n+\n+    private static final Logger log = LoggerFactory.getLogger(XrefPreprocessor.class);\n+\n+    private static final Pattern XREF_PATTERN = Pattern.compile(\"xref:(?<filepath>\\\\S*?)(?:#(?<anchor>\\\\S*))?\\\\[(?<label>.*?)\\\\]\");\n+    private static final Pattern TRIANGLE_PATTERN = Pattern.compile(\"<<(?<filepath>\\\\S*?)(?:#(?<anchor>\\\\S*))?,(?<label>.*?)>>\");\n+\n+    private DocumentVariant documentVariant;\n+    private TableOfContents toc;\n+    private Set<String> modulePaths = new HashSet<>();\n+\n+    /**\n+     * @param documentVariant\n+     * @param tableOfContents Doesn't necessarily need to be populated when this constructor is called.\n+     */\n+    public XrefPreprocessor(DocumentVariant documentVariant, TableOfContents tableOfContents) {\n+        this.documentVariant = documentVariant;\n+        this.toc = tableOfContents;\n+    }\n+\n+    @Override\n+    public void process(org.asciidoctor.ast.Document adocDocument, @NotNull PreprocessorReader reader) {\n+        reader.restoreLines(preprocess(reader.readLines()));\n+    }\n+\n+    private String processLineWithPattern(String line, Pattern pattern) {\n+        Matcher matcher = pattern.matcher(line);\n+        StringBuffer sb = new StringBuffer();\n+        while (matcher.find()) {\n+            String originalTarget = matcher.group(\"filepath\");\n+            // Assume it's a relative path to a file in the same repo for now\n+            Resource desiredTarget = documentVariant.getResourceResolver().getResource(documentVariant.getParentLocale().getParent().getParent().getPath() + \"/\" + originalTarget);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72377fedd076442a6a11fdaf88436ef8be9c742e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwNDA0Nw==", "bodyText": "Okie dokie, I broke up the line a bit with the latest commit.", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r474204047", "createdAt": "2020-08-20T18:58:24Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/XrefPreprocessor.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.redhat.pantheon.asciidoctor.extension;\n+\n+import com.redhat.pantheon.helper.PantheonConstants;\n+import com.redhat.pantheon.model.assembly.TableOfContents;\n+import com.redhat.pantheon.model.document.Document;\n+import com.redhat.pantheon.model.document.DocumentLocale;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.asciidoctor.extension.Preprocessor;\n+import org.asciidoctor.extension.PreprocessorReader;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class XrefPreprocessor extends Preprocessor {\n+\n+    private static final Logger log = LoggerFactory.getLogger(XrefPreprocessor.class);\n+\n+    private static final Pattern XREF_PATTERN = Pattern.compile(\"xref:(?<filepath>\\\\S*?)(?:#(?<anchor>\\\\S*))?\\\\[(?<label>.*?)\\\\]\");\n+    private static final Pattern TRIANGLE_PATTERN = Pattern.compile(\"<<(?<filepath>\\\\S*?)(?:#(?<anchor>\\\\S*))?,(?<label>.*?)>>\");\n+\n+    private DocumentVariant documentVariant;\n+    private TableOfContents toc;\n+    private Set<String> modulePaths = new HashSet<>();\n+\n+    /**\n+     * @param documentVariant\n+     * @param tableOfContents Doesn't necessarily need to be populated when this constructor is called.\n+     */\n+    public XrefPreprocessor(DocumentVariant documentVariant, TableOfContents tableOfContents) {\n+        this.documentVariant = documentVariant;\n+        this.toc = tableOfContents;\n+    }\n+\n+    @Override\n+    public void process(org.asciidoctor.ast.Document adocDocument, @NotNull PreprocessorReader reader) {\n+        reader.restoreLines(preprocess(reader.readLines()));\n+    }\n+\n+    private String processLineWithPattern(String line, Pattern pattern) {\n+        Matcher matcher = pattern.matcher(line);\n+        StringBuffer sb = new StringBuffer();\n+        while (matcher.find()) {\n+            String originalTarget = matcher.group(\"filepath\");\n+            // Assume it's a relative path to a file in the same repo for now\n+            Resource desiredTarget = documentVariant.getResourceResolver().getResource(documentVariant.getParentLocale().getParent().getParent().getPath() + \"/\" + originalTarget);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4Mjg0Mg=="}, "originalCommit": {"oid": "72377fedd076442a6a11fdaf88436ef8be9c742e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODM2MzI4OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/DocumentVariantRenderServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDowODowM1rOHDXQ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo1MjowMFrOHEO6dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4ODk1Mg==", "bodyText": "are those allowed values for RELEASED_SUFFICES?", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r473288952", "createdAt": "2020-08-19T20:08:03Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/DocumentVariantRenderServlet.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.helper.PantheonConstants;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+import com.redhat.pantheon.model.document.DocumentVersion;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single document variant.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletResourceTypes(\n+        resourceTypes = { \"pantheon/moduleVariant\", \"pantheon/assemblyVariant\" },\n+        methods = \"GET\",\n+        extensions = \"preview\")\n+public class DocumentVariantRenderServlet extends SlingSafeMethodsServlet {\n+\n+    private static final Set<String> RELEASED_SUFFIXES = new HashSet<>();\n+    static {\n+        RELEASED_SUFFIXES.add(\"/released\");\n+        RELEASED_SUFFIXES.add(\"/\");\n+        RELEASED_SUFFIXES.add(\"\");\n+        RELEASED_SUFFIXES.add(null);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72377fedd076442a6a11fdaf88436ef8be9c742e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwMDY5Mw==", "bodyText": "Yes, the idea here is that the suffix is optional. If you don't specify it, we assume you want the released version. This covers all the cases: [document, document/, document/released]", "url": "https://github.com/redhataccess/pantheon/pull/371#discussion_r474200693", "createdAt": "2020-08-20T18:52:00Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/DocumentVariantRenderServlet.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.helper.PantheonConstants;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+import com.redhat.pantheon.model.document.DocumentVersion;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single document variant.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletResourceTypes(\n+        resourceTypes = { \"pantheon/moduleVariant\", \"pantheon/assemblyVariant\" },\n+        methods = \"GET\",\n+        extensions = \"preview\")\n+public class DocumentVariantRenderServlet extends SlingSafeMethodsServlet {\n+\n+    private static final Set<String> RELEASED_SUFFIXES = new HashSet<>();\n+    static {\n+        RELEASED_SUFFIXES.add(\"/released\");\n+        RELEASED_SUFFIXES.add(\"/\");\n+        RELEASED_SUFFIXES.add(\"\");\n+        RELEASED_SUFFIXES.add(null);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4ODk1Mg=="}, "originalCommit": {"oid": "72377fedd076442a6a11fdaf88436ef8be9c742e"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 179, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}