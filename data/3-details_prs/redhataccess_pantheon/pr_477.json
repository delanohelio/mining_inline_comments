{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NTgwMDY5", "number": 477, "title": "Ccs 3510 back button bug fix", "bodyText": "We now have the ability to press the back button from Product Details to return to Product Listings\n\nrefactored productDetails.tsx and productListing.tsx so they are now functional components\ncreated ProductContext so productDetails.tsx and productListing.tsx can access all product info", "createdAt": "2020-11-25T16:56:27Z", "url": "https://github.com/redhataccess/pantheon/pull/477", "merged": true, "mergeCommit": {"oid": "1383a6fd286d8afcadfb7aefe0db2456983eb09c"}, "closed": true, "closedAt": "2020-12-01T20:47:30Z", "author": {"login": "grantsydney"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeFuWfgH2gAyNTI3NTgwMDY5OmQyOTliODljZTIxNDJiMzgwNjJkOTZkOGZjNTQyMDEzOTRlMDYwNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiAJ4NgFqTU0MjI3ODY3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d299b89ce2142b38062d96d8fc54201394e06043", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/d299b89ce2142b38062d96d8fc54201394e06043", "committedDate": "2020-11-19T16:55:07Z", "message": "WIP-products-routes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e27699032cb8629370b20c9886e23a77355d40b1", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/e27699032cb8629370b20c9886e23a77355d40b1", "committedDate": "2020-11-25T16:45:08Z", "message": "WIP-products-routes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c6ff2c96e16be5b2fa50ba877e886d39115a53e", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/8c6ff2c96e16be5b2fa50ba877e886d39115a53e", "committedDate": "2020-11-25T16:45:08Z", "message": "CCS-3510-back-button-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6728bef53525f64f8f60defb28f8a769c320673d", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/6728bef53525f64f8f60defb28f8a769c320673d", "committedDate": "2020-11-25T16:50:31Z", "message": "CCS-3510: merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/f0d409ff0949f817150a40fe37be6495976dbd26", "committedDate": "2020-11-25T16:54:00Z", "message": "CCS-3510: remove extra file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Njk4MzQ4", "url": "https://github.com/redhataccess/pantheon/pull/477#pullrequestreview-538698348", "createdAt": "2020-11-25T17:03:54Z", "commit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMzo1NVrOH58nlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMzo1NVrOH58nlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNDA1NQ==", "bodyText": "ProductContext was created as a way to share allProducts between ProductDetails and ProductListing", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530524055", "createdAt": "2020-11-25T17:03:55Z", "author": {"login": "grantsydney"}, "path": "pantheon-bundle/frontend/src/app/contexts/ProductContext.tsx", "diffHunk": "@@ -0,0 +1,47 @@\n+import React, { createContext, useState, useEffect } from \"react\";\n+\n+export let ProductContext = createContext<IProduct[]>([] as IProduct[]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzAxNjIy", "url": "https://github.com/redhataccess/pantheon/pull/477#pullrequestreview-538701622", "createdAt": "2020-11-25T17:08:10Z", "commit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowODoxMFrOH58xtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzoxMDozOFrOH584EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNjY0Nw==", "bodyText": "I can has comment for function?\ne.g.\n/**\n * Does effects for things\n * @param [string] id Description on id\n */", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530526647", "createdAt": "2020-11-25T17:08:10Z", "author": {"login": "wesruv"}, "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "diffHunk": "@@ -1,188 +1,119 @@\n-import React, { Component } from \"react\";\n+import React, { useContext, useEffect, Component, useState } from \"react\";\n import {\n   DataList, DataListItem, DataListCell, DataListItemRow, DataListItemCells, DataListAction, FormGroup,\n   OptionsMenu, OptionsMenuItem, OptionsMenuToggle, TextInput\n } from \"@patternfly/react-core\";\n import \"@app/app.css\";\n-import { ProductDetails } from \"@app/productDetails\";\n import { CaretDownIcon } from \"@patternfly/react-icons\";\n+import { ProductContext, IProduct } from \"@app/contexts/ProductContext\"\n \n-class ProductListing extends Component<any, any, any> {\n+export default function ProductListing(props: any) {\n+  const allProducts = useContext(ProductContext);\n+  \n+  const [input, setInputField] = useState(\"\")\n+  const [filteredProducts, setFilteredProducts] = useState([] as IProduct[])\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      allProducts: [],\n-      input: \"\",\n-      isEmptyResults: false,\n-      isOpen: false,\n-      isProductDetails: false,\n-      productName: \"\",\n-      redirect: false,\n-      results: []\n-    };\n-  }\n-\n-  public componentDidMount() {\n-    if (this.props.match !== undefined) {\n-\n-      // prop will be true if it comes through nav links\n-      if (this.props.match.isExact === true) {\n-        this.state.results.map(data => {\n-          (data.isOpen as any) = false\n-        });\n-        this.setState({ isProductDetails: false })\n-      }\n-\n-      // setting prop to false once it comes through nav links\n-      this.props.match.isExact = false;\n-\n-    }\n-\n-    this.getProducts(this.state.allProducts)\n-  }\n-\n-  // render method transforms the react components into DOM nodes for the browser.\n-  public render() {\n-\n-\n-    return (\n-      <React.Fragment>\n-        {this.state.isProductDetails && (<ProductDetails productName={this.state.productName} />)}\n-        {!this.state.isProductDetails && (\n-          <div>\n-            <FormGroup\n-              label=\"Search Products\"\n-              fieldId=\"search\"\n-            >\n-              <div className=\"row-view\">\n-                <TextInput id=\"search\" type=\"text\" onChange={this.setInput} placeholder=\"Type product name to search\" value={this.state.input} />\n-              </div>\n-            </FormGroup>\n-            <DataList aria-label=\"single action data list example \">\n-              {!this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">Product Name</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-description\">Product Description</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-\n-              {!this.state.isEmptyResults && this.state.results.map(data => (\n-                <DataListItem aria-labelledby=\"multi-actions-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells key={data[\"jcr:uuid\"]}\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span id=\"{data.name}\">{data.name}</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>{data.description}</DataListCell>,\n-                        <DataListCell key=\"Dropdown content\">\n-                          <DataListAction\n-                            aria-labelledby=\"multi-actions-item1 {data['jcr:uuid']}\"\n-                            id=\"{data['jcr:uuid']}\"\n-                            aria-label=\"Actions\"\n-                          >\n-                            <OptionsMenu\n-                              isPlain={true}\n-                              id={data[\"jcr:uuid\"]}\n-                              menuItems={[\n-                                <OptionsMenuItem onSelect={this.onSelect(event, data)} key=\"dropdown\">Product Details</OptionsMenuItem>]}\n-                              isOpen={data.isOpen}\n-                              toggle={<OptionsMenuToggle onToggle={this.onToggle(data[\"jcr:uuid\"])} toggleTemplate={<CaretDownIcon aria-hidden=\"true\" />} aria-label=\"Sort by\" hideCaret={true} />} />\n-                          </DataListAction>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>))}\n-              {this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item0\" data-testid=\"emptyResults\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">No products found</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-            </DataList>\n-          </div>)}\n-      </React.Fragment>\n-    );\n-  }\n+  useEffect(() => {\n+    setFilteredProducts(allProducts)\n+  }, [allProducts])\n \n-  private getProducts = (allProducts) => {\n-    fetch(this.getProductsUrl())\n-      .then(response => response.json())\n-      .then(responseJSON => {\n-        let key; let singleProduct;\n-        for (const i of Object.keys(responseJSON.results)) {\n-          key = Object.keys(responseJSON.results)[i];\n-          singleProduct = responseJSON.results[key];\n-          singleProduct = Object.assign({ \"isOpen\": false }, singleProduct)\n-          allProducts.push(singleProduct)\n-        }\n-        this.setState({ results: allProducts })\n-      })\n-      .then(() => {\n-        if (Object.keys(this.state.results).length === 0) {\n-          this.setState({\n-            isEmptyResults: true\n-          });\n-        } else {\n-          this.setState({\n-            isEmptyResults: false\n-          });\n-        }\n-      })\n-  }\n-\n-  private getProductsUrl() {\n-    const backend = \"/content/products.query.json?nodeType=pant:product&orderby=name\"\n-    return backend\n-  }\n+  const onToggle = (id) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNjc0MQ==", "bodyText": "I can has comment for function?", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530526741", "createdAt": "2020-11-25T17:08:20Z", "author": {"login": "wesruv"}, "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "diffHunk": "@@ -1,188 +1,119 @@\n-import React, { Component } from \"react\";\n+import React, { useContext, useEffect, Component, useState } from \"react\";\n import {\n   DataList, DataListItem, DataListCell, DataListItemRow, DataListItemCells, DataListAction, FormGroup,\n   OptionsMenu, OptionsMenuItem, OptionsMenuToggle, TextInput\n } from \"@patternfly/react-core\";\n import \"@app/app.css\";\n-import { ProductDetails } from \"@app/productDetails\";\n import { CaretDownIcon } from \"@patternfly/react-icons\";\n+import { ProductContext, IProduct } from \"@app/contexts/ProductContext\"\n \n-class ProductListing extends Component<any, any, any> {\n+export default function ProductListing(props: any) {\n+  const allProducts = useContext(ProductContext);\n+  \n+  const [input, setInputField] = useState(\"\")\n+  const [filteredProducts, setFilteredProducts] = useState([] as IProduct[])\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      allProducts: [],\n-      input: \"\",\n-      isEmptyResults: false,\n-      isOpen: false,\n-      isProductDetails: false,\n-      productName: \"\",\n-      redirect: false,\n-      results: []\n-    };\n-  }\n-\n-  public componentDidMount() {\n-    if (this.props.match !== undefined) {\n-\n-      // prop will be true if it comes through nav links\n-      if (this.props.match.isExact === true) {\n-        this.state.results.map(data => {\n-          (data.isOpen as any) = false\n-        });\n-        this.setState({ isProductDetails: false })\n-      }\n-\n-      // setting prop to false once it comes through nav links\n-      this.props.match.isExact = false;\n-\n-    }\n-\n-    this.getProducts(this.state.allProducts)\n-  }\n-\n-  // render method transforms the react components into DOM nodes for the browser.\n-  public render() {\n-\n-\n-    return (\n-      <React.Fragment>\n-        {this.state.isProductDetails && (<ProductDetails productName={this.state.productName} />)}\n-        {!this.state.isProductDetails && (\n-          <div>\n-            <FormGroup\n-              label=\"Search Products\"\n-              fieldId=\"search\"\n-            >\n-              <div className=\"row-view\">\n-                <TextInput id=\"search\" type=\"text\" onChange={this.setInput} placeholder=\"Type product name to search\" value={this.state.input} />\n-              </div>\n-            </FormGroup>\n-            <DataList aria-label=\"single action data list example \">\n-              {!this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">Product Name</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-description\">Product Description</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-\n-              {!this.state.isEmptyResults && this.state.results.map(data => (\n-                <DataListItem aria-labelledby=\"multi-actions-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells key={data[\"jcr:uuid\"]}\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span id=\"{data.name}\">{data.name}</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>{data.description}</DataListCell>,\n-                        <DataListCell key=\"Dropdown content\">\n-                          <DataListAction\n-                            aria-labelledby=\"multi-actions-item1 {data['jcr:uuid']}\"\n-                            id=\"{data['jcr:uuid']}\"\n-                            aria-label=\"Actions\"\n-                          >\n-                            <OptionsMenu\n-                              isPlain={true}\n-                              id={data[\"jcr:uuid\"]}\n-                              menuItems={[\n-                                <OptionsMenuItem onSelect={this.onSelect(event, data)} key=\"dropdown\">Product Details</OptionsMenuItem>]}\n-                              isOpen={data.isOpen}\n-                              toggle={<OptionsMenuToggle onToggle={this.onToggle(data[\"jcr:uuid\"])} toggleTemplate={<CaretDownIcon aria-hidden=\"true\" />} aria-label=\"Sort by\" hideCaret={true} />} />\n-                          </DataListAction>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>))}\n-              {this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item0\" data-testid=\"emptyResults\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">No products found</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-            </DataList>\n-          </div>)}\n-      </React.Fragment>\n-    );\n-  }\n+  useEffect(() => {\n+    setFilteredProducts(allProducts)\n+  }, [allProducts])\n \n-  private getProducts = (allProducts) => {\n-    fetch(this.getProductsUrl())\n-      .then(response => response.json())\n-      .then(responseJSON => {\n-        let key; let singleProduct;\n-        for (const i of Object.keys(responseJSON.results)) {\n-          key = Object.keys(responseJSON.results)[i];\n-          singleProduct = responseJSON.results[key];\n-          singleProduct = Object.assign({ \"isOpen\": false }, singleProduct)\n-          allProducts.push(singleProduct)\n-        }\n-        this.setState({ results: allProducts })\n-      })\n-      .then(() => {\n-        if (Object.keys(this.state.results).length === 0) {\n-          this.setState({\n-            isEmptyResults: true\n-          });\n-        } else {\n-          this.setState({\n-            isEmptyResults: false\n-          });\n-        }\n-      })\n-  }\n-\n-  private getProductsUrl() {\n-    const backend = \"/content/products.query.json?nodeType=pant:product&orderby=name\"\n-    return backend\n-  }\n+  const onToggle = (id) => {\n+    updateProduct(id);\n+  };\n \n-  private onToggle = (id) => (event: any) => {\n-    this.state.results.map(data => {\n-      if (data[\"jcr:uuid\"] === id) {\n-        (data.isOpen as any) = !data.isOpen\n-        this.setState({ isProductDetails: false })\n-      }\n-    });\n+  const onSelect = (id) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNjgxMA==", "bodyText": "I can has comment for function?", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530526810", "createdAt": "2020-11-25T17:08:26Z", "author": {"login": "wesruv"}, "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "diffHunk": "@@ -1,188 +1,119 @@\n-import React, { Component } from \"react\";\n+import React, { useContext, useEffect, Component, useState } from \"react\";\n import {\n   DataList, DataListItem, DataListCell, DataListItemRow, DataListItemCells, DataListAction, FormGroup,\n   OptionsMenu, OptionsMenuItem, OptionsMenuToggle, TextInput\n } from \"@patternfly/react-core\";\n import \"@app/app.css\";\n-import { ProductDetails } from \"@app/productDetails\";\n import { CaretDownIcon } from \"@patternfly/react-icons\";\n+import { ProductContext, IProduct } from \"@app/contexts/ProductContext\"\n \n-class ProductListing extends Component<any, any, any> {\n+export default function ProductListing(props: any) {\n+  const allProducts = useContext(ProductContext);\n+  \n+  const [input, setInputField] = useState(\"\")\n+  const [filteredProducts, setFilteredProducts] = useState([] as IProduct[])\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      allProducts: [],\n-      input: \"\",\n-      isEmptyResults: false,\n-      isOpen: false,\n-      isProductDetails: false,\n-      productName: \"\",\n-      redirect: false,\n-      results: []\n-    };\n-  }\n-\n-  public componentDidMount() {\n-    if (this.props.match !== undefined) {\n-\n-      // prop will be true if it comes through nav links\n-      if (this.props.match.isExact === true) {\n-        this.state.results.map(data => {\n-          (data.isOpen as any) = false\n-        });\n-        this.setState({ isProductDetails: false })\n-      }\n-\n-      // setting prop to false once it comes through nav links\n-      this.props.match.isExact = false;\n-\n-    }\n-\n-    this.getProducts(this.state.allProducts)\n-  }\n-\n-  // render method transforms the react components into DOM nodes for the browser.\n-  public render() {\n-\n-\n-    return (\n-      <React.Fragment>\n-        {this.state.isProductDetails && (<ProductDetails productName={this.state.productName} />)}\n-        {!this.state.isProductDetails && (\n-          <div>\n-            <FormGroup\n-              label=\"Search Products\"\n-              fieldId=\"search\"\n-            >\n-              <div className=\"row-view\">\n-                <TextInput id=\"search\" type=\"text\" onChange={this.setInput} placeholder=\"Type product name to search\" value={this.state.input} />\n-              </div>\n-            </FormGroup>\n-            <DataList aria-label=\"single action data list example \">\n-              {!this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">Product Name</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-description\">Product Description</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-\n-              {!this.state.isEmptyResults && this.state.results.map(data => (\n-                <DataListItem aria-labelledby=\"multi-actions-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells key={data[\"jcr:uuid\"]}\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span id=\"{data.name}\">{data.name}</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>{data.description}</DataListCell>,\n-                        <DataListCell key=\"Dropdown content\">\n-                          <DataListAction\n-                            aria-labelledby=\"multi-actions-item1 {data['jcr:uuid']}\"\n-                            id=\"{data['jcr:uuid']}\"\n-                            aria-label=\"Actions\"\n-                          >\n-                            <OptionsMenu\n-                              isPlain={true}\n-                              id={data[\"jcr:uuid\"]}\n-                              menuItems={[\n-                                <OptionsMenuItem onSelect={this.onSelect(event, data)} key=\"dropdown\">Product Details</OptionsMenuItem>]}\n-                              isOpen={data.isOpen}\n-                              toggle={<OptionsMenuToggle onToggle={this.onToggle(data[\"jcr:uuid\"])} toggleTemplate={<CaretDownIcon aria-hidden=\"true\" />} aria-label=\"Sort by\" hideCaret={true} />} />\n-                          </DataListAction>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>))}\n-              {this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item0\" data-testid=\"emptyResults\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">No products found</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-            </DataList>\n-          </div>)}\n-      </React.Fragment>\n-    );\n-  }\n+  useEffect(() => {\n+    setFilteredProducts(allProducts)\n+  }, [allProducts])\n \n-  private getProducts = (allProducts) => {\n-    fetch(this.getProductsUrl())\n-      .then(response => response.json())\n-      .then(responseJSON => {\n-        let key; let singleProduct;\n-        for (const i of Object.keys(responseJSON.results)) {\n-          key = Object.keys(responseJSON.results)[i];\n-          singleProduct = responseJSON.results[key];\n-          singleProduct = Object.assign({ \"isOpen\": false }, singleProduct)\n-          allProducts.push(singleProduct)\n-        }\n-        this.setState({ results: allProducts })\n-      })\n-      .then(() => {\n-        if (Object.keys(this.state.results).length === 0) {\n-          this.setState({\n-            isEmptyResults: true\n-          });\n-        } else {\n-          this.setState({\n-            isEmptyResults: false\n-          });\n-        }\n-      })\n-  }\n-\n-  private getProductsUrl() {\n-    const backend = \"/content/products.query.json?nodeType=pant:product&orderby=name\"\n-    return backend\n-  }\n+  const onToggle = (id) => {\n+    updateProduct(id);\n+  };\n \n-  private onToggle = (id) => (event: any) => {\n-    this.state.results.map(data => {\n-      if (data[\"jcr:uuid\"] === id) {\n-        (data.isOpen as any) = !data.isOpen\n-        this.setState({ isProductDetails: false })\n-      }\n-    });\n+  const onSelect = (id) => {\n+    // @ts-ignore\n+    window.location += `/${id}`;\n   };\n \n-  private onSelect = (event, data) => () => {\n-    this.setState({\n-      isProductDetails: !this.state.isProductDetails,\n-      productName: data.name,\n+  const setInput = (text, event) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyODI3Mw==", "bodyText": "I can has comment for function?", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530528273", "createdAt": "2020-11-25T17:10:38Z", "author": {"login": "wesruv"}, "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "diffHunk": "@@ -1,188 +1,119 @@\n-import React, { Component } from \"react\";\n+import React, { useContext, useEffect, Component, useState } from \"react\";\n import {\n   DataList, DataListItem, DataListCell, DataListItemRow, DataListItemCells, DataListAction, FormGroup,\n   OptionsMenu, OptionsMenuItem, OptionsMenuToggle, TextInput\n } from \"@patternfly/react-core\";\n import \"@app/app.css\";\n-import { ProductDetails } from \"@app/productDetails\";\n import { CaretDownIcon } from \"@patternfly/react-icons\";\n+import { ProductContext, IProduct } from \"@app/contexts/ProductContext\"\n \n-class ProductListing extends Component<any, any, any> {\n+export default function ProductListing(props: any) {\n+  const allProducts = useContext(ProductContext);\n+  \n+  const [input, setInputField] = useState(\"\")\n+  const [filteredProducts, setFilteredProducts] = useState([] as IProduct[])\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      allProducts: [],\n-      input: \"\",\n-      isEmptyResults: false,\n-      isOpen: false,\n-      isProductDetails: false,\n-      productName: \"\",\n-      redirect: false,\n-      results: []\n-    };\n-  }\n-\n-  public componentDidMount() {\n-    if (this.props.match !== undefined) {\n-\n-      // prop will be true if it comes through nav links\n-      if (this.props.match.isExact === true) {\n-        this.state.results.map(data => {\n-          (data.isOpen as any) = false\n-        });\n-        this.setState({ isProductDetails: false })\n-      }\n-\n-      // setting prop to false once it comes through nav links\n-      this.props.match.isExact = false;\n-\n-    }\n-\n-    this.getProducts(this.state.allProducts)\n-  }\n-\n-  // render method transforms the react components into DOM nodes for the browser.\n-  public render() {\n-\n-\n-    return (\n-      <React.Fragment>\n-        {this.state.isProductDetails && (<ProductDetails productName={this.state.productName} />)}\n-        {!this.state.isProductDetails && (\n-          <div>\n-            <FormGroup\n-              label=\"Search Products\"\n-              fieldId=\"search\"\n-            >\n-              <div className=\"row-view\">\n-                <TextInput id=\"search\" type=\"text\" onChange={this.setInput} placeholder=\"Type product name to search\" value={this.state.input} />\n-              </div>\n-            </FormGroup>\n-            <DataList aria-label=\"single action data list example \">\n-              {!this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">Product Name</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-description\">Product Description</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-\n-              {!this.state.isEmptyResults && this.state.results.map(data => (\n-                <DataListItem aria-labelledby=\"multi-actions-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells key={data[\"jcr:uuid\"]}\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span id=\"{data.name}\">{data.name}</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>{data.description}</DataListCell>,\n-                        <DataListCell key=\"Dropdown content\">\n-                          <DataListAction\n-                            aria-labelledby=\"multi-actions-item1 {data['jcr:uuid']}\"\n-                            id=\"{data['jcr:uuid']}\"\n-                            aria-label=\"Actions\"\n-                          >\n-                            <OptionsMenu\n-                              isPlain={true}\n-                              id={data[\"jcr:uuid\"]}\n-                              menuItems={[\n-                                <OptionsMenuItem onSelect={this.onSelect(event, data)} key=\"dropdown\">Product Details</OptionsMenuItem>]}\n-                              isOpen={data.isOpen}\n-                              toggle={<OptionsMenuToggle onToggle={this.onToggle(data[\"jcr:uuid\"])} toggleTemplate={<CaretDownIcon aria-hidden=\"true\" />} aria-label=\"Sort by\" hideCaret={true} />} />\n-                          </DataListAction>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>))}\n-              {this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item0\" data-testid=\"emptyResults\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">No products found</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-            </DataList>\n-          </div>)}\n-      </React.Fragment>\n-    );\n-  }\n+  useEffect(() => {\n+    setFilteredProducts(allProducts)\n+  }, [allProducts])\n \n-  private getProducts = (allProducts) => {\n-    fetch(this.getProductsUrl())\n-      .then(response => response.json())\n-      .then(responseJSON => {\n-        let key; let singleProduct;\n-        for (const i of Object.keys(responseJSON.results)) {\n-          key = Object.keys(responseJSON.results)[i];\n-          singleProduct = responseJSON.results[key];\n-          singleProduct = Object.assign({ \"isOpen\": false }, singleProduct)\n-          allProducts.push(singleProduct)\n-        }\n-        this.setState({ results: allProducts })\n-      })\n-      .then(() => {\n-        if (Object.keys(this.state.results).length === 0) {\n-          this.setState({\n-            isEmptyResults: true\n-          });\n-        } else {\n-          this.setState({\n-            isEmptyResults: false\n-          });\n-        }\n-      })\n-  }\n-\n-  private getProductsUrl() {\n-    const backend = \"/content/products.query.json?nodeType=pant:product&orderby=name\"\n-    return backend\n-  }\n+  const onToggle = (id) => {\n+    updateProduct(id);\n+  };\n \n-  private onToggle = (id) => (event: any) => {\n-    this.state.results.map(data => {\n-      if (data[\"jcr:uuid\"] === id) {\n-        (data.isOpen as any) = !data.isOpen\n-        this.setState({ isProductDetails: false })\n-      }\n-    });\n+  const onSelect = (id) => {\n+    // @ts-ignore\n+    window.location += `/${id}`;\n   };\n \n-  private onSelect = (event, data) => () => {\n-    this.setState({\n-      isProductDetails: !this.state.isProductDetails,\n-      productName: data.name,\n+  const setInput = (text, event) => {\n+    setInputField(text)\n+    const filteredProducts = allProducts.filter(product => {\n+      return product.name.toLowerCase().includes(text.toLowerCase())\n     });\n-  };\n+    setFilteredProducts(filteredProducts)\n+  }\n \n-  private setInput = input => {\n-    const versions: string[] = [];\n-    let searchString = \"\";\n-    this.setState({ input })\n-    this.state.allProducts.map(data => {\n-      searchString = \"\" + data.name\n-      if (searchString.toLowerCase().includes(input.toLowerCase())) {\n-        versions.push(data)\n+  function updateProduct(id: string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 204}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Nzg0MzQw", "url": "https://github.com/redhataccess/pantheon/pull/477#pullrequestreview-538784340", "createdAt": "2020-11-25T19:12:59Z", "commit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMjo1OVrOH6AxZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMjo1OVrOH6AxZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MjEwMQ==", "bodyText": "\"jcr:created\" is a type Date. e.g.\n\"jcr:created\": \"Mon Sep 28 2020 11:20:19 GMT+0000\",", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530592101", "createdAt": "2020-11-25T19:12:59Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/frontend/src/app/contexts/ProductContext.tsx", "diffHunk": "@@ -0,0 +1,47 @@\n+import React, { createContext, useState, useEffect } from \"react\";\n+\n+export let ProductContext = createContext<IProduct[]>([] as IProduct[]);\n+\n+export interface IProductProviderProps {\n+  children?: React.ReactNode;\n+}\n+\n+export interface IProduct {\n+  description: string,\n+  isOpen: boolean,\n+  [\"jcr:created\"]: number,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Nzg0ODUx", "url": "https://github.com/redhataccess/pantheon/pull/477#pullrequestreview-538784851", "createdAt": "2020-11-25T19:13:53Z", "commit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMzo1M1rOH6AzAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMzo1M1rOH6AzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MjUxNA==", "bodyText": "\"jcr:lastModified\" is a type Date. e.g\n\"jcr:lastModified\": \"Mon Sep 28 2020 11:20:19 GMT+0000\",", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530592514", "createdAt": "2020-11-25T19:13:53Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/frontend/src/app/contexts/ProductContext.tsx", "diffHunk": "@@ -0,0 +1,47 @@\n+import React, { createContext, useState, useEffect } from \"react\";\n+\n+export let ProductContext = createContext<IProduct[]>([] as IProduct[]);\n+\n+export interface IProductProviderProps {\n+  children?: React.ReactNode;\n+}\n+\n+export interface IProduct {\n+  description: string,\n+  isOpen: boolean,\n+  [\"jcr:created\"]: number,\n+  [\"jcr:createdBy\"]: string,\n+  ['jcr:lastModified']: number,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c4b1f87aa9174c4a5216a2dd701f3c920ac0d97", "author": {"user": {"login": "wesruv", "name": "wesruv"}}, "url": "https://github.com/redhataccess/pantheon/commit/3c4b1f87aa9174c4a5216a2dd701f3c920ac0d97", "committedDate": "2020-11-25T20:09:32Z", "message": "CCS-3817: Correcting access preprod urls (#478)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce1962db0dc16a3f70c213d6603dbcd603080b38", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/ce1962db0dc16a3f70c213d6603dbcd603080b38", "committedDate": "2020-11-25T21:04:19Z", "message": "add comments and switch product key types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fee2dba79d0e806bf5fe33c36c92900e5872364", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/5fee2dba79d0e806bf5fe33c36c92900e5872364", "committedDate": "2020-12-01T16:15:05Z", "message": "CCS-3915-product-creation-form-style-updates (#479)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8c806e49565e53e76346018c4f5957451ea8b2d", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/d8c806e49565e53e76346018c4f5957451ea8b2d", "committedDate": "2020-12-01T16:31:43Z", "message": "WIP-products-routes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "453de27569a3b0c726b12d01bca34c20be7af07b", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/453de27569a3b0c726b12d01bca34c20be7af07b", "committedDate": "2020-12-01T16:31:43Z", "message": "CCS-3510-back-button-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f76b10b17055292c606c0266e8a0a3fb29bb2f14", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/f76b10b17055292c606c0266e8a0a3fb29bb2f14", "committedDate": "2020-12-01T16:36:39Z", "message": "CCS-3510: remove extra file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "740be83a8ce21f553e9f744d564d613de7eb159e", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/740be83a8ce21f553e9f744d564d613de7eb159e", "committedDate": "2020-12-01T16:36:39Z", "message": "add comments and switch product key types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ec01a7c9bfddad7cbe1ff8c5b7d13d5e32fb3cf", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/5ec01a7c9bfddad7cbe1ff8c5b7d13d5e32fb3cf", "committedDate": "2020-12-01T18:47:10Z", "message": "add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b7010ea7fdfee12dabf6324115f6194077ec8fb", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/3b7010ea7fdfee12dabf6324115f6194077ec8fb", "committedDate": "2020-12-01T18:48:40Z", "message": "conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61b0a24b7da76817cdfbf0890a7a788950fd1cfe", "author": {"user": {"login": "grantsydney", "name": "Sydney Grant"}}, "url": "https://github.com/redhataccess/pantheon/commit/61b0a24b7da76817cdfbf0890a7a788950fd1cfe", "committedDate": "2020-12-01T19:50:39Z", "message": "import change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjc4Njcw", "url": "https://github.com/redhataccess/pantheon/pull/477#pullrequestreview-542278670", "createdAt": "2020-12-01T20:41:27Z", "commit": {"oid": "61b0a24b7da76817cdfbf0890a7a788950fd1cfe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1925, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}