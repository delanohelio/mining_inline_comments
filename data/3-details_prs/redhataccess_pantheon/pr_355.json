{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NDc2ODIw", "number": 355, "title": "improve management of resources during uploads", "bodyText": "a. Use InputStreams when dealing with content\nb. restore the checksum validation to prevent unnecesary load on the JCR repository if there are no changes", "createdAt": "2020-07-28T00:53:13Z", "url": "https://github.com/redhataccess/pantheon/pull/355", "merged": true, "mergeCommit": {"oid": "ed697438e03cc320eb4c68be5a36760c6d968032"}, "closed": true, "closedAt": "2020-07-29T19:23:44Z", "author": {"login": "carlosmunoz"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5Lm0HgH2gAyNDU3NDc2ODIwOjBmZjhjODhlNjg3ODU1NTgwMGE0ZGRjYjQ3Yzg3MDA0NzNjYmMwZjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5wFeFgFqTQ1NzgxODgzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0ff8c88e6878555800a4ddcb47c8700473cbc0f1", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/0ff8c88e6878555800a4ddcb47c8700473cbc0f1", "committedDate": "2020-07-28T00:51:07Z", "message": "improve management of resources during uploads\n\na. Use InputStreams when dealing with content\nb. restore the checksum validation to prevent unnecesary load on the JCR repository if there are no changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09daa02e61edf382fab6c0092e114ec72cffc2b9", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/09daa02e61edf382fab6c0092e114ec72cffc2b9", "committedDate": "2020-07-28T16:43:16Z", "message": "add a type-safe mechanism to cast fields to other types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5bf3b1c225cea477672e36579defa29d2faba22", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/d5bf3b1c225cea477672e36579defa29d2faba22", "committedDate": "2020-07-28T16:48:15Z", "message": "minor code improvement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2OTUxMDQ2", "url": "https://github.com/redhataccess/pantheon/pull/355#pullrequestreview-456951046", "createdAt": "2020-07-28T19:38:42Z", "commit": {"oid": "d5bf3b1c225cea477672e36579defa29d2faba22"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTozODo0MlrOG4bpKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTo0ODoyOFrOG4cIDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyNjM0Nw==", "bodyText": "This is interesting. I suppose this is to load the entire stream into memory as a prerequisite to hash. I'm curious if this would necessitate a call to Stream.reset() later or something?", "url": "https://github.com/redhataccess/pantheon/pull/355#discussion_r461826347", "createdAt": "2020-07-28T19:38:42Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/jcr/JcrResources.java", "diffHunk": "@@ -20,11 +23,24 @@ public static void rename(Resource resource, String newName) throws RepositoryEx\n         session.move(resource.getPath(), resource.getParent().getPath() + \"/\" + newName);\n     }\n \n-    /*\n-     * calculates a hash for a string\n+    /**\n+     * calculates a checksum hash for a string using the adler32 algorithm\n      *\n      */\n     public static HashCode hash(String str) {\n         return Hashing.adler32().hashString(str == null ? \"\" : str, Charsets.UTF_8);\n     }\n+\n+    /**\n+     * Calculates a checksum hash for the contents for an input stream usng the adler32 algorithm.\n+     * @param is The input stream. The stream is NOT closed after reading from it.\n+     * @return A {@link HashCode} for the contents of the given InputStream\n+     * @throws IOException If there is a problem accessing the contents of the InputStream\n+     */\n+    public static HashCode hash(InputStream is) throws IOException {\n+        try (HashingInputStream his = new HashingInputStream(Hashing.adler32(), is)) {\n+            while (his.read() != -1) ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5bf3b1c225cea477672e36579defa29d2faba22"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzMDQ2Mg==", "bodyText": "Interesting that you chose to leave asciidocContent as a String here, rather than reworking it to be an InputStream instead. Was that intentional?", "url": "https://github.com/redhataccess/pantheon/pull/355#discussion_r461830462", "createdAt": "2020-07-28T19:43:54Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/assembly/AssemblyVersionUpload.java", "diffHunk": "@@ -81,7 +82,7 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n                     .draft().getOrCreate();\n \n             // Check if the content is the same as what is hashed already\n-            HashCode incomingSrcHash = hash(asciidocContent);\n+            HashCode incomingSrcHash = JcrResources.hash(asciidocContent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5bf3b1c225cea477672e36579defa29d2faba22"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzNDI1NQ==", "bodyText": "Isn't this fancy! What's going on here? Is this a magic way to convert the Stream to a String so that it can be persisted in the jcr?\nAlso, are you sure this works? My concern is that the Stream has already been consumed by the hashing method, and nothing ever reset it?", "url": "https://github.com/redhataccess/pantheon/pull/355#discussion_r461834255", "createdAt": "2020-07-28T19:48:28Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/ModuleVersionUpload.java", "diffHunk": "@@ -106,14 +105,29 @@ protected void doRun(SlingHttpServletRequest request, PostResponse response, Lis\n                     .draft().getOrCreate();\n \n             // Check if the content is the same as what is hashed already\n-            HashCode incomingSrcHash = hash(asciidocContent);\n+            HashCode incomingSrcHash =\n+                ServletUtils.handleParamAsStream(request, \"asciidoc\",\n+                        inputStream -> {\n+                            try {\n+                                return JcrResources.hash(inputStream);\n+                            } catch (IOException e) {\n+                                throw new RuntimeException(e);\n+                            }\n+                        });\n             String storedSrcHash = draftSrc.hash().get();\n             // If the source content is the same, don't update it\n             if(incomingSrcHash.toString().equals( storedSrcHash )) {\n                 responseCode = HttpServletResponse.SC_NOT_MODIFIED;\n             } else {\n-                draftSrc.jcrContent().getOrCreate()\n-                        .jcrData().set(asciidocContent);\n+                ServletUtils.handleParamAsStream(request, \"asciidoc\", encoding,\n+                        inputStream -> {\n+                            Session session = resolver.adaptTo(Session.class);\n+                            draftSrc.jcrContent().getOrCreate()\n+                                    .jcrData().toFieldType(InputStream.class)\n+                                    .set(inputStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5bf3b1c225cea477672e36579defa29d2faba22"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODE4ODMy", "url": "https://github.com/redhataccess/pantheon/pull/355#pullrequestreview-457818832", "createdAt": "2020-07-29T19:21:11Z", "commit": {"oid": "d5bf3b1c225cea477672e36579defa29d2faba22"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1967, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}