{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTM2OTQ0", "number": 214, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjo0MTo0M1rODbDHEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjo0MTo0M1rODbDHEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njg5MTA2OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjo0MTo0M1rOFiUBOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzo0MDozMVrOFilSVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyMzg5OQ==", "bodyText": "We still have this inner join - is it worth eliminating? We could probably easily use deep attribute inspection here.", "url": "https://github.com/redhataccess/pantheon/pull/214#discussion_r371523899", "createdAt": "2020-01-27T22:41:43Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -148,10 +163,9 @@ protected String getQuery(SlingHttpServletRequest request) {\n         productCondition = \"AND (\" + StringUtils.join(conditions, \" OR \") + \") \";\n \n         StringBuilder query = new StringBuilder()\n-                .append(\"SELECT pv.* from [nt:base] AS pv \")\n-                .append(\"INNER JOIN [nt:base] AS product ON ISDESCENDANTNODE(pv, product) \")\n-                .append(\"WHERE pv.[jcr:primaryType] = 'pant:productVersion' \")\n-                .append(\"AND product.[jcr:primaryType] = 'pant:product' \")\n+                .append(\"SELECT pv.* from [pant:productVersion] AS pv \")\n+                .append(\"INNER JOIN [pant:product] AS product ON ISDESCENDANTNODE(pv, product) \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f53dfc4b55f6a7c1a8966da3583b767ed8aaa846"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4MjA4Mg==", "bodyText": "This one is trickier to turn into XPATH, as we are actually filtering on a parent node's properties from the child. A single join doesn't seem to be as costly also. In addition, this one is only being executed when the product filters are used, so any additional cost is limited to those scenarios.", "url": "https://github.com/redhataccess/pantheon/pull/214#discussion_r371582082", "createdAt": "2020-01-28T02:18:51Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -148,10 +163,9 @@ protected String getQuery(SlingHttpServletRequest request) {\n         productCondition = \"AND (\" + StringUtils.join(conditions, \" OR \") + \") \";\n \n         StringBuilder query = new StringBuilder()\n-                .append(\"SELECT pv.* from [nt:base] AS pv \")\n-                .append(\"INNER JOIN [nt:base] AS product ON ISDESCENDANTNODE(pv, product) \")\n-                .append(\"WHERE pv.[jcr:primaryType] = 'pant:productVersion' \")\n-                .append(\"AND product.[jcr:primaryType] = 'pant:product' \")\n+                .append(\"SELECT pv.* from [pant:productVersion] AS pv \")\n+                .append(\"INNER JOIN [pant:product] AS product ON ISDESCENDANTNODE(pv, product) \")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyMzg5OQ=="}, "originalCommit": {"oid": "f53dfc4b55f6a7c1a8966da3583b767ed8aaa846"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwNjgwNQ==", "bodyText": "Ooof. Good point. Alright, we can save this one for later/never.", "url": "https://github.com/redhataccess/pantheon/pull/214#discussion_r371806805", "createdAt": "2020-01-28T13:40:31Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -148,10 +163,9 @@ protected String getQuery(SlingHttpServletRequest request) {\n         productCondition = \"AND (\" + StringUtils.join(conditions, \" OR \") + \") \";\n \n         StringBuilder query = new StringBuilder()\n-                .append(\"SELECT pv.* from [nt:base] AS pv \")\n-                .append(\"INNER JOIN [nt:base] AS product ON ISDESCENDANTNODE(pv, product) \")\n-                .append(\"WHERE pv.[jcr:primaryType] = 'pant:productVersion' \")\n-                .append(\"AND product.[jcr:primaryType] = 'pant:product' \")\n+                .append(\"SELECT pv.* from [pant:productVersion] AS pv \")\n+                .append(\"INNER JOIN [pant:product] AS product ON ISDESCENDANTNODE(pv, product) \")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyMzg5OQ=="}, "originalCommit": {"oid": "f53dfc4b55f6a7c1a8966da3583b767ed8aaa846"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 349, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}