{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODAxMTY0", "number": 467, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTozODozNVrOE5pUgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTo1ODozMlrOE5pxEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODgxMjgwOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentMetadata.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTozODozNVrOH0OceA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOToyMjoyNlrOH1-YyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyNDY2NA==", "bodyText": "what's the difference between pant:datePublished and pant:dateFirstPublished?", "url": "https://github.com/redhataccess/pantheon/pull/467#discussion_r524524664", "createdAt": "2020-11-16T19:38:35Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentMetadata.java", "diffHunk": "@@ -37,6 +37,9 @@\n     @Named(\"pant:datePublished\")\n     Field<Calendar> datePublished();\n \n+    @Named(\"pant:dateFirstPublished\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1713183d40a47b6dc1d5c5b8031576f2a224a24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NDkxNg==", "bodyText": "Great question. datePublished is specific to that particular version and is not carried forward to any new versions. dateFirstPublished is populated only once, on first-ever publish only, and then carried forward from version to version.", "url": "https://github.com/redhataccess/pantheon/pull/467#discussion_r525644916", "createdAt": "2020-11-18T01:58:06Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentMetadata.java", "diffHunk": "@@ -37,6 +37,9 @@\n     @Named(\"pant:datePublished\")\n     Field<Calendar> datePublished();\n \n+    @Named(\"pant:dateFirstPublished\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyNDY2NA=="}, "originalCommit": {"oid": "d1713183d40a47b6dc1d5c5b8031576f2a224a24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIxMjAwNw==", "bodyText": "Thank you for the info! how are we going to handle the modules/assemblies published in prod today that don't have pant:dateFirstPublished?", "url": "https://github.com/redhataccess/pantheon/pull/467#discussion_r526212007", "createdAt": "2020-11-18T16:09:37Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentMetadata.java", "diffHunk": "@@ -37,6 +37,9 @@\n     @Named(\"pant:datePublished\")\n     Field<Calendar> datePublished();\n \n+    @Named(\"pant:dateFirstPublished\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyNDY2NA=="}, "originalCommit": {"oid": "d1713183d40a47b6dc1d5c5b8031576f2a224a24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1ODcyOA==", "bodyText": "Another good question. :)\nI have the logic set up in AsciidoctorService.java:258 so that the 'datePublished' value is used for both the \"updated\" and \"published\" injected attributes. Then immediately after that, if the 'firstPublished' value exists, it overwrites the \"published\" injected attribute.\nSo all of our docs today will rely on the fallback logic. Over time it will become less necessary, but the bottom line is that today's docs will be handled as best as possible with what we have.", "url": "https://github.com/redhataccess/pantheon/pull/467#discussion_r526358728", "createdAt": "2020-11-18T19:22:26Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentMetadata.java", "diffHunk": "@@ -37,6 +37,9 @@\n     @Named(\"pant:datePublished\")\n     Field<Calendar> datePublished();\n \n+    @Named(\"pant:dateFirstPublished\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyNDY2NA=="}, "originalCommit": {"oid": "d1713183d40a47b6dc1d5c5b8031576f2a224a24"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODg4NTk0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/util/VersionUploadOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTo1ODozMlrOH0PIqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMTo1ODo1N1rOH1S1WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzNTk3OQ==", "bodyText": "should we consider the following two to be added to this list?\n\"pant:headline\"\n\"pant:abstract\"", "url": "https://github.com/redhataccess/pantheon/pull/467#discussion_r524535979", "createdAt": "2020-11-16T19:58:32Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/util/VersionUploadOperation.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.redhat.pantheon.servlet.util;\n+\n+import com.google.common.hash.HashCode;\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.conf.GlobalConfig;\n+import com.redhat.pantheon.jcr.JcrResources;\n+import com.redhat.pantheon.model.HashableFileResource;\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.document.Document;\n+import com.redhat.pantheon.model.document.DocumentLocale;\n+import com.redhat.pantheon.model.document.DocumentMetadata;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.ModifiableValueMap;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.servlets.post.AbstractPostOperation;\n+import org.apache.sling.servlets.post.PostResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.Session;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public abstract class VersionUploadOperation extends AbstractPostOperation {\n+\n+    private static final Logger log = LoggerFactory.getLogger(VersionUploadOperation.class);\n+\n+    private static final Set<String> METADATA_COPY_EXCLUDES = Collections.unmodifiableSet(\n+            new HashSet<>(\n+                    Arrays.asList(\n+                            \"jcr:description\",\n+                            \"jcr:lastModified\",\n+                            \"jcr:primaryType\",\n+                            \"jcr:title\",\n+                            \"pant:dateUploaded\",\n+                            \"pant:datePublished\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1713183d40a47b6dc1d5c5b8031576f2a224a24"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NTE0NA==", "bodyText": "Probably! If those are both populated automatically from the doc, then it doesn't make sense to carry them forward.", "url": "https://github.com/redhataccess/pantheon/pull/467#discussion_r525645144", "createdAt": "2020-11-18T01:58:57Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/util/VersionUploadOperation.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.redhat.pantheon.servlet.util;\n+\n+import com.google.common.hash.HashCode;\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.conf.GlobalConfig;\n+import com.redhat.pantheon.jcr.JcrResources;\n+import com.redhat.pantheon.model.HashableFileResource;\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.document.Document;\n+import com.redhat.pantheon.model.document.DocumentLocale;\n+import com.redhat.pantheon.model.document.DocumentMetadata;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.ModifiableValueMap;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.servlets.post.AbstractPostOperation;\n+import org.apache.sling.servlets.post.PostResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.Session;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public abstract class VersionUploadOperation extends AbstractPostOperation {\n+\n+    private static final Logger log = LoggerFactory.getLogger(VersionUploadOperation.class);\n+\n+    private static final Set<String> METADATA_COPY_EXCLUDES = Collections.unmodifiableSet(\n+            new HashSet<>(\n+                    Arrays.asList(\n+                            \"jcr:description\",\n+                            \"jcr:lastModified\",\n+                            \"jcr:primaryType\",\n+                            \"jcr:title\",\n+                            \"pant:dateUploaded\",\n+                            \"pant:datePublished\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzNTk3OQ=="}, "originalCommit": {"oid": "d1713183d40a47b6dc1d5c5b8031576f2a224a24"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 112, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}