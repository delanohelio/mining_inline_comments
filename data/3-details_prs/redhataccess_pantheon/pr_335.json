{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MDU3NDc4", "number": 335, "title": "Adding Document classes that Module classes now extend", "bodyText": "Also refactoring some of the code to use the new Document classes where appropriate.", "createdAt": "2020-07-09T19:43:11Z", "url": "https://github.com/redhataccess/pantheon/pull/335", "merged": true, "mergeCommit": {"oid": "27dab4069dc5bbf4aceb2b65490b17389c61646e"}, "closed": true, "closedAt": "2020-07-20T19:16:44Z", "author": {"login": "benradey"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczT7tVAH2gAyNDQ3MDU3NDc4OjU1YmJlOWUyMzc1Yzk2MzQzN2MyODhlOTA5ZDE1NTUxY2Y0ZWE5NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc22amLgFqTQ1MTg3ODU4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "55bbe9e2375c963437c288e909d15551cf4ea974", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/55bbe9e2375c963437c288e909d15551cf4ea974", "committedDate": "2020-07-09T19:09:38Z", "message": "sling servlet suffix utility (#307)\n\nAdd a utility for dealing with Sling path suffixes. In this revision the utility allows for template-based extraction of path parameters, enabling building complex, non-static API paths."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58763ff683c78685d430dfc990626531ff70a209", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/58763ff683c78685d430dfc990626531ff70a209", "committedDate": "2020-07-09T19:13:38Z", "message": "Assembly changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83d5e4a9a6b5496ed661e213dc6e2e1849f11a32", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/83d5e4a9a6b5496ed661e213dc6e2e1849f11a32", "committedDate": "2020-07-09T19:13:43Z", "message": " (CCS-3230) Single page assembly preview Assembly Changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63cdfb02d3a4eaacee555e3b0f6a9cf7bf996dab", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/63cdfb02d3a4eaacee555e3b0f6a9cf7bf996dab", "committedDate": "2020-07-09T19:13:43Z", "message": " Assembly / module rendering independent classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dc45407ba91f7ddd62f3170ffd5aac4684cc367", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/0dc45407ba91f7ddd62f3170ffd5aac4684cc367", "committedDate": "2020-07-09T19:18:25Z", "message": " Assembly / module rendering independent classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd4f1f18eac04d0a5e8abdd088bf3b2be9fe899f", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/fd4f1f18eac04d0a5e8abdd088bf3b2be9fe899f", "committedDate": "2020-07-09T19:19:12Z", "message": "quick and dirty copy of module search, appears to function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e700264a247aa2b36bd695e81d28701dec7cec4", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/1e700264a247aa2b36bd695e81d28701dec7cec4", "committedDate": "2020-07-09T19:19:13Z", "message": "Tweaking module query to return modules and assemblies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08f46f5401f433b8938f83d5cf6a47f894e84464", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/08f46f5401f433b8938f83d5cf6a47f894e84464", "committedDate": "2020-07-09T19:19:31Z", "message": "Revert \"quick and dirty copy of module search, appears to function\"\n\nThis reverts commit ce8c366ec0f154704f59bd15883f90e22f50baf2."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "927ccf06340b604ab0a380fe461497c0def9e478", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/927ccf06340b604ab0a380fe461497c0def9e478", "committedDate": "2020-07-09T19:19:53Z", "message": "Re-fixed servlets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51b2701f86eb498195e5e1532af879146e44b6f1", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/51b2701f86eb498195e5e1532af879146e44b6f1", "committedDate": "2020-07-09T19:19:55Z", "message": "Hijacking module type column for assemblies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13241350737f9484bedcfd8e176c5ce6b47d254c", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/13241350737f9484bedcfd8e176c5ce6b47d254c", "committedDate": "2020-07-09T19:19:55Z", "message": "basic injection of module uuid for haml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c188d608ca2a259259386d765b9c7b3166cfbfc", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/8c188d608ca2a259259386d765b9c7b3166cfbfc", "committedDate": "2020-07-09T19:20:44Z", "message": "Broken project but showing potential"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d26491565ec8bc6ce387e3aea4872038f593b8a6", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/d26491565ec8bc6ce387e3aea4872038f593b8a6", "committedDate": "2020-07-09T19:22:03Z", "message": "project compiles but tests don't pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a95b3a1df7b67947c36812e7e33718b24061627", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/5a95b3a1df7b67947c36812e7e33718b24061627", "committedDate": "2020-07-09T19:22:21Z", "message": "Test classes pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fd365c1bba7e38640f6e6ebf76847786e34a390", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/5fd365c1bba7e38640f6e6ebf76847786e34a390", "committedDate": "2020-07-09T19:23:49Z", "message": "re-fixing servlet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ea410496304ac45a252a14bc9e769ef86b1d96", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/e0ea410496304ac45a252a14bc9e769ef86b1d96", "committedDate": "2020-07-09T19:30:18Z", "message": "resetting frontend to master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/d52dbaa590df8756f67e0c8688ca0436bdf5c160", "committedDate": "2020-07-09T19:41:47Z", "message": "Fixing up some mistakes from rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODQ1OTY4", "url": "https://github.com/redhataccess/pantheon/pull/335#pullrequestreview-450845968", "createdAt": "2020-07-17T17:45:54Z", "commit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0NTo1NVrOGzbxrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODowMToyNFrOGzcScA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NTY0Nw==", "bodyText": "interesting... setting a property and removing it after the module content. What are you trying to accomplish here?", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456585647", "createdAt": "2020-07-17T17:45:55Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "diffHunk": "@@ -67,12 +67,20 @@ public void process(Document document, PreprocessorReader reader, String target,\n                 Module module = includedResourceAsModel.adaptTo(Module.class);\n                 // TODO, right now only default locale and latest (draft) version of the module are used\n                 content = traverseFrom(module)\n-                        .toChild(module1 -> module.moduleLocale(GlobalConfig.DEFAULT_MODULE_LOCALE))\n+                        .toChild(module1 -> module.locale(GlobalConfig.DEFAULT_MODULE_LOCALE))\n                         .toChild(ModuleLocale::source)\n                         .toChild(SourceContent::draft)\n                         .toChild(FileResource::jcrContent)\n                         .toField(FileResource.JcrContent::jcrData)\n                         .get();\n+                content = new StringBuilder(\":pantheon_module_id: \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NjUyNA==", "bodyText": "I say we remove commented out code.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456586524", "createdAt": "2020-07-17T17:47:39Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariant.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.redhat.pantheon.model.document;\n+\n+import com.redhat.pantheon.jcr.JcrResources;\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.api.WorkspaceChild;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.api.Reference;\n+import com.redhat.pantheon.model.api.SlingModel;\n+import org.apache.sling.api.resource.PersistenceException;\n+import org.apache.sling.api.resource.Resource;\n+\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+\n+import java.util.Calendar;\n+\n+import static com.google.common.collect.Streams.stream;\n+import static com.redhat.pantheon.jcr.JcrResources.rename;\n+import static java.util.stream.Collectors.counting;\n+\n+/**\n+ * A specific Document variant node which houses all the versions for a specific language in the Document.\n+ */\n+public interface DocumentVariant extends WorkspaceChild {\n+\n+    String DEFAULT_VARIANT_NAME = \"DEFAULT\";\n+\n+    Child<? extends DocumentVersion> draft();\n+\n+    Child<? extends DocumentVersion> released();\n+\n+    @Override\n+    DocumentVariants getParent();\n+\n+    // Since we are not storing historical versions anymore, the only needed ones are draft and released\n+    /*default DocumentVersion getVersion(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTA1Mg==", "bodyText": "these methods seem to be the same as in the parent Document interface. The only thing which changed is the return generic. I wonder if we need to re-declare them completely or just tighten the return type.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456589052", "createdAt": "2020-07-17T17:52:31Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java", "diffHunk": "@@ -45,124 +44,70 @@\n     @Named(\"jcr:uuid\")\n     Field<String> uuid();\n \n-    default Child<ModuleLocale> moduleLocale(Locale locale) {\n+    default Child<ModuleLocale> locale(Locale locale) {\n         return child(locale.toString(), ModuleLocale.class);\n     }\n \n     default Optional<ModuleVersion> getDraftVersion(@Nonnull final Locale locale,\n                                                     @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::draft)\n                 .getAsOptional();\n     }\n \n     default Optional<ModuleVersion> getReleasedVersion(@Nonnull final Locale locale,\n-                                                    @Nonnull final String variantName) {\n+                                                       @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::released)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released content for a given locale\n-     */\n-    default Optional<FileResource> getReleasedContent(final Locale locale,\n-                                                      @Nonnull final String variantName) {\n+    default Optional<FileResource> getDraftContent(@Nonnull final Locale locale,\n+                                                   @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The draft content for a given locale\n-     */\n-    default Optional<FileResource> getDraftContent(final Locale locale,\n-                                                 @Nonnull final String variantName) {\n+    default Optional<FileResource> getReleasedContent(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n+                .toChild(ModuleVariant::released)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released metadata for a given locale\n-     */\n-    default Optional<Metadata> getReleasedMetadata(final Locale locale,\n-                                                   @Nonnull final String variantName) {\n+    default Optional<ModuleMetadata> getDraftMetadata(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::metadata)\n                 .getAsOptional();\n     }\n \n-  /**\n-    *\n-    * @param locale the locale to fetch the acknowledgment status content\n-    * @param variantName\n-    * @return the  status data for a released version for a given locale\n-    */\n-    default Optional<AckStatus> getAcknowledgementStatus(final Locale locale,\n+    default Optional<ModuleMetadata> getReleasedMetadata(@Nonnull final Locale locale,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA==", "bodyText": "interesting... I wonder if we are able to keep this filter in line 90 as before.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456590170", "createdAt": "2020-07-17T17:54:37Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -89,9 +87,10 @@ protected String getQuery(SlingHttpServletRequest request) {\n         }\n \n         StringBuilder queryBuilder = new StringBuilder()\n-                .append(\"/jcr:root/content/(repositories | modules)//element(*, pant:module)\");\n+                .append(\"/jcr:root/content/(repositories | modules)//element()\");\n \n-        List<StringBuilder> queryFilters = newArrayListWithCapacity(4);\n+        List<StringBuilder> queryFilters = newArrayListWithCapacity(5);\n+        queryFilters.add(new StringBuilder(\"(@jcr:primaryType = 'pant:assembly' or @jcr:primaryType = 'pant:module')\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MTczNw==", "bodyText": "\ud83d\udc4d HAML comments vs HTML comments", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456591737", "createdAt": "2020-07-17T17:57:13Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/resources/apps/pantheon/templates/haml/html5/section.html.haml", "diffHunk": "@@ -9,16 +9,20 @@\n     - anchor = nil\n     - link = %(<a class=\"link\" href=\"##{@id}\">)\n \n-// Do the HTML part\n+-# Do the HTML part", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MjQ0Nw==", "bodyText": "This is interesting. Can you explain what is happening here?", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456592447", "createdAt": "2020-07-17T17:58:30Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/resources/apps/pantheon/templates/haml/html5/section.html.haml", "diffHunk": "@@ -9,16 +9,20 @@\n     - anchor = nil\n     - link = %(<a class=\"link\" href=\"##{@id}\">)\n \n-// Do the HTML part\n+-# Do the HTML part\n - if slevel == 0\n   %h1{:id=>@id, :class=>\"sect0\"}=%(#{anchor}#{link}#{title}#{link && '</a>'})\n   =content\n - else\n-  %section{:class=>[\"sect#{slevel}\", role]}\n-    - snum = @numbered && @caption.nil? && slevel <= (@document.attr 'sectnumlevels', 3).to_i ? %(#{sectnum} ) : nil\n-    - haml_tag \"h#{slevel + 1}##{@id}\", %(#{anchor}#{link}#{snum}#{captioned_title}#{link && '</a>'})\n-    - if slevel == 1\n-      .sectionbody\n-        =content\n-    - else\n-      =content\n+  %cp-documentation{\"pantheon-id\"=>(@document.attr :pantheon_module_id), :class=>[\"sect#{slevel}\", role]}\n+    %section{:class=>[\"sect#{slevel}\", role]}\n+      - if (@document.attr :pantheon_module_id)\n+        %h1\n+          =(@document.attr :pantheon_module_id)\n+      - snum = @numbered && @caption.nil? && slevel <= (@document.attr 'sectnumlevels', 3).to_i ? %(#{sectnum} ) : nil\n+      - haml_tag \"h#{slevel + 1}##{@id}\", %(#{anchor}#{link}#{snum}#{captioned_title}#{link && '</a>'})\n+      - if slevel == 1\n+        .sectionbody\n+          =content\n+      - else\n+        =content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDAzMg==", "bodyText": "hmmm... I don't like this. The name should not change to moduleMetadata as assemblies will also have this node.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456594032", "createdAt": "2020-07-17T18:01:24Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/extension/ModuleMetadataExtractorTreeProcessorTest.java", "diffHunk": "@@ -16,22 +16,22 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n @ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n-class MetadataExtractorTreeProcessorTest {\n+class ModuleMetadataExtractorTreeProcessorTest {\n \n     private final SlingContext slingContext = new SlingContext();\n \n     @Test\n     void extractMetadata() {\n         // Given\n         slingContext.build()\n-                .resource(\"/content/module1/locales/en_US/1/metadata\")\n+                .resource(\"/content/module1/locales/en_US/1/moduleMetadata\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "637b63917dd82f53460b1760e40319aa42560a79", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/637b63917dd82f53460b1760e40319aa42560a79", "committedDate": "2020-07-20T15:14:31Z", "message": "Code review updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b822d467fcd3057e53396496fede9276d74b27b", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/7b822d467fcd3057e53396496fede9276d74b27b", "committedDate": "2020-07-20T15:17:50Z", "message": "Merge branch 'master' into blackMagicGenerics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzY3MTE2", "url": "https://github.com/redhataccess/pantheon/pull/335#pullrequestreview-451767116", "createdAt": "2020-07-20T16:26:32Z", "commit": {"oid": "7b822d467fcd3057e53396496fede9276d74b27b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyNjozMlrOG0V67A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjozMjo1NFrOG0WK7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzODI4NA==", "bodyText": "We don't need this method anymore as you can do:\ndoc.variant(\"variantName\").getOrCreate();", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457538284", "createdAt": "2020-07-20T16:26:32Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariants.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.redhat.pantheon.model.document;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.OrderedFolder;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+\n+import javax.inject.Named;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import static com.redhat.pantheon.model.document.DocumentVariant.DEFAULT_VARIANT_NAME;\n+\n+/**\n+ * @author Carlos Munoz\n+ */\n+@JcrPrimaryType(\"sling:OrderedFolder\")\n+public interface DocumentVariants extends OrderedFolder {\n+\n+    // The default variant\n+    @Named(DEFAULT_VARIANT_NAME)\n+    Child<? extends DocumentVariant> defaultVariant();\n+\n+    default Stream<? extends DocumentVariant> getVariants() {\n+        return this.as(DocumentVariant.class);\n+    }\n+\n+    default DocumentVariant getOrCreateVariant(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b822d467fcd3057e53396496fede9276d74b27b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTU5Nw==", "bodyText": "I guess we still need this because of generics, but it's much more succinct than before \ud83d\udc4d", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457539597", "createdAt": "2020-07-20T16:28:30Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java", "diffHunk": "@@ -45,125 +44,27 @@\n     @Named(\"jcr:uuid\")\n     Field<String> uuid();\n \n-    default Child<ModuleLocale> moduleLocale(Locale locale) {\n+    default Child<ModuleLocale> locale(Locale locale) {\n         return child(locale.toString(), ModuleLocale.class);\n     }\n \n     default Optional<ModuleVersion> getDraftVersion(@Nonnull final Locale locale,\n                                                     @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n-                .getAsOptional();\n+        return (Optional<ModuleVersion>) Document.super.getDraftVersion(locale, variantName);\n     }\n \n     default Optional<ModuleVersion> getReleasedVersion(@Nonnull final Locale locale,\n-                                                    @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n-                .getAsOptional();\n+                                                       @Nonnull final String variantName) {\n+        return (Optional<ModuleVersion>) Document.super.getReleasedVersion(locale, variantName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b822d467fcd3057e53396496fede9276d74b27b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTkyMg==", "bodyText": "Yes, they are \ud83d\ude04", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457539922", "createdAt": "2020-07-20T16:29:02Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java", "diffHunk": "@@ -45,124 +44,70 @@\n     @Named(\"jcr:uuid\")\n     Field<String> uuid();\n \n-    default Child<ModuleLocale> moduleLocale(Locale locale) {\n+    default Child<ModuleLocale> locale(Locale locale) {\n         return child(locale.toString(), ModuleLocale.class);\n     }\n \n     default Optional<ModuleVersion> getDraftVersion(@Nonnull final Locale locale,\n                                                     @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::draft)\n                 .getAsOptional();\n     }\n \n     default Optional<ModuleVersion> getReleasedVersion(@Nonnull final Locale locale,\n-                                                    @Nonnull final String variantName) {\n+                                                       @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::released)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released content for a given locale\n-     */\n-    default Optional<FileResource> getReleasedContent(final Locale locale,\n-                                                      @Nonnull final String variantName) {\n+    default Optional<FileResource> getDraftContent(@Nonnull final Locale locale,\n+                                                   @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The draft content for a given locale\n-     */\n-    default Optional<FileResource> getDraftContent(final Locale locale,\n-                                                 @Nonnull final String variantName) {\n+    default Optional<FileResource> getReleasedContent(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n+                .toChild(ModuleVariant::released)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released metadata for a given locale\n-     */\n-    default Optional<Metadata> getReleasedMetadata(final Locale locale,\n-                                                   @Nonnull final String variantName) {\n+    default Optional<ModuleMetadata> getDraftMetadata(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::metadata)\n                 .getAsOptional();\n     }\n \n-  /**\n-    *\n-    * @param locale the locale to fetch the acknowledgment status content\n-    * @param variantName\n-    * @return the  status data for a released version for a given locale\n-    */\n-    default Optional<AckStatus> getAcknowledgementStatus(final Locale locale,\n+    default Optional<ModuleMetadata> getReleasedMetadata(@Nonnull final Locale locale,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTA1Mg=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MjM4MQ==", "bodyText": "(not a blocker)", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457542381", "createdAt": "2020-07-20T16:32:54Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -89,9 +87,10 @@ protected String getQuery(SlingHttpServletRequest request) {\n         }\n \n         StringBuilder queryBuilder = new StringBuilder()\n-                .append(\"/jcr:root/content/(repositories | modules)//element(*, pant:module)\");\n+                .append(\"/jcr:root/content/(repositories | modules)//element()\");\n \n-        List<StringBuilder> queryFilters = newArrayListWithCapacity(4);\n+        List<StringBuilder> queryFilters = newArrayListWithCapacity(5);\n+        queryFilters.add(new StringBuilder(\"(@jcr:primaryType = 'pant:assembly' or @jcr:primaryType = 'pant:module')\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f1687edd5903c9747556ae2eea48c6dd8e84632", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/5f1687edd5903c9747556ae2eea48c6dd8e84632", "committedDate": "2020-07-20T17:00:53Z", "message": "removing unneeded method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODc4NTg2", "url": "https://github.com/redhataccess/pantheon/pull/335#pullrequestreview-451878586", "createdAt": "2020-07-20T19:01:55Z", "commit": {"oid": "5f1687edd5903c9747556ae2eea48c6dd8e84632"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1945, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}