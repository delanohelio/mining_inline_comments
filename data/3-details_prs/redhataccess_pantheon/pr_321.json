{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODUyMzE3", "number": 321, "title": "(CCS-3230) Single page assembly preview", "bodyText": "Changes  corresponding to segregating assemblies/ modules and rendering on it,", "createdAt": "2020-06-17T13:28:20Z", "url": "https://github.com/redhataccess/pantheon/pull/321", "merged": true, "mergeCommit": {"oid": "287af845a475d5a6e15e71837961d635d863a7af"}, "closed": true, "closedAt": "2020-07-08T05:28:19Z", "author": {"login": "rednitish"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoO_CvgH2gAyNDM1ODUyMzE3OmIxNjEyODVjYjY1OGNlNWQ0N2Q4NDQ0ZjRhZGZhODRkNDk0Y2RhMmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcywKzGAFqTQ0NDM1MzE3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b161285cb658ce5d47d8444f4adfa84d494cda2b", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/b161285cb658ce5d47d8444f4adfa84d494cda2b", "committedDate": "2020-06-05T09:10:35Z", "message": "sling servlet suffix utility (#307)\n\nAdd a utility for dealing with Sling path suffixes. In this revision the utility allows for template-based extraction of path parameters, enabling building complex, non-static API paths."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "373846d6e043f05a571b6aab3575e50f8d4b52f9", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/373846d6e043f05a571b6aab3575e50f8d4b52f9", "committedDate": "2020-06-08T06:10:15Z", "message": "Merge remote-tracking branch 'refs/remotes/upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f4a0d47d6211e2013aafb517cba4db59df9a7d5", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/3f4a0d47d6211e2013aafb517cba4db59df9a7d5", "committedDate": "2020-06-11T07:29:35Z", "message": "Merge remote-tracking branch 'refs/remotes/upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c0e13dcdc85f530ef8e308ca2ac81b99600e3d2", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/1c0e13dcdc85f530ef8e308ca2ac81b99600e3d2", "committedDate": "2020-06-12T07:14:31Z", "message": "Merge remote-tracking branch 'refs/remotes/upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7b802521f00413425274c7aac2ddb7e65296a23", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/c7b802521f00413425274c7aac2ddb7e65296a23", "committedDate": "2020-06-15T07:00:32Z", "message": "Assembly changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfc1f2dc42b5418d4e4bda2b9d7999afea7f436e", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/dfc1f2dc42b5418d4e4bda2b9d7999afea7f436e", "committedDate": "2020-06-15T10:48:42Z", "message": " (CCS-3230) Single page assembly preview Assembly Changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd1f82aca862dfe50f4c03cb592e33e5caba899e", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/cd1f82aca862dfe50f4c03cb592e33e5caba899e", "committedDate": "2020-06-17T12:13:38Z", "message": "Merge remote-tracking branch 'refs/remotes/upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/adf59da234579eb16c80cb7332c9c3e5bf3d0065", "committedDate": "2020-06-17T13:25:25Z", "message": " Assembly / module rendering independent classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjk3OTAw", "url": "https://github.com/redhataccess/pantheon/pull/321#pullrequestreview-432697900", "createdAt": "2020-06-17T19:11:18Z", "commit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToxMToxOFrOGlTweg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyMjoyMFrOGlUGyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NDIwMg==", "bodyText": "You are missing the pantheon/assembly resource type here if you want to use the same servlet to preview both.", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441774202", "createdAt": "2020-06-17T19:11:18Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/RenderingServlet.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.Rendering;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletResourceTypes(\n+        resourceTypes = { \"pantheon/module\" },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NDcwNQ==", "bodyText": "A better name for this test would be AssemblyRenderingTest", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441774705", "createdAt": "2020-06-17T19:12:18Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class AssemblyRenderingServletTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NTE3OA==", "bodyText": "Same here regarding class naming: ModuleRenderingTest (since you are testing the ModuleRendering class)", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441775178", "createdAt": "2020-06-17T19:13:11Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java", "diffHunk": "@@ -19,11 +20,10 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.*;\n-import static org.mockito.Mockito.lenient;\n-import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.*;\n \n @ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n-public class AsciidocRenderingServletTest {\n+public class ModuleRenderingServletTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NTM5Ng==", "bodyText": "Lets get rid of this comment", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441775396", "createdAt": "2020-06-17T19:13:34Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java", "diffHunk": "@@ -58,11 +59,13 @@ public void testGenerateHtmlFromAsciidoc() throws Exception {\n                 .thenReturn(\"A generated html string\");\n \n         // Test class\n-        AsciidocRenderingServlet servlet = new AsciidocRenderingServlet(asciidoctorService);\n-        servlet.init();\n+/*        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NjAxMA==", "bodyText": "lets get rid of this comment", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441776010", "createdAt": "2020-06-17T19:14:43Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/RenderingServletTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.internal.matchers.Any;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class RenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromModule() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:workspace\",\n+                \"sling:resourceType\", \"pantheon/module\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+            registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        AsciidoctorService asciidoctorService = mock(AsciidoctorService.class);\n+        ModuleRendering moduleRendering = mock(ModuleRendering.class);\n+//        when(moduleRendering.getRenderedHTML(slingContext.request(), slingContext.response())).then()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NjA5NQ==", "bodyText": "lets get rid of this comment", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441776095", "createdAt": "2020-06-17T19:14:54Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/RenderingServletTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.internal.matchers.Any;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class RenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromModule() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:workspace\",\n+                \"sling:resourceType\", \"pantheon/module\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+            registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        AsciidoctorService asciidoctorService = mock(AsciidoctorService.class);\n+        ModuleRendering moduleRendering = mock(ModuleRendering.class);\n+//        when(moduleRendering.getRenderedHTML(slingContext.request(), slingContext.response())).then()\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+        // Test class\n+        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();\n+\n+        // When\n+        servlet.doGet(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(false), // not draft\n+                anyMap(),\n+                eq(false)); // don't re-render\n+    }\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromAssembly() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:workspace\",\n+                \"sling:resourceType\", \"pantheon/assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        AsciidoctorService asciidoctorService = mock(AsciidoctorService.class);\n+        ModuleRendering moduleRendering = mock(ModuleRendering.class);\n+//        when(moduleRendering.getRenderedHTML(slingContext.request(), slingContext.response())).then()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTA0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public  void getRenderedHTML(SlingHttpServletRequest request, SlingHttpServletResponse resposne) throws IOException;\n          \n          \n            \n                public  void renderHtml(SlingHttpServletRequest request, SlingHttpServletResponse resposne) throws IOException;\n          \n      \n    \n    \n  \n\nsince the method doesn't return anything", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441779045", "createdAt": "2020-06-17T19:20:45Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/Rendering.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.redhat.pantheon.model;\n+\n+import com.redhat.pantheon.model.api.Field;\n+import com.redhat.pantheon.model.api.SlingModel;\n+import com.redhat.pantheon.servlet.AssemblyRendering;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.models.annotations.Default;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+\n+import javax.inject.Named;\n+import java.io.IOException;\n+import java.util.Calendar;\n+\n+/**\n+ * Represents rendering as an interface to be implemented.\n+ *\n+ */\n+\n+public interface Rendering {\n+    public  void getRenderedHTML(SlingHttpServletRequest request, SlingHttpServletResponse resposne) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTkxNA==", "bodyText": "I like this idea, but I would move it to the servlet package", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441779914", "createdAt": "2020-06-17T19:22:20Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/Rendering.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.redhat.pantheon.model;\n+\n+import com.redhat.pantheon.model.api.Field;\n+import com.redhat.pantheon.model.api.SlingModel;\n+import com.redhat.pantheon.servlet.AssemblyRendering;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.models.annotations.Default;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+\n+import javax.inject.Named;\n+import java.io.IOException;\n+import java.util.Calendar;\n+\n+/**\n+ * Represents rendering as an interface to be implemented.\n+ *\n+ */\n+\n+public interface Rendering {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyOTc2MzEx", "url": "https://github.com/redhataccess/pantheon/pull/321#pullrequestreview-432976311", "createdAt": "2020-06-18T06:30:57Z", "commit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjozMDo1N1rOGlhVNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjo1MzoyNlrOGlh5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NjU5OA==", "bodyText": "Rather than having an else you can simply return", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441996598", "createdAt": "2020-06-18T06:30:57Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.Rendering;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+\n+\n+public class AssemblyRendering implements Rendering {\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyRendering.class);\n+\n+    static final String PARAM_RERENDER = \"rerender\";\n+    static final String PARAM_DRAFT = \"draft\";\n+    static final String PARAM_LOCALE = \"locale\";\n+    static final String PARAM_VARIANT = \"variant\";\n+\n+    private AsciidoctorService asciidoctorService;\n+\n+    @Activate\n+    public AssemblyRendering(\n+            @Reference AsciidoctorService asciidoctorService) {\n+        this.asciidoctorService = asciidoctorService;\n+    }\n+\n+    @Override\n+    public void getRenderedHTML(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws IOException {\n+        String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n+        boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n+        boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n+        String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);\n+\n+        Module module = request.getResource().adaptTo(Module.class);\n+        Locale localeObj = LocaleUtils.toLocale(locale);\n+\n+        Optional<HashableFileResource> moduleVariantSource;\n+\n+        if(draft) {\n+            moduleVariantSource = module.moduleLocale(localeObj)\n+                .traverse()\n+                .toChild(ModuleLocale::source)\n+                .toChild(SourceContent::draft)\n+                .getAsOptional();\n+        } else {\n+            moduleVariantSource = module.moduleLocale(localeObj)\n+                    .traverse()\n+                    .toChild(ModuleLocale::source)\n+                    .toChild(SourceContent::released)\n+                    .getAsOptional();\n+        }\n+\n+\n+        if(!moduleVariantSource.isPresent()) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, (draft ? \"Draft \" : \"Released \")\n+                    + \"source content not found for \" + variantName +  \" module variant at \"\n+                    + request.getResource().getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5Nzk4Mg==", "bodyText": "Switch/case would be a better option than if/else", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r441997982", "createdAt": "2020-06-18T06:34:22Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/RenderingServlet.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.Rendering;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletResourceTypes(\n+        resourceTypes = { \"pantheon/module\" },\n+        methods = \"GET\",\n+        extensions = \"preview\")\n+@SuppressWarnings(\"serial\")\n+public class RenderingServlet extends SlingSafeMethodsServlet {\n+\n+    private final Logger log = LoggerFactory.getLogger(RenderingServlet.class);\n+\n+    private AsciidoctorService asciidoctorService;\n+\n+    @Activate\n+    public RenderingServlet(\n+            @Reference AsciidoctorService asciidoctorService) {\n+        this.asciidoctorService = asciidoctorService;\n+    }\n+\n+    @Override\n+    protected void doGet(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws ServletException, IOException {\n+        if(request.getResource().getResourceType().equals(\"pantheon/module\")){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDA2MA==", "bodyText": "Sling recommends using setParameterMap than getParameterMap().put().\n                ImmutableMap.<String, Object>builder()\n                                .put(AsciidocRenderingServlet.PARAM_RERENDER, \"true\")\n                        .build()\n        );", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442000060", "createdAt": "2020-06-18T06:39:55Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class AssemblyRenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromAsciidoc() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+/*        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();*/\n+\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(false), // not draft\n+                anyMap(),\n+                eq(false)); // don't re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered)\")\n+    public void testGenerateHtmlFromReleasedAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTAyNg==", "bodyText": "Sling recommends using setParameterMap than getParameterMap().put().\n       .put(AsciidocRenderingServlet.PARAM_RERENDER, \"true\")\n        .build()\n );\nThis and the above one can be merged as ImmutableMap builder supports multiple puts.", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442001026", "createdAt": "2020-06-18T06:42:17Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class AssemblyRenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromAsciidoc() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+/*        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();*/\n+\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(false), // not draft\n+                anyMap(),\n+                eq(false)); // don't re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered)\")\n+    public void testGenerateHtmlFromReleasedAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        lenient().when(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTU3Nw==", "bodyText": "Same as my previous comment on use of getParameterMap.", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442001577", "createdAt": "2020-06-18T06:43:46Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class AssemblyRenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromAsciidoc() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+/*        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();*/\n+\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(false), // not draft\n+                anyMap(),\n+                eq(false)); // don't re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered)\")\n+    public void testGenerateHtmlFromReleasedAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(true), // draft\n+                anyMap(),\n+                eq(true)); // re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered, non-default variant)\")\n+    public void testGenerateHtmlFromDraftAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/variant1/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/variant1/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_VARIANT, new String[]{\"variant1\"});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTkxNg==", "bodyText": "Same as my previous comment on  use of getParameterMap.", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442001916", "createdAt": "2020-06-18T06:44:40Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/AssemblyRenderingServletTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Locale;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+@ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n+public class AssemblyRenderingServletTest {\n+\n+    private final SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @Mock AsciidoctorService asciidoctorService;\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (released version, cached content, default variant)\")\n+    public void testGenerateHtmlFromAsciidoc() throws Exception {\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/released/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/released/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+/*        RenderingServlet servlet = new RenderingServlet(asciidoctorService);\n+        servlet.init();*/\n+\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(false), // not draft\n+                anyMap(),\n+                eq(false)); // don't re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered)\")\n+    public void testGenerateHtmlFromReleasedAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/DEFAULT/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\");\n+\n+        // Test class\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"DEFAULT\"),\n+                eq(true), // draft\n+                anyMap(),\n+                eq(true)); // re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc (draft version, re-rendered, non-default variant)\")\n+    public void testGenerateHtmlFromDraftAsciidocWithRerender() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/repo\",\n+                        \"jcr:primaryType\", \"pant:workspace\",\n+                        \"sling:resourceType\", \"pantheon/workspace\"\n+                ).resource(\"/repo/entities/module\",\n+                \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/repo/entities/module/en_US/source/draft/jcr:content\",\n+                        \"jcr:data\", \"Some source content (irrelevant)\")\n+                .resource(\"/repo/entities/module/en_US/variants/variant1/draft/metadata\")\n+                .resource(\"/repo/entities/module/en_US/variants/variant1/draft/cached_html/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_VARIANT, new String[]{\"variant1\"});\n+        lenient().when(\n+                asciidoctorService.getModuleHtml(\n+                        any(Module.class),\n+                        any(Locale.class),\n+                        anyString(),\n+                        anyBoolean(),\n+                        anyMap(),\n+                        anyBoolean()))\n+                .thenReturn(\"A generated html string\").thenReturn(\"A generated html string\").thenReturn(\"A generated html string\");\n+\n+        // Test class\n+        AssemblyRendering assemblyRendering = new AssemblyRendering(asciidoctorService);\n+\n+        // When\n+        assemblyRendering.getRenderedHTML(slingContext.request(), slingContext.response());\n+\n+        // Then\n+        assertEquals(HttpServletResponse.SC_OK, slingContext.response().getStatus());\n+        assertTrue(slingContext.response().getOutputAsString().contains(\"A generated html string\"));\n+        assertEquals(\"text/html\", slingContext.response().getContentType());\n+        verify(asciidoctorService).getModuleHtml(\n+                any(Module.class),\n+                eq(Locale.US),\n+                eq(\"variant1\"), // non-default variant\n+                eq(true), // draft\n+                anyMap(),\n+                eq(true)); // re-render\n+    }\n+\n+    @Test\n+    @DisplayName(\"Generate html content from asciidoc for an invalid variant\")\n+    public void renderHtmlForInvalidVariant() throws Exception {\n+\n+        // Given\n+        slingContext.build()\n+                .resource(\"/module\",\n+                        \"jcr:primaryType\", \"pant:assembly\")\n+                .resource(\"/module/en_US/variants/DEFAULT/draft/cachedHtml/jcr:content\",\n+                        \"jcr:data\", \"A generated html string\")\n+                .resource(\"/module/en_US/variants/DEFAULT/draft/metadata\")\n+                .commit();\n+        registerMockAdapter(Module.class, slingContext);\n+        Resource resource = slingContext.resourceResolver().getResource(\"/module\");\n+        slingContext.request().setResource(resource);\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(AssemblyRendering.PARAM_VARIANT, new String[]{\"non_existing\"});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMjMyOQ==", "bodyText": "Same as my previous comment on  use of getParameterMap.", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442002329", "createdAt": "2020-06-18T06:45:44Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java", "diffHunk": "@@ -96,8 +100,8 @@ public void testGenerateHtmlFromReleasedAsciidocWithRerender() throws Exception\n         registerMockAdapter(Module.class, slingContext);\n         Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n         slingContext.request().setResource(resource);\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_RERENDER, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_DRAFT, new String[]{\"true\"});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMjYwMg==", "bodyText": "Same as my previous comment on use of getParameterMap.", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442002602", "createdAt": "2020-06-18T06:46:23Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java", "diffHunk": "@@ -147,9 +150,12 @@ public void testGenerateHtmlFromDraftAsciidocWithRerender() throws Exception {\n         registerMockAdapter(Module.class, slingContext);\n         Resource resource = slingContext.resourceResolver().getResource(\"/repo/entities/module\");\n         slingContext.request().setResource(resource);\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_RERENDER, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_DRAFT, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_VARIANT, new String[]{\"variant1\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_VARIANT, new String[]{\"variant1\"});\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMzAzNw==", "bodyText": "Same as my previous comment on use of getParameterMap.", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442003037", "createdAt": "2020-06-18T06:47:24Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/ModuleRenderingServletTest.java", "diffHunk": "@@ -234,9 +236,9 @@ public void renderHtmlForInvalidLocale() throws Exception {\n         registerMockAdapter(Module.class, slingContext);\n         Resource resource = slingContext.resourceResolver().getResource(\"/module\");\n         slingContext.request().setResource(resource);\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_RERENDER, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_DRAFT, new String[]{\"true\"});\n-        slingContext.request().getParameterMap().put(AsciidocRenderingServlet.PARAM_LOCALE, new String[]{\"ja_JP\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_RERENDER, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_DRAFT, new String[]{\"true\"});\n+        slingContext.request().getParameterMap().put(ModuleRendering.PARAM_LOCALE, new String[]{\"ja_JP\"});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNTg3Nw==", "bodyText": "Since the locale, draft, rerender variables are being used in ModuleRender as well, wouldn't it be a better approach to move these statements to a helper/util?", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442005877", "createdAt": "2020-06-18T06:53:26Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.Rendering;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+\n+\n+public class AssemblyRendering implements Rendering {\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyRendering.class);\n+\n+    static final String PARAM_RERENDER = \"rerender\";\n+    static final String PARAM_DRAFT = \"draft\";\n+    static final String PARAM_LOCALE = \"locale\";\n+    static final String PARAM_VARIANT = \"variant\";\n+\n+    private AsciidoctorService asciidoctorService;\n+\n+    @Activate\n+    public AssemblyRendering(\n+            @Reference AsciidoctorService asciidoctorService) {\n+        this.asciidoctorService = asciidoctorService;\n+    }\n+\n+    @Override\n+    public void getRenderedHTML(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws IOException {\n+        String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n+        boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n+        boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n+        String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDA1Mjc0", "url": "https://github.com/redhataccess/pantheon/pull/321#pullrequestreview-433405274", "createdAt": "2020-06-18T15:34:06Z", "commit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTozNDowNlrOGl05yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTozNDowNlrOGl05yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxNzI1Nw==", "bodyText": "Rename to \"AssemblyRenderer\"", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r442317257", "createdAt": "2020-06-18T15:34:06Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRendering.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.Rendering;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+\n+\n+public class AssemblyRendering implements Rendering {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDA4OTg4", "url": "https://github.com/redhataccess/pantheon/pull/321#pullrequestreview-433408988", "createdAt": "2020-06-18T15:38:06Z", "commit": {"oid": "adf59da234579eb16c80cb7332c9c3e5bf3d0065"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c49df20fe32b4f8e735652e5675f07456f4f858c", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/c49df20fe32b4f8e735652e5675f07456f4f858c", "committedDate": "2020-06-23T09:06:13Z", "message": " Assembly / module rendering independent classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTU4OTE5", "url": "https://github.com/redhataccess/pantheon/pull/321#pullrequestreview-441158919", "createdAt": "2020-07-01T19:59:50Z", "commit": {"oid": "c49df20fe32b4f8e735652e5675f07456f4f858c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1OTo1MFrOGrziQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1OTo1MFrOGrziQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NjMwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    switch(paramValue(request, PARAM_DRAFT)){\n          \n          \n            \n                        case \"true\":\n          \n          \n            \n                            moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                                    .traverse()\n          \n          \n            \n                                    .toChild(ModuleLocale::source)\n          \n          \n            \n                                    .toChild(SourceContent::draft)\n          \n          \n            \n                                    .getAsOptional();\n          \n          \n            \n                            break;\n          \n          \n            \n            \n          \n          \n            \n                        case \"false\":\n          \n          \n            \n                            moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                                    .traverse()\n          \n          \n            \n                                    .toChild(ModuleLocale::source)\n          \n          \n            \n                                    .toChild(SourceContent::released)\n          \n          \n            \n                                    .getAsOptional();\n          \n          \n            \n                            break;\n          \n          \n            \n                    }\n          \n          \n            \n                    moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                            .traverse()\n          \n          \n            \n                            .toChild(ModuleLocale::source)\n          \n          \n            \n                            .toChild(draft ? SourceContent::draft : SourceContent::released)\n          \n          \n            \n                            .getAsOptional();", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448586305", "createdAt": "2020-07-01T19:59:50Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletResourceTypes(\n+        resourceTypes = { \"pantheon/assembly\" },\n+        methods = \"GET\",\n+        extensions = \"preview\")\n+@SuppressWarnings(\"serial\")\n+public class AssemblyRenderServlet extends SlingSafeMethodsServlet {\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyRenderServlet.class);\n+\n+    static final String PARAM_RERENDER = \"rerender\";\n+    static final String PARAM_DRAFT = \"draft\";\n+    static final String PARAM_LOCALE = \"locale\";\n+    static final String PARAM_VARIANT = \"variant\";\n+\n+    private AsciidoctorService asciidoctorService;\n+\n+    @Activate\n+    public AssemblyRenderServlet(\n+            @Reference AsciidoctorService asciidoctorService) {\n+        this.asciidoctorService = asciidoctorService;\n+    }\n+\n+    @Override\n+    public void doGet(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws IOException {\n+        String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n+        boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n+        boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n+        String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);\n+\n+        Module module = request.getResource().adaptTo(Module.class);\n+        Locale localeObj = LocaleUtils.toLocale(locale);\n+\n+        Optional<HashableFileResource> moduleVariantSource = null;\n+\n+        switch(paramValue(request, PARAM_DRAFT)){\n+            case \"true\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n+                        .traverse()\n+                        .toChild(ModuleLocale::source)\n+                        .toChild(SourceContent::draft)\n+                        .getAsOptional();\n+                break;\n+\n+            case \"false\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n+                        .traverse()\n+                        .toChild(ModuleLocale::source)\n+                        .toChild(SourceContent::released)\n+                        .getAsOptional();\n+                break;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49df20fe32b4f8e735652e5675f07456f4f858c"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTU5MzI3", "url": "https://github.com/redhataccess/pantheon/pull/321#pullrequestreview-441159327", "createdAt": "2020-07-01T20:00:29Z", "commit": {"oid": "c49df20fe32b4f8e735652e5675f07456f4f858c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDowMDozMFrOGrzjbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDowMDozMFrOGrzjbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NjYwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    switch(paramValue(request, PARAM_DRAFT)){\n          \n          \n            \n                        case \"true\":\n          \n          \n            \n                            moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                                    .traverse()\n          \n          \n            \n                                    .toChild(ModuleLocale::source)\n          \n          \n            \n                                    .toChild(SourceContent::draft)\n          \n          \n            \n                                    .getAsOptional();\n          \n          \n            \n                                    break;\n          \n          \n            \n            \n          \n          \n            \n                        case \"false\":\n          \n          \n            \n                            moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                                .traverse()\n          \n          \n            \n                                .toChild(ModuleLocale::source)\n          \n          \n            \n                                .toChild(SourceContent::released)\n          \n          \n            \n                                .getAsOptional();\n          \n          \n            \n                            break;\n          \n          \n            \n                    }\n          \n          \n            \n                    moduleVariantSource = module.moduleLocale(localeObj)\n          \n          \n            \n                            .traverse()\n          \n          \n            \n                            .toChild(ModuleLocale::source)\n          \n          \n            \n                            .toChild(draft ? SourceContent::draft : SourceContent::released)\n          \n          \n            \n                            .getAsOptional();", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448586605", "createdAt": "2020-07-01T20:00:30Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java", "diffHunk": "@@ -62,36 +58,40 @@\n     private AsciidoctorService asciidoctorService;\n \n     @Activate\n-    public AsciidocRenderingServlet(\n+    public ModuleRendererServlet(\n             @Reference AsciidoctorService asciidoctorService) {\n         this.asciidoctorService = asciidoctorService;\n     }\n \n     @Override\n-    protected void doGet(SlingHttpServletRequest request,\n-            SlingHttpServletResponse response) throws ServletException, IOException {\n+    public void doGet(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws IOException {\n         String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n-        boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n+        Boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n         boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n         String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);\n \n         Module module = request.getResource().adaptTo(Module.class);\n         Locale localeObj = LocaleUtils.toLocale(locale);\n \n-        Optional<HashableFileResource> moduleVariantSource;\n+        Optional<HashableFileResource> moduleVariantSource = null;\n \n-        if(draft) {\n-            moduleVariantSource = module.moduleLocale(localeObj)\n-                .traverse()\n-                .toChild(ModuleLocale::source)\n-                .toChild(SourceContent::draft)\n-                .getAsOptional();\n-        } else {\n-            moduleVariantSource = module.moduleLocale(localeObj)\n+        switch(paramValue(request, PARAM_DRAFT)){\n+            case \"true\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n+                        .traverse()\n+                        .toChild(ModuleLocale::source)\n+                        .toChild(SourceContent::draft)\n+                        .getAsOptional();\n+                        break;\n+\n+            case \"false\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n                     .traverse()\n                     .toChild(ModuleLocale::source)\n                     .toChild(SourceContent::released)\n                     .getAsOptional();\n+                break;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49df20fe32b4f8e735652e5675f07456f4f858c"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTYwMjE4", "url": "https://github.com/redhataccess/pantheon/pull/321#pullrequestreview-441160218", "createdAt": "2020-07-01T20:02:01Z", "commit": {"oid": "c49df20fe32b4f8e735652e5675f07456f4f858c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDowMjowMVrOGrzl_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDowMjowMVrOGrzl_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NzI2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!moduleVariantSource.isPresent()) {\n          \n          \n            \n                        response.sendError(HttpServletResponse.SC_NOT_FOUND, (draft ? \"Draft \" : \"Released \")\n          \n          \n            \n                                + \"source content not found for \" + variantName +  \" module variant at \"\n          \n          \n            \n                                + request.getResource().getPath());\n          \n          \n            \n                    }\n          \n          \n            \n                    if(!moduleVariantSource.isPresent()) {\n          \n          \n            \n                        response.sendError(HttpServletResponse.SC_NOT_FOUND, (draft ? \"Draft \" : \"Released \")\n          \n          \n            \n                                + \"source content not found for \" + variantName +  \" module variant at \"\n          \n          \n            \n                                + request.getResource().getPath());\n          \n          \n            \n                        return;\n          \n          \n            \n                    }", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448587261", "createdAt": "2020-07-01T20:02:01Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AssemblyRenderServlet.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.asciidoctor.AsciidoctorService;\n+import com.redhat.pantheon.model.module.HashableFileResource;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.ModuleLocale;\n+import com.redhat.pantheon.model.module.SourceContent;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletResourceTypes;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.Servlet;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.model.module.ModuleVariant.DEFAULT_VARIANT_NAME;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsBoolean;\n+\n+/**\n+ * Renders an HTML preview for a single module.\n+ * To provide parameters to the asciidoc generation process, provide the parameters with their name prefixed\n+ * with \"ctx_\".\n+ *\n+ * For example, if an asciidoc attribute of name 'product' needs to be passed, there will need to be a\n+ * query parameter of name 'ctx_product' provided in the url.\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet which transforms asciidoc content into html\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletResourceTypes(\n+        resourceTypes = { \"pantheon/assembly\" },\n+        methods = \"GET\",\n+        extensions = \"preview\")\n+@SuppressWarnings(\"serial\")\n+public class AssemblyRenderServlet extends SlingSafeMethodsServlet {\n+\n+    private final Logger log = LoggerFactory.getLogger(AssemblyRenderServlet.class);\n+\n+    static final String PARAM_RERENDER = \"rerender\";\n+    static final String PARAM_DRAFT = \"draft\";\n+    static final String PARAM_LOCALE = \"locale\";\n+    static final String PARAM_VARIANT = \"variant\";\n+\n+    private AsciidoctorService asciidoctorService;\n+\n+    @Activate\n+    public AssemblyRenderServlet(\n+            @Reference AsciidoctorService asciidoctorService) {\n+        this.asciidoctorService = asciidoctorService;\n+    }\n+\n+    @Override\n+    public void doGet(SlingHttpServletRequest request,\n+            SlingHttpServletResponse response) throws IOException {\n+        String locale = paramValue(request, PARAM_LOCALE, DEFAULT_MODULE_LOCALE.toString());\n+        boolean draft = paramValueAsBoolean(request, PARAM_DRAFT);\n+        boolean reRender = paramValueAsBoolean(request, PARAM_RERENDER);\n+        String variantName = paramValue(request, PARAM_VARIANT, DEFAULT_VARIANT_NAME);\n+\n+        Module module = request.getResource().adaptTo(Module.class);\n+        Locale localeObj = LocaleUtils.toLocale(locale);\n+\n+        Optional<HashableFileResource> moduleVariantSource = null;\n+\n+        switch(paramValue(request, PARAM_DRAFT)){\n+            case \"true\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n+                        .traverse()\n+                        .toChild(ModuleLocale::source)\n+                        .toChild(SourceContent::draft)\n+                        .getAsOptional();\n+                break;\n+\n+            case \"false\":\n+                moduleVariantSource = module.moduleLocale(localeObj)\n+                        .traverse()\n+                        .toChild(ModuleLocale::source)\n+                        .toChild(SourceContent::released)\n+                        .getAsOptional();\n+                break;\n+        }\n+\n+\n+        if(!moduleVariantSource.isPresent()) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, (draft ? \"Draft \" : \"Released \")\n+                    + \"source content not found for \" + variantName +  \" module variant at \"\n+                    + request.getResource().getPath());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49df20fe32b4f8e735652e5675f07456f4f858c"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTYwODc2", "url": "https://github.com/redhataccess/pantheon/pull/321#pullrequestreview-441160876", "createdAt": "2020-07-01T20:03:14Z", "commit": {"oid": "c49df20fe32b4f8e735652e5675f07456f4f858c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDowMzoxNFrOGrzn6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDowMzoxNFrOGrzn6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4Nzc1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + \"source content not found for \" + variantName +  \" module variant at \"\n          \n          \n            \n                                + request.getResource().getPath());\n          \n          \n            \n                    }\n          \n          \n            \n                                + \"source content not found for \" + variantName +  \" module variant at \"\n          \n          \n            \n                                + request.getResource().getPath());\n          \n          \n            \n                        return;\n          \n          \n            \n                    }", "url": "https://github.com/redhataccess/pantheon/pull/321#discussion_r448587752", "createdAt": "2020-07-01T20:03:14Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleRendererServlet.java", "diffHunk": "@@ -100,19 +100,18 @@ protected void doGet(SlingHttpServletRequest request,\n                     + \"source content not found for \" + variantName +  \" module variant at \"\n                     + request.getResource().getPath());\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49df20fe32b4f8e735652e5675f07456f4f858c"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d81f05563059bd22982786f781a51219be9ed191", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/d81f05563059bd22982786f781a51219be9ed191", "committedDate": "2020-07-07T06:43:58Z", "message": " merge conflicts resolve"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "787ff24e247cb271a8a9aff6661a12f732dcb7b9", "author": {"user": {"login": "rednitish", "name": "Nitish Sharma"}}, "url": "https://github.com/redhataccess/pantheon/commit/787ff24e247cb271a8a9aff6661a12f732dcb7b9", "committedDate": "2020-07-07T09:47:53Z", "message": "Review comments from Ben"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzOTcwMjMx", "url": "https://github.com/redhataccess/pantheon/pull/321#pullrequestreview-443970231", "createdAt": "2020-07-07T14:51:48Z", "commit": {"oid": "787ff24e247cb271a8a9aff6661a12f732dcb7b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzOTc1OTY3", "url": "https://github.com/redhataccess/pantheon/pull/321#pullrequestreview-443975967", "createdAt": "2020-07-07T14:57:32Z", "commit": {"oid": "787ff24e247cb271a8a9aff6661a12f732dcb7b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzUzMTc3", "url": "https://github.com/redhataccess/pantheon/pull/321#pullrequestreview-444353177", "createdAt": "2020-07-08T01:29:32Z", "commit": {"oid": "787ff24e247cb271a8a9aff6661a12f732dcb7b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2153, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}