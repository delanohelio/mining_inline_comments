{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzE1MDI5", "number": 286, "title": "resolves CORS issue using Filter", "bodyText": "This PR addresses the CORS issue CP raised against our API calls. It uses a SlingServletFilter to allow *.redhat.com to consume our api on GET/HEAD requests", "createdAt": "2020-05-06T20:23:21Z", "url": "https://github.com/redhataccess/pantheon/pull/286", "merged": true, "mergeCommit": {"oid": "c9005e09d61a154329fd5be6a819e177eaf079fd"}, "closed": true, "closedAt": "2020-05-07T19:53:02Z", "author": {"login": "xdavidson"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceumSmAH2gAyNDE0MzE1MDI5OmFhZDE1MWU1OWUzZjcyNzFhOGQ4NjI3NGFlMzJkMjE1ZDBkZDdjNjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfCwQNgFqTQwNzc4NjE2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aad151e59e3f7271a8d86274ae32d215d0dd7c61", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/aad151e59e3f7271a8d86274ae32d215d0dd7c61", "committedDate": "2020-05-06T20:21:16Z", "message": "resolves CORS issue using Filter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MzY1OTU3", "url": "https://github.com/redhataccess/pantheon/pull/286#pullrequestreview-407365957", "createdAt": "2020-05-07T11:02:21Z", "commit": {"oid": "aad151e59e3f7271a8d86274ae32d215d0dd7c61"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTowMjoyMVrOGR5bLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMToxMjoyOFrOGR5vgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxOTgyMw==", "bodyText": "Could we call this something like CorsEnablingFilter? (or a better name)", "url": "https://github.com/redhataccess/pantheon/pull/286#discussion_r421419823", "createdAt": "2020-05-07T11:02:21Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/SimpleFilter.java", "diffHunk": "@@ -49,22 +54,30 @@\n  *     @Property(name=\"service.ranking\", intValue=1)\n  * })\n  */\n-//@SlingFilter(order=1, description=\"A Simple Filter\")\n-//@Property(name=\"service.vendor\", value=\"The Apache Software Foundation\")\n+@Component\n+@SlingServletFilter(scope = {SlingServletFilterScope.REQUEST},\n+                    methods = {\"GET\",\"HEAD\"})\n public class SimpleFilter implements Filter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad151e59e3f7271a8d86274ae32d215d0dd7c61"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyMTk3MQ==", "bodyText": "Lets add some properties here, similar to what the other servlets are using.", "url": "https://github.com/redhataccess/pantheon/pull/286#discussion_r421421971", "createdAt": "2020-05-07T11:06:32Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/SimpleFilter.java", "diffHunk": "@@ -49,22 +54,30 @@\n  *     @Property(name=\"service.ranking\", intValue=1)\n  * })\n  */\n-//@SlingFilter(order=1, description=\"A Simple Filter\")\n-//@Property(name=\"service.vendor\", value=\"The Apache Software Foundation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad151e59e3f7271a8d86274ae32d215d0dd7c61"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyMzA5MQ==", "bodyText": "GET  and HEAD will do for now, but we might need to extend this to other methods.", "url": "https://github.com/redhataccess/pantheon/pull/286#discussion_r421423091", "createdAt": "2020-05-07T11:08:42Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/SimpleFilter.java", "diffHunk": "@@ -49,22 +54,30 @@\n  *     @Property(name=\"service.ranking\", intValue=1)\n  * })\n  */\n-//@SlingFilter(order=1, description=\"A Simple Filter\")\n-//@Property(name=\"service.vendor\", value=\"The Apache Software Foundation\")\n+@Component\n+@SlingServletFilter(scope = {SlingServletFilterScope.REQUEST},\n+                    methods = {\"GET\",\"HEAD\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad151e59e3f7271a8d86274ae32d215d0dd7c61"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyMzI4Ng==", "bodyText": "You are missing the OPTIONS method in your annotation above.", "url": "https://github.com/redhataccess/pantheon/pull/286#discussion_r421423286", "createdAt": "2020-05-07T11:09:05Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/SimpleFilter.java", "diffHunk": "@@ -49,22 +54,30 @@\n  *     @Property(name=\"service.ranking\", intValue=1)\n  * })\n  */\n-//@SlingFilter(order=1, description=\"A Simple Filter\")\n-//@Property(name=\"service.vendor\", value=\"The Apache Software Foundation\")\n+@Component\n+@SlingServletFilter(scope = {SlingServletFilterScope.REQUEST},\n+                    methods = {\"GET\",\"HEAD\"})\n public class SimpleFilter implements Filter {\n     \n+    public static final String DOMAIN_ALLOWED = \".redhat.com\";\n     private final Logger log = LoggerFactory.getLogger(SimpleFilter.class);\n \n     public void init(FilterConfig filterConfig) throws ServletException {\n     }\n \n-    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n+    public void doFilter(final ServletRequest req, final ServletResponse res, final FilterChain chain) throws IOException,\n             ServletException {\n-        log.info(\"filter invoked - start\");\n+        final SlingHttpServletRequest request = (SlingHttpServletRequest)req;\n+        final SlingHttpServletResponse response = (SlingHttpServletResponse)res;\n+        String origin = request.getHeader(\"Origin\");\n+        if (origin != null) {\n+            if (origin.contains(DOMAIN_ALLOWED)) {\n+                 response.addHeader(\"Access-control-Allow-Origin\", origin);\n+                 response.addHeader(\"Access-control-Allow-Methods\", \"GET, HEAD, OPTIONS\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad151e59e3f7271a8d86274ae32d215d0dd7c61"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyNTAyNA==", "bodyText": "not a blocker, but since this is a security-related change, I would make this condition a bit tighter. Maybe endsWith would work, or a regular expression check.\nMaybe I'm being too careful here.. so I'll leave this decision to you.", "url": "https://github.com/redhataccess/pantheon/pull/286#discussion_r421425024", "createdAt": "2020-05-07T11:12:28Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/SimpleFilter.java", "diffHunk": "@@ -49,22 +54,30 @@\n  *     @Property(name=\"service.ranking\", intValue=1)\n  * })\n  */\n-//@SlingFilter(order=1, description=\"A Simple Filter\")\n-//@Property(name=\"service.vendor\", value=\"The Apache Software Foundation\")\n+@Component\n+@SlingServletFilter(scope = {SlingServletFilterScope.REQUEST},\n+                    methods = {\"GET\",\"HEAD\"})\n public class SimpleFilter implements Filter {\n     \n+    public static final String DOMAIN_ALLOWED = \".redhat.com\";\n     private final Logger log = LoggerFactory.getLogger(SimpleFilter.class);\n \n     public void init(FilterConfig filterConfig) throws ServletException {\n     }\n \n-    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n+    public void doFilter(final ServletRequest req, final ServletResponse res, final FilterChain chain) throws IOException,\n             ServletException {\n-        log.info(\"filter invoked - start\");\n+        final SlingHttpServletRequest request = (SlingHttpServletRequest)req;\n+        final SlingHttpServletResponse response = (SlingHttpServletResponse)res;\n+        String origin = request.getHeader(\"Origin\");\n+        if (origin != null) {\n+            if (origin.contains(DOMAIN_ALLOWED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad151e59e3f7271a8d86274ae32d215d0dd7c61"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c0d9ea5db6797344c865abae315beb46ea6814c", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/5c0d9ea5db6797344c865abae315beb46ea6814c", "committedDate": "2020-05-07T15:05:09Z", "message": "code review fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTc5NDAw", "url": "https://github.com/redhataccess/pantheon/pull/286#pullrequestreview-407579400", "createdAt": "2020-05-07T15:19:58Z", "commit": {"oid": "5c0d9ea5db6797344c865abae315beb46ea6814c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "724cb0eb71da75fdb66a4d6692991dd31ccae59d", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/724cb0eb71da75fdb66a4d6692991dd31ccae59d", "committedDate": "2020-05-07T16:04:43Z", "message": "add junit test for CorsEnablingFilter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "926346bdb4556105e44023185ef0bb9204ea71ed", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/926346bdb4556105e44023185ef0bb9204ea71ed", "committedDate": "2020-05-07T16:06:26Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c7aa98f2fcaf2b644bcf2ac6579cd74f144cba3", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/7c7aa98f2fcaf2b644bcf2ac6579cd74f144cba3", "committedDate": "2020-05-07T18:14:17Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzgwNTM2", "url": "https://github.com/redhataccess/pantheon/pull/286#pullrequestreview-407780536", "createdAt": "2020-05-07T19:42:09Z", "commit": {"oid": "7c7aa98f2fcaf2b644bcf2ac6579cd74f144cba3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTo0MjowOVrOGSNhQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTo0MjowOVrOGSNhQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc0OTA1Ng==", "bodyText": "I would add the verification that the headers are being set. I'll approve the PR, but consider adding this to the unit test otherwise the only thing being tested is that the doFilter method is invoked, which actually happens on every invocation.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    verify(chain).doFilter(request, response);\n          \n          \n            \n                    verify(chain).doFilter(request, response);\n          \n          \n            \n                    verify(response).addHeader(\"Access-control-Allow-Origin\", \"https://www.redhat.com\");\n          \n          \n            \n                    verify(response).addHeader(\"Access-control-Allow-Methods\", \"GET, HEAD, OPTIONS\");", "url": "https://github.com/redhataccess/pantheon/pull/286#discussion_r421749056", "createdAt": "2020-05-07T19:42:09Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/CorsEnablingFilterTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.redhat.pantheon.servlet;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.PrintWriter;\n+\n+import javax.servlet.FilterChain;\n+\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.api.servlets.HttpConstants;\n+import org.apache.sling.testing.mock.sling.MockSling;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+@ExtendWith({SlingContextExtension.class})\n+public class CorsEnablingFilterTest {\n+\n+    private SlingHttpServletResponse response = null;\n+    private FilterChain chain = null;\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+\n+    @BeforeEach\n+    public void setUp() throws Exception {\n+        // Create mocks for required variables\n+        response = mock(SlingHttpServletResponse.class);\n+        chain = mock(FilterChain.class);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() throws Exception {\n+        // Clear variables during teardown\n+        // Not actually necessary as they get re-initialized in setUp\n+        response = null;\n+        chain = null;\n+    }\n+\n+    @Test\n+    public void testDoFilter() throws Exception {\n+        // prepare sling request\n+        ResourceResolver resourceResolver = MockSling.newResourceResolver(slingContext.bundleContext());\n+        MockSlingHttpServletRequest request = new MockSlingHttpServletRequest(resourceResolver);\n+\n+        // simulate query string\n+        request.setQueryString(\"locale=en-us&module_id=123-456-789\");\n+\n+        // set current resource\n+        request.setResource(resourceResolver.getResource(\"/api/module\"));\n+\n+        // set method\n+        request.setMethod(HttpConstants.METHOD_GET);\n+\n+        // set headers\n+        request.addHeader(\"Origin\", \"https://www.redhat.com\");\n+\n+        CorsEnablingFilter filter = new CorsEnablingFilter();\n+\n+        // Execute the method with the mocks we want to test\n+        filter.doFilter(request, response, chain);\n+\n+        // Verify that chain.doFilter() was called\n+        verify(chain).doFilter(request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7aa98f2fcaf2b644bcf2ac6579cd74f144cba3"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzgwNjY2", "url": "https://github.com/redhataccess/pantheon/pull/286#pullrequestreview-407780666", "createdAt": "2020-05-07T19:42:21Z", "commit": {"oid": "7c7aa98f2fcaf2b644bcf2ac6579cd74f144cba3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0653f998b296bb3a3acf53a50c99b3dbd6352dc6", "author": {"user": {"login": "xdavidson", "name": "Lisa Davidson"}}, "url": "https://github.com/redhataccess/pantheon/commit/0653f998b296bb3a3acf53a50c99b3dbd6352dc6", "committedDate": "2020-05-07T19:47:50Z", "message": "verify headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Nzg2MTYy", "url": "https://github.com/redhataccess/pantheon/pull/286#pullrequestreview-407786162", "createdAt": "2020-05-07T19:50:15Z", "commit": {"oid": "0653f998b296bb3a3acf53a50c99b3dbd6352dc6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2117, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}