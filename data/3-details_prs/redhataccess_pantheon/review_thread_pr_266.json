{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjI2OTg1", "number": 266, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToyMToyMFrODubFNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo1Mzo0MFrODub4vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDA0Nzg4OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/RelatedModuleServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToyMToyMFrOGAaKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTozNDowMFrOGAasiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4MTc2OA==", "bodyText": "I am wondering why do we set the url value to https://www.redhat.com?", "url": "https://github.com/redhataccess/pantheon/pull/266#discussion_r403081768", "createdAt": "2020-04-03T15:21:20Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/RelatedModuleServlet.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.redhat.pantheon.servlet.module;\n+\n+import com.redhat.pantheon.jcr.JcrQueryHelper;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n+import static com.redhat.pantheon.servlet.ServletUtils.writeAsJson;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+/**\n+ * Get operation to render a Released Module's related module list in JSON format.\n+ * Only two parameters are expected in the Get request:\n+ * 1. locale - Optional; indicates the locale that the module content is in, defaulted to en-US\n+ * 2. module_id - indicates the uuid string which uniquely identifies a module\n+ *\n+ * The url to GET a request from the server is /api/module/related\n+ * Example: <server_url>/api/module/related?locale=en-us&module_id=xyz\n+ * The said url is accessible outside of the system without any authentication.\n+ *\n+ * @author Ben Radey\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and module uuid to output module relationships\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletPaths(value = \"/api/module/related\")\n+public class RelatedModuleServlet extends SlingSafeMethodsServlet {\n+\n+    private final Logger log = LoggerFactory.getLogger(RelatedModuleServlet.class);\n+\n+    @Override\n+    protected void doGet(@NotNull SlingHttpServletRequest request, @NotNull SlingHttpServletResponse response) throws ServletException, IOException {\n+        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n+        String uuidParam = paramValue(request, \"module_id\", \"\");\n+\n+        StringBuilder query = new StringBuilder(\"select * from [pant:module] as module WHERE module.[jcr:uuid] = '\")\n+                .append(uuidParam)\n+                .append(\"'\");\n+\n+        JcrQueryHelper queryHelper = new JcrQueryHelper(request.getResourceResolver());\n+        try {\n+            Stream<Resource> resultStream = queryHelper.query(query.toString());\n+\n+            Optional<Resource> firstResource = resultStream.findFirst();\n+            if(!firstResource.isPresent()) {\n+                response.sendError(SC_NOT_FOUND, \"Requested content not found.\");\n+            }\n+\n+            resultStream = queryHelper.query(\"select * from [pant:module] as module\", 3, 0);\n+\n+            List<Map> related = new ArrayList<>();\n+            resultStream.map(r -> r.adaptTo(Module.class))\n+                    .forEach(module -> {\n+                            Map<String, String> m = new HashMap<>();\n+                            m.put(\"title\", module.getModuleLocale(locale).getVersion(\"1\").metadata().get().title().get());\n+                            m.put(\"url\", \"https://www.redhat.com\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5ce7c0384a1dd60fd8b73606101059f44dcb824"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MDU3MQ==", "bodyText": "I wanted it to be something that was easy to recognize as wrong. If we made it something realistic, someone might accidentally think that the related modules list was legitimate.", "url": "https://github.com/redhataccess/pantheon/pull/266#discussion_r403090571", "createdAt": "2020-04-03T15:34:00Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/RelatedModuleServlet.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.redhat.pantheon.servlet.module;\n+\n+import com.redhat.pantheon.jcr.JcrQueryHelper;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n+import static com.redhat.pantheon.servlet.ServletUtils.writeAsJson;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+/**\n+ * Get operation to render a Released Module's related module list in JSON format.\n+ * Only two parameters are expected in the Get request:\n+ * 1. locale - Optional; indicates the locale that the module content is in, defaulted to en-US\n+ * 2. module_id - indicates the uuid string which uniquely identifies a module\n+ *\n+ * The url to GET a request from the server is /api/module/related\n+ * Example: <server_url>/api/module/related?locale=en-us&module_id=xyz\n+ * The said url is accessible outside of the system without any authentication.\n+ *\n+ * @author Ben Radey\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and module uuid to output module relationships\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletPaths(value = \"/api/module/related\")\n+public class RelatedModuleServlet extends SlingSafeMethodsServlet {\n+\n+    private final Logger log = LoggerFactory.getLogger(RelatedModuleServlet.class);\n+\n+    @Override\n+    protected void doGet(@NotNull SlingHttpServletRequest request, @NotNull SlingHttpServletResponse response) throws ServletException, IOException {\n+        Locale locale = paramValueAsLocale(request, \"locale\", DEFAULT_MODULE_LOCALE);\n+        String uuidParam = paramValue(request, \"module_id\", \"\");\n+\n+        StringBuilder query = new StringBuilder(\"select * from [pant:module] as module WHERE module.[jcr:uuid] = '\")\n+                .append(uuidParam)\n+                .append(\"'\");\n+\n+        JcrQueryHelper queryHelper = new JcrQueryHelper(request.getResourceResolver());\n+        try {\n+            Stream<Resource> resultStream = queryHelper.query(query.toString());\n+\n+            Optional<Resource> firstResource = resultStream.findFirst();\n+            if(!firstResource.isPresent()) {\n+                response.sendError(SC_NOT_FOUND, \"Requested content not found.\");\n+            }\n+\n+            resultStream = queryHelper.query(\"select * from [pant:module] as module\", 3, 0);\n+\n+            List<Map> related = new ArrayList<>();\n+            resultStream.map(r -> r.adaptTo(Module.class))\n+                    .forEach(module -> {\n+                            Map<String, String> m = new HashMap<>();\n+                            m.put(\"title\", module.getModuleLocale(locale).getVersion(\"1\").metadata().get().title().get());\n+                            m.put(\"url\", \"https://www.redhat.com\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4MTc2OA=="}, "originalCommit": {"oid": "a5ce7c0384a1dd60fd8b73606101059f44dcb824"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDE3OTgxOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/IncludedInAssembliesServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo1Mzo0MFrOGAbdCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo0ODowMlrOGCHOQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwMjk4Ng==", "bodyText": "Would it make more sense to set the path to \"/api/assemblies\"?", "url": "https://github.com/redhataccess/pantheon/pull/266#discussion_r403102986", "createdAt": "2020-04-03T15:53:40Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/IncludedInAssembliesServlet.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.redhat.pantheon.servlet.module;\n+\n+import com.redhat.pantheon.jcr.JcrQueryHelper;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n+import static com.redhat.pantheon.servlet.ServletUtils.writeAsJson;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+/**\n+ * Get operation to render a Released Module's related assembly list in JSON format.\n+ * Only two parameters are expected in the Get request:\n+ * 1. locale - Optional; indicates the locale that the module content is in, defaulted to en-US\n+ * 2. module_id - indicates the uuid string which uniquely identifies a module\n+ *\n+ * The url to GET a request from the server is /api/module/assemblies\n+ * Example: <server_url>/api/module/assemblies?locale=en-us&module_id=xyz\n+ * The said url is accessible outside of the system without any authentication.\n+ *\n+ * @author Ben Radey\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and module uuid to output module assemblies\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletPaths(value = \"/api/module/assemblies\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413ad995c8b1987bf187bd28c304036b942c6da3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2ODY3NA==", "bodyText": "Great question! I don't think so - because this api is \"what assemblies use this module\" - so it is still module-centric. We will have an \"/api/assembly\" api in the future, which will likely include \"what modules are used by this assembly\" - and that will be assembly-centric, justifying the url structure.", "url": "https://github.com/redhataccess/pantheon/pull/266#discussion_r404868674", "createdAt": "2020-04-07T14:48:02Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/IncludedInAssembliesServlet.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.redhat.pantheon.servlet.module;\n+\n+import com.redhat.pantheon.jcr.JcrQueryHelper;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.servlets.SlingSafeMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.DEFAULT_MODULE_LOCALE;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValue;\n+import static com.redhat.pantheon.servlet.ServletUtils.paramValueAsLocale;\n+import static com.redhat.pantheon.servlet.ServletUtils.writeAsJson;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+/**\n+ * Get operation to render a Released Module's related assembly list in JSON format.\n+ * Only two parameters are expected in the Get request:\n+ * 1. locale - Optional; indicates the locale that the module content is in, defaulted to en-US\n+ * 2. module_id - indicates the uuid string which uniquely identifies a module\n+ *\n+ * The url to GET a request from the server is /api/module/assemblies\n+ * Example: <server_url>/api/module/assemblies?locale=en-us&module_id=xyz\n+ * The said url is accessible outside of the system without any authentication.\n+ *\n+ * @author Ben Radey\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and module uuid to output module assemblies\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+@SlingServletPaths(value = \"/api/module/assemblies\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwMjk4Ng=="}, "originalCommit": {"oid": "413ad995c8b1987bf187bd28c304036b942c6da3"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 269, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}