{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NTgwMDY5", "number": 477, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMzo1NVrOE9UdUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMzo1M1rOE9XGxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzMzNzc4OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/contexts/ProductContext.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMzo1NVrOH58nlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMzo1NVrOH58nlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNDA1NQ==", "bodyText": "ProductContext was created as a way to share allProducts between ProductDetails and ProductListing", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530524055", "createdAt": "2020-11-25T17:03:55Z", "author": {"login": "grantsydney"}, "path": "pantheon-bundle/frontend/src/app/contexts/ProductContext.tsx", "diffHunk": "@@ -0,0 +1,47 @@\n+import React, { createContext, useState, useEffect } from \"react\";\n+\n+export let ProductContext = createContext<IProduct[]>([] as IProduct[]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzM1NDUxOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowODoxMFrOH58xtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxODoyMTo1M1rOH7cQYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNjY0Nw==", "bodyText": "I can has comment for function?\ne.g.\n/**\n * Does effects for things\n * @param [string] id Description on id\n */", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530526647", "createdAt": "2020-11-25T17:08:10Z", "author": {"login": "wesruv"}, "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "diffHunk": "@@ -1,188 +1,119 @@\n-import React, { Component } from \"react\";\n+import React, { useContext, useEffect, Component, useState } from \"react\";\n import {\n   DataList, DataListItem, DataListCell, DataListItemRow, DataListItemCells, DataListAction, FormGroup,\n   OptionsMenu, OptionsMenuItem, OptionsMenuToggle, TextInput\n } from \"@patternfly/react-core\";\n import \"@app/app.css\";\n-import { ProductDetails } from \"@app/productDetails\";\n import { CaretDownIcon } from \"@patternfly/react-icons\";\n+import { ProductContext, IProduct } from \"@app/contexts/ProductContext\"\n \n-class ProductListing extends Component<any, any, any> {\n+export default function ProductListing(props: any) {\n+  const allProducts = useContext(ProductContext);\n+  \n+  const [input, setInputField] = useState(\"\")\n+  const [filteredProducts, setFilteredProducts] = useState([] as IProduct[])\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      allProducts: [],\n-      input: \"\",\n-      isEmptyResults: false,\n-      isOpen: false,\n-      isProductDetails: false,\n-      productName: \"\",\n-      redirect: false,\n-      results: []\n-    };\n-  }\n-\n-  public componentDidMount() {\n-    if (this.props.match !== undefined) {\n-\n-      // prop will be true if it comes through nav links\n-      if (this.props.match.isExact === true) {\n-        this.state.results.map(data => {\n-          (data.isOpen as any) = false\n-        });\n-        this.setState({ isProductDetails: false })\n-      }\n-\n-      // setting prop to false once it comes through nav links\n-      this.props.match.isExact = false;\n-\n-    }\n-\n-    this.getProducts(this.state.allProducts)\n-  }\n-\n-  // render method transforms the react components into DOM nodes for the browser.\n-  public render() {\n-\n-\n-    return (\n-      <React.Fragment>\n-        {this.state.isProductDetails && (<ProductDetails productName={this.state.productName} />)}\n-        {!this.state.isProductDetails && (\n-          <div>\n-            <FormGroup\n-              label=\"Search Products\"\n-              fieldId=\"search\"\n-            >\n-              <div className=\"row-view\">\n-                <TextInput id=\"search\" type=\"text\" onChange={this.setInput} placeholder=\"Type product name to search\" value={this.state.input} />\n-              </div>\n-            </FormGroup>\n-            <DataList aria-label=\"single action data list example \">\n-              {!this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">Product Name</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-description\">Product Description</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-\n-              {!this.state.isEmptyResults && this.state.results.map(data => (\n-                <DataListItem aria-labelledby=\"multi-actions-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells key={data[\"jcr:uuid\"]}\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span id=\"{data.name}\">{data.name}</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>{data.description}</DataListCell>,\n-                        <DataListCell key=\"Dropdown content\">\n-                          <DataListAction\n-                            aria-labelledby=\"multi-actions-item1 {data['jcr:uuid']}\"\n-                            id=\"{data['jcr:uuid']}\"\n-                            aria-label=\"Actions\"\n-                          >\n-                            <OptionsMenu\n-                              isPlain={true}\n-                              id={data[\"jcr:uuid\"]}\n-                              menuItems={[\n-                                <OptionsMenuItem onSelect={this.onSelect(event, data)} key=\"dropdown\">Product Details</OptionsMenuItem>]}\n-                              isOpen={data.isOpen}\n-                              toggle={<OptionsMenuToggle onToggle={this.onToggle(data[\"jcr:uuid\"])} toggleTemplate={<CaretDownIcon aria-hidden=\"true\" />} aria-label=\"Sort by\" hideCaret={true} />} />\n-                          </DataListAction>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>))}\n-              {this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item0\" data-testid=\"emptyResults\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">No products found</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-            </DataList>\n-          </div>)}\n-      </React.Fragment>\n-    );\n-  }\n+  useEffect(() => {\n+    setFilteredProducts(allProducts)\n+  }, [allProducts])\n \n-  private getProducts = (allProducts) => {\n-    fetch(this.getProductsUrl())\n-      .then(response => response.json())\n-      .then(responseJSON => {\n-        let key; let singleProduct;\n-        for (const i of Object.keys(responseJSON.results)) {\n-          key = Object.keys(responseJSON.results)[i];\n-          singleProduct = responseJSON.results[key];\n-          singleProduct = Object.assign({ \"isOpen\": false }, singleProduct)\n-          allProducts.push(singleProduct)\n-        }\n-        this.setState({ results: allProducts })\n-      })\n-      .then(() => {\n-        if (Object.keys(this.state.results).length === 0) {\n-          this.setState({\n-            isEmptyResults: true\n-          });\n-        } else {\n-          this.setState({\n-            isEmptyResults: false\n-          });\n-        }\n-      })\n-  }\n-\n-  private getProductsUrl() {\n-    const backend = \"/content/products.query.json?nodeType=pant:product&orderby=name\"\n-    return backend\n-  }\n+  const onToggle = (id) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5MDk3OQ==", "bodyText": "It's beautiful \ud83d\ude22", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r532090979", "createdAt": "2020-11-28T18:21:53Z", "author": {"login": "wesruv"}, "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "diffHunk": "@@ -1,188 +1,119 @@\n-import React, { Component } from \"react\";\n+import React, { useContext, useEffect, Component, useState } from \"react\";\n import {\n   DataList, DataListItem, DataListCell, DataListItemRow, DataListItemCells, DataListAction, FormGroup,\n   OptionsMenu, OptionsMenuItem, OptionsMenuToggle, TextInput\n } from \"@patternfly/react-core\";\n import \"@app/app.css\";\n-import { ProductDetails } from \"@app/productDetails\";\n import { CaretDownIcon } from \"@patternfly/react-icons\";\n+import { ProductContext, IProduct } from \"@app/contexts/ProductContext\"\n \n-class ProductListing extends Component<any, any, any> {\n+export default function ProductListing(props: any) {\n+  const allProducts = useContext(ProductContext);\n+  \n+  const [input, setInputField] = useState(\"\")\n+  const [filteredProducts, setFilteredProducts] = useState([] as IProduct[])\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      allProducts: [],\n-      input: \"\",\n-      isEmptyResults: false,\n-      isOpen: false,\n-      isProductDetails: false,\n-      productName: \"\",\n-      redirect: false,\n-      results: []\n-    };\n-  }\n-\n-  public componentDidMount() {\n-    if (this.props.match !== undefined) {\n-\n-      // prop will be true if it comes through nav links\n-      if (this.props.match.isExact === true) {\n-        this.state.results.map(data => {\n-          (data.isOpen as any) = false\n-        });\n-        this.setState({ isProductDetails: false })\n-      }\n-\n-      // setting prop to false once it comes through nav links\n-      this.props.match.isExact = false;\n-\n-    }\n-\n-    this.getProducts(this.state.allProducts)\n-  }\n-\n-  // render method transforms the react components into DOM nodes for the browser.\n-  public render() {\n-\n-\n-    return (\n-      <React.Fragment>\n-        {this.state.isProductDetails && (<ProductDetails productName={this.state.productName} />)}\n-        {!this.state.isProductDetails && (\n-          <div>\n-            <FormGroup\n-              label=\"Search Products\"\n-              fieldId=\"search\"\n-            >\n-              <div className=\"row-view\">\n-                <TextInput id=\"search\" type=\"text\" onChange={this.setInput} placeholder=\"Type product name to search\" value={this.state.input} />\n-              </div>\n-            </FormGroup>\n-            <DataList aria-label=\"single action data list example \">\n-              {!this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">Product Name</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-description\">Product Description</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-\n-              {!this.state.isEmptyResults && this.state.results.map(data => (\n-                <DataListItem aria-labelledby=\"multi-actions-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells key={data[\"jcr:uuid\"]}\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span id=\"{data.name}\">{data.name}</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>{data.description}</DataListCell>,\n-                        <DataListCell key=\"Dropdown content\">\n-                          <DataListAction\n-                            aria-labelledby=\"multi-actions-item1 {data['jcr:uuid']}\"\n-                            id=\"{data['jcr:uuid']}\"\n-                            aria-label=\"Actions\"\n-                          >\n-                            <OptionsMenu\n-                              isPlain={true}\n-                              id={data[\"jcr:uuid\"]}\n-                              menuItems={[\n-                                <OptionsMenuItem onSelect={this.onSelect(event, data)} key=\"dropdown\">Product Details</OptionsMenuItem>]}\n-                              isOpen={data.isOpen}\n-                              toggle={<OptionsMenuToggle onToggle={this.onToggle(data[\"jcr:uuid\"])} toggleTemplate={<CaretDownIcon aria-hidden=\"true\" />} aria-label=\"Sort by\" hideCaret={true} />} />\n-                          </DataListAction>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>))}\n-              {this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item0\" data-testid=\"emptyResults\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">No products found</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-            </DataList>\n-          </div>)}\n-      </React.Fragment>\n-    );\n-  }\n+  useEffect(() => {\n+    setFilteredProducts(allProducts)\n+  }, [allProducts])\n \n-  private getProducts = (allProducts) => {\n-    fetch(this.getProductsUrl())\n-      .then(response => response.json())\n-      .then(responseJSON => {\n-        let key; let singleProduct;\n-        for (const i of Object.keys(responseJSON.results)) {\n-          key = Object.keys(responseJSON.results)[i];\n-          singleProduct = responseJSON.results[key];\n-          singleProduct = Object.assign({ \"isOpen\": false }, singleProduct)\n-          allProducts.push(singleProduct)\n-        }\n-        this.setState({ results: allProducts })\n-      })\n-      .then(() => {\n-        if (Object.keys(this.state.results).length === 0) {\n-          this.setState({\n-            isEmptyResults: true\n-          });\n-        } else {\n-          this.setState({\n-            isEmptyResults: false\n-          });\n-        }\n-      })\n-  }\n-\n-  private getProductsUrl() {\n-    const backend = \"/content/products.query.json?nodeType=pant:product&orderby=name\"\n-    return backend\n-  }\n+  const onToggle = (id) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNjY0Nw=="}, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzM1NTEzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowODoyMFrOH58yFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowODoyMFrOH58yFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNjc0MQ==", "bodyText": "I can has comment for function?", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530526741", "createdAt": "2020-11-25T17:08:20Z", "author": {"login": "wesruv"}, "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "diffHunk": "@@ -1,188 +1,119 @@\n-import React, { Component } from \"react\";\n+import React, { useContext, useEffect, Component, useState } from \"react\";\n import {\n   DataList, DataListItem, DataListCell, DataListItemRow, DataListItemCells, DataListAction, FormGroup,\n   OptionsMenu, OptionsMenuItem, OptionsMenuToggle, TextInput\n } from \"@patternfly/react-core\";\n import \"@app/app.css\";\n-import { ProductDetails } from \"@app/productDetails\";\n import { CaretDownIcon } from \"@patternfly/react-icons\";\n+import { ProductContext, IProduct } from \"@app/contexts/ProductContext\"\n \n-class ProductListing extends Component<any, any, any> {\n+export default function ProductListing(props: any) {\n+  const allProducts = useContext(ProductContext);\n+  \n+  const [input, setInputField] = useState(\"\")\n+  const [filteredProducts, setFilteredProducts] = useState([] as IProduct[])\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      allProducts: [],\n-      input: \"\",\n-      isEmptyResults: false,\n-      isOpen: false,\n-      isProductDetails: false,\n-      productName: \"\",\n-      redirect: false,\n-      results: []\n-    };\n-  }\n-\n-  public componentDidMount() {\n-    if (this.props.match !== undefined) {\n-\n-      // prop will be true if it comes through nav links\n-      if (this.props.match.isExact === true) {\n-        this.state.results.map(data => {\n-          (data.isOpen as any) = false\n-        });\n-        this.setState({ isProductDetails: false })\n-      }\n-\n-      // setting prop to false once it comes through nav links\n-      this.props.match.isExact = false;\n-\n-    }\n-\n-    this.getProducts(this.state.allProducts)\n-  }\n-\n-  // render method transforms the react components into DOM nodes for the browser.\n-  public render() {\n-\n-\n-    return (\n-      <React.Fragment>\n-        {this.state.isProductDetails && (<ProductDetails productName={this.state.productName} />)}\n-        {!this.state.isProductDetails && (\n-          <div>\n-            <FormGroup\n-              label=\"Search Products\"\n-              fieldId=\"search\"\n-            >\n-              <div className=\"row-view\">\n-                <TextInput id=\"search\" type=\"text\" onChange={this.setInput} placeholder=\"Type product name to search\" value={this.state.input} />\n-              </div>\n-            </FormGroup>\n-            <DataList aria-label=\"single action data list example \">\n-              {!this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">Product Name</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-description\">Product Description</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-\n-              {!this.state.isEmptyResults && this.state.results.map(data => (\n-                <DataListItem aria-labelledby=\"multi-actions-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells key={data[\"jcr:uuid\"]}\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span id=\"{data.name}\">{data.name}</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>{data.description}</DataListCell>,\n-                        <DataListCell key=\"Dropdown content\">\n-                          <DataListAction\n-                            aria-labelledby=\"multi-actions-item1 {data['jcr:uuid']}\"\n-                            id=\"{data['jcr:uuid']}\"\n-                            aria-label=\"Actions\"\n-                          >\n-                            <OptionsMenu\n-                              isPlain={true}\n-                              id={data[\"jcr:uuid\"]}\n-                              menuItems={[\n-                                <OptionsMenuItem onSelect={this.onSelect(event, data)} key=\"dropdown\">Product Details</OptionsMenuItem>]}\n-                              isOpen={data.isOpen}\n-                              toggle={<OptionsMenuToggle onToggle={this.onToggle(data[\"jcr:uuid\"])} toggleTemplate={<CaretDownIcon aria-hidden=\"true\" />} aria-label=\"Sort by\" hideCaret={true} />} />\n-                          </DataListAction>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>))}\n-              {this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item0\" data-testid=\"emptyResults\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">No products found</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-            </DataList>\n-          </div>)}\n-      </React.Fragment>\n-    );\n-  }\n+  useEffect(() => {\n+    setFilteredProducts(allProducts)\n+  }, [allProducts])\n \n-  private getProducts = (allProducts) => {\n-    fetch(this.getProductsUrl())\n-      .then(response => response.json())\n-      .then(responseJSON => {\n-        let key; let singleProduct;\n-        for (const i of Object.keys(responseJSON.results)) {\n-          key = Object.keys(responseJSON.results)[i];\n-          singleProduct = responseJSON.results[key];\n-          singleProduct = Object.assign({ \"isOpen\": false }, singleProduct)\n-          allProducts.push(singleProduct)\n-        }\n-        this.setState({ results: allProducts })\n-      })\n-      .then(() => {\n-        if (Object.keys(this.state.results).length === 0) {\n-          this.setState({\n-            isEmptyResults: true\n-          });\n-        } else {\n-          this.setState({\n-            isEmptyResults: false\n-          });\n-        }\n-      })\n-  }\n-\n-  private getProductsUrl() {\n-    const backend = \"/content/products.query.json?nodeType=pant:product&orderby=name\"\n-    return backend\n-  }\n+  const onToggle = (id) => {\n+    updateProduct(id);\n+  };\n \n-  private onToggle = (id) => (event: any) => {\n-    this.state.results.map(data => {\n-      if (data[\"jcr:uuid\"] === id) {\n-        (data.isOpen as any) = !data.isOpen\n-        this.setState({ isProductDetails: false })\n-      }\n-    });\n+  const onSelect = (id) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzM1NTU4OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowODoyNlrOH58yWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo0MjoyNVrOH86vwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNjgxMA==", "bodyText": "I can has comment for function?", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530526810", "createdAt": "2020-11-25T17:08:26Z", "author": {"login": "wesruv"}, "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "diffHunk": "@@ -1,188 +1,119 @@\n-import React, { Component } from \"react\";\n+import React, { useContext, useEffect, Component, useState } from \"react\";\n import {\n   DataList, DataListItem, DataListCell, DataListItemRow, DataListItemCells, DataListAction, FormGroup,\n   OptionsMenu, OptionsMenuItem, OptionsMenuToggle, TextInput\n } from \"@patternfly/react-core\";\n import \"@app/app.css\";\n-import { ProductDetails } from \"@app/productDetails\";\n import { CaretDownIcon } from \"@patternfly/react-icons\";\n+import { ProductContext, IProduct } from \"@app/contexts/ProductContext\"\n \n-class ProductListing extends Component<any, any, any> {\n+export default function ProductListing(props: any) {\n+  const allProducts = useContext(ProductContext);\n+  \n+  const [input, setInputField] = useState(\"\")\n+  const [filteredProducts, setFilteredProducts] = useState([] as IProduct[])\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      allProducts: [],\n-      input: \"\",\n-      isEmptyResults: false,\n-      isOpen: false,\n-      isProductDetails: false,\n-      productName: \"\",\n-      redirect: false,\n-      results: []\n-    };\n-  }\n-\n-  public componentDidMount() {\n-    if (this.props.match !== undefined) {\n-\n-      // prop will be true if it comes through nav links\n-      if (this.props.match.isExact === true) {\n-        this.state.results.map(data => {\n-          (data.isOpen as any) = false\n-        });\n-        this.setState({ isProductDetails: false })\n-      }\n-\n-      // setting prop to false once it comes through nav links\n-      this.props.match.isExact = false;\n-\n-    }\n-\n-    this.getProducts(this.state.allProducts)\n-  }\n-\n-  // render method transforms the react components into DOM nodes for the browser.\n-  public render() {\n-\n-\n-    return (\n-      <React.Fragment>\n-        {this.state.isProductDetails && (<ProductDetails productName={this.state.productName} />)}\n-        {!this.state.isProductDetails && (\n-          <div>\n-            <FormGroup\n-              label=\"Search Products\"\n-              fieldId=\"search\"\n-            >\n-              <div className=\"row-view\">\n-                <TextInput id=\"search\" type=\"text\" onChange={this.setInput} placeholder=\"Type product name to search\" value={this.state.input} />\n-              </div>\n-            </FormGroup>\n-            <DataList aria-label=\"single action data list example \">\n-              {!this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">Product Name</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-description\">Product Description</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-\n-              {!this.state.isEmptyResults && this.state.results.map(data => (\n-                <DataListItem aria-labelledby=\"multi-actions-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells key={data[\"jcr:uuid\"]}\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span id=\"{data.name}\">{data.name}</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>{data.description}</DataListCell>,\n-                        <DataListCell key=\"Dropdown content\">\n-                          <DataListAction\n-                            aria-labelledby=\"multi-actions-item1 {data['jcr:uuid']}\"\n-                            id=\"{data['jcr:uuid']}\"\n-                            aria-label=\"Actions\"\n-                          >\n-                            <OptionsMenu\n-                              isPlain={true}\n-                              id={data[\"jcr:uuid\"]}\n-                              menuItems={[\n-                                <OptionsMenuItem onSelect={this.onSelect(event, data)} key=\"dropdown\">Product Details</OptionsMenuItem>]}\n-                              isOpen={data.isOpen}\n-                              toggle={<OptionsMenuToggle onToggle={this.onToggle(data[\"jcr:uuid\"])} toggleTemplate={<CaretDownIcon aria-hidden=\"true\" />} aria-label=\"Sort by\" hideCaret={true} />} />\n-                          </DataListAction>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>))}\n-              {this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item0\" data-testid=\"emptyResults\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">No products found</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-            </DataList>\n-          </div>)}\n-      </React.Fragment>\n-    );\n-  }\n+  useEffect(() => {\n+    setFilteredProducts(allProducts)\n+  }, [allProducts])\n \n-  private getProducts = (allProducts) => {\n-    fetch(this.getProductsUrl())\n-      .then(response => response.json())\n-      .then(responseJSON => {\n-        let key; let singleProduct;\n-        for (const i of Object.keys(responseJSON.results)) {\n-          key = Object.keys(responseJSON.results)[i];\n-          singleProduct = responseJSON.results[key];\n-          singleProduct = Object.assign({ \"isOpen\": false }, singleProduct)\n-          allProducts.push(singleProduct)\n-        }\n-        this.setState({ results: allProducts })\n-      })\n-      .then(() => {\n-        if (Object.keys(this.state.results).length === 0) {\n-          this.setState({\n-            isEmptyResults: true\n-          });\n-        } else {\n-          this.setState({\n-            isEmptyResults: false\n-          });\n-        }\n-      })\n-  }\n-\n-  private getProductsUrl() {\n-    const backend = \"/content/products.query.json?nodeType=pant:product&orderby=name\"\n-    return backend\n-  }\n+  const onToggle = (id) => {\n+    updateProduct(id);\n+  };\n \n-  private onToggle = (id) => (event: any) => {\n-    this.state.results.map(data => {\n-      if (data[\"jcr:uuid\"] === id) {\n-        (data.isOpen as any) = !data.isOpen\n-        this.setState({ isProductDetails: false })\n-      }\n-    });\n+  const onSelect = (id) => {\n+    // @ts-ignore\n+    window.location += `/${id}`;\n   };\n \n-  private onSelect = (event, data) => () => {\n-    this.setState({\n-      isProductDetails: !this.state.isProductDetails,\n-      productName: data.name,\n+  const setInput = (text, event) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5MTEzNw==", "bodyText": "Does this one need a comment? I vote yes, but if you feel like it doesn't I'm cool with it :D", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r532091137", "createdAt": "2020-11-28T18:24:07Z", "author": {"login": "wesruv"}, "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "diffHunk": "@@ -1,188 +1,119 @@\n-import React, { Component } from \"react\";\n+import React, { useContext, useEffect, Component, useState } from \"react\";\n import {\n   DataList, DataListItem, DataListCell, DataListItemRow, DataListItemCells, DataListAction, FormGroup,\n   OptionsMenu, OptionsMenuItem, OptionsMenuToggle, TextInput\n } from \"@patternfly/react-core\";\n import \"@app/app.css\";\n-import { ProductDetails } from \"@app/productDetails\";\n import { CaretDownIcon } from \"@patternfly/react-icons\";\n+import { ProductContext, IProduct } from \"@app/contexts/ProductContext\"\n \n-class ProductListing extends Component<any, any, any> {\n+export default function ProductListing(props: any) {\n+  const allProducts = useContext(ProductContext);\n+  \n+  const [input, setInputField] = useState(\"\")\n+  const [filteredProducts, setFilteredProducts] = useState([] as IProduct[])\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      allProducts: [],\n-      input: \"\",\n-      isEmptyResults: false,\n-      isOpen: false,\n-      isProductDetails: false,\n-      productName: \"\",\n-      redirect: false,\n-      results: []\n-    };\n-  }\n-\n-  public componentDidMount() {\n-    if (this.props.match !== undefined) {\n-\n-      // prop will be true if it comes through nav links\n-      if (this.props.match.isExact === true) {\n-        this.state.results.map(data => {\n-          (data.isOpen as any) = false\n-        });\n-        this.setState({ isProductDetails: false })\n-      }\n-\n-      // setting prop to false once it comes through nav links\n-      this.props.match.isExact = false;\n-\n-    }\n-\n-    this.getProducts(this.state.allProducts)\n-  }\n-\n-  // render method transforms the react components into DOM nodes for the browser.\n-  public render() {\n-\n-\n-    return (\n-      <React.Fragment>\n-        {this.state.isProductDetails && (<ProductDetails productName={this.state.productName} />)}\n-        {!this.state.isProductDetails && (\n-          <div>\n-            <FormGroup\n-              label=\"Search Products\"\n-              fieldId=\"search\"\n-            >\n-              <div className=\"row-view\">\n-                <TextInput id=\"search\" type=\"text\" onChange={this.setInput} placeholder=\"Type product name to search\" value={this.state.input} />\n-              </div>\n-            </FormGroup>\n-            <DataList aria-label=\"single action data list example \">\n-              {!this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">Product Name</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-description\">Product Description</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-\n-              {!this.state.isEmptyResults && this.state.results.map(data => (\n-                <DataListItem aria-labelledby=\"multi-actions-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells key={data[\"jcr:uuid\"]}\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span id=\"{data.name}\">{data.name}</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>{data.description}</DataListCell>,\n-                        <DataListCell key=\"Dropdown content\">\n-                          <DataListAction\n-                            aria-labelledby=\"multi-actions-item1 {data['jcr:uuid']}\"\n-                            id=\"{data['jcr:uuid']}\"\n-                            aria-label=\"Actions\"\n-                          >\n-                            <OptionsMenu\n-                              isPlain={true}\n-                              id={data[\"jcr:uuid\"]}\n-                              menuItems={[\n-                                <OptionsMenuItem onSelect={this.onSelect(event, data)} key=\"dropdown\">Product Details</OptionsMenuItem>]}\n-                              isOpen={data.isOpen}\n-                              toggle={<OptionsMenuToggle onToggle={this.onToggle(data[\"jcr:uuid\"])} toggleTemplate={<CaretDownIcon aria-hidden=\"true\" />} aria-label=\"Sort by\" hideCaret={true} />} />\n-                          </DataListAction>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>))}\n-              {this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item0\" data-testid=\"emptyResults\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">No products found</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-            </DataList>\n-          </div>)}\n-      </React.Fragment>\n-    );\n-  }\n+  useEffect(() => {\n+    setFilteredProducts(allProducts)\n+  }, [allProducts])\n \n-  private getProducts = (allProducts) => {\n-    fetch(this.getProductsUrl())\n-      .then(response => response.json())\n-      .then(responseJSON => {\n-        let key; let singleProduct;\n-        for (const i of Object.keys(responseJSON.results)) {\n-          key = Object.keys(responseJSON.results)[i];\n-          singleProduct = responseJSON.results[key];\n-          singleProduct = Object.assign({ \"isOpen\": false }, singleProduct)\n-          allProducts.push(singleProduct)\n-        }\n-        this.setState({ results: allProducts })\n-      })\n-      .then(() => {\n-        if (Object.keys(this.state.results).length === 0) {\n-          this.setState({\n-            isEmptyResults: true\n-          });\n-        } else {\n-          this.setState({\n-            isEmptyResults: false\n-          });\n-        }\n-      })\n-  }\n-\n-  private getProductsUrl() {\n-    const backend = \"/content/products.query.json?nodeType=pant:product&orderby=name\"\n-    return backend\n-  }\n+  const onToggle = (id) => {\n+    updateProduct(id);\n+  };\n \n-  private onToggle = (id) => (event: any) => {\n-    this.state.results.map(data => {\n-      if (data[\"jcr:uuid\"] === id) {\n-        (data.isOpen as any) = !data.isOpen\n-        this.setState({ isProductDetails: false })\n-      }\n-    });\n+  const onSelect = (id) => {\n+    // @ts-ignore\n+    window.location += `/${id}`;\n   };\n \n-  private onSelect = (event, data) => () => {\n-    this.setState({\n-      isProductDetails: !this.state.isProductDetails,\n-      productName: data.name,\n+  const setInput = (text, event) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNjgxMA=="}, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzOTEwNQ==", "bodyText": "yes added a comment to this function in a diff commit", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r533639105", "createdAt": "2020-12-01T18:42:25Z", "author": {"login": "grantsydney"}, "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "diffHunk": "@@ -1,188 +1,119 @@\n-import React, { Component } from \"react\";\n+import React, { useContext, useEffect, Component, useState } from \"react\";\n import {\n   DataList, DataListItem, DataListCell, DataListItemRow, DataListItemCells, DataListAction, FormGroup,\n   OptionsMenu, OptionsMenuItem, OptionsMenuToggle, TextInput\n } from \"@patternfly/react-core\";\n import \"@app/app.css\";\n-import { ProductDetails } from \"@app/productDetails\";\n import { CaretDownIcon } from \"@patternfly/react-icons\";\n+import { ProductContext, IProduct } from \"@app/contexts/ProductContext\"\n \n-class ProductListing extends Component<any, any, any> {\n+export default function ProductListing(props: any) {\n+  const allProducts = useContext(ProductContext);\n+  \n+  const [input, setInputField] = useState(\"\")\n+  const [filteredProducts, setFilteredProducts] = useState([] as IProduct[])\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      allProducts: [],\n-      input: \"\",\n-      isEmptyResults: false,\n-      isOpen: false,\n-      isProductDetails: false,\n-      productName: \"\",\n-      redirect: false,\n-      results: []\n-    };\n-  }\n-\n-  public componentDidMount() {\n-    if (this.props.match !== undefined) {\n-\n-      // prop will be true if it comes through nav links\n-      if (this.props.match.isExact === true) {\n-        this.state.results.map(data => {\n-          (data.isOpen as any) = false\n-        });\n-        this.setState({ isProductDetails: false })\n-      }\n-\n-      // setting prop to false once it comes through nav links\n-      this.props.match.isExact = false;\n-\n-    }\n-\n-    this.getProducts(this.state.allProducts)\n-  }\n-\n-  // render method transforms the react components into DOM nodes for the browser.\n-  public render() {\n-\n-\n-    return (\n-      <React.Fragment>\n-        {this.state.isProductDetails && (<ProductDetails productName={this.state.productName} />)}\n-        {!this.state.isProductDetails && (\n-          <div>\n-            <FormGroup\n-              label=\"Search Products\"\n-              fieldId=\"search\"\n-            >\n-              <div className=\"row-view\">\n-                <TextInput id=\"search\" type=\"text\" onChange={this.setInput} placeholder=\"Type product name to search\" value={this.state.input} />\n-              </div>\n-            </FormGroup>\n-            <DataList aria-label=\"single action data list example \">\n-              {!this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">Product Name</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-description\">Product Description</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-\n-              {!this.state.isEmptyResults && this.state.results.map(data => (\n-                <DataListItem aria-labelledby=\"multi-actions-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells key={data[\"jcr:uuid\"]}\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span id=\"{data.name}\">{data.name}</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>{data.description}</DataListCell>,\n-                        <DataListCell key=\"Dropdown content\">\n-                          <DataListAction\n-                            aria-labelledby=\"multi-actions-item1 {data['jcr:uuid']}\"\n-                            id=\"{data['jcr:uuid']}\"\n-                            aria-label=\"Actions\"\n-                          >\n-                            <OptionsMenu\n-                              isPlain={true}\n-                              id={data[\"jcr:uuid\"]}\n-                              menuItems={[\n-                                <OptionsMenuItem onSelect={this.onSelect(event, data)} key=\"dropdown\">Product Details</OptionsMenuItem>]}\n-                              isOpen={data.isOpen}\n-                              toggle={<OptionsMenuToggle onToggle={this.onToggle(data[\"jcr:uuid\"])} toggleTemplate={<CaretDownIcon aria-hidden=\"true\" />} aria-label=\"Sort by\" hideCaret={true} />} />\n-                          </DataListAction>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>))}\n-              {this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item0\" data-testid=\"emptyResults\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">No products found</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-            </DataList>\n-          </div>)}\n-      </React.Fragment>\n-    );\n-  }\n+  useEffect(() => {\n+    setFilteredProducts(allProducts)\n+  }, [allProducts])\n \n-  private getProducts = (allProducts) => {\n-    fetch(this.getProductsUrl())\n-      .then(response => response.json())\n-      .then(responseJSON => {\n-        let key; let singleProduct;\n-        for (const i of Object.keys(responseJSON.results)) {\n-          key = Object.keys(responseJSON.results)[i];\n-          singleProduct = responseJSON.results[key];\n-          singleProduct = Object.assign({ \"isOpen\": false }, singleProduct)\n-          allProducts.push(singleProduct)\n-        }\n-        this.setState({ results: allProducts })\n-      })\n-      .then(() => {\n-        if (Object.keys(this.state.results).length === 0) {\n-          this.setState({\n-            isEmptyResults: true\n-          });\n-        } else {\n-          this.setState({\n-            isEmptyResults: false\n-          });\n-        }\n-      })\n-  }\n-\n-  private getProductsUrl() {\n-    const backend = \"/content/products.query.json?nodeType=pant:product&orderby=name\"\n-    return backend\n-  }\n+  const onToggle = (id) => {\n+    updateProduct(id);\n+  };\n \n-  private onToggle = (id) => (event: any) => {\n-    this.state.results.map(data => {\n-      if (data[\"jcr:uuid\"] === id) {\n-        (data.isOpen as any) = !data.isOpen\n-        this.setState({ isProductDetails: false })\n-      }\n-    });\n+  const onSelect = (id) => {\n+    // @ts-ignore\n+    window.location += `/${id}`;\n   };\n \n-  private onSelect = (event, data) => () => {\n-    this.setState({\n-      isProductDetails: !this.state.isProductDetails,\n-      productName: data.name,\n+  const setInput = (text, event) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNjgxMA=="}, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzM2NDkzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzoxMDozOFrOH584EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzoxMDozOFrOH584EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyODI3Mw==", "bodyText": "I can has comment for function?", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530528273", "createdAt": "2020-11-25T17:10:38Z", "author": {"login": "wesruv"}, "path": "pantheon-bundle/frontend/src/app/productListing.tsx", "diffHunk": "@@ -1,188 +1,119 @@\n-import React, { Component } from \"react\";\n+import React, { useContext, useEffect, Component, useState } from \"react\";\n import {\n   DataList, DataListItem, DataListCell, DataListItemRow, DataListItemCells, DataListAction, FormGroup,\n   OptionsMenu, OptionsMenuItem, OptionsMenuToggle, TextInput\n } from \"@patternfly/react-core\";\n import \"@app/app.css\";\n-import { ProductDetails } from \"@app/productDetails\";\n import { CaretDownIcon } from \"@patternfly/react-icons\";\n+import { ProductContext, IProduct } from \"@app/contexts/ProductContext\"\n \n-class ProductListing extends Component<any, any, any> {\n+export default function ProductListing(props: any) {\n+  const allProducts = useContext(ProductContext);\n+  \n+  const [input, setInputField] = useState(\"\")\n+  const [filteredProducts, setFilteredProducts] = useState([] as IProduct[])\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      allProducts: [],\n-      input: \"\",\n-      isEmptyResults: false,\n-      isOpen: false,\n-      isProductDetails: false,\n-      productName: \"\",\n-      redirect: false,\n-      results: []\n-    };\n-  }\n-\n-  public componentDidMount() {\n-    if (this.props.match !== undefined) {\n-\n-      // prop will be true if it comes through nav links\n-      if (this.props.match.isExact === true) {\n-        this.state.results.map(data => {\n-          (data.isOpen as any) = false\n-        });\n-        this.setState({ isProductDetails: false })\n-      }\n-\n-      // setting prop to false once it comes through nav links\n-      this.props.match.isExact = false;\n-\n-    }\n-\n-    this.getProducts(this.state.allProducts)\n-  }\n-\n-  // render method transforms the react components into DOM nodes for the browser.\n-  public render() {\n-\n-\n-    return (\n-      <React.Fragment>\n-        {this.state.isProductDetails && (<ProductDetails productName={this.state.productName} />)}\n-        {!this.state.isProductDetails && (\n-          <div>\n-            <FormGroup\n-              label=\"Search Products\"\n-              fieldId=\"search\"\n-            >\n-              <div className=\"row-view\">\n-                <TextInput id=\"search\" type=\"text\" onChange={this.setInput} placeholder=\"Type product name to search\" value={this.state.input} />\n-              </div>\n-            </FormGroup>\n-            <DataList aria-label=\"single action data list example \">\n-              {!this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">Product Name</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-description\">Product Description</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-\n-              {!this.state.isEmptyResults && this.state.results.map(data => (\n-                <DataListItem aria-labelledby=\"multi-actions-item1\">\n-                  <DataListItemRow>\n-                    <DataListItemCells key={data[\"jcr:uuid\"]}\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\">\n-                          <span id=\"{data.name}\">{data.name}</span>\n-                        </DataListCell>,\n-                        <DataListCell key=\"secondary content\" width={2}>{data.description}</DataListCell>,\n-                        <DataListCell key=\"Dropdown content\">\n-                          <DataListAction\n-                            aria-labelledby=\"multi-actions-item1 {data['jcr:uuid']}\"\n-                            id=\"{data['jcr:uuid']}\"\n-                            aria-label=\"Actions\"\n-                          >\n-                            <OptionsMenu\n-                              isPlain={true}\n-                              id={data[\"jcr:uuid\"]}\n-                              menuItems={[\n-                                <OptionsMenuItem onSelect={this.onSelect(event, data)} key=\"dropdown\">Product Details</OptionsMenuItem>]}\n-                              isOpen={data.isOpen}\n-                              toggle={<OptionsMenuToggle onToggle={this.onToggle(data[\"jcr:uuid\"])} toggleTemplate={<CaretDownIcon aria-hidden=\"true\" />} aria-label=\"Sort by\" hideCaret={true} />} />\n-                          </DataListAction>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>))}\n-              {this.state.isEmptyResults && (\n-                <DataListItem aria-labelledby=\"single-action-item0\" data-testid=\"emptyResults\">\n-                  <DataListItemRow>\n-                    <DataListItemCells\n-                      dataListCells={[\n-                        <DataListCell key=\"primary content\" width={2}>\n-                          <span className=\"sp-prop-nosort\" id=\"product-name\">No products found</span>\n-                        </DataListCell>\n-                      ]}\n-                    />\n-                  </DataListItemRow>\n-                </DataListItem>\n-              )}\n-            </DataList>\n-          </div>)}\n-      </React.Fragment>\n-    );\n-  }\n+  useEffect(() => {\n+    setFilteredProducts(allProducts)\n+  }, [allProducts])\n \n-  private getProducts = (allProducts) => {\n-    fetch(this.getProductsUrl())\n-      .then(response => response.json())\n-      .then(responseJSON => {\n-        let key; let singleProduct;\n-        for (const i of Object.keys(responseJSON.results)) {\n-          key = Object.keys(responseJSON.results)[i];\n-          singleProduct = responseJSON.results[key];\n-          singleProduct = Object.assign({ \"isOpen\": false }, singleProduct)\n-          allProducts.push(singleProduct)\n-        }\n-        this.setState({ results: allProducts })\n-      })\n-      .then(() => {\n-        if (Object.keys(this.state.results).length === 0) {\n-          this.setState({\n-            isEmptyResults: true\n-          });\n-        } else {\n-          this.setState({\n-            isEmptyResults: false\n-          });\n-        }\n-      })\n-  }\n-\n-  private getProductsUrl() {\n-    const backend = \"/content/products.query.json?nodeType=pant:product&orderby=name\"\n-    return backend\n-  }\n+  const onToggle = (id) => {\n+    updateProduct(id);\n+  };\n \n-  private onToggle = (id) => (event: any) => {\n-    this.state.results.map(data => {\n-      if (data[\"jcr:uuid\"] === id) {\n-        (data.isOpen as any) = !data.isOpen\n-        this.setState({ isProductDetails: false })\n-      }\n-    });\n+  const onSelect = (id) => {\n+    // @ts-ignore\n+    window.location += `/${id}`;\n   };\n \n-  private onSelect = (event, data) => () => {\n-    this.setState({\n-      isProductDetails: !this.state.isProductDetails,\n-      productName: data.name,\n+  const setInput = (text, event) => {\n+    setInputField(text)\n+    const filteredProducts = allProducts.filter(product => {\n+      return product.name.toLowerCase().includes(text.toLowerCase())\n     });\n-  };\n+    setFilteredProducts(filteredProducts)\n+  }\n \n-  private setInput = input => {\n-    const versions: string[] = [];\n-    let searchString = \"\";\n-    this.setState({ input })\n-    this.state.allProducts.map(data => {\n-      searchString = \"\" + data.name\n-      if (searchString.toLowerCase().includes(input.toLowerCase())) {\n-        versions.push(data)\n+  function updateProduct(id: string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzc2OTA4OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/contexts/ProductContext.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMjo1OVrOH6AxZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMjo1OVrOH6AxZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MjEwMQ==", "bodyText": "\"jcr:created\" is a type Date. e.g.\n\"jcr:created\": \"Mon Sep 28 2020 11:20:19 GMT+0000\",", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530592101", "createdAt": "2020-11-25T19:12:59Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/frontend/src/app/contexts/ProductContext.tsx", "diffHunk": "@@ -0,0 +1,47 @@\n+import React, { createContext, useState, useEffect } from \"react\";\n+\n+export let ProductContext = createContext<IProduct[]>([] as IProduct[]);\n+\n+export interface IProductProviderProps {\n+  children?: React.ReactNode;\n+}\n+\n+export interface IProduct {\n+  description: string,\n+  isOpen: boolean,\n+  [\"jcr:created\"]: number,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzc3MTU3OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/contexts/ProductContext.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMzo1M1rOH6AzAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMzo1M1rOH6AzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MjUxNA==", "bodyText": "\"jcr:lastModified\" is a type Date. e.g\n\"jcr:lastModified\": \"Mon Sep 28 2020 11:20:19 GMT+0000\",", "url": "https://github.com/redhataccess/pantheon/pull/477#discussion_r530592514", "createdAt": "2020-11-25T19:13:53Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/frontend/src/app/contexts/ProductContext.tsx", "diffHunk": "@@ -0,0 +1,47 @@\n+import React, { createContext, useState, useEffect } from \"react\";\n+\n+export let ProductContext = createContext<IProduct[]>([] as IProduct[]);\n+\n+export interface IProductProviderProps {\n+  children?: React.ReactNode;\n+}\n+\n+export interface IProduct {\n+  description: string,\n+  isOpen: boolean,\n+  [\"jcr:created\"]: number,\n+  [\"jcr:createdBy\"]: string,\n+  ['jcr:lastModified']: number,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d409ff0949f817150a40fe37be6495976dbd26"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 118, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}