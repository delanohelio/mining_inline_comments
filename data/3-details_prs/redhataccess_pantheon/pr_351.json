{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1OTIzMjc1", "number": 351, "title": "Adds Assembly classes to our Sling Model for future development work", "bodyText": "", "createdAt": "2020-07-23T20:00:43Z", "url": "https://github.com/redhataccess/pantheon/pull/351", "merged": true, "mergeCommit": {"oid": "04fea9d17d0d10ab3f7b295537318e66ff2b00ea"}, "closed": true, "closedAt": "2020-07-24T18:24:44Z", "author": {"login": "benradey"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3bcfCAH2gAyNDU1OTIzMjc1OmM5YzYzZTRiZDZjN2NhNjM4MjJmZGYzOGY5NmFmYzlkNjlmOTEwMDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4G1VyAFqTQ1NTAzNDIyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c9c63e4bd6c7ca63822fdf38f96afc9d69f91004", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/c9c63e4bd6c7ca63822fdf38f96afc9d69f91004", "committedDate": "2020-07-22T14:10:28Z", "message": "intermediate checkin, code may not work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6611df4466cf3f9a4e5372d7938a712e4a57717", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/c6611df4466cf3f9a4e5372d7938a712e4a57717", "committedDate": "2020-07-23T19:28:17Z", "message": "Code works"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e8ef9d2bba4017a622fa914e9d90ee3c1ccf241", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/8e8ef9d2bba4017a622fa914e9d90ee3c1ccf241", "committedDate": "2020-07-23T19:51:51Z", "message": "Adding assembly model classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/f152721155b67d0faaa455b5d8f18c0190577323", "committedDate": "2020-07-23T19:59:19Z", "message": "Removing some imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDYxMTY3", "url": "https://github.com/redhataccess/pantheon/pull/351#pullrequestreview-454461167", "createdAt": "2020-07-23T20:12:39Z", "commit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxMjo0MFrOG2Z6yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxMjo0MFrOG2Z6yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMDkzNg==", "bodyText": "I dislike instanceof \ud83d\ude22\nI wonder if extracting the module type is something we should externalize to a different asciidoctor extension. One that specializes in Modules. That way we build the extension set based on the type of document that we need to generate.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459700936", "createdAt": "2020-07-23T20:12:40Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/MetadataExtractorTreeProcessor.java", "diffHunk": "@@ -136,18 +137,24 @@ private void extractAbstract(List<StructuralNode> allNodes) {\n      */\n     private void extractModuleType(Document document) {\n         Object attValue = document.getAttribute(MODULE_TYPE_ATT_NAME);\n+        ModuleMetadata mm = null;\n+        if (documentMetadata instanceof ModuleMetadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDYyMzAz", "url": "https://github.com/redhataccess/pantheon/pull/351#pullrequestreview-454462303", "createdAt": "2020-07-23T20:14:31Z", "commit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNDozMVrOG2Z-GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNDozMVrOG2Z-GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTc4NA==", "bodyText": "I don't think we need this.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459701784", "createdAt": "2020-07-23T20:14:31Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariant.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+\n+/**\n+ * A specific assembly variant node which houses all the versions for a specific language in the assembly.\n+ */\n+@JcrPrimaryType(\"pant:assemblyVariant\")\n+public interface AssemblyVariant extends DocumentVariant {\n+\n+    Child<AssemblyVersion> draft();\n+\n+    Child<AssemblyVersion> released();\n+\n+    @Override\n+    AssemblyVariants getParent();\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion getOrCreateVersion(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDYyNDUw", "url": "https://github.com/redhataccess/pantheon/pull/351#pullrequestreview-454462450", "createdAt": "2020-07-23T20:14:45Z", "commit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNDo0NVrOG2Z-gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNDo0NVrOG2Z-gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTg5MA==", "bodyText": "I don't think we need this.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459701890", "createdAt": "2020-07-23T20:14:45Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariant.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+\n+/**\n+ * A specific assembly variant node which houses all the versions for a specific language in the assembly.\n+ */\n+@JcrPrimaryType(\"pant:assemblyVariant\")\n+public interface AssemblyVariant extends DocumentVariant {\n+\n+    Child<AssemblyVersion> draft();\n+\n+    Child<AssemblyVersion> released();\n+\n+    @Override\n+    AssemblyVariants getParent();\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion getOrCreateVersion(String name) {\n+        return child(name, AssemblyVersion.class).get();\n+    }\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion createNextVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDYyODM4", "url": "https://github.com/redhataccess/pantheon/pull/351#pullrequestreview-454462838", "createdAt": "2020-07-23T20:15:17Z", "commit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNToxN1rOG2Z_vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNToxN1rOG2Z_vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMjIwNA==", "bodyText": "this method is not needed either.", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459702204", "createdAt": "2020-07-23T20:15:17Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariants.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariants;\n+\n+import javax.inject.Named;\n+import java.util.stream.Stream;\n+\n+import static com.redhat.pantheon.model.document.DocumentVariant.DEFAULT_VARIANT_NAME;\n+\n+/**\n+ * @author Carlos Munoz\n+ */\n+@JcrPrimaryType(\"sling:OrderedFolder\")\n+public interface AssemblyVariants extends DocumentVariants {\n+\n+    // The default variant\n+    @Named(DEFAULT_VARIANT_NAME)\n+    Child<AssemblyVariant> defaultVariant();\n+\n+    default Stream<AssemblyVariant> getVariants() {\n+        return this.as(AssemblyVariant.class);\n+    }\n+\n+    default AssemblyVariant getOrCreateVariant(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f152721155b67d0faaa455b5d8f18c0190577323"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79fb281a3d8c768d4c567285de684f45d0b7feed", "author": {"user": {"login": "benradey", "name": "Ben Radey"}}, "url": "https://github.com/redhataccess/pantheon/commit/79fb281a3d8c768d4c567285de684f45d0b7feed", "committedDate": "2020-07-24T14:04:53Z", "message": "Removing unneeded methods due to PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDM0MjI2", "url": "https://github.com/redhataccess/pantheon/pull/351#pullrequestreview-455034226", "createdAt": "2020-07-24T16:43:32Z", "commit": {"oid": "79fb281a3d8c768d4c567285de684f45d0b7feed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1957, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}