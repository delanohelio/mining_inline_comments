{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NTE3NTQ4", "number": 357, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzo1NzozNVrOEW5mBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODowMTowNlrOEW5rYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDQ3NzQ5OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/api/WorkspaceChild.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzo1NzozNVrOG-ZV2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToxNjo1OFrOG-b7hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MDA4OQ==", "bodyText": "Just out of curiosity, what's the purpose of changing the evaluation?", "url": "https://github.com/redhataccess/pantheon/pull/357#discussion_r468080089", "createdAt": "2020-08-10T17:57:35Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/api/WorkspaceChild.java", "diffHunk": "@@ -7,7 +7,7 @@\n \n     default Workspace getWorkspace() {\n         Resource workspace = this.getParent();\n-        while (workspace != null && !workspace.getResourceType().equals(\"pantheon/workspace\")) {\n+        while (workspace != null && !\"pantheon/workspace\".equals(workspace.getResourceType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a5f027c983ebbda44a5a46b2a248c9f5a4e9946"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEyMjUwMQ==", "bodyText": "I don't recall the exact reason why but I thiiiiink I was trying to write unit tests and I was having trouble with this line throwing an NPE.\nGenerally, stringVar.equals(\"someConstant\") is dangerous, but \"someConstant\".equals(stringVar) is equivalent and safer.", "url": "https://github.com/redhataccess/pantheon/pull/357#discussion_r468122501", "createdAt": "2020-08-10T19:16:58Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/api/WorkspaceChild.java", "diffHunk": "@@ -7,7 +7,7 @@\n \n     default Workspace getWorkspace() {\n         Resource workspace = this.getParent();\n-        while (workspace != null && !workspace.getResourceType().equals(\"pantheon/workspace\")) {\n+        while (workspace != null && !\"pantheon/workspace\".equals(workspace.getResourceType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MDA4OQ=="}, "originalCommit": {"oid": "2a5f027c983ebbda44a5a46b2a248c9f5a4e9946"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDQ5MTIwOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/resources/SLING-INF/nodetypes/nodetypes.cnd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODowMTowNlrOG-ZeJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToxNTowOFrOG-b36g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MjIxMg==", "bodyText": "what's the purpose of having pant:assemblyPage?", "url": "https://github.com/redhataccess/pantheon/pull/357#discussion_r468082212", "createdAt": "2020-08-10T18:01:06Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/resources/SLING-INF/nodetypes/nodetypes.cnd", "diffHunk": "@@ -84,6 +84,9 @@\n [pant:assemblyVersion] > nt:unstructured, sling:Resource, mix:referenceable, mix:created, mix:lastModified\n     - sling:resourceType (string) = 'pantheon/assemblyVersion' mandatory autocreated\n \n+[pant:assemblyPage] > nt:unstructured, sling:Resource, mix:referenceable, mix:created, mix:lastModified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a5f027c983ebbda44a5a46b2a248c9f5a4e9946"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEyMTU3OA==", "bodyText": "As you know, long-term we are going to want to break up large assemblies. For now, we've agreed the assemblies are small enough to not need it, but the thought is to future-proof the data structure. So all of our assemblies today will just have \"one page\" (the entire assembly). But it will be stored in such a way that we can have future multi-page assemblies and our data structure will not need to change to accommodate it.\nDoes that answer the question or were you trying to ask something else?", "url": "https://github.com/redhataccess/pantheon/pull/357#discussion_r468121578", "createdAt": "2020-08-10T19:15:08Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/resources/SLING-INF/nodetypes/nodetypes.cnd", "diffHunk": "@@ -84,6 +84,9 @@\n [pant:assemblyVersion] > nt:unstructured, sling:Resource, mix:referenceable, mix:created, mix:lastModified\n     - sling:resourceType (string) = 'pantheon/assemblyVersion' mandatory autocreated\n \n+[pant:assemblyPage] > nt:unstructured, sling:Resource, mix:referenceable, mix:created, mix:lastModified", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MjIxMg=="}, "originalCommit": {"oid": "2a5f027c983ebbda44a5a46b2a248c9f5a4e9946"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 155, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}