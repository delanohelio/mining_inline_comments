{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNjMyNjcy", "number": 268, "title": "extract an abstract json processing servlet for POST and PUT operations", "bodyText": "Extract a servlet capable of parsing the request's body as a Json object. This should encapsulate the json parsing logic in a single place, allowing extending classes to focus (a bit more) on business logic.", "createdAt": "2020-04-09T20:36:47Z", "url": "https://github.com/redhataccess/pantheon/pull/268", "merged": true, "mergeCommit": {"oid": "4cdbe5b5b973a1c13a08af60a0e8438de37b9340"}, "closed": true, "closedAt": "2020-04-17T20:45:00Z", "author": {"login": "carlosmunoz"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXKIlXAFqTM5MjAwOTU5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYnh6MAFqTM5NTc2MDQ1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDA5NTk2", "url": "https://github.com/redhataccess/pantheon/pull/268#pullrequestreview-392009596", "createdAt": "2020-04-13T07:54:46Z", "commit": {"oid": "addd0c117619bcc289f4685899bf4aa0f4657663"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzo1NDo0NlrOGEflAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzo1NDo0NlrOGEflAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NDg2Nw==", "bodyText": "I like this idea. However, I have a query - do you see any more servlets in the near term (1-2 sprints) where JSON payload would be expected? If no, it would be better to table this until such a use case comes. Introducing an extra hierarchy for just one servlet seems non-optimal at the moment. What do you think?", "url": "https://github.com/redhataccess/pantheon/pull/268#discussion_r407364867", "createdAt": "2020-04-13T07:54:46Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AbstractJsonPostOrPutServlet.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.helper.TransformToPojo;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+/**\n+ * Abstract servlet class to provide common behaviour that accepts a json payload in the body of a POST or PUT\n+ * web request, parses said payload into a java class, and then operates on the object. All the json\n+ * deserialization logic is encapsulated in this class.\n+ *\n+ * Implementations should override the processPost of processPut methods (both are allowed) to implement\n+ * specific logic for either case.\n+ *\n+ * @author Carlos Munoz\n+ */\n+public class AbstractJsonPostOrPutServlet<T> extends SlingAllMethodsServlet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addd0c117619bcc289f4685899bf4aa0f4657663"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDA5OTg2", "url": "https://github.com/redhataccess/pantheon/pull/268#pullrequestreview-392009986", "createdAt": "2020-04-13T07:55:50Z", "commit": {"oid": "addd0c117619bcc289f4685899bf4aa0f4657663"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzo1NTo1MFrOGEfmTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzo1NTo1MFrOGEfmTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NTE5OQ==", "bodyText": "Observational: Logging the exception here would help in tracing any exception in splunk.", "url": "https://github.com/redhataccess/pantheon/pull/268#discussion_r407365199", "createdAt": "2020-04-13T07:55:50Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AbstractJsonPostOrPutServlet.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.helper.TransformToPojo;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+/**\n+ * Abstract servlet class to provide common behaviour that accepts a json payload in the body of a POST or PUT\n+ * web request, parses said payload into a java class, and then operates on the object. All the json\n+ * deserialization logic is encapsulated in this class.\n+ *\n+ * Implementations should override the processPost of processPut methods (both are allowed) to implement\n+ * specific logic for either case.\n+ *\n+ * @author Carlos Munoz\n+ */\n+public class AbstractJsonPostOrPutServlet<T> extends SlingAllMethodsServlet {\n+\n+    private final Class<T> jsonType;\n+\n+    public AbstractJsonPostOrPutServlet(Class<T> jsonType) {\n+        this.jsonType = jsonType;\n+    }\n+\n+    @Override\n+    protected final void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response)\n+            throws ServletException, IOException {\n+        TransformToPojo transformToPojo = new TransformToPojo();\n+        T jsonPayload = transformToPojo.fromJson(jsonType, request.getReader());\n+\n+        try {\n+            processPost(request, response, jsonPayload);\n+        } catch (Exception e) {\n+            throw new ServletException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addd0c117619bcc289f4685899bf4aa0f4657663"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDEwMDY3", "url": "https://github.com/redhataccess/pantheon/pull/268#pullrequestreview-392010067", "createdAt": "2020-04-13T07:56:05Z", "commit": {"oid": "addd0c117619bcc289f4685899bf4aa0f4657663"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzo1NjowNlrOGEfmlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzo1NjowNlrOGEfmlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NTI3MA==", "bodyText": "Observational: Logging the exception here would help in tracing any exception in splunk.", "url": "https://github.com/redhataccess/pantheon/pull/268#discussion_r407365270", "createdAt": "2020-04-13T07:56:06Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AbstractJsonPostOrPutServlet.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.helper.TransformToPojo;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+/**\n+ * Abstract servlet class to provide common behaviour that accepts a json payload in the body of a POST or PUT\n+ * web request, parses said payload into a java class, and then operates on the object. All the json\n+ * deserialization logic is encapsulated in this class.\n+ *\n+ * Implementations should override the processPost of processPut methods (both are allowed) to implement\n+ * specific logic for either case.\n+ *\n+ * @author Carlos Munoz\n+ */\n+public class AbstractJsonPostOrPutServlet<T> extends SlingAllMethodsServlet {\n+\n+    private final Class<T> jsonType;\n+\n+    public AbstractJsonPostOrPutServlet(Class<T> jsonType) {\n+        this.jsonType = jsonType;\n+    }\n+\n+    @Override\n+    protected final void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response)\n+            throws ServletException, IOException {\n+        TransformToPojo transformToPojo = new TransformToPojo();\n+        T jsonPayload = transformToPojo.fromJson(jsonType, request.getReader());\n+\n+        try {\n+            processPost(request, response, jsonPayload);\n+        } catch (Exception e) {\n+            throw new ServletException(e);\n+        }\n+    }\n+\n+    @Override\n+    protected final void doPut(SlingHttpServletRequest request, SlingHttpServletResponse response)\n+            throws ServletException, IOException {\n+        TransformToPojo transformToPojo = new TransformToPojo();\n+        T jsonPayload = transformToPojo.fromJson(jsonType, request.getReader());\n+\n+        try {\n+            processPut(request, response, jsonPayload);\n+        } catch (Exception e) {\n+            throw new ServletException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addd0c117619bcc289f4685899bf4aa0f4657663"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTM5MDcx", "url": "https://github.com/redhataccess/pantheon/pull/268#pullrequestreview-394139071", "createdAt": "2020-04-15T21:12:55Z", "commit": {"oid": "a3ee18bd11a39ca6d57f17755346266674f07016"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3ee18bd11a39ca6d57f17755346266674f07016", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/a3ee18bd11a39ca6d57f17755346266674f07016", "committedDate": "2020-04-14T14:13:14Z", "message": "add exception logging for the base Json servlet"}, "afterCommit": {"oid": "dd0b42e7220568b18f413feac9b749042bdf0007", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/dd0b42e7220568b18f413feac9b749042bdf0007", "committedDate": "2020-04-17T12:58:47Z", "message": "rebase code on top of latest master branch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjU4NDU5", "url": "https://github.com/redhataccess/pantheon/pull/268#pullrequestreview-395658459", "createdAt": "2020-04-17T17:53:40Z", "commit": {"oid": "dd0b42e7220568b18f413feac9b749042bdf0007"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6c76b6e74579add76d2f9bda0e3605436741c5c", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/d6c76b6e74579add76d2f9bda0e3605436741c5c", "committedDate": "2020-04-17T20:17:18Z", "message": "extract an abstract json processing servlet for POST and PUT operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7808ada01b31d45986be2cb3e72b1f9008522e28", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/7808ada01b31d45986be2cb3e72b1f9008522e28", "committedDate": "2020-04-17T20:17:18Z", "message": "add exception logging for the base Json servlet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1dd51c72def03cde2b5b955dbf6390c2d27d82c", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/a1dd51c72def03cde2b5b955dbf6390c2d27d82c", "committedDate": "2020-04-17T20:18:18Z", "message": "rebase code on top of latest master branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d67aa7f7871078ad014cb4d397571129f39a179a", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/d67aa7f7871078ad014cb4d397571129f39a179a", "committedDate": "2020-04-17T20:21:26Z", "message": "rebase on top of master once more"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd0b42e7220568b18f413feac9b749042bdf0007", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/dd0b42e7220568b18f413feac9b749042bdf0007", "committedDate": "2020-04-17T12:58:47Z", "message": "rebase code on top of latest master branch"}, "afterCommit": {"oid": "d67aa7f7871078ad014cb4d397571129f39a179a", "author": {"user": {"login": "carlosmunoz", "name": "Carlos Munoz"}}, "url": "https://github.com/redhataccess/pantheon/commit/d67aa7f7871078ad014cb4d397571129f39a179a", "committedDate": "2020-04-17T20:21:26Z", "message": "rebase on top of master once more"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzYwNDU1", "url": "https://github.com/redhataccess/pantheon/pull/268#pullrequestreview-395760455", "createdAt": "2020-04-17T20:43:36Z", "commit": {"oid": "d67aa7f7871078ad014cb4d397571129f39a179a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2096, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}