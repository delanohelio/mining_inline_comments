{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MDc3NDAw", "number": 265, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMToyMTo1MVrODuVgUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowMDo0NFrODvSKSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTEzNDI3OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/StatusAcknowledgeServlet.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMToyMTo1MVrOGARU9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjowMTozNVrOGB0Cpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNzA3Ng==", "bodyText": "I wonder if this method (which is generic enough to be useful in other places) would be better suited to live in the JcrQueryHelper class.", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r402937076", "createdAt": "2020-04-03T11:21:51Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/StatusAcknowledgeServlet.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.Acknowledgement;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.Status;\n+import com.redhat.pantheon.helper.TransformToPojo;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.resource.PersistenceException;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.servlets.HttpConstants;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.Node;\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import static org.apache.sling.query.SlingQuery.$;\n+\n+/**\n+ * Simple servlet that saves the status acknowledgement send by\n+ * an endsystem to a status node\n+ *\n+ * @author A.P.Rajshekhar\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION +\"=Servlet which accepts acknowledgement and status for a published Module\",\n+                \"sling.servlet.methods=\" + HttpConstants.METHOD_POST,\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        }\n+)\n+@SlingServletPaths(value = \"/api/status\")\n+public class StatusAcknowledgeServlet extends SlingAllMethodsServlet {\n+    private final Logger logger = LoggerFactory.getLogger(StatusAcknowledgeServlet.class);\n+    @Override\n+    protected void doPost(@NotNull SlingHttpServletRequest request, @NotNull SlingHttpServletResponse response) throws ServletException, IOException {\n+\n+        Acknowledgement acknowledgement = getAcknowledgementData(request);\n+\n+        if(isObjectNullOrEmpty(acknowledgement)){\n+            getLogger().error(\"The request did not provide all the fiields \"+acknowledgement.toString());\n+            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"All the fields are required\");\n+            return;\n+        }\n+        try {\n+            Resource resource = getResourceByUuid(acknowledgement.getId(), request);\n+            Module module =  resource.adaptTo(Module.class);\n+            List<Resource> moduleLocale =  $(module).find(\"pant:moduleLocale\").asList();\n+\n+            if(!hasLocale(moduleLocale, \"en_US\")){\n+                getLogger().error(\"The module with id=\"+acknowledgement.getId()+\" does not have en_US locale\");\n+                response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Locale other than en_US is not supported\");\n+                return;\n+            }\n+            processAcknowledgementRequest(acknowledgement, module, moduleLocale);\n+\n+        } catch (RepositoryException|PersistenceException e) {\n+            getLogger().error(\"The request could not be processed because of error=\"+e.getMessage(), e);\n+            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     *  Checks whether all the fields are present\n+     * @param acknowledgement the acknowledement object containing request data\n+     * @return true if not all fields have data else return false\n+     */\n+    private boolean isObjectNullOrEmpty(Acknowledgement acknowledgement) {\n+        return null == acknowledgement ||\n+                Stream.of(acknowledgement.getId(), acknowledgement.getMessage(),\n+                        acknowledgement.getSender(),acknowledgement.getStatus())\n+                        .anyMatch(Objects::isNull);\n+    }\n+\n+    /**\n+     * Process the data in acknowldegment and create node if the module\n+     * for which the acknowledgement has data contains supported locale\n+     * @param acknowledgement request data\n+     * @param module module corresponding to the UUID in the request data\n+     * @param moduleLocale list of locales in the module\n+     * @throws PersistenceException signals that request data could not be saved\n+     */\n+    private void processAcknowledgementRequest(Acknowledgement acknowledgement, Module module,\n+                                               List<Resource> moduleLocale) throws PersistenceException {\n+\n+        for (Resource locale : moduleLocale) {\n+            //defensive programming: double check that only for en_US locale the status node is created\n+            if(locale.getName().equalsIgnoreCase(\"en_US\")) {\n+                createStatusNode(locale, module, acknowledgement);\n+                break;\n+            }\n+        }\n+    }\n+\n+    private boolean hasLocale(List<Resource> moduleLocale, String locale) {\n+        return moduleLocale.stream().anyMatch(ml -> ml.getName().equalsIgnoreCase(locale));\n+    }\n+\n+    private Acknowledgement getAcknowledgementData(@NotNull SlingHttpServletRequest request) throws IOException {\n+        TransformToPojo transformToPojo = new TransformToPojo();\n+        return transformToPojo.fromJson(Acknowledgement.class, request.getReader());\n+    }\n+\n+    private void createStatusNode(Resource moduleLocale, Module module, Acknowledgement acknowledgement) throws PersistenceException {\n+        Locale locale = LocaleUtils.toLocale(moduleLocale.getName());\n+        Status status = module.getReleasedVersion(locale).get().status().getOrCreate();\n+        status.status().set(acknowledgement.getStatus());\n+        status.message().set(acknowledgement.getMessage());\n+        status.sender().set(acknowledgement.getSender());\n+        status.getResourceResolver().commit();\n+    }\n+\n+    /**\n+     * Retrieves the module corresponding to the uuid\n+     * @param uuid id of the module\n+     * @param request sling request\n+     * @return resource correponding to the uuid\n+     * @throws RepositoryException\n+     */\n+    private Resource getResourceByUuid(String uuid, SlingHttpServletRequest request) throws RepositoryException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzODU2Mg==", "bodyText": "Yes. Since GetObjectByUUID also makes use of this, I was going to raise a JIRA so that GetObjectByUUID can also be refactored.", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r402938562", "createdAt": "2020-04-03T11:24:59Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/StatusAcknowledgeServlet.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.Acknowledgement;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.Status;\n+import com.redhat.pantheon.helper.TransformToPojo;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.resource.PersistenceException;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.servlets.HttpConstants;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.Node;\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import static org.apache.sling.query.SlingQuery.$;\n+\n+/**\n+ * Simple servlet that saves the status acknowledgement send by\n+ * an endsystem to a status node\n+ *\n+ * @author A.P.Rajshekhar\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION +\"=Servlet which accepts acknowledgement and status for a published Module\",\n+                \"sling.servlet.methods=\" + HttpConstants.METHOD_POST,\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        }\n+)\n+@SlingServletPaths(value = \"/api/status\")\n+public class StatusAcknowledgeServlet extends SlingAllMethodsServlet {\n+    private final Logger logger = LoggerFactory.getLogger(StatusAcknowledgeServlet.class);\n+    @Override\n+    protected void doPost(@NotNull SlingHttpServletRequest request, @NotNull SlingHttpServletResponse response) throws ServletException, IOException {\n+\n+        Acknowledgement acknowledgement = getAcknowledgementData(request);\n+\n+        if(isObjectNullOrEmpty(acknowledgement)){\n+            getLogger().error(\"The request did not provide all the fiields \"+acknowledgement.toString());\n+            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"All the fields are required\");\n+            return;\n+        }\n+        try {\n+            Resource resource = getResourceByUuid(acknowledgement.getId(), request);\n+            Module module =  resource.adaptTo(Module.class);\n+            List<Resource> moduleLocale =  $(module).find(\"pant:moduleLocale\").asList();\n+\n+            if(!hasLocale(moduleLocale, \"en_US\")){\n+                getLogger().error(\"The module with id=\"+acknowledgement.getId()+\" does not have en_US locale\");\n+                response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Locale other than en_US is not supported\");\n+                return;\n+            }\n+            processAcknowledgementRequest(acknowledgement, module, moduleLocale);\n+\n+        } catch (RepositoryException|PersistenceException e) {\n+            getLogger().error(\"The request could not be processed because of error=\"+e.getMessage(), e);\n+            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     *  Checks whether all the fields are present\n+     * @param acknowledgement the acknowledement object containing request data\n+     * @return true if not all fields have data else return false\n+     */\n+    private boolean isObjectNullOrEmpty(Acknowledgement acknowledgement) {\n+        return null == acknowledgement ||\n+                Stream.of(acknowledgement.getId(), acknowledgement.getMessage(),\n+                        acknowledgement.getSender(),acknowledgement.getStatus())\n+                        .anyMatch(Objects::isNull);\n+    }\n+\n+    /**\n+     * Process the data in acknowldegment and create node if the module\n+     * for which the acknowledgement has data contains supported locale\n+     * @param acknowledgement request data\n+     * @param module module corresponding to the UUID in the request data\n+     * @param moduleLocale list of locales in the module\n+     * @throws PersistenceException signals that request data could not be saved\n+     */\n+    private void processAcknowledgementRequest(Acknowledgement acknowledgement, Module module,\n+                                               List<Resource> moduleLocale) throws PersistenceException {\n+\n+        for (Resource locale : moduleLocale) {\n+            //defensive programming: double check that only for en_US locale the status node is created\n+            if(locale.getName().equalsIgnoreCase(\"en_US\")) {\n+                createStatusNode(locale, module, acknowledgement);\n+                break;\n+            }\n+        }\n+    }\n+\n+    private boolean hasLocale(List<Resource> moduleLocale, String locale) {\n+        return moduleLocale.stream().anyMatch(ml -> ml.getName().equalsIgnoreCase(locale));\n+    }\n+\n+    private Acknowledgement getAcknowledgementData(@NotNull SlingHttpServletRequest request) throws IOException {\n+        TransformToPojo transformToPojo = new TransformToPojo();\n+        return transformToPojo.fromJson(Acknowledgement.class, request.getReader());\n+    }\n+\n+    private void createStatusNode(Resource moduleLocale, Module module, Acknowledgement acknowledgement) throws PersistenceException {\n+        Locale locale = LocaleUtils.toLocale(moduleLocale.getName());\n+        Status status = module.getReleasedVersion(locale).get().status().getOrCreate();\n+        status.status().set(acknowledgement.getStatus());\n+        status.message().set(acknowledgement.getMessage());\n+        status.sender().set(acknowledgement.getSender());\n+        status.getResourceResolver().commit();\n+    }\n+\n+    /**\n+     * Retrieves the module corresponding to the uuid\n+     * @param uuid id of the module\n+     * @param request sling request\n+     * @return resource correponding to the uuid\n+     * @throws RepositoryException\n+     */\n+    private Resource getResourceByUuid(String uuid, SlingHttpServletRequest request) throws RepositoryException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNzA3Ng=="}, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1NDQwNg==", "bodyText": "I have raised https://projects.engineering.redhat.com/browse/CCS-3537 for refactoring.", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404554406", "createdAt": "2020-04-07T06:01:35Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/StatusAcknowledgeServlet.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.Acknowledgement;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.Status;\n+import com.redhat.pantheon.helper.TransformToPojo;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.resource.PersistenceException;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.servlets.HttpConstants;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.Node;\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import static org.apache.sling.query.SlingQuery.$;\n+\n+/**\n+ * Simple servlet that saves the status acknowledgement send by\n+ * an endsystem to a status node\n+ *\n+ * @author A.P.Rajshekhar\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION +\"=Servlet which accepts acknowledgement and status for a published Module\",\n+                \"sling.servlet.methods=\" + HttpConstants.METHOD_POST,\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        }\n+)\n+@SlingServletPaths(value = \"/api/status\")\n+public class StatusAcknowledgeServlet extends SlingAllMethodsServlet {\n+    private final Logger logger = LoggerFactory.getLogger(StatusAcknowledgeServlet.class);\n+    @Override\n+    protected void doPost(@NotNull SlingHttpServletRequest request, @NotNull SlingHttpServletResponse response) throws ServletException, IOException {\n+\n+        Acknowledgement acknowledgement = getAcknowledgementData(request);\n+\n+        if(isObjectNullOrEmpty(acknowledgement)){\n+            getLogger().error(\"The request did not provide all the fiields \"+acknowledgement.toString());\n+            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"All the fields are required\");\n+            return;\n+        }\n+        try {\n+            Resource resource = getResourceByUuid(acknowledgement.getId(), request);\n+            Module module =  resource.adaptTo(Module.class);\n+            List<Resource> moduleLocale =  $(module).find(\"pant:moduleLocale\").asList();\n+\n+            if(!hasLocale(moduleLocale, \"en_US\")){\n+                getLogger().error(\"The module with id=\"+acknowledgement.getId()+\" does not have en_US locale\");\n+                response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Locale other than en_US is not supported\");\n+                return;\n+            }\n+            processAcknowledgementRequest(acknowledgement, module, moduleLocale);\n+\n+        } catch (RepositoryException|PersistenceException e) {\n+            getLogger().error(\"The request could not be processed because of error=\"+e.getMessage(), e);\n+            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     *  Checks whether all the fields are present\n+     * @param acknowledgement the acknowledement object containing request data\n+     * @return true if not all fields have data else return false\n+     */\n+    private boolean isObjectNullOrEmpty(Acknowledgement acknowledgement) {\n+        return null == acknowledgement ||\n+                Stream.of(acknowledgement.getId(), acknowledgement.getMessage(),\n+                        acknowledgement.getSender(),acknowledgement.getStatus())\n+                        .anyMatch(Objects::isNull);\n+    }\n+\n+    /**\n+     * Process the data in acknowldegment and create node if the module\n+     * for which the acknowledgement has data contains supported locale\n+     * @param acknowledgement request data\n+     * @param module module corresponding to the UUID in the request data\n+     * @param moduleLocale list of locales in the module\n+     * @throws PersistenceException signals that request data could not be saved\n+     */\n+    private void processAcknowledgementRequest(Acknowledgement acknowledgement, Module module,\n+                                               List<Resource> moduleLocale) throws PersistenceException {\n+\n+        for (Resource locale : moduleLocale) {\n+            //defensive programming: double check that only for en_US locale the status node is created\n+            if(locale.getName().equalsIgnoreCase(\"en_US\")) {\n+                createStatusNode(locale, module, acknowledgement);\n+                break;\n+            }\n+        }\n+    }\n+\n+    private boolean hasLocale(List<Resource> moduleLocale, String locale) {\n+        return moduleLocale.stream().anyMatch(ml -> ml.getName().equalsIgnoreCase(locale));\n+    }\n+\n+    private Acknowledgement getAcknowledgementData(@NotNull SlingHttpServletRequest request) throws IOException {\n+        TransformToPojo transformToPojo = new TransformToPojo();\n+        return transformToPojo.fromJson(Acknowledgement.class, request.getReader());\n+    }\n+\n+    private void createStatusNode(Resource moduleLocale, Module module, Acknowledgement acknowledgement) throws PersistenceException {\n+        Locale locale = LocaleUtils.toLocale(moduleLocale.getName());\n+        Status status = module.getReleasedVersion(locale).get().status().getOrCreate();\n+        status.status().set(acknowledgement.getStatus());\n+        status.message().set(acknowledgement.getMessage());\n+        status.sender().set(acknowledgement.getSender());\n+        status.getResourceResolver().commit();\n+    }\n+\n+    /**\n+     * Retrieves the module corresponding to the uuid\n+     * @param uuid id of the module\n+     * @param request sling request\n+     * @return resource correponding to the uuid\n+     * @throws RepositoryException\n+     */\n+    private Resource getResourceByUuid(String uuid, SlingHttpServletRequest request) throws RepositoryException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzNzA3Ng=="}, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTE0Njk0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMToyNTo1NFrOGARcWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo0MzowM1rOGBd_zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzODk3MA==", "bodyText": "I wonder if this dependency should be provided and added instead to the provisioning files in the pantheon-slingstart maven module. I think it's already an OSGI bundle.", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r402938970", "createdAt": "2020-04-03T11:25:54Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/pom.xml", "diffHunk": "@@ -287,6 +287,11 @@\n             <groupId>org.apache.activemq</groupId>\n             <artifactId>activemq-client</artifactId>\n             <version>5.15.11</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.sling</groupId>\n+            <artifactId>org.apache.sling.query</artifactId>\n+            <version>3.0.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE3MTMwMw==", "bodyText": "According to sling documentation[1], query is added with normal scope. Please correct me if I misread the document.\nAlso, it seems the OSGi bundle for or a bundle that exports org.apache.sling.query is not available (checked via web console). I have added a note for myself to keep an eye on this library.\nIf an OSGi bundle is available, I will add it as you suggested :).\n[1] - https://sling.apache.org/documentation/bundles/sling-query.html", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404171303", "createdAt": "2020-04-06T15:14:27Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/pom.xml", "diffHunk": "@@ -287,6 +287,11 @@\n             <groupId>org.apache.activemq</groupId>\n             <artifactId>activemq-client</artifactId>\n             <version>5.15.11</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.sling</groupId>\n+            <artifactId>org.apache.sling.query</artifactId>\n+            <version>3.0.0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzODk3MA=="}, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5MzIyOQ==", "bodyText": "ahh... yes, if it's not an OSGI bundle then this is the right approach. Thanks for looking into it!", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404193229", "createdAt": "2020-04-06T15:43:03Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/pom.xml", "diffHunk": "@@ -287,6 +287,11 @@\n             <groupId>org.apache.activemq</groupId>\n             <artifactId>activemq-client</artifactId>\n             <version>5.15.11</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.sling</groupId>\n+            <artifactId>org.apache.sling.query</artifactId>\n+            <version>3.0.0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkzODk3MA=="}, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTAyNTExOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/StatusAcknowledgeServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo0NzowNlrOGBnRLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo1NTo0NVrOGCExKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NTEzMg==", "bodyText": "This Servlet accepts acknowlegement and status for both publish and unpublish actions", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404345132", "createdAt": "2020-04-06T19:47:06Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/StatusAcknowledgeServlet.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.Acknowledgement;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.Status;\n+import com.redhat.pantheon.helper.TransformToPojo;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.resource.PersistenceException;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.servlets.HttpConstants;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.Node;\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import static org.apache.sling.query.SlingQuery.$;\n+\n+/**\n+ * Simple servlet that saves the status acknowledgement send by\n+ * an endsystem to a status node\n+ *\n+ * @author A.P.Rajshekhar\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION +\"=Servlet which accepts acknowledgement and status for a published Module\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyODQ1Ng==", "bodyText": "done", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404828456", "createdAt": "2020-04-07T13:55:45Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/StatusAcknowledgeServlet.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.Acknowledgement;\n+import com.redhat.pantheon.model.module.Module;\n+import com.redhat.pantheon.model.module.Status;\n+import com.redhat.pantheon.helper.TransformToPojo;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.resource.PersistenceException;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.api.servlets.HttpConstants;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jcr.Node;\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+import javax.servlet.Servlet;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import static org.apache.sling.query.SlingQuery.$;\n+\n+/**\n+ * Simple servlet that saves the status acknowledgement send by\n+ * an endsystem to a status node\n+ *\n+ * @author A.P.Rajshekhar\n+ */\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION +\"=Servlet which accepts acknowledgement and status for a published Module\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NTEzMg=="}, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA2MTg5OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo1Nzo1MVrOGBnoYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo1NTo1OFrOGCExwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MTA3NQ==", "bodyText": "it's interesting you use \"pant:hash\" instead of \"jcr:uuid\". To keep things consistent, can you rename it to be \"jcr:uuid\"?", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404351075", "createdAt": "2020-04-06T19:57:51Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.resource.ModifiableValueMap;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith({SlingContextExtension.class})\n+public class StatusAcknowledgementServletTest {\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+    String testHTML = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head><title>test title</title></head> <body \" +\n+            \"class=\\\"article\\\"><h1>test title</h1> </header> </body> </html>\";\n+\n+    @BeforeEach\n+    public void setUp(){\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyODYwOA==", "bodyText": "Removed the pant:hash as discussed as jcr:uuid is giving error.", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404828608", "createdAt": "2020-04-07T13:55:58Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.resource.ModifiableValueMap;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith({SlingContextExtension.class})\n+public class StatusAcknowledgementServletTest {\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+    String testHTML = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head><title>test title</title></head> <body \" +\n+            \"class=\\\"article\\\"><h1>test title</h1> </header> </body> </html>\";\n+\n+    @BeforeEach\n+    public void setUp(){\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MTA3NQ=="}, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA2NjI0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo1OTowM1rOGBnrAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo1NTozNVrOGCEwnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MTc0Ng==", "bodyText": "Here is another pant:hash instead of \"jcr:uuid\"", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404351746", "createdAt": "2020-04-06T19:59:03Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.resource.ModifiableValueMap;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith({SlingContextExtension.class})\n+public class StatusAcknowledgementServletTest {\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+    String testHTML = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head><title>test title</title></head> <body \" +\n+            \"class=\\\"article\\\"><h1>test title</h1> </header> </body> </html>\";\n+\n+    @BeforeEach\n+    public void setUp(){\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US\",\n+                        \"jcr:primaryType\", \"pant:moduleLocale\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/metadata\",\n+                        \"jcr:title\", \"A title\",\n+                        \"jcr:description\", \"A description\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/asciidoc\",\n+                        \"jcr:content\", testHTML);\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/cachedHtml\",\n+                        \"jcr:data\", testHTML,\n+                        \"pant:hash\", \"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyODMxNw==", "bodyText": "Removed the pant:hash as discussed as jcr:uuid is giving error.", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404828317", "createdAt": "2020-04-07T13:55:35Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.resource.ModifiableValueMap;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith({SlingContextExtension.class})\n+public class StatusAcknowledgementServletTest {\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+    String testHTML = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head><title>test title</title></head> <body \" +\n+            \"class=\\\"article\\\"><h1>test title</h1> </header> </body> </html>\";\n+\n+    @BeforeEach\n+    public void setUp(){\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US\",\n+                        \"jcr:primaryType\", \"pant:moduleLocale\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/metadata\",\n+                        \"jcr:title\", \"A title\",\n+                        \"jcr:description\", \"A description\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/asciidoc\",\n+                        \"jcr:content\", testHTML);\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/cachedHtml\",\n+                        \"jcr:data\", testHTML,\n+                        \"pant:hash\", \"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MTc0Ng=="}, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA3MDk5OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowMDoyNFrOGBnt7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo1NTowNFrOGCEvFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MjQ5Mw==", "bodyText": "another \"pant:hash\" instead of \"jcr:uuid\"", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404352493", "createdAt": "2020-04-06T20:00:24Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.resource.ModifiableValueMap;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith({SlingContextExtension.class})\n+public class StatusAcknowledgementServletTest {\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+    String testHTML = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head><title>test title</title></head> <body \" +\n+            \"class=\\\"article\\\"><h1>test title</h1> </header> </body> </html>\";\n+\n+    @BeforeEach\n+    public void setUp(){\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US\",\n+                        \"jcr:primaryType\", \"pant:moduleLocale\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/metadata\",\n+                        \"jcr:title\", \"A title\",\n+                        \"jcr:description\", \"A description\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/asciidoc\",\n+                        \"jcr:content\", testHTML);\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/cachedHtml\",\n+                        \"jcr:data\", testHTML,\n+                        \"pant:hash\", \"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+\n+        slingContext.resourceResolver().getResource(\"/content/repositories/repo/module/en_US\").adaptTo(ModifiableValueMap.class)\n+                .put(\"released\", slingContext.resourceResolver().getResource(\"/content/repositories/repo/module/en_US/1\").getValueMap()\n+                        .get(\"jcr:uuid\"));\n+        registerMockAdapter(Module.class, slingContext);\n+    }\n+    @Test\n+    public void testAddAcknowledgement() throws ServletException, IOException {\n+\n+        String resourceUuid = slingContext.resourceResolver()\n+                .getResource(\"/content/repositories/repo/module\")\n+                .getValueMap()\n+                .get(\"jcr:uuid\")\n+                .toString();\n+\n+        Charset utf8 = Charset.forName(\"UTF-8\");\n+        String data = \"{\\\"id\\\":\\\"\"+resourceUuid+\"\\\",\\\"status\\\": \\\"received\\\",\\\"sender\\\":\\\"hydra\\\",\\\"message\\\":\\\"from hydra\\\"}\";\n+        slingContext.request().setContent(data.getBytes(utf8));\n+        StatusAcknowledgeServlet statusAcknowledgeServlet = new StatusAcknowledgeServlet();\n+        statusAcknowledgeServlet.doPost(slingContext.request(), slingContext.response());\n+        Assertions.assertEquals(200, slingContext.response().getStatus(), \"Status should be 200\");\n+        Module module =\n+                SlingModels.getModel(\n+                        slingContext.resourceResolver().getResource(\"/content/repositories/repo/module\"),\n+                        Module.class);\n+        assertNotNull(module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get());\n+        assertEquals(\"received\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\"))\n+                .get().status()\n+                .get().status().get());\n+        assertEquals(\"from hydra\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get().message().get());\n+        assertEquals(\"hydra\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get().sender().get());\n+    }\n+\n+    @Test\n+    public void testAddAcknowledgementWithoutRequiredFields() throws ServletException, IOException {\n+\n+        String resourceUuid = slingContext.resourceResolver()\n+                .getResource(\"/content/repositories/repo/module\")\n+                .getValueMap()\n+                .get(\"jcr:uuid\")\n+                .toString();\n+\n+        Charset utf8 = Charset.forName(\"UTF-8\");\n+        String data = \"{\\\"id\\\":\\\"\" + resourceUuid + \"\\\",\\\"status\\\": \\\"received\\\",\\\"sender\\\":\\\"hydra\\\"}\";\n+        slingContext.request().setContent(data.getBytes(utf8));\n+        StatusAcknowledgeServlet statusAcknowledgeServlet = new StatusAcknowledgeServlet();\n+        statusAcknowledgeServlet.doPost(slingContext.request(), slingContext.response());\n+        Assertions.assertEquals( 400, slingContext.response().getStatus(), \"Status should be 400\");\n+    }\n+\n+    @Test\n+    public void testAddAcknowledgementWhenTheLocaleIsNotSupported() throws ServletException, IOException {\n+\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyNzkyNQ==", "bodyText": "Removed the pant:hash as discussed as jcr:uuid is giving error.", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404827925", "createdAt": "2020-04-07T13:55:04Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.resource.ModifiableValueMap;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith({SlingContextExtension.class})\n+public class StatusAcknowledgementServletTest {\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+    String testHTML = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head><title>test title</title></head> <body \" +\n+            \"class=\\\"article\\\"><h1>test title</h1> </header> </body> </html>\";\n+\n+    @BeforeEach\n+    public void setUp(){\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US\",\n+                        \"jcr:primaryType\", \"pant:moduleLocale\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/metadata\",\n+                        \"jcr:title\", \"A title\",\n+                        \"jcr:description\", \"A description\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/asciidoc\",\n+                        \"jcr:content\", testHTML);\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/cachedHtml\",\n+                        \"jcr:data\", testHTML,\n+                        \"pant:hash\", \"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+\n+        slingContext.resourceResolver().getResource(\"/content/repositories/repo/module/en_US\").adaptTo(ModifiableValueMap.class)\n+                .put(\"released\", slingContext.resourceResolver().getResource(\"/content/repositories/repo/module/en_US/1\").getValueMap()\n+                        .get(\"jcr:uuid\"));\n+        registerMockAdapter(Module.class, slingContext);\n+    }\n+    @Test\n+    public void testAddAcknowledgement() throws ServletException, IOException {\n+\n+        String resourceUuid = slingContext.resourceResolver()\n+                .getResource(\"/content/repositories/repo/module\")\n+                .getValueMap()\n+                .get(\"jcr:uuid\")\n+                .toString();\n+\n+        Charset utf8 = Charset.forName(\"UTF-8\");\n+        String data = \"{\\\"id\\\":\\\"\"+resourceUuid+\"\\\",\\\"status\\\": \\\"received\\\",\\\"sender\\\":\\\"hydra\\\",\\\"message\\\":\\\"from hydra\\\"}\";\n+        slingContext.request().setContent(data.getBytes(utf8));\n+        StatusAcknowledgeServlet statusAcknowledgeServlet = new StatusAcknowledgeServlet();\n+        statusAcknowledgeServlet.doPost(slingContext.request(), slingContext.response());\n+        Assertions.assertEquals(200, slingContext.response().getStatus(), \"Status should be 200\");\n+        Module module =\n+                SlingModels.getModel(\n+                        slingContext.resourceResolver().getResource(\"/content/repositories/repo/module\"),\n+                        Module.class);\n+        assertNotNull(module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get());\n+        assertEquals(\"received\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\"))\n+                .get().status()\n+                .get().status().get());\n+        assertEquals(\"from hydra\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get().message().get());\n+        assertEquals(\"hydra\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get().sender().get());\n+    }\n+\n+    @Test\n+    public void testAddAcknowledgementWithoutRequiredFields() throws ServletException, IOException {\n+\n+        String resourceUuid = slingContext.resourceResolver()\n+                .getResource(\"/content/repositories/repo/module\")\n+                .getValueMap()\n+                .get(\"jcr:uuid\")\n+                .toString();\n+\n+        Charset utf8 = Charset.forName(\"UTF-8\");\n+        String data = \"{\\\"id\\\":\\\"\" + resourceUuid + \"\\\",\\\"status\\\": \\\"received\\\",\\\"sender\\\":\\\"hydra\\\"}\";\n+        slingContext.request().setContent(data.getBytes(utf8));\n+        StatusAcknowledgeServlet statusAcknowledgeServlet = new StatusAcknowledgeServlet();\n+        statusAcknowledgeServlet.doPost(slingContext.request(), slingContext.response());\n+        Assertions.assertEquals( 400, slingContext.response().getStatus(), \"Status should be 400\");\n+    }\n+\n+    @Test\n+    public void testAddAcknowledgementWhenTheLocaleIsNotSupported() throws ServletException, IOException {\n+\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MjQ5Mw=="}, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA3MjA5OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowMDo0NFrOGBnunQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo1NDo1NFrOGCEupQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MjY2OQ==", "bodyText": "\"pant:hash\" instead of \"jcr:uuid\"", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404352669", "createdAt": "2020-04-06T20:00:44Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.resource.ModifiableValueMap;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith({SlingContextExtension.class})\n+public class StatusAcknowledgementServletTest {\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+    String testHTML = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head><title>test title</title></head> <body \" +\n+            \"class=\\\"article\\\"><h1>test title</h1> </header> </body> </html>\";\n+\n+    @BeforeEach\n+    public void setUp(){\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US\",\n+                        \"jcr:primaryType\", \"pant:moduleLocale\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/metadata\",\n+                        \"jcr:title\", \"A title\",\n+                        \"jcr:description\", \"A description\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/asciidoc\",\n+                        \"jcr:content\", testHTML);\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/cachedHtml\",\n+                        \"jcr:data\", testHTML,\n+                        \"pant:hash\", \"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+\n+        slingContext.resourceResolver().getResource(\"/content/repositories/repo/module/en_US\").adaptTo(ModifiableValueMap.class)\n+                .put(\"released\", slingContext.resourceResolver().getResource(\"/content/repositories/repo/module/en_US/1\").getValueMap()\n+                        .get(\"jcr:uuid\"));\n+        registerMockAdapter(Module.class, slingContext);\n+    }\n+    @Test\n+    public void testAddAcknowledgement() throws ServletException, IOException {\n+\n+        String resourceUuid = slingContext.resourceResolver()\n+                .getResource(\"/content/repositories/repo/module\")\n+                .getValueMap()\n+                .get(\"jcr:uuid\")\n+                .toString();\n+\n+        Charset utf8 = Charset.forName(\"UTF-8\");\n+        String data = \"{\\\"id\\\":\\\"\"+resourceUuid+\"\\\",\\\"status\\\": \\\"received\\\",\\\"sender\\\":\\\"hydra\\\",\\\"message\\\":\\\"from hydra\\\"}\";\n+        slingContext.request().setContent(data.getBytes(utf8));\n+        StatusAcknowledgeServlet statusAcknowledgeServlet = new StatusAcknowledgeServlet();\n+        statusAcknowledgeServlet.doPost(slingContext.request(), slingContext.response());\n+        Assertions.assertEquals(200, slingContext.response().getStatus(), \"Status should be 200\");\n+        Module module =\n+                SlingModels.getModel(\n+                        slingContext.resourceResolver().getResource(\"/content/repositories/repo/module\"),\n+                        Module.class);\n+        assertNotNull(module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get());\n+        assertEquals(\"received\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\"))\n+                .get().status()\n+                .get().status().get());\n+        assertEquals(\"from hydra\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get().message().get());\n+        assertEquals(\"hydra\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get().sender().get());\n+    }\n+\n+    @Test\n+    public void testAddAcknowledgementWithoutRequiredFields() throws ServletException, IOException {\n+\n+        String resourceUuid = slingContext.resourceResolver()\n+                .getResource(\"/content/repositories/repo/module\")\n+                .getValueMap()\n+                .get(\"jcr:uuid\")\n+                .toString();\n+\n+        Charset utf8 = Charset.forName(\"UTF-8\");\n+        String data = \"{\\\"id\\\":\\\"\" + resourceUuid + \"\\\",\\\"status\\\": \\\"received\\\",\\\"sender\\\":\\\"hydra\\\"}\";\n+        slingContext.request().setContent(data.getBytes(utf8));\n+        StatusAcknowledgeServlet statusAcknowledgeServlet = new StatusAcknowledgeServlet();\n+        statusAcknowledgeServlet.doPost(slingContext.request(), slingContext.response());\n+        Assertions.assertEquals( 400, slingContext.response().getStatus(), \"Status should be 400\");\n+    }\n+\n+    @Test\n+    public void testAddAcknowledgementWhenTheLocaleIsNotSupported() throws ServletException, IOException {\n+\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1/es_ES\",\n+                        \"jcr:primaryType\", \"pant:moduleLocale\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1/es_ES/1\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1/es_ES/1/metadata\",\n+                        \"jcr:title\", \"A title\",\n+                        \"jcr:description\", \"A description\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1/es_ES/1/content/asciidoc\",\n+                        \"jcr:content\", testHTML);\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1/es_ES/1/content/cachedHtml\",\n+                        \"jcr:data\", testHTML,\n+                        \"pant:hash\", \"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyNzgxMw==", "bodyText": "Removed the pant:hash as discussed as jcr:uuid is giving error.", "url": "https://github.com/redhataccess/pantheon/pull/265#discussion_r404827813", "createdAt": "2020-04-07T13:54:54Z", "author": {"login": "aprajshekhar"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/servlet/StatusAcknowledgementServletTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.module.Module;\n+import org.apache.commons.lang3.LocaleUtils;\n+import org.apache.sling.api.resource.ModifiableValueMap;\n+import org.apache.sling.testing.mock.sling.ResourceResolverType;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContext;\n+import org.apache.sling.testing.mock.sling.junit5.SlingContextExtension;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import javax.servlet.ServletException;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import static com.redhat.pantheon.util.TestUtils.registerMockAdapter;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith({SlingContextExtension.class})\n+public class StatusAcknowledgementServletTest {\n+    SlingContext slingContext = new SlingContext(ResourceResolverType.JCR_OAK);\n+    String testHTML = \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head><title>test title</title></head> <body \" +\n+            \"class=\\\"article\\\"><h1>test title</h1> </header> </body> </html>\";\n+\n+    @BeforeEach\n+    public void setUp(){\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US\",\n+                        \"jcr:primaryType\", \"pant:moduleLocale\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/metadata\",\n+                        \"jcr:title\", \"A title\",\n+                        \"jcr:description\", \"A description\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/asciidoc\",\n+                        \"jcr:content\", testHTML);\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module/en_US/1/content/cachedHtml\",\n+                        \"jcr:data\", testHTML,\n+                        \"pant:hash\", \"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+\n+        slingContext.resourceResolver().getResource(\"/content/repositories/repo/module/en_US\").adaptTo(ModifiableValueMap.class)\n+                .put(\"released\", slingContext.resourceResolver().getResource(\"/content/repositories/repo/module/en_US/1\").getValueMap()\n+                        .get(\"jcr:uuid\"));\n+        registerMockAdapter(Module.class, slingContext);\n+    }\n+    @Test\n+    public void testAddAcknowledgement() throws ServletException, IOException {\n+\n+        String resourceUuid = slingContext.resourceResolver()\n+                .getResource(\"/content/repositories/repo/module\")\n+                .getValueMap()\n+                .get(\"jcr:uuid\")\n+                .toString();\n+\n+        Charset utf8 = Charset.forName(\"UTF-8\");\n+        String data = \"{\\\"id\\\":\\\"\"+resourceUuid+\"\\\",\\\"status\\\": \\\"received\\\",\\\"sender\\\":\\\"hydra\\\",\\\"message\\\":\\\"from hydra\\\"}\";\n+        slingContext.request().setContent(data.getBytes(utf8));\n+        StatusAcknowledgeServlet statusAcknowledgeServlet = new StatusAcknowledgeServlet();\n+        statusAcknowledgeServlet.doPost(slingContext.request(), slingContext.response());\n+        Assertions.assertEquals(200, slingContext.response().getStatus(), \"Status should be 200\");\n+        Module module =\n+                SlingModels.getModel(\n+                        slingContext.resourceResolver().getResource(\"/content/repositories/repo/module\"),\n+                        Module.class);\n+        assertNotNull(module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get());\n+        assertEquals(\"received\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\"))\n+                .get().status()\n+                .get().status().get());\n+        assertEquals(\"from hydra\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get().message().get());\n+        assertEquals(\"hydra\", module.getReleasedVersion(LocaleUtils.toLocale(\"en_US\")).get().status().get().sender().get());\n+    }\n+\n+    @Test\n+    public void testAddAcknowledgementWithoutRequiredFields() throws ServletException, IOException {\n+\n+        String resourceUuid = slingContext.resourceResolver()\n+                .getResource(\"/content/repositories/repo/module\")\n+                .getValueMap()\n+                .get(\"jcr:uuid\")\n+                .toString();\n+\n+        Charset utf8 = Charset.forName(\"UTF-8\");\n+        String data = \"{\\\"id\\\":\\\"\" + resourceUuid + \"\\\",\\\"status\\\": \\\"received\\\",\\\"sender\\\":\\\"hydra\\\"}\";\n+        slingContext.request().setContent(data.getBytes(utf8));\n+        StatusAcknowledgeServlet statusAcknowledgeServlet = new StatusAcknowledgeServlet();\n+        statusAcknowledgeServlet.doPost(slingContext.request(), slingContext.response());\n+        Assertions.assertEquals( 400, slingContext.response().getStatus(), \"Status should be 400\");\n+    }\n+\n+    @Test\n+    public void testAddAcknowledgementWhenTheLocaleIsNotSupported() throws ServletException, IOException {\n+\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1\",\n+                        \"jcr:primaryType\", \"pant:module\", \"pant:hash\",\"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1/es_ES\",\n+                        \"jcr:primaryType\", \"pant:moduleLocale\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1/es_ES/1\",\n+                        \"jcr:primaryType\", \"pant:moduleVersion\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1/es_ES/1/metadata\",\n+                        \"jcr:title\", \"A title\",\n+                        \"jcr:description\", \"A description\");\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1/es_ES/1/content/asciidoc\",\n+                        \"jcr:content\", testHTML);\n+        slingContext.create()\n+                .resource(\"/content/repositories/repo/module1/es_ES/1/content/cachedHtml\",\n+                        \"jcr:data\", testHTML,\n+                        \"pant:hash\", \"3815bd73-3d57-41d5-9300-9726fdd0f4b7\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MjY2OQ=="}, "originalCommit": {"oid": "ee391fd70e011aa5d0c251e8f094eb27c81dee07"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 266, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}