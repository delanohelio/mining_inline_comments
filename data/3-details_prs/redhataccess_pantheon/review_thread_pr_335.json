{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MDU3NDc4", "number": 335, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0NTo1NVrOEPnytQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyODozMFrOEQR33w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODE2MDUzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0NTo1NVrOGzbxrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoxMzoyMFrOG0VaYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NTY0Nw==", "bodyText": "interesting... setting a property and removing it after the module content. What are you trying to accomplish here?", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456585647", "createdAt": "2020-07-17T17:45:55Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "diffHunk": "@@ -67,12 +67,20 @@ public void process(Document document, PreprocessorReader reader, String target,\n                 Module module = includedResourceAsModel.adaptTo(Module.class);\n                 // TODO, right now only default locale and latest (draft) version of the module are used\n                 content = traverseFrom(module)\n-                        .toChild(module1 -> module.moduleLocale(GlobalConfig.DEFAULT_MODULE_LOCALE))\n+                        .toChild(module1 -> module.locale(GlobalConfig.DEFAULT_MODULE_LOCALE))\n                         .toChild(ModuleLocale::source)\n                         .toChild(SourceContent::draft)\n                         .toChild(FileResource::jcrContent)\n                         .toField(FileResource.JcrContent::jcrData)\n                         .get();\n+                content = new StringBuilder(\":pantheon_module_id: \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NjYxOA==", "bodyText": "This was Wes' recommendation. Apparently the haml can key off of variable values anywhere in the document, even if those variables aren't referenced by the asciidoc content. So Wes is using this to create special div tags that have special classes applied that we can key off of to carve the modules out of the html when the time comes to split assemblies.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457456618", "createdAt": "2020-07-20T14:48:19Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "diffHunk": "@@ -67,12 +67,20 @@ public void process(Document document, PreprocessorReader reader, String target,\n                 Module module = includedResourceAsModel.adaptTo(Module.class);\n                 // TODO, right now only default locale and latest (draft) version of the module are used\n                 content = traverseFrom(module)\n-                        .toChild(module1 -> module.moduleLocale(GlobalConfig.DEFAULT_MODULE_LOCALE))\n+                        .toChild(module1 -> module.locale(GlobalConfig.DEFAULT_MODULE_LOCALE))\n                         .toChild(ModuleLocale::source)\n                         .toChild(SourceContent::draft)\n                         .toChild(FileResource::jcrContent)\n                         .toField(FileResource.JcrContent::jcrData)\n                         .get();\n+                content = new StringBuilder(\":pantheon_module_id: \")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NTY0Nw=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyOTk1Mg==", "bodyText": "as I said... interesting \ud83d\ude04", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457529952", "createdAt": "2020-07-20T16:13:20Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/SlingResourceIncludeProcessor.java", "diffHunk": "@@ -67,12 +67,20 @@ public void process(Document document, PreprocessorReader reader, String target,\n                 Module module = includedResourceAsModel.adaptTo(Module.class);\n                 // TODO, right now only default locale and latest (draft) version of the module are used\n                 content = traverseFrom(module)\n-                        .toChild(module1 -> module.moduleLocale(GlobalConfig.DEFAULT_MODULE_LOCALE))\n+                        .toChild(module1 -> module.locale(GlobalConfig.DEFAULT_MODULE_LOCALE))\n                         .toChild(ModuleLocale::source)\n                         .toChild(SourceContent::draft)\n                         .toChild(FileResource::jcrContent)\n                         .toField(FileResource.JcrContent::jcrData)\n                         .get();\n+                content = new StringBuilder(\":pantheon_module_id: \")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NTY0Nw=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODE2NjM0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariant.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0NzozOVrOGzb1HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0NzozOVrOGzb1HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NjUyNA==", "bodyText": "I say we remove commented out code.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456586524", "createdAt": "2020-07-17T17:47:39Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariant.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.redhat.pantheon.model.document;\n+\n+import com.redhat.pantheon.jcr.JcrResources;\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.api.WorkspaceChild;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.api.Reference;\n+import com.redhat.pantheon.model.api.SlingModel;\n+import org.apache.sling.api.resource.PersistenceException;\n+import org.apache.sling.api.resource.Resource;\n+\n+import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+\n+import java.util.Calendar;\n+\n+import static com.google.common.collect.Streams.stream;\n+import static com.redhat.pantheon.jcr.JcrResources.rename;\n+import static java.util.stream.Collectors.counting;\n+\n+/**\n+ * A specific Document variant node which houses all the versions for a specific language in the Document.\n+ */\n+public interface DocumentVariant extends WorkspaceChild {\n+\n+    String DEFAULT_VARIANT_NAME = \"DEFAULT\";\n+\n+    Child<? extends DocumentVersion> draft();\n+\n+    Child<? extends DocumentVersion> released();\n+\n+    @Override\n+    DocumentVariants getParent();\n+\n+    // Since we are not storing historical versions anymore, the only needed ones are draft and released\n+    /*default DocumentVersion getVersion(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODE4MjkzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1MjozMVrOGzb-_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyOTowMlrOG0WBUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTA1Mg==", "bodyText": "these methods seem to be the same as in the parent Document interface. The only thing which changed is the return generic. I wonder if we need to re-declare them completely or just tighten the return type.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456589052", "createdAt": "2020-07-17T17:52:31Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java", "diffHunk": "@@ -45,124 +44,70 @@\n     @Named(\"jcr:uuid\")\n     Field<String> uuid();\n \n-    default Child<ModuleLocale> moduleLocale(Locale locale) {\n+    default Child<ModuleLocale> locale(Locale locale) {\n         return child(locale.toString(), ModuleLocale.class);\n     }\n \n     default Optional<ModuleVersion> getDraftVersion(@Nonnull final Locale locale,\n                                                     @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::draft)\n                 .getAsOptional();\n     }\n \n     default Optional<ModuleVersion> getReleasedVersion(@Nonnull final Locale locale,\n-                                                    @Nonnull final String variantName) {\n+                                                       @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::released)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released content for a given locale\n-     */\n-    default Optional<FileResource> getReleasedContent(final Locale locale,\n-                                                      @Nonnull final String variantName) {\n+    default Optional<FileResource> getDraftContent(@Nonnull final Locale locale,\n+                                                   @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The draft content for a given locale\n-     */\n-    default Optional<FileResource> getDraftContent(final Locale locale,\n-                                                 @Nonnull final String variantName) {\n+    default Optional<FileResource> getReleasedContent(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n+                .toChild(ModuleVariant::released)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released metadata for a given locale\n-     */\n-    default Optional<Metadata> getReleasedMetadata(final Locale locale,\n-                                                   @Nonnull final String variantName) {\n+    default Optional<ModuleMetadata> getDraftMetadata(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::metadata)\n                 .getAsOptional();\n     }\n \n-  /**\n-    *\n-    * @param locale the locale to fetch the acknowledgment status content\n-    * @param variantName\n-    * @return the  status data for a released version for a given locale\n-    */\n-    default Optional<AckStatus> getAcknowledgementStatus(final Locale locale,\n+    default Optional<ModuleMetadata> getReleasedMetadata(@Nonnull final Locale locale,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2ODUyMw==", "bodyText": "Ok, I'm going to make a new commit, let me know if the new methods are closer to what you had in mind.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457468523", "createdAt": "2020-07-20T15:00:47Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java", "diffHunk": "@@ -45,124 +44,70 @@\n     @Named(\"jcr:uuid\")\n     Field<String> uuid();\n \n-    default Child<ModuleLocale> moduleLocale(Locale locale) {\n+    default Child<ModuleLocale> locale(Locale locale) {\n         return child(locale.toString(), ModuleLocale.class);\n     }\n \n     default Optional<ModuleVersion> getDraftVersion(@Nonnull final Locale locale,\n                                                     @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::draft)\n                 .getAsOptional();\n     }\n \n     default Optional<ModuleVersion> getReleasedVersion(@Nonnull final Locale locale,\n-                                                    @Nonnull final String variantName) {\n+                                                       @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::released)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released content for a given locale\n-     */\n-    default Optional<FileResource> getReleasedContent(final Locale locale,\n-                                                      @Nonnull final String variantName) {\n+    default Optional<FileResource> getDraftContent(@Nonnull final Locale locale,\n+                                                   @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The draft content for a given locale\n-     */\n-    default Optional<FileResource> getDraftContent(final Locale locale,\n-                                                 @Nonnull final String variantName) {\n+    default Optional<FileResource> getReleasedContent(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n+                .toChild(ModuleVariant::released)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released metadata for a given locale\n-     */\n-    default Optional<Metadata> getReleasedMetadata(final Locale locale,\n-                                                   @Nonnull final String variantName) {\n+    default Optional<ModuleMetadata> getDraftMetadata(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::metadata)\n                 .getAsOptional();\n     }\n \n-  /**\n-    *\n-    * @param locale the locale to fetch the acknowledgment status content\n-    * @param variantName\n-    * @return the  status data for a released version for a given locale\n-    */\n-    default Optional<AckStatus> getAcknowledgementStatus(final Locale locale,\n+    default Optional<ModuleMetadata> getReleasedMetadata(@Nonnull final Locale locale,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTA1Mg=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTkyMg==", "bodyText": "Yes, they are \ud83d\ude04", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457539922", "createdAt": "2020-07-20T16:29:02Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java", "diffHunk": "@@ -45,124 +44,70 @@\n     @Named(\"jcr:uuid\")\n     Field<String> uuid();\n \n-    default Child<ModuleLocale> moduleLocale(Locale locale) {\n+    default Child<ModuleLocale> locale(Locale locale) {\n         return child(locale.toString(), ModuleLocale.class);\n     }\n \n     default Optional<ModuleVersion> getDraftVersion(@Nonnull final Locale locale,\n                                                     @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::draft)\n                 .getAsOptional();\n     }\n \n     default Optional<ModuleVersion> getReleasedVersion(@Nonnull final Locale locale,\n-                                                    @Nonnull final String variantName) {\n+                                                       @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n                 .toChild(ModuleVariant::released)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released content for a given locale\n-     */\n-    default Optional<FileResource> getReleasedContent(final Locale locale,\n-                                                      @Nonnull final String variantName) {\n+    default Optional<FileResource> getDraftContent(@Nonnull final Locale locale,\n+                                                   @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The draft content for a given locale\n-     */\n-    default Optional<FileResource> getDraftContent(final Locale locale,\n-                                                 @Nonnull final String variantName) {\n+    default Optional<FileResource> getReleasedContent(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n+                .toChild(ModuleVariant::released)\n                 .toChild(ModuleVersion::cachedHtml)\n                 .getAsOptional();\n     }\n \n-    /**\n-     * @param locale The locale to fetch the content instance for.\n-     * @param variantName\n-     * @return The released metadata for a given locale\n-     */\n-    default Optional<Metadata> getReleasedMetadata(final Locale locale,\n-                                                   @Nonnull final String variantName) {\n+    default Optional<ModuleMetadata> getDraftMetadata(@Nonnull final Locale locale,\n+                                                      @Nonnull final String variantName) {\n         return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n+                .toChild(m -> m.locale(locale))\n                 .toChild(ModuleLocale::variants)\n                 .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n+                .toChild(ModuleVariant::draft)\n                 .toChild(ModuleVersion::metadata)\n                 .getAsOptional();\n     }\n \n-  /**\n-    *\n-    * @param locale the locale to fetch the acknowledgment status content\n-    * @param variantName\n-    * @return the  status data for a released version for a given locale\n-    */\n-    default Optional<AckStatus> getAcknowledgementStatus(final Locale locale,\n+    default Optional<ModuleMetadata> getReleasedMetadata(@Nonnull final Locale locale,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4OTA1Mg=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODE5MDE0OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1NDozN1rOGzcDWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo1OToxN1rOG0XJGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA==", "bodyText": "interesting... I wonder if we are able to keep this filter in line 90 as before.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456590170", "createdAt": "2020-07-17T17:54:37Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -89,9 +87,10 @@ protected String getQuery(SlingHttpServletRequest request) {\n         }\n \n         StringBuilder queryBuilder = new StringBuilder()\n-                .append(\"/jcr:root/content/(repositories | modules)//element(*, pant:module)\");\n+                .append(\"/jcr:root/content/(repositories | modules)//element()\");\n \n-        List<StringBuilder> queryFilters = newArrayListWithCapacity(4);\n+        List<StringBuilder> queryFilters = newArrayListWithCapacity(5);\n+        queryFilters.add(new StringBuilder(\"(@jcr:primaryType = 'pant:assembly' or @jcr:primaryType = 'pant:module')\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MjMyNg==", "bodyText": "Not that I was able to figure out. The original was equivalent to select * from pant:module where... and AFAIK, you can only ever have one table that you select from. You could try to do something fancy with unions but I'm not sure such a thing is possible with Xpath.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457472326", "createdAt": "2020-07-20T15:04:59Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -89,9 +87,10 @@ protected String getQuery(SlingHttpServletRequest request) {\n         }\n \n         StringBuilder queryBuilder = new StringBuilder()\n-                .append(\"/jcr:root/content/(repositories | modules)//element(*, pant:module)\");\n+                .append(\"/jcr:root/content/(repositories | modules)//element()\");\n \n-        List<StringBuilder> queryFilters = newArrayListWithCapacity(4);\n+        List<StringBuilder> queryFilters = newArrayListWithCapacity(5);\n+        queryFilters.add(new StringBuilder(\"(@jcr:primaryType = 'pant:assembly' or @jcr:primaryType = 'pant:module')\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMjE2Nw==", "bodyText": "I see. We could create a similar structure to our java code where we have [pant:document] and have [pant:assembly] and [pant:module] extend from it. Then we could do the simpler query.\nBut I don't know if it's worth it since we are keeping those JCR types very simple.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457532167", "createdAt": "2020-07-20T16:16:47Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -89,9 +87,10 @@ protected String getQuery(SlingHttpServletRequest request) {\n         }\n \n         StringBuilder queryBuilder = new StringBuilder()\n-                .append(\"/jcr:root/content/(repositories | modules)//element(*, pant:module)\");\n+                .append(\"/jcr:root/content/(repositories | modules)//element()\");\n \n-        List<StringBuilder> queryFilters = newArrayListWithCapacity(4);\n+        List<StringBuilder> queryFilters = newArrayListWithCapacity(5);\n+        queryFilters.add(new StringBuilder(\"(@jcr:primaryType = 'pant:assembly' or @jcr:primaryType = 'pant:module')\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MjM4MQ==", "bodyText": "(not a blocker)", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457542381", "createdAt": "2020-07-20T16:32:54Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -89,9 +87,10 @@ protected String getQuery(SlingHttpServletRequest request) {\n         }\n \n         StringBuilder queryBuilder = new StringBuilder()\n-                .append(\"/jcr:root/content/(repositories | modules)//element(*, pant:module)\");\n+                .append(\"/jcr:root/content/(repositories | modules)//element()\");\n \n-        List<StringBuilder> queryFilters = newArrayListWithCapacity(4);\n+        List<StringBuilder> queryFilters = newArrayListWithCapacity(5);\n+        queryFilters.add(new StringBuilder(\"(@jcr:primaryType = 'pant:assembly' or @jcr:primaryType = 'pant:module')\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1ODI5Nw==", "bodyText": "Yeah, that same thought crossed my mind as well. I didn't like the idea of creating pant:document as an explicit node type, because then we are in danger of accidentally creating pant:document nodes in the jcr, and in that scenario, we would definitely be doing something wrong.\nThis query could potentially be improved, but in the spirit of \"don't let perfect be the enemy of good,\" I say we leave this as-is for now and revisit it in the future if it becomes problematic for some reason.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457558297", "createdAt": "2020-07-20T16:59:17Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -89,9 +87,10 @@ protected String getQuery(SlingHttpServletRequest request) {\n         }\n \n         StringBuilder queryBuilder = new StringBuilder()\n-                .append(\"/jcr:root/content/(repositories | modules)//element(*, pant:module)\");\n+                .append(\"/jcr:root/content/(repositories | modules)//element()\");\n \n-        List<StringBuilder> queryFilters = newArrayListWithCapacity(4);\n+        List<StringBuilder> queryFilters = newArrayListWithCapacity(5);\n+        queryFilters.add(new StringBuilder(\"(@jcr:primaryType = 'pant:assembly' or @jcr:primaryType = 'pant:module')\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDE3MA=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODIwMDc1OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/resources/apps/pantheon/templates/haml/html5/section.html.haml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1NzoxM1rOGzcJeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowNToyMlrOG0R6oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MTczNw==", "bodyText": "\ud83d\udc4d HAML comments vs HTML comments", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456591737", "createdAt": "2020-07-17T17:57:13Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/resources/apps/pantheon/templates/haml/html5/section.html.haml", "diffHunk": "@@ -9,16 +9,20 @@\n     - anchor = nil\n     - link = %(<a class=\"link\" href=\"##{@id}\">)\n \n-// Do the HTML part\n+-# Do the HTML part", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MjY3Mw==", "bodyText": "Thank Wes :)", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457472673", "createdAt": "2020-07-20T15:05:22Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/resources/apps/pantheon/templates/haml/html5/section.html.haml", "diffHunk": "@@ -9,16 +9,20 @@\n     - anchor = nil\n     - link = %(<a class=\"link\" href=\"##{@id}\">)\n \n-// Do the HTML part\n+-# Do the HTML part", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MTczNw=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODIwNTUzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/resources/apps/pantheon/templates/haml/html5/section.html.haml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1ODozMFrOGzcMPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowNTo0N1rOG0R8GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MjQ0Nw==", "bodyText": "This is interesting. Can you explain what is happening here?", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456592447", "createdAt": "2020-07-17T17:58:30Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/resources/apps/pantheon/templates/haml/html5/section.html.haml", "diffHunk": "@@ -9,16 +9,20 @@\n     - anchor = nil\n     - link = %(<a class=\"link\" href=\"##{@id}\">)\n \n-// Do the HTML part\n+-# Do the HTML part\n - if slevel == 0\n   %h1{:id=>@id, :class=>\"sect0\"}=%(#{anchor}#{link}#{title}#{link && '</a>'})\n   =content\n - else\n-  %section{:class=>[\"sect#{slevel}\", role]}\n-    - snum = @numbered && @caption.nil? && slevel <= (@document.attr 'sectnumlevels', 3).to_i ? %(#{sectnum} ) : nil\n-    - haml_tag \"h#{slevel + 1}##{@id}\", %(#{anchor}#{link}#{snum}#{captioned_title}#{link && '</a>'})\n-    - if slevel == 1\n-      .sectionbody\n-        =content\n-    - else\n-      =content\n+  %cp-documentation{\"pantheon-id\"=>(@document.attr :pantheon_module_id), :class=>[\"sect#{slevel}\", role]}\n+    %section{:class=>[\"sect#{slevel}\", role]}\n+      - if (@document.attr :pantheon_module_id)\n+        %h1\n+          =(@document.attr :pantheon_module_id)\n+      - snum = @numbered && @caption.nil? && slevel <= (@document.attr 'sectnumlevels', 3).to_i ? %(#{sectnum} ) : nil\n+      - haml_tag \"h#{slevel + 1}##{@id}\", %(#{anchor}#{link}#{snum}#{captioned_title}#{link && '</a>'})\n+      - if slevel == 1\n+        .sectionbody\n+          =content\n+      - else\n+        =content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MzA0OA==", "bodyText": "No I cannot. Wes provided the haml changes and I simply copy/pasted them.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457473048", "createdAt": "2020-07-20T15:05:47Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/main/resources/apps/pantheon/templates/haml/html5/section.html.haml", "diffHunk": "@@ -9,16 +9,20 @@\n     - anchor = nil\n     - link = %(<a class=\"link\" href=\"##{@id}\">)\n \n-// Do the HTML part\n+-# Do the HTML part\n - if slevel == 0\n   %h1{:id=>@id, :class=>\"sect0\"}=%(#{anchor}#{link}#{title}#{link && '</a>'})\n   =content\n - else\n-  %section{:class=>[\"sect#{slevel}\", role]}\n-    - snum = @numbered && @caption.nil? && slevel <= (@document.attr 'sectnumlevels', 3).to_i ? %(#{sectnum} ) : nil\n-    - haml_tag \"h#{slevel + 1}##{@id}\", %(#{anchor}#{link}#{snum}#{captioned_title}#{link && '</a>'})\n-    - if slevel == 1\n-      .sectionbody\n-        =content\n-    - else\n-      =content\n+  %cp-documentation{\"pantheon-id\"=>(@document.attr :pantheon_module_id), :class=>[\"sect#{slevel}\", role]}\n+    %section{:class=>[\"sect#{slevel}\", role]}\n+      - if (@document.attr :pantheon_module_id)\n+        %h1\n+          =(@document.attr :pantheon_module_id)\n+      - snum = @numbered && @caption.nil? && slevel <= (@document.attr 'sectnumlevels', 3).to_i ? %(#{sectnum} ) : nil\n+      - haml_tag \"h#{slevel + 1}##{@id}\", %(#{anchor}#{link}#{snum}#{captioned_title}#{link && '</a>'})\n+      - if slevel == 1\n+        .sectionbody\n+          =content\n+      - else\n+        =content", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MjQ0Nw=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODIxNTcxOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/extension/ModuleMetadataExtractorTreeProcessorTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODowMToyNFrOGzcScA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyMzozOVrOG0VzmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDAzMg==", "bodyText": "hmmm... I don't like this. The name should not change to moduleMetadata as assemblies will also have this node.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r456594032", "createdAt": "2020-07-17T18:01:24Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/extension/ModuleMetadataExtractorTreeProcessorTest.java", "diffHunk": "@@ -16,22 +16,22 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n @ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n-class MetadataExtractorTreeProcessorTest {\n+class ModuleMetadataExtractorTreeProcessorTest {\n \n     private final SlingContext slingContext = new SlingContext();\n \n     @Test\n     void extractMetadata() {\n         // Given\n         slingContext.build()\n-                .resource(\"/content/module1/locales/en_US/1/metadata\")\n+                .resource(\"/content/module1/locales/en_US/1/moduleMetadata\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3OTgzOQ==", "bodyText": "Good catch. Your comment made me think of another potential issue.\nLet's say we are creating a new module from soup to nuts purely through the java model api. How does it know that some levels in the structure get named something meaningful - like the jcr node representing the module inheriting the file name - while other levels in the structure get named something static - like 'locale' or 'metadata'? I imagine that those static names need to appear in the java code somewhere - but where? As an annotation? As the name of the class itself? My concern is that it's not obvious, and perhaps renaming the class from \"Metadata.class\" to \"ModuleMetadata.class\" will accidentally rename the jcr nodes as well (Perhaps also true for ModuleLocale, etc...).\nThoughts there?", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457479839", "createdAt": "2020-07-20T15:13:06Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/extension/ModuleMetadataExtractorTreeProcessorTest.java", "diffHunk": "@@ -16,22 +16,22 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n @ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n-class MetadataExtractorTreeProcessorTest {\n+class ModuleMetadataExtractorTreeProcessorTest {\n \n     private final SlingContext slingContext = new SlingContext();\n \n     @Test\n     void extractMetadata() {\n         // Given\n         slingContext.build()\n-                .resource(\"/content/module1/locales/en_US/1/metadata\")\n+                .resource(\"/content/module1/locales/en_US/1/moduleMetadata\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDAzMg=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjQwOA==", "bodyText": "To answer your first question re: creating nodes using the java api, the name of the node is dictated by the parent, the child node gets the name either from the variable name, or from the @Named annotation if one is present. This approach is static. The second approach is by creating methods on the interface which refer to the dynamically named nodes. You would then be able to get, create, remove these nodes via the API.\nI don't mind renaming the class tbh, just not the node names themselves because then we are separating the two structures even more and at that point why even bother trying to keep them the same java classes for both.", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457536408", "createdAt": "2020-07-20T16:23:39Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/test/java/com/redhat/pantheon/asciidoctor/extension/ModuleMetadataExtractorTreeProcessorTest.java", "diffHunk": "@@ -16,22 +16,22 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n @ExtendWith({SlingContextExtension.class, MockitoExtension.class})\n-class MetadataExtractorTreeProcessorTest {\n+class ModuleMetadataExtractorTreeProcessorTest {\n \n     private final SlingContext slingContext = new SlingContext();\n \n     @Test\n     void extractMetadata() {\n         // Given\n         slingContext.build()\n-                .resource(\"/content/module1/locales/en_US/1/metadata\")\n+                .resource(\"/content/module1/locales/en_US/1/moduleMetadata\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NDAzMg=="}, "originalCommit": {"oid": "d52dbaa590df8756f67e0c8688ca0436bdf5c160"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTA0NzE5OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyNjozMlrOG0V67A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyNjozMlrOG0V67A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzODI4NA==", "bodyText": "We don't need this method anymore as you can do:\ndoc.variant(\"variantName\").getOrCreate();", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457538284", "createdAt": "2020-07-20T16:26:32Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/document/DocumentVariants.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.redhat.pantheon.model.document;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.OrderedFolder;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+\n+import javax.inject.Named;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import static com.redhat.pantheon.model.document.DocumentVariant.DEFAULT_VARIANT_NAME;\n+\n+/**\n+ * @author Carlos Munoz\n+ */\n+@JcrPrimaryType(\"sling:OrderedFolder\")\n+public interface DocumentVariants extends OrderedFolder {\n+\n+    // The default variant\n+    @Named(DEFAULT_VARIANT_NAME)\n+    Child<? extends DocumentVariant> defaultVariant();\n+\n+    default Stream<? extends DocumentVariant> getVariants() {\n+        return this.as(DocumentVariant.class);\n+    }\n+\n+    default DocumentVariant getOrCreateVariant(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b822d467fcd3057e53396496fede9276d74b27b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTA1NTAzOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyODozMFrOG0WADQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyODozMFrOG0WADQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTU5Nw==", "bodyText": "I guess we still need this because of generics, but it's much more succinct than before \ud83d\udc4d", "url": "https://github.com/redhataccess/pantheon/pull/335#discussion_r457539597", "createdAt": "2020-07-20T16:28:30Z", "author": {"login": "carlosmunoz"}, "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/module/Module.java", "diffHunk": "@@ -45,125 +44,27 @@\n     @Named(\"jcr:uuid\")\n     Field<String> uuid();\n \n-    default Child<ModuleLocale> moduleLocale(Locale locale) {\n+    default Child<ModuleLocale> locale(Locale locale) {\n         return child(locale.toString(), ModuleLocale.class);\n     }\n \n     default Optional<ModuleVersion> getDraftVersion(@Nonnull final Locale locale,\n                                                     @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::draft)\n-                .getAsOptional();\n+        return (Optional<ModuleVersion>) Document.super.getDraftVersion(locale, variantName);\n     }\n \n     default Optional<ModuleVersion> getReleasedVersion(@Nonnull final Locale locale,\n-                                                    @Nonnull final String variantName) {\n-        return traverseFrom(this)\n-                .toChild(m -> m.moduleLocale(locale))\n-                .toChild(ModuleLocale::variants)\n-                .toChild(variants -> variants.variant(variantName))\n-                .toChild(ModuleVariant::released)\n-                .getAsOptional();\n+                                                       @Nonnull final String variantName) {\n+        return (Optional<ModuleVersion>) Document.super.getReleasedVersion(locale, variantName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b822d467fcd3057e53396496fede9276d74b27b"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 130, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}