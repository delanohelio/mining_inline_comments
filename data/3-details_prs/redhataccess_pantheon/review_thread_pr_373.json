{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NzIzNTIw", "number": 373, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyNTowOFrOEaFGPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyNzo0MlrOEaFJjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzgxOTUxOnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/moduleDisplay.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyNTowOFrOHDR9hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0NjozMVrOHDWlig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjA1Mg==", "bodyText": "Tagging this at the bottom, but this entire file looks substantially similar to the assemblyDisplay.tsx file. Can we combine them to reduce duplication?", "url": "https://github.com/redhataccess/pantheon/pull/373#discussion_r473202052", "createdAt": "2020-08-19T17:25:08Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/frontend/src/app/moduleDisplay.tsx", "diffHunk": "@@ -335,6 +360,31 @@ class ModuleDisplay extends Component<any, any, any> {\n         }\n     }\n \n+    private fetchAttributesFilePath = async (data) => {\n+        await this.getVariantParam()\n+        const path = data.location.pathname.substring(PathPrefixes.MODULE_PATH_PREFIX.length)\n+        // console.log(\"[fetchAttributesFilePath] path =>\", path)\n+        let repo = ''\n+        const group = path.split(\"/\")\n+        repo = group[2]\n+        fetch('/content/repositories/' + repo + '/module_variants/' + this.state.variant + '.harray.json')\n+            .then((response) => {\n+                if (response.ok) {\n+                    return response.json()\n+                } else {\n+                    throw new Error(response.statusText)\n+                }\n+            })\n+            .then(responseJSON => {\n+                if (responseJSON[\"pant:attributesFilePath\"] !== undefined) {\n+                    this.setState({ attributesFilePath: responseJSON[\"pant:attributesFilePath\"] })\n+                }\n+            })\n+            .catch((error) => {\n+                console.log(error)\n+            })\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d27b6eaea85d25eb9be0c09370ebc4a8853fe45f"}, "originalPosition": 346}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2MzU0OQ==", "bodyText": "I agree we can use a shared component for assemblyDisplay and moduleDisplay. I would like it to be a separate ticket.  This is just the initial work of introducing assembly on the UI.", "url": "https://github.com/redhataccess/pantheon/pull/373#discussion_r473263549", "createdAt": "2020-08-19T19:18:45Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/frontend/src/app/moduleDisplay.tsx", "diffHunk": "@@ -335,6 +360,31 @@ class ModuleDisplay extends Component<any, any, any> {\n         }\n     }\n \n+    private fetchAttributesFilePath = async (data) => {\n+        await this.getVariantParam()\n+        const path = data.location.pathname.substring(PathPrefixes.MODULE_PATH_PREFIX.length)\n+        // console.log(\"[fetchAttributesFilePath] path =>\", path)\n+        let repo = ''\n+        const group = path.split(\"/\")\n+        repo = group[2]\n+        fetch('/content/repositories/' + repo + '/module_variants/' + this.state.variant + '.harray.json')\n+            .then((response) => {\n+                if (response.ok) {\n+                    return response.json()\n+                } else {\n+                    throw new Error(response.statusText)\n+                }\n+            })\n+            .then(responseJSON => {\n+                if (responseJSON[\"pant:attributesFilePath\"] !== undefined) {\n+                    this.setState({ attributesFilePath: responseJSON[\"pant:attributesFilePath\"] })\n+                }\n+            })\n+            .catch((error) => {\n+                console.log(error)\n+            })\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjA1Mg=="}, "originalCommit": {"oid": "d27b6eaea85d25eb9be0c09370ebc4a8853fe45f"}, "originalPosition": 346}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NzgzNA==", "bodyText": "Ok, we'll agree that this is tech debt and we'll bring in this PR as-is.", "url": "https://github.com/redhataccess/pantheon/pull/373#discussion_r473277834", "createdAt": "2020-08-19T19:46:31Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/frontend/src/app/moduleDisplay.tsx", "diffHunk": "@@ -335,6 +360,31 @@ class ModuleDisplay extends Component<any, any, any> {\n         }\n     }\n \n+    private fetchAttributesFilePath = async (data) => {\n+        await this.getVariantParam()\n+        const path = data.location.pathname.substring(PathPrefixes.MODULE_PATH_PREFIX.length)\n+        // console.log(\"[fetchAttributesFilePath] path =>\", path)\n+        let repo = ''\n+        const group = path.split(\"/\")\n+        repo = group[2]\n+        fetch('/content/repositories/' + repo + '/module_variants/' + this.state.variant + '.harray.json')\n+            .then((response) => {\n+                if (response.ok) {\n+                    return response.json()\n+                } else {\n+                    throw new Error(response.statusText)\n+                }\n+            })\n+            .then(responseJSON => {\n+                if (responseJSON[\"pant:attributesFilePath\"] !== undefined) {\n+                    this.setState({ attributesFilePath: responseJSON[\"pant:attributesFilePath\"] })\n+                }\n+            })\n+            .catch((error) => {\n+                console.log(error)\n+            })\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjA1Mg=="}, "originalCommit": {"oid": "d27b6eaea85d25eb9be0c09370ebc4a8853fe45f"}, "originalPosition": 346}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzgyNzk3OnYy", "diffSide": "RIGHT", "path": "pantheon-bundle/frontend/src/app/versions.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyNzo0M1rOHDSC8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToxNDo0N1rOHDVl7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMzQ0Mg==", "bodyText": "It looks like you've commented out this entire file. Was that intentional? Will the commented code be coming back at some point?\nIIRC, versions.tsx is responsible for displaying most of the document details pages. I would guess that you've reworked most of that and that the old tests are now obsolete. If that's true, please remove them rather than commenting them.", "url": "https://github.com/redhataccess/pantheon/pull/373#discussion_r473203442", "createdAt": "2020-08-19T17:27:43Z", "author": {"login": "benradey"}, "path": "pantheon-bundle/frontend/src/app/versions.test.tsx", "diffHunk": "@@ -304,39 +283,39 @@ describe('Versions tests', () => {\n         expect(state.versionModulePath).toEqual('versionPath')\n     })\n \n-    test('changePublishState click', () => {\n-        const wrapper = mount(<Versions {...props} />)\n-        const instance = wrapper.instance()\n-        wrapper.setState({ 'login': true })\n-        wrapper.setState({\n-            'results': [[{ \"type\": \"draft\", \"icon\": \"BlankImage\", \"path\": \"/modules/test\", \"version\": \"Version 1\", \"publishedState\": 'Not published', \"updatedDate\": \"\", \"firstButtonType\": 'primary', \"secondButtonType\": 'secondary', \"firstButtonText\": 'Publish', \"secondButtonText\": 'Preview', \"isDropdownOpen\": false, \"isArchiveDropDownOpen\": false, \"metadata\": '' }]],\n-        })\n-        const spy = sinon.spy(instance, 'changePublishState')\n-        wrapper.find(Button).at(2).simulate('click')\n-        sinon.assert.called(spy)\n-    })\n-\n-    it('test fetchProducts function', () => {\n-        const wrapper = renderer.create(<Versions {...props} />)\n-        const inst = wrapper.getInstance()\n-        const spy = sinon.spy(inst, 'fetchProducts')\n-        inst.componentDidMount()\n-        sinon.assert.called(spy)\n-    })\n-\n-    it('test fetchVersions function', () => {\n-        const wrapper = renderer.create(<Versions {...props} />)\n-        const inst = wrapper.getInstance()\n-        const spy = sinon.spy(inst, 'fetchVersions')\n-        inst.fetchVersions()\n-        sinon.assert.called(spy)\n-    })\n-\n-    it('test changePublishState function', () => {\n-        const wrapper = renderer.create(<Versions {...props} />)\n-        const inst = wrapper.getInstance()\n-        const spy = sinon.spy(inst, 'changePublishState')\n-        inst.changePublishState(\"ds\")\n-        sinon.assert.called(spy)\n-    })\n+    // test('changePublishState click', () => {\n+    //     const wrapper = mount(<Versions {...props} />)\n+    //     const instance = wrapper.instance()\n+    //     wrapper.setState({ 'login': true })\n+    //     wrapper.setState({\n+    //         'results': [[{ \"type\": \"draft\", \"icon\": \"BlankImage\", \"path\": \"/modules/test\", \"version\": \"Version 1\", \"publishedState\": 'Not published', \"updatedDate\": \"\", \"firstButtonType\": 'primary', \"secondButtonType\": 'secondary', \"firstButtonText\": 'Publish', \"secondButtonText\": 'Preview', \"isDropdownOpen\": false, \"isArchiveDropDownOpen\": false, \"metadata\": '' }]],\n+    //     })\n+    //     const spy = sinon.spy(instance, 'changePublishState')\n+    //     wrapper.find(Button).at(2).simulate('click')\n+    //     sinon.assert.called(spy)\n+    // })\n+\n+    // it('test fetchProducts function', () => {\n+    //     const wrapper = renderer.create(<Versions {...props} />)\n+    //     const inst = wrapper.getInstance()\n+    //     const spy = sinon.spy(inst, 'fetchProducts')\n+    //     inst.componentDidMount()\n+    //     sinon.assert.called(spy)\n+    // })\n+\n+    // it('test fetchVersions function', () => {\n+    //     const wrapper = renderer.create(<Versions {...props} />)\n+    //     const inst = wrapper.getInstance()\n+    //     const spy = sinon.spy(inst, 'fetchVersions')\n+    //     inst.fetchVersions()\n+    //     sinon.assert.called(spy)\n+    // })\n+\n+    // it('test changePublishState function', () => {\n+    //     const wrapper = renderer.create(<Versions {...props} />)\n+    //     const inst = wrapper.getInstance()\n+    //     const spy = sinon.spy(inst, 'changePublishState')\n+    //     inst.changePublishState(\"ds\")\n+    //     sinon.assert.called(spy)\n+    // })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d27b6eaea85d25eb9be0c09370ebc4a8853fe45f"}, "originalPosition": 559}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2MTU0OQ==", "bodyText": "versions.test.tsx has been updated.", "url": "https://github.com/redhataccess/pantheon/pull/373#discussion_r473261549", "createdAt": "2020-08-19T19:14:47Z", "author": {"login": "xdavidson"}, "path": "pantheon-bundle/frontend/src/app/versions.test.tsx", "diffHunk": "@@ -304,39 +283,39 @@ describe('Versions tests', () => {\n         expect(state.versionModulePath).toEqual('versionPath')\n     })\n \n-    test('changePublishState click', () => {\n-        const wrapper = mount(<Versions {...props} />)\n-        const instance = wrapper.instance()\n-        wrapper.setState({ 'login': true })\n-        wrapper.setState({\n-            'results': [[{ \"type\": \"draft\", \"icon\": \"BlankImage\", \"path\": \"/modules/test\", \"version\": \"Version 1\", \"publishedState\": 'Not published', \"updatedDate\": \"\", \"firstButtonType\": 'primary', \"secondButtonType\": 'secondary', \"firstButtonText\": 'Publish', \"secondButtonText\": 'Preview', \"isDropdownOpen\": false, \"isArchiveDropDownOpen\": false, \"metadata\": '' }]],\n-        })\n-        const spy = sinon.spy(instance, 'changePublishState')\n-        wrapper.find(Button).at(2).simulate('click')\n-        sinon.assert.called(spy)\n-    })\n-\n-    it('test fetchProducts function', () => {\n-        const wrapper = renderer.create(<Versions {...props} />)\n-        const inst = wrapper.getInstance()\n-        const spy = sinon.spy(inst, 'fetchProducts')\n-        inst.componentDidMount()\n-        sinon.assert.called(spy)\n-    })\n-\n-    it('test fetchVersions function', () => {\n-        const wrapper = renderer.create(<Versions {...props} />)\n-        const inst = wrapper.getInstance()\n-        const spy = sinon.spy(inst, 'fetchVersions')\n-        inst.fetchVersions()\n-        sinon.assert.called(spy)\n-    })\n-\n-    it('test changePublishState function', () => {\n-        const wrapper = renderer.create(<Versions {...props} />)\n-        const inst = wrapper.getInstance()\n-        const spy = sinon.spy(inst, 'changePublishState')\n-        inst.changePublishState(\"ds\")\n-        sinon.assert.called(spy)\n-    })\n+    // test('changePublishState click', () => {\n+    //     const wrapper = mount(<Versions {...props} />)\n+    //     const instance = wrapper.instance()\n+    //     wrapper.setState({ 'login': true })\n+    //     wrapper.setState({\n+    //         'results': [[{ \"type\": \"draft\", \"icon\": \"BlankImage\", \"path\": \"/modules/test\", \"version\": \"Version 1\", \"publishedState\": 'Not published', \"updatedDate\": \"\", \"firstButtonType\": 'primary', \"secondButtonType\": 'secondary', \"firstButtonText\": 'Publish', \"secondButtonText\": 'Preview', \"isDropdownOpen\": false, \"isArchiveDropDownOpen\": false, \"metadata\": '' }]],\n+    //     })\n+    //     const spy = sinon.spy(instance, 'changePublishState')\n+    //     wrapper.find(Button).at(2).simulate('click')\n+    //     sinon.assert.called(spy)\n+    // })\n+\n+    // it('test fetchProducts function', () => {\n+    //     const wrapper = renderer.create(<Versions {...props} />)\n+    //     const inst = wrapper.getInstance()\n+    //     const spy = sinon.spy(inst, 'fetchProducts')\n+    //     inst.componentDidMount()\n+    //     sinon.assert.called(spy)\n+    // })\n+\n+    // it('test fetchVersions function', () => {\n+    //     const wrapper = renderer.create(<Versions {...props} />)\n+    //     const inst = wrapper.getInstance()\n+    //     const spy = sinon.spy(inst, 'fetchVersions')\n+    //     inst.fetchVersions()\n+    //     sinon.assert.called(spy)\n+    // })\n+\n+    // it('test changePublishState function', () => {\n+    //     const wrapper = renderer.create(<Versions {...props} />)\n+    //     const inst = wrapper.getInstance()\n+    //     const spy = sinon.spy(inst, 'changePublishState')\n+    //     inst.changePublishState(\"ds\")\n+    //     sinon.assert.called(spy)\n+    // })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMzQ0Mg=="}, "originalCommit": {"oid": "d27b6eaea85d25eb9be0c09370ebc4a8853fe45f"}, "originalPosition": 559}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 182, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}