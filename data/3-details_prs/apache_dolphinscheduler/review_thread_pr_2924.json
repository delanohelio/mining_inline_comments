{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwMDY0NjA4", "number": 2924, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjoxODozOFrOEFQDPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjoxODozOFrOEFQDPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQxMzA5OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/NetUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjoxODozOFrOGjXSdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNToyNDoxMVrOGkLq1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNDkwMA==", "bodyText": "what's purpose of this variable LOCAL_ADDRESS ? never assigned a value", "url": "https://github.com/apache/dolphinscheduler/pull/2924#discussion_r439734900", "createdAt": "2020-06-13T12:18:38Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/NetUtils.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.common.utils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.*;\n+import java.util.Enumeration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+import static java.util.Collections.emptyList;\n+\n+/**\n+ * NetUtils\n+ */\n+public class NetUtils {\n+\n+    private static Logger logger = LoggerFactory.getLogger(NetUtils.class);\n+\n+\n+    private static final Pattern ADDRESS_PATTERN = Pattern.compile(\"^\\\\d{1,3}(\\\\.\\\\d{1,3}){3}\\\\:\\\\d{1,5}$\");\n+\n+    private static final Pattern LOCAL_IP_PATTERN = Pattern.compile(\"127(\\\\.\\\\d{1,3}){3}$\");\n+\n+    private static final Pattern IP_PATTERN = Pattern.compile(\"\\\\d{1,3}(\\\\.\\\\d{1,3}){3,5}$\");\n+\n+    private static String ANY_HOST_VALUE = \"0.0.0.0\";\n+\n+    private static String LOCALHOST_KEY = \"localhost\";\n+\n+    private static String LOCALHOST_VALUE = \"127.0.0.1\";\n+\n+    private static  InetAddress LOCAL_ADDRESS = null;\n+\n+    private static volatile String HOST_ADDRESS;\n+\n+    public static String getHost() {\n+        if (HOST_ADDRESS != null) {\n+            return HOST_ADDRESS;\n+        }\n+\n+        InetAddress address = getLocalAddress();\n+        if (address != null) {\n+            return HOST_ADDRESS = address.getHostAddress();\n+        }\n+        return LOCALHOST_VALUE;\n+    }\n+\n+    /**\n+     * Find first valid IP from local network card\n+     *\n+     * @return first valid local IP\n+     */\n+    public static synchronized InetAddress getLocalAddress() {\n+\n+        if (null != LOCAL_ADDRESS) {\n+            return LOCAL_ADDRESS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2d6d811e1f1637b7910a8c6e79e9cffa7a139b"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5MzEwOQ==", "bodyText": "what's purpose of this variable LOCAL_ADDRESS ? never assigned a value\n\nSorry, this is my oversight, I have completed the change, please review it", "url": "https://github.com/apache/dolphinscheduler/pull/2924#discussion_r440593109", "createdAt": "2020-06-16T05:24:11Z", "author": {"login": "CalvinKirs"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/NetUtils.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.common.utils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.*;\n+import java.util.Enumeration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+import static java.util.Collections.emptyList;\n+\n+/**\n+ * NetUtils\n+ */\n+public class NetUtils {\n+\n+    private static Logger logger = LoggerFactory.getLogger(NetUtils.class);\n+\n+\n+    private static final Pattern ADDRESS_PATTERN = Pattern.compile(\"^\\\\d{1,3}(\\\\.\\\\d{1,3}){3}\\\\:\\\\d{1,5}$\");\n+\n+    private static final Pattern LOCAL_IP_PATTERN = Pattern.compile(\"127(\\\\.\\\\d{1,3}){3}$\");\n+\n+    private static final Pattern IP_PATTERN = Pattern.compile(\"\\\\d{1,3}(\\\\.\\\\d{1,3}){3,5}$\");\n+\n+    private static String ANY_HOST_VALUE = \"0.0.0.0\";\n+\n+    private static String LOCALHOST_KEY = \"localhost\";\n+\n+    private static String LOCALHOST_VALUE = \"127.0.0.1\";\n+\n+    private static  InetAddress LOCAL_ADDRESS = null;\n+\n+    private static volatile String HOST_ADDRESS;\n+\n+    public static String getHost() {\n+        if (HOST_ADDRESS != null) {\n+            return HOST_ADDRESS;\n+        }\n+\n+        InetAddress address = getLocalAddress();\n+        if (address != null) {\n+            return HOST_ADDRESS = address.getHostAddress();\n+        }\n+        return LOCALHOST_VALUE;\n+    }\n+\n+    /**\n+     * Find first valid IP from local network card\n+     *\n+     * @return first valid local IP\n+     */\n+    public static synchronized InetAddress getLocalAddress() {\n+\n+        if (null != LOCAL_ADDRESS) {\n+            return LOCAL_ADDRESS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNDkwMA=="}, "originalCommit": {"oid": "ed2d6d811e1f1637b7910a8c6e79e9cffa7a139b"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3504, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}