{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4OTk0MjE4", "number": 1702, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxODo0MFrODYyahg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToyMDowOVrODYyb5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzE4NDA2OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxODo0MFrOFe2FnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxODo0MFrOFe2FnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4Nzc3Mg==", "bodyText": "remove this line", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367887772", "createdAt": "2020-01-17T11:18:40Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -243,46 +233,35 @@ private void runScript(Connection conn, Reader reader , String dbName) throws IO\n \t\t\t\t\t\t|| fullLineDelimiter && trimmedLine.equals(getDelimiter())) {\n \t\t\t\t\tcommand.append(line.substring(0, line.lastIndexOf(getDelimiter())));\n \t\t\t\t\tcommand.append(\" \");\n-\t\t\t\t\tStatement statement = conn.createStatement();\n-\n \t\t\t\t\tsql = command.toString().replaceAll(\"\\\\{\\\\{APPDB\\\\}\\\\}\", dbName);\n-\t\t\t\t\tboolean hasResults = false;\n-\t\t\t\t\tlogger.info(\"sql : \" + sql);\n-\t\t\t\t\tif (stopOnError) {\n-\t\t\t\t\t\thasResults = statement.execute(sql);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tstatement.execute(sql);\n-\t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tlogger.error(e.getMessage(),e);\n-\t\t\t\t\t\t\tthrow e;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tResultSet rs = statement.getResultSet();\n-\t\t\t\t\tif (hasResults && rs != null) {\n-\t\t\t\t\t\tResultSetMetaData md = rs.getMetaData();\n-\t\t\t\t\t\tint cols = md.getColumnCount();\n-\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\tString name = md.getColumnLabel(i);\n-\t\t\t\t\t\t\tlogger.info(name + \"\\t\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\twhile (rs.next()) {\n-\t\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\t\tString value = rs.getString(i);\n-\t\t\t\t\t\t\t\tlogger.info(value + \"\\t\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n+                    logger.info(\"sql : {}\", sql);\n+                    \n+                    try (Statement statement = conn.createStatement()) {\n+                        statement.execute(sql);\n+                        try (ResultSet rs = statement.getResultSet()) {\n+                            if (stopOnError && rs != null) {\n+                                ResultSetMetaData md = rs.getMetaData();\n+                                int cols = md.getColumnCount();\n+                                for (int i = 0; i < cols; i++) {\n+                                    String name = md.getColumnLabel(i);\n+                                    logger.info(\"{} \\t\", name);\n+                                }\n+                                logger.info(\"\");\n+                                while (rs.next()) {\n+                                    for (int i = 0; i < cols; i++) {\n+                                        String value = rs.getString(i);\n+                                        logger.info(\"{} \\t\", value);\n+                                    }\n+                                    logger.info(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd5c345b6c850b09fd37520d84083bc750a11"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzE4NTMyOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxOToxMVrOFe2GYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxOToxMVrOFe2GYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4Nzk3MQ==", "bodyText": "logger.error(\"SQLException\", e);", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367887971", "createdAt": "2020-01-17T11:19:11Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -243,46 +233,35 @@ private void runScript(Connection conn, Reader reader , String dbName) throws IO\n \t\t\t\t\t\t|| fullLineDelimiter && trimmedLine.equals(getDelimiter())) {\n \t\t\t\t\tcommand.append(line.substring(0, line.lastIndexOf(getDelimiter())));\n \t\t\t\t\tcommand.append(\" \");\n-\t\t\t\t\tStatement statement = conn.createStatement();\n-\n \t\t\t\t\tsql = command.toString().replaceAll(\"\\\\{\\\\{APPDB\\\\}\\\\}\", dbName);\n-\t\t\t\t\tboolean hasResults = false;\n-\t\t\t\t\tlogger.info(\"sql : \" + sql);\n-\t\t\t\t\tif (stopOnError) {\n-\t\t\t\t\t\thasResults = statement.execute(sql);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tstatement.execute(sql);\n-\t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tlogger.error(e.getMessage(),e);\n-\t\t\t\t\t\t\tthrow e;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tResultSet rs = statement.getResultSet();\n-\t\t\t\t\tif (hasResults && rs != null) {\n-\t\t\t\t\t\tResultSetMetaData md = rs.getMetaData();\n-\t\t\t\t\t\tint cols = md.getColumnCount();\n-\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\tString name = md.getColumnLabel(i);\n-\t\t\t\t\t\t\tlogger.info(name + \"\\t\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\twhile (rs.next()) {\n-\t\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\t\tString value = rs.getString(i);\n-\t\t\t\t\t\t\t\tlogger.info(value + \"\\t\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n+                    logger.info(\"sql : {}\", sql);\n+                    \n+                    try (Statement statement = conn.createStatement()) {\n+                        statement.execute(sql);\n+                        try (ResultSet rs = statement.getResultSet()) {\n+                            if (stopOnError && rs != null) {\n+                                ResultSetMetaData md = rs.getMetaData();\n+                                int cols = md.getColumnCount();\n+                                for (int i = 0; i < cols; i++) {\n+                                    String name = md.getColumnLabel(i);\n+                                    logger.info(\"{} \\t\", name);\n+                                }\n+                                logger.info(\"\");\n+                                while (rs.next()) {\n+                                    for (int i = 0; i < cols; i++) {\n+                                        String value = rs.getString(i);\n+                                        logger.info(\"{} \\t\", value);\n+                                    }\n+                                    logger.info(\"\");\n+                                }\n+                            }\n+                        }   \n+                    } catch (SQLException e) {\n+                        logger.error(e.getMessage(),e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd5c345b6c850b09fd37520d84083bc750a11"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzE4NjA0OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxOToyN1rOFe2G3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxOToyN1rOFe2G3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4ODA5Mg==", "bodyText": "remove", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367888092", "createdAt": "2020-01-17T11:19:27Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -291,11 +270,11 @@ private void runScript(Connection conn, Reader reader , String dbName) throws IO\n \t\t\t}\n \n \t\t} catch (SQLException e) {\n-\t\t\tlogger.error(\"Error executing: \" + sql);\n+\t\t\tlogger.error(\"Error executing: {}\", sql);\n \t\t\tthrow e;\n \t\t} catch (IOException e) {\n \t\t\te.fillInStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd5c345b6c850b09fd37520d84083bc750a11"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzE4NjQyOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxOTozNlrOFe2HFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxOTozNlrOFe2HFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4ODE1MA==", "bodyText": "remove", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367888150", "createdAt": "2020-01-17T11:19:36Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -207,11 +197,11 @@ private void runScript(Connection conn, Reader reader) throws IOException, SQLEx\n \t\t\t}\n \n \t\t} catch (SQLException e) {\n-\t\t\tlogger.error(\"Error executing: \" + command.toString());\n+\t\t\tlogger.error(\"Error executing: {}\", command);\n \t\t\tthrow e;\n \t\t} catch (IOException e) {\n \t\t\te.fillInStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd5c345b6c850b09fd37520d84083bc750a11"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzE4Njk3OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxOTo1MFrOFe2HbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxOTo1MFrOFe2HbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4ODIzNg==", "bodyText": "add more info", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367888236", "createdAt": "2020-01-17T11:19:50Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -161,44 +161,34 @@ private void runScript(Connection conn, Reader reader) throws IOException, SQLEx\n \t\t\t\t\t\t|| fullLineDelimiter && trimmedLine.equals(getDelimiter())) {\n \t\t\t\t\tcommand.append(line.substring(0, line.lastIndexOf(getDelimiter())));\n \t\t\t\t\tcommand.append(\" \");\n-\t\t\t\t\tStatement statement = conn.createStatement();\n-\t\t\t\t\tboolean hasResults = false;\n-\t\t\t\t\tlogger.info(\"sql:\"+command.toString());\n-\t\t\t\t\tif (stopOnError) {\n-\t\t\t\t\t\thasResults = statement.execute(command.toString());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tstatement.execute(command.toString());\n-\t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tlogger.error(e.getMessage(),e);\n-\t\t\t\t\t\t\tthrow e;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tResultSet rs = statement.getResultSet();\n-\t\t\t\t\tif (hasResults && rs != null) {\n-\t\t\t\t\t\tResultSetMetaData md = rs.getMetaData();\n-\t\t\t\t\t\tint cols = md.getColumnCount();\n-\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\tString name = md.getColumnLabel(i);\n-\t\t\t\t\t\t\tlogger.info(name + \"\\t\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\twhile (rs.next()) {\n-\t\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\t\tString value = rs.getString(i);\n-\t\t\t\t\t\t\t\tlogger.info(value + \"\\t\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n+                    logger.info(\"sql: {}\", command);\n \n+                    try (Statement statement = conn.createStatement()) {\n+                        statement.execute(command.toString());\n+                        try (ResultSet rs = statement.getResultSet()) {\n+                            if (stopOnError && rs != null) {\n+                                ResultSetMetaData md = rs.getMetaData();\n+                                int cols = md.getColumnCount();\n+                                for (int i = 0; i < cols; i++) {\n+                                    String name = md.getColumnLabel(i);\n+                                    logger.info(\"{} \\t\", name);\n+                                }\n+                                logger.info(\"\");\n+                                while (rs.next()) {\n+                                    for (int i = 0; i < cols; i++) {\n+                                        String value = rs.getString(i);\n+                                        logger.info(\"{} \\t\", value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd5c345b6c850b09fd37520d84083bc750a11"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzE4NzU3OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToyMDowOVrOFe2H2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToyMDowOVrOFe2H2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4ODM0NA==", "bodyText": "logger.error(\"SQLException\", e);", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367888344", "createdAt": "2020-01-17T11:20:09Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -161,44 +161,34 @@ private void runScript(Connection conn, Reader reader) throws IOException, SQLEx\n \t\t\t\t\t\t|| fullLineDelimiter && trimmedLine.equals(getDelimiter())) {\n \t\t\t\t\tcommand.append(line.substring(0, line.lastIndexOf(getDelimiter())));\n \t\t\t\t\tcommand.append(\" \");\n-\t\t\t\t\tStatement statement = conn.createStatement();\n-\t\t\t\t\tboolean hasResults = false;\n-\t\t\t\t\tlogger.info(\"sql:\"+command.toString());\n-\t\t\t\t\tif (stopOnError) {\n-\t\t\t\t\t\thasResults = statement.execute(command.toString());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tstatement.execute(command.toString());\n-\t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tlogger.error(e.getMessage(),e);\n-\t\t\t\t\t\t\tthrow e;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tResultSet rs = statement.getResultSet();\n-\t\t\t\t\tif (hasResults && rs != null) {\n-\t\t\t\t\t\tResultSetMetaData md = rs.getMetaData();\n-\t\t\t\t\t\tint cols = md.getColumnCount();\n-\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\tString name = md.getColumnLabel(i);\n-\t\t\t\t\t\t\tlogger.info(name + \"\\t\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\twhile (rs.next()) {\n-\t\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\t\tString value = rs.getString(i);\n-\t\t\t\t\t\t\t\tlogger.info(value + \"\\t\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n+                    logger.info(\"sql: {}\", command);\n \n+                    try (Statement statement = conn.createStatement()) {\n+                        statement.execute(command.toString());\n+                        try (ResultSet rs = statement.getResultSet()) {\n+                            if (stopOnError && rs != null) {\n+                                ResultSetMetaData md = rs.getMetaData();\n+                                int cols = md.getColumnCount();\n+                                for (int i = 0; i < cols; i++) {\n+                                    String name = md.getColumnLabel(i);\n+                                    logger.info(\"{} \\t\", name);\n+                                }\n+                                logger.info(\"\");\n+                                while (rs.next()) {\n+                                    for (int i = 0; i < cols; i++) {\n+                                        String value = rs.getString(i);\n+                                        logger.info(\"{} \\t\", value);\n+                                    }\n+                                    logger.info(\"\");\n+                                }\n+                            }\n+                        }   \n+                    } catch (SQLException e) {\n+                        logger.error(e.getMessage(),e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd5c345b6c850b09fd37520d84083bc750a11"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3463, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}