{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMTIxNjMx", "number": 2023, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNTozMjowOVrODmElCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNTozMjo0OVrODmElJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjQ3NDk4OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessBuilderForWin32.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNTozMjowOVrOFzTQag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNTozMjowOVrOFzTQag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzNzE5NA==", "bodyText": "@dailidong what's the different between this class and the internal class? I would prefer remove all duplicated document, emphasize the difference and link to ProcessBuilder's build if there is nothing changed. Also at the beginning of the class document, it is possibly required that we mention it is copied from openjdk with modification, which will help reduce legal risk.", "url": "https://github.com/apache/dolphinscheduler/pull/2023#discussion_r389337194", "createdAt": "2020-03-08T05:32:09Z", "author": {"login": "tisonkun"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessBuilderForWin32.java", "diffHunk": "@@ -0,0 +1,1065 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.common.utils.process;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class is used to create operating system processes.\n+ *\n+ * <p>Each {@code ProcessBuilderForWindows} instance manages a collection\n+ * of process attributes.  The {@link #start()} method creates a new\n+ * {@link Process} instance with those attributes.  The {@link\n+ * #start()} method can be invoked repeatedly from the same instance\n+ * to create new subprocesses with identical or related attributes.\n+ *\n+ * <p>Each process builder manages these process attributes:\n+ *\n+ * <ul>\n+ *\n+ * <li>a <i>command</i>, a list of strings which signifies the\n+ * external program file to be invoked and its arguments, if any.\n+ * Which string lists represent a valid operating system command is\n+ * system-dependent.  For example, it is common for each conceptual\n+ * argument to be an element in this list, but there are operating\n+ * systems where programs are expected to tokenize command line\n+ * strings themselves - on such a system a Java implementation might\n+ * require commands to contain exactly two elements.\n+ *\n+ * <li>an <i>environment</i>, which is a system-dependent mapping from\n+ * <i>variables</i> to <i>values</i>.  The initial value is a copy of\n+ * the environment of the current process (see {@link System#getenv()}).\n+ *\n+ * <li>a <i>working directory</i>.  The default value is the current\n+ * working directory of the current process, usually the directory\n+ * named by the system property {@code user.dir}.\n+ *\n+ * <li><a name=\"redirect-input\">a source of <i>standard input</i></a>.\n+ * By default, the subprocess reads input from a pipe.  Java code\n+ * can access this pipe via the output stream returned by\n+ * {@link Process#getOutputStream()}.  However, standard input may\n+ * be redirected to another source using\n+ * {@link #redirectInput(ProcessBuilderForWin32.Redirect) redirectInput}.\n+ * In this case, {@link Process#getOutputStream()} will return a\n+ * <i>null output stream</i>, for which:\n+ *\n+ * <ul>\n+ * <li>the {@link OutputStream#write(int) write} methods always\n+ * throw {@code IOException}\n+ * <li>the {@link OutputStream#close() close} method does nothing\n+ * </ul>\n+ *\n+ * <li><a name=\"redirect-output\">a destination for <i>standard output</i>\n+ * and <i>standard error</i></a>.  By default, the subprocess writes standard\n+ * output and standard error to pipes.  Java code can access these pipes\n+ * via the input streams returned by {@link Process#getInputStream()} and\n+ * {@link Process#getErrorStream()}.  However, standard output and\n+ * standard error may be redirected to other destinations using\n+ * {@link #redirectOutput(ProcessBuilderForWin32.Redirect) redirectOutput} and\n+ * {@link #redirectError(ProcessBuilderForWin32.Redirect) redirectError}.\n+ * In this case, {@link Process#getInputStream()} and/or\n+ * {@link Process#getErrorStream()} will return a <i>null input\n+ * stream</i>, for which:\n+ *\n+ * <ul>\n+ * <li>the {@link InputStream#read() read} methods always return\n+ * {@code -1}\n+ * <li>the {@link InputStream#available() available} method always returns\n+ * {@code 0}\n+ * <li>the {@link InputStream#close() close} method does nothing\n+ * </ul>\n+ *\n+ * <li>a <i>redirectErrorStream</i> property.  Initially, this property\n+ * is {@code false}, meaning that the standard output and error\n+ * output of a subprocess are sent to two separate streams, which can\n+ * be accessed using the {@link Process#getInputStream()} and {@link\n+ * Process#getErrorStream()} methods.\n+ *\n+ * <p>If the value is set to {@code true}, then:\n+ *\n+ * <ul>\n+ * <li>standard error is merged with the standard output and always sent\n+ * to the same destination (this makes it easier to correlate error\n+ * messages with the corresponding output)\n+ * <li>the common destination of standard error and standard output can be\n+ * redirected using\n+ * {@link #redirectOutput(ProcessBuilderForWin32.Redirect) redirectOutput}\n+ * <li>any redirection set by the\n+ * {@link #redirectError(ProcessBuilderForWin32.Redirect) redirectError}\n+ * method is ignored when creating a subprocess\n+ * <li>the stream returned from {@link Process#getErrorStream()} will\n+ * always be a <a href=\"#redirect-output\">null input stream</a>\n+ * </ul>\n+ *\n+ * </ul>\n+ *\n+ * <p>Modifying a process builder's attributes will affect processes\n+ * subsequently started by that object's {@link #start()} method, but\n+ * will never affect previously started processes or the Java process\n+ * itself.\n+ *\n+ * <p>Most error checking is performed by the {@link #start()} method.\n+ * It is possible to modify the state of an object so that {@link\n+ * #start()} will fail.  For example, setting the command attribute to\n+ * an empty list will not throw an exception unless {@link #start()}\n+ * is invoked.\n+ *\n+ * <p><strong>Note that this class is not synchronized.</strong>\n+ * If multiple threads access a {@code ProcessBuilderForWindows} instance\n+ * concurrently, and at least one of the threads modifies one of the\n+ * attributes structurally, it <i>must</i> be synchronized externally.\n+ *\n+ * <p>Starting a new process which uses the default working directory\n+ * and environment is easy:\n+ *\n+ * <pre> {@code\n+ * Process p = new ProcessBuilderForWindows(\"myCommand\", \"myArg\").start();\n+ * }</pre>\n+ *\n+ * <p>Here is an example that starts a process with a modified working\n+ * directory and environment, and redirects standard output and error\n+ * to be appended to a log file:\n+ *\n+ * <pre> {@code\n+ * ProcessBuilderForWindows pb =\n+ *   new ProcessBuilderForWindows(\"myCommand\", \"myArg1\", \"myArg2\");\n+ * Map<String, String> env = pb.environment();\n+ * env.put(\"VAR1\", \"myValue\");\n+ * env.remove(\"OTHERVAR\");\n+ * env.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\");\n+ * pb.directory(new File(\"myDir\"));\n+ * File log = new File(\"log\");\n+ * pb.redirectErrorStream(true);\n+ * pb.redirectOutput(Redirect.appendTo(log));\n+ * Process p = pb.start();\n+ * assert pb.redirectInput() == Redirect.PIPE;\n+ * assert pb.redirectOutput().file() == log;\n+ * assert p.getInputStream().read() == -1;\n+ * }</pre>\n+ *\n+ * <p>To start a process with an explicit set of environment\n+ * variables, first call {@link Map#clear() Map.clear()}\n+ * before adding environment variables.\n+ *\n+ * @author Martin Buchholz\n+ * @since 1.5\n+ */\n+\n+public class ProcessBuilderForWin32 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "847f38341c68ac83d8b1148a75f55d1db3020919"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjQ3NTA3OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessEnvironmentForWin32.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNTozMjozMlrOFzTQdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNTozMjozMlrOFzTQdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzNzIwNQ==", "bodyText": "ditto", "url": "https://github.com/apache/dolphinscheduler/pull/2023#discussion_r389337205", "createdAt": "2020-03-08T05:32:32Z", "author": {"login": "tisonkun"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessEnvironmentForWin32.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.common.utils.process;\n+\n+import com.sun.jna.platform.win32.Kernel32Util;\n+\n+import java.util.*;\n+\n+final class ProcessEnvironmentForWin32 extends HashMap<String,String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "847f38341c68ac83d8b1148a75f55d1db3020919"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjQ3NTI2OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNTozMjo0OVrOFzTQig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNTozMjo0OVrOFzTQig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzNzIyNg==", "bodyText": "ditto", "url": "https://github.com/apache/dolphinscheduler/pull/2023#discussion_r389337226", "createdAt": "2020-03-08T05:32:49Z", "author": {"login": "tisonkun"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java", "diffHunk": "@@ -0,0 +1,752 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.common.utils.process;\n+\n+import com.sun.jna.Pointer;\n+import com.sun.jna.platform.win32.*;\n+import com.sun.jna.ptr.IntByReference;\n+import sun.security.action.GetPropertyAction;\n+\n+import java.io.*;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.Locale;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.sun.jna.platform.win32.WinBase.STILL_ACTIVE;\n+\n+public class ProcessImplForWin32 extends Process {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "847f38341c68ac83d8b1148a75f55d1db3020919"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3557, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}