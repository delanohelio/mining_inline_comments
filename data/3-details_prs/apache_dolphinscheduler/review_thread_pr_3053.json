{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5OTMwMjg2", "number": 3053, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDozNToxOVrOEItIbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDozNToxOVrOEItIbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTYzNTAxOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionVersionService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDozNToxOVrOGo0_zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDozNToxOVrOGo0_zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2NDUyNw==", "bodyText": "Hi @dailidong , Is it necessary to add distributed locks?", "url": "https://github.com/apache/dolphinscheduler/pull/3053#discussion_r445464527", "createdAt": "2020-06-25T10:35:19Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionVersionService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.api.service;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.apache.dolphinscheduler.api.enums.Status;\n+import org.apache.dolphinscheduler.api.utils.PageInfo;\n+import org.apache.dolphinscheduler.common.Constants;\n+import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;\n+import org.apache.dolphinscheduler.dao.entity.ProcessDefinitionVersion;\n+import org.apache.dolphinscheduler.dao.entity.Project;\n+import org.apache.dolphinscheduler.dao.entity.User;\n+import org.apache.dolphinscheduler.dao.mapper.ProcessDefinitionVersionMapper;\n+import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.baomidou.mybatisplus.core.metadata.IPage;\n+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;\n+import com.google.common.collect.ImmutableMap;\n+\n+@Service\n+public class ProcessDefinitionVersionService {\n+\n+    @Autowired\n+    private ProcessDefinitionVersionMapper processDefinitionVersionMapper;\n+\n+    @Autowired\n+    private ProjectService projectService;\n+\n+    @Autowired\n+    private ProjectMapper projectMapper;\n+\n+    /**\n+     * add the newest version of one process definition\n+     *\n+     * @param processDefinition the process definition that need to record version\n+     * @return the newest version number of this process definition\n+     */\n+    public long addProcessDefinitionVersion(ProcessDefinition processDefinition) {\n+\n+        long version = this.queryMaxVersionByProcessDefinitionId(processDefinition.getId()) + 1;\n+\n+        ProcessDefinitionVersion processDefinitionVersion = ProcessDefinitionVersion\n+                .newBuilder()\n+                .processDefinitionId(processDefinition.getId())\n+                .version(version)\n+                .processDefinitionJson(processDefinition.getProcessDefinitionJson())\n+                .description(processDefinition.getDescription())\n+                .locations(processDefinition.getLocations())\n+                .connects(processDefinition.getConnects())\n+                .timeout(processDefinition.getTimeout())\n+                .globalParams(processDefinition.getGlobalParams())\n+                .createTime(processDefinition.getUpdateTime())\n+                .receivers(processDefinition.getReceivers())\n+                .receiversCc(processDefinition.getReceiversCc())\n+                .resourceIds(processDefinition.getResourceIds())\n+                .build();\n+\n+        processDefinitionVersionMapper.insert(processDefinitionVersion);\n+\n+        return version;\n+    }\n+\n+    /**\n+     * query the max version number by the process definition id\n+     *\n+     * @param processDefinitionId process definition id\n+     * @return the max version number of this id\n+     */\n+    public long queryMaxVersionByProcessDefinitionId(int processDefinitionId) {\n+        // TODO Is it necessary to add distributed locks?\n+        Long maxVersion =  processDefinitionVersionMapper.queryMaxVersionByProcessDefinitionId(processDefinitionId);\n+        if (Objects.isNull(maxVersion)) {\n+            return 0L;\n+        } else {\n+            return maxVersion;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5309fbe8198feaa11ba5410fd4c2be41dff12a82"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3398, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}