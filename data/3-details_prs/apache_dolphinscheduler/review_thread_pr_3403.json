{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNjY5ODAx", "number": 3403, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozNjo1OVrOEU8VMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDo0MDozN1rOEU8ZeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzk1NDQxOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozNzowMFrOG7azQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozNzowMFrOG7azQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1ODI3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/apache/dolphinscheduler/pull/3403#discussion_r464958272", "createdAt": "2020-08-04T10:37:00Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java", "diffHunk": "@@ -50,6 +50,7 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(UsersController.class);\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd289b3e10438b5c600ae22f391da078ccaf3fec"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzk1NjUzOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozNzo0NFrOG7a0jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozNzo0NFrOG7a0jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1ODYwNQ==", "bodyText": "Add parameterFormat  to Constants for better performance.", "url": "https://github.com/apache/dolphinscheduler/pull/3403#discussion_r464958605", "createdAt": "2020-08-04T10:37:44Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java", "diffHunk": "@@ -432,14 +433,36 @@ public Result authorizedUser(@ApiIgnore @RequestAttribute(value = Constants.SESS\n                                @RequestParam(value = \"userPassword\") String userPassword,\n                                @RequestParam(value = \"repeatPassword\") String repeatPassword,\n                                @RequestParam(value = \"email\") String email) throws Exception {\n-        userName = userName.replaceAll(\"[\\n|\\r|\\t]\", \"\");\n-        userPassword = userPassword.replaceAll(\"[\\n|\\r|\\t]\", \"\");\n-        repeatPassword = repeatPassword.replaceAll(\"[\\n|\\r|\\t]\", \"\");\n-        email = email.replaceAll(\"[\\n|\\r|\\t]\", \"\");\n+        String parameterFormat = \"[\\n|\\r|\\t]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd289b3e10438b5c600ae22f391da078ccaf3fec"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzk1ODA1OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozODoxMVrOG7a1fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozODoxMVrOG7a1fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1ODg0Ng==", "bodyText": "Add parameterFormat to Constants for better performance.", "url": "https://github.com/apache/dolphinscheduler/pull/3403#discussion_r464958846", "createdAt": "2020-08-04T10:38:11Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java", "diffHunk": "@@ -432,14 +433,36 @@ public Result authorizedUser(@ApiIgnore @RequestAttribute(value = Constants.SESS\n                                @RequestParam(value = \"userPassword\") String userPassword,\n                                @RequestParam(value = \"repeatPassword\") String repeatPassword,\n                                @RequestParam(value = \"email\") String email) throws Exception {\n-        userName = userName.replaceAll(\"[\\n|\\r|\\t]\", \"\");\n-        userPassword = userPassword.replaceAll(\"[\\n|\\r|\\t]\", \"\");\n-        repeatPassword = repeatPassword.replaceAll(\"[\\n|\\r|\\t]\", \"\");\n-        email = email.replaceAll(\"[\\n|\\r|\\t]\", \"\");\n+        String parameterFormat = \"[\\n|\\r|\\t]\";\n+        userName = userName.replaceAll(parameterFormat, \"\");\n+        userPassword = userPassword.replaceAll(parameterFormat, \"\");\n+        repeatPassword = repeatPassword.replaceAll(parameterFormat, \"\");\n+        email = email.replaceAll(parameterFormat, \"\");\n         logger.info(\"user self-register, userName: {}, userPassword {}, repeatPassword {}, eamil {}\",\n-                userName, userPassword, repeatPassword, email);\n+                userName, Constants.PASSWORD_DEFAULT, Constants.PASSWORD_DEFAULT, email);\n         Map<String, Object> result = usersService.registerUser(userName, userPassword, repeatPassword, email);\n         return returnDataList(result);\n     }\n \n+    /**\n+     * user activate\n+     *\n+     * @param userName       user name\n+     */\n+    @ApiOperation(value=\"activateUser\",notes = \"ACTIVATE_USER_NOTES\")\n+    @ApiImplicitParams({\n+            @ApiImplicitParam(name = \"userName\", value = \"USER_NAME\", type = \"String\"),\n+    })\n+    @PostMapping(\"/activate\")\n+    @ResponseStatus(HttpStatus.OK)\n+    @ApiException(UPDATE_USER_ERROR)\n+    public Result<Object> activateUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                       @RequestParam(value = \"userName\") String userName) {\n+        String parameterFormat = \"[\\n|\\r|\\t]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd289b3e10438b5c600ae22f391da078ccaf3fec"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzk2MDQwOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UsersService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozOTowNVrOG7a29w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozOTowNVrOG7a29w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1OTIyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> result = new HashMap<>(5);\n          \n          \n            \n                    Map<String, Object> result = new HashMap<>();", "url": "https://github.com/apache/dolphinscheduler/pull/3403#discussion_r464959223", "createdAt": "2020-08-04T10:39:05Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UsersService.java", "diffHunk": "@@ -934,10 +936,51 @@ private void copyResourceFiles(ResourceComponent resourceComponent, String srcBa\n             putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, \"two passwords are not same\");\n             return result;\n         }\n-\n-        createUser(userName, userPassword, email, 1, \"\", \"\", 0);\n+        User user = createUser(userName, userPassword, email, 1, \"\", \"\", Flag.NO.ordinal());\n         putMsg(result, Status.SUCCESS);\n+        result.put(Constants.DATA_LIST, user);\n         return result;\n     }\n \n+    /**\n+     * activate user, only system admin have permission, change user state code 0 to 1\n+     *\n+     * @param loginUser login user\n+     * @return create result code\n+     */\n+    public Map<String, Object> activateUser(User loginUser, String userName) {\n+        Map<String, Object> result = new HashMap<>(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd289b3e10438b5c600ae22f391da078ccaf3fec"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzk2MTcyOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/UsersControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozOTozNVrOG7a32g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDozOTozNVrOG7a32g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1OTQ1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(mvcResult.getResponse().getContentAsString());\n          \n      \n    \n    \n  \n\nAssert judge is enough.", "url": "https://github.com/apache/dolphinscheduler/pull/3403#discussion_r464959450", "createdAt": "2020-08-04T10:39:35Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/UsersControllerTest.java", "diffHunk": "@@ -287,4 +287,21 @@ public void testRegisterUser() throws Exception {\n         Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n         logger.info(mvcResult.getResponse().getContentAsString());\n     }\n+\n+    @Test\n+    public void testActivateUser() throws Exception {\n+        MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\n+        paramsMap.add(\"userName\",\"user_test\");\n+\n+        MvcResult mvcResult = mockMvc.perform(post(\"/users/activate\")\n+                .header(SESSION_ID, sessionId)\n+                .params(paramsMap))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))\n+                .andReturn();\n+\n+        Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n+        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n+        logger.info(mvcResult.getResponse().getContentAsString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd289b3e10438b5c600ae22f391da078ccaf3fec"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzk2NTM2OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDo0MDozN1rOG7a56Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTo0ODo1NFrOG7c37A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1OTk3Nw==", "bodyText": "Please remove all the log in test to avoid some unnecessary logs.", "url": "https://github.com/apache/dolphinscheduler/pull/3403#discussion_r464959977", "createdAt": "2020-08-04T10:40:37Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java", "diffHunk": "@@ -498,6 +498,61 @@ public void testRegisterUser() {\n         }\n     }\n \n+\n+    @Test\n+    public void testActivateUser() {\n+        User user = new User();\n+        user.setUserType(UserType.GENERAL_USER);\n+        String userName = \"userTest0002~\";\n+        try {\n+            //not admin\n+            Map<String, Object> result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.USER_NO_OPERATION_PERM, result.get(Constants.STATUS));\n+\n+            //userName error\n+            user.setUserType(UserType.ADMIN_USER);\n+            result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, result.get(Constants.STATUS));\n+\n+            //user not exist\n+            userName = \"userTest10013\";\n+            result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.USER_NOT_EXIST, result.get(Constants.STATUS));\n+            logger.info(result.toString());\n+\n+            //user state error\n+            userName = \"userTest0001\";\n+            when(userMapper.queryByUserNameAccurately(userName)).thenReturn(getUser());\n+            result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, result.get(Constants.STATUS));\n+            logger.info(result.toString());\n+\n+            //success\n+            when(userMapper.queryByUserNameAccurately(userName)).thenReturn(getDisabledUser());\n+            result = usersService.activateUser(user, userName);\n+            logger.info(result.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd289b3e10438b5c600ae22f391da078ccaf3fec"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2NDE1OQ==", "bodyText": "ok, thanks!", "url": "https://github.com/apache/dolphinscheduler/pull/3403#discussion_r464964159", "createdAt": "2020-08-04T10:49:41Z", "author": {"login": "cpsky"}, "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java", "diffHunk": "@@ -498,6 +498,61 @@ public void testRegisterUser() {\n         }\n     }\n \n+\n+    @Test\n+    public void testActivateUser() {\n+        User user = new User();\n+        user.setUserType(UserType.GENERAL_USER);\n+        String userName = \"userTest0002~\";\n+        try {\n+            //not admin\n+            Map<String, Object> result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.USER_NO_OPERATION_PERM, result.get(Constants.STATUS));\n+\n+            //userName error\n+            user.setUserType(UserType.ADMIN_USER);\n+            result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, result.get(Constants.STATUS));\n+\n+            //user not exist\n+            userName = \"userTest10013\";\n+            result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.USER_NOT_EXIST, result.get(Constants.STATUS));\n+            logger.info(result.toString());\n+\n+            //user state error\n+            userName = \"userTest0001\";\n+            when(userMapper.queryByUserNameAccurately(userName)).thenReturn(getUser());\n+            result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, result.get(Constants.STATUS));\n+            logger.info(result.toString());\n+\n+            //success\n+            when(userMapper.queryByUserNameAccurately(userName)).thenReturn(getDisabledUser());\n+            result = usersService.activateUser(user, userName);\n+            logger.info(result.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1OTk3Nw=="}, "originalCommit": {"oid": "fd289b3e10438b5c600ae22f391da078ccaf3fec"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MjIzNg==", "bodyText": "I have fix these problems\uff0cplease check it, thanks!", "url": "https://github.com/apache/dolphinscheduler/pull/3403#discussion_r464992236", "createdAt": "2020-08-04T11:48:54Z", "author": {"login": "cpsky"}, "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java", "diffHunk": "@@ -498,6 +498,61 @@ public void testRegisterUser() {\n         }\n     }\n \n+\n+    @Test\n+    public void testActivateUser() {\n+        User user = new User();\n+        user.setUserType(UserType.GENERAL_USER);\n+        String userName = \"userTest0002~\";\n+        try {\n+            //not admin\n+            Map<String, Object> result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.USER_NO_OPERATION_PERM, result.get(Constants.STATUS));\n+\n+            //userName error\n+            user.setUserType(UserType.ADMIN_USER);\n+            result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, result.get(Constants.STATUS));\n+\n+            //user not exist\n+            userName = \"userTest10013\";\n+            result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.USER_NOT_EXIST, result.get(Constants.STATUS));\n+            logger.info(result.toString());\n+\n+            //user state error\n+            userName = \"userTest0001\";\n+            when(userMapper.queryByUserNameAccurately(userName)).thenReturn(getUser());\n+            result = usersService.activateUser(user, userName);\n+            Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, result.get(Constants.STATUS));\n+            logger.info(result.toString());\n+\n+            //success\n+            when(userMapper.queryByUserNameAccurately(userName)).thenReturn(getDisabledUser());\n+            result = usersService.activateUser(user, userName);\n+            logger.info(result.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1OTk3Nw=="}, "originalCommit": {"oid": "fd289b3e10438b5c600ae22f391da078ccaf3fec"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3387, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}