{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NTcwOTgz", "number": 3869, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjo0NTo1NVrOEs2DNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNTo1NTowOVrOEwFTZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDU4MzU3OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjo0NTo1NVrOHgTdkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjo0NTo1NVrOHgTdkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzNTM0NA==", "bodyText": "This lines can be replace by :\nMap<String, String> paramsMap = PluginParamsTransfer.getPluginParamsMap(alertParams);", "url": "https://github.com/apache/dolphinscheduler/pull/3869#discussion_r503635344", "createdAt": "2020-10-13T02:45:55Z", "author": {"login": "gaojun2048"}, "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannel.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.plugin.alert.dingtalk;\n+\n+import org.apache.dolphinscheduler.spi.alert.AlertChannel;\n+import org.apache.dolphinscheduler.spi.alert.AlertData;\n+import org.apache.dolphinscheduler.spi.alert.AlertInfo;\n+import org.apache.dolphinscheduler.spi.alert.AlertResult;\n+import org.apache.dolphinscheduler.spi.params.base.PluginParams;\n+import org.apache.dolphinscheduler.spi.utils.JSONUtils;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DingTalkAlertChannel\n+ */\n+public class DingTalkAlertChannel implements AlertChannel {\n+    private static final Logger logger = LoggerFactory.getLogger(DingTalkAlertChannel.class);\n+\n+    @Override\n+    public AlertResult process(AlertInfo alertInfo) {\n+\n+        AlertData alertData = alertInfo.getAlertData();\n+        String alertParams = alertInfo.getAlertParams();\n+        List<PluginParams> pluginParams = JSONUtils.toList(alertParams, PluginParams.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23c00cac0aea8222844f0b139e2fb39d7f0efab5"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDU5MDkwOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjo0OTo1MVrOHgThrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxODowMDoxN1rOHje3uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzNjM5OQ==", "bodyText": "I think we need add the message to AlertResult when send message failed.\nYou can add it by alertResult.setMessage()", "url": "https://github.com/apache/dolphinscheduler/pull/3869#discussion_r503636399", "createdAt": "2020-10-13T02:49:51Z", "author": {"login": "gaojun2048"}, "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannel.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.plugin.alert.dingtalk;\n+\n+import org.apache.dolphinscheduler.spi.alert.AlertChannel;\n+import org.apache.dolphinscheduler.spi.alert.AlertData;\n+import org.apache.dolphinscheduler.spi.alert.AlertInfo;\n+import org.apache.dolphinscheduler.spi.alert.AlertResult;\n+import org.apache.dolphinscheduler.spi.params.base.PluginParams;\n+import org.apache.dolphinscheduler.spi.utils.JSONUtils;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DingTalkAlertChannel\n+ */\n+public class DingTalkAlertChannel implements AlertChannel {\n+    private static final Logger logger = LoggerFactory.getLogger(DingTalkAlertChannel.class);\n+\n+    @Override\n+    public AlertResult process(AlertInfo alertInfo) {\n+\n+        AlertData alertData = alertInfo.getAlertData();\n+        String alertParams = alertInfo.getAlertParams();\n+        List<PluginParams> pluginParams = JSONUtils.toList(alertParams, PluginParams.class);\n+        Map<String, String> paramsMap = new HashMap<>();\n+        for (PluginParams param : pluginParams) {\n+            paramsMap.put(param.getName(), param.getValue().toString());\n+        }\n+        AlertResult alertResult = new AlertResult();\n+        alertResult.setStatus(Boolean.toString(Boolean.TRUE));\n+        DingTalkSender dingTalkSender = new DingTalkSender(paramsMap);\n+        try {\n+            dingTalkSender.sendDingTalkMsg(alertData.getTitle(), alertData.getContent());\n+        } catch (IOException e) {\n+            alertResult.setStatus(Boolean.toString(Boolean.FALSE));\n+            logger.error(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23c00cac0aea8222844f0b139e2fb39d7f0efab5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2Nzk5Mg==", "bodyText": "Thank you for your suggestion. I will judge the response parameters of DingTalk.", "url": "https://github.com/apache/dolphinscheduler/pull/3869#discussion_r506967992", "createdAt": "2020-10-17T18:00:17Z", "author": {"login": "CalvinKirs"}, "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannel.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.plugin.alert.dingtalk;\n+\n+import org.apache.dolphinscheduler.spi.alert.AlertChannel;\n+import org.apache.dolphinscheduler.spi.alert.AlertData;\n+import org.apache.dolphinscheduler.spi.alert.AlertInfo;\n+import org.apache.dolphinscheduler.spi.alert.AlertResult;\n+import org.apache.dolphinscheduler.spi.params.base.PluginParams;\n+import org.apache.dolphinscheduler.spi.utils.JSONUtils;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DingTalkAlertChannel\n+ */\n+public class DingTalkAlertChannel implements AlertChannel {\n+    private static final Logger logger = LoggerFactory.getLogger(DingTalkAlertChannel.class);\n+\n+    @Override\n+    public AlertResult process(AlertInfo alertInfo) {\n+\n+        AlertData alertData = alertInfo.getAlertData();\n+        String alertParams = alertInfo.getAlertParams();\n+        List<PluginParams> pluginParams = JSONUtils.toList(alertParams, PluginParams.class);\n+        Map<String, String> paramsMap = new HashMap<>();\n+        for (PluginParams param : pluginParams) {\n+            paramsMap.put(param.getName(), param.getValue().toString());\n+        }\n+        AlertResult alertResult = new AlertResult();\n+        alertResult.setStatus(Boolean.toString(Boolean.TRUE));\n+        DingTalkSender dingTalkSender = new DingTalkSender(paramsMap);\n+        try {\n+            dingTalkSender.sendDingTalkMsg(alertData.getTitle(), alertData.getContent());\n+        } catch (IOException e) {\n+            alertResult.setStatus(Boolean.toString(Boolean.FALSE));\n+            logger.error(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzNjM5OQ=="}, "originalCommit": {"oid": "23c00cac0aea8222844f0b139e2fb39d7f0efab5"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDU5Njc0OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannelFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjo1MzoxMVrOHgTlFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjo1MzoxMVrOHgTlFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzNzI2OA==", "bodyText": "RadioParam need two options, you only gave a \"NO\" option.", "url": "https://github.com/apache/dolphinscheduler/pull/3869#discussion_r503637268", "createdAt": "2020-10-13T02:53:11Z", "author": {"login": "gaojun2048"}, "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannelFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.plugin.alert.dingtalk;\n+\n+import org.apache.dolphinscheduler.spi.alert.AlertChannel;\n+import org.apache.dolphinscheduler.spi.alert.AlertChannelFactory;\n+import org.apache.dolphinscheduler.spi.params.InputParam;\n+import org.apache.dolphinscheduler.spi.params.PasswordParam;\n+import org.apache.dolphinscheduler.spi.params.RadioParam;\n+import org.apache.dolphinscheduler.spi.params.base.ParamsOptions;\n+import org.apache.dolphinscheduler.spi.params.base.PluginParams;\n+import org.apache.dolphinscheduler.spi.params.base.Validate;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * DingTalkAlertChannelFactory\n+ */\n+public class DingTalkAlertChannelFactory implements AlertChannelFactory {\n+    @Override\n+    public String getName() {\n+        return \"ding talk alert\";\n+    }\n+\n+    @Override\n+    public List<PluginParams> getParams() {\n+        InputParam webHookParam = InputParam.newBuilder(DingTalkParamsConstants.NAME_DING_TALK_WEB_HOOK, DingTalkParamsConstants.DING_TALK_WEB_HOOK)\n+            .addValidate(Validate.newBuilder()\n+                .setRequired(true)\n+                .build())\n+            .build();\n+        InputParam keywordParam = InputParam.newBuilder(DingTalkParamsConstants.NAME_DING_TALK_KEYWORD, DingTalkParamsConstants.DING_TALK_KEYWORD)\n+            .addValidate(Validate.newBuilder()\n+                .setRequired(true)\n+                .build())\n+            .build();\n+        RadioParam isEnableProxy =\n+            RadioParam.newBuilder(DingTalkParamsConstants.NAME_DING_TALK_PROXY_ENABLE, DingTalkParamsConstants.NAME_DING_TALK_PROXY_ENABLE)\n+                .addParamsOptions(new ParamsOptions(\"NO\", false, false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23c00cac0aea8222844f0b139e2fb39d7f0efab5"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODUxOTI3OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNTo0NTo1MVrOHlbIdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNTo0NTo1MVrOHlbIdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwMzg5NQ==", "bodyText": "wechat alert ?", "url": "https://github.com/apache/dolphinscheduler/pull/3869#discussion_r509003895", "createdAt": "2020-10-21T05:45:51Z", "author": {"login": "gaojun2048"}, "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkSender.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.plugin.alert.dingtalk;\n+\n+import org.apache.dolphinscheduler.spi.alert.AlertResult;\n+import org.apache.dolphinscheduler.spi.utils.JSONUtils;\n+\n+import org.apache.commons.codec.binary.StringUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Ding Talk Sender\n+ */\n+public class DingTalkSender {\n+    private static final Logger logger = LoggerFactory.getLogger(DingTalkSender.class);\n+\n+    private String url;\n+\n+    private String keyword;\n+\n+    private Boolean enableProxy;\n+\n+    private String proxy;\n+\n+    private Integer port;\n+\n+    private String user;\n+\n+    private String password;\n+\n+    DingTalkSender(Map<String, String> config) {\n+        url = config.get(DingTalkParamsConstants.NAME_DING_TALK_WEB_HOOK);\n+        keyword = config.get(DingTalkParamsConstants.NAME_DING_TALK_KEYWORD);\n+        enableProxy = Boolean.valueOf(config.get(DingTalkParamsConstants.NAME_DING_TALK_PROXY_ENABLE));\n+        if (Boolean.TRUE.equals(enableProxy)) {\n+            port = Integer.parseInt(config.get(DingTalkParamsConstants.NAME_DING_TALK_PORT));\n+            proxy = config.get(DingTalkParamsConstants.NAME_DING_TALK_PROXY);\n+            user = config.get(DingTalkParamsConstants.DING_TALK_USER);\n+            password = config.get(DingTalkParamsConstants.NAME_DING_TALK_PASSWORD);\n+        }\n+\n+    }\n+\n+    public AlertResult sendDingTalkMsg(String msg, String charset) {\n+        AlertResult alertResult;\n+        try {\n+            String resp = sendMsg(msg, charset);\n+            return checkSendDingTalkSendMsgResult(resp);\n+        } catch (Exception e) {\n+            logger.info(\"send ding talk alert msg  exception : {}\", e.getMessage());\n+            alertResult = new AlertResult();\n+            alertResult.setStatus(\"false\");\n+            alertResult.setMessage(\"send ding talk alert fail.\");\n+        }\n+        return alertResult;\n+    }\n+\n+    private String sendMsg(String msg, String charset) throws IOException {\n+\n+        String msgToJson = textToJsonString(msg + \"#\" + keyword);\n+        HttpPost httpPost = constructHttpPost(url, msgToJson, charset);\n+\n+        CloseableHttpClient httpClient;\n+        if (Boolean.TRUE.equals(enableProxy)) {\n+            httpClient = getProxyClient(proxy, port, user, password);\n+            RequestConfig rcf = getProxyConfig(proxy, port);\n+            httpPost.setConfig(rcf);\n+        } else {\n+            httpClient = getDefaultClient();\n+        }\n+\n+        try {\n+            CloseableHttpResponse response = httpClient.execute(httpPost);\n+            String resp;\n+            try {\n+                HttpEntity entity = response.getEntity();\n+                resp = EntityUtils.toString(entity, charset);\n+                EntityUtils.consume(entity);\n+            } finally {\n+                response.close();\n+            }\n+            logger.info(\"Ding Talk send [%s], resp:{%s}\", msg, resp);\n+            return resp;\n+        } finally {\n+            httpClient.close();\n+        }\n+    }\n+\n+    private static HttpPost constructHttpPost(String url, String msg, String charset) {\n+        HttpPost post = new HttpPost(url);\n+        StringEntity entity = new StringEntity(msg, charset);\n+        post.setEntity(entity);\n+        post.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n+        return post;\n+    }\n+\n+    private static CloseableHttpClient getProxyClient(String proxy, int port, String user, String password) {\n+        HttpHost httpProxy = new HttpHost(proxy, port);\n+        CredentialsProvider provider = new BasicCredentialsProvider();\n+        provider.setCredentials(new AuthScope(httpProxy), new UsernamePasswordCredentials(user, password));\n+        return HttpClients.custom().setDefaultCredentialsProvider(provider).build();\n+    }\n+\n+    private static CloseableHttpClient getDefaultClient() {\n+        return HttpClients.createDefault();\n+    }\n+\n+    private static RequestConfig getProxyConfig(String proxy, int port) {\n+        HttpHost httpProxy = new HttpHost(proxy, port);\n+        return RequestConfig.custom().setProxy(httpProxy).build();\n+    }\n+\n+    private static String textToJsonString(String text) {\n+        Map<String, Object> items = new HashMap<>();\n+        items.put(\"msgtype\", \"text\");\n+        Map<String, String> textContent = new HashMap<>();\n+        byte[] byt = StringUtils.getBytesUtf8(text);\n+        String txt = StringUtils.newStringUtf8(byt);\n+        textContent.put(\"content\", txt);\n+        items.put(\"text\", textContent);\n+        return JSONUtils.toJsonString(items);\n+    }\n+\n+    public static class DingTalkSendMsgResponse {\n+        private Integer errcode;\n+        private String errmsg;\n+\n+        public Integer getErrcode() {\n+            return errcode;\n+        }\n+\n+        public void setErrcode(Integer errcode) {\n+            this.errcode = errcode;\n+        }\n+\n+        public String getErrmsg() {\n+            return errmsg;\n+        }\n+\n+        public void setErrmsg(String errmsg) {\n+            this.errmsg = errmsg;\n+        }\n+    }\n+\n+    private static AlertResult checkSendDingTalkSendMsgResult(String result) {\n+        AlertResult alertResult = new AlertResult();\n+        alertResult.setStatus(\"false\");\n+\n+        if (null == result) {\n+            alertResult.setMessage(\"we chat alert send error\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d12d76b92d67793e8fd7d01b22e3643db02999"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODUyMDMyOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNTo0NjoxOVrOHlbJEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNTo0NjoxOVrOHlbJEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwNDA0OA==", "bodyText": "we chat ?", "url": "https://github.com/apache/dolphinscheduler/pull/3869#discussion_r509004048", "createdAt": "2020-10-21T05:46:19Z", "author": {"login": "gaojun2048"}, "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkSender.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.plugin.alert.dingtalk;\n+\n+import org.apache.dolphinscheduler.spi.alert.AlertResult;\n+import org.apache.dolphinscheduler.spi.utils.JSONUtils;\n+\n+import org.apache.commons.codec.binary.StringUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Ding Talk Sender\n+ */\n+public class DingTalkSender {\n+    private static final Logger logger = LoggerFactory.getLogger(DingTalkSender.class);\n+\n+    private String url;\n+\n+    private String keyword;\n+\n+    private Boolean enableProxy;\n+\n+    private String proxy;\n+\n+    private Integer port;\n+\n+    private String user;\n+\n+    private String password;\n+\n+    DingTalkSender(Map<String, String> config) {\n+        url = config.get(DingTalkParamsConstants.NAME_DING_TALK_WEB_HOOK);\n+        keyword = config.get(DingTalkParamsConstants.NAME_DING_TALK_KEYWORD);\n+        enableProxy = Boolean.valueOf(config.get(DingTalkParamsConstants.NAME_DING_TALK_PROXY_ENABLE));\n+        if (Boolean.TRUE.equals(enableProxy)) {\n+            port = Integer.parseInt(config.get(DingTalkParamsConstants.NAME_DING_TALK_PORT));\n+            proxy = config.get(DingTalkParamsConstants.NAME_DING_TALK_PROXY);\n+            user = config.get(DingTalkParamsConstants.DING_TALK_USER);\n+            password = config.get(DingTalkParamsConstants.NAME_DING_TALK_PASSWORD);\n+        }\n+\n+    }\n+\n+    public AlertResult sendDingTalkMsg(String msg, String charset) {\n+        AlertResult alertResult;\n+        try {\n+            String resp = sendMsg(msg, charset);\n+            return checkSendDingTalkSendMsgResult(resp);\n+        } catch (Exception e) {\n+            logger.info(\"send ding talk alert msg  exception : {}\", e.getMessage());\n+            alertResult = new AlertResult();\n+            alertResult.setStatus(\"false\");\n+            alertResult.setMessage(\"send ding talk alert fail.\");\n+        }\n+        return alertResult;\n+    }\n+\n+    private String sendMsg(String msg, String charset) throws IOException {\n+\n+        String msgToJson = textToJsonString(msg + \"#\" + keyword);\n+        HttpPost httpPost = constructHttpPost(url, msgToJson, charset);\n+\n+        CloseableHttpClient httpClient;\n+        if (Boolean.TRUE.equals(enableProxy)) {\n+            httpClient = getProxyClient(proxy, port, user, password);\n+            RequestConfig rcf = getProxyConfig(proxy, port);\n+            httpPost.setConfig(rcf);\n+        } else {\n+            httpClient = getDefaultClient();\n+        }\n+\n+        try {\n+            CloseableHttpResponse response = httpClient.execute(httpPost);\n+            String resp;\n+            try {\n+                HttpEntity entity = response.getEntity();\n+                resp = EntityUtils.toString(entity, charset);\n+                EntityUtils.consume(entity);\n+            } finally {\n+                response.close();\n+            }\n+            logger.info(\"Ding Talk send [%s], resp:{%s}\", msg, resp);\n+            return resp;\n+        } finally {\n+            httpClient.close();\n+        }\n+    }\n+\n+    private static HttpPost constructHttpPost(String url, String msg, String charset) {\n+        HttpPost post = new HttpPost(url);\n+        StringEntity entity = new StringEntity(msg, charset);\n+        post.setEntity(entity);\n+        post.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n+        return post;\n+    }\n+\n+    private static CloseableHttpClient getProxyClient(String proxy, int port, String user, String password) {\n+        HttpHost httpProxy = new HttpHost(proxy, port);\n+        CredentialsProvider provider = new BasicCredentialsProvider();\n+        provider.setCredentials(new AuthScope(httpProxy), new UsernamePasswordCredentials(user, password));\n+        return HttpClients.custom().setDefaultCredentialsProvider(provider).build();\n+    }\n+\n+    private static CloseableHttpClient getDefaultClient() {\n+        return HttpClients.createDefault();\n+    }\n+\n+    private static RequestConfig getProxyConfig(String proxy, int port) {\n+        HttpHost httpProxy = new HttpHost(proxy, port);\n+        return RequestConfig.custom().setProxy(httpProxy).build();\n+    }\n+\n+    private static String textToJsonString(String text) {\n+        Map<String, Object> items = new HashMap<>();\n+        items.put(\"msgtype\", \"text\");\n+        Map<String, String> textContent = new HashMap<>();\n+        byte[] byt = StringUtils.getBytesUtf8(text);\n+        String txt = StringUtils.newStringUtf8(byt);\n+        textContent.put(\"content\", txt);\n+        items.put(\"text\", textContent);\n+        return JSONUtils.toJsonString(items);\n+    }\n+\n+    public static class DingTalkSendMsgResponse {\n+        private Integer errcode;\n+        private String errmsg;\n+\n+        public Integer getErrcode() {\n+            return errcode;\n+        }\n+\n+        public void setErrcode(Integer errcode) {\n+            this.errcode = errcode;\n+        }\n+\n+        public String getErrmsg() {\n+            return errmsg;\n+        }\n+\n+        public void setErrmsg(String errmsg) {\n+            this.errmsg = errmsg;\n+        }\n+    }\n+\n+    private static AlertResult checkSendDingTalkSendMsgResult(String result) {\n+        AlertResult alertResult = new AlertResult();\n+        alertResult.setStatus(\"false\");\n+\n+        if (null == result) {\n+            alertResult.setMessage(\"we chat alert send error\");\n+            logger.info(\"send ding talk msg error,ding talk server resp is null\");\n+            return alertResult;\n+        }\n+        DingTalkSendMsgResponse sendMsgResponse = JSONUtils.parseObject(result, DingTalkSendMsgResponse.class);\n+        if (null == sendMsgResponse) {\n+            alertResult.setMessage(\"we chat send fail\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d12d76b92d67793e8fd7d01b22e3643db02999"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODUyNjkyOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNTo0OToyNVrOHlbM2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNToxNToyNlrOHmm40A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwNTAxOA==", "bodyText": "can we add qyapi.weixin.qq.com in apache project?", "url": "https://github.com/apache/dolphinscheduler/pull/3869#discussion_r509005018", "createdAt": "2020-10-21T05:49:25Z", "author": {"login": "gaojun2048"}, "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertConstants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.plugin.alert.wechat;\n+\n+/**\n+ * WeChatAlertConstants\n+ */\n+public class WeChatAlertConstants {\n+\n+    static final String MARKDOWN_QUOTE = \">\";\n+\n+    static final String MARKDOWN_ENTER = \"\\n\";\n+\n+    static final String CHARSET = \"UTF-8\";\n+\n+    static final String WE_CHAT_PUSH_URL = \"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token={token}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d12d76b92d67793e8fd7d01b22e3643db02999"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0NTA3Mg==", "bodyText": "Of course, I have confirmed this problem", "url": "https://github.com/apache/dolphinscheduler/pull/3869#discussion_r510245072", "createdAt": "2020-10-22T15:15:26Z", "author": {"login": "CalvinKirs"}, "path": "dolphinscheduler-alert-plugin/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertConstants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.plugin.alert.wechat;\n+\n+/**\n+ * WeChatAlertConstants\n+ */\n+public class WeChatAlertConstants {\n+\n+    static final String MARKDOWN_QUOTE = \">\";\n+\n+    static final String MARKDOWN_ENTER = \"\\n\";\n+\n+    static final String CHARSET = \"UTF-8\";\n+\n+    static final String WE_CHAT_PUSH_URL = \"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token={token}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwNTAxOA=="}, "originalCommit": {"oid": "f9d12d76b92d67793e8fd7d01b22e3643db02999"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODUzOTg4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNTo1NTowOVrOHlbUPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNTo1NTowOVrOHlbUPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwNjkxMA==", "bodyText": "DingTalkAlertChannelFactoryTest.java is repeated.", "url": "https://github.com/apache/dolphinscheduler/pull/3869#discussion_r509006910", "createdAt": "2020-10-21T05:55:09Z", "author": {"login": "gaojun2048"}, "path": "pom.xml", "diffHunk": "@@ -950,6 +950,11 @@\n                         <include>**/plugin/alert/email/ExcelUtilsTest.java</include>\n                         <include>**/plugin/alert/email/MailUtilsTest.java</include>\n                         <include>**/plugin/alert/email/template/DefaultHTMLTemplateTest.java</include>\n+                        <include>**/plugin/alert/dingtalk/DingTalkSenderTest.java</include>\n+                        <include>**/plugin/alert/dingtalk/DingTalkAlertChannelFactoryTest.java</include>\n+                        <include>**/plugin/alert/dingtalk/DingTalkAlertChannelFactoryTest.java</include>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d12d76b92d67793e8fd7d01b22e3643db02999"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3266, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}