{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NDE2NjM2", "number": 2872, "title": "Using Jackson instead of Fastjson", "bodyText": "replace all fastjson", "createdAt": "2020-06-02T07:58:44Z", "url": "https://github.com/apache/dolphinscheduler/pull/2872", "merged": true, "mergeCommit": {"oid": "1b7d8ee236990747ecfc40726092cb352cd91f36"}, "closed": true, "closedAt": "2020-06-13T11:47:40Z", "author": {"login": "simon824"}, "timelineItems": {"totalCount": 78, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnQGXpAH2gAyNDI2NDE2NjM2OmE5ZjcyYzIwODEyMzIzNzk0MDY3YTZiMTM1OGQyN2ExMzE0Njk3MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqeN6bgFqTQyOTU0MDczNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a9f72c20812323794067a6b1358d27a131469703", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/a9f72c20812323794067a6b1358d27a131469703", "committedDate": "2020-06-02T07:54:34Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e386af700d4276882e7b272041d1014a2ce4ca36", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/e386af700d4276882e7b272041d1014a2ce4ca36", "committedDate": "2020-06-02T09:22:39Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39d2713d0a3122f0bbc6b15fee959b14108cd980", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/39d2713d0a3122f0bbc6b15fee959b14108cd980", "committedDate": "2020-06-02T10:19:21Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ccd96aabbadb284a49b9d2d9d4ca9dbf3f38a53", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/3ccd96aabbadb284a49b9d2d9d4ca9dbf3f38a53", "committedDate": "2020-06-02T10:42:04Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48735a8bf4f0b6448c9e11caa03d927cc4161c6a", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/48735a8bf4f0b6448c9e11caa03d927cc4161c6a", "committedDate": "2020-06-02T11:07:24Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f26e246706c6d89b49190a0eb9347e23bcd3144e", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/f26e246706c6d89b49190a0eb9347e23bcd3144e", "committedDate": "2020-06-02T12:00:49Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dea2d4634dee5eaf8d4f22c4376032b3d8b1268a", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/dea2d4634dee5eaf8d4f22c4376032b3d8b1268a", "committedDate": "2020-06-02T12:13:23Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33bd6586dd118acd29d8ab0eea155a6be5de3d7a", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/33bd6586dd118acd29d8ab0eea155a6be5de3d7a", "committedDate": "2020-06-03T01:19:59Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb089288c4fe8e228d119737dfd10c2b21f7328b", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/bb089288c4fe8e228d119737dfd10c2b21f7328b", "committedDate": "2020-06-03T04:40:28Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bab8abcd23cd6a03d8b567901da7b5959566f69", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/8bab8abcd23cd6a03d8b567901da7b5959566f69", "committedDate": "2020-06-03T11:21:19Z", "message": "ut fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c36829278b4e5ff2259bfe0014c19e5345e349d", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/9c36829278b4e5ff2259bfe0014c19e5345e349d", "committedDate": "2020-06-03T12:05:07Z", "message": "ut fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a10157506c0659e6bff20fdb47b930a4630b1c1", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/4a10157506c0659e6bff20fdb47b930a4630b1c1", "committedDate": "2020-06-04T01:42:41Z", "message": "ut fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6205e687c2c96bf0a87e300081d1395e509b26c3", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/6205e687c2c96bf0a87e300081d1395e509b26c3", "committedDate": "2020-06-04T02:11:11Z", "message": "annotation reset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "572ee0fc6474bc238761eca79848e8f12fff22c8", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/572ee0fc6474bc238761eca79848e8f12fff22c8", "committedDate": "2020-06-04T08:23:59Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4197ee8a8f3fcf238cba3186db04bf5f18ac2073", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/4197ee8a8f3fcf238cba3186db04bf5f18ac2073", "committedDate": "2020-06-04T08:46:11Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32863755eccabec6d88028011e0c394417b248fb", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/32863755eccabec6d88028011e0c394417b248fb", "committedDate": "2020-06-04T08:56:31Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ada3c7aacbae76d23d3d49c68ce03b3c8336db1", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/9ada3c7aacbae76d23d3d49c68ce03b3c8336db1", "committedDate": "2020-06-04T09:20:24Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "committedDate": "2020-06-04T09:56:59Z", "message": "Using Jackson instead of Fastjson"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Mjc0MDg2", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-425274086", "createdAt": "2020-06-05T12:57:28Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjo1NzoyOFrOGftaxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjo1NzoyOFrOGftaxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMzE3NA==", "bodyText": "the type of 'list' variable is List , why replace String with Object", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435903174", "createdAt": "2020-06-05T12:57:28Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplate.java", "diffHunk": "@@ -116,9 +116,9 @@ private String getTextTypeMessage(String content,boolean showAll){\n             }\n \n             StringBuilder contents = new StringBuilder(100);\n-            for (String str : list){\n+            for (Object obj : list){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MjgwMzcw", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-425280370", "createdAt": "2020-06-05T13:05:45Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowNTo0NVrOGftsqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowNTo0NVrOGftsqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwNzc1Mw==", "bodyText": "parseObject is hard to understand ,suggest add parseMap method ,refer to the following code\nTypeReference<HashMap<String, String>> typeRef  = new TypeReference<HashMap<String, String>>() {}; Map<String, String> map = mapper.readValue(jsonInput, typeRef);", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435907753", "createdAt": "2020-06-05T13:05:45Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/EnterpriseWeChatUtils.java", "diffHunk": "@@ -99,9 +99,7 @@ public static String getToken() throws IOException {\n                 response.close();\n             }\n \n-            Map<String, Object> map = JSON.parseObject(resp,\n-                    new TypeToken<Map<String, Object>>() {\n-                    }.getType());\n+            Map<String, Object> map = JSONUtils.parseObject(resp, Map.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Mjg0NzMy", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-425284732", "createdAt": "2020-06-05T13:11:29Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxMToyOVrOGft4Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxMToyOVrOGft4Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMDczNA==", "bodyText": "why still using the fastjson annotation?", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435910734", "createdAt": "2020-06-05T13:11:29Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/ResourceComponent.java", "diffHunk": "@@ -1,7 +1,7 @@\n package org.apache.dolphinscheduler.api.dto.resources;\n \n-import com.alibaba.fastjson.annotation.JSONField;\n import com.alibaba.fastjson.annotation.JSONType;\n+import com.alibaba.fastjson.annotation.JSONField;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzAwODcx", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-425300871", "createdAt": "2020-06-05T13:31:54Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozMTo1NFrOGfumrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozMTo1NFrOGfumrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyMjYwNQ==", "bodyText": "paramObject is ObjectNode ,why not use toString directly ?", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435922605", "createdAt": "2020-06-05T13:31:54Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java", "diffHunk": "@@ -161,15 +159,15 @@\n             return result;\n         }\n         //check password\uff0cif the password is not updated, set to the old password.\n-        JSONObject paramObject = JSON.parseObject(parameter);\n-        String password = paramObject.getString(Constants.PASSWORD);\n+        ObjectNode paramObject = JSONUtils.parseObject(parameter);\n+        String password = paramObject.path(Constants.PASSWORD).asText();\n         if (StringUtils.isBlank(password)) {\n             String oldConnectionParams = dataSource.getConnectionParams();\n-            JSONObject oldParams = JSON.parseObject(oldConnectionParams);\n-            paramObject.put(Constants.PASSWORD, oldParams.getString(Constants.PASSWORD));\n+            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n+            paramObject.put(Constants.PASSWORD, oldParams.path(Constants.PASSWORD).asText());\n         }\n         // connectionParams json\n-        String connectionParams = paramObject.toJSONString();\n+        String connectionParams = JSONUtils.toJsonString(paramObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzAxMjAy", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-425301202", "createdAt": "2020-06-05T13:32:21Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozMjoyMVrOGfunsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozMjoyMVrOGfunsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyMjg2Ng==", "bodyText": "object is ObjectNode ,why not use toString directly ?", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435922866", "createdAt": "2020-06-05T13:32:21Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java", "diffHunk": "@@ -315,9 +313,9 @@ private void handlePasswd(List<DataSource> dataSourceList) {\n         for (DataSource dataSource : dataSourceList) {\n \n             String connectionParams  = dataSource.getConnectionParams();\n-            JSONObject  object = JSON.parseObject(connectionParams);\n+            ObjectNode  object = JSONUtils.parseObject(connectionParams);\n             object.put(Constants.PASSWORD, Constants.XXXXXX);\n-            dataSource.setConnectionParams(JSONUtils.toJson(object));\n+            dataSource.setConnectionParams(JSONUtils.toJsonString(object));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzAzMzk0", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-425303394", "createdAt": "2020-06-05T13:34:59Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozNDo1OVrOGfuuCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozNDo1OVrOGfuuCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNDQ5MA==", "bodyText": "suggest use TypeReference to parse 'other' variable\nTypeReference<HashMap<String, String>> typeRef  = new TypeReference<HashMap<String, String>>() {}; Map<String, String> map = mapper.readValue(jsonInput, typeRef);", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435924490", "createdAt": "2020-06-05T13:34:59Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java", "diffHunk": "@@ -526,8 +524,7 @@ public String buildParameter(String name, String desc, DbType type, String host,\n             parameterMap.put(Constants.PRINCIPAL,principal);\n         }\n         if (other != null && !\"\".equals(other)) {\n-            LinkedHashMap<String, String> map = JSON.parseObject(other, new TypeReference<LinkedHashMap<String, String>>() {\n-            });\n+            LinkedHashMap<String, String> map = JSONUtils.parseObject(other, LinkedHashMap.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzExNzM2", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-425311736", "createdAt": "2020-06-05T13:44:40Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0NDo0MVrOGfvFoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0NDo0MVrOGfvFoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDUyOA==", "bodyText": "It's better add test code into JSONUtils.toJsonString to cover the List parameter", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435930528", "createdAt": "2020-06-05T13:44:41Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -636,7 +636,7 @@ private void downloadProcessDefinitionFile(HttpServletResponse response, List<Pr\n         try {\n             out = response.getOutputStream();\n             buff = new BufferedOutputStream(out);\n-            buff.write(JSON.toJSONString(processDefinitionList).getBytes(StandardCharsets.UTF_8));\n+            buff.write(JSONUtils.toJsonString(processDefinitionList).getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzEzNzIz", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-425313723", "createdAt": "2020-06-05T13:46:51Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0Njo1MVrOGfvLGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0Njo1MVrOGfvLGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMTkyOQ==", "bodyText": "why not use JSONUtils.toList", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435931929", "createdAt": "2020-06-05T13:46:51Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -756,8 +756,13 @@ private boolean checkTaskHasSubProcess(String taskType) {\n     public Map<String, Object> importProcessDefinition(User loginUser, MultipartFile file, String currentProjectName) {\n         Map<String, Object> result = new HashMap<>(5);\n         String processMetaJson = FileUtils.file2String(file);\n-        List<ProcessMeta> processMetaList = JSON.parseArray(processMetaJson, ProcessMeta.class);\n+        List<ProcessMeta> processMetaList = new ArrayList<>();\n \n+        try {\n+            processMetaList = JSONUtils.getMapper().readValue(processMetaJson, new TypeReference<List<ProcessMeta>>() {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzE3MTMx", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-425317131", "createdAt": "2020-06-05T13:50:55Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MTk1ODQ1", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426195845", "createdAt": "2020-06-08T12:50:47Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1MDo0N1rOGgcF9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1MDo0N1rOGgcF9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2Nzg5Mw==", "bodyText": "getMapper,createArrayNode,createObjectNode better private ,we should not use ObjectMapper directly", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436667893", "createdAt": "2020-06-08T12:50:47Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java", "diffHunk": "@@ -50,23 +50,42 @@ private JSONUtils() {\n         objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true).setTimeZone(TimeZone.getDefault());\n     }\n \n+    public static ObjectMapper getMapper() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MTk4NDk3", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426198497", "createdAt": "2020-06-08T12:52:29Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1MjoyOVrOGgcJww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1MjoyOVrOGgcJww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2ODg2Nw==", "bodyText": "don't use getMapper directly , abstract one method to deserialize List<?>", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436668867", "createdAt": "2020-06-08T12:52:29Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java", "diffHunk": "@@ -551,7 +562,13 @@ private void addDependResultForTaskList(List<TaskInstance> taskInstanceList) thr\n             String localParams = map.get(LOCAL_PARAMS);\n             if (localParams != null && !localParams.isEmpty()) {\n                 localParams = ParameterUtils.convertParameterPlaceholders(localParams, timeParams);\n-                List<Property> localParamsList = JSON.parseArray(localParams, Property.class);\n+                List<Property> localParamsList = new ArrayList<>();\n+                try {\n+                    localParamsList = JSONUtils.getMapper().readValue(localParams, new TypeReference<List<Property>>() {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjExOTA3", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426211907", "createdAt": "2020-06-08T13:03:39Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMzozOVrOGgctWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMzozOVrOGgctWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3Nzk3OA==", "bodyText": "why remove the 'throws JSONException', I think it's better not remove", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436677978", "createdAt": "2020-06-08T13:03:39Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java", "diffHunk": "@@ -408,9 +406,8 @@ public boolean isYarnEnabled() {\n      *\n      * @param applicationId application id\n      * @return the return may be null or there may be other parse exceptions\n-     * @throws JSONException json exception\n      */\n-    public ExecutionStatus getApplicationStatus(String applicationId) throws JSONException {\n+    public ExecutionStatus getApplicationStatus(String applicationId)  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjE2NTI5", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426216529", "createdAt": "2020-06-08T13:09:27Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowOToyOFrOGgdCNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowOToyOFrOGgdCNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4MzMxOA==", "bodyText": "result = jsonObject.path(\"job\").path(\"state\").asText() always assign a value to result ,which empty string indicating a null value . In original logic ,null value will throw NPE in the following switch. Now the result is empty string ,then getApplicationStatus method will return ExecutionStatus.RUNNING_EXEUTION. I think you'd better optimize the switch logic. only a suggestion", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436683318", "createdAt": "2020-06-08T13:09:28Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java", "diffHunk": "@@ -421,15 +418,15 @@ public ExecutionStatus getApplicationStatus(String applicationId) throws JSONExc\n \n         String responseContent = HttpUtils.get(applicationUrl);\n         if (responseContent != null) {\n-            JSONObject jsonObject = JSON.parseObject(responseContent);\n-            result = jsonObject.getJSONObject(\"app\").getString(\"finalStatus\");\n+            ObjectNode jsonObject = JSONUtils.parseObject(responseContent);\n+            result = jsonObject.path(\"app\").path(\"finalStatus\").asText();\n         } else {\n             //may be in job history\n             String jobHistoryUrl = getJobHistoryUrl(applicationId);\n             logger.info(\"jobHistoryUrl={}\", jobHistoryUrl);\n             responseContent = HttpUtils.get(jobHistoryUrl);\n-            JSONObject jsonObject = JSONObject.parseObject(responseContent);\n-            result = jsonObject.getJSONObject(\"job\").getString(\"state\");\n+            ObjectNode jsonObject = JSONUtils.parseObject(responseContent);\n+            result = jsonObject.path(\"job\").path(\"state\").asText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjE5MjEy", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426219212", "createdAt": "2020-06-08T13:12:38Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxMjozOVrOGgdOBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxMjozOVrOGgdOBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4NjM0Mg==", "bodyText": "jsonObject.get(\"clusterInfo\") will throw NPE", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436686342", "createdAt": "2020-06-08T13:12:39Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java", "diffHunk": "@@ -669,10 +667,10 @@ public static String getRMState(String url) {\n                 return null;\n             }\n             //to json\n-            JSONObject jsonObject = JSON.parseObject(retStr);\n+            ObjectNode jsonObject = JSONUtils.parseObject(retStr);\n \n             //get ResourceManager state\n-            return jsonObject.getJSONObject(\"clusterInfo\").getString(\"haState\");\n+            return jsonObject.get(\"clusterInfo\").path(\"haState\").asText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjIyNDU0", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426222454", "createdAt": "2020-06-08T13:16:35Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxNjozNVrOGgdcNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxNjozNVrOGgdcNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4OTk3NQ==", "bodyText": "don't use getMapper directly", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436689975", "createdAt": "2020-06-08T13:16:35Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java", "diffHunk": "@@ -271,7 +279,16 @@ public String getGlobalParams() {\n     }\n \n     public void setGlobalParams(String globalParams) {\n-        this.globalParamList = JSON.parseArray(globalParams, Property.class);\n+        if (globalParams == null){\n+            this.globalParamList = new ArrayList<>();\n+        }else {\n+            try {\n+                this.globalParamList = JSONUtils.getMapper().readValue(globalParams, new TypeReference<List<Property>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjIyODgw", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426222880", "createdAt": "2020-06-08T13:17:06Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxNzowNlrOGgdeCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxNzowNlrOGgdeCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MDQ0Mw==", "bodyText": "don't use getMapper directly", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436690443", "createdAt": "2020-06-08T13:17:06Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java", "diffHunk": "@@ -280,15 +297,21 @@ public void setGlobalParams(String globalParams) {\n     }\n \n     public void setGlobalParamList(List<Property> globalParamList) {\n-        this.globalParams = JSON.toJSONString(globalParamList);\n+        this.globalParams = JSONUtils.toJsonString(globalParamList);\n         this.globalParamList = globalParamList;\n     }\n \n     public Map<String, String> getGlobalParamMap() {\n-        List<Property> propList;\n+        List<Property> propList = new ArrayList<> ();\n \n         if (globalParamMap == null && StringUtils.isNotEmpty(globalParams)) {\n-            propList = JSON.parseArray(globalParams, Property.class);\n+            try {\n+                propList = JSONUtils.getMapper().readValue(globalParams, new TypeReference<List<Property>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI0OTg5", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426224989", "createdAt": "2020-06-08T13:19:44Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxOTo0NFrOGgdngQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxOTo0NFrOGgdngQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5Mjg2NQ==", "bodyText": "wow, what's format of this file!", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436692865", "createdAt": "2020-06-08T13:19:44Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteRequestCommand implements Serializable {\r\r    /**\r     *  task execution context\r     */\r    private String taskExecutionContext;\r\r    public String getTaskExecutionContext() {\r        return taskExecutionContext;\r    }\r\r    public void setTaskExecutionContext(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    public TaskExecuteRequestCommand() {\r    }\r\r    public TaskExecuteRequestCommand(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_REQUEST);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteRequestCommand{\" +\r                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteRequestCommand implements Serializable {\r\r    /**\r     *  task execution context\r     */\r    private String taskExecutionContext;\r\r    public String getTaskExecutionContext() {\r        return taskExecutionContext;\r    }\r\r    public void setTaskExecutionContext(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    public TaskExecuteRequestCommand() {\r    }\r\r    public TaskExecuteRequestCommand(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_REQUEST);\r        byte[] body = JacksonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteRequestCommand{\" +\r                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\r                '}';\r    }\r}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI1MjU1", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426225255", "createdAt": "2020-06-08T13:20:02Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMDowMlrOGgdoqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMDowMlrOGgdoqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MzE2MA==", "bodyText": "wow, what's format of this file!", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436693160", "createdAt": "2020-06-08T13:20:02Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteAckCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * startTime\r     */\r    private Date startTime;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r    /**\r     * logPath\r     */\r    private String logPath;\r\r    /**\r     * executePath\r     */\r    private String executePath;\r\r    public Date getStartTime() {\r        return startTime;\r    }\r\r    public void setStartTime(Date startTime) {\r        this.startTime = startTime;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getLogPath() {\r        return logPath;\r    }\r\r    public void setLogPath(String logPath) {\r        this.logPath = logPath;\r    }\r\r    public String getExecutePath() {\r        return executePath;\r    }\r\r    public void setExecutePath(String executePath) {\r        this.executePath = executePath;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_ACK);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteAckCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", startTime=\" + startTime +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", logPath='\" + logPath + '\\'' +\r                \", executePath='\" + executePath + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteAckCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * startTime\r     */\r    private Date startTime;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r    /**\r     * logPath\r     */\r    private String logPath;\r\r    /**\r     * executePath\r     */\r    private String executePath;\r\r    public Date getStartTime() {\r        return startTime;\r    }\r\r    public void setStartTime(Date startTime) {\r        this.startTime = startTime;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getLogPath() {\r        return logPath;\r    }\r\r    public void setLogPath(String logPath) {\r        this.logPath = logPath;\r    }\r\r    public String getExecutePath() {\r        return executePath;\r    }\r\r    public void setExecutePath(String executePath) {\r        this.executePath = executePath;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_ACK);\r        byte[] body = JacksonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteAckCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", startTime=\" + startTime +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", logPath='\" + logPath + '\\'' +\r                \", executePath='\" + executePath + '\\'' +\r                '}';\r    }\r}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI2NzI1", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426226725", "createdAt": "2020-06-08T13:21:40Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMTo0MVrOGgduuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMTo0MVrOGgduuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NDcxMg==", "bodyText": "wow, what's format of this file!", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436694712", "createdAt": "2020-06-08T13:21:41Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task response command\r */\rpublic class TaskExecuteResponseCommand implements Serializable {\r\r\r    public TaskExecuteResponseCommand() {\r    }\r\r    public TaskExecuteResponseCommand(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  task instance id\r     */\r    private int taskInstanceId;\r\r    /**\r     *  status\r     */\r    private int status;\r\r\r    /**\r     *  end time\r     */\r    private Date endTime;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * appIds\r     */\r    private String appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public Date getEndTime() {\r        return endTime;\r    }\r\r    public void setEndTime(Date endTime) {\r        this.endTime = endTime;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public String getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(String appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     * package response command\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", status=\" + status +\r                \", endTime=\" + endTime +\r                \", processId=\" + processId +\r                \", appIds='\" + appIds + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task response command\r */\rpublic class TaskExecuteResponseCommand implements Serializable {\r\r\r    public TaskExecuteResponseCommand() {\r    }\r\r    public TaskExecuteResponseCommand(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  task instance id\r     */\r    private int taskInstanceId;\r\r    /**\r     *  status\r     */\r    private int status;\r\r\r    /**\r     *  end time\r     */\r    private Date endTime;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * appIds\r     */\r    private String appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public Date getEndTime() {\r        return endTime;\r    }\r\r    public void setEndTime(Date endTime) {\r        this.endTime = endTime;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public String getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(String appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     * package response command\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\r        byte[] body = JacksonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", status=\" + status +\r                \", endTime=\" + endTime +\r                \", processId=\" + processId +\r                \", appIds='\" + appIds + '\\'' +\r                '}';\r    }\r}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI2OTcz", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426226973", "createdAt": "2020-06-08T13:21:58Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMTo1OFrOGgdv3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMTo1OFrOGgdv3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NTAwNw==", "bodyText": "wow, what's format of this file!", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436695007", "createdAt": "2020-06-08T13:21:58Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillRequestCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  kill task request command\r */\rpublic class TaskKillRequestCommand implements Serializable {\r\r    /**\r     *  task id\r     */\r    private int taskInstanceId;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_KILL_REQUEST);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskKillRequestCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  kill task request command\r */\rpublic class TaskKillRequestCommand implements Serializable {\r\r    /**\r     *  task id\r     */\r    private int taskInstanceId;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_KILL_REQUEST);\r        byte[] body = JacksonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskKillRequestCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                '}';\r    }\r}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI3MTg5", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426227189", "createdAt": "2020-06-08T13:22:12Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMjoxMlrOGgdwug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMjoxMlrOGgdwug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NTIyNg==", "bodyText": "wow, what's format of this file!", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436695226", "createdAt": "2020-06-08T13:22:12Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillResponseCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\rimport java.util.List;\r\r/**\r *  kill task response command\r */\rpublic class TaskKillResponseCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * other resource manager appId , for example : YARN etc\r     */\r    protected List<String> appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public List<String> getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(List<String> appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_KILL_RESPONSE);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskKillResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", processId=\" + processId +\r                \", appIds=\" + appIds +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\r\rimport java.io.Serializable;\rimport java.util.List;\r\r/**\r *  kill task response command\r */\rpublic class TaskKillResponseCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * other resource manager appId , for example : YARN etc\r     */\r    protected List<String> appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public List<String> getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(List<String> appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_KILL_RESPONSE);\r        byte[] body = JacksonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskKillResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", processId=\" + processId +\r                \", appIds=\" + appIds +\r                '}';\r    }\r}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI4ODUw", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426228850", "createdAt": "2020-06-08T13:24:12Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNDoxMlrOGgd3zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNDoxMlrOGgd3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NzAzNg==", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436697036", "createdAt": "2020-06-08T13:24:12Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesRequestCommand.java", "diffHunk": "@@ -56,7 +56,7 @@ public void setPath(String path) {\n     public Command convert2Command(){\n         Command command = new Command();\n         command.setType(CommandType.GET_LOG_BYTES_REQUEST);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI5Mjgy", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426229282", "createdAt": "2020-06-08T13:24:38Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNDozOFrOGgd5mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNDozOFrOGgd5mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NzQ5Ng==", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436697496", "createdAt": "2020-06-08T13:24:38Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesResponseCommand.java", "diffHunk": "@@ -57,7 +57,7 @@ public void setData(byte[] data) {\n     public Command convert2Command(long opaque){\n         Command command = new Command(opaque);\n         command.setType(CommandType.GET_LOG_BYTES_RESPONSE);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI5NDAw", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426229400", "createdAt": "2020-06-08T13:24:48Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNDo0OFrOGgd6LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNDo0OFrOGgd6LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NzY0NA==", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436697644", "createdAt": "2020-06-08T13:24:48Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogRequestCommand.java", "diffHunk": "@@ -84,7 +84,7 @@ public void setLimit(int limit) {\n     public Command convert2Command(){\n         Command command = new Command();\n         command.setType(CommandType.ROLL_VIEW_LOG_REQUEST);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI5NTUx", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426229551", "createdAt": "2020-06-08T13:24:58Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNDo1OVrOGgd61w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNDo1OVrOGgd61w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NzgxNQ==", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436697815", "createdAt": "2020-06-08T13:24:59Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogResponseCommand.java", "diffHunk": "@@ -57,7 +57,7 @@ public void setMsg(String msg) {\n     public Command convert2Command(long opaque){\n         Command command = new Command(opaque);\n         command.setType(CommandType.ROLL_VIEW_LOG_RESPONSE);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI5NzIy", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426229722", "createdAt": "2020-06-08T13:25:09Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNTowOVrOGgd7jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNTowOVrOGgd7jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5Nzk5OQ==", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436697999", "createdAt": "2020-06-08T13:25:09Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogRequestCommand.java", "diffHunk": "@@ -56,7 +56,7 @@ public void setPath(String path) {\n     public Command convert2Command(){\n         Command command = new Command();\n         command.setType(CommandType.VIEW_WHOLE_LOG_REQUEST);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI5ODg1", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426229885", "createdAt": "2020-06-08T13:25:20Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNToyMFrOGgd8Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNToyMFrOGgd8Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5ODE5OQ==", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436698199", "createdAt": "2020-06-08T13:25:20Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogResponseCommand.java", "diffHunk": "@@ -57,7 +57,7 @@ public void setMsg(String msg) {\n     public Command convert2Command(long opaque){\n         Command command = new Command(opaque);\n         command.setType(CommandType.VIEW_WHOLE_LOG_RESPONSE);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjMyNjQ1", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426232645", "createdAt": "2020-06-08T13:28:27Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyODoyOFrOGgeGCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyODoyOFrOGgeGCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMDY4MQ==", "bodyText": "In original logic ,if obj can't format to json ,exceptions throw. However current method return empty string ,which maybe change the logic of the invoker. You'd better make sure about this will not have any impact on invoker.", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436700681", "createdAt": "2020-06-08T13:28:28Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/JacksonSerializer.java", "diffHunk": "@@ -31,7 +39,13 @@\n \t * @return byte array\n \t */\n \tpublic static <T> byte[] serialize(T obj)  {\n-\t\tString json = JSON.toJSONString(obj);\n+        String json = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjMyNzcx", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426232771", "createdAt": "2020-06-08T13:28:34Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyODozNFrOGgeGTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyODozNFrOGgeGTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMDc0OA==", "bodyText": "In original logic ,if obj can't format to json ,exceptions throw. However current method return empty string ,which maybe change the logic of the invoker", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436700748", "createdAt": "2020-06-08T13:28:34Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/JacksonSerializer.java", "diffHunk": "@@ -42,7 +56,14 @@\n \t * @return string\n \t */\n \tpublic static <T> String serializeToString(T obj)  {\n-\t\treturn JSON.toJSONString(obj);\n+\t\tString json = \"\";\n+\t\ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjMzMjI5", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426233229", "createdAt": "2020-06-08T13:28:50Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyODo1MFrOGgeHCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyODo1MFrOGgeHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMDkzOQ==", "bodyText": "In original logic ,if obj can't format to json ,exceptions throw. However current method return empty string ,which maybe change the logic of the invoker", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436700939", "createdAt": "2020-06-08T13:28:50Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/JacksonSerializer.java", "diffHunk": "@@ -54,7 +75,15 @@\n \t * @return deserialize type\n \t */\n \tpublic static <T> T deserialize(byte[] src, Class<T> clazz) {\n-\t\treturn JSON.parseObject(src, clazz);\n+\n+        String json = new String(src, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjM3MDgx", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426237081", "createdAt": "2020-06-08T13:31:01Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozMTowMVrOGgeNXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozMTowMVrOGgeNXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMjU1Ng==", "bodyText": "not use getMapper directly", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436702556", "createdAt": "2020-06-08T13:31:01Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java", "diffHunk": "@@ -152,7 +153,13 @@ public void run() {\n         // global params string\n         String globalParamsStr = taskExecutionContext.getGlobalParams();\n         if (globalParamsStr != null) {\n-            List<Property> globalParamsList = JSONObject.parseArray(globalParamsStr, Property.class);\n+            List<Property> globalParamsList = new ArrayList<>();\n+\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjUxOTMw", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426251930", "createdAt": "2020-06-08T13:39:49Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozOTo0OVrOGgej0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozOTo0OVrOGgej0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwODMwNQ==", "bodyText": "better abstract this logic to one method of JSONUtils which put array to ObjectNode", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436708305", "createdAt": "2020-06-08T13:39:49Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java", "diffHunk": "@@ -236,64 +222,90 @@ private String buildDataxJsonFile()\n \n     /**\n      * build datax job config\n-     * \n+     *\n      * @return collection of datax job config JSONObject\n      * @throws SQLException if error throws SQLException\n      */\n-    private List<JSONObject> buildDataxJobContentJson() throws SQLException {\n-        DataxTaskExecutionContext dataxTaskExecutionContext = taskExecutionContext.getDataxTaskExecutionContext();\n+    private List<ObjectNode> buildDataxJobContentJson() throws SQLException {\n \n+        DataxTaskExecutionContext dataxTaskExecutionContext = taskExecutionContext.getDataxTaskExecutionContext();\n \n         BaseDataSource dataSourceCfg = DataSourceFactory.getDatasource(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n                 dataxTaskExecutionContext.getSourceConnectionParams());\n \n         BaseDataSource dataTargetCfg = DataSourceFactory.getDatasource(DbType.of(dataxTaskExecutionContext.getTargetType()),\n                 dataxTaskExecutionContext.getTargetConnectionParams());\n \n-        List<JSONObject> readerConnArr = new ArrayList<>();\n-        JSONObject readerConn = new JSONObject();\n-        readerConn.put(\"querySql\", new String[] {dataXParameters.getSql()});\n-        readerConn.put(\"jdbcUrl\", new String[] {dataSourceCfg.getJdbcUrl()});\n+        List<ObjectNode> readerConnArr = new ArrayList<>();\n+        ObjectNode readerConn = JSONUtils.createObjectNode();\n+\n+        ArrayNode sqlArr = readerConn.putArray(\"querySql\");\n+        for (String sql : new String[]{dataXParameters.getSql()}) {\n+            sqlArr.add(sql);\n+        }\n+\n+        ArrayNode urlArr = readerConn.putArray(\"jdbcUrl\");\n+        for (String url : new String[]{dataSourceCfg.getJdbcUrl()}) {\n+            urlArr.add(url);\n+        }\n+\n         readerConnArr.add(readerConn);\n \n-        JSONObject readerParam = new JSONObject();\n+        ObjectNode readerParam = JSONUtils.createObjectNode();\n         readerParam.put(\"username\", dataSourceCfg.getUser());\n         readerParam.put(\"password\", dataSourceCfg.getPassword());\n-        readerParam.put(\"connection\", readerConnArr);\n+        readerParam.putArray(\"connection\").addAll(readerConnArr);\n \n-        JSONObject reader = new JSONObject();\n+\n+        ObjectNode reader = JSONUtils.createObjectNode();\n         reader.put(\"name\", DataxUtils.getReaderPluginName(DbType.of(dataxTaskExecutionContext.getSourcetype())));\n-        reader.put(\"parameter\", readerParam);\n+        reader.set(\"parameter\", readerParam);\n+\n+        List<ObjectNode> writerConnArr = new ArrayList<>();\n+        ObjectNode writerConn = JSONUtils.createObjectNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 183}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjUzOTQy", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426253942", "createdAt": "2020-06-08T13:41:03Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzo0MTowM1rOGgenGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzo0MTowM1rOGgenGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwOTE0NQ==", "bodyText": "why not use addAll", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436709145", "createdAt": "2020-06-08T13:41:03Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java", "diffHunk": "@@ -236,64 +222,90 @@ private String buildDataxJsonFile()\n \n     /**\n      * build datax job config\n-     * \n+     *\n      * @return collection of datax job config JSONObject\n      * @throws SQLException if error throws SQLException\n      */\n-    private List<JSONObject> buildDataxJobContentJson() throws SQLException {\n-        DataxTaskExecutionContext dataxTaskExecutionContext = taskExecutionContext.getDataxTaskExecutionContext();\n+    private List<ObjectNode> buildDataxJobContentJson() throws SQLException {\n \n+        DataxTaskExecutionContext dataxTaskExecutionContext = taskExecutionContext.getDataxTaskExecutionContext();\n \n         BaseDataSource dataSourceCfg = DataSourceFactory.getDatasource(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n                 dataxTaskExecutionContext.getSourceConnectionParams());\n \n         BaseDataSource dataTargetCfg = DataSourceFactory.getDatasource(DbType.of(dataxTaskExecutionContext.getTargetType()),\n                 dataxTaskExecutionContext.getTargetConnectionParams());\n \n-        List<JSONObject> readerConnArr = new ArrayList<>();\n-        JSONObject readerConn = new JSONObject();\n-        readerConn.put(\"querySql\", new String[] {dataXParameters.getSql()});\n-        readerConn.put(\"jdbcUrl\", new String[] {dataSourceCfg.getJdbcUrl()});\n+        List<ObjectNode> readerConnArr = new ArrayList<>();\n+        ObjectNode readerConn = JSONUtils.createObjectNode();\n+\n+        ArrayNode sqlArr = readerConn.putArray(\"querySql\");\n+        for (String sql : new String[]{dataXParameters.getSql()}) {\n+            sqlArr.add(sql);\n+        }\n+\n+        ArrayNode urlArr = readerConn.putArray(\"jdbcUrl\");\n+        for (String url : new String[]{dataSourceCfg.getJdbcUrl()}) {\n+            urlArr.add(url);\n+        }\n+\n         readerConnArr.add(readerConn);\n \n-        JSONObject readerParam = new JSONObject();\n+        ObjectNode readerParam = JSONUtils.createObjectNode();\n         readerParam.put(\"username\", dataSourceCfg.getUser());\n         readerParam.put(\"password\", dataSourceCfg.getPassword());\n-        readerParam.put(\"connection\", readerConnArr);\n+        readerParam.putArray(\"connection\").addAll(readerConnArr);\n \n-        JSONObject reader = new JSONObject();\n+\n+        ObjectNode reader = JSONUtils.createObjectNode();\n         reader.put(\"name\", DataxUtils.getReaderPluginName(DbType.of(dataxTaskExecutionContext.getSourcetype())));\n-        reader.put(\"parameter\", readerParam);\n+        reader.set(\"parameter\", readerParam);\n+\n+        List<ObjectNode> writerConnArr = new ArrayList<>();\n+        ObjectNode writerConn = JSONUtils.createObjectNode();\n+        ArrayNode tableArr = writerConn.putArray(\"table\");\n+        for (String table : new String[]{dataXParameters.getTargetTable()}) {\n+            tableArr.add(table);\n+        }\n \n-        List<JSONObject> writerConnArr = new ArrayList<>();\n-        JSONObject writerConn = new JSONObject();\n-        writerConn.put(\"table\", new String[] {dataXParameters.getTargetTable()});\n         writerConn.put(\"jdbcUrl\", dataTargetCfg.getJdbcUrl());\n         writerConnArr.add(writerConn);\n \n-        JSONObject writerParam = new JSONObject();\n+        ObjectNode writerParam = JSONUtils.createObjectNode();\n         writerParam.put(\"username\", dataTargetCfg.getUser());\n         writerParam.put(\"password\", dataTargetCfg.getPassword());\n-        writerParam.put(\"column\",\n-            parsingSqlColumnNames(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n-                    DbType.of(dataxTaskExecutionContext.getTargetType()),\n-                    dataSourceCfg, dataXParameters.getSql()));\n-        writerParam.put(\"connection\", writerConnArr);\n+\n+        String[] columns = parsingSqlColumnNames(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n+                DbType.of(dataxTaskExecutionContext.getTargetType()),\n+                dataSourceCfg, dataXParameters.getSql());\n+        ArrayNode columnArr = writerParam.putArray(\"column\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 208}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjU2NjIx", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-426256621", "createdAt": "2020-06-08T13:43:32Z", "commit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/6e907f150c3b06a6fc11e0eee8ca0f403d101962", "committedDate": "2020-06-09T05:02:50Z", "message": "1. specified jackson Date format.\n2. remove getMapper method,replace with toList()\n3. rewrite toList method,support constructCollectionType.\n4. parseObject(resp, Map.class) replace to toMap() method\n5. rename JacksonSerialize to JsonSerializer\n\nrewrite createArrayNode,createObjectNode method will Affect too many lines \uff0ci will fix it in the next pr."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c590450ab579b6c4db74222ac08a3a7892480b9", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/2c590450ab579b6c4db74222ac08a3a7892480b9", "committedDate": "2020-06-09T06:08:39Z", "message": "Merge pull request #1 from apache/dev\n\nmerge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cabb7a907f408d46b442e9f2635d6e97454aac3", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/8cabb7a907f408d46b442e9f2635d6e97454aac3", "committedDate": "2020-06-09T06:15:13Z", "message": "1. specified jackson Date format.\n2. remove getMapper method,replace with toList()\n3. rewrite toList method,support constructCollectionType.\n4. parseObject(resp, Map.class) replace to toMap() method\n5. rename JacksonSerialize to JsonSerializer\n\nrewrite createArrayNode,createObjectNode method will Affect too many lines \uff0ci will fix it in the next pr."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5b3f35bd4f217df31cd1fba8eb605e52909f972", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/c5b3f35bd4f217df31cd1fba8eb605e52909f972", "committedDate": "2020-06-09T06:37:16Z", "message": "replace fastjson annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fad09075f9dd4542ded0be6a490bfe83415dedd5", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/fad09075f9dd4542ded0be6a490bfe83415dedd5", "committedDate": "2020-06-10T01:16:28Z", "message": "remove fastjson maven dependence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/7d45e116bb98776c42f817c484172eabc8cac441", "committedDate": "2020-06-10T01:29:39Z", "message": "remove fastjson license"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDIxMzIy", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-428021322", "createdAt": "2020-06-10T12:54:26Z", "commit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo1NDoyNlrOGhzY-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo1NDoyNlrOGhzY-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5ODE3MA==", "bodyText": "please change windows new line 'CR' to linux new line 'LF'", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438098170", "createdAt": "2020-06-10T12:54:26Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteAckCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * startTime\r     */\r    private Date startTime;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r    /**\r     * logPath\r     */\r    private String logPath;\r\r    /**\r     * executePath\r     */\r    private String executePath;\r\r    public Date getStartTime() {\r        return startTime;\r    }\r\r    public void setStartTime(Date startTime) {\r        this.startTime = startTime;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getLogPath() {\r        return logPath;\r    }\r\r    public void setLogPath(String logPath) {\r        this.logPath = logPath;\r    }\r\r    public String getExecutePath() {\r        return executePath;\r    }\r\r    public void setExecutePath(String executePath) {\r        this.executePath = executePath;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_ACK);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteAckCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", startTime=\" + startTime +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", logPath='\" + logPath + '\\'' +\r                \", executePath='\" + executePath + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport com.fasterxml.jackson.annotation.JsonFormat;\rimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteAckCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * startTime\r     */\r    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r    private Date startTime;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r    /**\r     * logPath\r     */\r    private String logPath;\r\r    /**\r     * executePath\r     */\r    private String executePath;\r\r    public Date getStartTime() {\r        return startTime;\r    }\r\r    public void setStartTime(Date startTime) {\r        this.startTime = startTime;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getLogPath() {\r        return logPath;\r    }\r\r    public void setLogPath(String logPath) {\r        this.logPath = logPath;\r    }\r\r    public String getExecutePath() {\r        return executePath;\r    }\r\r    public void setExecutePath(String executePath) {\r        this.executePath = executePath;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_ACK);\r        byte[] body = JsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteAckCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", startTime=\" + startTime +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", logPath='\" + logPath + '\\'' +\r                \", executePath='\" + executePath + '\\'' +\r                '}';\r    }\r}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDIxNDk4", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-428021498", "createdAt": "2020-06-10T12:54:39Z", "commit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo1NDozOVrOGhzZbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo1NDozOVrOGhzZbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5ODI4Ng==", "bodyText": "please change windows new line 'CR' to linux new line 'LF'", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438098286", "createdAt": "2020-06-10T12:54:39Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteRequestCommand implements Serializable {\r\r    /**\r     *  task execution context\r     */\r    private String taskExecutionContext;\r\r    public String getTaskExecutionContext() {\r        return taskExecutionContext;\r    }\r\r    public void setTaskExecutionContext(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    public TaskExecuteRequestCommand() {\r    }\r\r    public TaskExecuteRequestCommand(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_REQUEST);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteRequestCommand{\" +\r                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteRequestCommand implements Serializable {\r\r    /**\r     *  task execution context\r     */\r    private String taskExecutionContext;\r\r    public String getTaskExecutionContext() {\r        return taskExecutionContext;\r    }\r\r    public void setTaskExecutionContext(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    public TaskExecuteRequestCommand() {\r    }\r\r    public TaskExecuteRequestCommand(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_REQUEST);\r        byte[] body = JsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteRequestCommand{\" +\r                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\r                '}';\r    }\r}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDIyNDU3", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-428022457", "createdAt": "2020-06-10T12:55:49Z", "commit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo1NTo0OVrOGhzcSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo1NTo0OVrOGhzcSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5OTAxNw==", "bodyText": "please change windows new line 'CR' to linux new line 'LF'", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438099017", "createdAt": "2020-06-10T12:55:49Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task response command\r */\rpublic class TaskExecuteResponseCommand implements Serializable {\r\r\r    public TaskExecuteResponseCommand() {\r    }\r\r    public TaskExecuteResponseCommand(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  task instance id\r     */\r    private int taskInstanceId;\r\r    /**\r     *  status\r     */\r    private int status;\r\r\r    /**\r     *  end time\r     */\r    private Date endTime;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * appIds\r     */\r    private String appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public Date getEndTime() {\r        return endTime;\r    }\r\r    public void setEndTime(Date endTime) {\r        this.endTime = endTime;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public String getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(String appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     * package response command\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", status=\" + status +\r                \", endTime=\" + endTime +\r                \", processId=\" + processId +\r                \", appIds='\" + appIds + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport com.fasterxml.jackson.annotation.JsonFormat;\rimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task response command\r */\rpublic class TaskExecuteResponseCommand implements Serializable {\r\r\r    public TaskExecuteResponseCommand() {\r    }\r\r    public TaskExecuteResponseCommand(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  task instance id\r     */\r    private int taskInstanceId;\r\r    /**\r     *  status\r     */\r    private int status;\r\r\r    /**\r     *  end time\r     */\r    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r    private Date endTime;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * appIds\r     */\r    private String appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public Date getEndTime() {\r        return endTime;\r    }\r\r    public void setEndTime(Date endTime) {\r        this.endTime = endTime;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public String getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(String appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     * package response command\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\r        byte[] body = JsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", status=\" + status +\r                \", endTime=\" + endTime +\r                \", processId=\" + processId +\r                \", appIds='\" + appIds + '\\'' +\r                '}';\r    }\r}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDI2NDUw", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-428026450", "createdAt": "2020-06-10T13:00:26Z", "commit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzowMDoyNlrOGhzouQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzowMDoyNlrOGhzouQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMjIwMQ==", "bodyText": "why not user JsonUtils tool class ,just suggestion ,nonstrict", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438102201", "createdAt": "2020-06-10T13:00:26Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/JsonSerializer.java", "diffHunk": "@@ -42,7 +56,14 @@\n \t * @return string\n \t */\n \tpublic static <T> String serializeToString(T obj)  {\n-\t\treturn JSON.toJSONString(obj);\n+\t\tString json = \"\";\n+\t\ttry {\n+\t\t\t json = objectMapper.writeValueAsString(obj);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDMwMTY3", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-428030167", "createdAt": "2020-06-10T13:04:39Z", "commit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzowNDozOVrOGhzzuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzozMDo0NFrOGh056A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNTAxNw==", "bodyText": "better use Collections.EMPTY_LIST", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438105017", "createdAt": "2020-06-10T13:04:39Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java", "diffHunk": "@@ -107,11 +121,13 @@ public static String toJson(Object object) {\n         if (StringUtils.isEmpty(json)) {\n             return new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNjk2MA==", "bodyText": "why not assign the result of JSONUtils.toList to globalParamsList directly", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438106960", "createdAt": "2020-06-10T13:07:29Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java", "diffHunk": "@@ -152,7 +153,8 @@ public void run() {\n         // global params string\n         String globalParamsStr = taskExecutionContext.getGlobalParams();\n         if (globalParamsStr != null) {\n-            List<Property> globalParamsList = JSONObject.parseArray(globalParamsStr, Property.class);\n+            List<Property> globalParamsList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMjM5Mg==", "bodyText": "do you mind move tempObj definition to this position ?", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438112392", "createdAt": "2020-06-10T13:15:56Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java", "diffHunk": "@@ -205,16 +206,16 @@ public Boolean verifyIsNeedCreateCommand(Command command){\n         CommandType commandType = command.getCommandType();\n \n         if(cmdTypeMap.containsKey(commandType)){\n-            JSONObject cmdParamObj = (JSONObject) JSON.parse(command.getCommandParam());\n-            JSONObject tempObj;\n-            int processInstanceId = cmdParamObj.getInteger(CMDPARAM_RECOVER_PROCESS_ID_STRING);\n+            ObjectNode cmdParamObj = JSONUtils.parseObject(command.getCommandParam());\n+            ObjectNode tempObj;\n+            int processInstanceId = cmdParamObj.path(CMDPARAM_RECOVER_PROCESS_ID_STRING).asInt();\n \n             List<Command> commands = commandMapper.selectList(null);\n             // for all commands\n             for (Command tmpCommand:commands){\n                 if(cmdTypeMap.containsKey(tmpCommand.getCommandType())){\n-                    tempObj = (JSONObject) JSON.parse(tmpCommand.getCommandParam());\n-                    if(tempObj != null && processInstanceId == tempObj.getInteger(CMDPARAM_RECOVER_PROCESS_ID_STRING)){\n+                    tempObj = JSONUtils.parseObject(tmpCommand.getCommandParam());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d45e116bb98776c42f817c484172eabc8cac441"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyMjk4NA==", "bodyText": "ok", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438122984", "createdAt": "2020-06-10T13:30:44Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java", "diffHunk": "@@ -236,64 +222,90 @@ private String buildDataxJsonFile()\n \n     /**\n      * build datax job config\n-     * \n+     *\n      * @return collection of datax job config JSONObject\n      * @throws SQLException if error throws SQLException\n      */\n-    private List<JSONObject> buildDataxJobContentJson() throws SQLException {\n-        DataxTaskExecutionContext dataxTaskExecutionContext = taskExecutionContext.getDataxTaskExecutionContext();\n+    private List<ObjectNode> buildDataxJobContentJson() throws SQLException {\n \n+        DataxTaskExecutionContext dataxTaskExecutionContext = taskExecutionContext.getDataxTaskExecutionContext();\n \n         BaseDataSource dataSourceCfg = DataSourceFactory.getDatasource(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n                 dataxTaskExecutionContext.getSourceConnectionParams());\n \n         BaseDataSource dataTargetCfg = DataSourceFactory.getDatasource(DbType.of(dataxTaskExecutionContext.getTargetType()),\n                 dataxTaskExecutionContext.getTargetConnectionParams());\n \n-        List<JSONObject> readerConnArr = new ArrayList<>();\n-        JSONObject readerConn = new JSONObject();\n-        readerConn.put(\"querySql\", new String[] {dataXParameters.getSql()});\n-        readerConn.put(\"jdbcUrl\", new String[] {dataSourceCfg.getJdbcUrl()});\n+        List<ObjectNode> readerConnArr = new ArrayList<>();\n+        ObjectNode readerConn = JSONUtils.createObjectNode();\n+\n+        ArrayNode sqlArr = readerConn.putArray(\"querySql\");\n+        for (String sql : new String[]{dataXParameters.getSql()}) {\n+            sqlArr.add(sql);\n+        }\n+\n+        ArrayNode urlArr = readerConn.putArray(\"jdbcUrl\");\n+        for (String url : new String[]{dataSourceCfg.getJdbcUrl()}) {\n+            urlArr.add(url);\n+        }\n+\n         readerConnArr.add(readerConn);\n \n-        JSONObject readerParam = new JSONObject();\n+        ObjectNode readerParam = JSONUtils.createObjectNode();\n         readerParam.put(\"username\", dataSourceCfg.getUser());\n         readerParam.put(\"password\", dataSourceCfg.getPassword());\n-        readerParam.put(\"connection\", readerConnArr);\n+        readerParam.putArray(\"connection\").addAll(readerConnArr);\n \n-        JSONObject reader = new JSONObject();\n+\n+        ObjectNode reader = JSONUtils.createObjectNode();\n         reader.put(\"name\", DataxUtils.getReaderPluginName(DbType.of(dataxTaskExecutionContext.getSourcetype())));\n-        reader.put(\"parameter\", readerParam);\n+        reader.set(\"parameter\", readerParam);\n+\n+        List<ObjectNode> writerConnArr = new ArrayList<>();\n+        ObjectNode writerConn = JSONUtils.createObjectNode();\n+        ArrayNode tableArr = writerConn.putArray(\"table\");\n+        for (String table : new String[]{dataXParameters.getTargetTable()}) {\n+            tableArr.add(table);\n+        }\n \n-        List<JSONObject> writerConnArr = new ArrayList<>();\n-        JSONObject writerConn = new JSONObject();\n-        writerConn.put(\"table\", new String[] {dataXParameters.getTargetTable()});\n         writerConn.put(\"jdbcUrl\", dataTargetCfg.getJdbcUrl());\n         writerConnArr.add(writerConn);\n \n-        JSONObject writerParam = new JSONObject();\n+        ObjectNode writerParam = JSONUtils.createObjectNode();\n         writerParam.put(\"username\", dataTargetCfg.getUser());\n         writerParam.put(\"password\", dataTargetCfg.getPassword());\n-        writerParam.put(\"column\",\n-            parsingSqlColumnNames(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n-                    DbType.of(dataxTaskExecutionContext.getTargetType()),\n-                    dataSourceCfg, dataXParameters.getSql()));\n-        writerParam.put(\"connection\", writerConnArr);\n+\n+        String[] columns = parsingSqlColumnNames(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n+                DbType.of(dataxTaskExecutionContext.getTargetType()),\n+                dataSourceCfg, dataXParameters.getSql());\n+        ArrayNode columnArr = writerParam.putArray(\"column\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwOTE0NQ=="}, "originalCommit": {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba"}, "originalPosition": 208}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f643981f489e34dff84f23ffa9d559a7e398cb4b", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/f643981f489e34dff84f23ffa9d559a7e398cb4b", "committedDate": "2020-06-11T02:14:15Z", "message": "1. change windows new line 'CR' to linux new line 'LF'\n2. Format code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NjUyMTc3", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-428652177", "createdAt": "2020-06-11T07:19:17Z", "commit": {"oid": "f643981f489e34dff84f23ffa9d559a7e398cb4b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODcyNDg3", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-428872487", "createdAt": "2020-06-11T12:47:30Z", "commit": {"oid": "f643981f489e34dff84f23ffa9d559a7e398cb4b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e37be68af658f4b79cd9744e7e0aea8d538188f", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/4e37be68af658f4b79cd9744e7e0aea8d538188f", "committedDate": "2020-06-12T01:18:00Z", "message": "Update SqoopTaskTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "094d09ba74062dc8a828d87ba8e9d3d9a14c42a8", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/094d09ba74062dc8a828d87ba8e9d3d9a14c42a8", "committedDate": "2020-06-12T01:20:28Z", "message": "Update pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5a296f4cdf991ec22544ef1cde8b8dbf8a2cdd5", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/b5a296f4cdf991ec22544ef1cde8b8dbf8a2cdd5", "committedDate": "2020-06-12T01:21:07Z", "message": "Update pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71619ed29bc9ff3f34a5308576711d86779392a6", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/71619ed29bc9ff3f34a5308576711d86779392a6", "committedDate": "2020-06-12T01:22:44Z", "message": "Update pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b11275880a52a67ff1b77b0c51c48fa2d3211c1", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/0b11275880a52a67ff1b77b0c51c48fa2d3211c1", "committedDate": "2020-06-12T01:22:58Z", "message": "Merge pull request #2 from apache/dev\n\nmerge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65841a5709aa681e7b3df6d8cdc10b575fdb9d7b", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/65841a5709aa681e7b3df6d8cdc10b575fdb9d7b", "committedDate": "2020-06-12T01:31:04Z", "message": "1. change windows new line 'CR' to linux new line 'LF'\n2. solve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfecfb799b91459e825c2104ab6fa25d07e4f7f1", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/cfecfb799b91459e825c2104ab6fa25d07e4f7f1", "committedDate": "2020-06-12T01:59:40Z", "message": "1. change windows new line 'CR' to linux new line 'LF'\n2. solve conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDIzNzIw", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-429423720", "createdAt": "2020-06-12T02:34:01Z", "commit": {"oid": "cfecfb799b91459e825c2104ab6fa25d07e4f7f1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24120a4641c014a4c9dcdb36cfa787f2b660822e", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/24120a4641c014a4c9dcdb36cfa787f2b660822e", "committedDate": "2020-06-12T03:27:42Z", "message": "fix the bad code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65953fe2573d4358c4bbc023cf8f04f6343345bb", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/65953fe2573d4358c4bbc023cf8f04f6343345bb", "committedDate": "2020-06-12T04:10:17Z", "message": "fix testBuildDataxJobContentJson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b7d8ee236990747ecfc40726092cb352cd91f36", "author": {"user": {"login": "simon824", "name": "Simon"}}, "url": "https://github.com/apache/dolphinscheduler/commit/1b7d8ee236990747ecfc40726092cb352cd91f36", "committedDate": "2020-06-12T04:35:18Z", "message": "fix the bad code smell"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NTQwNzM1", "url": "https://github.com/apache/dolphinscheduler/pull/2872#pullrequestreview-429540735", "createdAt": "2020-06-12T08:03:15Z", "commit": {"oid": "1b7d8ee236990747ecfc40726092cb352cd91f36"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1980, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}