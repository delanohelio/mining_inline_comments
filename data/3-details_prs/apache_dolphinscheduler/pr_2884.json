{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2OTQ3OTQw", "number": 2884, "title": "batch copy or move process #2753", "bodyText": "What is the purpose of the pull request\nThis pull request adds batch copy or move process feature backend code #2753\nBrief change log\nVerify this pull request", "createdAt": "2020-06-03T04:02:00Z", "url": "https://github.com/apache/dolphinscheduler/pull/2884", "merged": true, "mergeCommit": {"oid": "46ab86d6dff94827bd265965f0c70b4f9c979868"}, "closed": true, "closedAt": "2020-08-13T07:37:47Z", "author": {"login": "zixi0825"}, "timelineItems": {"totalCount": 65, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnhUDdAH2gAyNDI2OTQ3OTQwOjUzYzJiYTJhMDA4Y2I0OGU4ZjQxZTAxMmViMGZlYmVhY2RlZTBiNDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-D2xwAFqTQ2NTU4NTY1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "53c2ba2a008cb48e8f41e012eb0febeacdee0b42", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/53c2ba2a008cb48e8f41e012eb0febeacdee0b42", "committedDate": "2020-06-03T03:57:54Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a4ad29147776d933a13c5af9512cdd663fa2a8b", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/9a4ad29147776d933a13c5af9512cdd663fa2a8b", "committedDate": "2020-06-03T04:37:46Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "247503a31f79ab9d923aafac0dedf3b3dba2a47e", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/247503a31f79ab9d923aafac0dedf3b3dba2a47e", "committedDate": "2020-06-03T06:50:44Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55a21cd03bfc9ff551b550ebea1de5e049babcf3", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/55a21cd03bfc9ff551b550ebea1de5e049babcf3", "committedDate": "2020-06-03T08:41:27Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "309fa0cf098aaa2d51791dc9ff7246db23759e68", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/309fa0cf098aaa2d51791dc9ff7246db23759e68", "committedDate": "2020-06-03T09:00:17Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4694500f8c9a713f4d3515a9732570de7408d5a8", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/4694500f8c9a713f4d3515a9732570de7408d5a8", "committedDate": "2020-06-03T09:16:41Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb41a4f119f3887922203b663feabc2809c52ee3", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/bb41a4f119f3887922203b663feabc2809c52ee3", "committedDate": "2020-06-03T10:44:40Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b71e4e64e524e9e0cba9c716fb17f86745f3882", "author": {"user": {"login": "dailidong", "name": "lidongdai"}}, "url": "https://github.com/apache/dolphinscheduler/commit/2b71e4e64e524e9e0cba9c716fb17f86745f3882", "committedDate": "2020-06-06T08:21:01Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a273966d4213ca48ae9234176b163d2528a06ae3", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/a273966d4213ca48ae9234176b163d2528a06ae3", "committedDate": "2020-06-10T02:54:00Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTczNTY2", "url": "https://github.com/apache/dolphinscheduler/pull/2884#pullrequestreview-428573566", "createdAt": "2020-06-11T03:48:48Z", "commit": {"oid": "a273966d4213ca48ae9234176b163d2528a06ae3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzo0ODo0OFrOGiNkNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjowODozMVrOGiPsyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNzAyOQ==", "bodyText": "Please add parameters to ApiImplicitParams()", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438527029", "createdAt": "2020-06-11T03:48:48Z", "author": {"login": "wen-hemin"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java", "diffHunk": "@@ -95,27 +95,33 @@ public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n     }\n \n     /**\n-     * copy process definition\n+     * copy or move process definition\n      *\n      * @param loginUser   login user\n      * @param projectName project name\n-     * @param processId   process definition id\n+     * @param isCopy  isCopy\n+     * @param processDefinitionIds   process definition ids\n+     * @param targetProjectName target project name\n      * @return copy result code\n      */\n-    @ApiOperation(value = \"copyProcessDefinition\", notes= \"COPY_PROCESS_DEFINITION_NOTES\")\n+    @ApiOperation(value = \"copyOrMoveProcessDefinition\", notes= \"COPY_OR_MOVE_PROCESS_DEFINITION_NOTES\")\n     @ApiImplicitParams({\n-            @ApiImplicitParam(name = \"processId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n+            @ApiImplicitParam(name = \"processDefinitionIds\", value = \"PROCESS_DEFINITION_IDS\", required = true, dataType = \"String\", example = \"3,4\")\n     })\n-    @PostMapping(value = \"/copy\")\n+    @PostMapping(value = \"/copy-or-move\")\n     @ResponseStatus(HttpStatus.OK)\n-    @ApiException(COPY_PROCESS_DEFINITION_ERROR)\n-    public Result copyProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                        @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                        @RequestParam(value = \"processId\", required = true) int processId) throws JsonProcessingException {\n-        logger.info(\"copy process definition, login user:{}, project name:{}, process definition id:{}\",\n-                loginUser.getUserName(), projectName, processId);\n-        Map<String, Object> result = processDefinitionService.copyProcessDefinition(loginUser, projectName, processId);\n-        return returnDataList(result);\n+    @ApiException(COPY_OR_MOVE_PROCESS_DEFINITION_ERROR)\n+    public Result copyOrMoveProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                              @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                              @RequestParam(value = \"processDefinitionIds\", required = true) String processDefinitionIds,\n+                                              @RequestParam(value = \"targetProjectName\",required = true) String targetProjectName,\n+                                              @RequestParam(value = \"isCopy\", required = true) boolean isCopy)  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a273966d4213ca48ae9234176b163d2528a06ae3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNzE2Nw==", "bodyText": "Please add parameters to log", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438527167", "createdAt": "2020-06-11T03:49:31Z", "author": {"login": "wen-hemin"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java", "diffHunk": "@@ -95,27 +95,33 @@ public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n     }\n \n     /**\n-     * copy process definition\n+     * copy or move process definition\n      *\n      * @param loginUser   login user\n      * @param projectName project name\n-     * @param processId   process definition id\n+     * @param isCopy  isCopy\n+     * @param processDefinitionIds   process definition ids\n+     * @param targetProjectName target project name\n      * @return copy result code\n      */\n-    @ApiOperation(value = \"copyProcessDefinition\", notes= \"COPY_PROCESS_DEFINITION_NOTES\")\n+    @ApiOperation(value = \"copyOrMoveProcessDefinition\", notes= \"COPY_OR_MOVE_PROCESS_DEFINITION_NOTES\")\n     @ApiImplicitParams({\n-            @ApiImplicitParam(name = \"processId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n+            @ApiImplicitParam(name = \"processDefinitionIds\", value = \"PROCESS_DEFINITION_IDS\", required = true, dataType = \"String\", example = \"3,4\")\n     })\n-    @PostMapping(value = \"/copy\")\n+    @PostMapping(value = \"/copy-or-move\")\n     @ResponseStatus(HttpStatus.OK)\n-    @ApiException(COPY_PROCESS_DEFINITION_ERROR)\n-    public Result copyProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                        @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                        @RequestParam(value = \"processId\", required = true) int processId) throws JsonProcessingException {\n-        logger.info(\"copy process definition, login user:{}, project name:{}, process definition id:{}\",\n-                loginUser.getUserName(), projectName, processId);\n-        Map<String, Object> result = processDefinitionService.copyProcessDefinition(loginUser, projectName, processId);\n-        return returnDataList(result);\n+    @ApiException(COPY_OR_MOVE_PROCESS_DEFINITION_ERROR)\n+    public Result copyOrMoveProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                              @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                              @RequestParam(value = \"processDefinitionIds\", required = true) String processDefinitionIds,\n+                                              @RequestParam(value = \"targetProjectName\",required = true) String targetProjectName,\n+                                              @RequestParam(value = \"isCopy\", required = true) boolean isCopy)  {\n+\n+\n+        logger.info(\"batch {} process definition, login user:{}, project name:{}, process definition ids:{}\uff0ctarget project name:{}\",\n+                isCopy?\"copy\":\"move\",StringUtils.replaceNRTtoUnderline(loginUser.getUserName()), StringUtils.replaceNRTtoUnderline(projectName), StringUtils.replaceNRTtoUnderline(processDefinitionIds),StringUtils.replaceNRTtoUnderline(targetProjectName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a273966d4213ca48ae9234176b163d2528a06ae3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyODIzMA==", "bodyText": "10148 repeat\narranged in order", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438528230", "createdAt": "2020-06-11T03:54:14Z", "author": {"login": "wen-hemin"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java", "diffHunk": "@@ -176,6 +176,10 @@\n     DELETE_WORKER_GROUP_FAIL(10147,\"delete worker group fail \", \"\u5220\u9664worker\u5206\u7ec4\u5931\u8d25\"),\n     COPY_PROCESS_DEFINITION_ERROR(10148,\"copy process definition error\", \"\u590d\u5236\u5de5\u4f5c\u6d41\u9519\u8bef\"),\n     USER_DISABLED(10149,\"The current user is disabled\", \"\u5f53\u524d\u7528\u6237\u5df2\u505c\u7528\"),\n+    QUERY_USER_CREATED_PROJECT_ERROR(10151,\"query user created project error error\", \"\u67e5\u8be2\u7528\u6237\u521b\u5efa\u7684\u9879\u76ee\u9519\u8bef\"),\n+    PROCESS_DEFINITION_IDS_IS_EMPTY(10152,\"process definition ids is empty\", \"\u5de5\u4f5c\u6d41IDS\u4e0d\u80fd\u4e3a\u7a7a\"),\n+    COPY_OR_MOVE_PROCESS_DEFINITION_ERROR(10148,\"copy or move process definition error\", \"\u590d\u5236\u6216\u8005\u79fb\u52a8\u5de5\u4f5c\u6d41\u9519\u8bef\"),\n+    MOVE_PROCESS_DEFINITION_ERROR(10150,\"move process definition error\", \"\u79fb\u52a8\u5de5\u4f5c\u6d41\u9519\u8bef\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a273966d4213ca48ae9234176b163d2528a06ae3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyODQ4NQ==", "bodyText": "Annotate is wrong", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438528485", "createdAt": "2020-06-11T03:55:20Z", "author": {"login": "wen-hemin"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,36 +295,188 @@ private String getResourceIds(ProcessData processData) {\n \n     /**\n      * copy process definition\n-     *\n      * @param loginUser   login user\n-     * @param projectName project name\n      * @param processId   process definition id\n      * @return copy result code\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a273966d4213ca48ae9234176b163d2528a06ae3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDAyOQ==", "bodyText": "It is recommended to use the project ID.\nFuture projects will be logic delete, The project name may be duplicated.", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438530029", "createdAt": "2020-06-11T04:02:21Z", "author": {"login": "wen-hemin"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,36 +295,188 @@ private String getResourceIds(ProcessData processData) {\n \n     /**\n      * copy process definition\n-     *\n      * @param loginUser   login user\n-     * @param projectName project name\n      * @param processId   process definition id\n      * @return copy result code\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     String targetProjectName) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);\n+\n+        ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n+        if (processDefinition == null) {\n+            putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n+            return result;\n+        } else {\n+            Project targetProject = projectMapper.queryByName(targetProjectName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a273966d4213ca48ae9234176b163d2528a06ae3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MTk5Mw==", "bodyText": "It is recommended the error message return project name.", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438561993", "createdAt": "2020-06-11T06:08:31Z", "author": {"login": "wen-hemin"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,36 +295,188 @@ private String getResourceIds(ProcessData processData) {\n \n     /**\n      * copy process definition\n-     *\n      * @param loginUser   login user\n-     * @param projectName project name\n      * @param processId   process definition id\n      * @return copy result code\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     String targetProjectName) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);\n+\n+        ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n+        if (processDefinition == null) {\n+            putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n+            return result;\n+        } else {\n+            Project targetProject = projectMapper.queryByName(targetProjectName);\n+            if(targetProject == null){\n+                putMsg(result, Status.PROJECT_NOT_FOUNT, targetProjectName);\n+                return result;\n+            }else{\n+                return createProcessDefinition(\n+                        loginUser,\n+                        targetProjectName,\n+                        processDefinition.getName() + \"_copy_\" + System.currentTimeMillis(),\n+                        processDefinition.getProcessDefinitionJson(),\n+                        processDefinition.getDescription(),\n+                        processDefinition.getLocations(),\n+                        processDefinition.getConnects());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * batch copy or move process definition\n+     * @param loginUser loginUser\n+     * @param projectName projectName\n+     * @param processDefinitionIds processDefinitionIds\n+     * @param targetProjectName targetProjectName\n+     * @return\n+     */\n+    public Map<String, Object> batchCopyOrMoveProcessDefinition(User loginUser,\n+                                                          String projectName,\n+                                                          String processDefinitionIds,\n+                                                          String targetProjectName, boolean isCopy){\n+        Map<String, Object> result = new HashMap<>(5);\n+        List<String> failedIdList = new ArrayList<>();\n+\n+        if (StringUtils.isEmpty(processDefinitionIds)) {\n+            putMsg(result, Status.PROCESS_DEFINITION_IDS_IS_EMPTY, targetProjectName);\n+            return result;\n+        }\n+\n+        //check src project auth\n+        Map<String, Object> checkResult = checkProjectAndAuth(loginUser, projectName);\n+        if (checkResult != null) {\n+            return checkResult;\n+        }\n+\n+        if(!targetProjectName.equals(projectName)){\n+            Map<String, Object> checkTargetProjectResult = checkProjectAndAuth(loginUser, targetProjectName);\n+            if (checkTargetProjectResult != null) {\n+                return checkTargetProjectResult;\n+            }\n+        }\n+\n+        String[] processDefinitionIdList = processDefinitionIds.split(Constants.COMMA);\n+        if(isCopy){\n+            doBatchCopyProcessDefinition(loginUser, targetProjectName, failedIdList, processDefinitionIdList);\n+        }else{\n+            doBatchMoveProcessDefinition(targetProjectName, failedIdList, processDefinitionIdList);\n+        }\n+\n+        checkBatchOperateResult(result, failedIdList);\n+\n+        return result;\n+    }\n+\n+    /**\n+     * batch move process definition\n+     * @param targetProjectName targetProjectName\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchMoveProcessDefinition(String targetProjectName, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> moveProcessDefinitionResult =\n+                        moveProcessDefinition(Integer.valueOf(processDefinitionId),targetProjectName);\n+                if (!Status.SUCCESS.equals(moveProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add(processDefinitionId);\n+                    logger.error((String) moveProcessDefinitionResult.get(Constants.MSG));\n+                }\n+            } catch (Exception e) {\n+                failedIdList.add(processDefinitionId);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * batch copy process definition\n+     * @param loginUser loginUser\n+     * @param targetProjectName targetProjectName\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchCopyProcessDefinition(User loginUser, String targetProjectName, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> copyProcessDefinitionResult =\n+                        copyProcessDefinition(loginUser,Integer.valueOf(processDefinitionId),targetProjectName);\n+                if (!Status.SUCCESS.equals(copyProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add(processDefinitionId);\n+                    logger.error((String) copyProcessDefinitionResult.get(Constants.MSG));\n+                }\n+            } catch (Exception e) {\n+                failedIdList.add(processDefinitionId);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * check project and auth\n+     * @param loginUser\n+     * @param projectName\n+     * @return\n+     */\n+    private Map<String, Object> checkProjectAndAuth(User loginUser, String projectName) {\n         Project project = projectMapper.queryByName(projectName);\n \n+        //check user access for project\n         Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);\n         Status resultStatus = (Status) checkResult.get(Constants.STATUS);\n+\n         if (resultStatus != Status.SUCCESS) {\n             return checkResult;\n         }\n+        return null;\n+    }\n+\n+    /**\n+     * move process definition\n+     * @param processId processId\n+     * @param targetProjectName targetProjectName\n+     * @return move result code\n+     */\n+    private Map<String, Object> moveProcessDefinition(Integer processId,\n+                                                     String targetProjectName) {\n+\n+        Map<String, Object> result = new HashMap<>(5);\n \n         ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n         if (processDefinition == null) {\n             putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n             return result;\n         } else {\n-            return createProcessDefinition(\n-                    loginUser,\n-                    projectName,\n-                    processDefinition.getName() + \"_copy_\" + System.currentTimeMillis(),\n-                    processDefinition.getProcessDefinitionJson(),\n-                    processDefinition.getDescription(),\n-                    processDefinition.getLocations(),\n-                    processDefinition.getConnects());\n+            Project targetProject = projectMapper.queryByName(targetProjectName);\n+            if(targetProject == null){\n+                putMsg(result, Status.PROJECT_NOT_FOUNT, processId);\n+                return result;\n+            }else{\n+                processDefinition.setProjectId(targetProject.getId());\n+                processDefinition.setUpdateTime(new Date());\n+                if (processDefineMapper.updateById(processDefinition) > 0) {\n+                    putMsg(result, Status.SUCCESS);\n+                } else {\n+                    putMsg(result, Status.UPDATE_PROCESS_DEFINITION_ERROR);\n+                }\n+                return result;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * check batch operate result\n+     * @param result\n+     * @param failedIdList\n+     */\n+    private void checkBatchOperateResult(Map<String, Object> result, List<String> failedIdList) {\n+        if (!failedIdList.isEmpty()) {\n+            putMsg(result, Status.MOVE_PROCESS_DEFINITION_ERROR, String.join(\",\", failedIdList));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a273966d4213ca48ae9234176b163d2528a06ae3"}, "originalPosition": 194}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97815cd2d29014adda1a33d884b13cf913c9d43c", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/97815cd2d29014adda1a33d884b13cf913c9d43c", "committedDate": "2020-06-18T10:45:26Z", "message": "batch copy or move process sovle code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79504d950a2cafab57e99dc008334428f21b4f60", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/79504d950a2cafab57e99dc008334428f21b4f60", "committedDate": "2020-06-18T10:45:45Z", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19794cadacbc24fc242a6981f442caaadc4e3ab9", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/19794cadacbc24fc242a6981f442caaadc4e3ab9", "committedDate": "2020-06-18T11:12:59Z", "message": "batch copy or move process sovle code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ed2361b67aa0700c25dafcb105d2b5d94be138b", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/1ed2361b67aa0700c25dafcb105d2b5d94be138b", "committedDate": "2020-06-18T12:08:20Z", "message": "batch copy or move process sovle code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ede5e341a0c8666761c11754f712488176f393d", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/5ede5e341a0c8666761c11754f712488176f393d", "committedDate": "2020-06-18T12:15:48Z", "message": "batch copy or move process sovle code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0431b9d8bfd8a74984d26a7c07532638470a22dd", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/0431b9d8bfd8a74984d26a7c07532638470a22dd", "committedDate": "2020-06-18T12:22:47Z", "message": "batch copy or move process sovle code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c18e98b16d6801188eb945606547a97c4bcc086d", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/c18e98b16d6801188eb945606547a97c4bcc086d", "committedDate": "2020-06-19T02:12:44Z", "message": "batch copy or move process sovle code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81c9d08a194b948ee05fa276e652e830e8fece8b", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/81c9d08a194b948ee05fa276e652e830e8fece8b", "committedDate": "2020-06-19T03:02:58Z", "message": "batch copy or move process sovle code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ac6186f57912e3cc36d44a0fde6523fcdfde203", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/6ac6186f57912e3cc36d44a0fde6523fcdfde203", "committedDate": "2020-06-19T03:45:51Z", "message": "batch copy or move process sovle code smell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8317b00b1887d436579f7a414476031f04885043", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/8317b00b1887d436579f7a414476031f04885043", "committedDate": "2020-06-19T11:42:38Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32695ec4d66a399c8c8501663f57a8a8a0fc06f2", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/32695ec4d66a399c8c8501663f57a8a8a0fc06f2", "committedDate": "2020-06-22T01:57:47Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/d49376b9f64a24b27f82915094aab6749ce0b066", "committedDate": "2020-06-23T11:52:40Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODQwNjQ1", "url": "https://github.com/apache/dolphinscheduler/pull/2884#pullrequestreview-435840645", "createdAt": "2020-06-23T14:28:13Z", "commit": {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDoyODoxM1rOGnr86A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToyMTowOFrOGnuZZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI2Nzc1Mg==", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444267752", "createdAt": "2020-06-23T14:28:13Z", "author": {"login": "samz406"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,38 +294,209 @@ private String getResourceIds(ProcessData processData) {\n     /**\n      * copy process definition\n      *\n-     * @param loginUser   login user\n-     * @param projectName project name\n-     * @param processId   process definition id\n-     * @return copy result code\n+     * @param loginUser loginUser\n+     * @param processId processId\n+     * @param targetProject targetProject\n+     * @return\n+     * @throws JsonProcessingException\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     Project targetProject) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);\n-        Project project = projectMapper.queryByName(projectName);\n-\n-        Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);\n-        Status resultStatus = (Status) checkResult.get(Constants.STATUS);\n-        if (resultStatus != Status.SUCCESS) {\n-            return checkResult;\n-        }\n \n         ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n         if (processDefinition == null) {\n             putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n             return result;\n         } else {\n+\n             return createProcessDefinition(\n                     loginUser,\n-                    projectName,\n+                    targetProject.getName(),\n                     processDefinition.getName() + \"_copy_\" + System.currentTimeMillis(),\n                     processDefinition.getProcessDefinitionJson(),\n                     processDefinition.getDescription(),\n                     processDefinition.getLocations(),\n                     processDefinition.getConnects());\n+\n+        }\n+    }\n+\n+    /**\n+     * batch copy or move process definition\n+     * @param loginUser loginUser\n+     * @param projectName projectName\n+     * @param processDefinitionIds processDefinitionIds\n+     * @param targetProjectId targetProjectId\n+     * @param isCopy isCopy\n+     * @return\n+     */\n+    public Map<String, Object> batchCopyOrMoveProcessDefinition(User loginUser,\n+                                                          String projectName,\n+                                                          String processDefinitionIds,\n+                                                          int targetProjectId, boolean isCopy){\n+        Map<String, Object> result = new HashMap<>(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MjI3Ng==", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444282276", "createdAt": "2020-06-23T14:46:36Z", "author": {"login": "samz406"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,38 +294,209 @@ private String getResourceIds(ProcessData processData) {\n     /**\n      * copy process definition\n      *\n-     * @param loginUser   login user\n-     * @param projectName project name\n-     * @param processId   process definition id\n-     * @return copy result code\n+     * @param loginUser loginUser\n+     * @param processId processId\n+     * @param targetProject targetProject\n+     * @return\n+     * @throws JsonProcessingException\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     Project targetProject) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MjU2OQ==", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444282569", "createdAt": "2020-06-23T14:46:57Z", "author": {"login": "samz406"}, "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java", "diffHunk": "@@ -179,16 +181,33 @@ public void testQueryProcessDefinitionById() throws Exception {\n     }\n \n     @Test\n-    public void testCopyProcessDefinition() throws Exception {\n+    public void testBatchCopyProcessDefinition() throws Exception {\n \n         String projectName = \"test\";\n-        int id = 1;\n+        int targetProjectId = 2;\n+        String id = \"1\";\n+\n+        Map<String, Object> result = new HashMap<>(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4Mjc0OA==", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444282748", "createdAt": "2020-06-23T14:47:10Z", "author": {"login": "samz406"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,38 +294,209 @@ private String getResourceIds(ProcessData processData) {\n     /**\n      * copy process definition\n      *\n-     * @param loginUser   login user\n-     * @param projectName project name\n-     * @param processId   process definition id\n-     * @return copy result code\n+     * @param loginUser loginUser\n+     * @param processId processId\n+     * @param targetProject targetProject\n+     * @return\n+     * @throws JsonProcessingException\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     Project targetProject) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);\n-        Project project = projectMapper.queryByName(projectName);\n-\n-        Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);\n-        Status resultStatus = (Status) checkResult.get(Constants.STATUS);\n-        if (resultStatus != Status.SUCCESS) {\n-            return checkResult;\n-        }\n \n         ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n         if (processDefinition == null) {\n             putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n             return result;\n         } else {\n+\n             return createProcessDefinition(\n                     loginUser,\n-                    projectName,\n+                    targetProject.getName(),\n                     processDefinition.getName() + \"_copy_\" + System.currentTimeMillis(),\n                     processDefinition.getProcessDefinitionJson(),\n                     processDefinition.getDescription(),\n                     processDefinition.getLocations(),\n                     processDefinition.getConnects());\n+\n+        }\n+    }\n+\n+    /**\n+     * batch copy or move process definition\n+     * @param loginUser loginUser\n+     * @param projectName projectName\n+     * @param processDefinitionIds processDefinitionIds\n+     * @param targetProjectId targetProjectId\n+     * @param isCopy isCopy\n+     * @return\n+     */\n+    public Map<String, Object> batchCopyOrMoveProcessDefinition(User loginUser,\n+                                                          String projectName,\n+                                                          String processDefinitionIds,\n+                                                          int targetProjectId, boolean isCopy){\n+        Map<String, Object> result = new HashMap<>(5);\n+        List<String> failedIdList = new ArrayList<>();\n+\n+        if (StringUtils.isEmpty(processDefinitionIds)) {\n+            putMsg(result, Status.PROCESS_DEFINITION_IDS_IS_EMPTY, processDefinitionIds);\n+            return result;\n+        }\n+\n+        //check src project auth\n+        Map<String, Object> checkResult = checkProjectAndAuth(loginUser, projectName);\n+        if (checkResult != null) {\n+            return checkResult;\n+        }\n+\n+        Project targetProject = projectMapper.queryDetailById(targetProjectId);\n+        if(targetProject == null){\n+            putMsg(result, Status.PROJECT_NOT_FOUNT, targetProjectId);\n+            return result;\n+        }\n+\n+        if(!(targetProject.getName()).equals(projectName)){\n+            Map<String, Object> checkTargetProjectResult = checkProjectAndAuth(loginUser, targetProject.getName());\n+            if (checkTargetProjectResult != null) {\n+                return checkTargetProjectResult;\n+            }\n+        }\n+\n+        String[] processDefinitionIdList = processDefinitionIds.split(Constants.COMMA);\n+        if(isCopy){\n+            doBatchCopyProcessDefinition(loginUser, targetProject, failedIdList, processDefinitionIdList);\n+        }else{\n+            doBatchMoveProcessDefinition(targetProject, failedIdList, processDefinitionIdList);\n+        }\n+\n+        checkBatchOperateResult(projectName,targetProject.getName(),result, failedIdList,isCopy);\n+\n+        return result;\n+    }\n+\n+    /**\n+     * batch move process definition\n+     * @param targetProject targetProject\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchMoveProcessDefinition(Project targetProject, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> moveProcessDefinitionResult =\n+                        moveProcessDefinition(Integer.valueOf(processDefinitionId),targetProject);\n+                if (!Status.SUCCESS.equals(moveProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add((String) moveProcessDefinitionResult.get(Constants.MSG));\n+                    logger.error((String) moveProcessDefinitionResult.get(Constants.MSG));\n+                }\n+            } catch (Exception e) {\n+                failedIdList.add(processDefinitionId);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * batch copy process definition\n+     * @param loginUser loginUser\n+     * @param targetProject targetProject\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchCopyProcessDefinition(User loginUser, Project targetProject, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> copyProcessDefinitionResult =\n+                        copyProcessDefinition(loginUser,Integer.valueOf(processDefinitionId),targetProject);\n+                if (!Status.SUCCESS.equals(copyProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add((String) copyProcessDefinitionResult.get(Constants.MSG));\n+                    logger.error((String) copyProcessDefinitionResult.get(Constants.MSG));\n+                }\n+            } catch (Exception e) {\n+                failedIdList.add(processDefinitionId);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * check project and auth\n+     * @param loginUser\n+     * @param projectName\n+     * @return\n+     */\n+    private Map<String, Object> checkProjectAndAuth(User loginUser, String projectName) {\n+        Project project = projectMapper.queryByName(projectName);\n+\n+        //check user access for project\n+        Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);\n+        Status resultStatus = (Status) checkResult.get(Constants.STATUS);\n+\n+        if (resultStatus != Status.SUCCESS) {\n+            return checkResult;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * move process definition\n+     * @param processId processId\n+     * @param targetProject targetProject\n+     * @return move result code\n+     */\n+    private Map<String, Object> moveProcessDefinition(Integer processId,\n+                                                     Project targetProject) {\n+\n+        Map<String, Object> result = new HashMap<>(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MzA4Nw==", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444283087", "createdAt": "2020-06-23T14:47:37Z", "author": {"login": "samz406"}, "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java", "diffHunk": "@@ -224,8 +226,52 @@ public void testCopyProcessDefinition()  throws Exception{\n                 definition.getLocations(),\n                 definition.getConnects())).thenReturn(createProcessResult);\n \n-        Map<String, Object> successRes = processDefinitionService.copyProcessDefinition(loginUser,\n-                \"project_test1\", 46);\n+        Map<String, Object> successRes = processDefinitionService.batchCopyOrMoveProcessDefinition(loginUser,\"project_test1\",\n+                 \"46\",1,true);\n+\n+        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n+    }\n+\n+    @Test\n+    public void testBatchMoveProcessDefinition()  throws Exception{\n+        String projectName = \"project_test1\";\n+        Mockito.when(projectMapper.queryByName(projectName)).thenReturn(getProject(projectName));\n+\n+        String projectName2 = \"project_test2\";\n+        Mockito.when(projectMapper.queryByName(projectName2)).thenReturn(getProject(projectName2));\n+\n+        int targetProjectId = 2;\n+        Mockito.when(projectMapper.queryDetailById(targetProjectId)).thenReturn(getProjectById(targetProjectId));\n+\n+        Project project = getProject(projectName);\n+        Project targetProject = getProjectById(targetProjectId);\n+\n+        User loginUser = new User();\n+        loginUser.setId(-1);\n+        loginUser.setUserType(UserType.GENERAL_USER);\n+\n+        Map<String, Object> result = new HashMap<>(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MzMzNg==", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444283336", "createdAt": "2020-06-23T14:47:57Z", "author": {"login": "samz406"}, "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java", "diffHunk": "@@ -179,16 +181,33 @@ public void testQueryProcessDefinitionById() throws Exception {\n     }\n \n     @Test\n-    public void testCopyProcessDefinition() throws Exception {\n+    public void testBatchCopyProcessDefinition() throws Exception {\n \n         String projectName = \"test\";\n-        int id = 1;\n+        int targetProjectId = 2;\n+        String id = \"1\";\n+\n+        Map<String, Object> result = new HashMap<>(5);\n+        putMsg(result, Status.SUCCESS);\n+\n+        Mockito.when(processDefinitionService.batchCopyOrMoveProcessDefinition(user,projectName,id,targetProjectId,true)).thenReturn(result);\n+        Result response = processDefinitionController.copyOrMoveProcessDefinition(user, projectName,id,targetProjectId,true);\n+\n+        Assert.assertEquals(Status.SUCCESS.getCode(),response.getCode().intValue());\n+    }\n+\n+    @Test\n+    public void testBatchMoveProcessDefinition() throws Exception {\n+\n+        String projectName = \"test\";\n+        int targetProjectId = 2;\n+        String id = \"1\";\n \n         Map<String, Object> result = new HashMap<>(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MDc5Nw==", "bodyText": "i think failedIdList   should store the id, but there added may be a failed description statement not the id", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444290797", "createdAt": "2020-06-23T14:57:24Z", "author": {"login": "samz406"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,38 +294,209 @@ private String getResourceIds(ProcessData processData) {\n     /**\n      * copy process definition\n      *\n-     * @param loginUser   login user\n-     * @param projectName project name\n-     * @param processId   process definition id\n-     * @return copy result code\n+     * @param loginUser loginUser\n+     * @param processId processId\n+     * @param targetProject targetProject\n+     * @return\n+     * @throws JsonProcessingException\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     Project targetProject) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);\n-        Project project = projectMapper.queryByName(projectName);\n-\n-        Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);\n-        Status resultStatus = (Status) checkResult.get(Constants.STATUS);\n-        if (resultStatus != Status.SUCCESS) {\n-            return checkResult;\n-        }\n \n         ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n         if (processDefinition == null) {\n             putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n             return result;\n         } else {\n+\n             return createProcessDefinition(\n                     loginUser,\n-                    projectName,\n+                    targetProject.getName(),\n                     processDefinition.getName() + \"_copy_\" + System.currentTimeMillis(),\n                     processDefinition.getProcessDefinitionJson(),\n                     processDefinition.getDescription(),\n                     processDefinition.getLocations(),\n                     processDefinition.getConnects());\n+\n+        }\n+    }\n+\n+    /**\n+     * batch copy or move process definition\n+     * @param loginUser loginUser\n+     * @param projectName projectName\n+     * @param processDefinitionIds processDefinitionIds\n+     * @param targetProjectId targetProjectId\n+     * @param isCopy isCopy\n+     * @return\n+     */\n+    public Map<String, Object> batchCopyOrMoveProcessDefinition(User loginUser,\n+                                                          String projectName,\n+                                                          String processDefinitionIds,\n+                                                          int targetProjectId, boolean isCopy){\n+        Map<String, Object> result = new HashMap<>(5);\n+        List<String> failedIdList = new ArrayList<>();\n+\n+        if (StringUtils.isEmpty(processDefinitionIds)) {\n+            putMsg(result, Status.PROCESS_DEFINITION_IDS_IS_EMPTY, processDefinitionIds);\n+            return result;\n+        }\n+\n+        //check src project auth\n+        Map<String, Object> checkResult = checkProjectAndAuth(loginUser, projectName);\n+        if (checkResult != null) {\n+            return checkResult;\n+        }\n+\n+        Project targetProject = projectMapper.queryDetailById(targetProjectId);\n+        if(targetProject == null){\n+            putMsg(result, Status.PROJECT_NOT_FOUNT, targetProjectId);\n+            return result;\n+        }\n+\n+        if(!(targetProject.getName()).equals(projectName)){\n+            Map<String, Object> checkTargetProjectResult = checkProjectAndAuth(loginUser, targetProject.getName());\n+            if (checkTargetProjectResult != null) {\n+                return checkTargetProjectResult;\n+            }\n+        }\n+\n+        String[] processDefinitionIdList = processDefinitionIds.split(Constants.COMMA);\n+        if(isCopy){\n+            doBatchCopyProcessDefinition(loginUser, targetProject, failedIdList, processDefinitionIdList);\n+        }else{\n+            doBatchMoveProcessDefinition(targetProject, failedIdList, processDefinitionIdList);\n+        }\n+\n+        checkBatchOperateResult(projectName,targetProject.getName(),result, failedIdList,isCopy);\n+\n+        return result;\n+    }\n+\n+    /**\n+     * batch move process definition\n+     * @param targetProject targetProject\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchMoveProcessDefinition(Project targetProject, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> moveProcessDefinitionResult =\n+                        moveProcessDefinition(Integer.valueOf(processDefinitionId),targetProject);\n+                if (!Status.SUCCESS.equals(moveProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add((String) moveProcessDefinitionResult.get(Constants.MSG));\n+                    logger.error((String) moveProcessDefinitionResult.get(Constants.MSG));\n+                }\n+            } catch (Exception e) {\n+                failedIdList.add(processDefinitionId);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * batch copy process definition\n+     * @param loginUser loginUser\n+     * @param targetProject targetProject\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchCopyProcessDefinition(User loginUser, Project targetProject, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> copyProcessDefinitionResult =\n+                        copyProcessDefinition(loginUser,Integer.valueOf(processDefinitionId),targetProject);\n+                if (!Status.SUCCESS.equals(copyProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add((String) copyProcessDefinitionResult.get(Constants.MSG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5NjU0MA==", "bodyText": "Modify note description", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444296540", "createdAt": "2020-06-23T15:05:24Z", "author": {"login": "samz406"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectService.java", "diffHunk": "@@ -43,7 +43,7 @@\n  *HttpTask./", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwNzgxNQ==", "bodyText": "queryProjectCreatedByUser can define a parameter, you can not userid", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444307815", "createdAt": "2020-06-23T15:21:08Z", "author": {"login": "samz406"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java", "diffHunk": "@@ -226,6 +227,23 @@ public Result queryAuthorizedProject(@ApiIgnore @RequestAttribute(value = Consta\n         return returnDataList(result);\n     }\n \n+    /**\n+     * query user created project\n+     *\n+     * @param loginUser login user\n+     * @return projects which the user create\n+     */\n+    @ApiOperation(value = \"queryProjectCreatedByUser\", notes = \"QUERY_USER_CREATED_PROJECT_NOTES\")\n+\n+    @GetMapping(value = \"/login-user-created-project\")\n+    @ResponseStatus(HttpStatus.OK)\n+    @ApiException(QUERY_USER_CREATED_PROJECT_ERROR)\n+    public Result queryProjectCreatedByUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+        logger.info(\"login user {}, query authorized project by user id: {}.\", StringUtils.replaceNRTtoUnderline(loginUser.getUserName()), StringUtils.replaceNRTtoUnderline(String.valueOf(loginUser.getId())));\n+        Map<String, Object> result = projectService.queryProjectCreatedByUser(loginUser, loginUser.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7187b8eb43e81a3fb85c7a32cebce3ed1dc04ba", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/b7187b8eb43e81a3fb85c7a32cebce3ed1dc04ba", "committedDate": "2020-06-24T06:11:57Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25ae29b12a522eaaf8dcc45c87a4c31be5df038d", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/25ae29b12a522eaaf8dcc45c87a4c31be5df038d", "committedDate": "2020-06-24T11:32:00Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f70cd74f2e84088ae408314f775002bb5439ff2b", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/f70cd74f2e84088ae408314f775002bb5439ff2b", "committedDate": "2020-06-24T11:32:11Z", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ad759204f9c05e828848bd71733c1f8969e783c", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/9ad759204f9c05e828848bd71733c1f8969e783c", "committedDate": "2020-06-24T11:32:56Z", "message": "Merge branch 'batch_copy_or_move_process' of https://github.com/zixi0825/incubator-dolphinscheduler into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d3f32c07b78c170a141a94c76f092ac8f6514b8", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/2d3f32c07b78c170a141a94c76f092ac8f6514b8", "committedDate": "2020-06-24T11:56:48Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e286313fdcf80cbf76ccab964b6a430c0dc29227", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/e286313fdcf80cbf76ccab964b6a430c0dc29227", "committedDate": "2020-06-24T11:59:40Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b495b3b5c843434760009d2ca22b7bf9cf85825e", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/b495b3b5c843434760009d2ca22b7bf9cf85825e", "committedDate": "2020-06-24T11:59:57Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14a2c73b5c4f12e422638c6aba85a9d9fc1fea41", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/14a2c73b5c4f12e422638c6aba85a9d9fc1fea41", "committedDate": "2020-06-28T02:15:45Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d268fd49f39bb2dc2692c838c66fbc4a4302e8c2", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/d268fd49f39bb2dc2692c838c66fbc4a4302e8c2", "committedDate": "2020-06-28T02:16:04Z", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8c3cb9cbf44d47930ba4ebdb8d38d0891521efd", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/c8c3cb9cbf44d47930ba4ebdb8d38d0891521efd", "committedDate": "2020-06-28T02:38:48Z", "message": "batch copy or move process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02c65291300db80c07b2dcfd6582653fa271c4f1", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/02c65291300db80c07b2dcfd6582653fa271c4f1", "committedDate": "2020-06-28T02:38:54Z", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac4f15fc8b736e5da4c16d61b7383485534ffa84", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/ac4f15fc8b736e5da4c16d61b7383485534ffa84", "committedDate": "2020-06-28T02:53:06Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cdc4324fd8ea2c8b216d4d405e01257500e865b", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/7cdc4324fd8ea2c8b216d4d405e01257500e865b", "committedDate": "2020-06-29T03:08:22Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68695b8a1324d487e97290629d50c077dc180381", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/68695b8a1324d487e97290629d50c077dc180381", "committedDate": "2020-06-30T11:47:07Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33e636c37a55bbab5aea3eb75e0ac50529511d04", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/33e636c37a55bbab5aea3eb75e0ac50529511d04", "committedDate": "2020-07-02T12:10:24Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c46ee8035862bb1f6c8b812d6dc69acf940d779", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/0c46ee8035862bb1f6c8b812d6dc69acf940d779", "committedDate": "2020-07-08T08:09:27Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d747553114356a4f7758c4b009831510b215da63", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/d747553114356a4f7758c4b009831510b215da63", "committedDate": "2020-07-10T02:41:05Z", "message": "Roll back the package.json file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b257d1e0a39cffc63d92340f352ea78f55f4a007", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/b257d1e0a39cffc63d92340f352ea78f55f4a007", "committedDate": "2020-07-10T02:41:21Z", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9fee86950d3fd17f560f8647ee5f0cf667f3553", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/d9fee86950d3fd17f560f8647ee5f0cf667f3553", "committedDate": "2020-07-10T02:42:19Z", "message": "Merge branch 'batch_copy_or_move_process' of https://github.com/zixi0825/incubator-dolphinscheduler into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11a5f50dd5c0fc2c0c22baef33ab259c400df795", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/11a5f50dd5c0fc2c0c22baef33ab259c400df795", "committedDate": "2020-07-10T04:52:14Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38b0125bb668dadfc004bc491dc6223c6de9123", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/b38b0125bb668dadfc004bc491dc6223c6de9123", "committedDate": "2020-07-11T06:08:00Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef5478525cd349970fc988e3688a24ce04f17c81", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/ef5478525cd349970fc988e3688a24ce04f17c81", "committedDate": "2020-07-18T02:02:57Z", "message": "fix conflicts in MonitorService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4428dd322a16e1da6410dd2338e800b01cd5b1a", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/a4428dd322a16e1da6410dd2338e800b01cd5b1a", "committedDate": "2020-07-18T02:04:05Z", "message": "Merge branch 'batch_copy_or_move_process' of https://github.com/zixi0825/incubator-dolphinscheduler into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea", "author": {"user": {"login": "zixi0825", "name": "zixi0825"}}, "url": "https://github.com/apache/dolphinscheduler/commit/76cf566b1abc022330ee2ec6b51ccf3b36edd1ea", "committedDate": "2020-07-19T05:59:11Z", "message": "rerun test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MzMyMzEx", "url": "https://github.com/apache/dolphinscheduler/pull/2884#pullrequestreview-456332311", "createdAt": "2020-07-28T06:20:41Z", "commit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NTc5MTk4", "url": "https://github.com/apache/dolphinscheduler/pull/2884#pullrequestreview-456579198", "createdAt": "2020-07-28T12:26:56Z", "commit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjoyNjo1NlrOG4KITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjoyNjo1NlrOG4KITA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzOTQwNA==", "bodyText": "Hi,\nPlease revert this blank.", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461539404", "createdAt": "2020-07-28T12:26:56Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/BaseService.java", "diffHunk": "@@ -32,7 +32,7 @@\n /**\n  * base service\n  */\n-public class BaseService {\n+public class BaseService{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NTc5MjA4", "url": "https://github.com/apache/dolphinscheduler/pull/2884#pullrequestreview-456579208", "createdAt": "2020-07-28T12:26:57Z", "commit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjoyNjo1N1rOG4KIUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjoyNjo1N1rOG4KIUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzOTQxMA==", "bodyText": "Hi,\nPlease revert this blank.", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461539410", "createdAt": "2020-07-28T12:26:57Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/BaseService.java", "diffHunk": "@@ -32,7 +32,7 @@\n /**\n  * base service\n  */\n-public class BaseService {\n+public class BaseService{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NTgwNDQy", "url": "https://github.com/apache/dolphinscheduler/pull/2884#pullrequestreview-456580442", "createdAt": "2020-07-28T12:28:42Z", "commit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjoyODo0MlrOG4KMOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjoyODo0MlrOG4KMOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0MDQxMQ==", "bodyText": "Please revert this changes", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461540411", "createdAt": "2020-07-28T12:28:42Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -1256,7 +1427,7 @@ public void importSubProcess(User loginUser, Project targetProject, ArrayNode js\n      * @return tree view json data\n      * @throws Exception exception\n      */\n-    public Map<String, Object> viewTree(Integer processId, Integer limit) throws Exception {\n+    public Map<String, Object> viewTree(Integer processId, Integer limit) throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "originalPosition": 324}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NjYzODg0", "url": "https://github.com/apache/dolphinscheduler/pull/2884#pullrequestreview-456663884", "createdAt": "2020-07-28T14:03:26Z", "commit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDowMzoyNlrOG4OI0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDowMzoyNlrOG4OI0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYwNTA3Mw==", "bodyText": "Hi,\nWill it be better to split copy and move to two api for single responsibility?", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461605073", "createdAt": "2020-07-28T14:03:26Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java", "diffHunk": "@@ -95,27 +95,39 @@ public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n     }\n \n     /**\n-     * copy process definition\n+     * copy or move process definition\n      *\n      * @param loginUser   login user\n      * @param projectName project name\n-     * @param processId   process definition id\n+     * @param isCopy  isCopy\n+     * @param processDefinitionIds   process definition ids\n+     * @param targetProjectId target project id\n      * @return copy result code\n      */\n-    @ApiOperation(value = \"copyProcessDefinition\", notes= \"COPY_PROCESS_DEFINITION_NOTES\")\n+    @ApiOperation(value = \"copyOrMoveProcessDefinition\", notes= \"COPY_OR_MOVE_PROCESS_DEFINITION_NOTES\")\n     @ApiImplicitParams({\n-            @ApiImplicitParam(name = \"processId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n+            @ApiImplicitParam(name = \"processDefinitionIds\", value = \"PROCESS_DEFINITION_IDS\", required = true, dataType = \"String\", example = \"3,4\"),\n+            @ApiImplicitParam(name = \"targetProjectId\", value = \"TARGET_PROJECT_ID\", required = true, type = \"Integer\"),\n+            @ApiImplicitParam(name = \"isCopy\", value = \"IS_COPY\", required = true, type = \"boolean\")\n     })\n-    @PostMapping(value = \"/copy\")\n+    @PostMapping(value = \"/copy-or-move\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NjY0Mzgw", "url": "https://github.com/apache/dolphinscheduler/pull/2884#pullrequestreview-456664380", "createdAt": "2020-07-28T14:03:55Z", "commit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDowMzo1NVrOG4OKMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDowMzo1NVrOG4OKMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYwNTQyNA==", "bodyText": "Please revert this changes.", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461605424", "createdAt": "2020-07-28T14:03:55Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java", "diffHunk": "@@ -205,9 +217,9 @@ public Result updateProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(RELEASE_PROCESS_DEFINITION_ERROR)\n     public Result releaseProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                            @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                            @RequestParam(value = \"processId\", required = true) int processId,\n-                                            @RequestParam(value = \"releaseState\", required = true) int releaseState) {\n+                                           @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                           @RequestParam(value = \"processId\", required = true) int processId,\n+                                           @RequestParam(value = \"releaseState\", required = true) int releaseState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NjY3Mjg4", "url": "https://github.com/apache/dolphinscheduler/pull/2884#pullrequestreview-456667288", "createdAt": "2020-07-28T14:06:49Z", "commit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDowNjo1MFrOG4OSfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDowNjo1MFrOG4OSfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYwNzU1MA==", "bodyText": "Please revert the changes about blank, thx a lot, it is suggested to add the blank according to the checkstyle.xml, you can configure the checkstyle.xml[1] to your ide.\n[1] https://github.com/apache/incubator-dolphinscheduler/blob/dev/style/checkstyle.xml", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461607550", "createdAt": "2020-07-28T14:06:50Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java", "diffHunk": "@@ -231,8 +243,8 @@ public Result releaseProcessDefinition(@ApiIgnore @RequestAttribute(value = Cons\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR)\n     public Result queryProcessDefinitionById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                              @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                              @RequestParam(\"processId\") Integer processId\n+                                             @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                             @RequestParam(\"processId\") Integer processId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea"}, "originalPosition": 121}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "123e272f980bfceccb49cf12b8e6f37b48bc107a", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/123e272f980bfceccb49cf12b8e6f37b48bc107a", "committedDate": "2020-07-29T02:23:11Z", "message": "revert blank"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a86b4e18dbc3b0ed7fb14ec42b7b22bec01bba99", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/a86b4e18dbc3b0ed7fb14ec42b7b22bec01bba99", "committedDate": "2020-07-29T02:23:25Z", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23897a4ab5cbfad28424aa40da7e4e60551dbcce", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/23897a4ab5cbfad28424aa40da7e4e60551dbcce", "committedDate": "2020-07-29T02:25:11Z", "message": "Merge branch 'batch_copy_or_move_process' of https://github.com/zixi0825/incubator-dolphinscheduler into batch_copy_or_move_process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2153681fc9926e895e19ecd4e92d2d533e2cb62c", "author": {"user": {"login": "dailidong", "name": "lidongdai"}}, "url": "https://github.com/apache/dolphinscheduler/commit/2153681fc9926e895e19ecd4e92d2d533e2cb62c", "committedDate": "2020-08-01T06:55:42Z", "message": "Merge branch 'dev' into batch_copy_or_move_process"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTY1MDc3", "url": "https://github.com/apache/dolphinscheduler/pull/2884#pullrequestreview-459565077", "createdAt": "2020-08-01T08:52:39Z", "commit": {"oid": "2153681fc9926e895e19ecd4e92d2d533e2cb62c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47edf929b3571e7cb7a8e9d8bdbb786f12a77dea", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/47edf929b3571e7cb7a8e9d8bdbb786f12a77dea", "committedDate": "2020-08-11T07:01:08Z", "message": "resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "240b71243edb62a42bab793d73e4f42b7b657f3f", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/240b71243edb62a42bab793d73e4f42b7b657f3f", "committedDate": "2020-08-11T07:19:05Z", "message": "resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8b7c952d26982138a3ae51d1715c43daa9f40a1", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/a8b7c952d26982138a3ae51d1715c43daa9f40a1", "committedDate": "2020-08-11T07:22:42Z", "message": "resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "002b2e613b9f8ba34e67246f720b84cab62f996e", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/002b2e613b9f8ba34e67246f720b84cab62f996e", "committedDate": "2020-08-11T07:37:17Z", "message": "resolve ut error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee4f85ef6923df621912ef06178c18b12a39c6b7", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/ee4f85ef6923df621912ef06178c18b12a39c6b7", "committedDate": "2020-08-11T08:04:51Z", "message": "resolve sonar error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTg1NjUy", "url": "https://github.com/apache/dolphinscheduler/pull/2884#pullrequestreview-465585652", "createdAt": "2020-08-12T04:38:56Z", "commit": {"oid": "ee4f85ef6923df621912ef06178c18b12a39c6b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1987, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}