{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NjEwMzg5", "number": 1974, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDoxNDoyMFrODgtZxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjoyNDozM1rODhxsiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjI0OTAxOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/SqoopTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDoxNDoyMFrOFrD3VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDoxNDoyMFrOFrD3VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5NjQwNA==", "bodyText": "sqoop tasks will be converted to mapreduce tasks, managed by yarn\uff0c SqoopTask class need extends AbstractYarnTask not ShellTask", "url": "https://github.com/apache/dolphinscheduler/pull/1974#discussion_r380696404", "createdAt": "2020-02-18T14:14:20Z", "author": {"login": "Eights-Li"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/SqoopTask.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.server.worker.task.sqoop;\n+\n+import com.alibaba.fastjson.JSON;\n+import org.apache.dolphinscheduler.common.task.shell.ShellParameters;\n+import org.apache.dolphinscheduler.common.task.sqoop.SqoopParameters;\n+import org.apache.dolphinscheduler.server.worker.task.TaskProps;\n+import org.apache.dolphinscheduler.server.worker.task.shell.ShellTask;\n+import org.apache.dolphinscheduler.server.worker.task.sqoop.generator.SqoopJobGenerator;\n+import org.slf4j.Logger;\n+\n+/**\n+ * sqoop task extends the shell task\n+ */\n+public class SqoopTask extends ShellTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd486569038ef86bda3798a72197e9c9ac62437c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzQzMjQ0OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/task/SqoopParameterEntityTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjoyMDozMFrOFssu1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjoyMDozMFrOFssu1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQxNDU1MQ==", "bodyText": "remove the author and time", "url": "https://github.com/apache/dolphinscheduler/pull/1974#discussion_r382414551", "createdAt": "2020-02-21T06:20:30Z", "author": {"login": "Eights-Li"}, "path": "dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/task/SqoopParameterEntityTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.common.task;\n+\n+import org.apache.dolphinscheduler.common.task.sqoop.SqoopParameters;\n+import org.apache.dolphinscheduler.common.task.sqoop.sources.SourceHdfsParameter;\n+import org.apache.dolphinscheduler.common.task.sqoop.sources.SourceHiveParameter;\n+import org.apache.dolphinscheduler.common.task.sqoop.sources.SourceMysqlParameter;\n+import org.apache.dolphinscheduler.common.task.sqoop.targets.TargetHdfsParameter;\n+import org.apache.dolphinscheduler.common.task.sqoop.targets.TargetHiveParameter;\n+import org.apache.dolphinscheduler.common.task.sqoop.targets.TargetMysqlParameter;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @author simfo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca0d6016956f18019689d4fac73f98e53e55c87"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzQzODE3OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/generator/sources/MysqlSourceGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjoyNDozM1rOFssyTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjoyNDozM1rOFssyTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQxNTQzOQ==", "bodyText": "remove this comment out code", "url": "https://github.com/apache/dolphinscheduler/pull/1974#discussion_r382415439", "createdAt": "2020-02-21T06:24:33Z", "author": {"login": "Eights-Li"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/generator/sources/MysqlSourceGenerator.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.server.worker.task.sqoop.generator.sources;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.dolphinscheduler.common.enums.QueryType;\n+import org.apache.dolphinscheduler.common.process.Property;\n+import org.apache.dolphinscheduler.common.task.sqoop.SqoopParameters;\n+import org.apache.dolphinscheduler.common.task.sqoop.sources.SourceMysqlParameter;\n+import org.apache.dolphinscheduler.common.utils.JSONUtils;\n+import org.apache.dolphinscheduler.dao.datasource.BaseDataSource;\n+import org.apache.dolphinscheduler.dao.datasource.DataSourceFactory;\n+import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;\n+import org.apache.dolphinscheduler.dao.entity.DataSource;\n+import org.apache.dolphinscheduler.server.worker.task.sqoop.generator.ISourceGenerator;\n+import org.apache.dolphinscheduler.service.process.ProcessService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+\n+/**\n+ * mysql source generator\n+ */\n+public class MysqlSourceGenerator implements ISourceGenerator {\n+\n+    private Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    @Override\n+    public String generate(SqoopParameters sqoopParameters) {\n+        StringBuilder result = new StringBuilder();\n+        try {\n+            SourceMysqlParameter sourceMysqlParameter\n+                    = JSONUtils.parseObject(sqoopParameters.getSourceParams(),SourceMysqlParameter.class);\n+\n+            if(sourceMysqlParameter != null){\n+                ProcessService processService = SpringApplicationContext.getBean(ProcessService.class);\n+                DataSource dataSource= processService.findDataSourceById(sourceMysqlParameter.getSrcDatasource());\n+                BaseDataSource baseDataSource = DataSourceFactory.getDatasource(dataSource.getType(),\n+                        dataSource.getConnectionParams());\n+                if(baseDataSource != null){\n+                    result.append(\" --connect \")\n+                            .append(baseDataSource.getJdbcUrl())\n+                            .append(\" --username \")\n+                            .append(baseDataSource.getUser())\n+                            .append(\" --password \")\n+                            .append(baseDataSource.getPassword());\n+\n+                    if(sourceMysqlParameter.getSrcQueryType() == QueryType.FORM.ordinal()){\n+                        if(StringUtils.isNotEmpty(sourceMysqlParameter.getSrcTable())){\n+                            result.append(\" --table \").append(sourceMysqlParameter.getSrcTable());\n+                        }\n+\n+                        if(StringUtils.isNotEmpty(sourceMysqlParameter.getSrcColumns())){\n+                            result.append(\" --columns \").append(sourceMysqlParameter.getSrcColumns());\n+                        }\n+\n+//                        StringBuilder srcWhere = new StringBuilder();\n+//                        if(sourceMysqlParameter.getSrcConditionList().size()>0){\n+//                            List<Property> items = sourceMysqlParameter.getSrcConditionList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca0d6016956f18019689d4fac73f98e53e55c87"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3448, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}