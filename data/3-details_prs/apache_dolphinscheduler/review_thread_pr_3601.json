{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNzk3Njg2", "number": 3601, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDowNjo0OFrOEneIbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNTozMjowM1rOEngRvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODIzNTk2OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/DolphinPluginClassLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDowNjo0OFrOHYFIqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNjo1NTozMFrOHYeT6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAxMjAwOQ==", "bodyText": "Is this class more suitable under the SPI module? In my opinion, it belongs to  commons class", "url": "https://github.com/apache/dolphinscheduler/pull/3601#discussion_r495012009", "createdAt": "2020-09-25T14:06:48Z", "author": {"login": "CalvinKirs"}, "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/DolphinPluginClassLoader.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.alert.plugin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+\n+class DolphinPluginClassLoader\n+        extends URLClassLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5646bea4708bb97bd4b5f56832d5551b3051df9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNDQ4OA==", "bodyText": "In this feature I put it in AlertServer.\nI will move it to dolphinscheduler-common at the next feature.", "url": "https://github.com/apache/dolphinscheduler/pull/3601#discussion_r495424488", "createdAt": "2020-09-26T06:55:30Z", "author": {"login": "gaojun2048"}, "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/DolphinPluginClassLoader.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.alert.plugin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+\n+class DolphinPluginClassLoader\n+        extends URLClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAxMjAwOQ=="}, "originalCommit": {"oid": "c5646bea4708bb97bd4b5f56832d5551b3051df9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODI1ODQwOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/DolphinPluginClassLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDoxMToxMlrOHYFWBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNzoxNjo0OFrOHYebAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAxNTQyOQ==", "bodyText": "Do we have a better way to determine the current Java version? OSUtils may have a similar method.", "url": "https://github.com/apache/dolphinscheduler/pull/3601#discussion_r495015429", "createdAt": "2020-09-25T14:11:12Z", "author": {"login": "CalvinKirs"}, "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/DolphinPluginClassLoader.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.alert.plugin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+\n+class DolphinPluginClassLoader\n+        extends URLClassLoader {\n+    private static final ClassLoader PLATFORM_CLASS_LOADER = findPlatformClassLoader();\n+\n+    private final ClassLoader spiClassLoader;\n+    private final List<String> spiPackages;\n+    private final List<String> spiResources;\n+\n+    public DolphinPluginClassLoader(\n+            List<URL> urls,\n+            ClassLoader spiClassLoader,\n+            Iterable<String> spiPackages) {\n+        this(urls,\n+                spiClassLoader,\n+                spiPackages,\n+                Iterables.transform(spiPackages, DolphinPluginClassLoader::classNameToResource));\n+    }\n+\n+    private DolphinPluginClassLoader(\n+            List<URL> urls,\n+            ClassLoader spiClassLoader,\n+            Iterable<String> spiPackages,\n+            Iterable<String> spiResources) {\n+        // plugins should not have access to the system (application) class loader\n+        super(urls.toArray(new URL[urls.size()]), PLATFORM_CLASS_LOADER);\n+        this.spiClassLoader = requireNonNull(spiClassLoader, \"spiClassLoader is null\");\n+        this.spiPackages = ImmutableList.copyOf(spiPackages);\n+        this.spiResources = ImmutableList.copyOf(spiResources);\n+    }\n+\n+    @Override\n+    protected Class<?> loadClass(String name, boolean resolve)\n+            throws ClassNotFoundException {\n+        // grab the magic lock\n+        synchronized (getClassLoadingLock(name)) {\n+            // Check if class is in the loaded classes cache\n+            Class<?> cachedClass = findLoadedClass(name);\n+            if (cachedClass != null) {\n+                return resolveClass(cachedClass, resolve);\n+            }\n+\n+            // If this is an SPI class, only check SPI class loader\n+            if (isSpiClass(name)) {\n+                return resolveClass(spiClassLoader.loadClass(name), resolve);\n+            }\n+\n+            // Look for class locally\n+            return super.loadClass(name, resolve);\n+        }\n+    }\n+\n+    private Class<?> resolveClass(Class<?> clazz, boolean resolve) {\n+        if (resolve) {\n+            resolveClass(clazz);\n+        }\n+        return clazz;\n+    }\n+\n+    @Override\n+    public URL getResource(String name) {\n+        // If this is an SPI resource, only check SPI class loader\n+        if (isSpiResource(name)) {\n+            return spiClassLoader.getResource(name);\n+        }\n+\n+        // Look for resource locally\n+        return super.getResource(name);\n+    }\n+\n+    @Override\n+    public Enumeration<URL> getResources(String name)\n+            throws IOException {\n+        // If this is an SPI resource, use SPI resources\n+        if (isSpiClass(name)) {\n+            return spiClassLoader.getResources(name);\n+        }\n+\n+        // Use local resources\n+        return super.getResources(name);\n+    }\n+\n+    private boolean isSpiClass(String name) {\n+        return spiPackages.stream().anyMatch(name::startsWith);\n+    }\n+\n+    private boolean isSpiResource(String name) {\n+        return spiResources.stream().anyMatch(name::startsWith);\n+    }\n+\n+    private static String classNameToResource(String className) {\n+        return className.replace('.', '/');\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    private static ClassLoader findPlatformClassLoader() {\n+        try {\n+            // use platform class loader on Java 9\n+            Method method = ClassLoader.class.getMethod(\"getPlatformClassLoader\");\n+            return (ClassLoader) method.invoke(null);\n+        } catch (NoSuchMethodException ignored) {\n+            // use null class loader on Java 8\n+            return null;\n+        } catch (IllegalAccessException | InvocationTargetException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5646bea4708bb97bd4b5f56832d5551b3051df9"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNjMwNA==", "bodyText": "I can not found the method to get the current Java version in OSUtils class\uff0c You can add it in your pr.\nThanks", "url": "https://github.com/apache/dolphinscheduler/pull/3601#discussion_r495426304", "createdAt": "2020-09-26T07:16:48Z", "author": {"login": "gaojun2048"}, "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/DolphinPluginClassLoader.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.alert.plugin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+\n+class DolphinPluginClassLoader\n+        extends URLClassLoader {\n+    private static final ClassLoader PLATFORM_CLASS_LOADER = findPlatformClassLoader();\n+\n+    private final ClassLoader spiClassLoader;\n+    private final List<String> spiPackages;\n+    private final List<String> spiResources;\n+\n+    public DolphinPluginClassLoader(\n+            List<URL> urls,\n+            ClassLoader spiClassLoader,\n+            Iterable<String> spiPackages) {\n+        this(urls,\n+                spiClassLoader,\n+                spiPackages,\n+                Iterables.transform(spiPackages, DolphinPluginClassLoader::classNameToResource));\n+    }\n+\n+    private DolphinPluginClassLoader(\n+            List<URL> urls,\n+            ClassLoader spiClassLoader,\n+            Iterable<String> spiPackages,\n+            Iterable<String> spiResources) {\n+        // plugins should not have access to the system (application) class loader\n+        super(urls.toArray(new URL[urls.size()]), PLATFORM_CLASS_LOADER);\n+        this.spiClassLoader = requireNonNull(spiClassLoader, \"spiClassLoader is null\");\n+        this.spiPackages = ImmutableList.copyOf(spiPackages);\n+        this.spiResources = ImmutableList.copyOf(spiResources);\n+    }\n+\n+    @Override\n+    protected Class<?> loadClass(String name, boolean resolve)\n+            throws ClassNotFoundException {\n+        // grab the magic lock\n+        synchronized (getClassLoadingLock(name)) {\n+            // Check if class is in the loaded classes cache\n+            Class<?> cachedClass = findLoadedClass(name);\n+            if (cachedClass != null) {\n+                return resolveClass(cachedClass, resolve);\n+            }\n+\n+            // If this is an SPI class, only check SPI class loader\n+            if (isSpiClass(name)) {\n+                return resolveClass(spiClassLoader.loadClass(name), resolve);\n+            }\n+\n+            // Look for class locally\n+            return super.loadClass(name, resolve);\n+        }\n+    }\n+\n+    private Class<?> resolveClass(Class<?> clazz, boolean resolve) {\n+        if (resolve) {\n+            resolveClass(clazz);\n+        }\n+        return clazz;\n+    }\n+\n+    @Override\n+    public URL getResource(String name) {\n+        // If this is an SPI resource, only check SPI class loader\n+        if (isSpiResource(name)) {\n+            return spiClassLoader.getResource(name);\n+        }\n+\n+        // Look for resource locally\n+        return super.getResource(name);\n+    }\n+\n+    @Override\n+    public Enumeration<URL> getResources(String name)\n+            throws IOException {\n+        // If this is an SPI resource, use SPI resources\n+        if (isSpiClass(name)) {\n+            return spiClassLoader.getResources(name);\n+        }\n+\n+        // Use local resources\n+        return super.getResources(name);\n+    }\n+\n+    private boolean isSpiClass(String name) {\n+        return spiPackages.stream().anyMatch(name::startsWith);\n+    }\n+\n+    private boolean isSpiResource(String name) {\n+        return spiResources.stream().anyMatch(name::startsWith);\n+    }\n+\n+    private static String classNameToResource(String className) {\n+        return className.replace('.', '/');\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    private static ClassLoader findPlatformClassLoader() {\n+        try {\n+            // use platform class loader on Java 9\n+            Method method = ClassLoader.class.getMethod(\"getPlatformClassLoader\");\n+            return (ClassLoader) method.invoke(null);\n+        } catch (NoSuchMethodException ignored) {\n+            // use null class loader on Java 8\n+            return null;\n+        } catch (IllegalAccessException | InvocationTargetException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAxNTQyOQ=="}, "originalCommit": {"oid": "c5646bea4708bb97bd4b5f56832d5551b3051df9"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODU4NzUwOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNTozMjowM1rOHYIiVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNzoxMzowMVrOHYeZtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA2NzczNQ==", "bodyText": "Will there be concurrency here? It looks like HashMap is enough", "url": "https://github.com/apache/dolphinscheduler/pull/3601#discussion_r495067735", "createdAt": "2020-09-25T15:32:03Z", "author": {"login": "CalvinKirs"}, "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.alert.plugin;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import org.apache.dolphinscheduler.dao.entity.PluginDefine;\n+import org.apache.dolphinscheduler.spi.DolphinSchedulerPlugin;\n+import org.apache.dolphinscheduler.spi.alert.AlertChannel;\n+import org.apache.dolphinscheduler.spi.alert.AlertChannelFactory;\n+import org.apache.dolphinscheduler.spi.classloader.ThreadContextClassLoader;\n+import org.apache.dolphinscheduler.spi.params.PluginParamsTransfer;\n+import org.apache.dolphinscheduler.spi.params.base.PluginParams;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * load the configured alert plugin and manager them\n+ */\n+public class AlertPluginManager extends AbstractDolphinPluginManager {\n+    private static final Logger logger = LoggerFactory.getLogger(AlertPluginManager.class);\n+\n+    private final Map<String, AlertChannelFactory> alertChannelFactoryMap = new ConcurrentHashMap<>();\n+    private final Map<String, AlertChannel> alertChannelMap = new ConcurrentHashMap<>();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5646bea4708bb97bd4b5f56832d5551b3051df9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNTk3Mg==", "bodyText": "I can\u2019t predict whether there will be multi-threaded plug-in loading in the future. In the case of multi-threaded loading, alertChannelFactoryMap must be thread-safe, because alertChannelFactoryMap must be shared by all threads.", "url": "https://github.com/apache/dolphinscheduler/pull/3601#discussion_r495425972", "createdAt": "2020-09-26T07:13:01Z", "author": {"login": "gaojun2048"}, "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.alert.plugin;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import org.apache.dolphinscheduler.dao.entity.PluginDefine;\n+import org.apache.dolphinscheduler.spi.DolphinSchedulerPlugin;\n+import org.apache.dolphinscheduler.spi.alert.AlertChannel;\n+import org.apache.dolphinscheduler.spi.alert.AlertChannelFactory;\n+import org.apache.dolphinscheduler.spi.classloader.ThreadContextClassLoader;\n+import org.apache.dolphinscheduler.spi.params.PluginParamsTransfer;\n+import org.apache.dolphinscheduler.spi.params.base.PluginParams;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * load the configured alert plugin and manager them\n+ */\n+public class AlertPluginManager extends AbstractDolphinPluginManager {\n+    private static final Logger logger = LoggerFactory.getLogger(AlertPluginManager.class);\n+\n+    private final Map<String, AlertChannelFactory> alertChannelFactoryMap = new ConcurrentHashMap<>();\n+    private final Map<String, AlertChannel> alertChannelMap = new ConcurrentHashMap<>();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA2NzczNQ=="}, "originalCommit": {"oid": "c5646bea4708bb97bd4b5f56832d5551b3051df9"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3339, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}