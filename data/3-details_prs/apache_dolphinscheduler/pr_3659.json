{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NzY0MDUy", "number": 3659, "title": "[Feature]Add Python task \"task variable / result transfer\" implementation", "bodyText": "Content of PR:\nAdded VarPool:\nIntroduction: VarPool is similar to a global variable whose value can be dynamically modified. Variables are passed between different nodes in the task flow.\nDifference: Global variables are constant attributes of the task flow, and currently there is no interface that can be dynamically modified.\nPrecautions:\nNeed to add the field var_pool in the t_ds_task_instance and t_ds_process_instance tables in the DB, the type is longtext.\nHow to use:(Currently only supports Python nodes)\nValue: Just declare the variable name at LocalParams of the node.\nModification: ${setShareVar(variable name, value)} in the script.\nExample:\nNode a1:\n\tScript:\n\t\tvalue = 600 + 60\n\t\t${setShareVar(${shareVar1},value+6)}\n\t\t\nNode a2:\n\tCustom parameters:\n\t\tshareVar1:\"default\"\n\tScript:\n\t\tprint(\"shareVar1:\",${shareVar1})\n\toperation result:\n\t\t\"shareVar1:666\"\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nPR\u7684\u5185\u5bb9\uff1a\n\u65b0\u589eVarPool\uff1a\n\u4f5c\u7528\uff1aVarPool\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u503c\u53ef\u52a8\u6001\u4fee\u6539\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u5728\u4efb\u52a1\u6d41\u4e0b\u4e0d\u540c\u8282\u70b9\u4e4b\u95f4\u4f20\u9012\u53d8\u91cf\u3002\n\u533a\u522b\uff1a\u5168\u5c40\u53d8\u91cf\u4e3a\u4efb\u52a1\u6d41\u7684\u5e38\u91cf\u5c5e\u6027\uff0c\u76ee\u524d\u6ca1\u6709\u63a5\u53e3\u53ef\u4ee5\u52a8\u6001\u4fee\u6539\u3002\n\u6ce8\u610f\u4e8b\u9879\uff1a\n\u9700\u8981\u5728DB\u4e2d\u7684t_ds_task_instance\u548ct_ds_process_instance\u8868\u4e2d\u589e\u52a0\u5b57\u6bb5var_pool\uff0c\u7c7b\u578b\u4e3alongtext\u3002\n\u4f7f\u7528\uff1a\uff08\u76ee\u524d\u4ec5\u652f\u6301Python\u8282\u70b9\uff09\n\u53d6\u503c\uff1a\u53ea\u9700\u5728\u8282\u70b9\u7684LocalParams\u5904\u7533\u660e\u53d8\u91cf\u540d\u3002\n\u4fee\u6539\uff1a\u5728\u811a\u672c\u4e2d ${setShareVar(\u53d8\u91cf\u540d,\u503c)}\u3002\n\u793a\u4f8b\uff1a\n\u8282\u70b9a1\uff1a\n\t\u811a\u672c\uff1a\n\t\tvalue = 600 + 60\n\t\t${setShareVar(${shareVar1},value+6)}\n\n\u8282\u70b9a2\uff1a\n\t\u81ea\u5b9a\u4e49\u53c2\u6570\uff1a\n\t\tshareVar1:\"default\"\n\t\u811a\u672c\uff1a\n\t\tprint(\"shareVar1:\",${shareVar1})\n\t\u8fd0\u884c\u7ed3\u679c\uff1a\n\t\tshareVar1:666\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nNode a1:\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nNode a2:\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nresult:\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nProcess:", "createdAt": "2020-09-03T16:56:17Z", "url": "https://github.com/apache/dolphinscheduler/pull/3659", "merged": true, "mergeCommit": {"oid": "3b581455fc572c01c93a9d5ecfb955a966a20263"}, "closed": true, "closedAt": "2020-09-25T05:20:43Z", "author": {"login": "guyinyou"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFTkrfgH2gAyNDc4NzY0MDUyOmZiMmFhOTQyMmIxOWI5YmFjM2EzMmIwODAwMDhhNDNjM2NmNzY2Zjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiKqp1AFqTU0MjYxNjAzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fb2aa9422b19b9bac3a32b080008a43c3cf766f9", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/fb2aa9422b19b9bac3a32b080008a43c3cf766f9", "committedDate": "2020-09-03T16:55:07Z", "message": "\u589e\u52a0Python Task\u7684\u201c\u4efb\u52a1\u53d8\u91cf/\u7ed3\u679c\u4f20\u9012\u201d\u5b9e\u73b0\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57d541e66e45d58ac8770044f54839dcfb8d3326", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/57d541e66e45d58ac8770044f54839dcfb8d3326", "committedDate": "2020-09-07T13:44:30Z", "message": "add two files license\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0816f1e927a714121b363854dbf50898b73cae22", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/0816f1e927a714121b363854dbf50898b73cae22", "committedDate": "2020-09-07T14:12:22Z", "message": "fix 'server/worker/task/AbstractCommandExecutor.java' code style\nSigned-off-by: 1941815847Cy4 <1941815847cy4@kuaishou.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ff00c01b5ae487c00d3ec460ab919280642fe1", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/f3ff00c01b5ae487c00d3ec460ab919280642fe1", "committedDate": "2020-09-09T07:27:25Z", "message": "update DB\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef2551190ecd4837bee85782bb9542c723be07bc", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/ef2551190ecd4837bee85782bb9542c723be07bc", "committedDate": "2020-09-09T10:51:29Z", "message": "update DB -- 2\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05bc0a35390c11d93270395d173f70d59b9861fe", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/05bc0a35390c11d93270395d173f70d59b9861fe", "committedDate": "2020-09-10T17:09:27Z", "message": "fix codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1d794fdf1c34920b925c8f69158fbce63da0c1", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/0e1d794fdf1c34920b925c8f69158fbce63da0c1", "committedDate": "2020-09-10T17:16:48Z", "message": "fix codestyle\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "095b483be4b2e7beb003362d058f24c44bb6effa", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/095b483be4b2e7beb003362d058f24c44bb6effa", "committedDate": "2020-09-11T04:48:32Z", "message": "fix codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6ea62eb720e111b451ef5e211d477655fdaf8c0", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/e6ea62eb720e111b451ef5e211d477655fdaf8c0", "committedDate": "2020-09-11T09:06:23Z", "message": "fix codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e30a694be4279ccca2273fef14f5e6ab3054abb0", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/e30a694be4279ccca2273fef14f5e6ab3054abb0", "committedDate": "2020-09-11T09:57:53Z", "message": "fix codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09d8f93288a217f75c17965169b36b054c62af2d", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/09d8f93288a217f75c17965169b36b054c62af2d", "committedDate": "2020-09-13T16:05:05Z", "message": "add VarPoolUtils Test\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ae9650080673a2650598c00107bd476ebffd036", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/4ae9650080673a2650598c00107bd476ebffd036", "committedDate": "2020-09-13T16:18:32Z", "message": "fix VarPoolUtilsTest codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26712136a08dc4e5f8f1641e5af95d55f3758cdc", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/26712136a08dc4e5f8f1641e5af95d55f3758cdc", "committedDate": "2020-09-13T16:28:34Z", "message": "fix VarPoolUtilsTest codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a144389494c763bede0708070bc2c27d47ff1a22", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/a144389494c763bede0708070bc2c27d47ff1a22", "committedDate": "2020-09-13T16:31:17Z", "message": "fix VarPoolUtilsTest codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45f5a110aa23c86d394226fb17dc1259ff603d7f", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/45f5a110aa23c86d394226fb17dc1259ff603d7f", "committedDate": "2020-09-13T16:37:54Z", "message": "fix VarPoolUtilsTest codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2250460b7f8ada819cc72e8aabbabbf465831da4", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/2250460b7f8ada819cc72e8aabbabbf465831da4", "committedDate": "2020-09-13T16:54:27Z", "message": "fix VarPoolUtilsTest codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4318d1055d9c7c6ee76e30998485d17e8f294bc", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/d4318d1055d9c7c6ee76e30998485d17e8f294bc", "committedDate": "2020-09-14T09:17:19Z", "message": "add test config for VarPoolUtilsTest\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTkzMDU2", "url": "https://github.com/apache/dolphinscheduler/pull/3659#pullrequestreview-487593056", "createdAt": "2020-09-14T09:50:00Z", "commit": {"oid": "d4318d1055d9c7c6ee76e30998485d17e8f294bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MDowMFrOHRMNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MDowMFrOHRMNZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4Nzg3OQ==", "bodyText": "You need to use Assert to determine whether the result is correct, not just print logs.", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r487787879", "createdAt": "2020-09-14T09:50:00Z", "author": {"login": "simon824"}, "path": "dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.utils;\n+\n+import org.apache.dolphinscheduler.common.model.TaskNode;\n+import org.apache.dolphinscheduler.common.utils.JSONUtils;\n+import org.apache.dolphinscheduler.common.utils.VarPoolUtils;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class VarPoolUtilsTest {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(VarPoolUtils.class);\n+    \n+    @Test\n+    public void testSetTaskNodeLocalParams() {\n+        String taskJson = \"{\\\"conditionResult\\\":\\\"{\\\\\\\"successNode\\\\\\\":[\\\\\\\"\\\\\\\"],\\\\\\\"failedNode\\\\\\\":[\\\\\\\"\\\\\\\"]}\\\",\"\n+            + \"\\\"conditionsTask\\\":false,\\\"depList\\\":[],\\\"dependence\\\":\\\"{}\\\",\\\"forbidden\\\":false,\\\"id\\\":\\\"tasks-75298\\\",\\\"maxRetryTimes\\\":0,\\\"name\\\":\\\"a1\\\",\"\n+            + \"\\\"params\\\":\\\"{\\\\\\\"rawScript\\\\\\\":\\\\\\\"print(\\\\\\\\\\\\\\\"this is python task \\\\\\\\\\\\\\\",${p0})\\\\\\\",\"\n+            + \"\\\\\\\"localParams\\\\\\\":[{\\\\\\\"prop\\\\\\\":\\\\\\\"p1\\\\\\\",\\\\\\\"direct\\\\\\\":\\\\\\\"IN\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"VARCHAR\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"1\\\\\\\"}],\"\n+            + \"\\\\\\\"resourceList\\\\\\\":[]}\\\",\\\"preTasks\\\":\\\"[]\\\",\\\"retryInterval\\\":1,\\\"runFlag\\\":\\\"NORMAL\\\",\\\"taskInstancePriority\\\":\\\"MEDIUM\\\",\"\n+            + \"\\\"taskTimeoutParameter\\\":{\\\"enable\\\":false,\\\"interval\\\":0},\\\"timeout\\\":\\\"{\\\\\\\"enable\\\\\\\":false,\\\\\\\"strategy\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\"\n+            + \"\\\"type\\\":\\\"PYTHON\\\",\\\"workerGroup\\\":\\\"default\\\"}\";\n+        TaskNode taskNode = JSONUtils.parseObject(taskJson, TaskNode.class);\n+        \n+        VarPoolUtils.setTaskNodeLocalParams(taskNode, \"p1\", \"test1\");\n+        logger.info(JSONUtils.toJsonString(taskNode));\n+        \n+        ConcurrentHashMap<String, Object> propToValue = new ConcurrentHashMap<String, Object>();\n+        propToValue.put(\"p1\", \"test2\");\n+        \n+        VarPoolUtils.setTaskNodeLocalParams(taskNode, propToValue);\n+        logger.info(JSONUtils.toJsonString(taskNode));\n+    }\n+    \n+    @Test\n+    public void testConvertVarPoolToMap() throws Exception {\n+        String varPool = \"p1,66$guyinyou$p2,69$guyinyou$\";\n+        ConcurrentHashMap<String, Object> propToValue = new ConcurrentHashMap<String, Object>();\n+        VarPoolUtils.convertVarPoolToMap(propToValue, varPool);\n+        logger.info(propToValue.toString());\n+    }\n+    \n+    @Test\n+    public void testConvertPythonScriptPlaceholders() throws Exception {\n+        String rawScript = \"print(${p1});\\n${setShareVar(${p1},3)};\\n${setShareVar(${p2},4)};\";\n+        rawScript = VarPoolUtils.convertPythonScriptPlaceholders(rawScript);\n+        logger.info(rawScript);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4318d1055d9c7c6ee76e30998485d17e8f294bc"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fccd13fb6bb05f40993c9a8e4781420bbc266bb", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/2fccd13fb6bb05f40993c9a8e4781420bbc266bb", "committedDate": "2020-09-14T10:56:23Z", "message": "fix unit test\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5145e1bc8ea4eddf1179fbd46d0ad270f86cb051", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/5145e1bc8ea4eddf1179fbd46d0ad270f86cb051", "committedDate": "2020-09-14T11:01:16Z", "message": "fix codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c11264eb12e3c9bc51c41b03aef004739d48d48", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/1c11264eb12e3c9bc51c41b03aef004739d48d48", "committedDate": "2020-09-15T06:03:40Z", "message": "fix VarPoolUtilsTest.java\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4Mjc4Mjk2", "url": "https://github.com/apache/dolphinscheduler/pull/3659#pullrequestreview-488278296", "createdAt": "2020-09-15T02:25:55Z", "commit": {"oid": "5145e1bc8ea4eddf1179fbd46d0ad270f86cb051"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjoyNTo1NVrOHRuJ9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMTozNTozMVrOHSc4Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NDA1Mg==", "bodyText": "please rename VarPoolUtils to VarPoolUtilsTest", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r488344052", "createdAt": "2020-09-15T02:25:55Z", "author": {"login": "simon824"}, "path": "dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.utils;\n+\n+import org.apache.dolphinscheduler.common.model.TaskNode;\n+import org.apache.dolphinscheduler.common.utils.JSONUtils;\n+import org.apache.dolphinscheduler.common.utils.VarPoolUtils;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class VarPoolUtilsTest {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(VarPoolUtils.class);\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5145e1bc8ea4eddf1179fbd46d0ad270f86cb051"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwOTQ2OA==", "bodyText": "Please replace with another separator here, don't use your name.", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489109468", "createdAt": "2020-09-16T01:35:16Z", "author": {"login": "simon824"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java", "diffHunk": "@@ -347,8 +351,13 @@ public void run() {\n                     long lastFlushTime = System.currentTimeMillis();\n \n                     while ((line = inReader.readLine()) != null) {\n-                        logBuffer.add(line);\n-                        lastFlushTime = flush(lastFlushTime);\n+                        if (line.startsWith(\"${setValue(\")) {\n+                            varPool.append(line.substring(\"${setValue(\".length(), line.length() - 2));\n+                            varPool.append(\"$guyinyou$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c11264eb12e3c9bc51c41b03aef004739d48d48"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwOTUzNQ==", "bodyText": "Please replace with another separator here, don't use your name.", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489109535", "createdAt": "2020-09-16T01:35:31Z", "author": {"login": "simon824"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/VarPoolUtils.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.common.utils;\n+\n+import org.apache.dolphinscheduler.common.model.TaskNode;\n+import org.apache.dolphinscheduler.common.task.TaskParams;\n+\n+import java.text.ParseException;\n+import java.util.Map;\n+\n+public class VarPoolUtils {\n+    /**\n+     * getTaskNodeLocalParam\n+     * @param taskNode taskNode\n+     * @param prop prop\n+     * @return localParamForProp\n+     */\n+    public static Object getTaskNodeLocalParam(TaskNode taskNode, String prop) {\n+        String taskParamsJson = taskNode.getParams();\n+        TaskParams taskParams = JSONUtils.parseObject(taskParamsJson, TaskParams.class);\n+        if (taskParams == null) {\n+            return null;\n+        }\n+        return taskParams.getLocalParamValue(prop);\n+    }\n+    \n+    /**\n+     * setTaskNodeLocalParams\n+     * @param taskNode taskNode\n+     * @param prop LocalParamName\n+     * @param value LocalParamValue\n+     */\n+    public static void setTaskNodeLocalParams(TaskNode taskNode, String prop, Object value) {\n+        String taskParamsJson = taskNode.getParams();\n+        TaskParams taskParams = JSONUtils.parseObject(taskParamsJson, TaskParams.class);\n+        if (taskParams == null) {\n+            return;\n+        }\n+        taskParams.setLocalParamValue(prop, value);\n+        taskNode.setParams(JSONUtils.toJsonString(taskParams));\n+    }\n+\n+    /**\n+     * setTaskNodeLocalParams\n+     * @param taskNode taskNode\n+     * @param propToValue propToValue\n+     */\n+    public static void setTaskNodeLocalParams(TaskNode taskNode, Map<String, Object> propToValue) {\n+        String taskParamsJson = taskNode.getParams();\n+        TaskParams taskParams = JSONUtils.parseObject(taskParamsJson, TaskParams.class);\n+        if (taskParams == null) {\n+            return;\n+        }\n+        taskParams.setLocalParamValue(propToValue);\n+        taskNode.setParams(JSONUtils.toJsonString(taskParams));\n+    }\n+\n+    /**\n+     * convertVarPoolToMap\n+     * @param propToValue propToValue\n+     * @param varPool varPool\n+     * @throws ParseException ParseException\n+     */\n+    public static void convertVarPoolToMap(Map<String, Object> propToValue, String varPool) throws ParseException {\n+        if (varPool == null) {\n+            return;\n+        }\n+        String[] splits = varPool.split(\"\\\\$guyinyou\\\\$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c11264eb12e3c9bc51c41b03aef004739d48d48"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3f7798ffaf88832cca5657d71b4b0411cf36be0", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/c3f7798ffaf88832cca5657d71b4b0411cf36be0", "committedDate": "2020-09-16T04:54:21Z", "message": "fix\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzA1NDcx", "url": "https://github.com/apache/dolphinscheduler/pull/3659#pullrequestreview-489305471", "createdAt": "2020-09-16T06:18:58Z", "commit": {"oid": "1c11264eb12e3c9bc51c41b03aef004739d48d48"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoxODo1OFrOHShu2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoxODo1OFrOHShu2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4OTA4MQ==", "bodyText": "Keep this test class path consistent with the original class", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489189081", "createdAt": "2020-09-16T06:18:58Z", "author": {"login": "simon824"}, "path": "dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.utils;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c11264eb12e3c9bc51c41b03aef004739d48d48"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3b2636c7da30218c17db4b741c3281e2c3f6d28", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/a3b2636c7da30218c17db4b741c3281e2c3f6d28", "committedDate": "2020-09-16T09:53:15Z", "message": "change the test class path\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8ac39ed788689ab531f573e1389495412f6fe30", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/d8ac39ed788689ab531f573e1389495412f6fe30", "committedDate": "2020-09-16T10:31:23Z", "message": "fix\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTY5NDk5", "url": "https://github.com/apache/dolphinscheduler/pull/3659#pullrequestreview-489569499", "createdAt": "2020-09-16T12:25:44Z", "commit": {"oid": "d8ac39ed788689ab531f573e1389495412f6fe30"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjoyNTo0NVrOHSuVmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjoyNTo0NVrOHSuVmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NTYwOQ==", "bodyText": "If there is no other way to deal with this error, then you should print the error message", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489395609", "createdAt": "2020-09-16T12:25:45Z", "author": {"login": "zixi0825"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java", "diffHunk": "@@ -38,103 +38,110 @@\n  */\n public class PythonTask extends AbstractTask {\n \n-  /**\n-   *  python parameters\n-   */\n-  private PythonParameters pythonParameters;\n-\n-  /**\n-   *  task dir\n-   */\n-  private String taskDir;\n-\n-  /**\n-   * python command executor\n-   */\n-  private PythonCommandExecutor pythonCommandExecutor;\n-\n-  /**\n-   * taskExecutionContext\n-   */\n-  private TaskExecutionContext taskExecutionContext;\n-\n-  /**\n-   * constructor\n-   * @param taskExecutionContext taskExecutionContext\n-   * @param logger    logger\n-   */\n-  public PythonTask(TaskExecutionContext taskExecutionContext, Logger logger) {\n-    super(taskExecutionContext, logger);\n-    this.taskExecutionContext = taskExecutionContext;\n-\n-    this.pythonCommandExecutor = new PythonCommandExecutor(this::logHandle,\n-            taskExecutionContext,\n-            logger);\n-  }\n-\n-  @Override\n-  public void init() {\n-    logger.info(\"python task params {}\", taskExecutionContext.getTaskParams());\n-\n-    pythonParameters = JSONUtils.parseObject(taskExecutionContext.getTaskParams(), PythonParameters.class);\n-\n-    if (!pythonParameters.checkParameters()) {\n-      throw new RuntimeException(\"python task params is not valid\");\n+    /**\n+     *  python parameters\n+     */\n+    private PythonParameters pythonParameters;\n+\n+    /**\n+     *    task dir\n+     */\n+    private String taskDir;\n+\n+    /**\n+     * python command executor\n+     */\n+    private PythonCommandExecutor pythonCommandExecutor;\n+\n+    /**\n+     * taskExecutionContext\n+     */\n+    private TaskExecutionContext taskExecutionContext;\n+\n+    /**\n+     * constructor\n+     * @param taskExecutionContext taskExecutionContext\n+     * @param logger        logger\n+     */\n+    public PythonTask(TaskExecutionContext taskExecutionContext, Logger logger) {\n+        super(taskExecutionContext, logger);\n+        this.taskExecutionContext = taskExecutionContext;\n+\n+        this.pythonCommandExecutor = new PythonCommandExecutor(this::logHandle,\n+                        taskExecutionContext,\n+                        logger);\n     }\n-  }\n \n-  @Override\n-  public void handle() throws Exception {\n-    try {\n-      //  construct process\n-      CommandExecuteResult commandExecuteResult = pythonCommandExecutor.run(buildCommand());\n+    @Override\n+    public void init() {\n+        logger.info(\"python task params {}\", taskExecutionContext.getTaskParams());\n \n-      setExitStatusCode(commandExecuteResult.getExitStatusCode());\n-      setAppIds(commandExecuteResult.getAppIds());\n-      setProcessId(commandExecuteResult.getProcessId());\n-    }\n-    catch (Exception e) {\n-      logger.error(\"python task failure\", e);\n-      setExitStatusCode(Constants.EXIT_CODE_FAILURE);\n-      throw e;\n-    }\n-  }\n-\n-  @Override\n-  public void cancelApplication(boolean cancelApplication) throws Exception {\n-    // cancel process\n-    pythonCommandExecutor.cancelApplication();\n-  }\n-\n-  /**\n-   * build command\n-   * @return raw python script\n-   * @throws Exception exception\n-   */\n-  private String buildCommand() throws Exception {\n-    String rawPythonScript = pythonParameters.getRawScript().replaceAll(\"\\\\r\\\\n\", \"\\n\");\n-\n-    // replace placeholder\n-    Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),\n-            taskExecutionContext.getDefinedParams(),\n-            pythonParameters.getLocalParametersMap(),\n-            CommandType.of(taskExecutionContext.getCmdTypeIfComplement()),\n-            taskExecutionContext.getScheduleTime());\n-    if (paramsMap != null){\n-      rawPythonScript = ParameterUtils.convertParameterPlaceholders(rawPythonScript, ParamUtils.convert(paramsMap));\n-    }\n+        pythonParameters = JSONUtils.parseObject(taskExecutionContext.getTaskParams(), PythonParameters.class);\n \n-    logger.info(\"raw python script : {}\", pythonParameters.getRawScript());\n-    logger.info(\"task dir : {}\", taskDir);\n-\n-    return rawPythonScript;\n-  }\n+        if (!pythonParameters.checkParameters()) {\n+            throw new RuntimeException(\"python task params is not valid\");\n+        }\n+    }\n \n-  @Override\n-  public AbstractParameters getParameters() {\n-    return pythonParameters;\n-  }\n+    @Override\n+    public void handle() throws Exception {\n+        try {\n+            //    construct process\n+            CommandExecuteResult commandExecuteResult = pythonCommandExecutor.run(buildCommand());\n+\n+            setExitStatusCode(commandExecuteResult.getExitStatusCode());\n+            setAppIds(commandExecuteResult.getAppIds());\n+            setProcessId(commandExecuteResult.getProcessId());\n+            setVarPool(pythonCommandExecutor.getVarPool());\n+        }\n+        catch (Exception e) {\n+            logger.error(\"python task failure\", e);\n+            setExitStatusCode(Constants.EXIT_CODE_FAILURE);\n+            throw e;\n+        }\n+    }\n \n+    @Override\n+    public void cancelApplication(boolean cancelApplication) throws Exception {\n+        // cancel process\n+        pythonCommandExecutor.cancelApplication();\n+    }\n \n+    /**\n+     * build command\n+     * @return raw python script\n+     * @throws Exception exception\n+     */\n+    private String buildCommand() throws Exception {\n+        String rawPythonScript = pythonParameters.getRawScript().replaceAll(\"\\\\r\\\\n\", \"\\n\");\n+\n+        // replace placeholder\n+        Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),\n+                        taskExecutionContext.getDefinedParams(),\n+                        pythonParameters.getLocalParametersMap(),\n+                        CommandType.of(taskExecutionContext.getCmdTypeIfComplement()),\n+                        taskExecutionContext.getScheduleTime());\n+        \n+        try {\n+            rawPythonScript = VarPoolUtils.convertPythonScriptPlaceholders(rawPythonScript);\n+        }\n+        catch (StringIndexOutOfBoundsException e) {\n+            // TODO: handle exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ac39ed788689ab531f573e1389495412f6fe30"}, "originalPosition": 183}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f0a2d9583bde5c6bcce2d1ea452ef26b5f055bb", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/0f0a2d9583bde5c6bcce2d1ea452ef26b5f055bb", "committedDate": "2020-09-16T12:48:43Z", "message": "fix \"print the error message\"\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMTc0Nzg1", "url": "https://github.com/apache/dolphinscheduler/pull/3659#pullrequestreview-490174785", "createdAt": "2020-09-17T01:03:01Z", "commit": {"oid": "0f0a2d9583bde5c6bcce2d1ea452ef26b5f055bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMTowMzowMVrOHTJYsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMTowMzowMVrOHTJYsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzODc2OQ==", "bodyText": "propToValue  may cause Nullpointerexception", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489838769", "createdAt": "2020-09-17T01:03:01Z", "author": {"login": "simon824"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.common.task;\n+\n+import java.util.Map;\n+\n+public class TaskParams {\n+\n+    private String rawScript;\n+    private Map<String, String>[] localParams;\n+\n+    public void setRawScript(String rawScript) {\n+        this.rawScript = rawScript;\n+    }\n+\n+    public void setLocalParams(Map<String, String>[] localParams) {\n+        this.localParams = localParams;\n+    }\n+\n+    public String getRawScript() {\n+        return rawScript;\n+    }\n+\n+    public void setLocalParamValue(String prop, Object value) {\n+        if (localParams == null) {\n+            return;\n+        }\n+        for (int i = 0; i < localParams.length; i++) {\n+            if (localParams[i].get(\"prop\").equals(prop)) {\n+                localParams[i].put(\"value\", (String)value);\n+            }\n+        }\n+    }\n+\n+    public void setLocalParamValue(Map<String, Object> propToValue) {\n+        if (localParams == null) {\n+            return;\n+        }\n+        for (int i = 0; i < localParams.length; i++) {\n+            String prop = localParams[i].get(\"prop\");\n+            if (propToValue.containsKey(prop)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f0a2d9583bde5c6bcce2d1ea452ef26b5f055bb"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca9de436a754ff84c8ed715b0b27e8326ee3587", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/7ca9de436a754ff84c8ed715b0b27e8326ee3587", "committedDate": "2020-09-18T05:06:16Z", "message": "fix bug\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTcyNjc3", "url": "https://github.com/apache/dolphinscheduler/pull/3659#pullrequestreview-489572677", "createdAt": "2020-09-16T12:29:54Z", "commit": {"oid": "d8ac39ed788689ab531f573e1389495412f6fe30"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjoyOTo1NFrOHSufUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoxMzo1NFrOHSwNZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5ODA5OA==", "bodyText": "only print logger here?  can you add a comment about it?", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489398098", "createdAt": "2020-09-16T12:29:54Z", "author": {"login": "gaojun2048"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java", "diffHunk": "@@ -651,14 +653,22 @@ private void setTaskNodeSkip(List<String> taskNodesSkipList){\n      * submit post node\n      * @param parentNodeName parent node name\n      */\n+    private Map<String,Object> propToValue = new ConcurrentHashMap<String, Object>();\n     private void submitPostNode(String parentNodeName){\n \n         List<String> submitTaskNodeList = parsePostNodeList(parentNodeName);\n \n         List<TaskInstance> taskInstances = new ArrayList<>();\n         for(String taskNode : submitTaskNodeList){\n+            try {\n+                VarPoolUtils.convertVarPoolToMap(propToValue, processInstance.getVarPool());\n+            } catch (ParseException e) {\n+                logger.error(\"parse {} exception\", processInstance.getVarPool(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ac39ed788689ab531f573e1389495412f6fe30"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNjI3Ng==", "bodyText": "propToValue may be null", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489426276", "createdAt": "2020-09-16T13:13:54Z", "author": {"login": "gaojun2048"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.common.task;\n+\n+import java.util.Map;\n+\n+public class TaskParams {\n+\n+    private String rawScript;\n+    private Map<String, String>[] localParams;\n+\n+    public void setRawScript(String rawScript) {\n+        this.rawScript = rawScript;\n+    }\n+\n+    public void setLocalParams(Map<String, String>[] localParams) {\n+        this.localParams = localParams;\n+    }\n+\n+    public String getRawScript() {\n+        return rawScript;\n+    }\n+\n+    public void setLocalParamValue(String prop, Object value) {\n+        if (localParams == null) {\n+            return;\n+        }\n+        for (int i = 0; i < localParams.length; i++) {\n+            if (localParams[i].get(\"prop\").equals(prop)) {\n+                localParams[i].put(\"value\", (String)value);\n+            }\n+        }\n+    }\n+\n+    public void setLocalParamValue(Map<String, Object> propToValue) {\n+        if (localParams == null) {\n+            return;\n+        }\n+        for (int i = 0; i < localParams.length; i++) {\n+            String prop = localParams[i].get(\"prop\");\n+            if (propToValue.containsKey(prop)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f0a2d9583bde5c6bcce2d1ea452ef26b5f055bb"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a871b61e9ce145c6cf9346aab4757d3cd2b362d", "author": {"user": null}, "url": "https://github.com/apache/dolphinscheduler/commit/3a871b61e9ce145c6cf9346aab4757d3cd2b362d", "committedDate": "2020-09-25T04:30:58Z", "message": "fix\nSigned-off-by: \u53e4\u5d1f\u4f51"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTE2ODk4", "url": "https://github.com/apache/dolphinscheduler/pull/3659#pullrequestreview-496116898", "createdAt": "2020-09-25T05:20:04Z", "commit": {"oid": "3a871b61e9ce145c6cf9346aab4757d3cd2b362d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTE3MDM1", "url": "https://github.com/apache/dolphinscheduler/pull/3659#pullrequestreview-496117035", "createdAt": "2020-09-25T05:20:29Z", "commit": {"oid": "3a871b61e9ce145c6cf9346aab4757d3cd2b362d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNjE2MDM0", "url": "https://github.com/apache/dolphinscheduler/pull/3659#pullrequestreview-542616034", "createdAt": "2020-12-02T08:56:18Z", "commit": {"oid": "3a871b61e9ce145c6cf9346aab4757d3cd2b362d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODo1NjoxOFrOH9Qexw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODo1NjoxOFrOH9Qexw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5NTIwNw==", "bodyText": "there is bug will cause the origin param be replace by the task param,so the task will get nothing when use  taskExecutionContext.getTaskParams()", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r533995207", "createdAt": "2020-12-02T08:56:18Z", "author": {"login": "hei12138"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java", "diffHunk": "@@ -651,14 +653,23 @@ private void setTaskNodeSkip(List<String> taskNodesSkipList){\n      * submit post node\n      * @param parentNodeName parent node name\n      */\n+    private Map<String,Object> propToValue = new ConcurrentHashMap<String, Object>();\n     private void submitPostNode(String parentNodeName){\n \n         List<String> submitTaskNodeList = parsePostNodeList(parentNodeName);\n \n         List<TaskInstance> taskInstances = new ArrayList<>();\n         for(String taskNode : submitTaskNodeList){\n+            try {\n+                VarPoolUtils.convertVarPoolToMap(propToValue, processInstance.getVarPool());\n+            } catch (ParseException e) {\n+                logger.error(\"parse {} exception\", processInstance.getVarPool(), e);\n+                throw new RuntimeException();\n+            }\n+            TaskNode taskNodeObject = dag.getNode(taskNode);\n+            VarPoolUtils.setTaskNodeLocalParams(taskNodeObject, propToValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a871b61e9ce145c6cf9346aab4757d3cd2b362d"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2380, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}