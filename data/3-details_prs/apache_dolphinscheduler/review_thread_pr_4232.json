{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMTI1Njgx", "number": 4232, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDo0MDo1NFrOFFhNUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDo0MDo1NFrOFFhNUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzMxMjgyOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDo0MDo1NFrOIGEV9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDo0MDo1NFrOIGEV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIzMzUyNg==", "bodyText": "Should use logger.error...", "url": "https://github.com/apache/dolphinscheduler/pull/4232#discussion_r543233526", "createdAt": "2020-12-15T10:40:54Z", "author": {"login": "CalvinKirs"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java", "diffHunk": "@@ -996,20 +1002,26 @@ private boolean retryTaskIntervalOverTime(TaskInstance taskInstance){\n      * handling the list of tasks to be submitted\n      */\n     private void submitStandByTask(){\n-        for(Map.Entry<String, TaskInstance> entry: readyToSubmitTaskList.entrySet()) {\n-            TaskInstance task = entry.getValue();\n-            DependResult dependResult = getDependResultForTask(task);\n-            if(DependResult.SUCCESS == dependResult){\n-                if(retryTaskIntervalOverTime(task)){\n-                    submitTaskExec(task);\n+\n+        try {\n+            int length = readyToSubmitTaskQueue.size();\n+            for (int i=0;i<length;i++) {\n+                TaskInstance task = readyToSubmitTaskQueue.peek();\n+                DependResult dependResult = getDependResultForTask(task);\n+                if(DependResult.SUCCESS == dependResult){\n+                    if(retryTaskIntervalOverTime(task)){\n+                        submitTaskExec(task);\n+                        removeTaskFromStandbyList(task);\n+                    }\n+                }else if(DependResult.FAILED == dependResult){\n+                    // if the dependency fails, the current node is not submitted and the state changes to failure.\n+                    dependFailedTask.put(task.getName(), task);\n                     removeTaskFromStandbyList(task);\n+                    logger.info(\"task {},id:{} depend result : {}\",task.getName(), task.getId(), dependResult);\n                 }\n-            }else if(DependResult.FAILED == dependResult){\n-                // if the dependency fails, the current node is not submitted and the state changes to failure.\n-                dependFailedTask.put(entry.getKey(), task);\n-                removeTaskFromStandbyList(task);\n-                logger.info(\"task {},id:{} depend result : {}\",task.getName(), task.getId(), dependResult);\n             }\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cd1e7e5179afa14ba9670074107845854b998e1"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3243, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}