{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NTI0MDI0", "number": 3264, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxMzo0M1rOERBMQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo1Mjo0OFrOESxqEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjgwNzcxOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HttpUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxMzo0M1rOG1fpYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxMzo0M1rOG1fpYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NjIwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tboolean kerberState =PropertyUtils.getBoolean(Constants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE, false);\n          \n          \n            \n            \t\tboolean kerberState = PropertyUtils.getBoolean(Constants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE, false);", "url": "https://github.com/apache/dolphinscheduler/pull/3264#discussion_r458746209", "createdAt": "2020-07-22T12:13:43Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HttpUtils.java", "diffHunk": "@@ -33,66 +33,88 @@\n  * http utils\n  */\n public class HttpUtils {\n-\t\n-\t\n+\n+\n \tpublic static final Logger logger = LoggerFactory.getLogger(HttpUtils.class);\n \n \t/**\n \t * get http request content\n+\t *\n \t * @param url url\n \t * @return http get request response content\n \t */\n \tpublic static String get(String url){\n-\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n+\t\tboolean kerberState =PropertyUtils.getBoolean(Constants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "764d3f233811a0f2b556beed26271dc7dd729a4a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Njg2NTYxOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HttpUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoxMDowOVrOG3ftTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjoxNzoxM1rOG3-IjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0NDM2Ng==", "bodyText": "Hi~,\nBecause KERBER is only used for HADOOP_SECURITY_AUTHENTICATION, which belongs to a specific business logic. Therefore, the judgment of kerberstate suggests that it should be implemented in the business logic class not uilts class, and it is recommended to write a new get method specifically used to return KerberosHttpclient.\nFor example: If the user sets kerberstate to true, then when we use httputils.get in other places, a new kerberhttpclient will appear instead of a closed ablehttpclient.\n\n\u56e0\u4e3akerber\u53ea\u7528\u4e8eHADOOP_SECURITY_AUTHENTICATION\uff0c\u5176\u5c5e\u4e8e\u4e00\u79cd\u7279\u5b9a\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u6240\u4ee5kerberState\u7684\u5224\u65ad\u5efa\u8bae\u4e0d\u8981\u653e\u5728utils\u4e2d\uff0c\u5e94\u8be5\u653e\u5728\u4e1a\u52a1\u903b\u8f91\u7c7b\u4e2d\uff0c\u5e76\u4e14\u5efa\u8bae\u518d\u65b0\u5199\u4e00\u4e2aget\u65b9\u6cd5\u4e13\u95e8\u7528\u4e8e\u8fd4\u56deKerberosHttpClient\u3002\n\u4e3e\u4f8b\uff1a\u5982\u679c\u7528\u6237\u8bbe\u7f6e\u4e86kerberState\u4e3atrue\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u5176\u4ed6\u5730\u65b9\u7528\u5230HttpUtils.get\u65f6\uff0c\u4e5f\u4f1a\u51fa\u73b0\u65b0\u5efa\u4e00\u4e2akerberHttpClient\uff0c\u800c\u4e0d\u662fCloseableHttpClient\u3002\nIf you have any question or suggestion, please put forward~", "url": "https://github.com/apache/dolphinscheduler/pull/3264#discussion_r460844366", "createdAt": "2020-07-27T12:10:09Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HttpUtils.java", "diffHunk": "@@ -33,66 +33,86 @@\n  * http utils\n  */\n public class HttpUtils {\n-\t\n-\t\n-\tpublic static final Logger logger = LoggerFactory.getLogger(HttpUtils.class);\n \n-\t/**\n-\t * get http request content\n-\t * @param url url\n-\t * @return http get request response content\n-\t */\n-\tpublic static String get(String url){\n-\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n+    public static final Logger logger = LoggerFactory.getLogger(HttpUtils.class);\n \n-\t\tHttpGet httpget = new HttpGet(url);\n-\t\t/** set timeout\u3001request time\u3001socket timeout */\n-\t\tRequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(Constants.HTTP_CONNECT_TIMEOUT)\n-\t\t\t\t.setConnectionRequestTimeout(Constants.HTTP_CONNECTION_REQUEST_TIMEOUT)\n-\t\t\t\t.setSocketTimeout(Constants.SOCKET_TIMEOUT)\n-\t\t\t\t.setRedirectsEnabled(true)\n-\t\t\t\t.build();\n-\t\thttpget.setConfig(requestConfig);\n-\t\tString responseContent = null;\n-\t\tCloseableHttpResponse response = null;\n+    /**\n+     * get http request content\n+     *\n+     * @param url url\n+     * @return http get request response content\n+     */\n+    public static String get(String url) {\n+\tboolean kerberState = PropertyUtils.getBoolean(Constants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aebb7c749dd025c5cd954a38a0f8338fa6efca6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0Mjg2MQ==", "bodyText": "It has been modified.", "url": "https://github.com/apache/dolphinscheduler/pull/3264#discussion_r461342861", "createdAt": "2020-07-28T06:17:13Z", "author": {"login": "felix-thinkingdata"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HttpUtils.java", "diffHunk": "@@ -33,66 +33,86 @@\n  * http utils\n  */\n public class HttpUtils {\n-\t\n-\t\n-\tpublic static final Logger logger = LoggerFactory.getLogger(HttpUtils.class);\n \n-\t/**\n-\t * get http request content\n-\t * @param url url\n-\t * @return http get request response content\n-\t */\n-\tpublic static String get(String url){\n-\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n+    public static final Logger logger = LoggerFactory.getLogger(HttpUtils.class);\n \n-\t\tHttpGet httpget = new HttpGet(url);\n-\t\t/** set timeout\u3001request time\u3001socket timeout */\n-\t\tRequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(Constants.HTTP_CONNECT_TIMEOUT)\n-\t\t\t\t.setConnectionRequestTimeout(Constants.HTTP_CONNECTION_REQUEST_TIMEOUT)\n-\t\t\t\t.setSocketTimeout(Constants.SOCKET_TIMEOUT)\n-\t\t\t\t.setRedirectsEnabled(true)\n-\t\t\t\t.build();\n-\t\thttpget.setConfig(requestConfig);\n-\t\tString responseContent = null;\n-\t\tCloseableHttpResponse response = null;\n+    /**\n+     * get http request content\n+     *\n+     * @param url url\n+     * @return http get request response content\n+     */\n+    public static String get(String url) {\n+\tboolean kerberState = PropertyUtils.getBoolean(Constants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0NDM2Ng=="}, "originalCommit": {"oid": "3aebb7c749dd025c5cd954a38a0f8338fa6efca6"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Njg3MDIzOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoxMTozN1rOG3fwJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNToxMDoyNVrOG381tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0NTA5Mw==", "bodyText": "Hi~,\nI have fixed the github action oom, please revert these changes.", "url": "https://github.com/apache/dolphinscheduler/pull/3264#discussion_r460845093", "createdAt": "2020-07-27T12:11:37Z", "author": {"login": "yangyichao-mango"}, "path": "pom.xml", "diffHunk": "@@ -807,9 +808,9 @@\n                         <!--<include>**/server/master/register/MasterRegistryTest.java</include>-->\n                         <include>**/server/master/AlertManagerTest.java</include>\n                         <include>**/server/master/MasterCommandTest.java</include>\n-                        <include>**/server/master/DependentTaskTest.java</include>\n+                        <!--<include>**/server/master/DependentTaskTest.java</include>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aebb7c749dd025c5cd954a38a0f8338fa6efca6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMyMTY1NA==", "bodyText": "I have fixed the github action oom, please revert these changes.\n\nOk, let me modify it", "url": "https://github.com/apache/dolphinscheduler/pull/3264#discussion_r461321654", "createdAt": "2020-07-28T05:10:25Z", "author": {"login": "felix-thinkingdata"}, "path": "pom.xml", "diffHunk": "@@ -807,9 +808,9 @@\n                         <!--<include>**/server/master/register/MasterRegistryTest.java</include>-->\n                         <include>**/server/master/AlertManagerTest.java</include>\n                         <include>**/server/master/MasterCommandTest.java</include>\n-                        <include>**/server/master/DependentTaskTest.java</include>\n+                        <!--<include>**/server/master/DependentTaskTest.java</include>-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0NTA5Mw=="}, "originalCommit": {"oid": "3aebb7c749dd025c5cd954a38a0f8338fa6efca6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTIzNDA4OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/KerberosHttpClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo1Mjo0OVrOG4JCDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0MDozNFrOG4NFnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public KerberosHttpClient(String principal, String keyTabLocation) {\n          \n          \n            \n            \tsuper();\n          \n          \n            \n            \tthis.principal = principal;\n          \n          \n            \n            \tthis.keyTabLocation = keyTabLocation;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public KerberosHttpClient(String principal, String keyTabLocation, boolean isDebug) {\n          \n          \n            \n            \tthis(principal, keyTabLocation);\n          \n          \n            \n            \tif (isDebug) {\n          \n          \n            \n            \t    System.setProperty(\"sun.security.spnego.debug\", \"true\");\n          \n          \n            \n            \t    System.setProperty(\"sun.security.krb5.debug\", \"true\");\n          \n          \n            \n            \t}\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public KerberosHttpClient(String principal, String keyTabLocation, String krb5Location, boolean isDebug) {\n          \n          \n            \n            \tthis(principal, keyTabLocation, isDebug);\n          \n          \n            \n            \tSystem.setProperty(\"java.security.krb5.conf\", krb5Location);\n          \n          \n            \n                }\n          \n          \n            \n                public KerberosHttpClient(String principal, String keyTabLocation) {\n          \n          \n            \n                    this(principal, keyTabLocation, false);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public KerberosHttpClient(String principal, String keyTabLocation, boolean isDebug) {\n          \n          \n            \n            \tthis(principal, keyTabLocation, StringUtils.EMPTY, false);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public KerberosHttpClient(String principal, String keyTabLocation, String krb5Location, boolean isDebug) {\n          \n          \n            \n                  this.principal = principal;\n          \n          \n            \n            \tthis.keyTabLocation = keyTabLocation;\n          \n          \n            \n            \tif (StringUtils.isNotEmpty(krb5Location)) {\n          \n          \n            \n            \t    System.setProperty(\"java.security.krb5.conf\", krb5Location);\n          \n          \n            \n            \t}\n          \n          \n            \n            \tif (isDebug) {\n          \n          \n            \n            \t    System.setProperty(\"sun.security.spnego.debug\", \"true\");\n          \n          \n            \n            \t    System.setProperty(\"sun.security.krb5.debug\", \"true\");\n          \n          \n            \n            \t}\n          \n          \n            \n                }", "url": "https://github.com/apache/dolphinscheduler/pull/3264#discussion_r461521420", "createdAt": "2020-07-28T11:52:49Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/KerberosHttpClient.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.common.utils;\n+\n+import org.apache.dolphinscheduler.common.Constants;\n+import org.apache.http.auth.AuthSchemeProvider;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.client.config.AuthSchemes;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.config.Lookup;\n+import org.apache.http.config.RegistryBuilder;\n+import org.apache.http.impl.auth.SPNegoSchemeFactory;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.kerberos.KerberosPrincipal;\n+import javax.security.auth.login.AppConfigurationEntry;\n+import javax.security.auth.login.Configuration;\n+import javax.security.auth.login.LoginContext;\n+import javax.security.auth.login.LoginException;\n+import java.security.Principal;\n+import java.security.PrivilegedAction;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * kerberos http client\n+ */\n+public class KerberosHttpClient {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(KerberosHttpClient.class);\n+\n+    private String principal;\n+    private String keyTabLocation;\n+\n+    public KerberosHttpClient(String principal, String keyTabLocation) {\n+\tsuper();\n+\tthis.principal = principal;\n+\tthis.keyTabLocation = keyTabLocation;\n+    }\n+\n+    public KerberosHttpClient(String principal, String keyTabLocation, boolean isDebug) {\n+\tthis(principal, keyTabLocation);\n+\tif (isDebug) {\n+\t    System.setProperty(\"sun.security.spnego.debug\", \"true\");\n+\t    System.setProperty(\"sun.security.krb5.debug\", \"true\");\n+\t}\n+    }\n+\n+    public KerberosHttpClient(String principal, String keyTabLocation, String krb5Location, boolean isDebug) {\n+\tthis(principal, keyTabLocation, isDebug);\n+\tSystem.setProperty(\"java.security.krb5.conf\", krb5Location);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a5afd5a6bfc4472c1345670c12153bada854eb"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyNDk0Nw==", "bodyText": "The other part LGTM.", "url": "https://github.com/apache/dolphinscheduler/pull/3264#discussion_r461524947", "createdAt": "2020-07-28T11:59:48Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/KerberosHttpClient.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.common.utils;\n+\n+import org.apache.dolphinscheduler.common.Constants;\n+import org.apache.http.auth.AuthSchemeProvider;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.client.config.AuthSchemes;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.config.Lookup;\n+import org.apache.http.config.RegistryBuilder;\n+import org.apache.http.impl.auth.SPNegoSchemeFactory;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.kerberos.KerberosPrincipal;\n+import javax.security.auth.login.AppConfigurationEntry;\n+import javax.security.auth.login.Configuration;\n+import javax.security.auth.login.LoginContext;\n+import javax.security.auth.login.LoginException;\n+import java.security.Principal;\n+import java.security.PrivilegedAction;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * kerberos http client\n+ */\n+public class KerberosHttpClient {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(KerberosHttpClient.class);\n+\n+    private String principal;\n+    private String keyTabLocation;\n+\n+    public KerberosHttpClient(String principal, String keyTabLocation) {\n+\tsuper();\n+\tthis.principal = principal;\n+\tthis.keyTabLocation = keyTabLocation;\n+    }\n+\n+    public KerberosHttpClient(String principal, String keyTabLocation, boolean isDebug) {\n+\tthis(principal, keyTabLocation);\n+\tif (isDebug) {\n+\t    System.setProperty(\"sun.security.spnego.debug\", \"true\");\n+\t    System.setProperty(\"sun.security.krb5.debug\", \"true\");\n+\t}\n+    }\n+\n+    public KerberosHttpClient(String principal, String keyTabLocation, String krb5Location, boolean isDebug) {\n+\tthis(principal, keyTabLocation, isDebug);\n+\tSystem.setProperty(\"java.security.krb5.conf\", krb5Location);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTQyMA=="}, "originalCommit": {"oid": "a4a5afd5a6bfc4472c1345670c12153bada854eb"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4Nzg2OQ==", "bodyText": "Can I continue to optimize my patch\n\nHi,\nGood job,\nI create an improvement issue #3332 about HttpClient and KerberosHttpClient can further optimize singleton mode.\n\nContinue optimizing in my Patch?", "url": "https://github.com/apache/dolphinscheduler/pull/3264#discussion_r461587869", "createdAt": "2020-07-28T13:40:34Z", "author": {"login": "felix-thinkingdata"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/KerberosHttpClient.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.common.utils;\n+\n+import org.apache.dolphinscheduler.common.Constants;\n+import org.apache.http.auth.AuthSchemeProvider;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.client.config.AuthSchemes;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.config.Lookup;\n+import org.apache.http.config.RegistryBuilder;\n+import org.apache.http.impl.auth.SPNegoSchemeFactory;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.kerberos.KerberosPrincipal;\n+import javax.security.auth.login.AppConfigurationEntry;\n+import javax.security.auth.login.Configuration;\n+import javax.security.auth.login.LoginContext;\n+import javax.security.auth.login.LoginException;\n+import java.security.Principal;\n+import java.security.PrivilegedAction;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * kerberos http client\n+ */\n+public class KerberosHttpClient {\n+\n+    public static final Logger logger = LoggerFactory.getLogger(KerberosHttpClient.class);\n+\n+    private String principal;\n+    private String keyTabLocation;\n+\n+    public KerberosHttpClient(String principal, String keyTabLocation) {\n+\tsuper();\n+\tthis.principal = principal;\n+\tthis.keyTabLocation = keyTabLocation;\n+    }\n+\n+    public KerberosHttpClient(String principal, String keyTabLocation, boolean isDebug) {\n+\tthis(principal, keyTabLocation);\n+\tif (isDebug) {\n+\t    System.setProperty(\"sun.security.spnego.debug\", \"true\");\n+\t    System.setProperty(\"sun.security.krb5.debug\", \"true\");\n+\t}\n+    }\n+\n+    public KerberosHttpClient(String principal, String keyTabLocation, String krb5Location, boolean isDebug) {\n+\tthis(principal, keyTabLocation, isDebug);\n+\tSystem.setProperty(\"java.security.krb5.conf\", krb5Location);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTQyMA=="}, "originalCommit": {"oid": "a4a5afd5a6bfc4472c1345670c12153bada854eb"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3355, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}