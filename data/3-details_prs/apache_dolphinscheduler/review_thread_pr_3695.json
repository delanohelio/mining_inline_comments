{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODA3Njkx", "number": 3695, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjozNTo1NVrOEiGBqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMjoxMDozOVrOEiu_xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTg1NzY5OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/NetUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjozNTo1NVrOHPxaCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDoyNjo0MFrOHP2wUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMDE3MA==", "bodyText": "Hi, there may be a little problem here, we need to consider the IPV6 situation,", "url": "https://github.com/apache/dolphinscheduler/pull/3695#discussion_r486300170", "createdAt": "2020-09-10T12:35:55Z", "author": {"login": "CalvinKirs"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/NetUtils.java", "diffHunk": "@@ -227,4 +230,72 @@ private static boolean isSpecifyNetworkInterface(NetworkInterface networkInterfa\n         String preferredNetworkInterface = System.getProperty(DOLPHIN_SCHEDULER_PREFERRED_NETWORK_INTERFACE);\n         return Objects.equals(networkInterface.getDisplayName(), preferredNetworkInterface);\n     }\n+\n+    private static NetworkInterface findAddress(List<NetworkInterface> validNetworkInterfaces) {\n+        if (validNetworkInterfaces.isEmpty()) {\n+            return null;\n+        }\n+        String networkPriority = PropertyUtils.getString(Constants.NETWORK_PRIORITY_STRATEGY, NETWORK_PRIORITY_DEFAULT);\n+        if (NETWORK_PRIORITY_DEFAULT.equalsIgnoreCase(networkPriority)) {\n+            return findAddressByDefaultPolicy(validNetworkInterfaces);\n+        } else if (NETWORK_PRIORITY_INNER.equalsIgnoreCase(networkPriority)) {\n+            return findInnerAddress(validNetworkInterfaces);\n+        } else if (NETWORK_PRIORITY_OUTER.equalsIgnoreCase(networkPriority)) {\n+            return findOuterAddress(validNetworkInterfaces);\n+        } else {\n+            logger.error(\"There is no matching network card acquisition policy!\");\n+            return null;\n+        }\n+    }\n+\n+    private static NetworkInterface findAddressByDefaultPolicy(List<NetworkInterface> validNetworkInterfaces) {\n+        NetworkInterface networkInterface;\n+        networkInterface = findInnerAddress(validNetworkInterfaces);\n+        if (networkInterface == null) {\n+            networkInterface = findOuterAddress(validNetworkInterfaces);\n+            if (networkInterface == null) {\n+                networkInterface = validNetworkInterfaces.get(0);\n+            }\n+        }\n+        return networkInterface;\n+    }\n+\n+    /**\n+     * Get the Intranet IP\n+     *\n+     * @return If no {@link NetworkInterface} is available , return <code>null</code>\n+     */\n+    private static NetworkInterface findInnerAddress(List<NetworkInterface> validNetworkInterfaces) {\n+\n+        NetworkInterface networkInterface = null;\n+        for (NetworkInterface ni : validNetworkInterfaces) {\n+            Enumeration<InetAddress> address = ni.getInetAddresses();\n+            while (address.hasMoreElements()) {\n+                InetAddress ip = address.nextElement();\n+                if (ip.isSiteLocalAddress()\n+                        && !ip.isLoopbackAddress()\n+                        && !ip.getHostAddress().contains(\":\")) {\n+                    networkInterface = ni;\n+                }\n+            }\n+        }\n+        return networkInterface;\n+    }\n+\n+    private static NetworkInterface findOuterAddress(List<NetworkInterface> validNetworkInterfaces) {\n+        NetworkInterface networkInterface = null;\n+        for (NetworkInterface ni : validNetworkInterfaces) {\n+            Enumeration<InetAddress> address = ni.getInetAddresses();\n+            while (address.hasMoreElements()) {\n+                InetAddress ip = address.nextElement();\n+                if (!ip.isSiteLocalAddress()\n+                        && !ip.isLoopbackAddress()\n+                        && !ip.getHostAddress().contains(\":\")) {\n+                    networkInterface = ni;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa6893ca987ec0eb6257687dc79e49723cad5ef"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM4Nzc5NA==", "bodyText": "yes  i will support ipv6  --x:--x:--x:--x:--x:--x:--x:--x,remove  && !ip.getHostAddress().contains(\":\")", "url": "https://github.com/apache/dolphinscheduler/pull/3695#discussion_r486387794", "createdAt": "2020-09-10T14:26:40Z", "author": {"login": "felix-thinkingdata"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/NetUtils.java", "diffHunk": "@@ -227,4 +230,72 @@ private static boolean isSpecifyNetworkInterface(NetworkInterface networkInterfa\n         String preferredNetworkInterface = System.getProperty(DOLPHIN_SCHEDULER_PREFERRED_NETWORK_INTERFACE);\n         return Objects.equals(networkInterface.getDisplayName(), preferredNetworkInterface);\n     }\n+\n+    private static NetworkInterface findAddress(List<NetworkInterface> validNetworkInterfaces) {\n+        if (validNetworkInterfaces.isEmpty()) {\n+            return null;\n+        }\n+        String networkPriority = PropertyUtils.getString(Constants.NETWORK_PRIORITY_STRATEGY, NETWORK_PRIORITY_DEFAULT);\n+        if (NETWORK_PRIORITY_DEFAULT.equalsIgnoreCase(networkPriority)) {\n+            return findAddressByDefaultPolicy(validNetworkInterfaces);\n+        } else if (NETWORK_PRIORITY_INNER.equalsIgnoreCase(networkPriority)) {\n+            return findInnerAddress(validNetworkInterfaces);\n+        } else if (NETWORK_PRIORITY_OUTER.equalsIgnoreCase(networkPriority)) {\n+            return findOuterAddress(validNetworkInterfaces);\n+        } else {\n+            logger.error(\"There is no matching network card acquisition policy!\");\n+            return null;\n+        }\n+    }\n+\n+    private static NetworkInterface findAddressByDefaultPolicy(List<NetworkInterface> validNetworkInterfaces) {\n+        NetworkInterface networkInterface;\n+        networkInterface = findInnerAddress(validNetworkInterfaces);\n+        if (networkInterface == null) {\n+            networkInterface = findOuterAddress(validNetworkInterfaces);\n+            if (networkInterface == null) {\n+                networkInterface = validNetworkInterfaces.get(0);\n+            }\n+        }\n+        return networkInterface;\n+    }\n+\n+    /**\n+     * Get the Intranet IP\n+     *\n+     * @return If no {@link NetworkInterface} is available , return <code>null</code>\n+     */\n+    private static NetworkInterface findInnerAddress(List<NetworkInterface> validNetworkInterfaces) {\n+\n+        NetworkInterface networkInterface = null;\n+        for (NetworkInterface ni : validNetworkInterfaces) {\n+            Enumeration<InetAddress> address = ni.getInetAddresses();\n+            while (address.hasMoreElements()) {\n+                InetAddress ip = address.nextElement();\n+                if (ip.isSiteLocalAddress()\n+                        && !ip.isLoopbackAddress()\n+                        && !ip.getHostAddress().contains(\":\")) {\n+                    networkInterface = ni;\n+                }\n+            }\n+        }\n+        return networkInterface;\n+    }\n+\n+    private static NetworkInterface findOuterAddress(List<NetworkInterface> validNetworkInterfaces) {\n+        NetworkInterface networkInterface = null;\n+        for (NetworkInterface ni : validNetworkInterfaces) {\n+            Enumeration<InetAddress> address = ni.getInetAddresses();\n+            while (address.hasMoreElements()) {\n+                InetAddress ip = address.nextElement();\n+                if (!ip.isSiteLocalAddress()\n+                        && !ip.isLoopbackAddress()\n+                        && !ip.getHostAddress().contains(\":\")) {\n+                    networkInterface = ni;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMDE3MA=="}, "originalCommit": {"oid": "3aa6893ca987ec0eb6257687dc79e49723cad5ef"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODU3MDI4OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/resources/common.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMjoxMDozOVrOHQxwiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMjoxMDozOVrOHQxwiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1NDUwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #Network IP gets priority, default inner outer\n          \n          \n            \n            # Network IP gets priority, default inner outer\n          \n      \n    \n    \n  \n\nFormat the description as the others.", "url": "https://github.com/apache/dolphinscheduler/pull/3695#discussion_r487354505", "createdAt": "2020-09-12T02:10:39Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-common/src/main/resources/common.properties", "diffHunk": "@@ -72,3 +72,7 @@ kerberos.expire.time=2\n # datasource encryption salt\n datasource.encryption.enable=false\n datasource.encryption.salt=!@#$%^&*\n+\n+#Network IP gets priority, default inner outer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9dce19ab1ff1d399314f54b16229e2099c5b47e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3308, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}