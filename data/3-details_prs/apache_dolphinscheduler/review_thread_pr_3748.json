{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MDU4MTcy", "number": 3748, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDoyNjo0M1rOEj4b2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowMzozMFrOEj9dAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDYwMjUxOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/CommandType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDoyNjo0M1rOHSflWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzoyNToxN1rOHSjnsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1Mzg4MA==", "bodyText": "pelase remove ^M", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489153880", "createdAt": "2020-09-16T04:26:43Z", "author": {"login": "dailidong"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/CommandType.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\r\rpublic enum CommandType {\r\r    /**\r     * remove task log request,\r     */\r    REMOVE_TAK_LOG_REQUEST,\r\r    /**\r     * remove task log response\r     */\r    REMOVE_TAK_LOG_RESPONSE,\r\r    /**\r     *  roll view log request\r     */\r    ROLL_VIEW_LOG_REQUEST,\r\r    /**\r     *  roll view log response\r     */\r    ROLL_VIEW_LOG_RESPONSE,\r\r    /**\r     * view whole log request\r     */\r    VIEW_WHOLE_LOG_REQUEST,\r\r    /**\r     * view whole log response\r     */\r    VIEW_WHOLE_LOG_RESPONSE,\r\r    /**\r     * get log bytes request\r     */\r    GET_LOG_BYTES_REQUEST,\r\r    /**\r     * get log bytes response\r     */\r    GET_LOG_BYTES_RESPONSE,\r\r\r    WORKER_REQUEST,\r    MASTER_RESPONSE,\r\r    /**\r     * execute task request\r     */\r    TASK_EXECUTE_REQUEST,\r\r    /**\r     * execute task ack\r     */\r    TASK_EXECUTE_ACK,\r\r    /**\r     * execute task response\r     */\r    TASK_EXECUTE_RESPONSE,\r\r    /**\r     * kill task\r     */\r    TASK_KILL_REQUEST,\r\r    /**\r     * kill task response\r     */\r    TASK_KILL_RESPONSE,\r\r    /**\r     *  ping\r     */\r    PING,\r\r    /**\r     *  pong\r     */\r    PONG;\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\r\rpublic enum CommandType {\r\r    /**\r     * remove task log request,\r     */\r    REMOVE_TAK_LOG_REQUEST,\r\r    /**\r     * remove task log response\r     */\r    REMOVE_TAK_LOG_RESPONSE,\r\r    /**\r     *  roll view log request\r     */\r    ROLL_VIEW_LOG_REQUEST,\r\r    /**\r     *  roll view log response\r     */\r    ROLL_VIEW_LOG_RESPONSE,\r\r    /**\r     * view whole log request\r     */\r    VIEW_WHOLE_LOG_REQUEST,\r\r    /**\r     * view whole log response\r     */\r    VIEW_WHOLE_LOG_RESPONSE,\r\r    /**\r     * get log bytes request\r     */\r    GET_LOG_BYTES_REQUEST,\r\r    /**\r     * get log bytes response\r     */\r    GET_LOG_BYTES_RESPONSE,\r\r\r    WORKER_REQUEST,\r    MASTER_RESPONSE,\r\r    /**\r     * execute task request\r     */\r    TASK_EXECUTE_REQUEST,\r\r    /**\r     * execute task ack\r     */\r    TASK_EXECUTE_ACK,\r\r    /**\r     * execute task response\r     */\r    TASK_EXECUTE_RESPONSE,\r\r    /**\r     * db task ack\r     */\r    DB_TASK_ACK,\r\r    /**\r     * db task response\r     */\r    DB_TASK_RESPONSE,\r\r    /**\r     * kill task\r     */\r    TASK_KILL_REQUEST,\r\r    /**\r     * kill task response\r     */\r    TASK_KILL_RESPONSE,\r\r    /**\r     *  ping\r     */\r    PING,\r\r    /**\r     *  pong\r     */\r    PONG;\r}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5fbb9d95c057633192c0dfceb34d4e8d8ed80d2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMDAxOQ==", "bodyText": "resloved", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489220019", "createdAt": "2020-09-16T07:25:17Z", "author": {"login": "qiaozhanwei"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/CommandType.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\r\rpublic enum CommandType {\r\r    /**\r     * remove task log request,\r     */\r    REMOVE_TAK_LOG_REQUEST,\r\r    /**\r     * remove task log response\r     */\r    REMOVE_TAK_LOG_RESPONSE,\r\r    /**\r     *  roll view log request\r     */\r    ROLL_VIEW_LOG_REQUEST,\r\r    /**\r     *  roll view log response\r     */\r    ROLL_VIEW_LOG_RESPONSE,\r\r    /**\r     * view whole log request\r     */\r    VIEW_WHOLE_LOG_REQUEST,\r\r    /**\r     * view whole log response\r     */\r    VIEW_WHOLE_LOG_RESPONSE,\r\r    /**\r     * get log bytes request\r     */\r    GET_LOG_BYTES_REQUEST,\r\r    /**\r     * get log bytes response\r     */\r    GET_LOG_BYTES_RESPONSE,\r\r\r    WORKER_REQUEST,\r    MASTER_RESPONSE,\r\r    /**\r     * execute task request\r     */\r    TASK_EXECUTE_REQUEST,\r\r    /**\r     * execute task ack\r     */\r    TASK_EXECUTE_ACK,\r\r    /**\r     * execute task response\r     */\r    TASK_EXECUTE_RESPONSE,\r\r    /**\r     * kill task\r     */\r    TASK_KILL_REQUEST,\r\r    /**\r     * kill task response\r     */\r    TASK_KILL_RESPONSE,\r\r    /**\r     *  ping\r     */\r    PING,\r\r    /**\r     *  pong\r     */\r    PONG;\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\r\rpublic enum CommandType {\r\r    /**\r     * remove task log request,\r     */\r    REMOVE_TAK_LOG_REQUEST,\r\r    /**\r     * remove task log response\r     */\r    REMOVE_TAK_LOG_RESPONSE,\r\r    /**\r     *  roll view log request\r     */\r    ROLL_VIEW_LOG_REQUEST,\r\r    /**\r     *  roll view log response\r     */\r    ROLL_VIEW_LOG_RESPONSE,\r\r    /**\r     * view whole log request\r     */\r    VIEW_WHOLE_LOG_REQUEST,\r\r    /**\r     * view whole log response\r     */\r    VIEW_WHOLE_LOG_RESPONSE,\r\r    /**\r     * get log bytes request\r     */\r    GET_LOG_BYTES_REQUEST,\r\r    /**\r     * get log bytes response\r     */\r    GET_LOG_BYTES_RESPONSE,\r\r\r    WORKER_REQUEST,\r    MASTER_RESPONSE,\r\r    /**\r     * execute task request\r     */\r    TASK_EXECUTE_REQUEST,\r\r    /**\r     * execute task ack\r     */\r    TASK_EXECUTE_ACK,\r\r    /**\r     * execute task response\r     */\r    TASK_EXECUTE_RESPONSE,\r\r    /**\r     * db task ack\r     */\r    DB_TASK_ACK,\r\r    /**\r     * db task response\r     */\r    DB_TASK_RESPONSE,\r\r    /**\r     * kill task\r     */\r    TASK_KILL_REQUEST,\r\r    /**\r     * kill task response\r     */\r    TASK_KILL_RESPONSE,\r\r    /**\r     *  ping\r     */\r    PING,\r\r    /**\r     *  pong\r     */\r    PONG;\r}\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1Mzg4MA=="}, "originalCommit": {"oid": "d5fbb9d95c057633192c0dfceb34d4e8d8ed80d2"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDYzMDg3OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/RetryReportTaskStatusThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDo0MzoyN1rOHSf1iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzoyNDo1MVrOHSjmoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODAyNQ==", "bodyText": "Which service starts this ?", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489158025", "createdAt": "2020-09-16T04:43:27Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/RetryReportTaskStatusThread.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.worker.runner;\n+\n+import org.apache.dolphinscheduler.common.thread.Stopper;\n+\n+import org.apache.dolphinscheduler.common.thread.ThreadUtils;\n+import org.apache.dolphinscheduler.remote.command.Command;\n+import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;\n+import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;\n+import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+\n+/**\n+ * Retry Report Task Status Thread\n+ */\n+@Component\n+public class RetryReportTaskStatusThread implements Runnable {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RetryReportTaskStatusThread.class);\n+\n+    /**\n+     * every 5 minutes\n+     */\n+    private static long RETRY_REPORT_TASK_STATUS_TIME = 5 * 60 * 1000L;\n+    /**\n+     *  task callback service\n+     */\n+    private final TaskCallbackService taskCallbackService;\n+\n+    public void start(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5fbb9d95c057633192c0dfceb34d4e8d8ed80d2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxOTc0NQ==", "bodyText": "WorkerServer\n// retry report task status\nthis.retryReportTaskStatusThread.start();", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489219745", "createdAt": "2020-09-16T07:24:51Z", "author": {"login": "qiaozhanwei"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/RetryReportTaskStatusThread.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.worker.runner;\n+\n+import org.apache.dolphinscheduler.common.thread.Stopper;\n+\n+import org.apache.dolphinscheduler.common.thread.ThreadUtils;\n+import org.apache.dolphinscheduler.remote.command.Command;\n+import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;\n+import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;\n+import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+\n+/**\n+ * Retry Report Task Status Thread\n+ */\n+@Component\n+public class RetryReportTaskStatusThread implements Runnable {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RetryReportTaskStatusThread.class);\n+\n+    /**\n+     * every 5 minutes\n+     */\n+    private static long RETRY_REPORT_TASK_STATUS_TIME = 5 * 60 * 1000L;\n+    /**\n+     *  task callback service\n+     */\n+    private final TaskCallbackService taskCallbackService;\n+\n+    public void start(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODAyNQ=="}, "originalCommit": {"oid": "d5fbb9d95c057633192c0dfceb34d4e8d8ed80d2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQxMDc3OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/ResponceCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowMDowMlrOHSnNWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToxNjozNlrOHSn2Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODgxMA==", "bodyText": "Miss java doc", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489278810", "createdAt": "2020-09-16T09:00:02Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/ResponceCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.worker.cache;\n+\n+import org.apache.dolphinscheduler.common.enums.Event;\n+import org.apache.dolphinscheduler.remote.command.Command;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class ResponceCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8231036913dfa11da2dd3d4abf3781df92058acd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4OTI2Mg==", "bodyText": "ok", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489289262", "createdAt": "2020-09-16T09:16:36Z", "author": {"login": "qiaozhanwei"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/ResponceCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.worker.cache;\n+\n+import org.apache.dolphinscheduler.common.enums.Event;\n+import org.apache.dolphinscheduler.remote.command.Command;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class ResponceCache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODgxMA=="}, "originalCommit": {"oid": "8231036913dfa11da2dd3d4abf3781df92058acd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQxNjk5OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/NettyRemoteChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowMTozNlrOHSnRUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToxNjo0NlrOHSn2pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3OTgyNg==", "bodyText": "opaque should be -1 is much better.  we can locate the issue easily.", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489279826", "createdAt": "2020-09-16T09:01:36Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/NettyRemoteChannel.java", "diffHunk": "@@ -43,13 +45,21 @@\n      */\n     private final Host host;\n \n+    private final Random random = new Random();\n+\n \n     public NettyRemoteChannel(Channel channel, long opaque) {\n         this.channel = channel;\n         this.host = ChannelUtils.toAddress(channel);\n         this.opaque = opaque;\n     }\n \n+    public NettyRemoteChannel(Channel channel) {\n+        this.channel = channel;\n+        this.host = ChannelUtils.toAddress(channel);\n+        this.opaque = random.nextLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8231036913dfa11da2dd3d4abf3781df92058acd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4OTM4Mg==", "bodyText": "ok", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489289382", "createdAt": "2020-09-16T09:16:46Z", "author": {"login": "qiaozhanwei"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/NettyRemoteChannel.java", "diffHunk": "@@ -43,13 +45,21 @@\n      */\n     private final Host host;\n \n+    private final Random random = new Random();\n+\n \n     public NettyRemoteChannel(Channel channel, long opaque) {\n         this.channel = channel;\n         this.host = ChannelUtils.toAddress(channel);\n         this.opaque = opaque;\n     }\n \n+    public NettyRemoteChannel(Channel channel) {\n+        this.channel = channel;\n+        this.host = ChannelUtils.toAddress(channel);\n+        this.opaque = random.nextLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3OTgyNg=="}, "originalCommit": {"oid": "8231036913dfa11da2dd3d4abf3781df92058acd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQyMTMyOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/ResponceCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowMjozOVrOHSnUAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMjowNjoyMVrOHTL2LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MDUxMg==", "bodyText": "Rename to add", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489280512", "createdAt": "2020-09-16T09:02:39Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/ResponceCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.worker.cache;\n+\n+import org.apache.dolphinscheduler.common.enums.Event;\n+import org.apache.dolphinscheduler.remote.command.Command;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class ResponceCache {\n+\n+    private static final ResponceCache instance = new ResponceCache();\n+\n+    private ResponceCache(){}\n+\n+    public static ResponceCache get(){\n+        return instance;\n+    }\n+\n+    private Map<Integer,Command> ackCache = new ConcurrentHashMap<>();\n+    private Map<Integer,Command> responseCache = new ConcurrentHashMap<>();\n+\n+\n+    public void cache(Integer taskInstanceId, Command command, Event event){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8231036913dfa11da2dd3d4abf3781df92058acd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5MDM5Nw==", "bodyText": "cache maybe express my idea", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489290397", "createdAt": "2020-09-16T09:18:05Z", "author": {"login": "qiaozhanwei"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/ResponceCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.worker.cache;\n+\n+import org.apache.dolphinscheduler.common.enums.Event;\n+import org.apache.dolphinscheduler.remote.command.Command;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class ResponceCache {\n+\n+    private static final ResponceCache instance = new ResponceCache();\n+\n+    private ResponceCache(){}\n+\n+    public static ResponceCache get(){\n+        return instance;\n+    }\n+\n+    private Map<Integer,Command> ackCache = new ConcurrentHashMap<>();\n+    private Map<Integer,Command> responseCache = new ConcurrentHashMap<>();\n+\n+\n+    public void cache(Integer taskInstanceId, Command command, Event event){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MDUxMg=="}, "originalCommit": {"oid": "8231036913dfa11da2dd3d4abf3781df92058acd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg3OTA4NA==", "bodyText": "For the class Name XXXCache.", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489879084", "createdAt": "2020-09-17T02:06:21Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/ResponceCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.worker.cache;\n+\n+import org.apache.dolphinscheduler.common.enums.Event;\n+import org.apache.dolphinscheduler.remote.command.Command;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class ResponceCache {\n+\n+    private static final ResponceCache instance = new ResponceCache();\n+\n+    private ResponceCache(){}\n+\n+    public static ResponceCache get(){\n+        return instance;\n+    }\n+\n+    private Map<Integer,Command> ackCache = new ConcurrentHashMap<>();\n+    private Map<Integer,Command> responseCache = new ConcurrentHashMap<>();\n+\n+\n+    public void cache(Integer taskInstanceId, Command command, Event event){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MDUxMg=="}, "originalCommit": {"oid": "8231036913dfa11da2dd3d4abf3781df92058acd"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQyNDY0OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/RetryReportTaskStatusThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowMzozMFrOHSnWEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToxMjoxMVrOHSnrHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MTA0MA==", "bodyText": "Should sleep.", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489281040", "createdAt": "2020-09-16T09:03:30Z", "author": {"login": "Technoboy-"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/RetryReportTaskStatusThread.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.worker.runner;\n+\n+import org.apache.dolphinscheduler.common.thread.Stopper;\n+\n+import org.apache.dolphinscheduler.common.thread.ThreadUtils;\n+import org.apache.dolphinscheduler.remote.command.Command;\n+import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;\n+import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;\n+import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+\n+/**\n+ * Retry Report Task Status Thread\n+ */\n+@Component\n+public class RetryReportTaskStatusThread implements Runnable {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RetryReportTaskStatusThread.class);\n+\n+    /**\n+     * every 5 minutes\n+     */\n+    private static long RETRY_REPORT_TASK_STATUS_TIME = 5 * 60 * 1000L;\n+    /**\n+     *  task callback service\n+     */\n+    private final TaskCallbackService taskCallbackService;\n+\n+    public void start(){\n+        Thread thread = new Thread(this,\"RetryReportTaskStatusThread\");\n+        thread.start();\n+    }\n+\n+    public RetryReportTaskStatusThread(){\n+        this.taskCallbackService = SpringApplicationContext.getBean(TaskCallbackService.class);\n+    }\n+    @Override\n+    public void run() {\n+        ResponceCache responceCache = ResponceCache.get();\n+\n+        while (Stopper.isRunning()){\n+            if (responceCache.getAckCache().isEmpty() && responceCache.getResponseCache().isEmpty()){\n+                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8231036913dfa11da2dd3d4abf3781df92058acd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4NjQyOA==", "bodyText": "ok", "url": "https://github.com/apache/dolphinscheduler/pull/3748#discussion_r489286428", "createdAt": "2020-09-16T09:12:11Z", "author": {"login": "qiaozhanwei"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/RetryReportTaskStatusThread.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.worker.runner;\n+\n+import org.apache.dolphinscheduler.common.thread.Stopper;\n+\n+import org.apache.dolphinscheduler.common.thread.ThreadUtils;\n+import org.apache.dolphinscheduler.remote.command.Command;\n+import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;\n+import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;\n+import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+\n+/**\n+ * Retry Report Task Status Thread\n+ */\n+@Component\n+public class RetryReportTaskStatusThread implements Runnable {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RetryReportTaskStatusThread.class);\n+\n+    /**\n+     * every 5 minutes\n+     */\n+    private static long RETRY_REPORT_TASK_STATUS_TIME = 5 * 60 * 1000L;\n+    /**\n+     *  task callback service\n+     */\n+    private final TaskCallbackService taskCallbackService;\n+\n+    public void start(){\n+        Thread thread = new Thread(this,\"RetryReportTaskStatusThread\");\n+        thread.start();\n+    }\n+\n+    public RetryReportTaskStatusThread(){\n+        this.taskCallbackService = SpringApplicationContext.getBean(TaskCallbackService.class);\n+    }\n+    @Override\n+    public void run() {\n+        ResponceCache responceCache = ResponceCache.get();\n+\n+        while (Stopper.isRunning()){\n+            if (responceCache.getAckCache().isEmpty() && responceCache.getResponseCache().isEmpty()){\n+                continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MTA0MA=="}, "originalCommit": {"oid": "8231036913dfa11da2dd3d4abf3781df92058acd"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3314, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}