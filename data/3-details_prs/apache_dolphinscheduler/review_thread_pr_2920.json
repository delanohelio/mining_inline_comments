{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI5OTA3MTg1", "number": 2920, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjozOTo1NlrOEFQHQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjo0MTowOVrOEFQHiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQyMzM3OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CollectionUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjozOTo1NlrOGjXXyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNTowN1rOGjyafA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNjI2NQ==", "bodyText": "I do not think foreach is better than fori ,especial for []", "url": "https://github.com/apache/dolphinscheduler/pull/2920#discussion_r439736265", "createdAt": "2020-06-13T12:39:56Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CollectionUtils.java", "diffHunk": "@@ -98,8 +98,8 @@ public static boolean isEmpty(Collection coll) {\n         }\n         String[] strings = str.split(separator);\n         Map<String, String> map = new HashMap<>(strings.length);\n-        for (int i = 0; i < strings.length; i++) {\n-            String[] strArray = strings[i].split(\"=\");\n+        for (String string : strings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f50436f4da6567e29eafc91b6489068128fd84e0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc4ODQ2MQ==", "bodyText": "I do not think foreach is better than fori ,especial for []\n\nWhen he doesn\u2019t use the index, it\u2019s not so elegant to use this form, what do you think?", "url": "https://github.com/apache/dolphinscheduler/pull/2920#discussion_r439788461", "createdAt": "2020-06-14T03:40:14Z", "author": {"login": "CalvinKirs"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CollectionUtils.java", "diffHunk": "@@ -98,8 +98,8 @@ public static boolean isEmpty(Collection coll) {\n         }\n         String[] strings = str.split(separator);\n         Map<String, String> map = new HashMap<>(strings.length);\n-        for (int i = 0; i < strings.length; i++) {\n-            String[] strArray = strings[i].split(\"=\");\n+        for (String string : strings) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNjI2NQ=="}, "originalCommit": {"oid": "f50436f4da6567e29eafc91b6489068128fd84e0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3OTMyNA==", "bodyText": "I don't think so .Using index to traverse array [] is a standard way ,right ? Why is it not elegant?\nforeach is better than fori when traversing List, Set, Array ,etc.", "url": "https://github.com/apache/dolphinscheduler/pull/2920#discussion_r440179324", "createdAt": "2020-06-15T13:35:07Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CollectionUtils.java", "diffHunk": "@@ -98,8 +98,8 @@ public static boolean isEmpty(Collection coll) {\n         }\n         String[] strings = str.split(separator);\n         Map<String, String> map = new HashMap<>(strings.length);\n-        for (int i = 0; i < strings.length; i++) {\n-            String[] strArray = strings[i].split(\"=\");\n+        for (String string : strings) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNjI2NQ=="}, "originalCommit": {"oid": "f50436f4da6567e29eafc91b6489068128fd84e0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQyNDA5OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/IpUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjo0MTowOVrOGjXYJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNzowM1rOGjyfXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNjM1Nw==", "bodyText": "why not StringBuilder?", "url": "https://github.com/apache/dolphinscheduler/pull/2920#discussion_r439736357", "createdAt": "2020-06-13T12:41:09Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/IpUtils.java", "diffHunk": "@@ -49,12 +49,11 @@ public static String longToIp(long ipLong) {\n     ipNumbers[2] = ipLong >> 8 & tmp;\n     ipNumbers[3] = ipLong & tmp;\n \n-    StringBuilder sb = new StringBuilder(16);\n-    sb.append(ipNumbers[0]).append(DOT)\n-            .append(ipNumbers[1]).append(DOT)\n-            .append(ipNumbers[2]).append(DOT)\n-            .append(ipNumbers[3]);\n-    return sb.toString();\n+    String sb = ipNumbers[0] + DOT +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f50436f4da6567e29eafc91b6489068128fd84e0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwOTgyNA==", "bodyText": "Because the use here is the same, and String performance is better in this case, the code is also more concise", "url": "https://github.com/apache/dolphinscheduler/pull/2920#discussion_r440009824", "createdAt": "2020-06-15T08:25:38Z", "author": {"login": "CalvinKirs"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/IpUtils.java", "diffHunk": "@@ -49,12 +49,11 @@ public static String longToIp(long ipLong) {\n     ipNumbers[2] = ipLong >> 8 & tmp;\n     ipNumbers[3] = ipLong & tmp;\n \n-    StringBuilder sb = new StringBuilder(16);\n-    sb.append(ipNumbers[0]).append(DOT)\n-            .append(ipNumbers[1]).append(DOT)\n-            .append(ipNumbers[2]).append(DOT)\n-            .append(ipNumbers[3]);\n-    return sb.toString();\n+    String sb = ipNumbers[0] + DOT +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNjM1Nw=="}, "originalCommit": {"oid": "f50436f4da6567e29eafc91b6489068128fd84e0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MDU3NA==", "bodyText": "In this case ,I think it's hard to say which one is better, however you might be right.", "url": "https://github.com/apache/dolphinscheduler/pull/2920#discussion_r440180574", "createdAt": "2020-06-15T13:37:03Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/IpUtils.java", "diffHunk": "@@ -49,12 +49,11 @@ public static String longToIp(long ipLong) {\n     ipNumbers[2] = ipLong >> 8 & tmp;\n     ipNumbers[3] = ipLong & tmp;\n \n-    StringBuilder sb = new StringBuilder(16);\n-    sb.append(ipNumbers[0]).append(DOT)\n-            .append(ipNumbers[1]).append(DOT)\n-            .append(ipNumbers[2]).append(DOT)\n-            .append(ipNumbers[3]);\n-    return sb.toString();\n+    String sb = ipNumbers[0] + DOT +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNjM1Nw=="}, "originalCommit": {"oid": "f50436f4da6567e29eafc91b6489068128fd84e0"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3501, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}