{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyNTA4ODY0", "number": 3244, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo0OTozNFrOEP6ifg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDo1MDo1MVrOEQdjtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzMTk4OnYy", "diffSide": "LEFT", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo0OTozNFrOGz0Wlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNDozMToxMlrOGz3dQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODMxMQ==", "bodyText": "Hi,\nGood job,\nBut why we need to delete the state changed and log for record the master address from MasterRegistry?", "url": "https://github.com/apache/dolphinscheduler/pull/3244#discussion_r456988311", "createdAt": "2020-07-20T01:49:34Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java", "diffHunk": "@@ -83,19 +83,6 @@ public void registry() {\n         String address = NetUtils.getHost();\n         String localNodePath = getMasterPath();\n         zookeeperRegistryCenter.getZookeeperCachedOperator().persistEphemeral(localNodePath, \"\");\n-        zookeeperRegistryCenter.getZookeeperCachedOperator().getZkClient().getConnectionStateListenable().addListener(new ConnectionStateListener() {\n-            @Override\n-            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n-                if(newState == ConnectionState.LOST){\n-                    logger.error(\"master : {} connection lost from zookeeper\", address);\n-                } else if(newState == ConnectionState.RECONNECTED){\n-                    logger.info(\"master : {} reconnected to zookeeper\", address);\n-                    zookeeperRegistryCenter.getZookeeperCachedOperator().persistEphemeral(localNodePath, \"\");\n-                } else if(newState == ConnectionState.SUSPENDED){\n-                    logger.warn(\"master : {} connection SUSPENDED \", address);\n-                }\n-            }\n-        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bab90cc204d39cabcacf56ebd39948fb8431940"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxMjAwNw==", "bodyText": "Because the connect state has been listened in the newly added class CuratorZookeeperClient", "url": "https://github.com/apache/dolphinscheduler/pull/3244#discussion_r457012007", "createdAt": "2020-07-20T03:22:17Z", "author": {"login": "tswstarplanet"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java", "diffHunk": "@@ -83,19 +83,6 @@ public void registry() {\n         String address = NetUtils.getHost();\n         String localNodePath = getMasterPath();\n         zookeeperRegistryCenter.getZookeeperCachedOperator().persistEphemeral(localNodePath, \"\");\n-        zookeeperRegistryCenter.getZookeeperCachedOperator().getZkClient().getConnectionStateListenable().addListener(new ConnectionStateListener() {\n-            @Override\n-            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n-                if(newState == ConnectionState.LOST){\n-                    logger.error(\"master : {} connection lost from zookeeper\", address);\n-                } else if(newState == ConnectionState.RECONNECTED){\n-                    logger.info(\"master : {} reconnected to zookeeper\", address);\n-                    zookeeperRegistryCenter.getZookeeperCachedOperator().persistEphemeral(localNodePath, \"\");\n-                } else if(newState == ConnectionState.SUSPENDED){\n-                    logger.warn(\"master : {} connection SUSPENDED \", address);\n-                }\n-            }\n-        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODMxMQ=="}, "originalCommit": {"oid": "3bab90cc204d39cabcacf56ebd39948fb8431940"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNDI4Nw==", "bodyText": "Hi,\nGood job,\nBut why we need to delete the state changed and log for record the master address from MasterRegistry?\n\nActually the CuratorZookeeperClient log will lost the log for record the master address information. And I think the master zk address info is important for user to debug. Is it better to add the address info in CuratorZookeeperClient?", "url": "https://github.com/apache/dolphinscheduler/pull/3244#discussion_r457024287", "createdAt": "2020-07-20T03:54:57Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java", "diffHunk": "@@ -83,19 +83,6 @@ public void registry() {\n         String address = NetUtils.getHost();\n         String localNodePath = getMasterPath();\n         zookeeperRegistryCenter.getZookeeperCachedOperator().persistEphemeral(localNodePath, \"\");\n-        zookeeperRegistryCenter.getZookeeperCachedOperator().getZkClient().getConnectionStateListenable().addListener(new ConnectionStateListener() {\n-            @Override\n-            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n-                if(newState == ConnectionState.LOST){\n-                    logger.error(\"master : {} connection lost from zookeeper\", address);\n-                } else if(newState == ConnectionState.RECONNECTED){\n-                    logger.info(\"master : {} reconnected to zookeeper\", address);\n-                    zookeeperRegistryCenter.getZookeeperCachedOperator().persistEphemeral(localNodePath, \"\");\n-                } else if(newState == ConnectionState.SUSPENDED){\n-                    logger.warn(\"master : {} connection SUSPENDED \", address);\n-                }\n-            }\n-        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODMxMQ=="}, "originalCommit": {"oid": "3bab90cc204d39cabcacf56ebd39948fb8431940"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAzOTE3MA==", "bodyText": "I think you are right. Solved.", "url": "https://github.com/apache/dolphinscheduler/pull/3244#discussion_r457039170", "createdAt": "2020-07-20T04:31:12Z", "author": {"login": "tswstarplanet"}, "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java", "diffHunk": "@@ -83,19 +83,6 @@ public void registry() {\n         String address = NetUtils.getHost();\n         String localNodePath = getMasterPath();\n         zookeeperRegistryCenter.getZookeeperCachedOperator().persistEphemeral(localNodePath, \"\");\n-        zookeeperRegistryCenter.getZookeeperCachedOperator().getZkClient().getConnectionStateListenable().addListener(new ConnectionStateListener() {\n-            @Override\n-            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n-                if(newState == ConnectionState.LOST){\n-                    logger.error(\"master : {} connection lost from zookeeper\", address);\n-                } else if(newState == ConnectionState.RECONNECTED){\n-                    logger.info(\"master : {} reconnected to zookeeper\", address);\n-                    zookeeperRegistryCenter.getZookeeperCachedOperator().persistEphemeral(localNodePath, \"\");\n-                } else if(newState == ConnectionState.SUSPENDED){\n-                    logger.warn(\"master : {} connection SUSPENDED \", address);\n-                }\n-            }\n-        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODMxMQ=="}, "originalCommit": {"oid": "3bab90cc204d39cabcacf56ebd39948fb8431940"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Njk2OTQ4OnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/CuratorZookeeperClient.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDo1MDo1MVrOG0n_0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDo1ODowN1rOG1St3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzNDQ1MA==", "bodyText": "Hi,\nBecause remove the master zk address log from MasterRegistry, please add the master zk address to log, not the zk server info.\n\n\u56e0\u4e3a\u6211\u4eec\u662f\u4ecemasterregistry\u4e2d\u5220\u9664\u4e86master zk\u8282\u70b9\u7684\u65e5\u5fd7\uff0c\u60f3\u8981\u6dfb\u52a0\u5230CuratorZkCLient\u4e2d\u3002\u6240\u4ee5CuratorZkCLient\u65e5\u5fd7\u4fe1\u606f\u5e94\u8be5\u662fmaster zk\u8282\u70b9\u7684\u65e5\u5fd7\u4fe1\u606f\uff0c\u800c\u4e0d\u662fzk\u5730\u5740\u4fe1\u606f\u3002\nIf you have any question or suggestion, please put forward.", "url": "https://github.com/apache/dolphinscheduler/pull/3244#discussion_r457834450", "createdAt": "2020-07-21T04:50:51Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/CuratorZookeeperClient.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.service.zk;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.api.ACLProvider;\n+import org.apache.curator.framework.state.ConnectionState;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.apache.zookeeper.ZooDefs;\n+import org.apache.zookeeper.data.ACL;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import static org.apache.dolphinscheduler.common.utils.Preconditions.checkNotNull;\n+\n+/**\n+ * Shared Curator zookeeper client\n+ */\n+@Component\n+public class CuratorZookeeperClient implements InitializingBean {\n+    private final Logger logger = LoggerFactory.getLogger(CuratorZookeeperClient.class);\n+\n+    @Autowired\n+    private ZookeeperConfig zookeeperConfig;\n+\n+    private CuratorFramework zkClient;\n+\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        this.zkClient = buildClient();\n+        initStateLister();\n+    }\n+\n+    private CuratorFramework buildClient() {\n+        logger.info(\"zookeeper registry center init, server lists is: {}.\", zookeeperConfig.getServerList());\n+\n+        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder().ensembleProvider(new DefaultEnsembleProvider(checkNotNull(zookeeperConfig.getServerList(),\"zookeeper quorum can't be null\")))\n+                .retryPolicy(new ExponentialBackoffRetry(zookeeperConfig.getBaseSleepTimeMs(), zookeeperConfig.getMaxRetries(), zookeeperConfig.getMaxSleepMs()));\n+\n+        //these has default value\n+        if (0 != zookeeperConfig.getSessionTimeoutMs()) {\n+            builder.sessionTimeoutMs(zookeeperConfig.getSessionTimeoutMs());\n+        }\n+        if (0 != zookeeperConfig.getConnectionTimeoutMs()) {\n+            builder.connectionTimeoutMs(zookeeperConfig.getConnectionTimeoutMs());\n+        }\n+        if (StringUtils.isNotBlank(zookeeperConfig.getDigest())) {\n+            builder.authorization(\"digest\", zookeeperConfig.getDigest().getBytes(StandardCharsets.UTF_8)).aclProvider(new ACLProvider() {\n+\n+                @Override\n+                public List<ACL> getDefaultAcl() {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+\n+                @Override\n+                public List<ACL> getAclForPath(final String path) {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+            });\n+        }\n+        zkClient = builder.build();\n+        zkClient.start();\n+        try {\n+            zkClient.blockUntilConnected();\n+        } catch (final Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n+        return zkClient;\n+    }\n+\n+    public void initStateLister() {\n+        checkNotNull(zkClient);\n+\n+        zkClient.getConnectionStateListenable().addListener((client, newState) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e67e2e09e616e89f8371794d739a0bdcf2785c82"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2Njk3OQ==", "bodyText": "\u4f60\u597d\uff0c\u539f\u6765\u7684\u65e5\u5fd7\u6253\u5370\u7684\u4e5f\u662fzookeeper\u7684\u5730\u5740\u3002\u53e6\u5916\uff0c\u8fd9\u79cd\u8fde\u63a5\u72b6\u6001\u7684\u76d1\u63a7\uff0c\u5e94\u8be5\u662f\u7528\u4e00\u4e2alistener\u76d1\u542c\u5c31\u53ef\u4ee5\u4e86\uff0c\u91cd\u590d\u7684\u76d1\u542c\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002", "url": "https://github.com/apache/dolphinscheduler/pull/3244#discussion_r457866979", "createdAt": "2020-07-21T06:32:27Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/CuratorZookeeperClient.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.service.zk;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.api.ACLProvider;\n+import org.apache.curator.framework.state.ConnectionState;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.apache.zookeeper.ZooDefs;\n+import org.apache.zookeeper.data.ACL;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import static org.apache.dolphinscheduler.common.utils.Preconditions.checkNotNull;\n+\n+/**\n+ * Shared Curator zookeeper client\n+ */\n+@Component\n+public class CuratorZookeeperClient implements InitializingBean {\n+    private final Logger logger = LoggerFactory.getLogger(CuratorZookeeperClient.class);\n+\n+    @Autowired\n+    private ZookeeperConfig zookeeperConfig;\n+\n+    private CuratorFramework zkClient;\n+\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        this.zkClient = buildClient();\n+        initStateLister();\n+    }\n+\n+    private CuratorFramework buildClient() {\n+        logger.info(\"zookeeper registry center init, server lists is: {}.\", zookeeperConfig.getServerList());\n+\n+        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder().ensembleProvider(new DefaultEnsembleProvider(checkNotNull(zookeeperConfig.getServerList(),\"zookeeper quorum can't be null\")))\n+                .retryPolicy(new ExponentialBackoffRetry(zookeeperConfig.getBaseSleepTimeMs(), zookeeperConfig.getMaxRetries(), zookeeperConfig.getMaxSleepMs()));\n+\n+        //these has default value\n+        if (0 != zookeeperConfig.getSessionTimeoutMs()) {\n+            builder.sessionTimeoutMs(zookeeperConfig.getSessionTimeoutMs());\n+        }\n+        if (0 != zookeeperConfig.getConnectionTimeoutMs()) {\n+            builder.connectionTimeoutMs(zookeeperConfig.getConnectionTimeoutMs());\n+        }\n+        if (StringUtils.isNotBlank(zookeeperConfig.getDigest())) {\n+            builder.authorization(\"digest\", zookeeperConfig.getDigest().getBytes(StandardCharsets.UTF_8)).aclProvider(new ACLProvider() {\n+\n+                @Override\n+                public List<ACL> getDefaultAcl() {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+\n+                @Override\n+                public List<ACL> getAclForPath(final String path) {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+            });\n+        }\n+        zkClient = builder.build();\n+        zkClient.start();\n+        try {\n+            zkClient.blockUntilConnected();\n+        } catch (final Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n+        return zkClient;\n+    }\n+\n+    public void initStateLister() {\n+        checkNotNull(zkClient);\n+\n+        zkClient.getConnectionStateListenable().addListener((client, newState) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzNDQ1MA=="}, "originalCommit": {"oid": "e67e2e09e616e89f8371794d739a0bdcf2785c82"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2ODExMg==", "bodyText": "\u53c8\u770b\u4e86\u4e00\u4e0b\uff0c\u8fd9\u91cc\u4e0d\u53ea\u662f\u65e5\u5fd7\u7684\u95ee\u9898\uff0c\u800c\u662f\u539f\u6765\u4ee3\u7801\u91cc\u5728Reconnected\u7684\u65f6\u5019\uff0c\u6709\u4e2a\u4fdd\u5b58\u4e34\u65f6\u8282\u70b9\u7684\u64cd\u4f5c\u3002\u90a3\u53ef\u80fd\u786e\u5b9e\u4e0d\u80fd\u7b80\u5355\u5730\u5220\u6389\uff0c\u8fd8\u8981\u518d\u5206\u6790\u4e0b", "url": "https://github.com/apache/dolphinscheduler/pull/3244#discussion_r457868112", "createdAt": "2020-07-21T06:35:05Z", "author": {"login": "tswstarplanet"}, "path": "dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/CuratorZookeeperClient.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.service.zk;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.api.ACLProvider;\n+import org.apache.curator.framework.state.ConnectionState;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.apache.zookeeper.ZooDefs;\n+import org.apache.zookeeper.data.ACL;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import static org.apache.dolphinscheduler.common.utils.Preconditions.checkNotNull;\n+\n+/**\n+ * Shared Curator zookeeper client\n+ */\n+@Component\n+public class CuratorZookeeperClient implements InitializingBean {\n+    private final Logger logger = LoggerFactory.getLogger(CuratorZookeeperClient.class);\n+\n+    @Autowired\n+    private ZookeeperConfig zookeeperConfig;\n+\n+    private CuratorFramework zkClient;\n+\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        this.zkClient = buildClient();\n+        initStateLister();\n+    }\n+\n+    private CuratorFramework buildClient() {\n+        logger.info(\"zookeeper registry center init, server lists is: {}.\", zookeeperConfig.getServerList());\n+\n+        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder().ensembleProvider(new DefaultEnsembleProvider(checkNotNull(zookeeperConfig.getServerList(),\"zookeeper quorum can't be null\")))\n+                .retryPolicy(new ExponentialBackoffRetry(zookeeperConfig.getBaseSleepTimeMs(), zookeeperConfig.getMaxRetries(), zookeeperConfig.getMaxSleepMs()));\n+\n+        //these has default value\n+        if (0 != zookeeperConfig.getSessionTimeoutMs()) {\n+            builder.sessionTimeoutMs(zookeeperConfig.getSessionTimeoutMs());\n+        }\n+        if (0 != zookeeperConfig.getConnectionTimeoutMs()) {\n+            builder.connectionTimeoutMs(zookeeperConfig.getConnectionTimeoutMs());\n+        }\n+        if (StringUtils.isNotBlank(zookeeperConfig.getDigest())) {\n+            builder.authorization(\"digest\", zookeeperConfig.getDigest().getBytes(StandardCharsets.UTF_8)).aclProvider(new ACLProvider() {\n+\n+                @Override\n+                public List<ACL> getDefaultAcl() {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+\n+                @Override\n+                public List<ACL> getAclForPath(final String path) {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+            });\n+        }\n+        zkClient = builder.build();\n+        zkClient.start();\n+        try {\n+            zkClient.blockUntilConnected();\n+        } catch (final Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n+        return zkClient;\n+    }\n+\n+    public void initStateLister() {\n+        checkNotNull(zkClient);\n+\n+        zkClient.getConnectionStateListenable().addListener((client, newState) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzNDQ1MA=="}, "originalCommit": {"oid": "e67e2e09e616e89f8371794d739a0bdcf2785c82"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2OTExNw==", "bodyText": "\u53c8\u770b\u4e86\u4e00\u4e0b\uff0c\u8fd9\u91cc\u4e0d\u662f\u65e5\u5fd7\u7684\u95ee\u9898\uff0c\u800c\u662f\u539f\u6765\u4ee3\u7801\u91cc\u5728Reconnected\u7684\u65f6\u5019\uff0c\u6709\u4e2a\u4fdd\u5b58\u4e34\u65f6\u8282\u70b9\u7684\u64cd\u4f5c\u3002\u90a3\u53ef\u80fd\u786e\u5b9e\u4e0d\u80fd\u7b80\u5355\u5730\u5220\u6389\uff0c\u8fd8\u8981\u518d\u5206\u6790\u4e0b\n\nI agree with you~", "url": "https://github.com/apache/dolphinscheduler/pull/3244#discussion_r457869117", "createdAt": "2020-07-21T06:37:26Z", "author": {"login": "yangyichao-mango"}, "path": "dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/CuratorZookeeperClient.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.service.zk;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.api.ACLProvider;\n+import org.apache.curator.framework.state.ConnectionState;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.apache.zookeeper.ZooDefs;\n+import org.apache.zookeeper.data.ACL;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import static org.apache.dolphinscheduler.common.utils.Preconditions.checkNotNull;\n+\n+/**\n+ * Shared Curator zookeeper client\n+ */\n+@Component\n+public class CuratorZookeeperClient implements InitializingBean {\n+    private final Logger logger = LoggerFactory.getLogger(CuratorZookeeperClient.class);\n+\n+    @Autowired\n+    private ZookeeperConfig zookeeperConfig;\n+\n+    private CuratorFramework zkClient;\n+\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        this.zkClient = buildClient();\n+        initStateLister();\n+    }\n+\n+    private CuratorFramework buildClient() {\n+        logger.info(\"zookeeper registry center init, server lists is: {}.\", zookeeperConfig.getServerList());\n+\n+        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder().ensembleProvider(new DefaultEnsembleProvider(checkNotNull(zookeeperConfig.getServerList(),\"zookeeper quorum can't be null\")))\n+                .retryPolicy(new ExponentialBackoffRetry(zookeeperConfig.getBaseSleepTimeMs(), zookeeperConfig.getMaxRetries(), zookeeperConfig.getMaxSleepMs()));\n+\n+        //these has default value\n+        if (0 != zookeeperConfig.getSessionTimeoutMs()) {\n+            builder.sessionTimeoutMs(zookeeperConfig.getSessionTimeoutMs());\n+        }\n+        if (0 != zookeeperConfig.getConnectionTimeoutMs()) {\n+            builder.connectionTimeoutMs(zookeeperConfig.getConnectionTimeoutMs());\n+        }\n+        if (StringUtils.isNotBlank(zookeeperConfig.getDigest())) {\n+            builder.authorization(\"digest\", zookeeperConfig.getDigest().getBytes(StandardCharsets.UTF_8)).aclProvider(new ACLProvider() {\n+\n+                @Override\n+                public List<ACL> getDefaultAcl() {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+\n+                @Override\n+                public List<ACL> getAclForPath(final String path) {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+            });\n+        }\n+        zkClient = builder.build();\n+        zkClient.start();\n+        try {\n+            zkClient.blockUntilConnected();\n+        } catch (final Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n+        return zkClient;\n+    }\n+\n+    public void initStateLister() {\n+        checkNotNull(zkClient);\n+\n+        zkClient.getConnectionStateListenable().addListener((client, newState) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzNDQ1MA=="}, "originalCommit": {"oid": "e67e2e09e616e89f8371794d739a0bdcf2785c82"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNDM2Nw==", "bodyText": "\u5df2\u7ecf\u628a\u5bf9\u8fd9\u4e2a\u7c7b\u7684\u4fee\u6539\u6062\u590d\u4e86", "url": "https://github.com/apache/dolphinscheduler/pull/3244#discussion_r458534367", "createdAt": "2020-07-22T04:58:07Z", "author": {"login": "tswstarplanet"}, "path": "dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/CuratorZookeeperClient.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.service.zk;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.api.ACLProvider;\n+import org.apache.curator.framework.state.ConnectionState;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.apache.zookeeper.ZooDefs;\n+import org.apache.zookeeper.data.ACL;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import static org.apache.dolphinscheduler.common.utils.Preconditions.checkNotNull;\n+\n+/**\n+ * Shared Curator zookeeper client\n+ */\n+@Component\n+public class CuratorZookeeperClient implements InitializingBean {\n+    private final Logger logger = LoggerFactory.getLogger(CuratorZookeeperClient.class);\n+\n+    @Autowired\n+    private ZookeeperConfig zookeeperConfig;\n+\n+    private CuratorFramework zkClient;\n+\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        this.zkClient = buildClient();\n+        initStateLister();\n+    }\n+\n+    private CuratorFramework buildClient() {\n+        logger.info(\"zookeeper registry center init, server lists is: {}.\", zookeeperConfig.getServerList());\n+\n+        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder().ensembleProvider(new DefaultEnsembleProvider(checkNotNull(zookeeperConfig.getServerList(),\"zookeeper quorum can't be null\")))\n+                .retryPolicy(new ExponentialBackoffRetry(zookeeperConfig.getBaseSleepTimeMs(), zookeeperConfig.getMaxRetries(), zookeeperConfig.getMaxSleepMs()));\n+\n+        //these has default value\n+        if (0 != zookeeperConfig.getSessionTimeoutMs()) {\n+            builder.sessionTimeoutMs(zookeeperConfig.getSessionTimeoutMs());\n+        }\n+        if (0 != zookeeperConfig.getConnectionTimeoutMs()) {\n+            builder.connectionTimeoutMs(zookeeperConfig.getConnectionTimeoutMs());\n+        }\n+        if (StringUtils.isNotBlank(zookeeperConfig.getDigest())) {\n+            builder.authorization(\"digest\", zookeeperConfig.getDigest().getBytes(StandardCharsets.UTF_8)).aclProvider(new ACLProvider() {\n+\n+                @Override\n+                public List<ACL> getDefaultAcl() {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+\n+                @Override\n+                public List<ACL> getAclForPath(final String path) {\n+                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n+                }\n+            });\n+        }\n+        zkClient = builder.build();\n+        zkClient.start();\n+        try {\n+            zkClient.blockUntilConnected();\n+        } catch (final Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n+        return zkClient;\n+    }\n+\n+    public void initStateLister() {\n+        checkNotNull(zkClient);\n+\n+        zkClient.getConnectionStateListenable().addListener((client, newState) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzNDQ1MA=="}, "originalCommit": {"oid": "e67e2e09e616e89f8371794d739a0bdcf2785c82"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3349, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}