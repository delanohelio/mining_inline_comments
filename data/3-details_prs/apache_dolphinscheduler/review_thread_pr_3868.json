{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3ODcwOTI3", "number": 3868, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxMToxNFrOEsPPKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxMjoxMFrOEsPPgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODIyNDQyOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/handler/NettyClientHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxMToxNFrOHfcZaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzozNToxMFrOHfc2Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMzE2MA==", "bodyText": "It's better if we distinguish the READER_IDLE and WRITER_IDLE event", "url": "https://github.com/apache/dolphinscheduler/pull/3868#discussion_r502733160", "createdAt": "2020-10-10T02:11:14Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/handler/NettyClientHandler.java", "diffHunk": "@@ -175,4 +183,16 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E\n         ctx.channel().close();\n     }\n \n+    @Override\n+    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n+        if (evt instanceof IdleStateEvent) {\n+            Command heartBeat = new Command();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3932af57185d7db06c1e5fb84777db26193ec2f1"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MDUzOQ==", "bodyText": "As far as heartbeat detection is concerned, this seems to be redundant. Regardless of the read and write events, they are all the same events. What do you think?", "url": "https://github.com/apache/dolphinscheduler/pull/3868#discussion_r502740539", "createdAt": "2020-10-10T03:35:10Z", "author": {"login": "CalvinKirs"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/handler/NettyClientHandler.java", "diffHunk": "@@ -175,4 +183,16 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E\n         ctx.channel().close();\n     }\n \n+    @Override\n+    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n+        if (evt instanceof IdleStateEvent) {\n+            Command heartBeat = new Command();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMzE2MA=="}, "originalCommit": {"oid": "3932af57185d7db06c1e5fb84777db26193ec2f1"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODIyNTMwOnYy", "diffSide": "RIGHT", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/handler/NettyServerHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxMjoxMFrOHfcZyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjoxMjoxMFrOHfcZyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMzI1OQ==", "bodyText": "It's better if we distinguish the READER_IDLE and WRITER_IDLE event", "url": "https://github.com/apache/dolphinscheduler/pull/3868#discussion_r502733259", "createdAt": "2020-10-10T02:12:10Z", "author": {"login": "gabrywu"}, "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/handler/NettyServerHandler.java", "diffHunk": "@@ -158,16 +168,26 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exceptio\n         if (!ch.isWritable()) {\n             if (logger.isWarnEnabled()) {\n                 logger.warn(\"{} is not writable, over high water level : {}\",\n-                        ch, config.getWriteBufferHighWaterMark());\n+                    ch, config.getWriteBufferHighWaterMark());\n             }\n \n             config.setAutoRead(false);\n         } else {\n             if (logger.isWarnEnabled()) {\n                 logger.warn(\"{} is writable, to low water : {}\",\n-                        ch, config.getWriteBufferLowWaterMark());\n+                    ch, config.getWriteBufferLowWaterMark());\n             }\n             config.setAutoRead(true);\n         }\n     }\n+\n+    @Override\n+    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n+        // send heartbeat when read idle.\n+        if (evt instanceof IdleStateEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3932af57185d7db06c1e5fb84777db26193ec2f1"}, "originalPosition": 162}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3265, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}