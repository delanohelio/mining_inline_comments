{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzE0NDY1", "number": 7943, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjo0NDoyN1rOD9YJaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDo0MzozNFrOEACIgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Njg1MzUyOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/aws/AwsCloudProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjo0NDoyN1rOGW1cIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjo0NDoyN1rOGW1cIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NzQwOQ==", "bodyText": "100 should be getSpotPercentage()", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r426597409", "createdAt": "2020-05-18T12:44:27Z", "author": {"login": "bergerdenes"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/aws/AwsCloudProvider.java", "diffHunk": "@@ -371,6 +391,28 @@ public void setInstanceTemplateV1Parameters(InstanceTemplateV1Request instanceTe\n         AwsEncryptionV1Parameters awsEncryptionV1Parameters = new AwsEncryptionV1Parameters();\n         awsEncryptionV1Parameters.setType(EncryptionType.DEFAULT);\n         awsInstanceTemplateV1Parameters.setEncryption(awsEncryptionV1Parameters);\n+        awsInstanceTemplateV1Parameters.setSpot(getAwsInstanceTemplateV1SpotParameters());\n         instanceTemplateV1Request.setAws(awsInstanceTemplateV1Parameters);\n     }\n+\n+    private AwsInstanceTemplateV1SpotParameters getAwsInstanceTemplateV1SpotParameters() {\n+        AwsInstanceTemplateV1SpotParameters awsInstanceTemplateV1SpotParameters = new AwsInstanceTemplateV1SpotParameters();\n+        awsInstanceTemplateV1SpotParameters.setPercentage(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283c9a8d36ba8ad706d5fa5d8567282584e99925"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTUzMjQ0OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/AbstractCloudProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1NDo1MVrOGYxsvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1NDo1MVrOGYxsvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMzI3Nw==", "bodyText": "this class uses DTOs only as return values. The AttachedFreeIpaRequest has its own DTO counterpart: FreeIpaCreationDto. Check please how could you utilize that.", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r428633277", "createdAt": "2020-05-21T12:54:51Z", "author": {"login": "bergerdenes"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/AbstractCloudProvider.java", "diffHunk": "@@ -173,6 +174,11 @@ public EnvironmentSecurityAccessTestDto environmentSecurityAccess(EnvironmentSec\n         return environmentSecurityAccessTestDto;\n     }\n \n+    @Override\n+    public AttachedFreeIpaRequest getAttachedFreeIpaRequest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91aa09dd8c62df899c67ec8c52c209642a09bcec"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTUzNDk5OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/CloudProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1NTozM1rOGYxuRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1NTozM1rOGYxuRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMzY2OA==", "bodyText": "Use DTO please.", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r428633668", "createdAt": "2020-05-21T12:55:33Z", "author": {"login": "bergerdenes"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/cloud/v4/CloudProvider.java", "diffHunk": "@@ -137,4 +138,6 @@\n \n     void setInstanceTemplateV1Parameters(InstanceTemplateV1Request instanceTemplateV1Request);\n \n+    AttachedFreeIpaRequest getAttachedFreeIpaRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91aa09dd8c62df899c67ec8c52c209642a09bcec"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTU5MjIwOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotRetryOnceTestListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzoxNDoxN1rOGYySqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTozNDozNFrOGbFMFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0Mjk4NQ==", "bodyText": "might worth logging the retested method or some other metadata", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r428642985", "createdAt": "2020-05-21T13:14:17Z", "author": {"login": "bergerdenes"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotRetryOnceTestListener.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.sequenceiq.it.cloudbreak.util.spot;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestListener;\n+import org.testng.ITestNGMethod;\n+import org.testng.ITestResult;\n+\n+@Component\n+public class SpotRetryOnceTestListener implements ITestListener {\n+\n+    /**\n+     * Add {@link SpotRetryOnce} retry analyzer to test methods that should be retried on failure.\n+     */\n+    @Override\n+    public void onTestStart(ITestResult result) {\n+        ITestNGMethod testNGMethod = result.getMethod();\n+        if (SpotUtil.shouldUseSpotInstances(testNGMethod.getConstructorOrMethod().getMethod())) {\n+            testNGMethod.setRetryAnalyzerClass(SpotRetryOnce.class);\n+        }\n+    }\n+\n+    public static class SpotRetryOnce implements IRetryAnalyzer {\n+\n+        private static final Logger LOGGER = LoggerFactory.getLogger(SpotRetryOnce.class);\n+\n+        @Override\n+        public boolean retry(ITestResult result) {\n+            if (SpotRetryUtil.willRetry(result.getMethod())) {\n+                LOGGER.info(\"Retrying test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91aa09dd8c62df899c67ec8c52c209642a09bcec"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0OTc1MQ==", "bodyText": "This is the full log line written:\n13:33:32.279 [main] INFO  c.s.i.c.u.s.SpotRetryOnceTestListener$SpotRetryOnce [UseSpotInstancesExampleTest.failure] - Retrying test\nIt contains the test class and method name.", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r431049751", "createdAt": "2020-05-27T11:34:34Z", "author": {"login": "Bajzathd"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotRetryOnceTestListener.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.sequenceiq.it.cloudbreak.util.spot;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import org.testng.IRetryAnalyzer;\n+import org.testng.ITestListener;\n+import org.testng.ITestNGMethod;\n+import org.testng.ITestResult;\n+\n+@Component\n+public class SpotRetryOnceTestListener implements ITestListener {\n+\n+    /**\n+     * Add {@link SpotRetryOnce} retry analyzer to test methods that should be retried on failure.\n+     */\n+    @Override\n+    public void onTestStart(ITestResult result) {\n+        ITestNGMethod testNGMethod = result.getMethod();\n+        if (SpotUtil.shouldUseSpotInstances(testNGMethod.getConstructorOrMethod().getMethod())) {\n+            testNGMethod.setRetryAnalyzerClass(SpotRetryOnce.class);\n+        }\n+    }\n+\n+    public static class SpotRetryOnce implements IRetryAnalyzer {\n+\n+        private static final Logger LOGGER = LoggerFactory.getLogger(SpotRetryOnce.class);\n+\n+        @Override\n+        public boolean retry(ITestResult result) {\n+            if (SpotRetryUtil.willRetry(result.getMethod())) {\n+                LOGGER.info(\"Retrying test\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0Mjk4NQ=="}, "originalCommit": {"oid": "91aa09dd8c62df899c67ec8c52c209642a09bcec"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDcwNDAwOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDo0MzozNFrOGbDqfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDo0MzozNFrOGbDqfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAyNDc2NA==", "bodyText": "pls move this method to the bottom", "url": "https://github.com/hortonworks/cloudbreak/pull/7943#discussion_r431024764", "createdAt": "2020-05-27T10:43:34Z", "author": {"login": "bergerdenes"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/spot/SpotUtil.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.it.cloudbreak.util.spot;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.it.cloudbreak.cloud.v4.CommonCloudProperties;\n+import com.sequenceiq.it.cloudbreak.config.SpotProperties;\n+\n+@Component\n+public class SpotUtil {\n+\n+    private static final ThreadLocal<Boolean> USE_SPOT_INSTANCES = new ThreadLocal<>();\n+\n+    private final SpotProperties spotProperties;\n+\n+    private final CommonCloudProperties commonCloudProperties;\n+\n+    public SpotUtil(SpotProperties spotProperties, CommonCloudProperties commonCloudProperties) {\n+        this.spotProperties = spotProperties;\n+        this.commonCloudProperties = commonCloudProperties;\n+    }\n+\n+    public boolean shouldUseSpotInstancesForTest(Method testMethod) {\n+        return spotIsEnabledOnCurrentCloudPlatform()\n+                && testMethod.isAnnotationPresent(UseSpotInstances.class);\n+    }\n+\n+    private boolean spotIsEnabledOnCurrentCloudPlatform() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa9d025eb6e99c94aca7164c3465c7e15672059f"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2520, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}