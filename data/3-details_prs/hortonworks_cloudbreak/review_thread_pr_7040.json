{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMDA2MjY5", "number": 7040, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNToxMjo1MlrODW4ndQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNToxMjo1MlrODW4ndQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzIyODY5OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerHostStatusChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNToxMjo1MlrOFb5Lng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNToxOToxN1rOFb5aSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc5MjczNA==", "bodyText": "Instead of now I would call it start as it's kind of misleading.", "url": "https://github.com/hortonworks/cloudbreak/pull/7040#discussion_r364792734", "createdAt": "2020-01-09T15:12:52Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerHostStatusChecker.java", "diffHunk": "@@ -48,6 +41,31 @@ protected boolean doStatusCheck(ClouderaManagerPollerObject pollerObject, Comman\n         }\n     }\n \n+    private List<InstanceMetaData> collectNotKnownInstancesByManager(ClouderaManagerPollerObject pollerObject, List<String> hostIpsFromManager) {\n+        return pollerObject.getStack().getInstanceMetaDataAsList().stream()\n+                    .filter(metaData -> metaData.getDiscoveryFQDN() != null)\n+                    .filter(metaData -> !metaData.isTerminated() && !metaData.isDeletedOnProvider())\n+                    .filter(metaData -> !hostIpsFromManager.contains(metaData.getPrivateIp()))\n+                    .collect(Collectors.toList());\n+    }\n+\n+    private List<String> fetchHeartbeatedHostIpsFromManager(ClouderaManagerPollerObject pollerObject) throws ApiException {\n+        HostsResourceApi hostsResourceApi = new HostsResourceApi(pollerObject.getApiClient());\n+        String viewType = \"FULL\";\n+        ApiHostList hostList = hostsResourceApi.readHosts(viewType);\n+        List<String> hostIpsFromManager = filterForHeartBeatedIps(hostList);\n+        LOGGER.debug(\"Hosts in the list from manager: \" + hostIpsFromManager);\n+        return hostIpsFromManager;\n+    }\n+\n+    private List<String> filterForHeartBeatedIps(ApiHostList hostList) {\n+        return hostList.getItems().stream()\n+                    .filter(item -> StringUtils.isNotBlank(item.getLastHeartbeat()))\n+                    .filter(item -> now.isBefore(Instant.parse(item.getLastHeartbeat())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc5NjQ5MQ==", "bodyText": "sure, renamed", "url": "https://github.com/hortonworks/cloudbreak/pull/7040#discussion_r364796491", "createdAt": "2020-01-09T15:19:17Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerHostStatusChecker.java", "diffHunk": "@@ -48,6 +41,31 @@ protected boolean doStatusCheck(ClouderaManagerPollerObject pollerObject, Comman\n         }\n     }\n \n+    private List<InstanceMetaData> collectNotKnownInstancesByManager(ClouderaManagerPollerObject pollerObject, List<String> hostIpsFromManager) {\n+        return pollerObject.getStack().getInstanceMetaDataAsList().stream()\n+                    .filter(metaData -> metaData.getDiscoveryFQDN() != null)\n+                    .filter(metaData -> !metaData.isTerminated() && !metaData.isDeletedOnProvider())\n+                    .filter(metaData -> !hostIpsFromManager.contains(metaData.getPrivateIp()))\n+                    .collect(Collectors.toList());\n+    }\n+\n+    private List<String> fetchHeartbeatedHostIpsFromManager(ClouderaManagerPollerObject pollerObject) throws ApiException {\n+        HostsResourceApi hostsResourceApi = new HostsResourceApi(pollerObject.getApiClient());\n+        String viewType = \"FULL\";\n+        ApiHostList hostList = hostsResourceApi.readHosts(viewType);\n+        List<String> hostIpsFromManager = filterForHeartBeatedIps(hostList);\n+        LOGGER.debug(\"Hosts in the list from manager: \" + hostIpsFromManager);\n+        return hostIpsFromManager;\n+    }\n+\n+    private List<String> filterForHeartBeatedIps(ApiHostList hostList) {\n+        return hostList.getItems().stream()\n+                    .filter(item -> StringUtils.isNotBlank(item.getLastHeartbeat()))\n+                    .filter(item -> now.isBefore(Instant.parse(item.getLastHeartbeat())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc5MjczNA=="}, "originalCommit": null, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2912, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}