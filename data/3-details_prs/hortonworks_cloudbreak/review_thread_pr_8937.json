{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMzgzNDAz", "number": 8937, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjowMDo1NVrOEig-LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo0NTo1OFrOEimKmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI3MjQ1OnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ResourcePermissionChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjowMDo1NVrOHQb_tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo1MDowOVrOHRSMAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5Nzk0MQ==", "bodyText": "could you add an else branch or restructure the code so you won't have a return in the middle of the method?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r486997941", "createdAt": "2020-09-11T12:00:55Z", "author": {"login": "lacikaaa"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ResourcePermissionChecker.java", "diffHunk": "@@ -15,6 +16,9 @@\n \n     protected Map<String, AuthorizationResourceAction> getAuthorizationActions(String resourceCrn, AuthorizationResourceAction action) {\n         ResourceBasedCrnProvider resourceBasedCrnProvider = commonPermissionCheckingUtils.getResourceBasedCrnProvider(action);\n+        if (resourceBasedCrnProvider == null) {\n+            return Collections.emptyMap();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NTgyNg==", "bodyText": "I think it is much clearer then if I create an if {} else {} structure. Otherwise, we have a lot of similar code style in the codebase.", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487885826", "createdAt": "2020-09-14T12:50:09Z", "author": {"login": "topolyai5"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ResourcePermissionChecker.java", "diffHunk": "@@ -15,6 +16,9 @@\n \n     protected Map<String, AuthorizationResourceAction> getAuthorizationActions(String resourceCrn, AuthorizationResourceAction action) {\n         ResourceBasedCrnProvider resourceBasedCrnProvider = commonPermissionCheckingUtils.getResourceBasedCrnProvider(action);\n+        if (resourceBasedCrnProvider == null) {\n+            return Collections.emptyMap();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5Nzk0MQ=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI3NDU5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/common/json/Json.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjowMTozOVrOHQcBBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjowMTozOVrOHQcBBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5ODI3Nw==", "bodyText": "object->array", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r486998277", "createdAt": "2020-09-11T12:01:39Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/common/json/Json.java", "diffHunk": "@@ -170,4 +178,28 @@ public String toString() {\n         sb.append('}');\n         return sb.toString();\n     }\n+\n+    public boolean isObject() {\n+        try {\n+            JSONObject.fromObject(value);\n+            return true;\n+        } catch (JSONException e) {\n+            LOGGER.debug(\"This json is not an object: {}\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean isArray() {\n+        try {\n+            JSONArray.fromObject(value);\n+            return true;\n+        } catch (JSONException e) {\n+            LOGGER.debug(\"This json is not an object: {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI4OTE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/BaseLegacyStructuredFlowEventFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjowNjozMFrOHQcJvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODoxMzoxMVrOHRIqGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMDUwOA==", "bodyText": "could you check if we really need this transactional annotation?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487000508", "createdAt": "2020-09-11T12:06:30Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/BaseLegacyStructuredFlowEventFactory.java", "diffHunk": "@@ -26,18 +26,18 @@\n import com.sequenceiq.cloudbreak.structuredevent.event.ClusterDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.NotificationDetails;\n-import com.sequenceiq.cloudbreak.structuredevent.event.OperationDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.StackDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n import com.sequenceiq.cloudbreak.structuredevent.event.StructuredNotificationEvent;\n-import com.sequenceiq.cloudbreak.structuredevent.rest.StructuredFlowEventFactory;\n+import com.sequenceiq.cloudbreak.structuredevent.event.legacy.OperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.LegacyStructuredFlowEventFactory;\n import com.sequenceiq.flow.ha.NodeConfig;\n \n @Component\n @Transactional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyNzA1Nw==", "bodyText": "Yes, it is necessary.", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487727057", "createdAt": "2020-09-14T08:08:42Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/BaseLegacyStructuredFlowEventFactory.java", "diffHunk": "@@ -26,18 +26,18 @@\n import com.sequenceiq.cloudbreak.structuredevent.event.ClusterDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.NotificationDetails;\n-import com.sequenceiq.cloudbreak.structuredevent.event.OperationDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.StackDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n import com.sequenceiq.cloudbreak.structuredevent.event.StructuredNotificationEvent;\n-import com.sequenceiq.cloudbreak.structuredevent.rest.StructuredFlowEventFactory;\n+import com.sequenceiq.cloudbreak.structuredevent.event.legacy.OperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.LegacyStructuredFlowEventFactory;\n import com.sequenceiq.flow.ha.NodeConfig;\n \n @Component\n @Transactional", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMDUwOA=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyOTY4OA==", "bodyText": "LazyInit exception occurred during the event firing", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487729688", "createdAt": "2020-09-14T08:13:11Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/BaseLegacyStructuredFlowEventFactory.java", "diffHunk": "@@ -26,18 +26,18 @@\n import com.sequenceiq.cloudbreak.structuredevent.event.ClusterDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.NotificationDetails;\n-import com.sequenceiq.cloudbreak.structuredevent.event.OperationDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.StackDetails;\n import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n import com.sequenceiq.cloudbreak.structuredevent.event.StructuredNotificationEvent;\n-import com.sequenceiq.cloudbreak.structuredevent.rest.StructuredFlowEventFactory;\n+import com.sequenceiq.cloudbreak.structuredevent.event.legacy.OperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.LegacyStructuredFlowEventFactory;\n import com.sequenceiq.flow.ha.NodeConfig;\n \n @Component\n @Transactional", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMDUwOA=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjMwNDU3OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/domain/Environment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoxMToxNVrOHQcS8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoxMToxNVrOHQcS8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMjg2Nw==", "bodyText": "why null?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487002867", "createdAt": "2020-09-11T12:11:15Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/domain/Environment.java", "diffHunk": "@@ -156,6 +157,11 @@ public void setAccountId(String accountId) {\n         this.accountId = accountId;\n     }\n \n+    @Override\n+    public String getResourceName() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjM2NTgwOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/events/CredentialUrlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozMDoyM1rOHQc3TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozMDoyM1rOHQc3TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMjE3Mg==", "bodyText": "missing unit test, especially for pattern matching", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487012172", "createdAt": "2020-09-11T12:30:23Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/events/CredentialUrlParser.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.sequenceiq.environment.events;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+\n+@Component\n+public class CredentialUrlParser extends CDPRestUrlParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjM4MDQ5OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/events/EnvironmentStructuredFlowEventFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozNTowOFrOHQdASg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozNTowOFrOHQdASg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxNDQ3NA==", "bodyText": "I would prefer if you would add an getEnvironmentById method to the EnvironmentService and that could throw an exception as I see this kind of usage a lot in the code generally", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487014474", "createdAt": "2020-09-11T12:35:08Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/events/EnvironmentStructuredFlowEventFactory.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.sequenceiq.environment.events;\n+\n+import static com.sequenceiq.cloudbreak.common.exception.NotFoundException.notFound;\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.FLOW;\n+\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredFlowEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredNotificationEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPStructuredFlowEventFactory;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+\n+@Component\n+public class EnvironmentStructuredFlowEventFactory implements CDPStructuredFlowEventFactory {\n+\n+    @Inject\n+    private Clock clock;\n+\n+    @Inject\n+    private EnvironmentService environmentService;\n+\n+    @Inject\n+    private NodeConfig nodeConfig;\n+\n+    @Value(\"${info.app.version:}\")\n+    private String serviceVersion;\n+\n+    @Override\n+    public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDetails flowDetails, Boolean detailed) {\n+        Optional<Environment> environmentOptional = environmentService.findEnvironmentById(resourceId);\n+        Environment environment = environmentOptional.orElseThrow(notFound(\"Environment\", resourceId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjM5MjQ3OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/events/EnvironmentStructuredFlowEventFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozODo1M1rOHQdHqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozODo1M1rOHQdHqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxNjM2MA==", "bodyText": "I see you have created CDPStructuredFlowEventFactory and this is the only implementation of that interface. And 2 of 3 methods return null. Why do we need these methods?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487016360", "createdAt": "2020-09-11T12:38:53Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/events/EnvironmentStructuredFlowEventFactory.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.sequenceiq.environment.events;\n+\n+import static com.sequenceiq.cloudbreak.common.exception.NotFoundException.notFound;\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.FLOW;\n+\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredFlowEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredNotificationEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPStructuredFlowEventFactory;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+\n+@Component\n+public class EnvironmentStructuredFlowEventFactory implements CDPStructuredFlowEventFactory {\n+\n+    @Inject\n+    private Clock clock;\n+\n+    @Inject\n+    private EnvironmentService environmentService;\n+\n+    @Inject\n+    private NodeConfig nodeConfig;\n+\n+    @Value(\"${info.app.version:}\")\n+    private String serviceVersion;\n+\n+    @Override\n+    public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDetails flowDetails, Boolean detailed) {\n+        Optional<Environment> environmentOptional = environmentService.findEnvironmentById(resourceId);\n+        Environment environment = environmentOptional.orElseThrow(notFound(\"Environment\", resourceId));\n+        String resourceType = CDPStructuredFlowEvent.class.getSimpleName();\n+        CDPOperationDetails operationDetails = new CDPOperationDetails(clock.getCurrentTimeMillis(), FLOW, resourceType, environment.getId(),\n+                environment.getName(), nodeConfig.getId(), serviceVersion, environment.getAccountId(), environment.getResourceCrn(), environment.getCreator(),\n+                environment.getResourceCrn(), null);\n+        return new CDPStructuredFlowEvent(resourceType, operationDetails, flowDetails, null);\n+    }\n+\n+    @Override\n+    public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDetails flowDetails, Boolean detailed, Exception exception) {\n+        return null;\n+    }\n+\n+    @Override\n+    public CDPStructuredNotificationEvent createStructuredNotificationEvent(Long resourceId, String notificationType, String message, String groupName) {\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjQ3NDQzOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/events/EventSenderService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzowMjoyNFrOHQd6qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzowMjoyNFrOHQd6qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyOTQxNg==", "bodyText": "I see no reason to introduce msg here, you could just use serializedPayload", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487029416", "createdAt": "2020-09-11T13:02:24Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/events/EventSenderService.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package com.sequenceiq.environment.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.NOTIFICATION;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.gson.Gson;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredNotificationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredNotificationEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPDefaultStructuredEventClient;\n+import com.sequenceiq.environment.api.v1.environment.model.response.SimpleEnvironmentResponse;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.v1.converter.EnvironmentResponseConverter;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+import com.sequenceiq.flow.reactor.api.event.BaseNamedFlowEvent;\n+import com.sequenceiq.notification.NotificationService;\n+\n+@Service\n+public class EventSenderService {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EventSenderService.class);\n+\n+    private final NotificationService notificationService;\n+\n+    private final EnvironmentResponseConverter environmentResponseConverter;\n+\n+    private final CDPDefaultStructuredEventClient cdpDefaultStructuredEventClient;\n+\n+    private final NodeConfig nodeConfig;\n+\n+    private final String serviceVersion;\n+\n+    public EventSenderService(NotificationService notificationService, EnvironmentResponseConverter environmentResponseConverter,\n+            CDPDefaultStructuredEventClient cdpDefaultStructuredEventClient, NodeConfig nodeConfig, @Value(\"${info.app.version:}\") String serviceVersion) {\n+        this.notificationService = notificationService;\n+        this.environmentResponseConverter = environmentResponseConverter;\n+        this.cdpDefaultStructuredEventClient = cdpDefaultStructuredEventClient;\n+        this.nodeConfig = nodeConfig;\n+        this.serviceVersion = serviceVersion;\n+    }\n+\n+    public void sendEventAndNotification(EnvironmentDto environmentDto, String userCrn, ResourceEvent resourceEvent) {\n+        SimpleEnvironmentResponse simpleResponse = environmentResponseConverter.dtoToSimpleResponse(environmentDto);\n+        sendEventAndNotificationWithPayload(environmentDto, userCrn, resourceEvent, simpleResponse);\n+    }\n+\n+    public void sendEventAndNotificationWithPayload(AccountAwareResource resource, String userCrn, ResourceEvent resourceEvent, Object payload) {\n+        CDPStructuredNotificationEvent cdpStructuredEvent = getStructuredEvent(resource, resourceEvent, payload);\n+        cdpDefaultStructuredEventClient.sendStructuredEvent(cdpStructuredEvent);\n+        notificationService.send(resourceEvent, payload, userCrn);\n+    }\n+\n+    public void sendEventAndNotificationForMissingEnv(BaseNamedFlowEvent payload, ResourceEvent resourceEvent, String userCrn) {\n+        CDPStructuredNotificationEvent cdpStructuredEvent = createStructureEventForMissingEnvironment(payload, resourceEvent, userCrn);\n+        cdpDefaultStructuredEventClient.sendStructuredEvent(cdpStructuredEvent);\n+        notificationService.send(resourceEvent, payload, userCrn);\n+    }\n+\n+    @NotNull\n+    private CDPStructuredNotificationEvent getStructuredEvent(AccountAwareResource resource, ResourceEvent resourceEvent, Object payload) {\n+        String resourceType = resource.getClass().getSimpleName().toLowerCase();\n+        String resourceCrn = resource.getResourceCrn();\n+        CDPOperationDetails operationDetails = new CDPOperationDetails(\n+                System.currentTimeMillis(),\n+                NOTIFICATION,\n+                resourceType,\n+                resource.getId(),\n+                resource.getName(),\n+                nodeConfig.getId(),\n+                serviceVersion,\n+                resource.getAccountId(),\n+                resourceCrn,\n+                resource.getCreator(),\n+                resourceCrn,\n+                resourceEvent.name());\n+        CDPStructuredNotificationDetails notificationDetails = getNotificationDetails(resourceEvent, resourceCrn, resourceType, payload);\n+\n+        return new CDPStructuredNotificationEvent(operationDetails, notificationDetails);\n+    }\n+\n+    @NotNull\n+    private CDPStructuredNotificationEvent createStructureEventForMissingEnvironment(BaseNamedFlowEvent payload, ResourceEvent resourceEvent, String userCrn) {\n+        String resourceType = payload.getClass().getSimpleName().toLowerCase();\n+        String resourceCrn = payload.getResourceCrn();\n+        CDPOperationDetails operationDetails = new CDPOperationDetails(\n+                System.currentTimeMillis(),\n+                NOTIFICATION,\n+                resourceType,\n+                payload.getResourceId(),\n+                payload.getResourceName(),\n+                nodeConfig.getId(),\n+                serviceVersion,\n+                null,\n+                resourceCrn,\n+                userCrn,\n+                resourceCrn,\n+                resourceEvent.name());\n+\n+        CDPStructuredNotificationDetails notificationDetails = getNotificationDetails(resourceEvent, resourceCrn, resourceType, payload);\n+        return new CDPStructuredNotificationEvent(operationDetails, notificationDetails);\n+    }\n+\n+    private CDPStructuredNotificationDetails getNotificationDetails(ResourceEvent resourceEvent, String resourceCrn, String resourceType,\n+            Object payload) {\n+        String serializedPayload;\n+        try {\n+            serializedPayload = new Gson().toJson(payload);\n+            LOGGER.debug(\"CDPStructuredNotificationDetails' payload has been serialized with ResourceEvent[{}], resource type[{}], CRN[{}]\",\n+                    resourceEvent.name(), resourceType, resourceCrn);\n+        } catch (RuntimeException re) {\n+            String msg = String.format(\"CDPStructuredNotificationDetails' payload couldn't be serialized with ResourceEvent[%s], resource type[%s], CRN[%s]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjU2NTYyOnYy", "diffSide": "RIGHT", "path": "structuredevent-api-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/annotation/TransformGetterType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyNzoyMFrOHQezoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyNzoyMFrOHQezoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0NDAwMA==", "bodyText": "there is already a TransformGetterType in the codebase, is it possible to reuse that one? same applies for Immutable", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487044000", "createdAt": "2020-09-11T13:27:20Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-api-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/annotation/TransformGetterType.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Inherited\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.FIELD)\n+public @interface TransformGetterType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjU3NTQ2OnYy", "diffSide": "RIGHT", "path": "structuredevent-api-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/model/CDPEventV1Response.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyOTo1MlrOHQe50Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyOTo1MlrOHQe50Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0NTU4NQ==", "bodyText": "maybe add json ignore unknown annotation also", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487045585", "createdAt": "2020-09-11T13:29:52Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-api-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/model/CDPEventV1Response.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.sequenceiq.cloudbreak.structuredevent.event.LdapDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.RdsDetails;\n+\n+import io.swagger.annotations.ApiModel;\n+\n+@ApiModel\n+@JsonInclude(Include.NON_NULL)\n+public class CDPEventV1Response extends CDPEventBaseV1 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjYyMzM1OnYy", "diffSide": "RIGHT", "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPOperationDetails.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0MjozMVrOHQfX1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0MjozMVrOHQfX1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1MzI3MA==", "bodyText": "this might worth a simple unit test", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487053270", "createdAt": "2020-09-11T13:42:31Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPOperationDetails.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.sequenceiq.cloudbreak.structuredevent.event.cdp;\n+\n+import java.io.Serializable;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CDPOperationDetails implements Serializable {\n+\n+    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"MM/dd/yyyy HH:mm:ss Z\");\n+\n+    private StructuredEventType eventType;\n+\n+    private Long resourceId;\n+\n+    private String resourceCrn;\n+\n+    private String resourceName;\n+\n+    private String resourceType;\n+\n+    private Long timestamp;\n+\n+    private String cloudbreakId;\n+\n+    private String cloudbreakVersion;\n+\n+    private String accountId;\n+\n+    private String uuid;\n+\n+    private String userCrn;\n+\n+    private String environmentCrn;\n+\n+    private String resourceEvent;\n+\n+    public CDPOperationDetails() {\n+    }\n+\n+    public CDPOperationDetails(Long timestamp, StructuredEventType eventType, String resourceType, Long resourceId, String resourceName, String cloudbreakId,\n+        String cloudbreakVersion, String accountId, String resourceCrn, String userCrn, String environmentCrn, String resourceEvent) {\n+        this.timestamp = timestamp;\n+        this.eventType = eventType;\n+        this.resourceId = resourceId;\n+        this.resourceName = resourceName;\n+        this.resourceType = resourceType;\n+        this.cloudbreakId = cloudbreakId;\n+        this.cloudbreakVersion = cloudbreakVersion;\n+        this.resourceCrn = resourceCrn;\n+        this.userCrn = userCrn;\n+        this.accountId = accountId;\n+        this.environmentCrn = environmentCrn;\n+        this.resourceEvent = resourceEvent;\n+        uuid = UUID.randomUUID().toString();\n+    }\n+\n+    public StructuredEventType getEventType() {\n+        return eventType;\n+    }\n+\n+    public void setEventType(StructuredEventType eventType) {\n+        this.eventType = eventType;\n+    }\n+\n+    public String getResourceType() {\n+        return resourceType;\n+    }\n+\n+    public void setResourceType(String resourceType) {\n+        this.resourceType = resourceType;\n+    }\n+\n+    public Long getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(Long resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    public String getResourceName() {\n+        return resourceName;\n+    }\n+\n+    public void setResourceName(String resourceName) {\n+        this.resourceName = resourceName;\n+    }\n+\n+    public Long getTimestamp() {\n+        return timestamp;\n+    }\n+\n+    public void setTimestamp(Long timestamp) {\n+        this.timestamp = timestamp;\n+    }\n+\n+    public String getUTCDateTime() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjYzOTgyOnYy", "diffSide": "RIGHT", "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredEventContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0NjoyNVrOHQfh7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0NjoyNVrOHQfh7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NTg1NA==", "bodyText": "why not initialize the field with a Collections.emptyList() and then the getter won't have any logic. At least I think we usually handle this way. same applies to the others", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487055854", "createdAt": "2020-09-11T13:46:25Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredEventContainer.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.sequenceiq.cloudbreak.structuredevent.event.cdp;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CDPStructuredEventContainer {\n+\n+    private List<CDPStructuredFlowEvent> flow;\n+\n+    private List<CDPStructuredRestCallEvent> rest;\n+\n+    private List<CDPStructuredNotificationEvent> notification;\n+\n+    public CDPStructuredEventContainer() {\n+    }\n+\n+    public CDPStructuredEventContainer(\n+        List<CDPStructuredFlowEvent> flow,\n+        List<CDPStructuredRestCallEvent> rest,\n+        List<CDPStructuredNotificationEvent> notification) {\n+        this.flow = flow;\n+        this.rest = rest;\n+        this.notification = notification;\n+    }\n+\n+    public List<CDPStructuredFlowEvent> getFlow() {\n+        return flow != null ? flow : Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjY0NjAyOnYy", "diffSide": "RIGHT", "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredFlowEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0Nzo1OVrOHQfl0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0Nzo1OVrOHQfl0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1Njg1MA==", "bodyText": "do we need these or could be deleted? if can be then you should return in the first line and you don't need the state variaable", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487056850", "createdAt": "2020-09-11T13:47:59Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredFlowEvent.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.sequenceiq.cloudbreak.structuredevent.event.cdp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.json.Base64Deserializer;\n+import com.sequenceiq.cloudbreak.structuredevent.json.Base64Serializer;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CDPStructuredFlowEvent<T> extends CDPStructuredEvent {\n+    private FlowDetails flow;\n+\n+    @JsonSerialize(using = Base64Serializer.class)\n+    @JsonDeserialize(using = Base64Deserializer.class)\n+    private String exception;\n+\n+    private T payload;\n+\n+    public CDPStructuredFlowEvent() {\n+        super(CDPStructuredFlowEvent.class.getSimpleName());\n+    }\n+\n+    public CDPStructuredFlowEvent(String type, CDPOperationDetails operation, FlowDetails flow, T payload) {\n+        super(type, operation);\n+        this.flow = flow;\n+        this.payload = payload;\n+    }\n+\n+    @Override\n+    public String getStatus() {\n+        String state = flow.getFlowState();\n+//        if (\"unknown\".equals(state)) {\n+//            state = getOperation().getResourceType().toUpperCase()\n+//            if (stack != null) {\n+//                state = \"STACK_\" + stack.getDetailedStatus();\n+//            }\n+//            if (cluster != null) {\n+//                state += \" | CLUSTER_\" + cluster.getStatus();\n+//            }\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjY1MjcyOnYy", "diffSide": "RIGHT", "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredFlowEvent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0OTo0NVrOHQfqBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo1MDozMVrOHRSM9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NzkyNg==", "bodyText": "I think T should be serializable", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487057926", "createdAt": "2020-09-11T13:49:45Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredFlowEvent.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.sequenceiq.cloudbreak.structuredevent.event.cdp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.json.Base64Deserializer;\n+import com.sequenceiq.cloudbreak.structuredevent.json.Base64Serializer;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CDPStructuredFlowEvent<T> extends CDPStructuredEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3Nzk2Mg==", "bodyText": "I don't want to add the Serializable to the generic type. Sometimes generate unnecessary changes/refactors.", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487877962", "createdAt": "2020-09-14T12:37:46Z", "author": {"login": "topolyai5"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredFlowEvent.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.sequenceiq.cloudbreak.structuredevent.event.cdp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.json.Base64Deserializer;\n+import com.sequenceiq.cloudbreak.structuredevent.json.Base64Serializer;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CDPStructuredFlowEvent<T> extends CDPStructuredEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NzkyNg=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NjA2OA==", "bodyText": "but CDPStructuredEvent is serializable and a class is only serializable if all the fields are serializable or transient. In this case you don't have to modify anything else as I have checked and the constructor is used only at one place where payload is set to null", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487886068", "createdAt": "2020-09-14T12:50:31Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredFlowEvent.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.sequenceiq.cloudbreak.structuredevent.event.cdp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.json.Base64Deserializer;\n+import com.sequenceiq.cloudbreak.structuredevent.json.Base64Serializer;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CDPStructuredFlowEvent<T> extends CDPStructuredEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NzkyNg=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjY1ODA4OnYy", "diffSide": "RIGHT", "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredFlowEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1MDo1OFrOHQftNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1MDo1OFrOHQftNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1ODc0Mw==", "bodyText": "why do we need this max? duration can be negative?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487058743", "createdAt": "2020-09-11T13:50:58Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredFlowEvent.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.sequenceiq.cloudbreak.structuredevent.event.cdp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.json.Base64Deserializer;\n+import com.sequenceiq.cloudbreak.structuredevent.json.Base64Serializer;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CDPStructuredFlowEvent<T> extends CDPStructuredEvent {\n+    private FlowDetails flow;\n+\n+    @JsonSerialize(using = Base64Serializer.class)\n+    @JsonDeserialize(using = Base64Deserializer.class)\n+    private String exception;\n+\n+    private T payload;\n+\n+    public CDPStructuredFlowEvent() {\n+        super(CDPStructuredFlowEvent.class.getSimpleName());\n+    }\n+\n+    public CDPStructuredFlowEvent(String type, CDPOperationDetails operation, FlowDetails flow, T payload) {\n+        super(type, operation);\n+        this.flow = flow;\n+        this.payload = payload;\n+    }\n+\n+    @Override\n+    public String getStatus() {\n+        String state = flow.getFlowState();\n+//        if (\"unknown\".equals(state)) {\n+//            state = getOperation().getResourceType().toUpperCase()\n+//            if (stack != null) {\n+//                state = \"STACK_\" + stack.getDetailedStatus();\n+//            }\n+//            if (cluster != null) {\n+//                state += \" | CLUSTER_\" + cluster.getStatus();\n+//            }\n+//        }\n+        return state;\n+    }\n+\n+    @Override\n+    public Long getDuration() {\n+        return Math.max(0L, flow.getDuration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjY2NzAyOnYy", "diffSide": "RIGHT", "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredNotificationEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1MzowN1rOHQfyxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1MzowN1rOHQfyxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2MDE2NQ==", "bodyText": "these 2 could be static final variable", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487060165", "createdAt": "2020-09-11T13:53:07Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredNotificationEvent.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.cloudbreak.structuredevent.event.cdp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.sequenceiq.cloudbreak.structuredevent.event.LdapNotificationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.RdsNotificationDetails;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CDPStructuredNotificationEvent extends CDPStructuredEvent {\n+\n+    private LdapNotificationDetails ldapNotificationDetails;\n+\n+    private RdsNotificationDetails rdsNotificationDetails;\n+\n+    private CDPStructuredNotificationDetails notificationDetails;\n+\n+    public CDPStructuredNotificationEvent() {\n+        super(CDPStructuredNotificationEvent.class.getSimpleName());\n+    }\n+\n+    public CDPStructuredNotificationEvent(CDPOperationDetails operation, CDPStructuredNotificationDetails notificationDetails) {\n+        super(CDPStructuredNotificationEvent.class.getSimpleName(), operation);\n+        this.notificationDetails = notificationDetails;\n+        ldapNotificationDetails = null;\n+        rdsNotificationDetails = null;\n+    }\n+\n+    public CDPStructuredNotificationEvent(CDPOperationDetails operation, LdapNotificationDetails ldapNotificationDetails) {\n+        super(CDPStructuredNotificationEvent.class.getSimpleName(), operation);\n+        this.ldapNotificationDetails = ldapNotificationDetails;\n+        rdsNotificationDetails = null;\n+    }\n+\n+    public CDPStructuredNotificationEvent(CDPOperationDetails operation, RdsNotificationDetails rdsNotificationDetails) {\n+        super(CDPStructuredNotificationEvent.class.getSimpleName(), operation);\n+        ldapNotificationDetails = null;\n+        this.rdsNotificationDetails = rdsNotificationDetails;\n+    }\n+\n+    @Override\n+    public String getStatus() {\n+        return \"SENT\";\n+    }\n+\n+    @Override\n+    public Long getDuration() {\n+        return 0L;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjY4MzI5OnYy", "diffSide": "RIGHT", "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredNotificationEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1Njo1N1rOHQf8vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1Njo1N1rOHQf8vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2MjcxNg==", "bodyText": "why these null initializations required? the same for those in the other constructors", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487062716", "createdAt": "2020-09-11T13:56:57Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredNotificationEvent.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.cloudbreak.structuredevent.event.cdp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.sequenceiq.cloudbreak.structuredevent.event.LdapNotificationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.RdsNotificationDetails;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CDPStructuredNotificationEvent extends CDPStructuredEvent {\n+\n+    private LdapNotificationDetails ldapNotificationDetails;\n+\n+    private RdsNotificationDetails rdsNotificationDetails;\n+\n+    private CDPStructuredNotificationDetails notificationDetails;\n+\n+    public CDPStructuredNotificationEvent() {\n+        super(CDPStructuredNotificationEvent.class.getSimpleName());\n+    }\n+\n+    public CDPStructuredNotificationEvent(CDPOperationDetails operation, CDPStructuredNotificationDetails notificationDetails) {\n+        super(CDPStructuredNotificationEvent.class.getSimpleName(), operation);\n+        this.notificationDetails = notificationDetails;\n+        ldapNotificationDetails = null;\n+        rdsNotificationDetails = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjY5NTc0OnYy", "diffSide": "RIGHT", "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredRestCallEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDowMDowNlrOHQgEiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo0NDo1MlrOHRJ0lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2NDcxMg==", "bodyText": "are we sure restcall has always a non null restresponse? I don't see anything in RestCallDetails what would ensure that", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487064712", "createdAt": "2020-09-11T14:00:06Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredRestCallEvent.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.sequenceiq.cloudbreak.structuredevent.event.cdp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CDPStructuredRestCallEvent extends CDPStructuredEvent {\n+    private RestCallDetails restCall;\n+\n+    public CDPStructuredRestCallEvent() {\n+        super(CDPStructuredRestCallEvent.class.getSimpleName());\n+    }\n+\n+    public CDPStructuredRestCallEvent(CDPOperationDetails operation, RestCallDetails restCall) {\n+        super(CDPStructuredRestCallEvent.class.getSimpleName(), operation);\n+        this.restCall = restCall;\n+    }\n+\n+    @Override\n+    public String getStatus() {\n+        return restCall.getRestResponse().getStatusText() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc0ODc1Ng==", "bodyText": "yes, it cannot be null: CDPStructuredEventFilter#326-335", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487748756", "createdAt": "2020-09-14T08:44:52Z", "author": {"login": "topolyai5"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/event/cdp/CDPStructuredRestCallEvent.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.sequenceiq.cloudbreak.structuredevent.event.cdp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CDPStructuredRestCallEvent extends CDPStructuredEvent {\n+    private RestCallDetails restCall;\n+\n+    public CDPStructuredRestCallEvent() {\n+        super(CDPStructuredRestCallEvent.class.getSimpleName());\n+    }\n+\n+    public CDPStructuredRestCallEvent(CDPOperationDetails operation, RestCallDetails restCall) {\n+        super(CDPStructuredRestCallEvent.class.getSimpleName(), operation);\n+        this.restCall = restCall;\n+    }\n+\n+    @Override\n+    public String getStatus() {\n+        return restCall.getRestResponse().getStatusText() != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2NDcxMg=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjcwMjY2OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/config/CDPStructuredEventConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDowMTo1MFrOHQgItg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDowMTo1MFrOHQgItg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2NTc4Mg==", "bodyText": "do we need this empty class?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487065782", "createdAt": "2020-09-11T14:01:50Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/config/CDPStructuredEventConfig.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package com.sequenceiq.cloudbreak.structuredevent.config;\n+\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class CDPStructuredEventConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Njg0MjkwOnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CDPRestCommonService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDozNTo1OVrOHQhg4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDozNTo1OVrOHQhg4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4ODM1NA==", "bodyText": "it's a bit hard to follow this method, similarly to getResourceId. Could you refactor this a bit to make it more readable?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487088354", "createdAt": "2020-09-11T14:35:59Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CDPRestCommonService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.ID_TYPE;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+\n+@Component\n+public class CDPRestCommonService {\n+\n+    public static final String NAME_PATH = \"name\";\n+\n+    public static final String NAMES_PATH = \"names\";\n+\n+    public static final String RESOURCE_CRN_PATH = \"crn\";\n+\n+    public static final String CRNS_PATH = \"crns\";\n+\n+    public Map<String, String> addClusterCrnAndNameIfPresent(RestCallDetails restCallDetails, Map<String, String> restParams, String nameField,\n+            String crnField) {\n+        Map<String, String> params = new HashMap<>();\n+        RestRequestDetails restRequest = restCallDetails.getRestRequest();\n+        Json requestJson = getJson(restRequest.getBody());\n+        Json responseJson = getJson(restCallDetails.getRestResponse().getBody());\n+        String resourceCrn = getCrn(requestJson, responseJson, restRequest, restParams, crnField);\n+        String name = getName(requestJson, responseJson, restRequest, restParams, nameField);\n+\n+        checkNameOrCrnProvided(restRequest, resourceCrn, name);\n+\n+        if (StringUtils.isNotEmpty(name)) {\n+            params.put(nameField, name);\n+        }\n+\n+        if (StringUtils.isNotEmpty(resourceCrn)) {\n+            params.put(crnField, resourceCrn);\n+        }\n+        return params;\n+    }\n+\n+    private String getName(Json requestJson, Json responseJson, RestRequestDetails request, Map<String, String> restParams, String nameField) {\n+        if (StringUtils.isEmpty(restParams.get(nameField))) {\n+            return getResourceId(requestJson, responseJson, request, NAME_PATH, NAMES_PATH, restParams, \"name\");\n+        }\n+        return restParams.get(nameField);\n+    }\n+\n+    private String getCrn(Json requestJson, Json responseJson, RestRequestDetails request, Map<String, String> restParams, String crnField) {\n+        if (StringUtils.isEmpty(restParams.get(crnField))) {\n+            return getResourceId(requestJson, responseJson, request, RESOURCE_CRN_PATH, CRNS_PATH, restParams, \"crn\");\n+        }\n+        return restParams.get(crnField);\n+    }\n+\n+    private String getResourceId(Json requestJson, Json responseJson, RestRequestDetails request, String path, String pluralPath, Map<String, String> restParams,\n+            String idType) {\n+        String id = null;\n+        if (requestJson != null) {\n+            id = getValueFromJson(requestJson, path);\n+            if (StringUtils.isEmpty(id)) {\n+                id = getListValue(request, requestJson, pluralPath, restParams, idType);\n+            }\n+        }\n+        if (responseJson != null && StringUtils.isEmpty(id)) {\n+                id = Optional.ofNullable(getValueFromJson(responseJson, path))\n+                        .orElse(getListValue(request, responseJson, pluralPath, restParams, idType));\n+        }\n+        return id;\n+    }\n+\n+    private String getListValue(RestRequestDetails restRequest, Json json, String path, Map<String, String> restParams, String idType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Njg0MzkxOnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CDPRestCommonService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDozNjoxMVrOHQhhdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDozNjoxMVrOHQhhdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4ODUwMg==", "bodyText": "please add unit tests", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487088502", "createdAt": "2020-09-11T14:36:11Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CDPRestCommonService.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.ID_TYPE;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+\n+@Component\n+public class CDPRestCommonService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Njg2Mzc3OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo0MDo1NlrOHQhtwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo0MDo1NlrOHQhtwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5MTY0OQ==", "bodyText": "not used anywhere", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487091649", "createdAt": "2020-09-11T14:40:56Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "diffHunk": "@@ -0,0 +1,383 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.filter;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.REST;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_CRN;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_EVENT;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_NAME;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_TYPE;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.WriterInterceptor;\n+import javax.ws.rs.ext.WriterInterceptorContext;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.glassfish.jersey.message.MessageUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.security.authentication.AuthenticatedUserService;\n+import com.sequenceiq.cloudbreak.common.user.CloudbreakUser;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestResponseDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResourceRepository;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CDPRestCommonService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.annotation.AccountEntityType;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPBaseRestRequestThreadLocalService;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPDefaultStructuredEventClient;\n+import com.sequenceiq.cloudbreak.structuredevent.service.lookup.CDPAccountAwareRepositoryLookupService;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+\n+@Component\n+public class CDPStructuredEventFilter implements WriterInterceptor, ContainerRequestFilter, ContainerResponseFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPStructuredEventFilter.class);\n+\n+    private static final String LOGGING_ENABLED_PROPERTY = \"structuredevent.loggingEnabled\";\n+\n+    private static final String LOGGINGSTREAM_PROPERTY = \"structuredevent.entityLogger\";\n+\n+    private static final String REST_PARAMS = \"REST_PARAMS\";\n+\n+    private static final String REQUEST_TIME = \"REQUEST_TIME\";\n+\n+    private static final String REQUEST_DETAILS = \"REQUEST_DETAIS\";\n+\n+    private static final String RESPONSE_DETAILS = \"RESPONSE_DETAIS\";\n+\n+    private static final int MAX_CONTENT_LENGTH = 65535;\n+\n+    private static final String ID = \"id\";\n+\n+    private static final String CRN = \"crn\";\n+\n+    private final List<String> skippedHeadersList = Lists.newArrayList(\"authorization\");\n+\n+    private final Map<String, AccountAwareResourceRepository<?, ?>> pathRepositoryMap = new HashMap<>();\n+\n+    private final Pattern extractIdRestParamFromResponsePattern = Pattern.compile(\"\\\"\" + ID + \"\\\":([0-9]*)\");\n+\n+    private final Pattern extractCrnRestParamFromResponsePattern = Pattern.compile(\"\\\"\" + CRN + \"\\\":\\\"([0-9a-zA-Z:-]*)\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjkwMjQ5OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo0OTozNlrOHQiFCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjowMjo0MlrOHRQfDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5NzYwOQ==", "bodyText": "could you break up this method? it too long and could be refactored", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487097609", "createdAt": "2020-09-11T14:49:36Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "diffHunk": "@@ -0,0 +1,383 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.filter;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.REST;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_CRN;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_EVENT;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_NAME;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_TYPE;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.WriterInterceptor;\n+import javax.ws.rs.ext.WriterInterceptorContext;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.glassfish.jersey.message.MessageUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.security.authentication.AuthenticatedUserService;\n+import com.sequenceiq.cloudbreak.common.user.CloudbreakUser;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestResponseDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResourceRepository;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CDPRestCommonService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.annotation.AccountEntityType;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPBaseRestRequestThreadLocalService;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPDefaultStructuredEventClient;\n+import com.sequenceiq.cloudbreak.structuredevent.service.lookup.CDPAccountAwareRepositoryLookupService;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+\n+@Component\n+public class CDPStructuredEventFilter implements WriterInterceptor, ContainerRequestFilter, ContainerResponseFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPStructuredEventFilter.class);\n+\n+    private static final String LOGGING_ENABLED_PROPERTY = \"structuredevent.loggingEnabled\";\n+\n+    private static final String LOGGINGSTREAM_PROPERTY = \"structuredevent.entityLogger\";\n+\n+    private static final String REST_PARAMS = \"REST_PARAMS\";\n+\n+    private static final String REQUEST_TIME = \"REQUEST_TIME\";\n+\n+    private static final String REQUEST_DETAILS = \"REQUEST_DETAIS\";\n+\n+    private static final String RESPONSE_DETAILS = \"RESPONSE_DETAIS\";\n+\n+    private static final int MAX_CONTENT_LENGTH = 65535;\n+\n+    private static final String ID = \"id\";\n+\n+    private static final String CRN = \"crn\";\n+\n+    private final List<String> skippedHeadersList = Lists.newArrayList(\"authorization\");\n+\n+    private final Map<String, AccountAwareResourceRepository<?, ?>> pathRepositoryMap = new HashMap<>();\n+\n+    private final Pattern extractIdRestParamFromResponsePattern = Pattern.compile(\"\\\"\" + ID + \"\\\":([0-9]*)\");\n+\n+    private final Pattern extractCrnRestParamFromResponsePattern = Pattern.compile(\"\\\"\" + CRN + \"\\\":\\\"([0-9a-zA-Z:-]*)\\\"\");\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Value(\"${cdp.structuredevent.rest.contentlogging}\")\n+    private Boolean contentLogging;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private NodeConfig nodeConfig;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPBaseRestRequestThreadLocalService cloudbreakRestRequestThreadLocalService;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPDefaultStructuredEventClient structuredEventClient;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private AuthenticatedUserService authenticatedUserService;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private List<CDPRestUrlParser> cdpRestUrlParsers;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private ListableBeanFactory listableBeanFactory;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPAccountAwareRepositoryLookupService repositoryLookupService;\n+\n+    @Autowired\n+    private CDPRestCommonService restCommonService;\n+\n+    @PostConstruct\n+    public void initializePathRepositoryMap() {\n+        Map<String, Object> accountEntityTypes = listableBeanFactory.getBeansWithAnnotation(AccountEntityType.class);\n+        for (Object accountEntityType : accountEntityTypes.values()) {\n+            Path pathAnnotation = AnnotationUtils.findAnnotation(accountEntityType.getClass().getSuperclass(), Path.class);\n+            AccountEntityType entityTypeAnnotation = AnnotationUtils.findAnnotation(accountEntityType.getClass(), AccountEntityType.class);\n+            if (pathAnnotation != null) {\n+                String pathValue = pathAnnotation.value();\n+                Class<?> entityClass = entityTypeAnnotation.value();\n+                AccountAwareResourceRepository<?, ?> repository = repositoryLookupService.getRepositoryForEntity(entityClass);\n+                pathRepositoryMap.put(pathValue, repository);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext) throws IOException {\n+        boolean loggingEnabled = isLoggingEnabled(requestContext);\n+        requestContext.setProperty(LOGGING_ENABLED_PROPERTY, loggingEnabled);\n+        if (loggingEnabled) {\n+            requestContext.setProperty(REQUEST_TIME, System.currentTimeMillis());\n+            StringBuilder body = new StringBuilder();\n+            requestContext.setEntityStream(logInboundEntity(body, requestContext.getEntityStream(), MessageUtils.getCharset(requestContext.getMediaType())));\n+            requestContext.setProperty(REST_PARAMS, getRequestUrlParameters(requestContext));\n+            requestContext.setProperty(REQUEST_DETAILS, createRequestDetails(requestContext, body.toString()));\n+        }\n+    }\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (BooleanUtils.isTrue((Boolean) requestContext.getProperty(LOGGING_ENABLED_PROPERTY))) {\n+            RestResponseDetails restResponse = createResponseDetails(responseContext);\n+            if (responseContext.hasEntity()) {\n+                OutputStream stream = new LoggingStream(responseContext.getEntityStream());\n+                responseContext.setEntityStream(stream);\n+                requestContext.setProperty(LOGGINGSTREAM_PROPERTY, stream);\n+                requestContext.setProperty(RESPONSE_DETAILS, restResponse);\n+            } else {\n+                Long requestTime = (Long) requestContext.getProperty(REQUEST_TIME);\n+                RestRequestDetails restRequest = (RestRequestDetails) requestContext.getProperty(REQUEST_DETAILS);\n+                Map<String, String> restParams = (Map<String, String>) requestContext.getProperty(REST_PARAMS);\n+                sendStructuredEvent(restRequest, restResponse, restParams, requestTime, \"\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException {\n+        context.proceed();\n+        if (BooleanUtils.isTrue((Boolean) context.getProperty(LOGGING_ENABLED_PROPERTY))) {\n+            Long requestTime = (Long) context.getProperty(REQUEST_TIME);\n+            RestRequestDetails restRequest = (RestRequestDetails) context.getProperty(REQUEST_DETAILS);\n+            RestResponseDetails restResponse = (RestResponseDetails) context.getProperty(RESPONSE_DETAILS);\n+            String responseBody = ((LoggingStream) context.getProperty(LOGGINGSTREAM_PROPERTY)).getStringBuilder(\n+                    MessageUtils.getCharset(context.getMediaType())).toString();\n+            Map<String, String> restParams = (Map<String, String>) context.getProperty(REST_PARAMS);\n+            if (restParams == null) {\n+                restParams = new HashMap<>();\n+            }\n+            sendStructuredEvent(restRequest, restResponse, restParams, requestTime, responseBody);\n+        }\n+    }\n+\n+    private void sendStructuredEvent(RestRequestDetails restRequest, RestResponseDetails restResponse, Map<String, String> restParams, Long requestTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NzkzNA==", "bodyText": "Here is the jira for tracking this: https://jira.cloudera.com/browse/CB-8777", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487857934", "createdAt": "2020-09-14T12:02:42Z", "author": {"login": "topolyai5"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "diffHunk": "@@ -0,0 +1,383 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.filter;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.REST;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_CRN;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_EVENT;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_NAME;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_TYPE;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.WriterInterceptor;\n+import javax.ws.rs.ext.WriterInterceptorContext;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.glassfish.jersey.message.MessageUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.security.authentication.AuthenticatedUserService;\n+import com.sequenceiq.cloudbreak.common.user.CloudbreakUser;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestResponseDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResourceRepository;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CDPRestCommonService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.annotation.AccountEntityType;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPBaseRestRequestThreadLocalService;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPDefaultStructuredEventClient;\n+import com.sequenceiq.cloudbreak.structuredevent.service.lookup.CDPAccountAwareRepositoryLookupService;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+\n+@Component\n+public class CDPStructuredEventFilter implements WriterInterceptor, ContainerRequestFilter, ContainerResponseFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPStructuredEventFilter.class);\n+\n+    private static final String LOGGING_ENABLED_PROPERTY = \"structuredevent.loggingEnabled\";\n+\n+    private static final String LOGGINGSTREAM_PROPERTY = \"structuredevent.entityLogger\";\n+\n+    private static final String REST_PARAMS = \"REST_PARAMS\";\n+\n+    private static final String REQUEST_TIME = \"REQUEST_TIME\";\n+\n+    private static final String REQUEST_DETAILS = \"REQUEST_DETAIS\";\n+\n+    private static final String RESPONSE_DETAILS = \"RESPONSE_DETAIS\";\n+\n+    private static final int MAX_CONTENT_LENGTH = 65535;\n+\n+    private static final String ID = \"id\";\n+\n+    private static final String CRN = \"crn\";\n+\n+    private final List<String> skippedHeadersList = Lists.newArrayList(\"authorization\");\n+\n+    private final Map<String, AccountAwareResourceRepository<?, ?>> pathRepositoryMap = new HashMap<>();\n+\n+    private final Pattern extractIdRestParamFromResponsePattern = Pattern.compile(\"\\\"\" + ID + \"\\\":([0-9]*)\");\n+\n+    private final Pattern extractCrnRestParamFromResponsePattern = Pattern.compile(\"\\\"\" + CRN + \"\\\":\\\"([0-9a-zA-Z:-]*)\\\"\");\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Value(\"${cdp.structuredevent.rest.contentlogging}\")\n+    private Boolean contentLogging;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private NodeConfig nodeConfig;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPBaseRestRequestThreadLocalService cloudbreakRestRequestThreadLocalService;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPDefaultStructuredEventClient structuredEventClient;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private AuthenticatedUserService authenticatedUserService;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private List<CDPRestUrlParser> cdpRestUrlParsers;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private ListableBeanFactory listableBeanFactory;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPAccountAwareRepositoryLookupService repositoryLookupService;\n+\n+    @Autowired\n+    private CDPRestCommonService restCommonService;\n+\n+    @PostConstruct\n+    public void initializePathRepositoryMap() {\n+        Map<String, Object> accountEntityTypes = listableBeanFactory.getBeansWithAnnotation(AccountEntityType.class);\n+        for (Object accountEntityType : accountEntityTypes.values()) {\n+            Path pathAnnotation = AnnotationUtils.findAnnotation(accountEntityType.getClass().getSuperclass(), Path.class);\n+            AccountEntityType entityTypeAnnotation = AnnotationUtils.findAnnotation(accountEntityType.getClass(), AccountEntityType.class);\n+            if (pathAnnotation != null) {\n+                String pathValue = pathAnnotation.value();\n+                Class<?> entityClass = entityTypeAnnotation.value();\n+                AccountAwareResourceRepository<?, ?> repository = repositoryLookupService.getRepositoryForEntity(entityClass);\n+                pathRepositoryMap.put(pathValue, repository);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext) throws IOException {\n+        boolean loggingEnabled = isLoggingEnabled(requestContext);\n+        requestContext.setProperty(LOGGING_ENABLED_PROPERTY, loggingEnabled);\n+        if (loggingEnabled) {\n+            requestContext.setProperty(REQUEST_TIME, System.currentTimeMillis());\n+            StringBuilder body = new StringBuilder();\n+            requestContext.setEntityStream(logInboundEntity(body, requestContext.getEntityStream(), MessageUtils.getCharset(requestContext.getMediaType())));\n+            requestContext.setProperty(REST_PARAMS, getRequestUrlParameters(requestContext));\n+            requestContext.setProperty(REQUEST_DETAILS, createRequestDetails(requestContext, body.toString()));\n+        }\n+    }\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (BooleanUtils.isTrue((Boolean) requestContext.getProperty(LOGGING_ENABLED_PROPERTY))) {\n+            RestResponseDetails restResponse = createResponseDetails(responseContext);\n+            if (responseContext.hasEntity()) {\n+                OutputStream stream = new LoggingStream(responseContext.getEntityStream());\n+                responseContext.setEntityStream(stream);\n+                requestContext.setProperty(LOGGINGSTREAM_PROPERTY, stream);\n+                requestContext.setProperty(RESPONSE_DETAILS, restResponse);\n+            } else {\n+                Long requestTime = (Long) requestContext.getProperty(REQUEST_TIME);\n+                RestRequestDetails restRequest = (RestRequestDetails) requestContext.getProperty(REQUEST_DETAILS);\n+                Map<String, String> restParams = (Map<String, String>) requestContext.getProperty(REST_PARAMS);\n+                sendStructuredEvent(restRequest, restResponse, restParams, requestTime, \"\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException {\n+        context.proceed();\n+        if (BooleanUtils.isTrue((Boolean) context.getProperty(LOGGING_ENABLED_PROPERTY))) {\n+            Long requestTime = (Long) context.getProperty(REQUEST_TIME);\n+            RestRequestDetails restRequest = (RestRequestDetails) context.getProperty(REQUEST_DETAILS);\n+            RestResponseDetails restResponse = (RestResponseDetails) context.getProperty(RESPONSE_DETAILS);\n+            String responseBody = ((LoggingStream) context.getProperty(LOGGINGSTREAM_PROPERTY)).getStringBuilder(\n+                    MessageUtils.getCharset(context.getMediaType())).toString();\n+            Map<String, String> restParams = (Map<String, String>) context.getProperty(REST_PARAMS);\n+            if (restParams == null) {\n+                restParams = new HashMap<>();\n+            }\n+            sendStructuredEvent(restRequest, restResponse, restParams, requestTime, responseBody);\n+        }\n+    }\n+\n+    private void sendStructuredEvent(RestRequestDetails restRequest, RestResponseDetails restResponse, Map<String, String> restParams, Long requestTime,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5NzYwOQ=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjkwNDg5OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo1MDowOVrOHQiGhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozNTo1MFrOHRRo6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5Nzk4OQ==", "bodyText": "please don't return in the middle of the method, at least add an else branch", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487097989", "createdAt": "2020-09-11T14:50:09Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "diffHunk": "@@ -0,0 +1,383 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.filter;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.REST;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_CRN;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_EVENT;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_NAME;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_TYPE;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.WriterInterceptor;\n+import javax.ws.rs.ext.WriterInterceptorContext;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.glassfish.jersey.message.MessageUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.security.authentication.AuthenticatedUserService;\n+import com.sequenceiq.cloudbreak.common.user.CloudbreakUser;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestResponseDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResourceRepository;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CDPRestCommonService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.annotation.AccountEntityType;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPBaseRestRequestThreadLocalService;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPDefaultStructuredEventClient;\n+import com.sequenceiq.cloudbreak.structuredevent.service.lookup.CDPAccountAwareRepositoryLookupService;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+\n+@Component\n+public class CDPStructuredEventFilter implements WriterInterceptor, ContainerRequestFilter, ContainerResponseFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPStructuredEventFilter.class);\n+\n+    private static final String LOGGING_ENABLED_PROPERTY = \"structuredevent.loggingEnabled\";\n+\n+    private static final String LOGGINGSTREAM_PROPERTY = \"structuredevent.entityLogger\";\n+\n+    private static final String REST_PARAMS = \"REST_PARAMS\";\n+\n+    private static final String REQUEST_TIME = \"REQUEST_TIME\";\n+\n+    private static final String REQUEST_DETAILS = \"REQUEST_DETAIS\";\n+\n+    private static final String RESPONSE_DETAILS = \"RESPONSE_DETAIS\";\n+\n+    private static final int MAX_CONTENT_LENGTH = 65535;\n+\n+    private static final String ID = \"id\";\n+\n+    private static final String CRN = \"crn\";\n+\n+    private final List<String> skippedHeadersList = Lists.newArrayList(\"authorization\");\n+\n+    private final Map<String, AccountAwareResourceRepository<?, ?>> pathRepositoryMap = new HashMap<>();\n+\n+    private final Pattern extractIdRestParamFromResponsePattern = Pattern.compile(\"\\\"\" + ID + \"\\\":([0-9]*)\");\n+\n+    private final Pattern extractCrnRestParamFromResponsePattern = Pattern.compile(\"\\\"\" + CRN + \"\\\":\\\"([0-9a-zA-Z:-]*)\\\"\");\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Value(\"${cdp.structuredevent.rest.contentlogging}\")\n+    private Boolean contentLogging;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private NodeConfig nodeConfig;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPBaseRestRequestThreadLocalService cloudbreakRestRequestThreadLocalService;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPDefaultStructuredEventClient structuredEventClient;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private AuthenticatedUserService authenticatedUserService;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private List<CDPRestUrlParser> cdpRestUrlParsers;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private ListableBeanFactory listableBeanFactory;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPAccountAwareRepositoryLookupService repositoryLookupService;\n+\n+    @Autowired\n+    private CDPRestCommonService restCommonService;\n+\n+    @PostConstruct\n+    public void initializePathRepositoryMap() {\n+        Map<String, Object> accountEntityTypes = listableBeanFactory.getBeansWithAnnotation(AccountEntityType.class);\n+        for (Object accountEntityType : accountEntityTypes.values()) {\n+            Path pathAnnotation = AnnotationUtils.findAnnotation(accountEntityType.getClass().getSuperclass(), Path.class);\n+            AccountEntityType entityTypeAnnotation = AnnotationUtils.findAnnotation(accountEntityType.getClass(), AccountEntityType.class);\n+            if (pathAnnotation != null) {\n+                String pathValue = pathAnnotation.value();\n+                Class<?> entityClass = entityTypeAnnotation.value();\n+                AccountAwareResourceRepository<?, ?> repository = repositoryLookupService.getRepositoryForEntity(entityClass);\n+                pathRepositoryMap.put(pathValue, repository);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext) throws IOException {\n+        boolean loggingEnabled = isLoggingEnabled(requestContext);\n+        requestContext.setProperty(LOGGING_ENABLED_PROPERTY, loggingEnabled);\n+        if (loggingEnabled) {\n+            requestContext.setProperty(REQUEST_TIME, System.currentTimeMillis());\n+            StringBuilder body = new StringBuilder();\n+            requestContext.setEntityStream(logInboundEntity(body, requestContext.getEntityStream(), MessageUtils.getCharset(requestContext.getMediaType())));\n+            requestContext.setProperty(REST_PARAMS, getRequestUrlParameters(requestContext));\n+            requestContext.setProperty(REQUEST_DETAILS, createRequestDetails(requestContext, body.toString()));\n+        }\n+    }\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (BooleanUtils.isTrue((Boolean) requestContext.getProperty(LOGGING_ENABLED_PROPERTY))) {\n+            RestResponseDetails restResponse = createResponseDetails(responseContext);\n+            if (responseContext.hasEntity()) {\n+                OutputStream stream = new LoggingStream(responseContext.getEntityStream());\n+                responseContext.setEntityStream(stream);\n+                requestContext.setProperty(LOGGINGSTREAM_PROPERTY, stream);\n+                requestContext.setProperty(RESPONSE_DETAILS, restResponse);\n+            } else {\n+                Long requestTime = (Long) requestContext.getProperty(REQUEST_TIME);\n+                RestRequestDetails restRequest = (RestRequestDetails) requestContext.getProperty(REQUEST_DETAILS);\n+                Map<String, String> restParams = (Map<String, String>) requestContext.getProperty(REST_PARAMS);\n+                sendStructuredEvent(restRequest, restResponse, restParams, requestTime, \"\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException {\n+        context.proceed();\n+        if (BooleanUtils.isTrue((Boolean) context.getProperty(LOGGING_ENABLED_PROPERTY))) {\n+            Long requestTime = (Long) context.getProperty(REQUEST_TIME);\n+            RestRequestDetails restRequest = (RestRequestDetails) context.getProperty(REQUEST_DETAILS);\n+            RestResponseDetails restResponse = (RestResponseDetails) context.getProperty(RESPONSE_DETAILS);\n+            String responseBody = ((LoggingStream) context.getProperty(LOGGINGSTREAM_PROPERTY)).getStringBuilder(\n+                    MessageUtils.getCharset(context.getMediaType())).toString();\n+            Map<String, String> restParams = (Map<String, String>) context.getProperty(REST_PARAMS);\n+            if (restParams == null) {\n+                restParams = new HashMap<>();\n+            }\n+            sendStructuredEvent(restRequest, restResponse, restParams, requestTime, responseBody);\n+        }\n+    }\n+\n+    private void sendStructuredEvent(RestRequestDetails restRequest, RestResponseDetails restResponse, Map<String, String> restParams, Long requestTime,\n+            String responseBody) {\n+        boolean valid = checkRestParams(restParams);\n+        try {\n+            if (!valid) {\n+                LOGGER.debug(\"Cannot create structured event, because rest params are invalid.\");\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3Njg0Mw==", "bodyText": "I will refactor this return; in the follow-up jira.", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487876843", "createdAt": "2020-09-14T12:35:50Z", "author": {"login": "topolyai5"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "diffHunk": "@@ -0,0 +1,383 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.filter;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.REST;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_CRN;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_EVENT;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_NAME;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_TYPE;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.WriterInterceptor;\n+import javax.ws.rs.ext.WriterInterceptorContext;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.glassfish.jersey.message.MessageUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.security.authentication.AuthenticatedUserService;\n+import com.sequenceiq.cloudbreak.common.user.CloudbreakUser;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestResponseDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResourceRepository;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CDPRestCommonService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.annotation.AccountEntityType;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPBaseRestRequestThreadLocalService;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPDefaultStructuredEventClient;\n+import com.sequenceiq.cloudbreak.structuredevent.service.lookup.CDPAccountAwareRepositoryLookupService;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+\n+@Component\n+public class CDPStructuredEventFilter implements WriterInterceptor, ContainerRequestFilter, ContainerResponseFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPStructuredEventFilter.class);\n+\n+    private static final String LOGGING_ENABLED_PROPERTY = \"structuredevent.loggingEnabled\";\n+\n+    private static final String LOGGINGSTREAM_PROPERTY = \"structuredevent.entityLogger\";\n+\n+    private static final String REST_PARAMS = \"REST_PARAMS\";\n+\n+    private static final String REQUEST_TIME = \"REQUEST_TIME\";\n+\n+    private static final String REQUEST_DETAILS = \"REQUEST_DETAIS\";\n+\n+    private static final String RESPONSE_DETAILS = \"RESPONSE_DETAIS\";\n+\n+    private static final int MAX_CONTENT_LENGTH = 65535;\n+\n+    private static final String ID = \"id\";\n+\n+    private static final String CRN = \"crn\";\n+\n+    private final List<String> skippedHeadersList = Lists.newArrayList(\"authorization\");\n+\n+    private final Map<String, AccountAwareResourceRepository<?, ?>> pathRepositoryMap = new HashMap<>();\n+\n+    private final Pattern extractIdRestParamFromResponsePattern = Pattern.compile(\"\\\"\" + ID + \"\\\":([0-9]*)\");\n+\n+    private final Pattern extractCrnRestParamFromResponsePattern = Pattern.compile(\"\\\"\" + CRN + \"\\\":\\\"([0-9a-zA-Z:-]*)\\\"\");\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Value(\"${cdp.structuredevent.rest.contentlogging}\")\n+    private Boolean contentLogging;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private NodeConfig nodeConfig;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPBaseRestRequestThreadLocalService cloudbreakRestRequestThreadLocalService;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPDefaultStructuredEventClient structuredEventClient;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private AuthenticatedUserService authenticatedUserService;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private List<CDPRestUrlParser> cdpRestUrlParsers;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private ListableBeanFactory listableBeanFactory;\n+\n+    //Do not remove the @Autowired annotation Jersey is able to inject dependencies that are instantiated by Spring this way only!\n+    @Autowired\n+    private CDPAccountAwareRepositoryLookupService repositoryLookupService;\n+\n+    @Autowired\n+    private CDPRestCommonService restCommonService;\n+\n+    @PostConstruct\n+    public void initializePathRepositoryMap() {\n+        Map<String, Object> accountEntityTypes = listableBeanFactory.getBeansWithAnnotation(AccountEntityType.class);\n+        for (Object accountEntityType : accountEntityTypes.values()) {\n+            Path pathAnnotation = AnnotationUtils.findAnnotation(accountEntityType.getClass().getSuperclass(), Path.class);\n+            AccountEntityType entityTypeAnnotation = AnnotationUtils.findAnnotation(accountEntityType.getClass(), AccountEntityType.class);\n+            if (pathAnnotation != null) {\n+                String pathValue = pathAnnotation.value();\n+                Class<?> entityClass = entityTypeAnnotation.value();\n+                AccountAwareResourceRepository<?, ?> repository = repositoryLookupService.getRepositoryForEntity(entityClass);\n+                pathRepositoryMap.put(pathValue, repository);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext) throws IOException {\n+        boolean loggingEnabled = isLoggingEnabled(requestContext);\n+        requestContext.setProperty(LOGGING_ENABLED_PROPERTY, loggingEnabled);\n+        if (loggingEnabled) {\n+            requestContext.setProperty(REQUEST_TIME, System.currentTimeMillis());\n+            StringBuilder body = new StringBuilder();\n+            requestContext.setEntityStream(logInboundEntity(body, requestContext.getEntityStream(), MessageUtils.getCharset(requestContext.getMediaType())));\n+            requestContext.setProperty(REST_PARAMS, getRequestUrlParameters(requestContext));\n+            requestContext.setProperty(REQUEST_DETAILS, createRequestDetails(requestContext, body.toString()));\n+        }\n+    }\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (BooleanUtils.isTrue((Boolean) requestContext.getProperty(LOGGING_ENABLED_PROPERTY))) {\n+            RestResponseDetails restResponse = createResponseDetails(responseContext);\n+            if (responseContext.hasEntity()) {\n+                OutputStream stream = new LoggingStream(responseContext.getEntityStream());\n+                responseContext.setEntityStream(stream);\n+                requestContext.setProperty(LOGGINGSTREAM_PROPERTY, stream);\n+                requestContext.setProperty(RESPONSE_DETAILS, restResponse);\n+            } else {\n+                Long requestTime = (Long) requestContext.getProperty(REQUEST_TIME);\n+                RestRequestDetails restRequest = (RestRequestDetails) requestContext.getProperty(REQUEST_DETAILS);\n+                Map<String, String> restParams = (Map<String, String>) requestContext.getProperty(REST_PARAMS);\n+                sendStructuredEvent(restRequest, restResponse, restParams, requestTime, \"\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException {\n+        context.proceed();\n+        if (BooleanUtils.isTrue((Boolean) context.getProperty(LOGGING_ENABLED_PROPERTY))) {\n+            Long requestTime = (Long) context.getProperty(REQUEST_TIME);\n+            RestRequestDetails restRequest = (RestRequestDetails) context.getProperty(REQUEST_DETAILS);\n+            RestResponseDetails restResponse = (RestResponseDetails) context.getProperty(RESPONSE_DETAILS);\n+            String responseBody = ((LoggingStream) context.getProperty(LOGGINGSTREAM_PROPERTY)).getStringBuilder(\n+                    MessageUtils.getCharset(context.getMediaType())).toString();\n+            Map<String, String> restParams = (Map<String, String>) context.getProperty(REST_PARAMS);\n+            if (restParams == null) {\n+                restParams = new HashMap<>();\n+            }\n+            sendStructuredEvent(restRequest, restResponse, restParams, requestTime, responseBody);\n+        }\n+    }\n+\n+    private void sendStructuredEvent(RestRequestDetails restRequest, RestResponseDetails restResponse, Map<String, String> restParams, Long requestTime,\n+            String responseBody) {\n+        boolean valid = checkRestParams(restParams);\n+        try {\n+            if (!valid) {\n+                LOGGER.debug(\"Cannot create structured event, because rest params are invalid.\");\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5Nzk4OQ=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjkxNDk3OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo1Mjo0NlrOHQiM6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjowMDozMVrOHQkuAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5OTYyNQ==", "bodyText": "this is a bit complicated class with a lot of logic and hard to follow/understand. no one would dare to touch it if you don't cover this with unit tests pretty well.\nalso some refactor would be nice, the high number of Autowires indicate the same also that maybe the whole class could be refactored into smaller ones which is easier to understand, maintain and test", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487099625", "createdAt": "2020-09-11T14:52:46Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "diffHunk": "@@ -0,0 +1,383 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.filter;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.REST;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_CRN;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_EVENT;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_NAME;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_TYPE;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.WriterInterceptor;\n+import javax.ws.rs.ext.WriterInterceptorContext;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.glassfish.jersey.message.MessageUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.security.authentication.AuthenticatedUserService;\n+import com.sequenceiq.cloudbreak.common.user.CloudbreakUser;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestResponseDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResourceRepository;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CDPRestCommonService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.annotation.AccountEntityType;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPBaseRestRequestThreadLocalService;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPDefaultStructuredEventClient;\n+import com.sequenceiq.cloudbreak.structuredevent.service.lookup.CDPAccountAwareRepositoryLookupService;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+\n+@Component\n+public class CDPStructuredEventFilter implements WriterInterceptor, ContainerRequestFilter, ContainerResponseFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMjY2MA==", "bodyText": "Hi, yes, it makes sense, but this logic came from the core module. Good idea to refactor it, but it could be a separated task/improvement. Also my experience with this class that dependencies could not be injected into Jersey managed filters with Inject annotation and the only way that worked for me leave the Autowires. I only could dig in a little bit, but in case of Inject Jersey tries to use it's own dependency management mechanism to resolve dependencies which are configured in Spring related configurations and managed by Spring.", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487112660", "createdAt": "2020-09-11T15:13:22Z", "author": {"login": "biharitomi"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "diffHunk": "@@ -0,0 +1,383 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.filter;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.REST;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_CRN;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_EVENT;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_NAME;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_TYPE;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.WriterInterceptor;\n+import javax.ws.rs.ext.WriterInterceptorContext;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.glassfish.jersey.message.MessageUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.security.authentication.AuthenticatedUserService;\n+import com.sequenceiq.cloudbreak.common.user.CloudbreakUser;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestResponseDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResourceRepository;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CDPRestCommonService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.annotation.AccountEntityType;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPBaseRestRequestThreadLocalService;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPDefaultStructuredEventClient;\n+import com.sequenceiq.cloudbreak.structuredevent.service.lookup.CDPAccountAwareRepositoryLookupService;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+\n+@Component\n+public class CDPStructuredEventFilter implements WriterInterceptor, ContainerRequestFilter, ContainerResponseFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5OTYyNQ=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0MDg2NA==", "bodyText": "I don't have any issues with Autowire :)\nI'm fine with fixing this in a followup pr, just please create a jira for that, otherwise I'm afraid this will stay the same way", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487140864", "createdAt": "2020-09-11T16:00:31Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/CDPStructuredEventFilter.java", "diffHunk": "@@ -0,0 +1,383 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.filter;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.REST;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_CRN;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_EVENT;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_NAME;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_TYPE;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.WriterInterceptor;\n+import javax.ws.rs.ext.WriterInterceptorContext;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.glassfish.jersey.message.MessageUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.security.authentication.AuthenticatedUserService;\n+import com.sequenceiq.cloudbreak.common.user.CloudbreakUser;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestResponseDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResourceRepository;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CDPRestCommonService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.annotation.AccountEntityType;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPBaseRestRequestThreadLocalService;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPDefaultStructuredEventClient;\n+import com.sequenceiq.cloudbreak.structuredevent.service.lookup.CDPAccountAwareRepositoryLookupService;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+\n+@Component\n+public class CDPStructuredEventFilter implements WriterInterceptor, ContainerRequestFilter, ContainerResponseFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5OTYyNQ=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Njk0ODkzOnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/AbstractAccountAwareResourceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTowMTowOVrOHQih_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTowMTowOVrOHQih_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwNTAyMQ==", "bodyText": "maybe @NotEmpty would fit better. Should we add this to the other public methods definition also?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487105021", "createdAt": "2020-09-11T15:01:09Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/AbstractAccountAwareResourceService.java", "diffHunk": "@@ -0,0 +1,156 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nonnull;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+\n+import org.hibernate.exception.ConstraintViolationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.dao.DataIntegrityViolationException;\n+\n+import com.google.common.collect.Sets;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResourceRepository;\n+\n+public abstract class AbstractAccountAwareResourceService<T extends AccountAwareResource>\n+        implements AccountAwareResourceService<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractAccountAwareResourceService.class);\n+\n+    @Override\n+    public T create(T resource, @Nonnull String accountId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzAzMDk2OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/CDPFlowStructuredEventHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToyMjowM1rOHQjUPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyMjoxNFrOHRXYaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExNzg4NA==", "bodyText": "please add unit tests", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487117884", "createdAt": "2020-09-11T15:22:03Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/CDPFlowStructuredEventHandler.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.messaging.Message;\n+import org.springframework.statemachine.StateMachine;\n+import org.springframework.statemachine.listener.StateMachineListenerAdapter;\n+import org.springframework.statemachine.state.State;\n+import org.springframework.statemachine.transition.Transition;\n+import org.springframework.statemachine.trigger.Trigger;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.flow.core.FlowEventListener;\n+\n+@Primary\n+@Component\n+@Scope(\"prototype\")\n+public class CDPFlowStructuredEventHandler<S, E> extends StateMachineListenerAdapter<S, E> implements FlowEventListener<S, E> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNTI4OQ==", "bodyText": "Hm, I tried to write any useful test, but I cannot. Could you please give me any suggestion?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487925289", "createdAt": "2020-09-14T13:41:29Z", "author": {"login": "topolyai5"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/CDPFlowStructuredEventHandler.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.messaging.Message;\n+import org.springframework.statemachine.StateMachine;\n+import org.springframework.statemachine.listener.StateMachineListenerAdapter;\n+import org.springframework.statemachine.state.State;\n+import org.springframework.statemachine.transition.Transition;\n+import org.springframework.statemachine.trigger.Trigger;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.flow.core.FlowEventListener;\n+\n+@Primary\n+@Component\n+@Scope(\"prototype\")\n+public class CDPFlowStructuredEventHandler<S, E> extends StateMachineListenerAdapter<S, E> implements FlowEventListener<S, E> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExNzg4NA=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk1MTg0Nw==", "bodyText": "in public void transition(Transition<S, E> transition) a CDPStructuredEvent is sent. in this meethod there are a lot of ternary operator and an if also. depending on the transition parameter one of the cdpStructuredFlowEventFactory.createStructuredFlowEvent is called with different values which could be asserted.\nyou can even check the in case an error like nullpointer it is caught, so this would ensure no one removes the try catch by mistake.\nin public void stateMachineStopped(StateMachine<S, E> stateMachine) you could test it has only  effect if it's not complete. it also has some ternary operator, those effects could be tested also.\n\nIn the meanwhile: why do we have try-catch in transition and not in stateMachineStopped?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487951847", "createdAt": "2020-09-14T14:06:26Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/CDPFlowStructuredEventHandler.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.messaging.Message;\n+import org.springframework.statemachine.StateMachine;\n+import org.springframework.statemachine.listener.StateMachineListenerAdapter;\n+import org.springframework.statemachine.state.State;\n+import org.springframework.statemachine.transition.Transition;\n+import org.springframework.statemachine.trigger.Trigger;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.flow.core.FlowEventListener;\n+\n+@Primary\n+@Component\n+@Scope(\"prototype\")\n+public class CDPFlowStructuredEventHandler<S, E> extends StateMachineListenerAdapter<S, E> implements FlowEventListener<S, E> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExNzg4NA=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2NDI3Mw==", "bodyText": "In the meanwhile: why do we have try-catch in transition and not in stateMachineStopped?\nGood questions, these codes are 2-3 years old.", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487964273", "createdAt": "2020-09-14T14:16:15Z", "author": {"login": "topolyai5"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/CDPFlowStructuredEventHandler.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.messaging.Message;\n+import org.springframework.statemachine.StateMachine;\n+import org.springframework.statemachine.listener.StateMachineListenerAdapter;\n+import org.springframework.statemachine.state.State;\n+import org.springframework.statemachine.transition.Transition;\n+import org.springframework.statemachine.trigger.Trigger;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.flow.core.FlowEventListener;\n+\n+@Primary\n+@Component\n+@Scope(\"prototype\")\n+public class CDPFlowStructuredEventHandler<S, E> extends StateMachineListenerAdapter<S, E> implements FlowEventListener<S, E> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExNzg4NA=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3MDkyMA==", "bodyText": "I don't agree with you. These tests could not catch any error. I cannot validate the content of the payload. It would be much useful than verifying the methods.\nBut I will write these tests, maybe", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487970920", "createdAt": "2020-09-14T14:22:14Z", "author": {"login": "topolyai5"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/CDPFlowStructuredEventHandler.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.messaging.Message;\n+import org.springframework.statemachine.StateMachine;\n+import org.springframework.statemachine.listener.StateMachineListenerAdapter;\n+import org.springframework.statemachine.state.State;\n+import org.springframework.statemachine.transition.Transition;\n+import org.springframework.statemachine.trigger.Trigger;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.flow.core.FlowEventListener;\n+\n+@Primary\n+@Component\n+@Scope(\"prototype\")\n+public class CDPFlowStructuredEventHandler<S, E> extends StateMachineListenerAdapter<S, E> implements FlowEventListener<S, E> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExNzg4NA=="}, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzAzNzcwOnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/converter/CDPStructuredEventEntityToCDPStructuredEventConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToyMzo0OFrOHQjYbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToyMzo0OFrOHQjYbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExODk1OQ==", "bodyText": "unit test", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487118959", "createdAt": "2020-09-11T15:23:48Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/converter/CDPStructuredEventEntityToCDPStructuredEventConverter.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.converter;\n+\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.collect.Maps;\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.converter.AbstractConversionServiceAwareConverter;\n+import com.sequenceiq.cloudbreak.structuredevent.domain.CDPStructuredEventEntity;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredFlowEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredNotificationEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredRestCallEvent;\n+\n+@Component\n+public class CDPStructuredEventEntityToCDPStructuredEventConverter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzA0MjM1OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/converter/CDPStructuredEventToCDPStructuredEventEntityConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToyNDo1OVrOHQjbVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToyNDo1OVrOHQjbVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExOTcwMw==", "bodyText": "shall we log the source to know what we can't convert?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487119703", "createdAt": "2020-09-11T15:24:59Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/converter/CDPStructuredEventToCDPStructuredEventEntityConverter.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.converter;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.converter.AbstractConversionServiceAwareConverter;\n+import com.sequenceiq.cloudbreak.structuredevent.domain.CDPStructuredEventEntity;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+\n+@Component\n+public class CDPStructuredEventToCDPStructuredEventEntityConverter\n+        extends AbstractConversionServiceAwareConverter<CDPStructuredEvent, CDPStructuredEventEntity> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPStructuredEventToCDPStructuredEventEntityConverter.class);\n+\n+    @Override\n+    public CDPStructuredEventEntity convert(CDPStructuredEvent source) {\n+        try {\n+            CDPStructuredEventEntity structuredEventEntity = new CDPStructuredEventEntity();\n+            structuredEventEntity.setStructuredEventJson(new Json(source));\n+            CDPOperationDetails operationDetails = source.getOperation();\n+            structuredEventEntity.setEventType(operationDetails.getEventType());\n+            structuredEventEntity.setResourceType(operationDetails.getResourceType());\n+            structuredEventEntity.setResourceCrn(operationDetails.getResourceCrn());\n+            structuredEventEntity.setTimestamp(operationDetails.getTimestamp());\n+            structuredEventEntity.setAccountId(source.getOperation().getAccountId());\n+            return structuredEventEntity;\n+        } catch (IllegalArgumentException e) {\n+            LOGGER.error(\"Failed to parse structured event JSON\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzExNjExOnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/lookup/CDPRepositoryLookupService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo0NDowOFrOHQkJHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo0NDowOFrOHQkJHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzMTQyMg==", "bodyText": "this field is unnecessary and misleading. could you remove this?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487131422", "createdAt": "2020-09-11T15:44:08Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/lookup/CDPRepositoryLookupService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.lookup;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.sequenceiq.cloudbreak.workspace.repository.EntityType;\n+\n+public abstract class CDPRepositoryLookupService<T extends CrudRepository<?, ?>> {\n+\n+    private List<T> repositoryList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzEyMzQ2OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-legacy/src/main/java/com/sequenceiq/cloudbreak/structuredevent/config/LegacyStructuredEventConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo0NTo1OFrOHQkNWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo0NTo1OFrOHQkNWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzMjUwNQ==", "bodyText": "do we need this class?", "url": "https://github.com/hortonworks/cloudbreak/pull/8937#discussion_r487132505", "createdAt": "2020-09-11T15:45:58Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-legacy/src/main/java/com/sequenceiq/cloudbreak/structuredevent/config/LegacyStructuredEventConfig.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.sequenceiq.cloudbreak.structuredevent.config;\n+\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class LegacyStructuredEventConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02641c35f6adb27fe60bed935aff3335cd3a69f2"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2358, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}