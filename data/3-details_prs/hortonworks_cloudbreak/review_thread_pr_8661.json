{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MzI3ODU1", "number": 8661, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTo1OTo0MlrOETLv-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDowMjoxOVrOETLz2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTUwOTA1OnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTo1OTo0MlrOG4xb8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo1MTozM1rOG5SF9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4MzQwOQ==", "bodyText": "ClusterProxy is not a user controlled config, hence removed this user facing validation and also clusterProxy is not a cluster level configuration but a deployment level configuration which is required to be enabled. Second  check for clusterProxy is there while polling yarn.\nMultiple load-alerts in a request is already validated in API layer, hence removed duplicate check.", "url": "https://github.com/hortonworks/cloudbreak/pull/8661#discussion_r462183409", "createdAt": "2020-07-29T09:59:42Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "diffHunk": "@@ -229,16 +228,6 @@ private void validateLoadAlert(Long clusterId, Optional<Long> alertId, LoadAlert\n                 () -> {\n                     validateAccountEntitlement(cluster);\n                     validateSupportedHostGroup(cluster, json.getScalingPolicy().getHostGroup(), AlertType.LOAD);\n-                    String requestHostGroup = json.getScalingPolicy().getHostGroup();\n-                    cluster.getLoadAlerts().stream().map(LoadAlert::getScalingPolicy).map(ScalingPolicy::getHostGroup)\n-                            .filter(hostGroup -> hostGroup.equalsIgnoreCase(requestHostGroup)).findAny()\n-                            .ifPresent(hostGroup -> {\n-                                throw new BadRequestException(messagesService\n-                                        .getMessage(MessageCode.LOAD_CONFIG_ALREADY_DEFINED, List.of(cluster.getStackName(), requestHostGroup)));\n-                            });\n-                    clusterProxyConfigurationService.getClusterProxyUrl()\n-                            .orElseThrow(() ->  new BadRequestException(\n-                                    messagesService.getMessage(MessageCode.CLUSTER_PROXY_NOT_CONFIGURED, List.of(cluster.getStackName()))));\n                 });\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed5462dd97bf35eb6983e0d4a9e9cd30c92ff0a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzODkxOA==", "bodyText": "Is ClusterProxy always on? (Is there any way to disable it, via the CLI for example?) Cloudbreak still supports DIRECT and CLUSTER_PROXY (Tunnel.java)", "url": "https://github.com/hortonworks/cloudbreak/pull/8661#discussion_r462638918", "createdAt": "2020-07-29T23:03:02Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "diffHunk": "@@ -229,16 +228,6 @@ private void validateLoadAlert(Long clusterId, Optional<Long> alertId, LoadAlert\n                 () -> {\n                     validateAccountEntitlement(cluster);\n                     validateSupportedHostGroup(cluster, json.getScalingPolicy().getHostGroup(), AlertType.LOAD);\n-                    String requestHostGroup = json.getScalingPolicy().getHostGroup();\n-                    cluster.getLoadAlerts().stream().map(LoadAlert::getScalingPolicy).map(ScalingPolicy::getHostGroup)\n-                            .filter(hostGroup -> hostGroup.equalsIgnoreCase(requestHostGroup)).findAny()\n-                            .ifPresent(hostGroup -> {\n-                                throw new BadRequestException(messagesService\n-                                        .getMessage(MessageCode.LOAD_CONFIG_ALREADY_DEFINED, List.of(cluster.getStackName(), requestHostGroup)));\n-                            });\n-                    clusterProxyConfigurationService.getClusterProxyUrl()\n-                            .orElseThrow(() ->  new BadRequestException(\n-                                    messagesService.getMessage(MessageCode.CLUSTER_PROXY_NOT_CONFIGURED, List.of(cluster.getStackName()))));\n                 });\n     }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4MzQwOQ=="}, "originalCommit": {"oid": "3ed5462dd97bf35eb6983e0d4a9e9cd30c92ff0a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxODQ1NQ==", "bodyText": "Yes it is always on. The datahub registration with cluster proxy is always done irrespective of CLI tunnel parameter. I have tested this flow and access via Cluster Proxy is the only approach that works always since private CM IP will not be accessible for Control Plane Services.", "url": "https://github.com/hortonworks/cloudbreak/pull/8661#discussion_r462718455", "createdAt": "2020-07-30T03:51:33Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "diffHunk": "@@ -229,16 +228,6 @@ private void validateLoadAlert(Long clusterId, Optional<Long> alertId, LoadAlert\n                 () -> {\n                     validateAccountEntitlement(cluster);\n                     validateSupportedHostGroup(cluster, json.getScalingPolicy().getHostGroup(), AlertType.LOAD);\n-                    String requestHostGroup = json.getScalingPolicy().getHostGroup();\n-                    cluster.getLoadAlerts().stream().map(LoadAlert::getScalingPolicy).map(ScalingPolicy::getHostGroup)\n-                            .filter(hostGroup -> hostGroup.equalsIgnoreCase(requestHostGroup)).findAny()\n-                            .ifPresent(hostGroup -> {\n-                                throw new BadRequestException(messagesService\n-                                        .getMessage(MessageCode.LOAD_CONFIG_ALREADY_DEFINED, List.of(cluster.getStackName(), requestHostGroup)));\n-                            });\n-                    clusterProxyConfigurationService.getClusterProxyUrl()\n-                            .orElseThrow(() ->  new BadRequestException(\n-                                    messagesService.getMessage(MessageCode.CLUSTER_PROXY_NOT_CONFIGURED, List.of(cluster.getStackName()))));\n                 });\n     }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4MzQwOQ=="}, "originalCommit": {"oid": "3ed5462dd97bf35eb6983e0d4a9e9cd30c92ff0a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTUxMTA1OnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/DistroXAutoScaleClusterV1Controller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDowMDoxNVrOG4xdLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDowMDoxNVrOG4xdLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4MzcyNg==", "bodyText": "validation need not be within the transaction.", "url": "https://github.com/hortonworks/cloudbreak/pull/8661#discussion_r462183726", "createdAt": "2020-07-29T10:00:15Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/DistroXAutoScaleClusterV1Controller.java", "diffHunk": "@@ -121,11 +121,12 @@ private DistroXAutoscaleClusterResponse createClusterJsonResponse(Cluster cluste\n     private DistroXAutoscaleClusterResponse updateClusterAutoScaleConfig(Long clusterId,\n             DistroXAutoscaleClusterRequest autoscaleClusterRequest) {\n \n+        alertController.validateLoadAlertRequests(clusterId, autoscaleClusterRequest.getLoadAlertRequests());\n+        alertController.validateTimeAlertRequests(clusterId, autoscaleClusterRequest.getTimeAlertRequests());\n+\n         try {\n             transactionService.required(() -> {\n                 clusterService.deleteAlertsForCluster(clusterId);\n-                alertController.validateLoadAlertRequests(clusterId, autoscaleClusterRequest.getLoadAlertRequests());\n-                alertController.validateTimeAlertRequests(clusterId, autoscaleClusterRequest.getTimeAlertRequests());\n                 alertController.createLoadAlerts(clusterId, autoscaleClusterRequest.getLoadAlertRequests());\n                 alertController.createTimeAlerts(clusterId, autoscaleClusterRequest.getTimeAlertRequests());\n                 asClusterCommonService.setAutoscaleState(clusterId, autoscaleClusterRequest.getEnableAutoscaling());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed5462dd97bf35eb6983e0d4a9e9cd30c92ff0a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTUxODk5OnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/handler/ClusterStatusSyncHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDowMjoxOVrOG4xiEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo1ODoyMlrOG5SMWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NDk3Nw==", "bodyText": "Periscope status should be synced based on both cluster and stack status, since next upscale is supported only when both are in available status. Even though they both are in sync in certain stimulated slow CB scenarios there is small drift between these two status.", "url": "https://github.com/hortonworks/cloudbreak/pull/8661#discussion_r462184977", "createdAt": "2020-07-29T10:02:19Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/handler/ClusterStatusSyncHandler.java", "diffHunk": "@@ -39,19 +40,22 @@ public void onApplicationEvent(ClusterStatusSyncEvent event) {\n         }\n         MDCBuilder.buildMdcContext(cluster);\n \n-        Status cbClusterStatus = Optional.ofNullable(cloudbreakCommunicator\n-                .getStackStatusByCrn(cluster.getStackCrn()).getClusterStatus()).orElse(Status.AMBIGUOUS);\n-        LOGGER.debug(\"Analysing CBCluster Status '{}' for Cluster '{}' \", cbClusterStatus, cluster.getStackCrn());\n+        StackStatusV4Response statusResponse = cloudbreakCommunicator.getStackStatusByCrn(cluster.getStackCrn());\n+        boolean clusterAvailable = Optional.ofNullable(statusResponse.getStatus()).map(Status::isAvailable).orElse(false)\n+                && Optional.ofNullable(statusResponse.getClusterStatus()).map(Status::isAvailable).orElse(false);\n+        LOGGER.debug(\"Analysing CBCluster Status '{}' for Cluster '{}' \", statusResponse, cluster.getStackCrn());\n \n-        if (DELETE_COMPLETED.equals(cbClusterStatus)) {\n+        if (DELETE_COMPLETED.equals(statusResponse.getStatus())) {\n             clusterService.removeById(autoscaleClusterId);\n-            LOGGER.debug(\"Deleted cluster '{}', CB Cluster status '{}'.\", cluster.getStackCrn(), cbClusterStatus);\n-        } else if (cbClusterStatus.isAvailable() && !RUNNING.equals(cluster.getState())) {\n+            LOGGER.info(\"Deleted cluster '{}', CB Stack Status '{}'.\", cluster.getStackCrn(), statusResponse.getStatus());\n+        } else if (clusterAvailable && !RUNNING.equals(cluster.getState())) {\n             clusterService.setState(cluster.getId(), ClusterState.RUNNING);\n-            LOGGER.debug(\"Updated cluster '{}' to running, CB Cluster status '{}'.\", cluster.getStackCrn(), cbClusterStatus);\n-        } else if (!cbClusterStatus.isAvailable() && RUNNING.equals(cluster.getState())) {\n+            LOGGER.info(\"Updated cluster '{}' to Running, CB Stack Status '{}', CB Cluster Status '{}'.\",\n+                    cluster.getStackCrn(), statusResponse.getStatus(), statusResponse.getClusterStatus());\n+        } else if (!clusterAvailable && RUNNING.equals(cluster.getState())) {\n             clusterService.setState(cluster.getId(), ClusterState.SUSPENDED);\n-            LOGGER.debug(\"Suspended cluster '{}', CB Cluster status '{}'\", cluster.getStackCrn(), cbClusterStatus);\n+            LOGGER.info(\"Suspended cluster '{}', CB Stack Status '{}', CB Cluster Status '{}'\",\n+                    cluster.getStackCrn(), statusResponse.getStatus(), statusResponse.getClusterStatus());\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed5462dd97bf35eb6983e0d4a9e9cd30c92ff0a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MDI4Mg==", "bodyText": "Thank you. Was going to ask just this question on how they differ.\nWasn't there a change recently where at least downscale worked even if a previous downscale had failed (or node deleted on provider side).\nThat's the series of jiras Amit had opened. cc @cegganesh84", "url": "https://github.com/hortonworks/cloudbreak/pull/8661#discussion_r462640282", "createdAt": "2020-07-29T23:07:17Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/handler/ClusterStatusSyncHandler.java", "diffHunk": "@@ -39,19 +40,22 @@ public void onApplicationEvent(ClusterStatusSyncEvent event) {\n         }\n         MDCBuilder.buildMdcContext(cluster);\n \n-        Status cbClusterStatus = Optional.ofNullable(cloudbreakCommunicator\n-                .getStackStatusByCrn(cluster.getStackCrn()).getClusterStatus()).orElse(Status.AMBIGUOUS);\n-        LOGGER.debug(\"Analysing CBCluster Status '{}' for Cluster '{}' \", cbClusterStatus, cluster.getStackCrn());\n+        StackStatusV4Response statusResponse = cloudbreakCommunicator.getStackStatusByCrn(cluster.getStackCrn());\n+        boolean clusterAvailable = Optional.ofNullable(statusResponse.getStatus()).map(Status::isAvailable).orElse(false)\n+                && Optional.ofNullable(statusResponse.getClusterStatus()).map(Status::isAvailable).orElse(false);\n+        LOGGER.debug(\"Analysing CBCluster Status '{}' for Cluster '{}' \", statusResponse, cluster.getStackCrn());\n \n-        if (DELETE_COMPLETED.equals(cbClusterStatus)) {\n+        if (DELETE_COMPLETED.equals(statusResponse.getStatus())) {\n             clusterService.removeById(autoscaleClusterId);\n-            LOGGER.debug(\"Deleted cluster '{}', CB Cluster status '{}'.\", cluster.getStackCrn(), cbClusterStatus);\n-        } else if (cbClusterStatus.isAvailable() && !RUNNING.equals(cluster.getState())) {\n+            LOGGER.info(\"Deleted cluster '{}', CB Stack Status '{}'.\", cluster.getStackCrn(), statusResponse.getStatus());\n+        } else if (clusterAvailable && !RUNNING.equals(cluster.getState())) {\n             clusterService.setState(cluster.getId(), ClusterState.RUNNING);\n-            LOGGER.debug(\"Updated cluster '{}' to running, CB Cluster status '{}'.\", cluster.getStackCrn(), cbClusterStatus);\n-        } else if (!cbClusterStatus.isAvailable() && RUNNING.equals(cluster.getState())) {\n+            LOGGER.info(\"Updated cluster '{}' to Running, CB Stack Status '{}', CB Cluster Status '{}'.\",\n+                    cluster.getStackCrn(), statusResponse.getStatus(), statusResponse.getClusterStatus());\n+        } else if (!clusterAvailable && RUNNING.equals(cluster.getState())) {\n             clusterService.setState(cluster.getId(), ClusterState.SUSPENDED);\n-            LOGGER.debug(\"Suspended cluster '{}', CB Cluster status '{}'\", cluster.getStackCrn(), cbClusterStatus);\n+            LOGGER.info(\"Suspended cluster '{}', CB Stack Status '{}', CB Cluster Status '{}'\",\n+                    cluster.getStackCrn(), statusResponse.getStatus(), statusResponse.getClusterStatus());\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NDk3Nw=="}, "originalCommit": {"oid": "3ed5462dd97bf35eb6983e0d4a9e9cd30c92ff0a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2MzMzNg==", "bodyText": "Was going to ask just this question on how they differ.\n\nstack -> represents the cloud, cluster -> represents the cm cluster. Yes, there can be drift. The first stack will be scaled to accommodate more nodes. Then the cluster will be scaled by the means of provisioning services. https://jira.cloudera.com/browse/CB-8051?focusedCommentId=2639540&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-2639540. Extending this, will apply for downscale also in the reverse order.", "url": "https://github.com/hortonworks/cloudbreak/pull/8661#discussion_r462663336", "createdAt": "2020-07-30T00:24:25Z", "author": {"login": "cegganesh84"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/handler/ClusterStatusSyncHandler.java", "diffHunk": "@@ -39,19 +40,22 @@ public void onApplicationEvent(ClusterStatusSyncEvent event) {\n         }\n         MDCBuilder.buildMdcContext(cluster);\n \n-        Status cbClusterStatus = Optional.ofNullable(cloudbreakCommunicator\n-                .getStackStatusByCrn(cluster.getStackCrn()).getClusterStatus()).orElse(Status.AMBIGUOUS);\n-        LOGGER.debug(\"Analysing CBCluster Status '{}' for Cluster '{}' \", cbClusterStatus, cluster.getStackCrn());\n+        StackStatusV4Response statusResponse = cloudbreakCommunicator.getStackStatusByCrn(cluster.getStackCrn());\n+        boolean clusterAvailable = Optional.ofNullable(statusResponse.getStatus()).map(Status::isAvailable).orElse(false)\n+                && Optional.ofNullable(statusResponse.getClusterStatus()).map(Status::isAvailable).orElse(false);\n+        LOGGER.debug(\"Analysing CBCluster Status '{}' for Cluster '{}' \", statusResponse, cluster.getStackCrn());\n \n-        if (DELETE_COMPLETED.equals(cbClusterStatus)) {\n+        if (DELETE_COMPLETED.equals(statusResponse.getStatus())) {\n             clusterService.removeById(autoscaleClusterId);\n-            LOGGER.debug(\"Deleted cluster '{}', CB Cluster status '{}'.\", cluster.getStackCrn(), cbClusterStatus);\n-        } else if (cbClusterStatus.isAvailable() && !RUNNING.equals(cluster.getState())) {\n+            LOGGER.info(\"Deleted cluster '{}', CB Stack Status '{}'.\", cluster.getStackCrn(), statusResponse.getStatus());\n+        } else if (clusterAvailable && !RUNNING.equals(cluster.getState())) {\n             clusterService.setState(cluster.getId(), ClusterState.RUNNING);\n-            LOGGER.debug(\"Updated cluster '{}' to running, CB Cluster status '{}'.\", cluster.getStackCrn(), cbClusterStatus);\n-        } else if (!cbClusterStatus.isAvailable() && RUNNING.equals(cluster.getState())) {\n+            LOGGER.info(\"Updated cluster '{}' to Running, CB Stack Status '{}', CB Cluster Status '{}'.\",\n+                    cluster.getStackCrn(), statusResponse.getStatus(), statusResponse.getClusterStatus());\n+        } else if (!clusterAvailable && RUNNING.equals(cluster.getState())) {\n             clusterService.setState(cluster.getId(), ClusterState.SUSPENDED);\n-            LOGGER.debug(\"Suspended cluster '{}', CB Cluster status '{}'\", cluster.getStackCrn(), cbClusterStatus);\n+            LOGGER.info(\"Suspended cluster '{}', CB Stack Status '{}', CB Cluster Status '{}'\",\n+                    cluster.getStackCrn(), statusResponse.getStatus(), statusResponse.getClusterStatus());\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NDk3Nw=="}, "originalCommit": {"oid": "3ed5462dd97bf35eb6983e0d4a9e9cd30c92ff0a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMDA5MA==", "bodyText": "Wasn't there a change recently where at least downscale worked even if a previous downscale had failed (or node deleted on provider side).\n\namit opened jiras were basically related to CB not identifying node deleted on provider side. It is not related to this change.  The other change in this area is that forced downscaling is integrated with Yarn Recommended Nodes but this PR change is not related to that.", "url": "https://github.com/hortonworks/cloudbreak/pull/8661#discussion_r462720090", "createdAt": "2020-07-30T03:58:22Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/handler/ClusterStatusSyncHandler.java", "diffHunk": "@@ -39,19 +40,22 @@ public void onApplicationEvent(ClusterStatusSyncEvent event) {\n         }\n         MDCBuilder.buildMdcContext(cluster);\n \n-        Status cbClusterStatus = Optional.ofNullable(cloudbreakCommunicator\n-                .getStackStatusByCrn(cluster.getStackCrn()).getClusterStatus()).orElse(Status.AMBIGUOUS);\n-        LOGGER.debug(\"Analysing CBCluster Status '{}' for Cluster '{}' \", cbClusterStatus, cluster.getStackCrn());\n+        StackStatusV4Response statusResponse = cloudbreakCommunicator.getStackStatusByCrn(cluster.getStackCrn());\n+        boolean clusterAvailable = Optional.ofNullable(statusResponse.getStatus()).map(Status::isAvailable).orElse(false)\n+                && Optional.ofNullable(statusResponse.getClusterStatus()).map(Status::isAvailable).orElse(false);\n+        LOGGER.debug(\"Analysing CBCluster Status '{}' for Cluster '{}' \", statusResponse, cluster.getStackCrn());\n \n-        if (DELETE_COMPLETED.equals(cbClusterStatus)) {\n+        if (DELETE_COMPLETED.equals(statusResponse.getStatus())) {\n             clusterService.removeById(autoscaleClusterId);\n-            LOGGER.debug(\"Deleted cluster '{}', CB Cluster status '{}'.\", cluster.getStackCrn(), cbClusterStatus);\n-        } else if (cbClusterStatus.isAvailable() && !RUNNING.equals(cluster.getState())) {\n+            LOGGER.info(\"Deleted cluster '{}', CB Stack Status '{}'.\", cluster.getStackCrn(), statusResponse.getStatus());\n+        } else if (clusterAvailable && !RUNNING.equals(cluster.getState())) {\n             clusterService.setState(cluster.getId(), ClusterState.RUNNING);\n-            LOGGER.debug(\"Updated cluster '{}' to running, CB Cluster status '{}'.\", cluster.getStackCrn(), cbClusterStatus);\n-        } else if (!cbClusterStatus.isAvailable() && RUNNING.equals(cluster.getState())) {\n+            LOGGER.info(\"Updated cluster '{}' to Running, CB Stack Status '{}', CB Cluster Status '{}'.\",\n+                    cluster.getStackCrn(), statusResponse.getStatus(), statusResponse.getClusterStatus());\n+        } else if (!clusterAvailable && RUNNING.equals(cluster.getState())) {\n             clusterService.setState(cluster.getId(), ClusterState.SUSPENDED);\n-            LOGGER.debug(\"Suspended cluster '{}', CB Cluster status '{}'\", cluster.getStackCrn(), cbClusterStatus);\n+            LOGGER.info(\"Suspended cluster '{}', CB Stack Status '{}', CB Cluster Status '{}'\",\n+                    cluster.getStackCrn(), statusResponse.getStatus(), statusResponse.getClusterStatus());\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NDk3Nw=="}, "originalCommit": {"oid": "3ed5462dd97bf35eb6983e0d4a9e9cd30c92ff0a"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2983, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}