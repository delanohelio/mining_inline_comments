{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NTA4MjIw", "number": 8515, "title": "CB-6364: Create CB core api and flow which updates salt config", "bodyText": "This commit adds support for a flow and API call that updates\nthe salt config on a cluster and then runs the high state to\napply the config.  Primarily this is to allow for the DNS\nserver IPs to be updated when they change with a FreeIPA node\nchange.  Since those IPs are pulled from the FreeIPA service\ndynamically when a salt config is created it was felt that a\ngeneral salt config update flow and API call would allow for\nany change the affects the salt config to be updated and\nconfigured on a cluster.\nCloses #CB-6364", "createdAt": "2020-07-08T22:03:01Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8515", "merged": true, "mergeCommit": {"oid": "ea2d0c15aadf3a9f2cf625af13eed1e8a90d1b2c"}, "closed": true, "closedAt": "2020-07-16T07:51:08Z", "author": {"login": "wonderslug"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczMePtgFqTQ0NTQ2OTc5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1aaw5AFqTQ0OTYwMjM5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NDY5Nzk3", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#pullrequestreview-445469797", "createdAt": "2020-07-09T10:01:40Z", "commit": {"oid": "2fab989c6900b089f978ed980460ffdc1a0eadc8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDowMTo0MVrOGvKYLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDoxMToxN1rOGvKseg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNjI4Nw==", "bodyText": "I think this should be ClusterDeletionBasedExitCriteriaModel", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#discussion_r452106287", "createdAt": "2020-07-09T10:01:41Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "diffHunk": "@@ -223,6 +224,20 @@ public void runClusterServices(@Nonnull Stack stack, @Nonnull Cluster cluster, L\n         }\n     }\n \n+    public void updateClusterConfigs(@Nonnull Stack stack, @Nonnull Cluster cluster, List<String> candidateAddresses) {\n+        try {\n+            Set<Node> nodes = stackUtil.collectReachableNodes(stack);\n+            GatewayConfig primaryGatewayConfig = gatewayConfigService.getPrimaryGatewayConfig(stack);\n+            List<GatewayConfig> gatewayConfigs = gatewayConfigService.getAllGatewayConfigs(stack);\n+            SaltConfig saltConfig = createSaltConfig(stack, cluster, primaryGatewayConfig, gatewayConfigs, nodes);\n+            ExitCriteriaModel exitCriteriaModel = nonCancellableModel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab989c6900b089f978ed980460ffdc1a0eadc8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNzY5OQ==", "bodyText": "why not AbstractClusterAction?", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#discussion_r452107699", "createdAt": "2020-07-09T10:04:19Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/config/update/ConfigUpdateActions.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.sequenceiq.cloudbreak.core.flow2.cluster.config.update;\n+\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.ConfigUpdateEvent.CONFIG_UPDATE_FINALIZE_EVENT;\n+\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.AbstractClusterAction;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.ClusterViewContext;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.ConfigUpdateRequest;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.ConfigUpdateSuccess;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.AbstractStackFailureAction;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.StackContext;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.StackFailureContext;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.provision.action.AbstractStackCreationAction;\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackFailureEvent;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.statemachine.action.Action;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ConfigUpdateActions {\n+\n+    @Inject\n+    private ConfigUpdateService configUpdateService;\n+\n+    @Bean(name = \"CONFIG_UPDATE_START_STATE\")\n+    public Action<?, ?> configUpdateStartAction() {\n+        return new AbstractStackCreationAction<>(StackEvent.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab989c6900b089f978ed980460ffdc1a0eadc8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwOTQxMw==", "bodyText": "I think this should be outside of the transaction, but inside the try-catch. so it won't run if the transaction fails, but we should release the lock as soon as possible", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#discussion_r452109413", "createdAt": "2020-07-09T10:07:19Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/config/update/ConfigUpdateService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.cloudbreak.core.flow2.cluster.config.update;\n+\n+import static com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status.AVAILABLE;\n+import static com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status.UPDATE_FAILED;\n+import static com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status.UPDATE_IN_PROGRESS;\n+import static com.sequenceiq.cloudbreak.event.ResourceEvent.CLUSTER_CONFIG_UPDATE_FAILED;\n+import static com.sequenceiq.cloudbreak.event.ResourceEvent.CLUSTER_CONFIG_UPDATE_FINISHED;\n+import static com.sequenceiq.cloudbreak.event.ResourceEvent.CLUSTER_CONFIG_UPDATE_STARTED;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.common.service.TransactionService;\n+import com.sequenceiq.cloudbreak.common.service.TransactionService.TransactionExecutionException;\n+import com.sequenceiq.cloudbreak.common.service.TransactionService.TransactionRuntimeExecutionException;\n+import com.sequenceiq.cloudbreak.core.bootstrap.service.host.ClusterHostServiceRunner;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationService;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.CloudbreakFlowMessageService;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.view.StackView;\n+import com.sequenceiq.cloudbreak.service.StackUpdater;\n+import com.sequenceiq.cloudbreak.service.cluster.ClusterService;\n+import com.sequenceiq.cloudbreak.service.stack.StackService;\n+import java.util.List;\n+import javax.inject.Inject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ConfigUpdateService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConfigUpdateService.class);\n+\n+    @Inject\n+    private StackUpdater stackUpdater;\n+\n+    @Inject\n+    private CloudbreakFlowMessageService flowMessageService;\n+\n+    @Inject\n+    private ClusterService clusterService;\n+\n+    @Inject\n+    private TransactionService transactionService;\n+\n+    @Inject\n+    private ClusterCreationService clusterCreationService;\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private ClusterHostServiceRunner clusterHostServiceRunner;\n+\n+    public void doConfigUpdate(Long stackId) {\n+        stackUpdater.updateStackStatus(stackId, DetailedStackStatus.BOOTSTRAPPING_MACHINES);\n+        flowMessageService\n+            .fireEventAndLog(stackId, UPDATE_IN_PROGRESS.name(), CLUSTER_CONFIG_UPDATE_STARTED);\n+        Stack stack = stackService.getByIdWithClusterInTransaction(stackId);\n+        clusterHostServiceRunner.updateClusterConfigs(stack, stack.getCluster(), List.of());\n+    }\n+\n+    public void configUpdateFinished(StackView stackView) {\n+        try {\n+            transactionService.required(() -> {\n+                clusterService.updateClusterStatusByStackId(stackView.getId(), AVAILABLE);\n+                stackUpdater.updateStackStatus(stackView.getId(), DetailedStackStatus.AVAILABLE,\n+                    \"Config update finished.\");\n+                flowMessageService.fireEventAndLog(stackView.getId(), AVAILABLE.name(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab989c6900b089f978ed980460ffdc1a0eadc8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExMDQxMA==", "bodyText": "if the above was in transaction, shouldn't this be in one?", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#discussion_r452110410", "createdAt": "2020-07-09T10:09:12Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/config/update/ConfigUpdateService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.cloudbreak.core.flow2.cluster.config.update;\n+\n+import static com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status.AVAILABLE;\n+import static com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status.UPDATE_FAILED;\n+import static com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status.UPDATE_IN_PROGRESS;\n+import static com.sequenceiq.cloudbreak.event.ResourceEvent.CLUSTER_CONFIG_UPDATE_FAILED;\n+import static com.sequenceiq.cloudbreak.event.ResourceEvent.CLUSTER_CONFIG_UPDATE_FINISHED;\n+import static com.sequenceiq.cloudbreak.event.ResourceEvent.CLUSTER_CONFIG_UPDATE_STARTED;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.common.service.TransactionService;\n+import com.sequenceiq.cloudbreak.common.service.TransactionService.TransactionExecutionException;\n+import com.sequenceiq.cloudbreak.common.service.TransactionService.TransactionRuntimeExecutionException;\n+import com.sequenceiq.cloudbreak.core.bootstrap.service.host.ClusterHostServiceRunner;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationService;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.CloudbreakFlowMessageService;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.view.StackView;\n+import com.sequenceiq.cloudbreak.service.StackUpdater;\n+import com.sequenceiq.cloudbreak.service.cluster.ClusterService;\n+import com.sequenceiq.cloudbreak.service.stack.StackService;\n+import java.util.List;\n+import javax.inject.Inject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ConfigUpdateService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConfigUpdateService.class);\n+\n+    @Inject\n+    private StackUpdater stackUpdater;\n+\n+    @Inject\n+    private CloudbreakFlowMessageService flowMessageService;\n+\n+    @Inject\n+    private ClusterService clusterService;\n+\n+    @Inject\n+    private TransactionService transactionService;\n+\n+    @Inject\n+    private ClusterCreationService clusterCreationService;\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private ClusterHostServiceRunner clusterHostServiceRunner;\n+\n+    public void doConfigUpdate(Long stackId) {\n+        stackUpdater.updateStackStatus(stackId, DetailedStackStatus.BOOTSTRAPPING_MACHINES);\n+        flowMessageService\n+            .fireEventAndLog(stackId, UPDATE_IN_PROGRESS.name(), CLUSTER_CONFIG_UPDATE_STARTED);\n+        Stack stack = stackService.getByIdWithClusterInTransaction(stackId);\n+        clusterHostServiceRunner.updateClusterConfigs(stack, stack.getCluster(), List.of());\n+    }\n+\n+    public void configUpdateFinished(StackView stackView) {\n+        try {\n+            transactionService.required(() -> {\n+                clusterService.updateClusterStatusByStackId(stackView.getId(), AVAILABLE);\n+                stackUpdater.updateStackStatus(stackView.getId(), DetailedStackStatus.AVAILABLE,\n+                    \"Config update finished.\");\n+                flowMessageService.fireEventAndLog(stackView.getId(), AVAILABLE.name(),\n+                    CLUSTER_CONFIG_UPDATE_FINISHED);\n+            });\n+        } catch (TransactionExecutionException e) {\n+            throw new TransactionRuntimeExecutionException(e);\n+        }\n+    }\n+\n+    public void handleConfigUpdateFailure(StackView stackView, Exception exception) {\n+        if (stackView.getClusterView() != null) {\n+            String errorMessage = clusterCreationService.getErrorMessageFromException(exception);\n+            clusterService\n+                .updateClusterStatusByStackId(stackView.getId(), UPDATE_FAILED, errorMessage);\n+            stackUpdater.updateStackStatus(stackView.getId(), DetailedStackStatus.AVAILABLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab989c6900b089f978ed980460ffdc1a0eadc8"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExMTQ4Mg==", "bodyText": "From EventHandler:\n@deprecated Please use ExceptionCatcherEventHandler", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#discussion_r452111482", "createdAt": "2020-07-09T10:11:17Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/config/update/handler/ConfigUpdateHandler.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.handler;\n+\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.ConfigUpdateService;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.ConfigUpdateFailed;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.ConfigUpdateRequest;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.ConfigUpdateSuccess;\n+import com.sequenceiq.flow.event.EventSelectorUtil;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Component;\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class ConfigUpdateHandler implements EventHandler<ConfigUpdateRequest> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fab989c6900b089f978ed980460ffdc1a0eadc8"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2fab989c6900b089f978ed980460ffdc1a0eadc8", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2fab989c6900b089f978ed980460ffdc1a0eadc8", "committedDate": "2020-07-08T22:00:31Z", "message": "CB-6364: Create CB core api and flow which updates salt config\n\nThis commit adds support for a flow and api call that updates\nthe salt config on a cluster and then runs the highstate to\napply the config.  Primarily this is to allow for the DNS\nserver IPs to be updated when they change with a FreeIPA node\nchange.  Since those IPs are pulled from the FreeIPA service\ndynamically when a salt config is created it was felt that a\ngeneral salt config update flow and api call would allow for\nany change the affects the salt config to be updated and\nconfigured on a cluster."}, "afterCommit": {"oid": "8e264b664ac16d16eea358a4a791153b870a4e92", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8e264b664ac16d16eea358a4a791153b870a4e92", "committedDate": "2020-07-10T19:35:46Z", "message": "CB-6364: Create CB core api and flow which updates salt config\n\nThis commit adds support for a flow and api call that updates\nthe salt config on a cluster and then runs the highstate to\napply the config.  Primarily this is to allow for the DNS\nserver IPs to be updated when they change with a FreeIPA node\nchange.  Since those IPs are pulled from the FreeIPA service\ndynamically when a salt config is created it was felt that a\ngeneral salt config update flow and api call would allow for\nany change the affects the salt config to be updated and\nconfigured on a cluster."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzAzOTg3", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#pullrequestreview-446703987", "createdAt": "2020-07-10T21:13:11Z", "commit": {"oid": "8e264b664ac16d16eea358a4a791153b870a4e92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e264b664ac16d16eea358a4a791153b870a4e92", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8e264b664ac16d16eea358a4a791153b870a4e92", "committedDate": "2020-07-10T19:35:46Z", "message": "CB-6364: Create CB core api and flow which updates salt config\n\nThis commit adds support for a flow and api call that updates\nthe salt config on a cluster and then runs the highstate to\napply the config.  Primarily this is to allow for the DNS\nserver IPs to be updated when they change with a FreeIPA node\nchange.  Since those IPs are pulled from the FreeIPA service\ndynamically when a salt config is created it was felt that a\ngeneral salt config update flow and api call would allow for\nany change the affects the salt config to be updated and\nconfigured on a cluster."}, "afterCommit": {"oid": "e6edcea4f42a9936062c01f4971ee6cc5e3f8d1a", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e6edcea4f42a9936062c01f4971ee6cc5e3f8d1a", "committedDate": "2020-07-10T21:17:42Z", "message": "CB-6364: Create CB core api and flow which updates salt config\n\nThis commit adds support for a flow and api call that updates\nthe salt config on a cluster and then runs the highstate to\napply the config.  Primarily this is to allow for the DNS\nserver IPs to be updated when they change with a FreeIPA node\nchange.  Since those IPs are pulled from the FreeIPA service\ndynamically when a salt config is created it was felt that a\ngeneral salt config update flow and api call would allow for\nany change the affects the salt config to be updated and\nconfigured on a cluster."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3ODQyOTk4", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#pullrequestreview-447842998", "createdAt": "2020-07-14T07:08:28Z", "commit": {"oid": "e6edcea4f42a9936062c01f4971ee6cc5e3f8d1a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzowODoyOFrOGxHBUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzoyODowOFrOGxHnrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0ODQzNA==", "bodyText": "import reordering doesn't seem necessary", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#discussion_r454148434", "createdAt": "2020-07-14T07:08:28Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "diffHunk": "@@ -101,6 +75,29 @@\n import com.sequenceiq.cloudbreak.util.StackUtil;\n import com.sequenceiq.common.api.tag.model.Tags;\n import com.sequenceiq.common.api.telemetry.model.Telemetry;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nonnull;\n+import javax.inject.Inject;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.CollectionUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6edcea4f42a9936062c01f4971ee6cc5e3f8d1a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0OTMyMg==", "bodyText": "should be @Configuration", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#discussion_r454149322", "createdAt": "2020-07-14T07:10:26Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/config/update/PillarConfigUpdateActions.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.sequenceiq.cloudbreak.core.flow2.cluster.config.update;\n+\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.PillarConfigurationUpdateEvent.PILLAR_CONFIG_UPDATE_FINALIZE_EVENT;\n+\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.AbstractClusterAction;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.ClusterViewContext;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.PillarConfigUpdateRequest;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.PillarConfigUpdateSuccess;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.AbstractStackFailureAction;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.StackFailureContext;\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackFailureEvent;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.statemachine.action.Action;\n+import org.springframework.stereotype.Component;\n+\n+@Component", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6edcea4f42a9936062c01f4971ee6cc5e3f8d1a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0OTg1OQ==", "bodyText": "log would be nice here", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#discussion_r454149859", "createdAt": "2020-07-14T07:11:32Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/config/update/PillarConfigUpdateActions.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.sequenceiq.cloudbreak.core.flow2.cluster.config.update;\n+\n+import static com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.PillarConfigurationUpdateEvent.PILLAR_CONFIG_UPDATE_FINALIZE_EVENT;\n+\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.AbstractClusterAction;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.ClusterViewContext;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.PillarConfigUpdateRequest;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.PillarConfigUpdateSuccess;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationEvent;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationState;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.AbstractStackFailureAction;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.StackFailureContext;\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackFailureEvent;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.statemachine.action.Action;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class PillarConfigUpdateActions {\n+\n+    @Inject\n+    private PillarConfigUpdateService pillarConfigUpdateService;\n+\n+    @Bean(name = \"PILLAR_CONFIG_UPDATE_START_STATE\")\n+    public Action<?, ?> configUpdateStartAction() {\n+        return new AbstractClusterAction<>(StackEvent.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, StackEvent payload,\n+                Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new PillarConfigUpdateRequest(context.getStack().getId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"PILLAR_CONFIG_UPDATE_FINISHED_STATE\")\n+    public Action<?, ?> configUpdateFinishedAction() {\n+        return new AbstractClusterAction<>(PillarConfigUpdateSuccess.class) {\n+            @Override\n+            protected void doExecute(ClusterViewContext context, PillarConfigUpdateSuccess payload,\n+                Map<Object, Object> variables) {\n+                pillarConfigUpdateService.configUpdateFinished(context.getStack());\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ClusterViewContext context) {\n+                return new StackEvent(PILLAR_CONFIG_UPDATE_FINALIZE_EVENT.event(), context.getStackId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"PILLAR_CONFIG_UPDATE_FAILED_STATE\")\n+    public Action<?, ?> configUpdateFailedAction() {\n+        return new AbstractStackFailureAction<ClusterCreationState, ClusterCreationEvent>() {\n+            @Override\n+            protected void doExecute(StackFailureContext context, StackFailureEvent payload,\n+                Map<Object, Object> variables) {\n+                pillarConfigUpdateService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6edcea4f42a9936062c01f4971ee6cc5e3f8d1a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1NzY2Ng==", "bodyText": "it's not ideal to throw any exception in the failure handling part", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#discussion_r454157666", "createdAt": "2020-07-14T07:27:01Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/config/update/PillarConfigUpdateService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.sequenceiq.cloudbreak.core.flow2.cluster.config.update;\n+\n+import static com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status.AVAILABLE;\n+import static com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status.UPDATE_FAILED;\n+import static com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status.UPDATE_IN_PROGRESS;\n+import static com.sequenceiq.cloudbreak.event.ResourceEvent.CLUSTER_PILLAR_CONFIG_UPDATE_FAILED;\n+import static com.sequenceiq.cloudbreak.event.ResourceEvent.CLUSTER_PILLAR_CONFIG_UPDATE_FINISHED;\n+import static com.sequenceiq.cloudbreak.event.ResourceEvent.CLUSTER_PILLAR_CONFIG_UPDATE_STARTED;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.common.service.TransactionService;\n+import com.sequenceiq.cloudbreak.common.service.TransactionService.TransactionExecutionException;\n+import com.sequenceiq.cloudbreak.common.service.TransactionService.TransactionRuntimeExecutionException;\n+import com.sequenceiq.cloudbreak.core.bootstrap.service.host.ClusterHostServiceRunner;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationService;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.CloudbreakFlowMessageService;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.view.StackView;\n+import com.sequenceiq.cloudbreak.service.StackUpdater;\n+import com.sequenceiq.cloudbreak.service.cluster.ClusterService;\n+import com.sequenceiq.cloudbreak.service.stack.StackService;\n+import java.util.List;\n+import javax.inject.Inject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class PillarConfigUpdateService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PillarConfigUpdateService.class);\n+\n+    @Inject\n+    private StackUpdater stackUpdater;\n+\n+    @Inject\n+    private CloudbreakFlowMessageService flowMessageService;\n+\n+    @Inject\n+    private ClusterService clusterService;\n+\n+    @Inject\n+    private TransactionService transactionService;\n+\n+    @Inject\n+    private ClusterCreationService clusterCreationService;\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private ClusterHostServiceRunner clusterHostServiceRunner;\n+\n+    public void doConfigUpdate(Long stackId) {\n+        stackUpdater.updateStackStatus(stackId, DetailedStackStatus.BOOTSTRAPPING_MACHINES);\n+        flowMessageService\n+            .fireEventAndLog(stackId, UPDATE_IN_PROGRESS.name(),\n+                CLUSTER_PILLAR_CONFIG_UPDATE_STARTED);\n+        Stack stack = stackService.getByIdWithClusterInTransaction(stackId);\n+        clusterHostServiceRunner.updateClusterConfigs(stack, stack.getCluster(), List.of());\n+    }\n+\n+    public void configUpdateFinished(StackView stackView) {\n+        try {\n+            transactionService.required(() -> {\n+                clusterService.updateClusterStatusByStackId(stackView.getId(), AVAILABLE);\n+                stackUpdater.updateStackStatus(stackView.getId(), DetailedStackStatus.AVAILABLE,\n+                    \"Config update finished.\");\n+            });\n+            flowMessageService.fireEventAndLog(stackView.getId(), AVAILABLE.name(),\n+                CLUSTER_PILLAR_CONFIG_UPDATE_FINISHED);\n+        } catch (TransactionExecutionException e) {\n+            throw new TransactionRuntimeExecutionException(e);\n+        }\n+    }\n+\n+    public void handleConfigUpdateFailure(StackView stackView, Exception exception) {\n+        try {\n+            if (stackView.getClusterView() != null) {\n+                String errorMessage = clusterCreationService\n+                    .getErrorMessageFromException(exception);\n+                transactionService.required(() -> {\n+                    clusterService\n+                        .updateClusterStatusByStackId(stackView.getId(), UPDATE_FAILED,\n+                            errorMessage);\n+                    stackUpdater\n+                        .updateStackStatus(stackView.getId(), DetailedStackStatus.AVAILABLE);\n+                });\n+                flowMessageService.fireEventAndLog(stackView.getId(), UPDATE_FAILED.name(),\n+                    CLUSTER_PILLAR_CONFIG_UPDATE_FAILED, errorMessage);\n+            } else {\n+                LOGGER.info(\"Cluster was null. Flow action was not required.\");\n+            }\n+        } catch (TransactionExecutionException e) {\n+            throw new TransactionRuntimeExecutionException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6edcea4f42a9936062c01f4971ee6cc5e3f8d1a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1ODI1Mw==", "bodyText": "please add a log line here", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#discussion_r454158253", "createdAt": "2020-07-14T07:28:08Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/config/update/handler/PillarConfigUpdateHandler.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.handler;\n+\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.PillarConfigUpdateService;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.PillarConfigUpdateFailed;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.PillarConfigUpdateRequest;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.config.update.event.PillarConfigUpdateSuccess;\n+import com.sequenceiq.flow.event.EventSelectorUtil;\n+import com.sequenceiq.flow.reactor.api.handler.ExceptionCatcherEventHandler;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class PillarConfigUpdateHandler extends ExceptionCatcherEventHandler<PillarConfigUpdateRequest> {\n+\n+    @Inject\n+    private PillarConfigUpdateService pillarConfigUpdateService;\n+\n+    @Override\n+    public String selector() {\n+        return EventSelectorUtil.selector(PillarConfigUpdateRequest.class);\n+    }\n+\n+    @Override\n+    protected Selectable defaultFailureEvent(Long resourceId, Exception e) {\n+        return new PillarConfigUpdateFailed(resourceId, e);\n+    }\n+\n+    @Override\n+    protected void doAccept(HandlerEvent event) {\n+        PillarConfigUpdateRequest request = event.getData();\n+        Selectable response;\n+        try {\n+            pillarConfigUpdateService.doConfigUpdate(request.getResourceId());\n+            response = new PillarConfigUpdateSuccess(request.getResourceId());\n+        } catch (Exception e) {\n+            response = new PillarConfigUpdateFailed(request.getResourceId(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6edcea4f42a9936062c01f4971ee6cc5e3f8d1a"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6edcea4f42a9936062c01f4971ee6cc5e3f8d1a", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e6edcea4f42a9936062c01f4971ee6cc5e3f8d1a", "committedDate": "2020-07-10T21:17:42Z", "message": "CB-6364: Create CB core api and flow which updates salt config\n\nThis commit adds support for a flow and api call that updates\nthe salt config on a cluster and then runs the highstate to\napply the config.  Primarily this is to allow for the DNS\nserver IPs to be updated when they change with a FreeIPA node\nchange.  Since those IPs are pulled from the FreeIPA service\ndynamically when a salt config is created it was felt that a\ngeneral salt config update flow and api call would allow for\nany change the affects the salt config to be updated and\nconfigured on a cluster."}, "afterCommit": {"oid": "11099f39195d0193fa3939ad413848df195888a5", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/11099f39195d0193fa3939ad413848df195888a5", "committedDate": "2020-07-14T19:40:38Z", "message": "CB-6364: Create CB core api and flow which updates salt config\n\nThis commit adds support for a flow and api call that updates\nthe salt config on a cluster and then runs the highstate to\napply the config.  Primarily this is to allow for the DNS\nserver IPs to be updated when they change with a FreeIPA node\nchange.  Since those IPs are pulled from the FreeIPA service\ndynamically when a salt config is created it was felt that a\ngeneral salt config update flow and api call would allow for\nany change the affects the salt config to be updated and\nconfigured on a cluster."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NzIxMTI4", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#pullrequestreview-448721128", "createdAt": "2020-07-15T08:05:40Z", "commit": {"oid": "11099f39195d0193fa3939ad413848df195888a5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowNTo0MFrOGxy8tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowNTo0MFrOGxy8tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2ODE1MQ==", "bodyText": "please add MDCBuilder.buildMdcContext(stack); after this line. I missed it in case of updateSalt, I'm going to add it", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#discussion_r454868151", "createdAt": "2020-07-15T08:05:40Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/ClusterCommonService.java", "diffHunk": "@@ -258,4 +258,9 @@ public FlowIdentifier updateSalt(NameOrCrn nameOrCrn, Long workspaceId) {\n         Stack stack = stackService.getByNameOrCrnInWorkspace(nameOrCrn, workspaceId);\n         return clusterOperationService.updateSalt(stack);\n     }\n+\n+    public FlowIdentifier updatePillarConfiguration(NameOrCrn nameOrCrn, Long workspaceId) {\n+        Stack stack = stackService.getByNameOrCrnInWorkspace(nameOrCrn, workspaceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11099f39195d0193fa3939ad413848df195888a5"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2585833e86a0c5c3ad0d4ecf59c42b7db3f91e8", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/b2585833e86a0c5c3ad0d4ecf59c42b7db3f91e8", "committedDate": "2020-07-15T20:13:19Z", "message": "CB-6364: Create CB core api and flow which updates salt config\n\nThis commit adds support for a flow and api call that updates\nthe salt config on a cluster and then runs the highstate to\napply the config.  Primarily this is to allow for the DNS\nserver IPs to be updated when they change with a FreeIPA node\nchange.  Since those IPs are pulled from the FreeIPA service\ndynamically when a salt config is created it was felt that a\ngeneral salt config update flow and api call would allow for\nany change the affects the salt config to be updated and\nconfigured on a cluster."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11099f39195d0193fa3939ad413848df195888a5", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/11099f39195d0193fa3939ad413848df195888a5", "committedDate": "2020-07-14T19:40:38Z", "message": "CB-6364: Create CB core api and flow which updates salt config\n\nThis commit adds support for a flow and api call that updates\nthe salt config on a cluster and then runs the highstate to\napply the config.  Primarily this is to allow for the DNS\nserver IPs to be updated when they change with a FreeIPA node\nchange.  Since those IPs are pulled from the FreeIPA service\ndynamically when a salt config is created it was felt that a\ngeneral salt config update flow and api call would allow for\nany change the affects the salt config to be updated and\nconfigured on a cluster."}, "afterCommit": {"oid": "b2585833e86a0c5c3ad0d4ecf59c42b7db3f91e8", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/b2585833e86a0c5c3ad0d4ecf59c42b7db3f91e8", "committedDate": "2020-07-15T20:13:19Z", "message": "CB-6364: Create CB core api and flow which updates salt config\n\nThis commit adds support for a flow and api call that updates\nthe salt config on a cluster and then runs the highstate to\napply the config.  Primarily this is to allow for the DNS\nserver IPs to be updated when they change with a FreeIPA node\nchange.  Since those IPs are pulled from the FreeIPA service\ndynamically when a salt config is created it was felt that a\ngeneral salt config update flow and api call would allow for\nany change the affects the salt config to be updated and\nconfigured on a cluster."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NjAyMzk5", "url": "https://github.com/hortonworks/cloudbreak/pull/8515#pullrequestreview-449602399", "createdAt": "2020-07-16T07:50:50Z", "commit": {"oid": "b2585833e86a0c5c3ad0d4ecf59c42b7db3f91e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2691, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}