{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNjg5OTg2", "number": 7088, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNToxMjo0M1rODYiWkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoyODo0N1rODYmZ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDU1MjUwOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNToxMjo0M1rOFecy1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjo1MToxMFrOFewLJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3MzM2Nw==", "bodyText": "I think this should be IllegalStateException or some other one but definitely not IllegalArgumentException since we don't know whether this method has got some illegal input argument or just something happened.", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367473367", "createdAt": "2020-01-16T15:12:43Z", "author": {"login": "gregito"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -483,6 +484,18 @@ public CloudSecurityGroups securityGroups(CloudCredential cloudCredential, Regio\n         return new CloudSecurityGroups(result);\n     }\n \n+    private List<SecurityGroup> fetchSecurityGroups(AmazonEC2Client ec2Client, DescribeSecurityGroupsRequest describeSecurityGroupsRequest) {\n+        try {\n+            return ec2Client.describeSecurityGroups(describeSecurityGroupsRequest).getSecurityGroups();\n+        } catch (AmazonEC2Exception e) {\n+            if (e.getStatusCode() == HttpStatus.BAD_REQUEST.value() || e.getStatusCode() == HttpStatus.NOT_FOUND.value()) {\n+                throw new IllegalArgumentException(e.getErrorMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwMTQzMQ==", "bodyText": "or, throw CloudConnectorException.", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367501431", "createdAt": "2020-01-16T15:58:36Z", "author": {"login": "bergerdenes"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -483,6 +484,18 @@ public CloudSecurityGroups securityGroups(CloudCredential cloudCredential, Regio\n         return new CloudSecurityGroups(result);\n     }\n \n+    private List<SecurityGroup> fetchSecurityGroups(AmazonEC2Client ec2Client, DescribeSecurityGroupsRequest describeSecurityGroupsRequest) {\n+        try {\n+            return ec2Client.describeSecurityGroups(describeSecurityGroupsRequest).getSecurityGroups();\n+        } catch (AmazonEC2Exception e) {\n+            if (e.getStatusCode() == HttpStatus.BAD_REQUEST.value() || e.getStatusCode() == HttpStatus.NOT_FOUND.value()) {\n+                throw new IllegalArgumentException(e.getErrorMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3MzM2Nw=="}, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MDg4Ng==", "bodyText": "It is just an internal exception. I'm fine with a dedicated exception, but the CloudConnectorEception is not the best solution. @bergerdenes if you search in the pr, I handle the exception in GetPlatformSecurityGroupsHandler. I need to mark as a Permanent exception and I need to exit from the retry. I think the CloudConnector is a retryable exception in this code", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367790886", "createdAt": "2020-01-17T06:51:10Z", "author": {"login": "topolyai5"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -483,6 +484,18 @@ public CloudSecurityGroups securityGroups(CloudCredential cloudCredential, Regio\n         return new CloudSecurityGroups(result);\n     }\n \n+    private List<SecurityGroup> fetchSecurityGroups(AmazonEC2Client ec2Client, DescribeSecurityGroupsRequest describeSecurityGroupsRequest) {\n+        try {\n+            return ec2Client.describeSecurityGroups(describeSecurityGroupsRequest).getSecurityGroups();\n+        } catch (AmazonEC2Exception e) {\n+            if (e.getStatusCode() == HttpStatus.BAD_REQUEST.value() || e.getStatusCode() == HttpStatus.NOT_FOUND.value()) {\n+                throw new IllegalArgumentException(e.getErrorMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3MzM2Nw=="}, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDU1NTQ4OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNToxMzozN1rOFec03g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjowMzoxNFrOFeesKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3Mzg4Ng==", "bodyText": "same here. we don't know why the networkSecurityGroup is null, hence this is a state where we don't know what to do. -> IllegalStateException", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367473886", "createdAt": "2020-01-16T15:13:37Z", "author": {"login": "gregito"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "diffHunk": "@@ -121,15 +122,17 @@ public CloudSshKeys sshKeys(CloudCredential cloudCredential, Region region, Map<\n     public CloudSecurityGroups securityGroups(CloudCredential cloudCredential, Region region, Map<String, String> filters) {\n         AzureClient client = azureClientService.getClient(cloudCredential);\n         Map<String, Set<CloudSecurityGroup>> result = new HashMap<>();\n-\n-        for (NetworkSecurityGroup securityGroup : client.getSecurityGroups().list()) {\n-            String actualRegion = securityGroup.region().label();\n-            if (regionMatch(actualRegion, region)) {\n-                Map<String, Object> properties = new HashMap<>();\n-                properties.put(\"resourceGroupName\", securityGroup.resourceGroupName());\n-                properties.put(\"networkInterfaceIds\", securityGroup.networkInterfaceIds());\n-                CloudSecurityGroup cloudSecurityGroup = new CloudSecurityGroup(securityGroup.name(), securityGroup.id(), properties);\n-                result.computeIfAbsent(actualRegion, s -> new HashSet<>()).add(cloudSecurityGroup);\n+        PlatformResourceSecurityGroupFilterView filter = new PlatformResourceSecurityGroupFilterView(filters);\n+        String groupId = filter.getGroupId();\n+        if (groupId != null) {\n+            NetworkSecurityGroup networkSecurityGroup = client.getSecurityGroups().getById(groupId);\n+            if (networkSecurityGroup == null) {\n+                throw new IllegalArgumentException(\"Nothing found on Azure with id: \" + groupId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwNDQyNQ==", "bodyText": "or CloudConnectorException", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367504425", "createdAt": "2020-01-16T16:03:14Z", "author": {"login": "bergerdenes"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "diffHunk": "@@ -121,15 +122,17 @@ public CloudSshKeys sshKeys(CloudCredential cloudCredential, Region region, Map<\n     public CloudSecurityGroups securityGroups(CloudCredential cloudCredential, Region region, Map<String, String> filters) {\n         AzureClient client = azureClientService.getClient(cloudCredential);\n         Map<String, Set<CloudSecurityGroup>> result = new HashMap<>();\n-\n-        for (NetworkSecurityGroup securityGroup : client.getSecurityGroups().list()) {\n-            String actualRegion = securityGroup.region().label();\n-            if (regionMatch(actualRegion, region)) {\n-                Map<String, Object> properties = new HashMap<>();\n-                properties.put(\"resourceGroupName\", securityGroup.resourceGroupName());\n-                properties.put(\"networkInterfaceIds\", securityGroup.networkInterfaceIds());\n-                CloudSecurityGroup cloudSecurityGroup = new CloudSecurityGroup(securityGroup.name(), securityGroup.id(), properties);\n-                result.computeIfAbsent(actualRegion, s -> new HashSet<>()).add(cloudSecurityGroup);\n+        PlatformResourceSecurityGroupFilterView filter = new PlatformResourceSecurityGroupFilterView(filters);\n+        String groupId = filter.getGroupId();\n+        if (groupId != null) {\n+            NetworkSecurityGroup networkSecurityGroup = client.getSecurityGroups().getById(groupId);\n+            if (networkSecurityGroup == null) {\n+                throw new IllegalArgumentException(\"Nothing found on Azure with id: \" + groupId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3Mzg4Ng=="}, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDc1MTA2OnYy", "diffSide": "RIGHT", "path": "cloud-reactor/src/main/java/com/sequenceiq/cloudbreak/cloud/handler/GetPlatformSecurityGroupsHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjowNDoxMFrOFeeuWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjo1MTo1N1rOFewL0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwNDk4NA==", "bodyText": "use the exception class from earlier comments", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367504984", "createdAt": "2020-01-16T16:04:10Z", "author": {"login": "bergerdenes"}, "path": "cloud-reactor/src/main/java/com/sequenceiq/cloudbreak/cloud/handler/GetPlatformSecurityGroupsHandler.java", "diffHunk": "@@ -44,6 +45,8 @@ public void accept(Event<GetPlatformSecurityGroupsRequest> getPlatformSecurityGr\n             GetPlatformSecurityGroupsResult getPlatformSecurityGroupsResult = new GetPlatformSecurityGroupsResult(request.getResourceId(), securityGroups);\n             request.getResult().onNext(getPlatformSecurityGroupsResult);\n             LOGGER.debug(\"Query platform networks types finished.\");\n+        } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MTA1Nw==", "bodyText": "I need to mark as a Permanent exception and I need to exit from the retry. I think the CloudConnector is a retryable exception in this code", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367791057", "createdAt": "2020-01-17T06:51:57Z", "author": {"login": "topolyai5"}, "path": "cloud-reactor/src/main/java/com/sequenceiq/cloudbreak/cloud/handler/GetPlatformSecurityGroupsHandler.java", "diffHunk": "@@ -44,6 +45,8 @@ public void accept(Event<GetPlatformSecurityGroupsRequest> getPlatformSecurityGr\n             GetPlatformSecurityGroupsResult getPlatformSecurityGroupsResult = new GetPlatformSecurityGroupsResult(request.getResourceId(), securityGroups);\n             request.getResult().onNext(getPlatformSecurityGroupsResult);\n             LOGGER.debug(\"Query platform networks types finished.\");\n+        } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwNDk4NA=="}, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTIxNDE4OnYy", "diffSide": "LEFT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoyNzo1NFrOFejPkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzowMDo0NVrOFewTqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTAyNw==", "bodyText": "this is not good as EnvironmentCreationService is also using this method and CIDR setting is impossible with this change", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367579027", "createdAt": "2020-01-16T18:27:54Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "diffHunk": "@@ -207,9 +208,25 @@ public CreateAWSEnvironmentRequest getCreateAWSEnvironmentForCli(EnvironmentDto\n         return environmentRepository.findByResourceCrnAndAccountIdAndArchivedIsFalse(resourceCrn, accountId);\n     }\n \n+    /**\n+     * The CIDR could not be edited so the first step we clear the the existed CIDR every time.\n+     * We are assuming the security access has the proper security group ids and we don't check it again.\n+     * If the knox or default security groups are blank we don't set\n+     * @param environment the security access will be update for this environment\n+     * @param securityAccess this should contains the knox and default security groups\n+     */\n+    void editSecurityAccess(Environment environment, SecurityAccessDto securityAccess) {\n+        environment.setCidr(null);\n+        if (StringUtils.isNotBlank(securityAccess.getDefaultSecurityGroupId())) {\n+            environment.setDefaultSecurityGroupId(securityAccess.getDefaultSecurityGroupId());\n+        }\n+        if (StringUtils.isNotBlank(securityAccess.getSecurityGroupIdForKnox())) {\n+            environment.setSecurityGroupIdForKnox(securityAccess.getSecurityGroupIdForKnox());\n+        }\n+    }\n+\n     void setSecurityAccess(Environment environment, SecurityAccessDto securityAccess) {\n         if (securityAccess != null) {\n-            environment.setCidr(securityAccess.getCidr());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MzA2Ng==", "bodyText": "hm, I revert this", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367793066", "createdAt": "2020-01-17T07:00:45Z", "author": {"login": "topolyai5"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "diffHunk": "@@ -207,9 +208,25 @@ public CreateAWSEnvironmentRequest getCreateAWSEnvironmentForCli(EnvironmentDto\n         return environmentRepository.findByResourceCrnAndAccountIdAndArchivedIsFalse(resourceCrn, accountId);\n     }\n \n+    /**\n+     * The CIDR could not be edited so the first step we clear the the existed CIDR every time.\n+     * We are assuming the security access has the proper security group ids and we don't check it again.\n+     * If the knox or default security groups are blank we don't set\n+     * @param environment the security access will be update for this environment\n+     * @param securityAccess this should contains the knox and default security groups\n+     */\n+    void editSecurityAccess(Environment environment, SecurityAccessDto securityAccess) {\n+        environment.setCidr(null);\n+        if (StringUtils.isNotBlank(securityAccess.getDefaultSecurityGroupId())) {\n+            environment.setDefaultSecurityGroupId(securityAccess.getDefaultSecurityGroupId());\n+        }\n+        if (StringUtils.isNotBlank(securityAccess.getSecurityGroupIdForKnox())) {\n+            environment.setSecurityGroupIdForKnox(securityAccess.getSecurityGroupIdForKnox());\n+        }\n+    }\n+\n     void setSecurityAccess(Environment environment, SecurityAccessDto securityAccess) {\n         if (securityAccess != null) {\n-            environment.setCidr(securityAccess.getCidr());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTAyNw=="}, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTIxNjM0OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoyODo0MVrOFejQ7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjo1Mzo0M1rOFewNPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTM3Mw==", "bodyText": "is it a hard requirement?", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367579373", "createdAt": "2020-01-16T18:28:41Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "diffHunk": "@@ -207,9 +208,25 @@ public CreateAWSEnvironmentRequest getCreateAWSEnvironmentForCli(EnvironmentDto\n         return environmentRepository.findByResourceCrnAndAccountIdAndArchivedIsFalse(resourceCrn, accountId);\n     }\n \n+    /**\n+     * The CIDR could not be edited so the first step we clear the the existed CIDR every time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MTQyMA==", "bodyText": "what do you mean hard? Yes, if we edit a security group we always clear the cidr because we replace by a security group id", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367791420", "createdAt": "2020-01-17T06:53:43Z", "author": {"login": "topolyai5"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "diffHunk": "@@ -207,9 +208,25 @@ public CreateAWSEnvironmentRequest getCreateAWSEnvironmentForCli(EnvironmentDto\n         return environmentRepository.findByResourceCrnAndAccountIdAndArchivedIsFalse(resourceCrn, accountId);\n     }\n \n+    /**\n+     * The CIDR could not be edited so the first step we clear the the existed CIDR every time.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTM3Mw=="}, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTIxNjYzOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoyODo0N1rOFejRGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjo1OTo1NlrOFewS3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTQxOQ==", "bodyText": "why?", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367579419", "createdAt": "2020-01-16T18:28:47Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "diffHunk": "@@ -207,9 +208,25 @@ public CreateAWSEnvironmentRequest getCreateAWSEnvironmentForCli(EnvironmentDto\n         return environmentRepository.findByResourceCrnAndAccountIdAndArchivedIsFalse(resourceCrn, accountId);\n     }\n \n+    /**\n+     * The CIDR could not be edited so the first step we clear the the existed CIDR every time.\n+     * We are assuming the security access has the proper security group ids and we don't check it again.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5Mjg2Mg==", "bodyText": "Because I check the security access one step before it. I don't want to check here again, so if anyone wants to use this function, calculate with that, I clear the cidr and set anything that they set to SecurityAccess without validation.", "url": "https://github.com/hortonworks/cloudbreak/pull/7088#discussion_r367792862", "createdAt": "2020-01-17T06:59:56Z", "author": {"login": "topolyai5"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentService.java", "diffHunk": "@@ -207,9 +208,25 @@ public CreateAWSEnvironmentRequest getCreateAWSEnvironmentForCli(EnvironmentDto\n         return environmentRepository.findByResourceCrnAndAccountIdAndArchivedIsFalse(resourceCrn, accountId);\n     }\n \n+    /**\n+     * The CIDR could not be edited so the first step we clear the the existed CIDR every time.\n+     * We are assuming the security access has the proper security group ids and we don't check it again.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3OTQxOQ=="}, "originalCommit": {"oid": "56168b67b6e18975d149070cc655cd16828decef"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2924, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}