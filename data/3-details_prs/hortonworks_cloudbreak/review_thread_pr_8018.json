{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MzcwMzA4", "number": 8018, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo1Mzo1N1rOD8isrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjowMDo1N1rOD8i5oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODA5NjQ0OnYy", "diffSide": "RIGHT", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo1Mzo1N1rOGVi8UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTozNDozNlrOGVrRxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NTc3Nw==", "bodyText": "apache StringUtils.isNotBlank(hashPassword) is a shorter", "url": "https://github.com/hortonworks/cloudbreak/pull/8018#discussion_r425245777", "createdAt": "2020-05-14T15:53:57Z", "author": {"login": "lacikaaa"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java", "diffHunk": "@@ -207,14 +208,21 @@ public void updateUserPasswordMaxExpiration(String user) throws FreeIpaClientExc\n         updateUserPasswordExpiration(user, Optional.empty());\n     }\n \n-    public User userSetPasswordHash(String user, String hashedPassword,\n-            String unencryptedKrbPrincipalKey, Optional<Instant> expiration) throws FreeIpaClientException {\n-        String passwordExpirationDate = formatDate(expiration);\n-        Map<String, Object> params =\n-                Map.of(\"setattr\", List.of(\n-                        \"cdpHashedPassword=\" + hashedPassword,\n-                        \"cdpUnencryptedKrbPrincipalKey=\" + unencryptedKrbPrincipalKey,\n-                        \"krbPasswordExpiration=\" + passwordExpirationDate));\n+    public User userSetWorkloadCredentials(String user, String hashedPassword,\n+            String unencryptedKrbPrincipalKey, Optional<Instant> expiration,\n+            List<String> sshPublicKeys) throws FreeIpaClientException {\n+        Map<String, Object> params = new HashMap<>();\n+        List<String> attributes = new ArrayList<>();\n+\n+        if (null != hashedPassword && !hashedPassword.isBlank()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef4045e4108e712a9ed08e7b4cb204b82135502c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MjM0Mw==", "bodyText": "thanks!", "url": "https://github.com/hortonworks/cloudbreak/pull/8018#discussion_r425382343", "createdAt": "2020-05-14T19:34:36Z", "author": {"login": "handavid"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java", "diffHunk": "@@ -207,14 +208,21 @@ public void updateUserPasswordMaxExpiration(String user) throws FreeIpaClientExc\n         updateUserPasswordExpiration(user, Optional.empty());\n     }\n \n-    public User userSetPasswordHash(String user, String hashedPassword,\n-            String unencryptedKrbPrincipalKey, Optional<Instant> expiration) throws FreeIpaClientException {\n-        String passwordExpirationDate = formatDate(expiration);\n-        Map<String, Object> params =\n-                Map.of(\"setattr\", List.of(\n-                        \"cdpHashedPassword=\" + hashedPassword,\n-                        \"cdpUnencryptedKrbPrincipalKey=\" + unencryptedKrbPrincipalKey,\n-                        \"krbPasswordExpiration=\" + passwordExpirationDate));\n+    public User userSetWorkloadCredentials(String user, String hashedPassword,\n+            String unencryptedKrbPrincipalKey, Optional<Instant> expiration,\n+            List<String> sshPublicKeys) throws FreeIpaClientException {\n+        Map<String, Object> params = new HashMap<>();\n+        List<String> attributes = new ArrayList<>();\n+\n+        if (null != hashedPassword && !hashedPassword.isBlank()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NTc3Nw=="}, "originalCommit": {"oid": "ef4045e4108e712a9ed08e7b4cb204b82135502c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODEwOTQ5OnYy", "diffSide": "RIGHT", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo1Njo0N1rOGVjEcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTozNjo0NVrOGVrWXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0Nzg1OA==", "bodyText": "why not to log and why not error?", "url": "https://github.com/hortonworks/cloudbreak/pull/8018#discussion_r425247858", "createdAt": "2020-05-14T15:56:47Z", "author": {"login": "lacikaaa"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java", "diffHunk": "@@ -581,12 +553,12 @@ public Host showHost(String fqdn) throws FreeIpaClientException {\n             return response;\n         } catch (Exception e) {\n             String message = String.format(\"Invoke FreeIpa failed: %s\", e.getLocalizedMessage());\n-            LOGGER.error(message, e);\n+            LOGGER.warn(message);\n             OptionalInt responseCode = extractResponseCode(e);\n             throw FreeIpaClientExceptionUtil.convertToRetryableIfNeeded(new FreeIpaClientException(message, e, responseCode));\n         } catch (Throwable throwable) {\n             String message = String.format(\"Invoke FreeIpa failed: %s\", throwable.getLocalizedMessage());\n-            LOGGER.error(message, throwable);\n+            LOGGER.warn(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef4045e4108e712a9ed08e7b4cb204b82135502c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MzUxNg==", "bodyText": "the throwable is set as the cause of the FreeIpaClientException and then rethrown. I feel that the caller should be responsible for logging/handling the exception. Seeing an error stacktrace in the logs at this point is misleading.", "url": "https://github.com/hortonworks/cloudbreak/pull/8018#discussion_r425383516", "createdAt": "2020-05-14T19:36:45Z", "author": {"login": "handavid"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClient.java", "diffHunk": "@@ -581,12 +553,12 @@ public Host showHost(String fqdn) throws FreeIpaClientException {\n             return response;\n         } catch (Exception e) {\n             String message = String.format(\"Invoke FreeIpa failed: %s\", e.getLocalizedMessage());\n-            LOGGER.error(message, e);\n+            LOGGER.warn(message);\n             OptionalInt responseCode = extractResponseCode(e);\n             throw FreeIpaClientExceptionUtil.convertToRetryableIfNeeded(new FreeIpaClientException(message, e, responseCode));\n         } catch (Throwable throwable) {\n             String message = String.format(\"Invoke FreeIpa failed: %s\", throwable.getLocalizedMessage());\n-            LOGGER.error(message, throwable);\n+            LOGGER.warn(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0Nzg1OA=="}, "originalCommit": {"oid": "ef4045e4108e712a9ed08e7b4cb204b82135502c"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODEyOTYxOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/user/handler/SetPasswordHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjowMDo1N1rOGVjRIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjowMDo1N1rOGVjRIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MTEwNA==", "bodyText": "if you use StringUtils.isBlank here it will work even if getHashedPassword returns null", "url": "https://github.com/hortonworks/cloudbreak/pull/8018#discussion_r425251104", "createdAt": "2020-05-14T16:00:57Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/user/handler/SetPasswordHandler.java", "diffHunk": "@@ -69,10 +59,17 @@ public void accept(Event<SetPasswordRequest> setPasswordRequestEvent) {\n \n             FreeIpaClient freeIpaClient = freeIpaClientFactory.getFreeIpaClientForStack(stack);\n             if (FreeIpaCapabilities.hasSetPasswordHashSupport(freeIpaClient.getConfig())) {\n-                LOGGER.info(\"IPA has password hash support, credentials information from UMS will be used.\");\n-                setPasswordHashFromUms(freeIpaClient, request.getUsername(), request.getUserCrn(), request.getExpirationInstant());\n+                WorkloadCredential workloadCredential = umsCredentialProvider.getCredentials(request.getUserCrn(), MDCUtils.getRequestId());\n+\n+                LOGGER.info(\"IPA has password hash support. Credentials information from UMS will be used.\");\n+                workloadCredentialService.setWorkloadCredential(freeIpaClient, request.getUsername(), workloadCredential);\n+                if (workloadCredential.getHashedPassword().isBlank()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef4045e4108e712a9ed08e7b4cb204b82135502c"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2438, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}