{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NjI2NTQ0", "number": 7749, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1Nzo0M1rODvdxQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowNTozMFrODvd9GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDk3NDEwOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/listener/ReportListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1Nzo0M1rOGB5yVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1Nzo0M1rOGB5yVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0ODUzNA==", "bodyText": "Wouldn't it be better to put this logic whole in to our custom Logger class, and it would accept a throwable as a parameter?", "url": "https://github.com/hortonworks/cloudbreak/pull/7749#discussion_r404648534", "createdAt": "2020-04-07T08:57:43Z", "author": {"login": "lnardai"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/listener/ReportListener.java", "diffHunk": "@@ -30,8 +32,20 @@ public void onTestFailure(ITestResult tr) {\n         super.onTestFailure(tr);\n         logUrl(tr);\n         logMeasurements(tr);\n-        Throwable throwable = tr.getThrowable();\n-        Log.log(throwable.getMessage());\n+        if (tr.getThrowable() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5dbb4badec244782cafb94916e8ee8dcacc05"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDk3ODE3OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/listener/ReportListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1ODo0M1rOGB51Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1ODo0M1rOGB51Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0OTIyNg==", "bodyText": "toString is not required.", "url": "https://github.com/hortonworks/cloudbreak/pull/7749#discussion_r404649226", "createdAt": "2020-04-07T08:58:43Z", "author": {"login": "lnardai"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/listener/ReportListener.java", "diffHunk": "@@ -30,8 +32,20 @@ public void onTestFailure(ITestResult tr) {\n         super.onTestFailure(tr);\n         logUrl(tr);\n         logMeasurements(tr);\n-        Throwable throwable = tr.getThrowable();\n-        Log.log(throwable.getMessage());\n+        if (tr.getThrowable() != null) {\n+            try {\n+                final Throwable testResultThrowable = tr.getThrowable();\n+                String message = testResultThrowable.getMessage() != null ? testResultThrowable.getMessage() : testResultThrowable.getCause().getMessage();\n+\n+                if (message == null || message.isEmpty()) {\n+                    Log.log(LOGGER, format(\" Test Case: %s have been failed! \", tr.getMethod().toString()));\n+                } else {\n+                    Log.log(message);\n+                }\n+            } catch (Exception e) {\n+                Log.log(LOGGER, format(\" %s got Unexpected Exception: %s \", tr.getMethod().toString(), e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5dbb4badec244782cafb94916e8ee8dcacc05"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDk3OTE5OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/listener/ReportListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1ODo1OFrOGB51qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1ODo1OFrOGB51qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0OTM4Nw==", "bodyText": "toString is not required", "url": "https://github.com/hortonworks/cloudbreak/pull/7749#discussion_r404649387", "createdAt": "2020-04-07T08:58:58Z", "author": {"login": "lnardai"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/listener/ReportListener.java", "diffHunk": "@@ -30,8 +32,20 @@ public void onTestFailure(ITestResult tr) {\n         super.onTestFailure(tr);\n         logUrl(tr);\n         logMeasurements(tr);\n-        Throwable throwable = tr.getThrowable();\n-        Log.log(throwable.getMessage());\n+        if (tr.getThrowable() != null) {\n+            try {\n+                final Throwable testResultThrowable = tr.getThrowable();\n+                String message = testResultThrowable.getMessage() != null ? testResultThrowable.getMessage() : testResultThrowable.getCause().getMessage();\n+\n+                if (message == null || message.isEmpty()) {\n+                    Log.log(LOGGER, format(\" Test Case: %s have been failed! \", tr.getMethod().toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5dbb4badec244782cafb94916e8ee8dcacc05"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTAwNDQwOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/WaitUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowNTozMFrOGB6Fqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowNTozMFrOGB6Fqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MzQ4Mw==", "bodyText": "If it's not a hassle, can you also log the current status the resource is in? Please make sure this is done for all other newly added log messages.", "url": "https://github.com/hortonworks/cloudbreak/pull/7749#discussion_r404653483", "createdAt": "2020-04-07T09:05:30Z", "author": {"login": "lnardai"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/WaitUtil.java", "diffHunk": "@@ -300,9 +300,11 @@ private boolean checkFailedStatuses(EnvironmentStatus currentStatus) {\n             if (databaseServerResponse != null && databaseServerResponse.getStatus() != null) {\n                 builder.append(\"statusReason: \").append(databaseServerResponse.getStatusReason());\n             }\n-            throw new RuntimeException(builder.toString());\n+            LOGGER.error(builder.toString());\n+            throw new TestFailException(builder.toString());\n         } else if (waitResult == WaitResult.TIMEOUT) {\n-            throw new RuntimeException(\"Timeout happened\");\n+            LOGGER.error(\"Timeout happened while waiting for {} status at {}\", desiredStatus.name(), crn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5dbb4badec244782cafb94916e8ee8dcacc05"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2524, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}