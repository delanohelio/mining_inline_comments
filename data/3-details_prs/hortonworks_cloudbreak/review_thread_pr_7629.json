{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzc2MzI3", "number": 7629, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTo0Mzo0NFrODqb2HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToyMzoxMlrODqhajg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODIzMDA1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UmsUsersStateProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTo0Mzo0NFrOF6LeHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjowNToyMlrOF6MhEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0OTY2MQ==", "bodyText": "this doesn't work. WAGs may be associated with resources that are not environments. We don't currently have a mapping of resources to environments, so we can't tell if a WAG is applicable to a given environment.\nIf we could use the WAG resource, then we could do the filtering on the wags list in getEnvToUmsUsersStateMap instead of in handleUser", "url": "https://github.com/hortonworks/cloudbreak/pull/7629#discussion_r396549661", "createdAt": "2020-03-23T15:43:44Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UmsUsersStateProvider.java", "diffHunk": "@@ -166,7 +165,13 @@ private void handleUser(UmsUsersState.Builder umsUsersStateBuilder, UsersState.B\n                     }\n                 });\n \n-                workloadAdministrationGroups.getWorkloadAdministrationGroupNameList().forEach(groupName -> {\n+                // Only add workload admin groups that belong to this environment\n+                workloadAdminGroups.stream()\n+                        .filter(wag -> wag.getResource().equalsIgnoreCase(environmentAccessRights.getEnvironmentCrn()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dc554ade4392d7f916323c3e2e186cd6146ed05"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NjgwMg==", "bodyText": "So this means we cannot filter at all? I didn't know that there could be other wags, but in this case, it only works for those that CB creates, right?", "url": "https://github.com/hortonworks/cloudbreak/pull/7629#discussion_r396566802", "createdAt": "2020-03-23T16:05:22Z", "author": {"login": "keyki"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UmsUsersStateProvider.java", "diffHunk": "@@ -166,7 +165,13 @@ private void handleUser(UmsUsersState.Builder umsUsersStateBuilder, UsersState.B\n                     }\n                 });\n \n-                workloadAdministrationGroups.getWorkloadAdministrationGroupNameList().forEach(groupName -> {\n+                // Only add workload admin groups that belong to this environment\n+                workloadAdminGroups.stream()\n+                        .filter(wag -> wag.getResource().equalsIgnoreCase(environmentAccessRights.getEnvironmentCrn()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0OTY2MQ=="}, "originalCommit": {"oid": "9dc554ade4392d7f916323c3e2e186cd6146ed05"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTE0MjU0OnYy", "diffSide": "RIGHT", "path": "mock-caas/src/main/java/com/sequenceiq/caas/grpc/service/MockGroupManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToyMzoxMlrOF6UoWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToyMzoxMlrOF6UoWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5OTczNw==", "bodyText": "WAGs should be modeled as WorkloadAdministrationGroups rather than Groups. WAGs don't have crns, only names, accountids, rights, and resources. Moving to WorkloadAdministrationGroup would probably make the WAG-related mock code more sensible.", "url": "https://github.com/hortonworks/cloudbreak/pull/7629#discussion_r396699737", "createdAt": "2020-03-23T19:23:12Z", "author": {"login": "handavid"}, "path": "mock-caas/src/main/java/com/sequenceiq/caas/grpc/service/MockGroupManagementService.java", "diffHunk": "@@ -16,120 +16,151 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n \n-import com.cloudera.thunderhead.service.usermanagement.UserManagementProto;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.DeleteWorkloadAdministrationGroupNameRequest;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.DeleteWorkloadAdministrationGroupNameResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetWorkloadAdministrationGroupNameRequest;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetWorkloadAdministrationGroupNameResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetWorkloadAdministrationGroupNameResponse.Builder;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.Group;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ListGroupsRequest;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ListGroupsResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.SetWorkloadAdministrationGroupNameRequest;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.SetWorkloadAdministrationGroupNameResponse;\n import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn.ResourceType;\n import com.sequenceiq.cloudbreak.auth.altus.UmsRight;\n \n import io.grpc.stub.StreamObserver;\n \n @Service\n class MockGroupManagementService {\n+\n     private static final Logger LOGGER = LoggerFactory.getLogger(MockGroupManagementService.class);\n \n     private static final String CM_ADMIN_RIGHT = \"environments/adminClouderaManager\";\n \n+    private static final int NUM_USER_GROUPS = 5;\n+\n     @Inject\n     private MockCrnService mockCrnService;\n \n-    private final Map<String, Map<String, UserManagementProto.Group>> accountGroups = new ConcurrentHashMap<>();\n+    private final Map<String, Map<String, Group>> accountWorkloadGroups = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e068c8aceba12287d32b964871995af01da2c75"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2699, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}