{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MzIyMTU3", "number": 9232, "title": "CB-8147. Make node specific metadata (hostGroup, YARN NM attributes)", "bodyText": "available on cluster nodes.\n\nNew metadata file created under /opt/metadata/node.json on cluster\nnodes, which contains the hostGroup name, and service specific\nattributes.\nThe service specific attributes introduced in this PR are for YARN,\nand specify whether a node is a compute or worker based on the services\nrunning on the node (instead of relying on the hostGroup name).\n\nTested by launching a custom DE template with hostGroupNames changed with 2.31-b111 as the base. New files created etc posted on the jira.", "createdAt": "2020-10-17T17:53:19Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9232", "merged": true, "mergeCommit": {"oid": "49ff29b37ce83e127ba573a596c7f5f1e617c20d"}, "closed": true, "closedAt": "2020-12-11T10:26:26Z", "author": {"login": "sidseth"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVc4YNABqjM5MTU3MDQ5MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlDo6RAFqTU0OTg4ODQxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13b151dafa1096d77307d0f4b57a12b94b537a5c", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/13b151dafa1096d77307d0f4b57a12b94b537a5c", "committedDate": "2020-10-23T18:10:18Z", "message": "Fix test."}, "afterCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/5e322a1c93e41fd3e42a2fb97de3b239710bf60d", "committedDate": "2020-10-23T20:48:07Z", "message": "Fix test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzM3MTc3", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#pullrequestreview-532737177", "createdAt": "2020-11-17T19:30:32Z", "commit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTozMDozMlrOH1Fx5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTozMDozMlrOH1Fx5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMTI3MA==", "bodyText": "What happens if the hostattrs are empty? As part of an upgrade we upgrade the salt states and pillar as well, but they won't have any attributes.", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r525431270", "createdAt": "2020-11-17T19:30:32Z", "author": {"login": "keyki"}, "path": "orchestrator-salt/src/main/resources/salt/salt/metadata/init.sls", "diffHunk": "@@ -9,4 +9,11 @@ cluster_metadata:\n     - name: /opt/metadata/cluster.json\n     - dataset:\n         {{ metadata }}\n+    - formatter: json\n+\n+node_attributes:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NDAyMDE2", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#pullrequestreview-535402016", "createdAt": "2020-11-20T12:52:59Z", "commit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjo1Mjo1OVrOH3Ogzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzozMDoxMlrOH3PtEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MTUwMg==", "bodyText": "I don't think Node should contain this attributes map. It's used only to create a pillar. The main purpose of this class is to pass these data to SaltBootstrap installed on the instances to configure them.\nInstead of adding this info to the node you could calculate it when it's need in ClusterHostServiceRunner", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r527671502", "createdAt": "2020-11-20T12:52:59Z", "author": {"login": "lacikaaa"}, "path": "orchestrator-api/src/main/java/com/sequenceiq/cloudbreak/orchestrator/model/Node.java", "diffHunk": "@@ -23,19 +25,33 @@\n \n     private String uuids;\n \n+    // Used for generic attributes associated with the node. e.g. YARN attributes when running NMs, Spot vs non-spot, etc\n+    private Map<String, Map<String, String>> attributes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3OTI2MA==", "bodyText": "it would be nicer with stream:\nMap<String, Set<ServiceComponent>> hgToNonGwServiceComponentsWithYarnNMs = hgToNonGwServiceComponents.entrySet().stream()\n                .filter(this::isYarnNodemanager)\n                .collect(toMap(Entry::getKey, Entry::getValue));\n\nprivate boolean isYarnNodemanager(Entry<String, Set<ServiceComponent>> entry) {\n        return entry.getValue().stream().anyMatch(sc -> YarnRoles.YARN.equalsIgnoreCase(sc.getService())\n                && YarnRoles.NODEMANAGER.equalsIgnoreCase(sc.getComponent()));\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r527679260", "createdAt": "2020-11-20T13:08:27Z", "author": {"login": "lacikaaa"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmTemplateProcessor.java", "diffHunk": "@@ -291,6 +311,52 @@ public String getStackVersion() {\n         return cmTemplate.getCdhVersion();\n     }\n \n+    @Override\n+    public Map<String, Map<String, ServiceAttributes>> getHostGroupBasedServiceAttributes() {\n+        // The only attributes required at the moment relate to the YARN NodeManager.\n+        // This functionality can be moved to an interface / separated if additional components\n+        // need this functionality.\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponents = getNonGatewayServicesByHostGroup();\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponentsWithYarnNMs = new HashMap<>();\n+        for (Entry<String, Set<ServiceComponent>> entry : hgToNonGwServiceComponents.entrySet()) {\n+            for (ServiceComponent sc : entry.getValue()) {\n+                if (sc.getService().equalsIgnoreCase(YarnRoles.YARN) && sc.getComponent()\n+                        .equalsIgnoreCase(YarnRoles.NODEMANAGER)) {\n+                    hgToNonGwServiceComponentsWithYarnNMs.put(entry.getKey(), entry.getValue());\n+                    break;\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3OTQxNA==", "bodyText": "doesn't seem relevant, could you drop these?", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r527679414", "createdAt": "2020-11-20T13:08:46Z", "author": {"login": "lacikaaa"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmTemplateProcessor.java", "diffHunk": "@@ -291,6 +311,52 @@ public String getStackVersion() {\n         return cmTemplate.getCdhVersion();\n     }\n \n+    @Override\n+    public Map<String, Map<String, ServiceAttributes>> getHostGroupBasedServiceAttributes() {\n+        // The only attributes required at the moment relate to the YARN NodeManager.\n+        // This functionality can be moved to an interface / separated if additional components\n+        // need this functionality.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4MDY5Mg==", "bodyText": "this part should be moved out and named in a separate method", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r527680692", "createdAt": "2020-11-20T13:11:13Z", "author": {"login": "lacikaaa"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmTemplateProcessor.java", "diffHunk": "@@ -291,6 +311,52 @@ public String getStackVersion() {\n         return cmTemplate.getCdhVersion();\n     }\n \n+    @Override\n+    public Map<String, Map<String, ServiceAttributes>> getHostGroupBasedServiceAttributes() {\n+        // The only attributes required at the moment relate to the YARN NodeManager.\n+        // This functionality can be moved to an interface / separated if additional components\n+        // need this functionality.\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponents = getNonGatewayServicesByHostGroup();\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponentsWithYarnNMs = new HashMap<>();\n+        for (Entry<String, Set<ServiceComponent>> entry : hgToNonGwServiceComponents.entrySet()) {\n+            for (ServiceComponent sc : entry.getValue()) {\n+                if (sc.getService().equalsIgnoreCase(YarnRoles.YARN) && sc.getComponent()\n+                        .equalsIgnoreCase(YarnRoles.NODEMANAGER)) {\n+                    hgToNonGwServiceComponentsWithYarnNMs.put(entry.getKey(), entry.getValue());\n+                    break;\n+                }\n+            }\n+        }\n+        // We have the hostGroups without GATEWAY components with YARN NodeManagers\n+        Map<String, Set<String>> componentsByHostGroup = hgToNonGwServiceComponentsWithYarnNMs.entrySet()\n+                .stream().collect(\n+                        toMap(\n+                                Entry::getKey,\n+                                e -> e.getValue().stream()\n+                                .map(ServiceComponent::getComponent)\n+                                .collect(Collectors.toUnmodifiableSet())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4MTE2MA==", "bodyText": "instead of comment could you use variable and methods name reflecting the same?", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r527681160", "createdAt": "2020-11-20T13:12:10Z", "author": {"login": "lacikaaa"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmTemplateProcessor.java", "diffHunk": "@@ -291,6 +311,52 @@ public String getStackVersion() {\n         return cmTemplate.getCdhVersion();\n     }\n \n+    @Override\n+    public Map<String, Map<String, ServiceAttributes>> getHostGroupBasedServiceAttributes() {\n+        // The only attributes required at the moment relate to the YARN NodeManager.\n+        // This functionality can be moved to an interface / separated if additional components\n+        // need this functionality.\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponents = getNonGatewayServicesByHostGroup();\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponentsWithYarnNMs = new HashMap<>();\n+        for (Entry<String, Set<ServiceComponent>> entry : hgToNonGwServiceComponents.entrySet()) {\n+            for (ServiceComponent sc : entry.getValue()) {\n+                if (sc.getService().equalsIgnoreCase(YarnRoles.YARN) && sc.getComponent()\n+                        .equalsIgnoreCase(YarnRoles.NODEMANAGER)) {\n+                    hgToNonGwServiceComponentsWithYarnNMs.put(entry.getKey(), entry.getValue());\n+                    break;\n+                }\n+            }\n+        }\n+        // We have the hostGroups without GATEWAY components with YARN NodeManagers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4MjIwMw==", "bodyText": "this comment also seems unnecessary or I'm missing something", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r527682203", "createdAt": "2020-11-20T13:14:23Z", "author": {"login": "lacikaaa"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmTemplateProcessor.java", "diffHunk": "@@ -291,6 +311,52 @@ public String getStackVersion() {\n         return cmTemplate.getCdhVersion();\n     }\n \n+    @Override\n+    public Map<String, Map<String, ServiceAttributes>> getHostGroupBasedServiceAttributes() {\n+        // The only attributes required at the moment relate to the YARN NodeManager.\n+        // This functionality can be moved to an interface / separated if additional components\n+        // need this functionality.\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponents = getNonGatewayServicesByHostGroup();\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponentsWithYarnNMs = new HashMap<>();\n+        for (Entry<String, Set<ServiceComponent>> entry : hgToNonGwServiceComponents.entrySet()) {\n+            for (ServiceComponent sc : entry.getValue()) {\n+                if (sc.getService().equalsIgnoreCase(YarnRoles.YARN) && sc.getComponent()\n+                        .equalsIgnoreCase(YarnRoles.NODEMANAGER)) {\n+                    hgToNonGwServiceComponentsWithYarnNMs.put(entry.getKey(), entry.getValue());\n+                    break;\n+                }\n+            }\n+        }\n+        // We have the hostGroups without GATEWAY components with YARN NodeManagers\n+        Map<String, Set<String>> componentsByHostGroup = hgToNonGwServiceComponentsWithYarnNMs.entrySet()\n+                .stream().collect(\n+                        toMap(\n+                                Entry::getKey,\n+                                e -> e.getValue().stream()\n+                                .map(ServiceComponent::getComponent)\n+                                .collect(Collectors.toUnmodifiableSet())\n+                ));\n+        // Re-using the current LoadBasedAutoScaling recommendation along with the above YARN filter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4NzA5MQ==", "bodyText": "for (String hg : componentsByHostGroup.keySet()) {\n            String instanceType = computeHostGroups.contains(hg) ? YarnConstants.ATTRIBUTE_NODE_INSTANCE_TYPE_COMPUTE\n                    : YarnConstants.ATTRIBUTE_NODE_INSTANCE_TYPE_WORKER;\n            Map<String, ServiceAttributes> m = Collections.singletonMap(YarnRoles.YARN, new ServiceAttributes(ServiceComponent.of(YarnRoles.YARN, YarnRoles.NODEMANAGER),\n                    Collections.singletonMap(YarnConstants.ATTRIBUTE_NAME_NODE_INSTANCE_TYPE, instanceType)));\n            result.put(hg, m);\n        }\n\nseems a bit readable this way and could be moved to a separate method also", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r527687091", "createdAt": "2020-11-20T13:23:37Z", "author": {"login": "lacikaaa"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmTemplateProcessor.java", "diffHunk": "@@ -291,6 +311,52 @@ public String getStackVersion() {\n         return cmTemplate.getCdhVersion();\n     }\n \n+    @Override\n+    public Map<String, Map<String, ServiceAttributes>> getHostGroupBasedServiceAttributes() {\n+        // The only attributes required at the moment relate to the YARN NodeManager.\n+        // This functionality can be moved to an interface / separated if additional components\n+        // need this functionality.\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponents = getNonGatewayServicesByHostGroup();\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponentsWithYarnNMs = new HashMap<>();\n+        for (Entry<String, Set<ServiceComponent>> entry : hgToNonGwServiceComponents.entrySet()) {\n+            for (ServiceComponent sc : entry.getValue()) {\n+                if (sc.getService().equalsIgnoreCase(YarnRoles.YARN) && sc.getComponent()\n+                        .equalsIgnoreCase(YarnRoles.NODEMANAGER)) {\n+                    hgToNonGwServiceComponentsWithYarnNMs.put(entry.getKey(), entry.getValue());\n+                    break;\n+                }\n+            }\n+        }\n+        // We have the hostGroups without GATEWAY components with YARN NodeManagers\n+        Map<String, Set<String>> componentsByHostGroup = hgToNonGwServiceComponentsWithYarnNMs.entrySet()\n+                .stream().collect(\n+                        toMap(\n+                                Entry::getKey,\n+                                e -> e.getValue().stream()\n+                                .map(ServiceComponent::getComponent)\n+                                .collect(Collectors.toUnmodifiableSet())\n+                ));\n+        // Re-using the current LoadBasedAutoScaling recommendation along with the above YARN filter.\n+        Set<String> computeHostGroups = getRecommendationByBlacklist(BlackListedLoadBasedAutoscaleRole.class,\n+                true, componentsByHostGroup);\n+\n+        Map<String, Map<String, ServiceAttributes>> result = new HashMap<>();\n+\n+        for (String hg : componentsByHostGroup.keySet()) {\n+            Map<String, ServiceAttributes> m;\n+            if (computeHostGroups.contains(hg)) {\n+                m = Collections.singletonMap(YarnRoles.YARN, new ServiceAttributes(ServiceComponent.of(YarnRoles.YARN, YarnRoles.NODEMANAGER),\n+                        Collections.singletonMap(YarnConstants.ATTRIBUTE_NAME_NODE_INSTANCE_TYPE, YarnConstants.ATTRIBUTE_NODE_INSTANCE_TYPE_COMPUTE)));\n+            } else {\n+                m = Collections.singletonMap(YarnRoles.YARN, new ServiceAttributes(ServiceComponent.of(YarnRoles.YARN, YarnRoles.NODEMANAGER),\n+                        Collections.singletonMap(YarnConstants.ATTRIBUTE_NAME_NODE_INSTANCE_TYPE, YarnConstants.ATTRIBUTE_NODE_INSTANCE_TYPE_WORKER)));\n+            }\n+            result.put(hg, m);\n+        }\n+        LOGGER.debug(\"ServiceAttributes: {}\", result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4NzgyMw==", "bodyText": "Also m is not a good variable name, please rename it to something more helpful", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r527687823", "createdAt": "2020-11-20T13:24:50Z", "author": {"login": "lacikaaa"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmTemplateProcessor.java", "diffHunk": "@@ -291,6 +311,52 @@ public String getStackVersion() {\n         return cmTemplate.getCdhVersion();\n     }\n \n+    @Override\n+    public Map<String, Map<String, ServiceAttributes>> getHostGroupBasedServiceAttributes() {\n+        // The only attributes required at the moment relate to the YARN NodeManager.\n+        // This functionality can be moved to an interface / separated if additional components\n+        // need this functionality.\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponents = getNonGatewayServicesByHostGroup();\n+        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponentsWithYarnNMs = new HashMap<>();\n+        for (Entry<String, Set<ServiceComponent>> entry : hgToNonGwServiceComponents.entrySet()) {\n+            for (ServiceComponent sc : entry.getValue()) {\n+                if (sc.getService().equalsIgnoreCase(YarnRoles.YARN) && sc.getComponent()\n+                        .equalsIgnoreCase(YarnRoles.NODEMANAGER)) {\n+                    hgToNonGwServiceComponentsWithYarnNMs.put(entry.getKey(), entry.getValue());\n+                    break;\n+                }\n+            }\n+        }\n+        // We have the hostGroups without GATEWAY components with YARN NodeManagers\n+        Map<String, Set<String>> componentsByHostGroup = hgToNonGwServiceComponentsWithYarnNMs.entrySet()\n+                .stream().collect(\n+                        toMap(\n+                                Entry::getKey,\n+                                e -> e.getValue().stream()\n+                                .map(ServiceComponent::getComponent)\n+                                .collect(Collectors.toUnmodifiableSet())\n+                ));\n+        // Re-using the current LoadBasedAutoScaling recommendation along with the above YARN filter.\n+        Set<String> computeHostGroups = getRecommendationByBlacklist(BlackListedLoadBasedAutoscaleRole.class,\n+                true, componentsByHostGroup);\n+\n+        Map<String, Map<String, ServiceAttributes>> result = new HashMap<>();\n+\n+        for (String hg : componentsByHostGroup.keySet()) {\n+            Map<String, ServiceAttributes> m;\n+            if (computeHostGroups.contains(hg)) {\n+                m = Collections.singletonMap(YarnRoles.YARN, new ServiceAttributes(ServiceComponent.of(YarnRoles.YARN, YarnRoles.NODEMANAGER),\n+                        Collections.singletonMap(YarnConstants.ATTRIBUTE_NAME_NODE_INSTANCE_TYPE, YarnConstants.ATTRIBUTE_NODE_INSTANCE_TYPE_COMPUTE)));\n+            } else {\n+                m = Collections.singletonMap(YarnRoles.YARN, new ServiceAttributes(ServiceComponent.of(YarnRoles.YARN, YarnRoles.NODEMANAGER),\n+                        Collections.singletonMap(YarnConstants.ATTRIBUTE_NAME_NODE_INSTANCE_TYPE, YarnConstants.ATTRIBUTE_NODE_INSTANCE_TYPE_WORKER)));\n+            }\n+            result.put(hg, m);\n+        }\n+        LOGGER.debug(\"ServiceAttributes: {}\", result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4NzA5MQ=="}, "originalCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY5MTAyNQ==", "bodyText": "I ended up with this, but the method and variable names should be changed with more meaningful one I think. This is just an example:\n\t@Override\n    public Map<String, Map<String, ServiceAttributes>> getHostGroupBasedServiceAttributes() {\n        Map<String, Set<String>> componentsByHostGroup = collectComponentsByHostrgoup();\n        Set<String> computeHostGroups = getRecommendationByBlacklist(BlackListedLoadBasedAutoscaleRole.class,\n                true, componentsByHostGroup);\n        Map<String, Map<String, ServiceAttributes>> result = createServiceAttributeMap(componentsByHostGroup, computeHostGroups);\n        LOGGER.debug(\"ServiceAttributes: {}\", result);\n        return result;\n    }\n\n    private Map<String, Map<String, ServiceAttributes>> createServiceAttributeMap(Map<String, Set<String>> componentsByHostGroup, Set<String> computeHostGroups) {\n        Map<String, Map<String, ServiceAttributes>> result = new HashMap<>();\n        for (String hg : componentsByHostGroup.keySet()) {\n            String instanceType = computeHostGroups.contains(hg) ? YarnConstants.ATTRIBUTE_NODE_INSTANCE_TYPE_COMPUTE\n                    : YarnConstants.ATTRIBUTE_NODE_INSTANCE_TYPE_WORKER;\n            Map<String, ServiceAttributes> m = Collections.singletonMap(YarnRoles.YARN, new ServiceAttributes(ServiceComponent.of(YarnRoles.YARN, YarnRoles.NODEMANAGER),\n                    Collections.singletonMap(YarnConstants.ATTRIBUTE_NAME_NODE_INSTANCE_TYPE, instanceType)));\n            result.put(hg, m);\n        }\n        return result;\n    }\n\n    private Map<String, Set<String>> collectComponentsByHostrgoup() {\n        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponents = getNonGatewayServicesByHostGroup();\n        Map<String, Set<ServiceComponent>> hgToNonGwServiceComponentsWithYarnNMs = hgToNonGwServiceComponents.entrySet().stream()\n                .filter(this::isYarnNodemanager)\n                .collect(toMap(Entry::getKey, Entry::getValue));\n        Map<String, Set<String>> componentsByHostGroup = hgToNonGwServiceComponentsWithYarnNMs.entrySet()\n                .stream().collect(toMap(Entry::getKey, this::collectComponents));\n        return componentsByHostGroup;\n    }\n\n    private Set<String> collectComponents(Entry<String, Set<ServiceComponent>> e) {\n        return e.getValue().stream()\n                .map(ServiceComponent::getComponent)\n                .collect(Collectors.toUnmodifiableSet());\n    }\n\n    private boolean isYarnNodemanager(Entry<String, Set<ServiceComponent>> entry) {\n        return entry.getValue().stream().anyMatch(sc -> YarnRoles.YARN.equalsIgnoreCase(sc.getService())\n                && YarnRoles.NODEMANAGER.equalsIgnoreCase(sc.getComponent()));\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r527691025", "createdAt": "2020-11-20T13:30:12Z", "author": {"login": "lacikaaa"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmTemplateProcessor.java", "diffHunk": "@@ -291,6 +311,52 @@ public String getStackVersion() {\n         return cmTemplate.getCdhVersion();\n     }\n \n+    @Override\n+    public Map<String, Map<String, ServiceAttributes>> getHostGroupBasedServiceAttributes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e322a1c93e41fd3e42a2fb97de3b239710bf60d", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/5e322a1c93e41fd3e42a2fb97de3b239710bf60d", "committedDate": "2020-10-23T20:48:07Z", "message": "Fix test."}, "afterCommit": {"oid": "6d8eff0171e7193f8244a88e2f45736ffa202b62", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/6d8eff0171e7193f8244a88e2f45736ffa202b62", "committedDate": "2020-12-04T06:56:44Z", "message": "CB-8147. Make node specific metadata (hostGroup, YARN NM attributes)\navailable on cluster nodes.\n\n- New metadata file created under /opt/metadata/node.json on cluster\nnodes, which contains the hostGroup name, and service specific\nattributes.\n- The service specific attributes introduced in this PR are for YARN,\nand specify whether a node is a compute or worker based on the services\nrunning on the node (instead of relying on the hostGroup name)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d8eff0171e7193f8244a88e2f45736ffa202b62", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/6d8eff0171e7193f8244a88e2f45736ffa202b62", "committedDate": "2020-12-04T06:56:44Z", "message": "CB-8147. Make node specific metadata (hostGroup, YARN NM attributes)\navailable on cluster nodes.\n\n- New metadata file created under /opt/metadata/node.json on cluster\nnodes, which contains the hostGroup name, and service specific\nattributes.\n- The service specific attributes introduced in this PR are for YARN,\nand specify whether a node is a compute or worker based on the services\nrunning on the node (instead of relying on the hostGroup name)."}, "afterCommit": {"oid": "b892b6d11bce5c14d61158af64d45257dabbc7a9", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/b892b6d11bce5c14d61158af64d45257dabbc7a9", "committedDate": "2020-12-05T04:39:00Z", "message": "CB-8147. Make node specific metadata (hostGroup, YARN NM attributes)\navailable on cluster nodes.\n\n- New metadata file created under /opt/metadata/node.json on cluster\nnodes, which contains the hostGroup name, and service specific\nattributes.\n- The service specific attributes introduced in this PR are for YARN,\nand specify whether a node is a compute or worker based on the services\nrunning on the node (instead of relying on the hostGroup name)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDM1MTUy", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#pullrequestreview-549435152", "createdAt": "2020-12-10T17:28:01Z", "commit": {"oid": "b892b6d11bce5c14d61158af64d45257dabbc7a9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyODowMVrOIDU2ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozMDoyNFrOIDU89Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1ODI0NQ==", "bodyText": "I think this should be moved to a separate class together with getAttributesForHostGroup.\nAnd this method should return with a map, like:\nMap.of(\"hostattrs\", new SaltPillarProperties(\"/nodes/hostattrs.sls\", singletonMap(\"hostattrs\", attributes)))\nAnd in line 303 you would need only:\nservicePillar.putAll(createHostAttributes(..));\nI know there is a lot of code here (even written by me) where we add stuff to this map by passing it around but honestly it's not the best solution.\nMoving this method out would make @VisibleForTesting unnecessary which is already a sign that it should be in a separate class.", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r540358245", "createdAt": "2020-12-10T17:28:01Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "diffHunk": "@@ -323,6 +331,26 @@ private SaltConfig createSaltConfig(Stack stack, Cluster cluster, GatewayConfig\n         return new SaltConfig(servicePillar, grainPropertiesService.createGrainProperties(gatewayConfigs, cluster, nodes));\n     }\n \n+    @VisibleForTesting\n+    void addHostAttributes(Stack stack, Map<String, SaltPillarProperties> servicePillar, Set<Node> nodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b892b6d11bce5c14d61158af64d45257dabbc7a9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1OTkyNQ==", "bodyText": "what is this ~ for?", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#discussion_r540359925", "createdAt": "2020-12-10T17:30:24Z", "author": {"login": "lacikaaa"}, "path": "orchestrator-salt/src/main/resources/salt/salt/metadata/settings.sls", "diffHunk": "@@ -20,3 +22,5 @@\n     'clusterName' : clusterName,\n     'cluster_in_childenvironment' : cluster_in_childenvironment\n }) %}\n+\n+{% set hostattrs = salt['pillar.get']('hostattrs:'~grains['fqdn']) %}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b892b6d11bce5c14d61158af64d45257dabbc7a9"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b892b6d11bce5c14d61158af64d45257dabbc7a9", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/b892b6d11bce5c14d61158af64d45257dabbc7a9", "committedDate": "2020-12-05T04:39:00Z", "message": "CB-8147. Make node specific metadata (hostGroup, YARN NM attributes)\navailable on cluster nodes.\n\n- New metadata file created under /opt/metadata/node.json on cluster\nnodes, which contains the hostGroup name, and service specific\nattributes.\n- The service specific attributes introduced in this PR are for YARN,\nand specify whether a node is a compute or worker based on the services\nrunning on the node (instead of relying on the hostGroup name)."}, "afterCommit": {"oid": "ec73d2cb416eb99a8d763667d69b0300b4b0619b", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/ec73d2cb416eb99a8d763667d69b0300b4b0619b", "committedDate": "2020-12-10T23:45:38Z", "message": "CB-8147. Make node specific metadata (hostGroup, YARN NM attributes)\navailable on cluster nodes.\n\n- New metadata file created under /opt/metadata/node.json on cluster\nnodes, which contains the hostGroup name, and service specific\nattributes.\n- The service specific attributes introduced in this PR are for YARN,\nand specify whether a node is a compute or worker based on the services\nrunning on the node (instead of relying on the hostGroup name)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e015b220c1541d5b8658a647f383c8956b4977e3", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/e015b220c1541d5b8658a647f383c8956b4977e3", "committedDate": "2020-12-11T08:24:34Z", "message": "CB-8147. Make node specific metadata (hostGroup, YARN NM attributes)\navailable on cluster nodes.\n\n- New metadata file created under /opt/metadata/node.json on cluster\nnodes, which contains the hostGroup name, and service specific\nattributes.\n- The service specific attributes introduced in this PR are for YARN,\nand specify whether a node is a compute or worker based on the services\nrunning on the node (instead of relying on the hostGroup name)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec73d2cb416eb99a8d763667d69b0300b4b0619b", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/ec73d2cb416eb99a8d763667d69b0300b4b0619b", "committedDate": "2020-12-10T23:45:38Z", "message": "CB-8147. Make node specific metadata (hostGroup, YARN NM attributes)\navailable on cluster nodes.\n\n- New metadata file created under /opt/metadata/node.json on cluster\nnodes, which contains the hostGroup name, and service specific\nattributes.\n- The service specific attributes introduced in this PR are for YARN,\nand specify whether a node is a compute or worker based on the services\nrunning on the node (instead of relying on the hostGroup name)."}, "afterCommit": {"oid": "e015b220c1541d5b8658a647f383c8956b4977e3", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/e015b220c1541d5b8658a647f383c8956b4977e3", "committedDate": "2020-12-11T08:24:34Z", "message": "CB-8147. Make node specific metadata (hostGroup, YARN NM attributes)\navailable on cluster nodes.\n\n- New metadata file created under /opt/metadata/node.json on cluster\nnodes, which contains the hostGroup name, and service specific\nattributes.\n- The service specific attributes introduced in this PR are for YARN,\nand specify whether a node is a compute or worker based on the services\nrunning on the node (instead of relying on the hostGroup name)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5ODg4NDEy", "url": "https://github.com/hortonworks/cloudbreak/pull/9232#pullrequestreview-549888412", "createdAt": "2020-12-11T08:26:50Z", "commit": {"oid": "e015b220c1541d5b8658a647f383c8956b4977e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2193, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}