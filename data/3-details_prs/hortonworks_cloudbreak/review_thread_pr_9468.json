{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMjQ3MzQ4", "number": 9468, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1NzozNFrOE6_HUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1OTo0N1rOE6_K2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjg2OTI4OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/azure/AzureEnvironmentNetworkValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1NzozNFrOH2Xjug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1NzozNFrOH2Xjug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3MTEzMA==", "bodyText": "This could be one line", "url": "https://github.com/hortonworks/cloudbreak/pull/9468#discussion_r526771130", "createdAt": "2020-11-19T10:57:34Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/azure/AzureEnvironmentNetworkValidator.java", "diffHunk": "@@ -147,11 +147,20 @@ private void checkPrivateEndpointNetworkPoliciesWhenExistingNetwork(\n     }\n \n     private void checkPrivateEndpointForExistingNetworkLink(ValidationResultBuilder resultBuilder, EnvironmentDto environmentDto, NetworkDto networkDto) {\n-        if (networkDto.getServiceEndpointCreation() ==  ServiceEndpointCreation.ENABLED_PRIVATE_ENDPOINT) {\n+        if (networkDto.getServiceEndpointCreation() ==  ServiceEndpointCreation.ENABLED_PRIVATE_ENDPOINT &&\n+                ResourceGroupUsagePattern.USE_MULTIPLE != getResourceGroupUsagePattern(environmentDto)) {\n             CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environmentDto.getCredential());\n             AzureClient azureClient = azureClientService.getClient(cloudCredential);\n-            ValidationResult validationResult = azureNetworkLinkService.validateExistingNetworkLink(azureClient, networkDto.getAzure().getNetworkId());\n-            NullUtil.doIfNotNull(validationResult, resultBuilder::merge);\n+            Optional<String> resourceGroupName = getAzureResourceGroupDto(environmentDto)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e362f2e5c186acc6e45ea121533f3481e3804e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjg3ODMyOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/azure/AzureEnvironmentNetworkValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1OTo0N1rOH2XpWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzozNjowNFrOH2ey-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3MjU3MQ==", "bodyText": "A question: in what condition is it possible in single RG use-case not to have a RG name saved?", "url": "https://github.com/hortonworks/cloudbreak/pull/9468#discussion_r526772571", "createdAt": "2020-11-19T10:59:47Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/azure/AzureEnvironmentNetworkValidator.java", "diffHunk": "@@ -147,11 +147,20 @@ private void checkPrivateEndpointNetworkPoliciesWhenExistingNetwork(\n     }\n \n     private void checkPrivateEndpointForExistingNetworkLink(ValidationResultBuilder resultBuilder, EnvironmentDto environmentDto, NetworkDto networkDto) {\n-        if (networkDto.getServiceEndpointCreation() ==  ServiceEndpointCreation.ENABLED_PRIVATE_ENDPOINT) {\n+        if (networkDto.getServiceEndpointCreation() ==  ServiceEndpointCreation.ENABLED_PRIVATE_ENDPOINT &&\n+                ResourceGroupUsagePattern.USE_MULTIPLE != getResourceGroupUsagePattern(environmentDto)) {\n             CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environmentDto.getCredential());\n             AzureClient azureClient = azureClientService.getClient(cloudCredential);\n-            ValidationResult validationResult = azureNetworkLinkService.validateExistingNetworkLink(azureClient, networkDto.getAzure().getNetworkId());\n-            NullUtil.doIfNotNull(validationResult, resultBuilder::merge);\n+            Optional<String> resourceGroupName = getAzureResourceGroupDto(environmentDto)\n+                    .map(AzureResourceGroupDto::getName);\n+            ValidationResult validationResult;\n+            if (resourceGroupName.isPresent()) {\n+                validationResult = azureNetworkLinkService.validateExistingNetworkLink(azureClient, networkDto.getAzure().getNetworkId(),\n+                        resourceGroupName.get());\n+                NullUtil.doIfNotNull(validationResult, resultBuilder::merge);\n+            } else {\n+                resultBuilder.error(\"Resource group name is not specified in the environment request!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e362f2e5c186acc6e45ea121533f3481e3804e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4OTcyMw==", "bodyText": "Hopefully, never, this was instead of the orElseThrow, but you are right we might skip the validation silently in such impossible cases.", "url": "https://github.com/hortonworks/cloudbreak/pull/9468#discussion_r526889723", "createdAt": "2020-11-19T13:36:04Z", "author": {"login": "pdarvasi"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/azure/AzureEnvironmentNetworkValidator.java", "diffHunk": "@@ -147,11 +147,20 @@ private void checkPrivateEndpointNetworkPoliciesWhenExistingNetwork(\n     }\n \n     private void checkPrivateEndpointForExistingNetworkLink(ValidationResultBuilder resultBuilder, EnvironmentDto environmentDto, NetworkDto networkDto) {\n-        if (networkDto.getServiceEndpointCreation() ==  ServiceEndpointCreation.ENABLED_PRIVATE_ENDPOINT) {\n+        if (networkDto.getServiceEndpointCreation() ==  ServiceEndpointCreation.ENABLED_PRIVATE_ENDPOINT &&\n+                ResourceGroupUsagePattern.USE_MULTIPLE != getResourceGroupUsagePattern(environmentDto)) {\n             CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environmentDto.getCredential());\n             AzureClient azureClient = azureClientService.getClient(cloudCredential);\n-            ValidationResult validationResult = azureNetworkLinkService.validateExistingNetworkLink(azureClient, networkDto.getAzure().getNetworkId());\n-            NullUtil.doIfNotNull(validationResult, resultBuilder::merge);\n+            Optional<String> resourceGroupName = getAzureResourceGroupDto(environmentDto)\n+                    .map(AzureResourceGroupDto::getName);\n+            ValidationResult validationResult;\n+            if (resourceGroupName.isPresent()) {\n+                validationResult = azureNetworkLinkService.validateExistingNetworkLink(azureClient, networkDto.getAzure().getNetworkId(),\n+                        resourceGroupName.get());\n+                NullUtil.doIfNotNull(validationResult, resultBuilder::merge);\n+            } else {\n+                resultBuilder.error(\"Resource group name is not specified in the environment request!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3MjU3MQ=="}, "originalCommit": {"oid": "e7e362f2e5c186acc6e45ea121533f3481e3804e"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3478, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}