{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMzI0MzI0", "number": 9349, "title": "CB-9528: Datalake DR: Database backup restore operations are failing in CB2.32.", "bodyText": "This patch fixes the below issues in the patch submitted for CB-8969 which was reverted.\n\n\nDatabase operation is set to failure when there is a failure in fetching overall backup-restore status.\n\n\nWrong id is used while polling overall data lake backup-restore status so the status of the database backup will always be set to failure/\n\n\nCurrently the flows end if the database backup-restore operation fails. Instead, polling for over-all status should be performed.\n\n\nCurrently, only backup-id is passed to restore flow but we also need the restore-id to perform a status lookup in datalakeFullResoreInProgress state.", "createdAt": "2020-10-30T23:07:48Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9349", "merged": true, "mergeCommit": {"oid": "71a803ab1c984ae56d3102b571d25faef6bdce06"}, "closed": true, "closedAt": "2020-11-12T14:03:03Z", "author": {"login": "kkalvagadda1"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYZ-sDgBqjM5NDU4MzExMjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbkENLABqjM5ODU1NDc4NTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89c811a39f128176feddad5bbf86b0234447f72f", "author": {"user": {"login": "kkalvagadda1", "name": "kalyan kumar kalvagadda"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/89c811a39f128176feddad5bbf86b0234447f72f", "committedDate": "2020-10-30T23:04:09Z", "message": "CB-9528: Datalake DR: Database backup restore operations are failing in CB2.32"}, "afterCommit": {"oid": "171eb9336d3ff0333f9c402de34a39a95833745f", "author": {"user": {"login": "kkalvagadda1", "name": "kalyan kumar kalvagadda"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/171eb9336d3ff0333f9c402de34a39a95833745f", "committedDate": "2020-11-02T00:59:33Z", "message": "CB-9528: Datalake DR: Database backup restore operations are failing in CB2.32"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzg4ODU0", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#pullrequestreview-521788854", "createdAt": "2020-11-02T16:26:26Z", "commit": {"oid": "171eb9336d3ff0333f9c402de34a39a95833745f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjoyNjoyN1rOHsLz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjoyNjoyN1rOHsLz3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA5Mjg5Mg==", "bodyText": "Why are we passing both backupId and restoreId to the restore operation calls? I don't see where we're actually using backupId, although I may just be missing it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#discussion_r516092892", "createdAt": "2020-11-02T16:26:27Z", "author": {"login": "hreeve-cloudera"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/controller/sdx/SdxController.java", "diffHunk": "@@ -265,9 +265,10 @@ public SdxDatabaseBackupResponse backupDatabaseByName(@ResourceName String name,\n \n     @Override\n     @CheckPermissionByAccount(action = AuthorizationResourceAction.RESTORE_DATALAKE)\n-    public SdxDatabaseRestoreResponse restoreDatabaseByName(@ResourceName String name, String backupId, String backupLocation) {\n+    public SdxDatabaseRestoreResponse restoreDatabaseByName(@ResourceName String name, String backupId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171eb9336d3ff0333f9c402de34a39a95833745f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTA0MDQz", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#pullrequestreview-521904043", "createdAt": "2020-11-02T18:46:34Z", "commit": {"oid": "171eb9336d3ff0333f9c402de34a39a95833745f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo0NjozNFrOHsRXGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODo0Njo1MFrOHsRXpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4MzgzNA==", "bodyText": "If this method is databasebackupFailed, we can leave the log message the same as it was before, since it is about the failed database backup.", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#discussion_r516183834", "createdAt": "2020-11-02T18:46:34Z", "author": {"login": "hreeve-cloudera"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/flow/dr/backup/DatalakeDatabaseBackupActions.java", "diffHunk": "@@ -159,7 +189,7 @@ protected SdxContext createFlowContext(FlowParameters flowParameters, StateConte\n             @Override\n             protected void doExecute(SdxContext context, DatalakeDatabaseBackupFailedEvent payload, Map<Object, Object> variables) {\n                 Exception exception = payload.getException();\n-                LOGGER.error(\"Datalake database backup failed for datalake with id: {}\", payload.getResourceId(), exception);\n+                LOGGER.error(\"Datalake backup failed for datalake with id: {}\", payload.getResourceId(), exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171eb9336d3ff0333f9c402de34a39a95833745f"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4Mzk3Mg==", "bodyText": "nit: Fix camelcase. databaseBackupFailed", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#discussion_r516183972", "createdAt": "2020-11-02T18:46:50Z", "author": {"login": "hreeve-cloudera"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/flow/dr/backup/DatalakeDatabaseBackupActions.java", "diffHunk": "@@ -122,33 +128,57 @@ protected Object getFailurePayload(DatalakeDatabaseBackupCouldNotStartEvent payl\n         };\n     }\n \n-    @Bean(name = \"DATALAKE_DATABASE_BACKUP_FINISHED_STATE\")\n-    public Action<?, ?> finishedBackupAction() {\n-        return new AbstractSdxAction<>(DatalakeDatabaseBackupSuccessEvent.class) {\n+    @Bean(name = \"DATALAKE_FULL_BACKUP_IN_PROGRESS_STATE\")\n+    public Action<?, ?> datalakeFullBackupInProgress() {\n+        return new AbstractSdxAction<>(SdxEvent.class) {\n \n             @Override\n-            protected SdxContext createFlowContext(FlowParameters flowParameters, StateContext<FlowState, FlowEvent> stateContext,\n-                    DatalakeDatabaseBackupSuccessEvent payload) {\n+            protected SdxContext createFlowContext(FlowParameters flowParameters, StateContext<FlowState, FlowEvent> stateContext, SdxEvent payload) {\n                 return SdxContext.from(flowParameters, payload);\n             }\n \n             @Override\n-            protected void doExecute(SdxContext context, DatalakeDatabaseBackupSuccessEvent payload, Map<Object, Object> variables) {\n-                LOGGER.info(\"Sdx database backup is finalized with sdx id: {}\", payload.getResourceId());\n+            protected void doExecute(SdxContext context, SdxEvent payload, Map<Object, Object> variables) {\n+                LOGGER.info(\"Full datalake backup is in progress for {} \", payload.getResourceId());\n                 String operationId = (String) variables.get(OPERATION_ID);\n+                String backupId = (String) variables.get(BACKUP_ID);\n                 sdxDatabaseDrService.updateDatabaseStatusEntry(operationId, SdxOperationStatus.SUCCEEDED, null);\n+                sendEvent(context, DatalakeFullBackupWaitRequest.from(context, backupId));\n+            }\n+\n+            @Override\n+            protected Object getFailurePayload(SdxEvent payload, Optional<SdxContext> flowContext, Exception ex) {\n+                return DatalakeDatabaseBackupFailedEvent.from(payload, ex);\n+\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"DATALAKE_BACKUP_FINISHED_STATE\")\n+    public Action<?, ?> finishedBackupAction() {\n+        return new AbstractSdxAction<>(DatalakeBackupSuccessEvent.class) {\n+\n+            @Override\n+            protected SdxContext createFlowContext(FlowParameters flowParameters, StateContext<FlowState, FlowEvent> stateContext,\n+                    DatalakeBackupSuccessEvent payload) {\n+                return SdxContext.from(flowParameters, payload);\n+            }\n+\n+            @Override\n+            protected void doExecute(SdxContext context, DatalakeBackupSuccessEvent payload, Map<Object, Object> variables) {\n+                LOGGER.info(\"Sdx backup is finalized with sdx id: {}\", payload.getResourceId());\n                 sendEvent(context, DATALAKE_DATABASE_BACKUP_FINALIZED_EVENT.event(), payload);\n             }\n \n             @Override\n-            protected Object getFailurePayload(DatalakeDatabaseBackupSuccessEvent payload, Optional<SdxContext> flowContext, Exception ex) {\n+            protected Object getFailurePayload(DatalakeBackupSuccessEvent payload, Optional<SdxContext> flowContext, Exception ex) {\n                 return DatalakeDatabaseBackupFailedEvent.from(payload, ex);\n             }\n         };\n     }\n \n     @Bean(name = \"DATALAKE_DATABASE_BACKUP_FAILED_STATE\")\n-    public Action<?, ?> backupFailed() {\n+    public Action<?, ?> databasebackupFailed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171eb9336d3ff0333f9c402de34a39a95833745f"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2Mjg0OTMy", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#pullrequestreview-526284932", "createdAt": "2020-11-09T14:02:25Z", "commit": {"oid": "171eb9336d3ff0333f9c402de34a39a95833745f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowMjoyNlrOHvwQwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowMjoyNlrOHvwQwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzNTg0MA==", "bodyText": "restoreTd - restoreId", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#discussion_r519835840", "createdAt": "2020-11-09T14:02:26Z", "author": {"login": "sodre90"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java", "diffHunk": "@@ -194,7 +194,8 @@ SdxDatabaseBackupResponse backupDatabaseByName(@PathParam(\"name\") String name,\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = \"restore the database backing datalake \", produces = MediaType.APPLICATION_JSON, nickname = \"restoreDatabase\")\n     SdxDatabaseRestoreResponse restoreDatabaseByName(@PathParam(\"name\") String name,\n-            @QueryParam(\"backupId\") String backupId, @QueryParam(\"backupLocation\") String backupLocation);\n+            @QueryParam(\"backupId\") String backupId, @QueryParam(\"restoreTd\") String restoreId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "171eb9336d3ff0333f9c402de34a39a95833745f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MzEwNDEx", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#pullrequestreview-526310411", "createdAt": "2020-11-09T14:29:48Z", "commit": {"oid": "bca8b3b4829ab2a7e36408b8d7b51e6743a9ca94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyOTo0OFrOHvxbqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyOTo0OFrOHvxbqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1NTAxOQ==", "bodyText": "why is this line duplicated?", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#discussion_r519855019", "createdAt": "2020-11-09T14:29:48Z", "author": {"login": "sodre90"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/flow/dr/restore/DatalakeDatabaseRestoreActions.java", "diffHunk": "@@ -120,32 +128,60 @@ protected Object getFailurePayload(DatalakeDatabaseRestoreCouldNotStartEvent pay\n         };\n     }\n \n+    @Bean(name = \"DATALAKE_FULL_RESTORE_IN_PROGRESS_STATE\")\n+    public Action<?, ?> datalakeFullResoreInProgress() {\n+        return new AbstractSdxAction<>(SdxEvent.class) {\n+\n+            @Override\n+            protected SdxContext createFlowContext(FlowParameters flowParameters, StateContext<FlowState, FlowEvent> stateContext, SdxEvent payload) {\n+                return SdxContext.from(flowParameters, payload);\n+            }\n+\n+            @Override\n+            protected void doExecute(SdxContext context, SdxEvent payload, Map<Object, Object> variables) {\n+                LOGGER.info(\"Full datalake restore is in progress for {} \", payload.getResourceId());\n+                String operationId = (String) variables.get(OPERATION_ID);\n+                sdxDatabaseDrService.updateDatabaseStatusEntry(operationId, SdxOperationStatus.SUCCEEDED, null);\n+                sendEvent(context, DatalakeFullRestoreWaitRequest.from(context, operationId));\n+\n+                String restoreId = (String) variables.get(RESTORE_ID);\n+                sdxDatabaseDrService.updateDatabaseStatusEntry(operationId, SdxOperationStatus.SUCCEEDED, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca8b3b4829ab2a7e36408b8d7b51e6743a9ca94"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MzE4OTM4", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#pullrequestreview-526318938", "createdAt": "2020-11-09T14:38:13Z", "commit": {"oid": "bca8b3b4829ab2a7e36408b8d7b51e6743a9ca94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDozODoxM1rOHvxzHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDozODoxM1rOHvxzHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg2MTAyMw==", "bodyText": "we send 2 event from this action, is this intended?", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#discussion_r519861023", "createdAt": "2020-11-09T14:38:13Z", "author": {"login": "sodre90"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/flow/dr/restore/DatalakeDatabaseRestoreActions.java", "diffHunk": "@@ -120,32 +128,60 @@ protected Object getFailurePayload(DatalakeDatabaseRestoreCouldNotStartEvent pay\n         };\n     }\n \n+    @Bean(name = \"DATALAKE_FULL_RESTORE_IN_PROGRESS_STATE\")\n+    public Action<?, ?> datalakeFullResoreInProgress() {\n+        return new AbstractSdxAction<>(SdxEvent.class) {\n+\n+            @Override\n+            protected SdxContext createFlowContext(FlowParameters flowParameters, StateContext<FlowState, FlowEvent> stateContext, SdxEvent payload) {\n+                return SdxContext.from(flowParameters, payload);\n+            }\n+\n+            @Override\n+            protected void doExecute(SdxContext context, SdxEvent payload, Map<Object, Object> variables) {\n+                LOGGER.info(\"Full datalake restore is in progress for {} \", payload.getResourceId());\n+                String operationId = (String) variables.get(OPERATION_ID);\n+                sdxDatabaseDrService.updateDatabaseStatusEntry(operationId, SdxOperationStatus.SUCCEEDED, null);\n+                sendEvent(context, DatalakeFullRestoreWaitRequest.from(context, operationId));\n+\n+                String restoreId = (String) variables.get(RESTORE_ID);\n+                sdxDatabaseDrService.updateDatabaseStatusEntry(operationId, SdxOperationStatus.SUCCEEDED, null);\n+                sendEvent(context, DatalakeFullRestoreWaitRequest.from(context, restoreId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca8b3b4829ab2a7e36408b8d7b51e6743a9ca94"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDM3NzE1", "url": "https://github.com/hortonworks/cloudbreak/pull/9349#pullrequestreview-528037715", "createdAt": "2020-11-11T10:14:48Z", "commit": {"oid": "0de959e8dfcb927bf6b2a693e3bcd03bc5aa2208"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e375d38159fd3a48f0cc3e82a16785f016f791a2", "author": {"user": {"login": "kkalvagadda1", "name": "kalyan kumar kalvagadda"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e375d38159fd3a48f0cc3e82a16785f016f791a2", "committedDate": "2020-11-11T20:33:53Z", "message": "CB-9528: Datalake DR: Database backup restore operations are failing in CB2.32"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0de959e8dfcb927bf6b2a693e3bcd03bc5aa2208", "author": {"user": {"login": "kkalvagadda1", "name": "kalyan kumar kalvagadda"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0de959e8dfcb927bf6b2a693e3bcd03bc5aa2208", "committedDate": "2020-11-09T18:54:13Z", "message": "addressed comments from peter erdos."}, "afterCommit": {"oid": "e375d38159fd3a48f0cc3e82a16785f016f791a2", "author": {"user": {"login": "kkalvagadda1", "name": "kalyan kumar kalvagadda"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e375d38159fd3a48f0cc3e82a16785f016f791a2", "committedDate": "2020-11-11T20:33:53Z", "message": "CB-9528: Datalake DR: Database backup restore operations are failing in CB2.32"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2141, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}