{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjQ0OTU5", "number": 8153, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMTozNVrOEAAaig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo1NTo1NFrOEFgVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQyMjUwOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ApiEventDataExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMTozNVrOGbA1CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToxNDo0NFrOGbslBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3ODMxMw==", "bodyText": "can NPE be possible?\nalso you can extract structuredEvent.getRestCall().getRestRequest() to a local var (just cosmetics)", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r430978313", "createdAt": "2020-05-27T09:21:35Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ApiEventDataExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import java.util.Set;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredRestCallEvent;\n+\n+@Component(\"REST\")\n+public class ApiEventDataExtractor implements EventDataExtractor<StructuredRestCallEvent> {\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Override\n+    public EventData eventData(StructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb99ae32ca5595fbee70947b0dbc1d3cf5733c69"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5NTEwOQ==", "bodyText": "Of course, but the refining in progress", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r431695109", "createdAt": "2020-05-28T09:14:44Z", "author": {"login": "topolyai5"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ApiEventDataExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import java.util.Set;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredRestCallEvent;\n+\n+@Component(\"REST\")\n+public class ApiEventDataExtractor implements EventDataExtractor<StructuredRestCallEvent> {\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Override\n+    public EventData eventData(StructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3ODMxMw=="}, "originalCommit": {"oid": "cb99ae32ca5595fbee70947b0dbc1d3cf5733c69"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQyMzgxOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ApiEventDataExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMTo1NVrOGbA12g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo1ODo0OFrOGcdwZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3ODUyMg==", "bodyText": "similar questions like above", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r430978522", "createdAt": "2020-05-27T09:21:55Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ApiEventDataExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import java.util.Set;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredRestCallEvent;\n+\n+@Component(\"REST\")\n+public class ApiEventDataExtractor implements EventDataExtractor<StructuredRestCallEvent> {\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Override\n+    public EventData eventData(StructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();\n+        boolean mutating = Set.of(\"POST\", \"PUT\", \"DELETE\").contains(method);\n+        String userAgent = structuredEvent.getRestCall().getRestRequest().getHeaders().get(\"user-agent\");\n+        return ApiRequestData.builder()\n+                .withApiVersion(cbVersion)\n+                .withMutating(mutating)\n+                .withRequestParameters(structuredEvent.getRestCall().getRestRequest().getRequestUri())\n+                .withUserAgent(userAgent)\n+                .build();\n+    }\n+\n+    @Override\n+    public AuditEventName eventName(StructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb99ae32ca5595fbee70947b0dbc1d3cf5733c69"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwMDgzOA==", "bodyText": "It cannot be null", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r432500838", "createdAt": "2020-05-29T13:58:48Z", "author": {"login": "topolyai5"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ApiEventDataExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import java.util.Set;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredRestCallEvent;\n+\n+@Component(\"REST\")\n+public class ApiEventDataExtractor implements EventDataExtractor<StructuredRestCallEvent> {\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Override\n+    public EventData eventData(StructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();\n+        boolean mutating = Set.of(\"POST\", \"PUT\", \"DELETE\").contains(method);\n+        String userAgent = structuredEvent.getRestCall().getRestRequest().getHeaders().get(\"user-agent\");\n+        return ApiRequestData.builder()\n+                .withApiVersion(cbVersion)\n+                .withMutating(mutating)\n+                .withRequestParameters(structuredEvent.getRestCall().getRestRequest().getRequestUri())\n+                .withUserAgent(userAgent)\n+                .build();\n+    }\n+\n+    @Override\n+    public AuditEventName eventName(StructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3ODUyMg=="}, "originalCommit": {"oid": "cb99ae32ca5595fbee70947b0dbc1d3cf5733c69"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQyNzAyOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ApiEventDataExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMjo0NFrOGbA32Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo1OTo1MVrOGcdy2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTAzMw==", "bodyText": "NPE?", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r430979033", "createdAt": "2020-05-27T09:22:44Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ApiEventDataExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import java.util.Set;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredRestCallEvent;\n+\n+@Component(\"REST\")\n+public class ApiEventDataExtractor implements EventDataExtractor<StructuredRestCallEvent> {\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Override\n+    public EventData eventData(StructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();\n+        boolean mutating = Set.of(\"POST\", \"PUT\", \"DELETE\").contains(method);\n+        String userAgent = structuredEvent.getRestCall().getRestRequest().getHeaders().get(\"user-agent\");\n+        return ApiRequestData.builder()\n+                .withApiVersion(cbVersion)\n+                .withMutating(mutating)\n+                .withRequestParameters(structuredEvent.getRestCall().getRestRequest().getRequestUri())\n+                .withUserAgent(userAgent)\n+                .build();\n+    }\n+\n+    @Override\n+    public AuditEventName eventName(StructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();\n+        String uri = structuredEvent.getRestCall().getRestRequest().getRequestUri();\n+        AuditEventName eventName = null;\n+        if (\"POST\".equals(method)) {\n+            eventName = creationRest(uri);\n+        } else if (\"DELETE\".equals(method)) {\n+            eventName = deletionRest(uri);\n+        }\n+        // parse the URL\n+        if (eventName != null) {\n+            return eventName;\n+        }\n+        throw new UnsupportedOperationException(String.format(\"The `%s` with `%s` does not support for auditing\", uri, method));\n+    }\n+\n+    @Override\n+    public Crn.Service eventSource(StructuredRestCallEvent structuredEvent) {\n+        return Crn.Service.DATAHUB;\n+    }\n+\n+    @Override\n+    public String sourceIp(StructuredRestCallEvent structuredEvent) {\n+        return structuredEvent.getRestCall().getRestRequest().getHeaders().get(\"x-real-ip\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb99ae32ca5595fbee70947b0dbc1d3cf5733c69"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwMTQ2NA==", "bodyText": "Only the .get(\"x-real-ip\"); can be null, but the source IP is handled as null", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r432501464", "createdAt": "2020-05-29T13:59:51Z", "author": {"login": "topolyai5"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ApiEventDataExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import java.util.Set;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredRestCallEvent;\n+\n+@Component(\"REST\")\n+public class ApiEventDataExtractor implements EventDataExtractor<StructuredRestCallEvent> {\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Override\n+    public EventData eventData(StructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();\n+        boolean mutating = Set.of(\"POST\", \"PUT\", \"DELETE\").contains(method);\n+        String userAgent = structuredEvent.getRestCall().getRestRequest().getHeaders().get(\"user-agent\");\n+        return ApiRequestData.builder()\n+                .withApiVersion(cbVersion)\n+                .withMutating(mutating)\n+                .withRequestParameters(structuredEvent.getRestCall().getRestRequest().getRequestUri())\n+                .withUserAgent(userAgent)\n+                .build();\n+    }\n+\n+    @Override\n+    public AuditEventName eventName(StructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();\n+        String uri = structuredEvent.getRestCall().getRestRequest().getRequestUri();\n+        AuditEventName eventName = null;\n+        if (\"POST\".equals(method)) {\n+            eventName = creationRest(uri);\n+        } else if (\"DELETE\".equals(method)) {\n+            eventName = deletionRest(uri);\n+        }\n+        // parse the URL\n+        if (eventName != null) {\n+            return eventName;\n+        }\n+        throw new UnsupportedOperationException(String.format(\"The `%s` with `%s` does not support for auditing\", uri, method));\n+    }\n+\n+    @Override\n+    public Crn.Service eventSource(StructuredRestCallEvent structuredEvent) {\n+        return Crn.Service.DATAHUB;\n+    }\n+\n+    @Override\n+    public String sourceIp(StructuredRestCallEvent structuredEvent) {\n+        return structuredEvent.getRestCall().getRestRequest().getHeaders().get(\"x-real-ip\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTAzMw=="}, "originalCommit": {"oid": "cb99ae32ca5595fbee70947b0dbc1d3cf5733c69"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQ0NzY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/conf/StructuredEventSenderConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyODoxOVrOGbBFIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDowMDoyOFrOGcd0ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MjQzMg==", "bodyText": "should come from a property like the others (but I guess it is just like that because of it's a draft)", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r430982432", "createdAt": "2020-05-27T09:28:19Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/conf/StructuredEventSenderConfig.java", "diffHunk": "@@ -33,6 +33,10 @@ public boolean isFilePathConfigured() {\n         return StringUtils.isNotEmpty(auditFilePath);\n     }\n \n+    public boolean isAuditServiceConfigured() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb99ae32ca5595fbee70947b0dbc1d3cf5733c69"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwMTg2Ng==", "bodyText": "yep", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r432501866", "createdAt": "2020-05-29T14:00:28Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/conf/StructuredEventSenderConfig.java", "diffHunk": "@@ -33,6 +33,10 @@ public boolean isFilePathConfigured() {\n         return StringUtils.isNotEmpty(auditFilePath);\n     }\n \n+    public boolean isAuditServiceConfigured() {\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MjQzMg=="}, "originalCommit": {"oid": "cb99ae32ca5595fbee70947b0dbc1d3cf5733c69"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQ3NzU2OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/FlowEventDataExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTozNjo0M1rOGbBZPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTozNjo0M1rOGbBZPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4NzU4MA==", "bodyText": "how are we going to differentiate flows for different resources (like sdx or distrox)?", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r430987580", "createdAt": "2020-05-27T09:36:43Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/FlowEventDataExtractor.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n+\n+@Component(\"FLOW\")\n+public class FlowEventDataExtractor implements EventDataExtractor<StructuredFlowEvent> {\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Override\n+    public EventData eventData(StructuredFlowEvent structuredEvent) {\n+        Map<String, Object> eventDetails = new HashMap<>();\n+        eventDetails.put(\"userCrn\", structuredEvent.getOperation().getUserCrn());\n+        eventDetails.put(\"clusterCrn\", structuredEvent.getOperation().getResourceCrn());\n+        eventDetails.put(\"timestamp\", System.currentTimeMillis());\n+        eventDetails.put(\"environmentCrn\", structuredEvent.getOperation().getEnvironmentCrn());\n+        return ServiceEventData.builder()\n+                .withEventDetails(new Json(eventDetails).getValue())\n+                .withVersion(cbVersion)\n+                .build();\n+    }\n+\n+    @Override\n+    public AuditEventName eventName(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb99ae32ca5595fbee70947b0dbc1d3cf5733c69"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzExOTQ2OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/FlowEventDataExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozNjoxM1rOGfY4lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozNjoxM1rOGfY4lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2Njc0Mg==", "bodyText": "typo", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r435566742", "createdAt": "2020-06-04T21:36:13Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/FlowEventDataExtractor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.FlowResourceAuditEventConverter;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.OperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n+\n+@Component\n+public class FlowEventDataExtractor implements EventDataExtractor<StructuredFlowEvent> {\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Inject\n+    private Map<String, FlowResourceAuditEventConverter> resourceAuditEventConverters;\n+\n+    @Override\n+    public EventData eventData(StructuredFlowEvent structuredEvent) {\n+        Map<String, Object> eventDetails = new HashMap<>();\n+        eventDetails.put(\"userCrn\", structuredEvent.getOperation().getUserCrn());\n+        eventDetails.put(\"clusterCrn\", structuredEvent.getOperation().getResourceCrn());\n+        eventDetails.put(\"timestamp\", System.currentTimeMillis());\n+        eventDetails.put(\"environmentCrn\", structuredEvent.getOperation().getEnvironmentCrn());\n+        eventDetails.put(\"flowState\", getFlowStat(structuredEvent));\n+        eventDetails.put(\"flowId\", structuredEvent.getFlow().getFlowId());\n+        return ServiceEventData.builder()\n+                .withEventDetails(new Json(eventDetails).getValue())\n+                .withVersion(cbVersion)\n+                .build();\n+    }\n+\n+    private String getFlowStat(StructuredFlowEvent structuredEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzEzNjg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/audit/AuditStructuredEventHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0MzoxMVrOGfZDsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0MzoxMVrOGfZDsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2OTU4Ng==", "bodyText": "this case might go into a retriable cycle and should fail hard in case of error (hard fail might be feature-switchable)", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r435569586", "createdAt": "2020-06-04T21:43:11Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/audit/AuditStructuredEventHandler.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.sequenceiq.cloudbreak.structuredevent.audit;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.AuditClient;\n+import com.sequenceiq.cloudbreak.audit.converter.EventDataExtractor;\n+import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.OperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class AuditStructuredEventHandler<T extends StructuredEvent> implements EventHandler<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditStructuredEventHandler.class);\n+\n+    @Inject\n+    private AuditClient auditClient;\n+\n+    @Inject\n+    private Map<String, EventDataExtractor<T>> eventDataExtractorMap;\n+\n+    @Override\n+    public String selector() {\n+        return AsyncAuditStructuredEventSender.AUDIT_EVENT_LOG_MESSAGE;\n+    }\n+\n+    @Override\n+    public void accept(Event<T> structuredEvent) {\n+        try {\n+            T data = structuredEvent.getData();\n+            OperationDetails operation = data.getOperation();\n+            var extractor = eventDataExtractorMap.get(operation.getEventType().name().toLowerCase() + \"EventDataExtractor\");\n+            AuditEvent event = AuditEvent.builder()\n+                    .withAccountId(operation.getTenant())\n+                    .withActor(ActorCrn.builder().withActorCrn(operation.getUserCrn()).build())\n+                    .withEventData(extractor.eventData(data))\n+                    .withEventName(extractor.eventName(data))\n+                    .withEventSource(extractor.eventSource(data))\n+                    .withSourceIp(extractor.sourceIp(data))\n+                    .build();\n+            auditClient.createAuditEvent(event);\n+        } catch (UnsupportedOperationException e) {\n+            LOGGER.debug(\"Audit log is unnecessary: {}\", e.getMessage());\n+        } catch (Exception e) {\n+            LOGGER.error(\"Cannot perform auditing: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzE0MjMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/StructuredFlowEventFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0NToxM1rOGfZHCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0NToxM1rOGfZHCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDQ0MQ==", "bodyText": "\"sdx\" should be \"datalake\" (I assume it is a crn service name, and sdx is deprecated now)\ncould be refactored to a constant as well", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r435570441", "createdAt": "2020-06-04T21:45:13Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/StructuredFlowEventFactory.java", "diffHunk": "@@ -124,9 +127,10 @@ public StructuredNotificationEvent createStructuredNotificationEvent(Stack stack\n             LOGGER.info(\"Access denied in structured notification event creation, user: {}, stack: {}\", userName, stackId, e);\n         }\n \n-        OperationDetails operationDetails = new OperationDetails(clock.getCurrentTimeMillis(), NOTIFICATION, \"stacks\", stackId, stackName,\n+        String resourceType = (stack.getType() == null || stack.getType().equals(StackType.WORKLOAD)) ? CloudbreakEventService.DATAHUB_RESOURCE_TYPE : \"sdx\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzE1MzIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/StructuredFlowEventFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0OTowOVrOGfZN4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0OTowOVrOGfZN4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MjE5NA==", "bodyText": "\"sdx\" should be \"datalake\" (I assume it is a crn service name, and sdx is deprecated now)\ncould be refactored to a constant as well", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r435572194", "createdAt": "2020-06-04T21:49:09Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/StructuredFlowEventFactory.java", "diffHunk": "@@ -64,9 +66,10 @@ public StructuredFlowEvent createStucturedFlowEvent(Long stackId, FlowDetails fl\n \n     public StructuredFlowEvent createStucturedFlowEvent(Long stackId, FlowDetails flowDetails, Boolean detailed, Exception exception) {\n         Stack stack = stackService.getByIdWithTransaction(stackId);\n-        OperationDetails operationDetails = new OperationDetails(clock.getCurrentTimeMillis(), FLOW, \"stacks\", stackId, stack.getName(),\n+        String resourceType = (stack.getType() == null || stack.getType().equals(StackType.WORKLOAD)) ? CloudbreakEventService.DATAHUB_RESOURCE_TYPE : \"sdx\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzE1NzM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/conf/StructuredEventSenderConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo1MDozMlrOGfZQWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo1MDozMlrOGfZQWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MjgyNA==", "bodyText": "please be consistent with the naming (see the backing field name)", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r435572824", "createdAt": "2020-06-04T21:50:32Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/conf/StructuredEventSenderConfig.java", "diffHunk": "@@ -33,6 +36,10 @@ public boolean isFilePathConfigured() {\n         return StringUtils.isNotEmpty(auditFilePath);\n     }\n \n+    public boolean isAuditServiceConfigured() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDc4NDA2OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDoyNTowNlrOGfpD0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxODozOVrOGhJXKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMTc2MA==", "bodyText": "unfortunately, the naming will change, therefore a parameter will be needed.\nReference: https://github.infra.cloudera.com/thunderhead/thunderhead/blob/master/services/audit/event-names.md\nBill will update the sheet with the names (has not started it yet...) I will let you know, but you can prepare for it.", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r435831760", "createdAt": "2020-06-05T10:25:06Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "diffHunk": "@@ -1,5 +1,14 @@\n package com.sequenceiq.cloudbreak.audit.model;\n \n public enum AuditEventName {\n-    DATAHUB_CLUSTER_CREATION\n+    DATAHUB_CLUSTER_CREATION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwOTU3Ng==", "bodyText": "The updated names are in the \"CDP Control Plane Audit Events\" sheet (contact me for URL please if you don't have it)", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437409576", "createdAt": "2020-06-09T13:18:39Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "diffHunk": "@@ -1,5 +1,14 @@\n package com.sequenceiq.cloudbreak.audit.model;\n \n public enum AuditEventName {\n-    DATAHUB_CLUSTER_CREATION\n+    DATAHUB_CLUSTER_CREATION,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMTc2MA=="}, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDc5MzI0OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/FlowEventDataExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDoyODowM1rOGfpJhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDoyODowM1rOGfpJhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMzIyMw==", "bodyText": "swap the sides of  && as it is a short-circuit operator and crn value is already known", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r435833223", "createdAt": "2020-06-05T10:28:03Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/FlowEventDataExtractor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.FlowResourceAuditEventConverter;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.OperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n+\n+@Component\n+public class FlowEventDataExtractor implements EventDataExtractor<StructuredFlowEvent> {\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Inject\n+    private Map<String, FlowResourceAuditEventConverter> resourceAuditEventConverters;\n+\n+    @Override\n+    public EventData eventData(StructuredFlowEvent structuredEvent) {\n+        Map<String, Object> eventDetails = new HashMap<>();\n+        eventDetails.put(\"userCrn\", structuredEvent.getOperation().getUserCrn());\n+        eventDetails.put(\"clusterCrn\", structuredEvent.getOperation().getResourceCrn());\n+        eventDetails.put(\"timestamp\", System.currentTimeMillis());\n+        eventDetails.put(\"environmentCrn\", structuredEvent.getOperation().getEnvironmentCrn());\n+        eventDetails.put(\"flowState\", getFlowStat(structuredEvent));\n+        eventDetails.put(\"flowId\", structuredEvent.getFlow().getFlowId());\n+        return ServiceEventData.builder()\n+                .withEventDetails(new Json(eventDetails).getValue())\n+                .withVersion(cbVersion)\n+                .build();\n+    }\n+\n+    private String getFlowStat(StructuredFlowEvent structuredEvent) {\n+        String flowState = structuredEvent.getFlow().getFlowState();\n+        return \"INIT_STATE\".equals(flowState) ? flowState : structuredEvent.getFlow().getNextFlowState();\n+    }\n+\n+    @Override\n+    public AuditEventName eventName(StructuredFlowEvent structuredEvent) {\n+        FlowDetails flow = structuredEvent.getFlow();\n+        String flowEvent = flow.getFlowEvent();\n+        AuditEventName eventName = null;\n+        String resourceType = structuredEvent.getOperation().getResourceType();\n+        FlowResourceAuditEventConverter flowResourceAuditEventConverter = getConverter(resourceType);\n+        if (flowResourceAuditEventConverter != null) {\n+            eventName = flowResourceAuditEventConverter.auditEventName(structuredEvent);\n+        }\n+        if (eventName != null) {\n+            return eventName;\n+        }\n+        String flowState = flow.getFlowState();\n+        String flowType = flow.getFlowType();\n+        throw new UnsupportedOperationException(String.format(\"The %s, %s and %s does not support for auditing for %s\",\n+                flowType, flowEvent, flowState, resourceType));\n+    }\n+\n+    @Override\n+    public Crn.Service eventSource(StructuredFlowEvent structuredEvent) {\n+        return Crn.fromString(structuredEvent.getOperation().getResourceCrn()).getService();\n+    }\n+\n+    @Override\n+    public String sourceIp(StructuredFlowEvent structuredEvent) {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean shouldAudit(StructuredEvent structuredEvent) {\n+        OperationDetails operation = structuredEvent.getOperation();\n+        FlowResourceAuditEventConverter flowResourceAuditEventConverter = getConverter(operation.getResourceType());\n+        if (flowResourceAuditEventConverter == null) {\n+            return false;\n+        }\n+        boolean crn = Crn.isCrn(operation.getResourceCrn());\n+        return flowResourceAuditEventConverter.shouldAudit((StructuredFlowEvent) structuredEvent) && crn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDc5OTgwOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/RestEventDataExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDozMDoxMVrOGfpNkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMTowMjowNVrOGfqFbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzNDI1OQ==", "bodyText": "how will you decide if it is a datalake?", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r435834259", "createdAt": "2020-06-05T10:30:11Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/RestEventDataExtractor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.converter.auditeventname.rest.RestResourceAuditEventConverter;\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+\n+@Component\n+public class RestEventDataExtractor implements EventDataExtractor<StructuredRestCallEvent> {\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Inject\n+    private Map<String, RestResourceAuditEventConverter> resourceAuditEventConverters;\n+\n+    @Override\n+    public EventData eventData(StructuredRestCallEvent structuredEvent) {\n+        RestRequestDetails restRequest = structuredEvent.getRestCall().getRestRequest();\n+        boolean mutating = Set.of(\"POST\", \"PUT\", \"DELETE\").contains(restRequest.getMethod());\n+        String userAgent = restRequest.getHeaders().get(\"user-agent\");\n+        return ApiRequestData.builder()\n+                .withApiVersion(cbVersion)\n+                .withMutating(mutating)\n+                .withRequestParameters(restRequest.getRequestUri())\n+                .withUserAgent(userAgent)\n+                .build();\n+    }\n+\n+    @Override\n+    public AuditEventName eventName(StructuredRestCallEvent structuredEvent) {\n+        String resourceType = structuredEvent.getOperation().getResourceType();\n+        RestResourceAuditEventConverter restResourceAuditEventConverter = getConverter(resourceType);\n+        if (restResourceAuditEventConverter != null) {\n+            AuditEventName eventName = restResourceAuditEventConverter.auditEventName(structuredEvent);\n+            if (eventName != null) {\n+                return eventName;\n+            }\n+        }\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();\n+        throw new UnsupportedOperationException(String.format(\"The `%s` with `%s` does not support for auditing\", resourceType, method));\n+    }\n+\n+    @Override\n+    public Crn.Service eventSource(StructuredRestCallEvent structuredEvent) {\n+        return Crn.Service.DATAHUB;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg0ODU1Nw==", "bodyText": "you can determine from the payload, the stack type either DATALAKE or WORKLOAD", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r435848557", "createdAt": "2020-06-05T11:02:05Z", "author": {"login": "topolyai5"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/RestEventDataExtractor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.converter.auditeventname.rest.RestResourceAuditEventConverter;\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+\n+@Component\n+public class RestEventDataExtractor implements EventDataExtractor<StructuredRestCallEvent> {\n+\n+    @Value(\"${info.app.version:}\")\n+    private String cbVersion;\n+\n+    @Inject\n+    private Map<String, RestResourceAuditEventConverter> resourceAuditEventConverters;\n+\n+    @Override\n+    public EventData eventData(StructuredRestCallEvent structuredEvent) {\n+        RestRequestDetails restRequest = structuredEvent.getRestCall().getRestRequest();\n+        boolean mutating = Set.of(\"POST\", \"PUT\", \"DELETE\").contains(restRequest.getMethod());\n+        String userAgent = restRequest.getHeaders().get(\"user-agent\");\n+        return ApiRequestData.builder()\n+                .withApiVersion(cbVersion)\n+                .withMutating(mutating)\n+                .withRequestParameters(restRequest.getRequestUri())\n+                .withUserAgent(userAgent)\n+                .build();\n+    }\n+\n+    @Override\n+    public AuditEventName eventName(StructuredRestCallEvent structuredEvent) {\n+        String resourceType = structuredEvent.getOperation().getResourceType();\n+        RestResourceAuditEventConverter restResourceAuditEventConverter = getConverter(resourceType);\n+        if (restResourceAuditEventConverter != null) {\n+            AuditEventName eventName = restResourceAuditEventConverter.auditEventName(structuredEvent);\n+            if (eventName != null) {\n+                return eventName;\n+            }\n+        }\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();\n+        throw new UnsupportedOperationException(String.format(\"The `%s` with `%s` does not support for auditing\", resourceType, method));\n+    }\n+\n+    @Override\n+    public Crn.Service eventSource(StructuredRestCallEvent structuredEvent) {\n+        return Crn.Service.DATAHUB;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzNDI1OQ=="}, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDg1NTM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/db/StructuredEventDBService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDo1MDozNFrOGfpxBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDo1MDozNFrOGfpxBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg0MzMzNQ==", "bodyText": "how will you determine if it is a datalake?", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r435843335", "createdAt": "2020-06-05T10:50:34Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/db/StructuredEventDBService.java", "diffHunk": "@@ -135,7 +136,7 @@ protected void prepareCreation(StructuredEventEntity resource) {\n \n     @Override\n     public StructuredEventContainer getStructuredEventsForStack(String name, Long workspaceId) {\n-        return getEventsForUserWithResourceId(\"stacks\", getStackIfAvailable(workspaceId, name).getId());\n+        return getEventsForUserWithResourceId(CloudbreakEventService.DATAHUB_RESOURCE_TYPE, getStackIfAvailable(workspaceId, name).getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDg1NTYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/db/StructuredEventDBService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDo1MDo0MFrOGfpxLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDo1MDo0MFrOGfpxLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg0MzM3NA==", "bodyText": "how will you determine if it is a datalake?", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r435843374", "createdAt": "2020-06-05T10:50:40Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/db/StructuredEventDBService.java", "diffHunk": "@@ -151,6 +152,7 @@ public StructuredEventEntity findByWorkspaceIdAndId(Long workspaceId, Long id) {\n     }\n \n     private Stack getStackIfAvailable(Long workspaceId, String name) {\n-        return Optional.ofNullable(stackService.getByNameInWorkspace(name, workspaceId)).orElseThrow(notFound(\"stack\", name));\n+        return Optional.ofNullable(stackService.getByNameInWorkspace(name, workspaceId))\n+                .orElseThrow(notFound(CloudbreakEventService.DATAHUB_RESOURCE_TYPE, name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abf6a14a870f8c4c4a8bd7940cec278c2e226f2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDk1MjA4OnYy", "diffSide": "RIGHT", "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/conf/StructuredEventEnablementConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxMjo0OVrOGhJHsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1Nzo1MVrOGiou3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNTYxOA==", "bodyText": "would be more flexible with a default value \"false\" and set explicitly in the enabled services.\nbecause of transitive dependencies, other services that are not explicitly adding :structuredevent-model (like RedBeams) will fail upon startup", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437405618", "createdAt": "2020-06-09T13:12:49Z", "author": {"login": "bergerdenes"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/conf/StructuredEventEnablementConfig.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.cloudbreak.structuredevent.conf;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class StructuredEventEnablementConfig {\n+\n+    @Value(\"${cb.kafka.bootstrap.servers:}\")\n+    private String bootstrapServers;\n+\n+    @Value(\"${cb.audit.filepath:}\")\n+    private String auditFilePath;\n+\n+    @Value(\"${audit.service.enabled}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjEyNA==", "bodyText": "I am trying to add the. variable to all module", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r438972124", "createdAt": "2020-06-11T17:57:51Z", "author": {"login": "topolyai5"}, "path": "structuredevent-model/src/main/java/com/sequenceiq/cloudbreak/structuredevent/conf/StructuredEventEnablementConfig.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.cloudbreak.structuredevent.conf;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class StructuredEventEnablementConfig {\n+\n+    @Value(\"${cb.kafka.bootstrap.servers:}\")\n+    private String bootstrapServers;\n+\n+    @Value(\"${cb.audit.filepath:}\")\n+    private String auditFilePath;\n+\n+    @Value(\"${audit.service.enabled}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNTYxOA=="}, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDk1NTM0OnYy", "diffSide": "RIGHT", "path": "environment/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxMzo0M1rOGhJJ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1Mzo0N1rOGhLLZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNjE4OA==", "bodyText": "remove please", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437406188", "createdAt": "2020-06-09T13:13:43Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/resources/application.yml", "diffHunk": "@@ -6,6 +6,10 @@ opentracing:\n   jaeger:\n     log-spans: false\n \n+audit:\n+  service:\n+    enabled: false\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTMzMg==", "bodyText": "we need to add this variable because the structure event module is used by all module and we set the default value in application.yml.", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437439332", "createdAt": "2020-06-09T13:53:47Z", "author": {"login": "topolyai5"}, "path": "environment/src/main/resources/application.yml", "diffHunk": "@@ -6,6 +6,10 @@ opentracing:\n   jaeger:\n     log-spans: false\n \n+audit:\n+  service:\n+    enabled: false\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNjE4OA=="}, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDk1NjQ1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxMzo1NVrOGhJKiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxMzo1NVrOGhJKiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNjM0NQ==", "bodyText": "remove please", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437406345", "createdAt": "2020-06-09T13:13:55Z", "author": {"login": "bergerdenes"}, "path": "freeipa/src/main/resources/application.yml", "diffHunk": "@@ -27,6 +27,9 @@ management:\n       percentiles:\n         \"[http.server.requests]\": \"0.5, 0.95\"\n \n+audit:\n+  service:\n+    enabled: false\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTAyODI4OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datahub/StartDatahubFlowOperationAuditEventNameConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozMDo1OVrOGhJ5CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxOTowNVrOGi7VRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxODI0OQ==", "bodyText": "is this WIP?", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437418249", "createdAt": "2020-06-09T13:30:59Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datahub/StartDatahubFlowOperationAuditEventNameConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.datahub;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n+\n+@Component\n+public class StartDatahubFlowOperationAuditEventNameConverter implements DatahubFlowOperationAuditEventNameConverter {\n+\n+    @Override\n+    public boolean isInit(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"STACK_START_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFinal(StructuredFlowEvent structuredEvent) {\n+        String flowState = structuredEvent.getFlow().getFlowState();\n+        return \"CLUSTER_START_FINISHED_STATE\".equals(flowState);\n+    }\n+\n+    @Override\n+    public boolean isFailed(StructuredFlowEvent structuredEvent) {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3Njg2OQ==", "bodyText": "follow-up story is needed", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r439276869", "createdAt": "2020-06-12T08:19:05Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datahub/StartDatahubFlowOperationAuditEventNameConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.datahub;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n+\n+@Component\n+public class StartDatahubFlowOperationAuditEventNameConverter implements DatahubFlowOperationAuditEventNameConverter {\n+\n+    @Override\n+    public boolean isInit(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"STACK_START_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFinal(StructuredFlowEvent structuredEvent) {\n+        String flowState = structuredEvent.getFlow().getFlowState();\n+        return \"CLUSTER_START_FINISHED_STATE\".equals(flowState);\n+    }\n+\n+    @Override\n+    public boolean isFailed(StructuredFlowEvent structuredEvent) {\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxODI0OQ=="}, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTAyODkyOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datahub/StopDatahubFlowOperationAuditEventNameConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozMTowOFrOGhJ5cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozMTowOFrOGhJ5cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxODM1NA==", "bodyText": "is this WIP?", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437418354", "createdAt": "2020-06-09T13:31:08Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datahub/StopDatahubFlowOperationAuditEventNameConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.datahub;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n+\n+@Component\n+public class StopDatahubFlowOperationAuditEventNameConverter implements DatahubFlowOperationAuditEventNameConverter {\n+\n+    @Override\n+    public boolean isInit(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"STACK_STOP_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFinal(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"STOP_FINALIZED_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFailed(StructuredFlowEvent structuredEvent) {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTAyOTQzOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datalake/CreationDatalakeFlowOperationAuditEventNameConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozMToxNFrOGhJ5yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1ODowMlrOGhLbvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxODQ0Mg==", "bodyText": "is this WIP?", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437418442", "createdAt": "2020-06-09T13:31:14Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datalake/CreationDatalakeFlowOperationAuditEventNameConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.datalake;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n+\n+@Component\n+public class CreationDatalakeFlowOperationAuditEventNameConverter implements DatalakeFlowOperationAuditEventNameConverter {\n+\n+    @Override\n+    public boolean isInit(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"START_CREATION_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFinal(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"CLUSTER_CREATION_FINISHED_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFailed(StructuredFlowEvent structuredEvent) {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MzUxOQ==", "bodyText": "yep, all the faild branches are wip", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437443519", "createdAt": "2020-06-09T13:58:02Z", "author": {"login": "topolyai5"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datalake/CreationDatalakeFlowOperationAuditEventNameConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.datalake;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n+\n+@Component\n+public class CreationDatalakeFlowOperationAuditEventNameConverter implements DatalakeFlowOperationAuditEventNameConverter {\n+\n+    @Override\n+    public boolean isInit(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"START_CREATION_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFinal(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"CLUSTER_CREATION_FINISHED_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFailed(StructuredFlowEvent structuredEvent) {\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxODQ0Mg=="}, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTAzMTI4OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datalake/DeletionDatalakeFlowOperationAuditEventNameConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozMTo0NFrOGhJ7Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozMTo0NFrOGhJ7Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxODc1NQ==", "bodyText": "is this WIP?", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437418755", "createdAt": "2020-06-09T13:31:44Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datalake/DeletionDatalakeFlowOperationAuditEventNameConverter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.datalake;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.FlowOperationAuditEventNameConverter;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n+\n+@Component\n+public class DeletionDatalakeFlowOperationAuditEventNameConverter implements DatalakeFlowOperationAuditEventNameConverter {\n+\n+    @Override\n+    public boolean isInit(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"TERMINATION_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFinal(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"TERMINATION_FINALIZED_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFailed(StructuredFlowEvent structuredEvent) {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTAzMjIzOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datalake/StartDatalakeFlowOperationAuditEventNameConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozMTo1N1rOGhJ7iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozMTo1N1rOGhJ7iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxODg5MQ==", "bodyText": "is this WIP?", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437418891", "createdAt": "2020-06-09T13:31:57Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datalake/StartDatalakeFlowOperationAuditEventNameConverter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.datalake;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.FlowOperationAuditEventNameConverter;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n+\n+@Component\n+public class StartDatalakeFlowOperationAuditEventNameConverter implements DatalakeFlowOperationAuditEventNameConverter {\n+\n+    @Override\n+    public boolean isInit(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"STACK_START_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFinal(StructuredFlowEvent structuredEvent) {\n+        String flowState = structuredEvent.getFlow().getFlowState();\n+        return \"CLUSTER_START_FINISHED_STATE\".equals(flowState);\n+    }\n+\n+    @Override\n+    public boolean isFailed(StructuredFlowEvent structuredEvent) {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTAzMjg4OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datalake/StopDatalakeFlowOperationAuditEventNameConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozMjowOFrOGhJ7-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozMjowOFrOGhJ7-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxOTAwMQ==", "bodyText": "is this WIP?", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437419001", "createdAt": "2020-06-09T13:32:08Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/flow/datalake/StopDatalakeFlowOperationAuditEventNameConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.sequenceiq.cloudbreak.audit.converter.auditeventname.flow.datalake;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredFlowEvent;\n+\n+@Component\n+public class StopDatalakeFlowOperationAuditEventNameConverter implements DatalakeFlowOperationAuditEventNameConverter {\n+\n+    @Override\n+    public boolean isInit(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"STACK_STOP_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFinal(StructuredFlowEvent structuredEvent) {\n+        String flowEvent = structuredEvent.getFlow().getFlowEvent();\n+        return \"STOP_FINALIZED_EVENT\".equals(flowEvent);\n+    }\n+\n+    @Override\n+    public boolean isFailed(StructuredFlowEvent structuredEvent) {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA2Mzk5OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/event/AuditStructuredEventHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozOTowMlrOGhKPeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyMToyN1rOGi7ZzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMzk5Mg==", "bodyText": "As I have commented earlier, that is important that\n\nwe should retry (it would be the responsibility of the client) auditing\nat this point we should only log, like this above\nfail hard, if the auditing is not possible\nand the behavior between 2) and 3) should be a feautre switch", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437423992", "createdAt": "2020-06-09T13:39:02Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/event/AuditStructuredEventHandler.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.sequenceiq.cloudbreak.audit.event;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.AuditClient;\n+import com.sequenceiq.cloudbreak.audit.converter.EventDataExtractor;\n+import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.OperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class AuditStructuredEventHandler<T extends StructuredEvent> implements EventHandler<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditStructuredEventHandler.class);\n+\n+    @Inject\n+    private AuditClient auditClient;\n+\n+    @Inject\n+    private Map<String, EventDataExtractor<T>> eventDataExtractorMap;\n+\n+    @Override\n+    public String selector() {\n+        return AsyncAuditStructuredEventSender.AUDIT_EVENT_LOG_MESSAGE;\n+    }\n+\n+    @Override\n+    public void accept(Event<T> structuredEvent) {\n+        try {\n+            T data = structuredEvent.getData();\n+            OperationDetails operation = data.getOperation();\n+            var extractor = eventDataExtractorMap.get(operation.getEventType().name().toLowerCase() + \"EventDataExtractor\");\n+            AuditEvent event = AuditEvent.builder()\n+                    .withAccountId(operation.getTenant())\n+                    .withActor(ActorCrn.builder().withActorCrn(operation.getUserCrn()).build())\n+                    .withEventData(extractor.eventData(data))\n+                    .withEventName(extractor.eventName(data))\n+                    .withEventSource(extractor.eventSource(data))\n+                    .withSourceIp(extractor.sourceIp(data))\n+                    .build();\n+            auditClient.createAuditEvent(event);\n+        } catch (UnsupportedOperationException e) {\n+            LOGGER.debug(\"Audit log is unnecessary: {}\", e.getMessage());\n+        } catch (Exception e) {\n+            LOGGER.error(\"Cannot perform auditing: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MTc1OQ==", "bodyText": "I think that is very annoying if your sdx is failed after 1 hour because an audit log problem occurred at the end of the flow", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437441759", "createdAt": "2020-06-09T13:56:23Z", "author": {"login": "topolyai5"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/event/AuditStructuredEventHandler.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.sequenceiq.cloudbreak.audit.event;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.AuditClient;\n+import com.sequenceiq.cloudbreak.audit.converter.EventDataExtractor;\n+import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.OperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class AuditStructuredEventHandler<T extends StructuredEvent> implements EventHandler<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditStructuredEventHandler.class);\n+\n+    @Inject\n+    private AuditClient auditClient;\n+\n+    @Inject\n+    private Map<String, EventDataExtractor<T>> eventDataExtractorMap;\n+\n+    @Override\n+    public String selector() {\n+        return AsyncAuditStructuredEventSender.AUDIT_EVENT_LOG_MESSAGE;\n+    }\n+\n+    @Override\n+    public void accept(Event<T> structuredEvent) {\n+        try {\n+            T data = structuredEvent.getData();\n+            OperationDetails operation = data.getOperation();\n+            var extractor = eventDataExtractorMap.get(operation.getEventType().name().toLowerCase() + \"EventDataExtractor\");\n+            AuditEvent event = AuditEvent.builder()\n+                    .withAccountId(operation.getTenant())\n+                    .withActor(ActorCrn.builder().withActorCrn(operation.getUserCrn()).build())\n+                    .withEventData(extractor.eventData(data))\n+                    .withEventName(extractor.eventName(data))\n+                    .withEventSource(extractor.eventSource(data))\n+                    .withSourceIp(extractor.sourceIp(data))\n+                    .build();\n+            auditClient.createAuditEvent(event);\n+        } catch (UnsupportedOperationException e) {\n+            LOGGER.debug(\"Audit log is unnecessary: {}\", e.getMessage());\n+        } catch (Exception e) {\n+            LOGGER.error(\"Cannot perform auditing: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMzk5Mg=="}, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODAyOQ==", "bodyText": "followup story", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r439278029", "createdAt": "2020-06-12T08:21:27Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/event/AuditStructuredEventHandler.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.sequenceiq.cloudbreak.audit.event;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.AuditClient;\n+import com.sequenceiq.cloudbreak.audit.converter.EventDataExtractor;\n+import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.OperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEvent;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class AuditStructuredEventHandler<T extends StructuredEvent> implements EventHandler<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditStructuredEventHandler.class);\n+\n+    @Inject\n+    private AuditClient auditClient;\n+\n+    @Inject\n+    private Map<String, EventDataExtractor<T>> eventDataExtractorMap;\n+\n+    @Override\n+    public String selector() {\n+        return AsyncAuditStructuredEventSender.AUDIT_EVENT_LOG_MESSAGE;\n+    }\n+\n+    @Override\n+    public void accept(Event<T> structuredEvent) {\n+        try {\n+            T data = structuredEvent.getData();\n+            OperationDetails operation = data.getOperation();\n+            var extractor = eventDataExtractorMap.get(operation.getEventType().name().toLowerCase() + \"EventDataExtractor\");\n+            AuditEvent event = AuditEvent.builder()\n+                    .withAccountId(operation.getTenant())\n+                    .withActor(ActorCrn.builder().withActorCrn(operation.getUserCrn()).build())\n+                    .withEventData(extractor.eventData(data))\n+                    .withEventName(extractor.eventName(data))\n+                    .withEventSource(extractor.eventSource(data))\n+                    .withSourceIp(extractor.sourceIp(data))\n+                    .build();\n+            auditClient.createAuditEvent(event);\n+        } catch (UnsupportedOperationException e) {\n+            LOGGER.debug(\"Audit log is unnecessary: {}\", e.getMessage());\n+        } catch (Exception e) {\n+            LOGGER.error(\"Cannot perform auditing: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMzk5Mg=="}, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA3MTczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/events/DefaultCloudbreakEventService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0MDozNVrOGhKUXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1Njo0MVrOGhLWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNTI0NQ==", "bodyText": "is it always datahub? I think the same is called for datalake", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437425245", "createdAt": "2020-06-09T13:40:35Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/events/DefaultCloudbreakEventService.java", "diffHunk": "@@ -121,18 +121,27 @@ public void fireCloudbreakInstanceGroupEvent(Long stackId, String eventType, Str\n     public List<StructuredNotificationEvent> cloudbreakEventsForStack(Long stackId) {\n         List<StructuredNotificationEvent> events = new ArrayList<>();\n         if (stackId != null) {\n-            events = structuredEventService.getEventsWithTypeAndResourceId(StructuredNotificationEvent.class, \"stacks\", stackId);\n+            events = structuredEventService.getEventsWithTypeAndResourceId(StructuredNotificationEvent.class,\n+                    CloudbreakEventService.DATAHUB_RESOURCE_TYPE, stackId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MjA2MA==", "bodyText": "wip", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437442060", "createdAt": "2020-06-09T13:56:41Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/events/DefaultCloudbreakEventService.java", "diffHunk": "@@ -121,18 +121,27 @@ public void fireCloudbreakInstanceGroupEvent(Long stackId, String eventType, Str\n     public List<StructuredNotificationEvent> cloudbreakEventsForStack(Long stackId) {\n         List<StructuredNotificationEvent> events = new ArrayList<>();\n         if (stackId != null) {\n-            events = structuredEventService.getEventsWithTypeAndResourceId(StructuredNotificationEvent.class, \"stacks\", stackId);\n+            events = structuredEventService.getEventsWithTypeAndResourceId(StructuredNotificationEvent.class,\n+                    CloudbreakEventService.DATAHUB_RESOURCE_TYPE, stackId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNTI0NQ=="}, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA3MjUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/events/DefaultCloudbreakEventService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0MDo0MlrOGhKU1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0MDo0MlrOGhKU1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNTM2Ng==", "bodyText": "is it always datahub? I think the same is called for datalake", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437425366", "createdAt": "2020-06-09T13:40:42Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/events/DefaultCloudbreakEventService.java", "diffHunk": "@@ -121,18 +121,27 @@ public void fireCloudbreakInstanceGroupEvent(Long stackId, String eventType, Str\n     public List<StructuredNotificationEvent> cloudbreakEventsForStack(Long stackId) {\n         List<StructuredNotificationEvent> events = new ArrayList<>();\n         if (stackId != null) {\n-            events = structuredEventService.getEventsWithTypeAndResourceId(StructuredNotificationEvent.class, \"stacks\", stackId);\n+            events = structuredEventService.getEventsWithTypeAndResourceId(StructuredNotificationEvent.class,\n+                    CloudbreakEventService.DATAHUB_RESOURCE_TYPE, stackId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA5MjExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/events/DefaultCloudbreakEventService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0MzozOFrOGhKg_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyNjo0N1rOGilSQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyODQ3Nw==", "bodyText": "please return the constant DATALAKE_RESOURCE_TYPE value", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r437428477", "createdAt": "2020-06-09T13:43:38Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/events/DefaultCloudbreakEventService.java", "diffHunk": "@@ -121,18 +121,27 @@ public void fireCloudbreakInstanceGroupEvent(Long stackId, String eventType, Str\n     public List<StructuredNotificationEvent> cloudbreakEventsForStack(Long stackId) {\n         List<StructuredNotificationEvent> events = new ArrayList<>();\n         if (stackId != null) {\n-            events = structuredEventService.getEventsWithTypeAndResourceId(StructuredNotificationEvent.class, \"stacks\", stackId);\n+            events = structuredEventService.getEventsWithTypeAndResourceId(StructuredNotificationEvent.class,\n+                    CloudbreakEventService.DATAHUB_RESOURCE_TYPE, stackId);\n         }\n         return events;\n     }\n \n     @Override\n-    public Page<StructuredNotificationEvent> cloudbreakEventsForStack(Long stackId, Pageable pageable) {\n+    public Page<StructuredNotificationEvent> cloudbreakEventsForStack(Long stackId, String stackType, Pageable pageable) {\n         return Optional.ofNullable(stackId)\n-                .map(id -> structuredEventService.getEventsLimitedWithTypeAndResourceId(StructuredNotificationEvent.class, \"stacks\", id, pageable))\n+                .map(id -> structuredEventService.getEventsLimitedWithTypeAndResourceId(StructuredNotificationEvent.class,\n+                        getResourceType(stackType), id, pageable))\n                 .orElse(Page.empty());\n     }\n \n+    private String getResourceType(String stackType) {\n+        if (\"WORKLOAD\".equals(stackType)) {\n+            return DATAHUB_RESOURCE_TYPE;\n+        }\n+        return stackType.toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNTY0OA==", "bodyText": "I'm not sure with the else brach. Because the datahub is different than the stack type, I created a converter but any other case I assume that the name is  same.", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r438915648", "createdAt": "2020-06-11T16:26:47Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/events/DefaultCloudbreakEventService.java", "diffHunk": "@@ -121,18 +121,27 @@ public void fireCloudbreakInstanceGroupEvent(Long stackId, String eventType, Str\n     public List<StructuredNotificationEvent> cloudbreakEventsForStack(Long stackId) {\n         List<StructuredNotificationEvent> events = new ArrayList<>();\n         if (stackId != null) {\n-            events = structuredEventService.getEventsWithTypeAndResourceId(StructuredNotificationEvent.class, \"stacks\", stackId);\n+            events = structuredEventService.getEventsWithTypeAndResourceId(StructuredNotificationEvent.class,\n+                    CloudbreakEventService.DATAHUB_RESOURCE_TYPE, stackId);\n         }\n         return events;\n     }\n \n     @Override\n-    public Page<StructuredNotificationEvent> cloudbreakEventsForStack(Long stackId, Pageable pageable) {\n+    public Page<StructuredNotificationEvent> cloudbreakEventsForStack(Long stackId, String stackType, Pageable pageable) {\n         return Optional.ofNullable(stackId)\n-                .map(id -> structuredEventService.getEventsLimitedWithTypeAndResourceId(StructuredNotificationEvent.class, \"stacks\", id, pageable))\n+                .map(id -> structuredEventService.getEventsLimitedWithTypeAndResourceId(StructuredNotificationEvent.class,\n+                        getResourceType(stackType), id, pageable))\n                 .orElse(Page.empty());\n     }\n \n+    private String getResourceType(String stackType) {\n+        if (\"WORKLOAD\".equals(stackType)) {\n+            return DATAHUB_RESOURCE_TYPE;\n+        }\n+        return stackType.toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyODQ3Nw=="}, "originalCommit": {"oid": "f2510ae30f518cc16f0481c102e0cb25b121081f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjA0NTUzOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0NDozM1rOGjunnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0NDozM1rOGjunnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNzE0OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r440117148", "createdAt": "2020-06-15T11:44:33Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "diffHunk": "@@ -35,12 +36,17 @@\n                 .setTimestamp(System.currentTimeMillis())\n                 .setAccountId(source.getAccountId())\n                 .setRequestId(requestId)\n-                .setEventName(source.getEventName().name())\n+                .setEventName(formatAuditEventName(source))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337990e2deb1460dd116fa26a5d558d8e68d58a3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjA3MzY5OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo1Mzo1MFrOGju6NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo0ODoyNlrOGjwqvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyMTkwOA==", "bodyText": "Please rename the corresponding constants to the following, as it was recommended in the event names sheet:\nCREATE_DATAHUB_CLUSTER\nDELETE_DATAHUB_CLUSTER\nSTOP_DATAHUB_CLUSTER\nRESIZE_DATAHUB_CLUSTER\nDELETE_DATAHUB_CLUSTER_INSTANCE\nMAINTAIN_DATAHUB_CLUSTER\nSTART_DATAHUB_CLUSTER", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r440121908", "createdAt": "2020-06-15T11:53:50Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "diffHunk": "@@ -1,5 +1,25 @@\n package com.sequenceiq.cloudbreak.audit.model;\n \n public enum AuditEventName {\n-    DATAHUB_CLUSTER_CREATION\n+    CREATION_DATAHUB_CLUSTER,\n+    DELETION_DATAHUB_CLUSTER,\n+    STOPPAGE_DATAHUB_CLUSTER,\n+    RESIZING_DATAHUB_CLUSTER,\n+    MANUAL_REPAIR_DATAHUB_CLUSTER,\n+    SYNC_DATAHUB_CLUSTER,\n+    RETRY_DATAHUB_CLUSTER,\n+    INSTANCE_DELETION_DATAHUB_CLUSTER,\n+    MAINTENANCE_DATAHUB_CLUSTER,\n+    STARTING_DATAHUB_CLUSTER,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337990e2deb1460dd116fa26a5d558d8e68d58a3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1MDcxOA==", "bodyText": "done", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r440150718", "createdAt": "2020-06-15T12:48:26Z", "author": {"login": "topolyai5"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "diffHunk": "@@ -1,5 +1,25 @@\n package com.sequenceiq.cloudbreak.audit.model;\n \n public enum AuditEventName {\n-    DATAHUB_CLUSTER_CREATION\n+    CREATION_DATAHUB_CLUSTER,\n+    DELETION_DATAHUB_CLUSTER,\n+    STOPPAGE_DATAHUB_CLUSTER,\n+    RESIZING_DATAHUB_CLUSTER,\n+    MANUAL_REPAIR_DATAHUB_CLUSTER,\n+    SYNC_DATAHUB_CLUSTER,\n+    RETRY_DATAHUB_CLUSTER,\n+    INSTANCE_DELETION_DATAHUB_CLUSTER,\n+    MAINTENANCE_DATAHUB_CLUSTER,\n+    STARTING_DATAHUB_CLUSTER,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyMTkwOA=="}, "originalCommit": {"oid": "337990e2deb1460dd116fa26a5d558d8e68d58a3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjA4MDk5OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo1NTo1NFrOGju-pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo0ODozM1rOGjwrDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyMzA0NA==", "bodyText": "Please rename the corresponding constants to the following, as it was recommended in the event names sheet:\nCREATE_DATALAKE_CLUSTER\nDELETE_DATALAKE_CLUSTER\nSTOP_DATALAKE_CLUSTER\nRESIZE_DATALAKE_CLUSTER\nDELETE_DATALAKE_CLUSTER_INSTANCE\nMAINTAIN_DATALAKE_CLUSTER\nSTART_DATALAKE_CLUSTER", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r440123044", "createdAt": "2020-06-15T11:55:54Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "diffHunk": "@@ -1,5 +1,25 @@\n package com.sequenceiq.cloudbreak.audit.model;\n \n public enum AuditEventName {\n-    DATAHUB_CLUSTER_CREATION\n+    CREATION_DATAHUB_CLUSTER,\n+    DELETION_DATAHUB_CLUSTER,\n+    STOPPAGE_DATAHUB_CLUSTER,\n+    RESIZING_DATAHUB_CLUSTER,\n+    MANUAL_REPAIR_DATAHUB_CLUSTER,\n+    SYNC_DATAHUB_CLUSTER,\n+    RETRY_DATAHUB_CLUSTER,\n+    INSTANCE_DELETION_DATAHUB_CLUSTER,\n+    MAINTENANCE_DATAHUB_CLUSTER,\n+    STARTING_DATAHUB_CLUSTER,\n+\n+    CREATION_DATALAKE_CLUSTER,\n+    DELETION_DATALAKE_CLUSTER,\n+    STOPPAGE_DATALAKE_CLUSTER,\n+    RESIZING_DATALAKE_CLUSTER,\n+    MANUAL_REPAIR_DATALAKE_CLUSTER,\n+    SYNC_DATALAKE_CLUSTER,\n+    RETRY_DATALAKE_CLUSTER,\n+    INSTANCE_DELETION_DATALAKE_CLUSTER,\n+    MAINTENANCE_DATALAKE_CLUSTER,\n+    STARTING_DATALAKE_CLUSTER", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337990e2deb1460dd116fa26a5d558d8e68d58a3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1MDc5Nw==", "bodyText": "done", "url": "https://github.com/hortonworks/cloudbreak/pull/8153#discussion_r440150797", "createdAt": "2020-06-15T12:48:33Z", "author": {"login": "topolyai5"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "diffHunk": "@@ -1,5 +1,25 @@\n package com.sequenceiq.cloudbreak.audit.model;\n \n public enum AuditEventName {\n-    DATAHUB_CLUSTER_CREATION\n+    CREATION_DATAHUB_CLUSTER,\n+    DELETION_DATAHUB_CLUSTER,\n+    STOPPAGE_DATAHUB_CLUSTER,\n+    RESIZING_DATAHUB_CLUSTER,\n+    MANUAL_REPAIR_DATAHUB_CLUSTER,\n+    SYNC_DATAHUB_CLUSTER,\n+    RETRY_DATAHUB_CLUSTER,\n+    INSTANCE_DELETION_DATAHUB_CLUSTER,\n+    MAINTENANCE_DATAHUB_CLUSTER,\n+    STARTING_DATAHUB_CLUSTER,\n+\n+    CREATION_DATALAKE_CLUSTER,\n+    DELETION_DATALAKE_CLUSTER,\n+    STOPPAGE_DATALAKE_CLUSTER,\n+    RESIZING_DATALAKE_CLUSTER,\n+    MANUAL_REPAIR_DATALAKE_CLUSTER,\n+    SYNC_DATALAKE_CLUSTER,\n+    RETRY_DATALAKE_CLUSTER,\n+    INSTANCE_DELETION_DATALAKE_CLUSTER,\n+    MAINTENANCE_DATALAKE_CLUSTER,\n+    STARTING_DATALAKE_CLUSTER", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyMzA0NA=="}, "originalCommit": {"oid": "337990e2deb1460dd116fa26a5d558d8e68d58a3"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3250, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}