{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMTc1ODk0", "number": 8121, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo1ODozNVrOD-_9Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjoyODoxNlrOD_AY6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzg2MTg3OnYy", "diffSide": "RIGHT", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/model/SynchronizeOperationRequestBase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo1ODozNVrOGZcOnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjo1OTozNlrOGZd6FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzMDA3OQ==", "bodyText": "User sync operations can apply to all environments in an account. This field is used to filter the environments and may be empty to indicate all environments. The SynchronizeAllUsersRequest does contain an accountID, but it is optional for backwards compatibility to callers that do not include it.\nIn short, there is no reliable way to get the account id from these user sync requests. I've made a suggestion in the UserV1Controller for a possible approach to work around this until we get a chance to redo all the user sync APIs to include either an resource crn", "url": "https://github.com/hortonworks/cloudbreak/pull/8121#discussion_r429330079", "createdAt": "2020-05-22T15:58:35Z", "author": {"login": "handavid"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/model/SynchronizeOperationRequestBase.java", "diffHunk": "@@ -3,12 +3,16 @@\n import java.util.HashSet;\n import java.util.Set;\n \n+import com.sequenceiq.authorization.annotation.ResourceObjectField;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationVariableType;\n import com.sequenceiq.freeipa.api.v1.freeipa.user.doc.UserModelDescriptions;\n \n import io.swagger.annotations.ApiModelProperty;\n \n public class SynchronizeOperationRequestBase {\n     @ApiModelProperty(value = UserModelDescriptions.USERSYNC_ENVIRONMENT_CRNS)\n+    @ResourceObjectField(action = AuthorizationResourceAction.EDIT_ENVIRONMENT, variableType = AuthorizationVariableType.CRN_LIST)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab017eec156381c78945ae8550f8378e4e79f7f5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1MjExMA==", "bodyText": "yes. this is one of many reasons why I would like to re-do the user sync APIs once I get a chance", "url": "https://github.com/hortonworks/cloudbreak/pull/8121#discussion_r429352110", "createdAt": "2020-05-22T16:47:57Z", "author": {"login": "handavid"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/model/SynchronizeOperationRequestBase.java", "diffHunk": "@@ -3,12 +3,16 @@\n import java.util.HashSet;\n import java.util.Set;\n \n+import com.sequenceiq.authorization.annotation.ResourceObjectField;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationVariableType;\n import com.sequenceiq.freeipa.api.v1.freeipa.user.doc.UserModelDescriptions;\n \n import io.swagger.annotations.ApiModelProperty;\n \n public class SynchronizeOperationRequestBase {\n     @ApiModelProperty(value = UserModelDescriptions.USERSYNC_ENVIRONMENT_CRNS)\n+    @ResourceObjectField(action = AuthorizationResourceAction.EDIT_ENVIRONMENT, variableType = AuthorizationVariableType.CRN_LIST)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzMDA3OQ=="}, "originalCommit": {"oid": "ab017eec156381c78945ae8550f8378e4e79f7f5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NzU4OQ==", "bodyText": "sorry i removed my comment because it was only partly true, but yes, it would be nice if at a time we/you would be able to redesign this to make it clearer", "url": "https://github.com/hortonworks/cloudbreak/pull/8121#discussion_r429357589", "createdAt": "2020-05-22T16:59:36Z", "author": {"login": "horadla23"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/model/SynchronizeOperationRequestBase.java", "diffHunk": "@@ -3,12 +3,16 @@\n import java.util.HashSet;\n import java.util.Set;\n \n+import com.sequenceiq.authorization.annotation.ResourceObjectField;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationVariableType;\n import com.sequenceiq.freeipa.api.v1.freeipa.user.doc.UserModelDescriptions;\n \n import io.swagger.annotations.ApiModelProperty;\n \n public class SynchronizeOperationRequestBase {\n     @ApiModelProperty(value = UserModelDescriptions.USERSYNC_ENVIRONMENT_CRNS)\n+    @ResourceObjectField(action = AuthorizationResourceAction.EDIT_ENVIRONMENT, variableType = AuthorizationVariableType.CRN_LIST)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzMDA3OQ=="}, "originalCommit": {"oid": "ab017eec156381c78945ae8550f8378e4e79f7f5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzkzMjU4OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjoyODoxNlrOGZc80g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzowMToyNlrOGZd9Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0MTkwNg==", "bodyText": "see my comment on the SyncOperationRequestBase for why we cannot reliable obtain the account id from the request objects.\nCan we treat the override methods as a facade, calculate the account id, then do the permission check? It's ugly and hopefully temporary until we fix this API.\nI didn't see an appropriate annotation for getting taking the account in as a parameter directly so there would have to be other changes to add account to the AuthorizationVariableType\n@Override\npublic SyncOperationStatus synchronizeUser(SynchronizeUserRequest request) {\n    String userCrn = checkUserCrn();\n    String accountId = ThreadBasedUserCrnProvider.getAccountId();\n    return internalSynchronizeUser(accountId, request);\n}\n\n@Override\n@CheckPermissionByResource(type = ACCOUNT_ID)\npublic SyncOperationStatus synchronizeUser(@ResourceObject String accountId, String actorCrn, SynchronizeUserRequest request) {\n    LOGGER.debug(\"synchronizeUser() requested for user {} in account {}\", userCrn, accountId);\n    ...\n}", "url": "https://github.com/hortonworks/cloudbreak/pull/8121#discussion_r429341906", "createdAt": "2020-05-22T16:28:16Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -48,8 +50,8 @@\n     private OperationToSyncOperationStatus operationToSyncOperationStatus;\n \n     @Override\n-    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_WRITE)\n-    public SyncOperationStatus synchronizeUser(SynchronizeUserRequest request) {\n+    @CheckPermissionByResourceObject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab017eec156381c78945ae8550f8378e4e79f7f5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0ODA3Mg==", "bodyText": "ah. I mistyped.\nThe second method signature should not be Override and can be private.", "url": "https://github.com/hortonworks/cloudbreak/pull/8121#discussion_r429348072", "createdAt": "2020-05-22T16:41:53Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -48,8 +50,8 @@\n     private OperationToSyncOperationStatus operationToSyncOperationStatus;\n \n     @Override\n-    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_WRITE)\n-    public SyncOperationStatus synchronizeUser(SynchronizeUserRequest request) {\n+    @CheckPermissionByResourceObject", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0MTkwNg=="}, "originalCommit": {"oid": "ab017eec156381c78945ae8550f8378e4e79f7f5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0ODcyNQ==", "bodyText": "I did see the @CheckPermissionByAccount annotation, but doesn't that take the account from the ThreadBasedUserCrnProvider? If so, then that wouldn't work with internal actors.", "url": "https://github.com/hortonworks/cloudbreak/pull/8121#discussion_r429348725", "createdAt": "2020-05-22T16:43:21Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -48,8 +50,8 @@\n     private OperationToSyncOperationStatus operationToSyncOperationStatus;\n \n     @Override\n-    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_WRITE)\n-    public SyncOperationStatus synchronizeUser(SynchronizeUserRequest request) {\n+    @CheckPermissionByResourceObject", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0MTkwNg=="}, "originalCommit": {"oid": "ab017eec156381c78945ae8550f8378e4e79f7f5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NzkzMw==", "bodyText": "sorry i removed my comment here also, yes it gets accountid from ThreadBasedUserCrnProvider, in case of internal actors, it will be a problem, because TenantAwareParam can be applied for method parameter only.", "url": "https://github.com/hortonworks/cloudbreak/pull/8121#discussion_r429357933", "createdAt": "2020-05-22T17:00:28Z", "author": {"login": "horadla23"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -48,8 +50,8 @@\n     private OperationToSyncOperationStatus operationToSyncOperationStatus;\n \n     @Override\n-    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_WRITE)\n-    public SyncOperationStatus synchronizeUser(SynchronizeUserRequest request) {\n+    @CheckPermissionByResourceObject", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0MTkwNg=="}, "originalCommit": {"oid": "ab017eec156381c78945ae8550f8378e4e79f7f5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1ODM1NQ==", "bodyText": "next week i'll think about these very special api methods (sync, setPassword) because it is hard to apply authz framework for these api methods", "url": "https://github.com/hortonworks/cloudbreak/pull/8121#discussion_r429358355", "createdAt": "2020-05-22T17:01:26Z", "author": {"login": "horadla23"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -48,8 +50,8 @@\n     private OperationToSyncOperationStatus operationToSyncOperationStatus;\n \n     @Override\n-    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_WRITE)\n-    public SyncOperationStatus synchronizeUser(SynchronizeUserRequest request) {\n+    @CheckPermissionByResourceObject", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0MTkwNg=="}, "originalCommit": {"oid": "ab017eec156381c78945ae8550f8378e4e79f7f5"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3355, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}