{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2Nzg1OTk4", "number": 8027, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyMDo1MVrOD7s8fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyNDozM1rOD7tDww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTI4OTU2OnYy", "diffSide": "RIGHT", "path": "orchestrator-salt/src/main/java/com/sequenceiq/cloudbreak/orchestrator/salt/SaltOrchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyMDo1MVrOGUL9nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTozNTowNFrOGUMn4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMDcwMw==", "bodyText": "why do you stream the entryset if you need only the values?", "url": "https://github.com/hortonworks/cloudbreak/pull/8027#discussion_r423820703", "createdAt": "2020-05-12T15:20:51Z", "author": {"login": "lacikaaa"}, "path": "orchestrator-salt/src/main/java/com/sequenceiq/cloudbreak/orchestrator/salt/SaltOrchestrator.java", "diffHunk": "@@ -782,20 +783,38 @@ public void stopClusterManagerAgent(GatewayConfig gatewayConfig, Set<Node> nodes\n     public void leaveDomain(GatewayConfig gatewayConfig, Set<Node> allNodes, String roleToRemove, String roleToAdd, ExitCriteriaModel exitCriteriaModel)\n             throws CloudbreakOrchestratorFailedException {\n         try (SaltConnector sc = createSaltConnector(gatewayConfig)) {\n-            Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n-            runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            if (isChangingRolesNecessary(gatewayConfig, sc, roleToRemove)) {\n+                Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            }\n         } catch (Exception e) {\n             LOGGER.info(\"Error occurred during executing highstate (for recipes).\", e);\n             throw new CloudbreakOrchestratorFailedException(e);\n         }\n     }\n \n+    private boolean isChangingRolesNecessary(GatewayConfig gatewayConfig, SaltConnector sc, String role) {\n+        return getMemberRoles(gatewayConfig, sc).contains(role);\n+    }\n+\n+    private Set<String> getMemberRoles(GatewayConfig gatewayConfig, SaltConnector sc) {\n+        Map<String, JsonNode> roles = SaltStates.getGrains(sc, new HostList(List.of(gatewayConfig.getHostname())), \"roles\");\n+        return roles.entrySet().stream().findFirst()\n+                .map(Entry::getValue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ece2b7e7bad1e31304b681a68ca7122356c4f58"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzMTUyMw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/8027#discussion_r423831523", "createdAt": "2020-05-12T15:35:04Z", "author": {"login": "bbihari"}, "path": "orchestrator-salt/src/main/java/com/sequenceiq/cloudbreak/orchestrator/salt/SaltOrchestrator.java", "diffHunk": "@@ -782,20 +783,38 @@ public void stopClusterManagerAgent(GatewayConfig gatewayConfig, Set<Node> nodes\n     public void leaveDomain(GatewayConfig gatewayConfig, Set<Node> allNodes, String roleToRemove, String roleToAdd, ExitCriteriaModel exitCriteriaModel)\n             throws CloudbreakOrchestratorFailedException {\n         try (SaltConnector sc = createSaltConnector(gatewayConfig)) {\n-            Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n-            runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            if (isChangingRolesNecessary(gatewayConfig, sc, roleToRemove)) {\n+                Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            }\n         } catch (Exception e) {\n             LOGGER.info(\"Error occurred during executing highstate (for recipes).\", e);\n             throw new CloudbreakOrchestratorFailedException(e);\n         }\n     }\n \n+    private boolean isChangingRolesNecessary(GatewayConfig gatewayConfig, SaltConnector sc, String role) {\n+        return getMemberRoles(gatewayConfig, sc).contains(role);\n+    }\n+\n+    private Set<String> getMemberRoles(GatewayConfig gatewayConfig, SaltConnector sc) {\n+        Map<String, JsonNode> roles = SaltStates.getGrains(sc, new HostList(List.of(gatewayConfig.getHostname())), \"roles\");\n+        return roles.entrySet().stream().findFirst()\n+                .map(Entry::getValue)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMDcwMw=="}, "originalCommit": {"oid": "7ece2b7e7bad1e31304b681a68ca7122356c4f58"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTI5NTAxOnYy", "diffSide": "RIGHT", "path": "orchestrator-salt/src/main/java/com/sequenceiq/cloudbreak/orchestrator/salt/SaltOrchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyMTo1OFrOGUMBBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTozNzo0M1rOGUMvjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMTU3NQ==", "bodyText": "what happens here? what is l and i?", "url": "https://github.com/hortonworks/cloudbreak/pull/8027#discussion_r423821575", "createdAt": "2020-05-12T15:21:58Z", "author": {"login": "lacikaaa"}, "path": "orchestrator-salt/src/main/java/com/sequenceiq/cloudbreak/orchestrator/salt/SaltOrchestrator.java", "diffHunk": "@@ -782,20 +783,38 @@ public void stopClusterManagerAgent(GatewayConfig gatewayConfig, Set<Node> nodes\n     public void leaveDomain(GatewayConfig gatewayConfig, Set<Node> allNodes, String roleToRemove, String roleToAdd, ExitCriteriaModel exitCriteriaModel)\n             throws CloudbreakOrchestratorFailedException {\n         try (SaltConnector sc = createSaltConnector(gatewayConfig)) {\n-            Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n-            runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            if (isChangingRolesNecessary(gatewayConfig, sc, roleToRemove)) {\n+                Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            }\n         } catch (Exception e) {\n             LOGGER.info(\"Error occurred during executing highstate (for recipes).\", e);\n             throw new CloudbreakOrchestratorFailedException(e);\n         }\n     }\n \n+    private boolean isChangingRolesNecessary(GatewayConfig gatewayConfig, SaltConnector sc, String role) {\n+        return getMemberRoles(gatewayConfig, sc).contains(role);\n+    }\n+\n+    private Set<String> getMemberRoles(GatewayConfig gatewayConfig, SaltConnector sc) {\n+        Map<String, JsonNode> roles = SaltStates.getGrains(sc, new HostList(List.of(gatewayConfig.getHostname())), \"roles\");\n+        return roles.entrySet().stream().findFirst()\n+                .map(Entry::getValue)\n+                .map(JsonNode::elements)\n+                .map(IteratorUtils::toList)\n+                .map(l -> (Set<String>) l.stream()\n+                        .map(i -> ((JsonNode) i).asText())\n+                        .collect(Collectors.toSet())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ece2b7e7bad1e31304b681a68ca7122356c4f58"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzMzQ4NQ==", "bodyText": "I've 'fixed' it. Personally I like to use short variables in lambda. I think in this place it wasn't confusing.", "url": "https://github.com/hortonworks/cloudbreak/pull/8027#discussion_r423833485", "createdAt": "2020-05-12T15:37:43Z", "author": {"login": "bbihari"}, "path": "orchestrator-salt/src/main/java/com/sequenceiq/cloudbreak/orchestrator/salt/SaltOrchestrator.java", "diffHunk": "@@ -782,20 +783,38 @@ public void stopClusterManagerAgent(GatewayConfig gatewayConfig, Set<Node> nodes\n     public void leaveDomain(GatewayConfig gatewayConfig, Set<Node> allNodes, String roleToRemove, String roleToAdd, ExitCriteriaModel exitCriteriaModel)\n             throws CloudbreakOrchestratorFailedException {\n         try (SaltConnector sc = createSaltConnector(gatewayConfig)) {\n-            Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n-            runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            if (isChangingRolesNecessary(gatewayConfig, sc, roleToRemove)) {\n+                Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            }\n         } catch (Exception e) {\n             LOGGER.info(\"Error occurred during executing highstate (for recipes).\", e);\n             throw new CloudbreakOrchestratorFailedException(e);\n         }\n     }\n \n+    private boolean isChangingRolesNecessary(GatewayConfig gatewayConfig, SaltConnector sc, String role) {\n+        return getMemberRoles(gatewayConfig, sc).contains(role);\n+    }\n+\n+    private Set<String> getMemberRoles(GatewayConfig gatewayConfig, SaltConnector sc) {\n+        Map<String, JsonNode> roles = SaltStates.getGrains(sc, new HostList(List.of(gatewayConfig.getHostname())), \"roles\");\n+        return roles.entrySet().stream().findFirst()\n+                .map(Entry::getValue)\n+                .map(JsonNode::elements)\n+                .map(IteratorUtils::toList)\n+                .map(l -> (Set<String>) l.stream()\n+                        .map(i -> ((JsonNode) i).asText())\n+                        .collect(Collectors.toSet())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMTU3NQ=="}, "originalCommit": {"oid": "7ece2b7e7bad1e31304b681a68ca7122356c4f58"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTMwODE5OnYy", "diffSide": "RIGHT", "path": "orchestrator-salt/src/main/java/com/sequenceiq/cloudbreak/orchestrator/salt/SaltOrchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyNDozM1rOGUMJKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTozNDo0OFrOGUMnAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMzY1OA==", "bodyText": "it could be useful somewhere else, should we extract it? also some tests for this would be nice", "url": "https://github.com/hortonworks/cloudbreak/pull/8027#discussion_r423823658", "createdAt": "2020-05-12T15:24:33Z", "author": {"login": "lacikaaa"}, "path": "orchestrator-salt/src/main/java/com/sequenceiq/cloudbreak/orchestrator/salt/SaltOrchestrator.java", "diffHunk": "@@ -782,20 +783,38 @@ public void stopClusterManagerAgent(GatewayConfig gatewayConfig, Set<Node> nodes\n     public void leaveDomain(GatewayConfig gatewayConfig, Set<Node> allNodes, String roleToRemove, String roleToAdd, ExitCriteriaModel exitCriteriaModel)\n             throws CloudbreakOrchestratorFailedException {\n         try (SaltConnector sc = createSaltConnector(gatewayConfig)) {\n-            Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n-            runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            if (isChangingRolesNecessary(gatewayConfig, sc, roleToRemove)) {\n+                Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            }\n         } catch (Exception e) {\n             LOGGER.info(\"Error occurred during executing highstate (for recipes).\", e);\n             throw new CloudbreakOrchestratorFailedException(e);\n         }\n     }\n \n+    private boolean isChangingRolesNecessary(GatewayConfig gatewayConfig, SaltConnector sc, String role) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ece2b7e7bad1e31304b681a68ca7122356c4f58"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzMTI5OQ==", "bodyText": "As long as we don't use this function at least one other place, I wouldn't like to make it public or extract it", "url": "https://github.com/hortonworks/cloudbreak/pull/8027#discussion_r423831299", "createdAt": "2020-05-12T15:34:48Z", "author": {"login": "bbihari"}, "path": "orchestrator-salt/src/main/java/com/sequenceiq/cloudbreak/orchestrator/salt/SaltOrchestrator.java", "diffHunk": "@@ -782,20 +783,38 @@ public void stopClusterManagerAgent(GatewayConfig gatewayConfig, Set<Node> nodes\n     public void leaveDomain(GatewayConfig gatewayConfig, Set<Node> allNodes, String roleToRemove, String roleToAdd, ExitCriteriaModel exitCriteriaModel)\n             throws CloudbreakOrchestratorFailedException {\n         try (SaltConnector sc = createSaltConnector(gatewayConfig)) {\n-            Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove), exitCriteriaModel, maxRetryLeave,\n-                    exitCriteria);\n-            Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n-            saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n-            runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            if (isChangingRolesNecessary(gatewayConfig, sc, roleToRemove)) {\n+                Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"roles\", roleToAdd),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                saltCommandRunner.runSaltCommand(sc, new GrainRemoveRunner(targetHostnames, allNodes, \"roles\", roleToRemove),\n+                        exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                Set<String> allHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n+                saltCommandRunner.runSaltCommand(sc, new SyncAllRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, exitCriteria);\n+                runNewService(sc, new HighStateRunner(allHostnames, allNodes), exitCriteriaModel, maxRetryLeave, true);\n+            }\n         } catch (Exception e) {\n             LOGGER.info(\"Error occurred during executing highstate (for recipes).\", e);\n             throw new CloudbreakOrchestratorFailedException(e);\n         }\n     }\n \n+    private boolean isChangingRolesNecessary(GatewayConfig gatewayConfig, SaltConnector sc, String role) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMzY1OA=="}, "originalCommit": {"oid": "7ece2b7e7bad1e31304b681a68ca7122356c4f58"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2447, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}