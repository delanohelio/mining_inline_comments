{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNDE1MDI3", "number": 7201, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxMjozOVrODc525g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxODoyMVrODc59Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM0NjYyOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPublicKeyConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxMjozOVrOFlMuhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxMjozOVrOFlMuhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDE1MQ==", "bodyText": "if the credential is access + secretkey then what happens?", "url": "https://github.com/hortonworks/cloudbreak/pull/7201#discussion_r374550151", "createdAt": "2020-02-04T09:12:39Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPublicKeyConnector.java", "diffHunk": "@@ -64,6 +62,21 @@ public void unregister(PublicKeyUnregisterRequest request) {\n         }\n     }\n \n+    @Override\n+    public boolean exists(PublicKeyDescribeRequest request) {\n+        LOGGER.debug(\"Describe public key {} in {} region on AWS\", request.getPublicKeyId(), request.getRegion());\n+        AwsCredentialView awsCredential = new AwsCredentialView(request.getCredential());\n+        try {\n+            AmazonEC2Client client = awsClient.createAccess(awsCredential, request.getRegion());\n+            return exists(client, request.getPublicKeyId());\n+        } catch (Exception e) {\n+            String errorMessage = String.format(\"Failed to describe public key [roleArn:'%s', region: '%s'], detailed message: %s\",\n+                    awsCredential.getRoleArn(), request.getRegion(), e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d069f2b6177ce007b306b88d27f99275e141591f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM1NzMwOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNjoyM1rOFlM1Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzo0MTowN1rOFlUWYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MTg3OQ==", "bodyText": "how about if we ccreate a method in environement and then calling like environment.isEnvironmentMAnagedKEy() ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7201#discussion_r374551879", "createdAt": "2020-02-04T09:16:23Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java", "diffHunk": "@@ -135,10 +140,28 @@ private void editDescriptionIfChanged(Environment environment, EnvironmentEditDt\n         }\n     }\n \n-    private void editAuthenticationIfChanged(EnvironmentEditDto editDto, Environment environment) {\n+    @VisibleForTesting\n+    void editAuthenticationIfChanged(EnvironmentEditDto editDto, Environment environment) {\n         AuthenticationDto authenticationDto = editDto.getAuthentication();\n         if (authenticationDto != null) {\n+            EnvironmentValidatorService validatorService = environmentService.getValidatorService();\n+            ValidationResult validationResult = validatorService.validateAuthenticationModification(editDto, environment);\n+            if (validationResult.hasError()) {\n+                throw new BadRequestException(validationResult.getFormattedErrors());\n+            }\n+            String oldSshKeyIdForDeletion = null;\n+            String oldSshKeyId = environment.getAuthentication().getPublicKeyId();\n+            if (environment.getAuthentication().isManagedKey()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d069f2b6177ce007b306b88d27f99275e141591f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3NTA0Mw==", "bodyText": "the method name does not describe well the functionality.", "url": "https://github.com/hortonworks/cloudbreak/pull/7201#discussion_r374675043", "createdAt": "2020-02-04T13:41:07Z", "author": {"login": "topolyai5"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java", "diffHunk": "@@ -135,10 +140,28 @@ private void editDescriptionIfChanged(Environment environment, EnvironmentEditDt\n         }\n     }\n \n-    private void editAuthenticationIfChanged(EnvironmentEditDto editDto, Environment environment) {\n+    @VisibleForTesting\n+    void editAuthenticationIfChanged(EnvironmentEditDto editDto, Environment environment) {\n         AuthenticationDto authenticationDto = editDto.getAuthentication();\n         if (authenticationDto != null) {\n+            EnvironmentValidatorService validatorService = environmentService.getValidatorService();\n+            ValidationResult validationResult = validatorService.validateAuthenticationModification(editDto, environment);\n+            if (validationResult.hasError()) {\n+                throw new BadRequestException(validationResult.getFormattedErrors());\n+            }\n+            String oldSshKeyIdForDeletion = null;\n+            String oldSshKeyId = environment.getAuthentication().getPublicKeyId();\n+            if (environment.getAuthentication().isManagedKey()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MTg3OQ=="}, "originalCommit": {"oid": "d069f2b6177ce007b306b88d27f99275e141591f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM2MTQwOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/EnvironmentValidatorService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNzo1MlrOFlM33Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxNzo1MlrOFlM33Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MjU0MQ==", "bodyText": "can we somehow do this more dynamic so the the cloudconnector giving us this info ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7201#discussion_r374552541", "createdAt": "2020-02-04T09:17:52Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/EnvironmentValidatorService.java", "diffHunk": "@@ -113,6 +118,28 @@ public ValidationResult validateSecurityGroups(EnvironmentEditDto editDto, Envir\n \n     }\n \n+    public ValidationResult validateAuthenticationModification(EnvironmentEditDto editDto, Environment environment) {\n+        ValidationResult.ValidationResultBuilder validationResultBuilder = ValidationResult.builder();\n+\n+        AuthenticationDto authenticationDto = editDto.getAuthentication();\n+        String publicKeyId = authenticationDto.getPublicKeyId();\n+        if (!environment.getCloudPlatform().equals(CloudPlatform.AWS.name()) && StringUtils.isNotEmpty(publicKeyId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d069f2b6177ce007b306b88d27f99275e141591f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM2Mjk0OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/EnvironmentValidatorService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxODoyMVrOFlM41Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxODoyMVrOFlM41Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1Mjc4OQ==", "bodyText": "I think it should reference for the json name", "url": "https://github.com/hortonworks/cloudbreak/pull/7201#discussion_r374552789", "createdAt": "2020-02-04T09:18:21Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/EnvironmentValidatorService.java", "diffHunk": "@@ -113,6 +118,28 @@ public ValidationResult validateSecurityGroups(EnvironmentEditDto editDto, Envir\n \n     }\n \n+    public ValidationResult validateAuthenticationModification(EnvironmentEditDto editDto, Environment environment) {\n+        ValidationResult.ValidationResultBuilder validationResultBuilder = ValidationResult.builder();\n+\n+        AuthenticationDto authenticationDto = editDto.getAuthentication();\n+        String publicKeyId = authenticationDto.getPublicKeyId();\n+        if (!environment.getCloudPlatform().equals(CloudPlatform.AWS.name()) && StringUtils.isNotEmpty(publicKeyId)) {\n+            validationResultBuilder.error(\"The change of public key id is not supported on \" + environment.getCloudPlatform());\n+        } else {\n+            String publicKey = authenticationDto.getPublicKey();\n+            if (StringUtils.isNotEmpty(publicKeyId) && StringUtils.isNotEmpty(publicKey)) {\n+                validationResultBuilder.error(\"You should define either public-key or public-key-id only\");\n+            }\n+            if (StringUtils.isEmpty(publicKeyId) && StringUtils.isEmpty(publicKey)) {\n+                validationResultBuilder.error(\"You should define public-key or public-key-id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d069f2b6177ce007b306b88d27f99275e141591f"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2898, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}