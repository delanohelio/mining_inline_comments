{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MDE4Mzcw", "number": 7370, "title": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization", "bodyText": "", "createdAt": "2020-02-24T14:25:14Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7370", "merged": true, "mergeCommit": {"oid": "197f3dec919cc37d20a782d3ca690de5070942c7"}, "closed": true, "closedAt": "2020-03-02T15:44:59Z", "author": {"login": "horadla23"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHfDj_ABqjMwNjU3NTc0MjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJvL1gAFqTM2NzI3Mjk1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "740f8e83da6c2288f31dbf69088282d827e0213e", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/740f8e83da6c2288f31dbf69088282d827e0213e", "committedDate": "2020-02-24T14:24:01Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "670ce4eb740a605ef4d95e9aae858a7b1fe17953", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/670ce4eb740a605ef4d95e9aae858a7b1fe17953", "committedDate": "2020-02-24T15:14:12Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "670ce4eb740a605ef4d95e9aae858a7b1fe17953", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/670ce4eb740a605ef4d95e9aae858a7b1fe17953", "committedDate": "2020-02-24T15:14:12Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "555a8c223f0bb85375fb2036fe993af75db3e58d", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/555a8c223f0bb85375fb2036fe993af75db3e58d", "committedDate": "2020-02-24T15:48:50Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "555a8c223f0bb85375fb2036fe993af75db3e58d", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/555a8c223f0bb85375fb2036fe993af75db3e58d", "committedDate": "2020-02-24T15:48:50Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "28257e17e5c2e6dfb760486289ca86691f5fdde7", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/28257e17e5c2e6dfb760486289ca86691f5fdde7", "committedDate": "2020-02-25T07:38:44Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28257e17e5c2e6dfb760486289ca86691f5fdde7", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/28257e17e5c2e6dfb760486289ca86691f5fdde7", "committedDate": "2020-02-25T07:38:44Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "51b563209d65561046b33315dd401c43d5cd1be6", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/51b563209d65561046b33315dd401c43d5cd1be6", "committedDate": "2020-02-25T08:53:26Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51b563209d65561046b33315dd401c43d5cd1be6", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/51b563209d65561046b33315dd401c43d5cd1be6", "committedDate": "2020-02-25T08:53:26Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "1951203eb20c8cd545f676a85f426577396076f8", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/1951203eb20c8cd545f676a85f426577396076f8", "committedDate": "2020-02-25T09:01:47Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1951203eb20c8cd545f676a85f426577396076f8", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/1951203eb20c8cd545f676a85f426577396076f8", "committedDate": "2020-02-25T09:01:47Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "11fc5e7b70f7bdd1ba25b9ef524554ef9acb034b", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/11fc5e7b70f7bdd1ba25b9ef524554ef9acb034b", "committedDate": "2020-02-25T14:54:32Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11fc5e7b70f7bdd1ba25b9ef524554ef9acb034b", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/11fc5e7b70f7bdd1ba25b9ef524554ef9acb034b", "committedDate": "2020-02-25T14:54:32Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "c21419fe76e39c839b7603d1ac693d4b26a27787", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c21419fe76e39c839b7603d1ac693d4b26a27787", "committedDate": "2020-02-25T14:59:57Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c21419fe76e39c839b7603d1ac693d4b26a27787", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c21419fe76e39c839b7603d1ac693d4b26a27787", "committedDate": "2020-02-25T14:59:57Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "a204606c7c23d813688d0db3f2291fea8fd2b019", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a204606c7c23d813688d0db3f2291fea8fd2b019", "committedDate": "2020-02-25T15:36:20Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a204606c7c23d813688d0db3f2291fea8fd2b019", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a204606c7c23d813688d0db3f2291fea8fd2b019", "committedDate": "2020-02-25T15:36:20Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "174ec2a6464167d23772f0c09d53eb957555ce44", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/174ec2a6464167d23772f0c09d53eb957555ce44", "committedDate": "2020-02-26T09:08:14Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "174ec2a6464167d23772f0c09d53eb957555ce44", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/174ec2a6464167d23772f0c09d53eb957555ce44", "committedDate": "2020-02-26T09:08:14Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "8a56df290c915e569abdbcf381520788a6029682", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8a56df290c915e569abdbcf381520788a6029682", "committedDate": "2020-02-26T11:55:11Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a56df290c915e569abdbcf381520788a6029682", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8a56df290c915e569abdbcf381520788a6029682", "committedDate": "2020-02-26T11:55:11Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "53256b03399fce4565c44d3f91c796fe16a78caa", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/53256b03399fce4565c44d3f91c796fe16a78caa", "committedDate": "2020-02-26T12:52:48Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53256b03399fce4565c44d3f91c796fe16a78caa", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/53256b03399fce4565c44d3f91c796fe16a78caa", "committedDate": "2020-02-26T12:52:48Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "cc8d501c3b37c1edc4c7034decb9511f897ad979", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/cc8d501c3b37c1edc4c7034decb9511f897ad979", "committedDate": "2020-02-26T13:53:56Z", "message": "api and resource based authz"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc8d501c3b37c1edc4c7034decb9511f897ad979", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/cc8d501c3b37c1edc4c7034decb9511f897ad979", "committedDate": "2020-02-26T13:53:56Z", "message": "api and resource based authz"}, "afterCommit": {"oid": "2483078740561caa76c214f321a86f1f9394b522", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2483078740561caa76c214f321a86f1f9394b522", "committedDate": "2020-02-27T09:25:19Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2483078740561caa76c214f321a86f1f9394b522", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2483078740561caa76c214f321a86f1f9394b522", "committedDate": "2020-02-27T09:25:19Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}, "afterCommit": {"oid": "bd4d960bcb989f5b2e0fa70e4cd98234694a5374", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/bd4d960bcb989f5b2e0fa70e4cd98234694a5374", "committedDate": "2020-02-28T10:17:22Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd4d960bcb989f5b2e0fa70e4cd98234694a5374", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/bd4d960bcb989f5b2e0fa70e4cd98234694a5374", "committedDate": "2020-02-28T10:17:22Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}, "afterCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120", "committedDate": "2020-02-28T10:26:42Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MjE2NDE2", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#pullrequestreview-366216416", "createdAt": "2020-02-28T08:04:36Z", "commit": {"oid": "2483078740561caa76c214f321a86f1f9394b522"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowNDozN1rOFvsbEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjowMzozM1rOFvyx_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NTIxOQ==", "bodyText": "Feels good!", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385555219", "createdAt": "2020-02-28T08:04:37Z", "author": {"login": "lnardai"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -308,23 +308,19 @@ public boolean checkRight(String actorCrn, String userCrn, String right, String\n             LOGGER.info(\"InternalCrn, allow right {} for user {}!\", right, userCrn);\n             return true;\n         }\n-        if (isReadRight(right)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2483078740561caa76c214f321a86f1f9394b522"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzNjU2NQ==", "bodyText": "Logger not used.", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385636565", "createdAt": "2020-02-28T11:06:48Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/DisabledPermissionChecker.java", "diffHunk": "@@ -6,21 +6,25 @@\n \n import org.aspectj.lang.ProceedingJoinPoint;\n import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n-import com.sequenceiq.authorization.repository.DisableCheckPermissions;\n-import com.sequenceiq.authorization.resource.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n \n @Component\n public class DisabledPermissionChecker implements PermissionChecker<DisableCheckPermissions> {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(DisabledPermissionChecker.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzODI3MQ==", "bodyText": "This is what we can't do in batch operations as of now right?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385638271", "createdAt": "2020-02-28T11:10:44Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ResourceCrnListPermissionChecker.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.sequenceiq.authorization.service;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+\n+import javax.inject.Inject;\n+\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.annotation.CheckPermissionByResourceCrnList;\n+import com.sequenceiq.authorization.annotation.ResourceCrnList;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+\n+@Component\n+public class ResourceCrnListPermissionChecker implements PermissionChecker<CheckPermissionByResourceCrnList> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceCrnListPermissionChecker.class);\n+\n+    @Inject\n+    private CommonPermissionCheckingUtils commonPermissionCheckingUtils;\n+\n+    @Override\n+    public <T extends Annotation> Object checkPermissions(T rawMethodAnnotation, AuthorizationResourceType resourceType, String userCrn,\n+            ProceedingJoinPoint proceedingJoinPoint, MethodSignature methodSignature, long startTime) {\n+        CheckPermissionByResourceCrnList methodAnnotation = (CheckPermissionByResourceCrnList) rawMethodAnnotation;\n+        Collection<String> resourceCrns = commonPermissionCheckingUtils\n+                .getParameter(proceedingJoinPoint, methodSignature, ResourceCrnList.class, Collection.class);\n+        if (!resourceCrns.isEmpty()) {\n+            AuthorizationResourceAction action = methodAnnotation.action();\n+            resourceCrns.stream().forEach(resourceCrn ->\n+                    commonPermissionCheckingUtils.checkPermissionForUserOnResource(resourceType, action, userCrn, resourceCrn));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0MzMzNA==", "bodyText": "What happens if there is multiple ResourceCrn specified? Or that is not possible in that context?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385643334", "createdAt": "2020-02-28T11:22:46Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ResourceCrnPermissionChecker.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.sequenceiq.authorization.service;\n+\n+import java.lang.annotation.Annotation;\n+\n+import javax.inject.Inject;\n+\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.annotation.CheckPermissionByResourceCrn;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.cloudbreak.auth.security.internal.ResourceCrn;\n+\n+@Component\n+public class ResourceCrnPermissionChecker implements PermissionChecker<CheckPermissionByResourceCrn> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceCrnPermissionChecker.class);\n+\n+    @Inject\n+    private CommonPermissionCheckingUtils commonPermissionCheckingUtils;\n+\n+    @Override\n+    public <T extends Annotation> Object checkPermissions(T rawMethodAnnotation, AuthorizationResourceType resourceType, String userCrn,\n+            ProceedingJoinPoint proceedingJoinPoint, MethodSignature methodSignature, long startTime) {\n+        CheckPermissionByResourceCrn methodAnnotation = (CheckPermissionByResourceCrn) rawMethodAnnotation;\n+        String resourceCrn = commonPermissionCheckingUtils.getParameter(proceedingJoinPoint, methodSignature, ResourceCrn.class, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0NDM2MA==", "bodyText": "Maybe we should enhance the error message here mention the Management Console Admin role here as well, or just tell a customer that he need's to get higher account level permissions for these actions.", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385644360", "createdAt": "2020-02-28T11:25:07Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/UmsAuthorizationService.java", "diffHunk": "@@ -26,35 +26,56 @@\n     @Inject\n     private GrpcUmsClient umsClient;\n \n-    public void checkRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action, String unauthorizedMessage) {\n-        if (!umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resource, action), getRequestId())) {\n+    // ACCOUNT LEVEL\n+\n+    public void checkRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action) {\n+        String right = RightUtils.getRight(resourceType, action);\n+        String unauthorizedMessage = String.format(\"You have no right to perform %s. This requires one of these roles: %s. \"\n+                        + \"You can request access through IAM service from an administrator.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0NjIyMA==", "bodyText": "I saw multiple of these comments.\nMight be better to split the 2 implementation into 2 different classes.\nOne does the account Level AuthZ and one the Resource Level.", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385646220", "createdAt": "2020-02-28T11:29:51Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/UmsAuthorizationService.java", "diffHunk": "@@ -26,35 +26,56 @@\n     @Inject\n     private GrpcUmsClient umsClient;\n \n-    public void checkRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action, String unauthorizedMessage) {\n-        if (!umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resource, action), getRequestId())) {\n+    // ACCOUNT LEVEL\n+\n+    public void checkRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action) {\n+        String right = RightUtils.getRight(resourceType, action);\n+        String unauthorizedMessage = String.format(\"You have no right to perform %s. This requires one of these roles: %s. \"\n+                        + \"You can request access through IAM service from an administrator.\",\n+                right, \"PowerUser\");\n+        checkRightOfUser(userCrn, resourceType, action, unauthorizedMessage);\n+    }\n+\n+    public Boolean hasRightOfUser(String userCrn, String resourceType, String action) {\n+        Optional<AuthorizationResourceType> resourceEnum = AuthorizationResourceType.getByName(resourceType);\n+        Optional<AuthorizationResourceAction> actionEnum = AuthorizationResourceAction.getByName(action);\n+        if (!resourceEnum.isPresent() || !actionEnum.isPresent()) {\n+            throw new BadRequestException(\"Resource or action cannot be found by request!\");\n+        }\n+        if (!hasRightOfUser(userCrn, resourceEnum.get(), actionEnum.get())) {\n+            return Boolean.FALSE;\n+        }\n+        return Boolean.TRUE;\n+    }\n+\n+    private void checkRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action, String unauthorizedMessage) {\n+        if (!hasRightOfUser(userCrn, resourceType, action)) {\n             LOGGER.error(unauthorizedMessage);\n             throw new AccessDeniedException(unauthorizedMessage);\n         }\n     }\n \n-    public boolean hasRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action) {\n-        return umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resource, action), getRequestId());\n+    private boolean hasRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action) {\n+        return umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resourceType, action), getRequestId());\n     }\n \n-    public void checkRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action) {\n+    // RESOURCE LEVEL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1MTE4MA==", "bodyText": "rootProject.name is twice, might be a copy paste error?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385651180", "createdAt": "2020-02-28T11:42:00Z", "author": {"login": "lnardai"}, "path": "settings.gradle", "diffHunk": "@@ -50,8 +50,8 @@ include 'client-cm'\n include 'freeipa-client'\n include 'usage-collection'\n include 'cluster-proxy'\n-include 'authorization'\n-include 'workspace-authorization-api'\n+\n+rootProject.name = 'cloudbreak'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1MzU5Mg==", "bodyText": "Interesting...", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385653592", "createdAt": "2020-02-28T11:48:16Z", "author": {"login": "lnardai"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/StackService.java", "diffHunk": "@@ -657,7 +669,6 @@ public Stack save(Stack stack) {\n     }\n \n     public FlowIdentifier updateImage(Long stackId, Long workspaceId, String imageId, String imageCatalogName, String imageCatalogUrl, User user) {\n-        permissionCheckingUtils.checkPermissionForUser(AuthorizationResource.DATAHUB, ResourceAction.WRITE, user.getUserCrn());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NTI0Mw==", "bodyText": "Would't these be better on the Endpoint?\nI'm fine with this, as the Endpoint is already overLoaded with annotations, just asking.", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385655243", "createdAt": "2020-02-28T11:52:44Z", "author": {"login": "lnardai"}, "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "diffHunk": "@@ -90,14 +99,16 @@ public StackViewV4Responses list(String environmentName, String environmentCrn)\n     }\n \n     @Override\n-    public StackV4Response post(@Valid DistroXV1Request request) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NjEyMQ==", "bodyText": "Shouldn't this be @ResourceCrn? Also is the annotation at the correct place?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385656121", "createdAt": "2020-02-28T11:55:04Z", "author": {"login": "lnardai"}, "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "diffHunk": "@@ -158,150 +173,172 @@ private void multideleteByCrn(DistroXMultiDeleteV1Request multiDeleteRequest, Bo\n     }\n \n     @Override\n-    public void syncByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByName(@ResourceName String name) {\n         stackOperations.sync(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void syncByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByCrn(@ResourceCrn String crn) {\n         stackOperations.sync(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void retryByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByName(@ResourceName String name) {\n         stackOperations.retry(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public List<RetryableFlowResponse> listRetryableFlows(String name) {\n+    @CheckPermissionByAccount\n+    public List<RetryableFlowResponse> listRetryableFlows(@ResourceName String name) {\n         List<RetryableFlow> retryableFlows = stackOperations.getRetryableFlows(name, workspaceService.getForCurrentUser().getId());\n         return retryableFlows.stream()\n                 .map(retryable -> Builder.builder().setName(retryable.getName()).setFailDate(retryable.getFailDate()).build())\n                 .collect(Collectors.toList());\n     }\n \n     @Override\n-    public void retryByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByCrn(@ResourceCrn String crn) {\n         stackOperations.retry(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStopByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByName(@ResourceName String name) {\n         stackOperations.putStop(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n-\n     }\n \n     @Override\n-    public void putStopByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrn(@ResourceCrn String crn) {\n         stackOperations.putStop(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStopByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStopByName);\n     }\n \n     @Override\n-    public void putStopByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStopByCrn);\n     }\n \n     @Override\n-    public void putStartByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByName(@ResourceName String name) {\n         stackOperations.putStart(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStartByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrn(@ResourceCrn String crn) {\n         stackOperations.putStart(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStartByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStartByName);\n     }\n \n     @Override\n-    public void putStartByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStartByCrn);\n     }\n \n     @Override\n-    public void putScalingByName(String name, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByName(@ResourceName String name, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByName(name).getId());\n         stackOperations.putScaling(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void putScalingByCrn(String crn, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByCrn(@ResourceCrn String crn, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByCrn(crn).getId());\n         stackOperations.putScaling(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void repairClusterByName(String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByName(@ResourceName String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public void repairClusterByCrn(String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByCrn(@ResourceCrn String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofCrn(crn),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @Valid DistroXV1Request stackRequest) {\n+    @CheckPermissionByAccount\n+    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @ResourceName @Valid DistroXV1Request stackRequest) {\n         return stackOperations.postStackForBlueprint(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId(),\n                 stackRequestConverter.convert(stackRequest));\n     }\n \n     @Override\n-    public GeneratedBlueprintV4Response postStackForBlueprintByCrn(String crn, @Valid DistroXV1Request stackRequest) {\n+    @CheckPermissionByAccount\n+    public GeneratedBlueprintV4Response postStackForBlueprintByCrn(String crn, @ResourceName @Valid DistroXV1Request stackRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NjYzNA==", "bodyText": "Same here, is the annotation at the correct place?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385656634", "createdAt": "2020-02-28T11:56:19Z", "author": {"login": "lnardai"}, "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "diffHunk": "@@ -158,150 +173,172 @@ private void multideleteByCrn(DistroXMultiDeleteV1Request multiDeleteRequest, Bo\n     }\n \n     @Override\n-    public void syncByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByName(@ResourceName String name) {\n         stackOperations.sync(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void syncByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByCrn(@ResourceCrn String crn) {\n         stackOperations.sync(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void retryByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByName(@ResourceName String name) {\n         stackOperations.retry(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public List<RetryableFlowResponse> listRetryableFlows(String name) {\n+    @CheckPermissionByAccount\n+    public List<RetryableFlowResponse> listRetryableFlows(@ResourceName String name) {\n         List<RetryableFlow> retryableFlows = stackOperations.getRetryableFlows(name, workspaceService.getForCurrentUser().getId());\n         return retryableFlows.stream()\n                 .map(retryable -> Builder.builder().setName(retryable.getName()).setFailDate(retryable.getFailDate()).build())\n                 .collect(Collectors.toList());\n     }\n \n     @Override\n-    public void retryByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByCrn(@ResourceCrn String crn) {\n         stackOperations.retry(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStopByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByName(@ResourceName String name) {\n         stackOperations.putStop(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n-\n     }\n \n     @Override\n-    public void putStopByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrn(@ResourceCrn String crn) {\n         stackOperations.putStop(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStopByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStopByName);\n     }\n \n     @Override\n-    public void putStopByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStopByCrn);\n     }\n \n     @Override\n-    public void putStartByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByName(@ResourceName String name) {\n         stackOperations.putStart(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStartByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrn(@ResourceCrn String crn) {\n         stackOperations.putStart(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStartByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStartByName);\n     }\n \n     @Override\n-    public void putStartByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStartByCrn);\n     }\n \n     @Override\n-    public void putScalingByName(String name, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByName(@ResourceName String name, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByName(name).getId());\n         stackOperations.putScaling(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void putScalingByCrn(String crn, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByCrn(@ResourceCrn String crn, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByCrn(crn).getId());\n         stackOperations.putScaling(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void repairClusterByName(String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByName(@ResourceName String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public void repairClusterByCrn(String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByCrn(@ResourceCrn String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofCrn(crn),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @Valid DistroXV1Request stackRequest) {\n+    @CheckPermissionByAccount\n+    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @ResourceName @Valid DistroXV1Request stackRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1OTM5MA==", "bodyText": "This is an environment CRN not a Datalake CRN.\nWould this API call even work?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385659390", "createdAt": "2020-02-28T12:03:33Z", "author": {"login": "lnardai"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/controller/sdx/SdxController.java", "diffHunk": "@@ -77,33 +86,38 @@ public SdxClusterResponse create(@ValidStackNameFormat @ValidStackNameLength Str\n     }\n \n     @Override\n-    public FlowIdentifier delete(String name, Boolean forced) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public FlowIdentifier delete(@ResourceName String name, Boolean forced) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         return sdxService.deleteSdx(userCrn, name, forced);\n     }\n \n     @Override\n-    public FlowIdentifier deleteByCrn(String clusterCrn, Boolean forced) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public FlowIdentifier deleteByCrn(@ResourceCrn String clusterCrn, Boolean forced) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         return sdxService.deleteSdxByClusterCrn(userCrn, clusterCrn, forced);\n     }\n \n     @Override\n-    public SdxClusterResponse get(String name) {\n+    @CheckPermissionByAccount\n+    public SdxClusterResponse get(@ResourceName String name) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         SdxCluster sdxCluster = sdxService.getSdxByNameInAccount(userCrn, name);\n         return sdxClusterConverter.sdxClusterToResponse(sdxCluster);\n     }\n \n     @Override\n-    public SdxClusterResponse getByCrn(String clusterCrn) {\n+    @CheckPermissionByAccount\n+    public SdxClusterResponse getByCrn(@ResourceCrn String clusterCrn) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         SdxCluster sdxCluster = sdxService.getByCrn(userCrn, clusterCrn);\n         return sdxClusterConverter.sdxClusterToResponse(sdxCluster);\n     }\n \n     @Override\n-    public List<SdxClusterResponse> getByEnvCrn(@ValidCrn String envCrn) {\n+    @CheckPermissionByAccount\n+    public List<SdxClusterResponse> getByEnvCrn(@ResourceCrn @ValidCrn String envCrn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MzY5MzIw", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#pullrequestreview-366369320", "createdAt": "2020-02-28T12:41:22Z", "commit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120", "committedDate": "2020-02-28T10:26:42Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}, "afterCommit": {"oid": "0d876e7f57d51962aaa997cef85cbec650c3cc98", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0d876e7f57d51962aaa997cef85cbec650c3cc98", "committedDate": "2020-02-28T14:39:35Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d876e7f57d51962aaa997cef85cbec650c3cc98", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0d876e7f57d51962aaa997cef85cbec650c3cc98", "committedDate": "2020-02-28T14:39:35Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}, "afterCommit": {"oid": "d64aeb6db1352a78b0df23966db7296153f52558", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d64aeb6db1352a78b0df23966db7296153f52558", "committedDate": "2020-02-28T14:55:52Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d64aeb6db1352a78b0df23966db7296153f52558", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d64aeb6db1352a78b0df23966db7296153f52558", "committedDate": "2020-02-28T14:55:52Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}, "afterCommit": {"oid": "c2982cba7a66696c4763e4e490b9a7fee55f0c5f", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c2982cba7a66696c4763e4e490b9a7fee55f0c5f", "committedDate": "2020-02-28T15:16:01Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2982cba7a66696c4763e4e490b9a7fee55f0c5f", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c2982cba7a66696c4763e4e490b9a7fee55f0c5f", "committedDate": "2020-02-28T15:16:01Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}, "afterCommit": {"oid": "62b1e5817c7eac9d70cec2e10be91718bb159fba", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/62b1e5817c7eac9d70cec2e10be91718bb159fba", "committedDate": "2020-02-28T15:46:36Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62b1e5817c7eac9d70cec2e10be91718bb159fba", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/62b1e5817c7eac9d70cec2e10be91718bb159fba", "committedDate": "2020-02-28T15:46:36Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}, "afterCommit": {"oid": "4ec6c3be0ac6f7848bb6495af532342b51a039be", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4ec6c3be0ac6f7848bb6495af532342b51a039be", "committedDate": "2020-02-28T17:23:27Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b74c197314dd0a94575fec91167a61b5cb8cffe1", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/b74c197314dd0a94575fec91167a61b5cb8cffe1", "committedDate": "2020-03-02T08:45:38Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ec6c3be0ac6f7848bb6495af532342b51a039be", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4ec6c3be0ac6f7848bb6495af532342b51a039be", "committedDate": "2020-02-28T17:23:27Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}, "afterCommit": {"oid": "b74c197314dd0a94575fec91167a61b5cb8cffe1", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/b74c197314dd0a94575fec91167a61b5cb8cffe1", "committedDate": "2020-03-02T08:45:38Z", "message": "CB-5582 CB-5583 AuthZ on API, resource based credential authorization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjcyOTUz", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#pullrequestreview-367272953", "createdAt": "2020-03-02T15:09:52Z", "commit": {"oid": "b74c197314dd0a94575fec91167a61b5cb8cffe1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2587, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}