{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjIzNzU1", "number": 7307, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozMzowOVrODg3EqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozNjowMVrODg3IFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgzMzM2OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozMzowOVrOFrTM2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjowNToyOVrOFrULGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NzY3Mw==", "bodyText": "why do we need this ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7307#discussion_r380947673", "createdAt": "2020-02-18T21:33:09Z", "author": {"login": "doktoric"}, "path": "build.gradle", "diffHunk": "@@ -19,6 +19,15 @@ buildscript {\n plugins {\n   id 'org.ajoberstar.grgit' version '2.1.0'\n   id \"com.github.spotbugs\" version \"2.0.0\"\n+  id \"org.sonarqube\" version \"2.8\"\n+}\n+\n+sonarqube {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e69bf074a9bd60e4862ed1785f74225b031351"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2MzYwOQ==", "bodyText": "Surely for nothing, I\u2019ve been playing around with this tool on this branch and I forgot to delete this. Going to remove asap I get back to my computer, thanks for the notice", "url": "https://github.com/hortonworks/cloudbreak/pull/7307#discussion_r380963609", "createdAt": "2020-02-18T22:05:29Z", "author": {"login": "gregito"}, "path": "build.gradle", "diffHunk": "@@ -19,6 +19,15 @@ buildscript {\n plugins {\n   id 'org.ajoberstar.grgit' version '2.1.0'\n   id \"com.github.spotbugs\" version \"2.0.0\"\n+  id \"org.sonarqube\" version \"2.8\"\n+}\n+\n+sonarqube {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NzY3Mw=="}, "originalCommit": {"oid": "b2e69bf074a9bd60e4862ed1785f74225b031351"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgzNDQ3OnYy", "diffSide": "RIGHT", "path": "environment/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozMzoyOVrOFrTNiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjowNTo1OFrOFrUMBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0Nzg0OA==", "bodyText": "remove this", "url": "https://github.com/hortonworks/cloudbreak/pull/7307#discussion_r380947848", "createdAt": "2020-02-18T21:33:29Z", "author": {"login": "doktoric"}, "path": "environment/build.gradle", "diffHunk": "@@ -26,6 +26,14 @@ configurations.all {\n     }\n }\n \n+sonarqube {\n+  properties {\n+    property 'sonar.projectName', 'Environment Service'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e69bf074a9bd60e4862ed1785f74225b031351"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2Mzg0Ng==", "bodyText": "\ud83d\udc4d\ud83c\udffb\nSee above", "url": "https://github.com/hortonworks/cloudbreak/pull/7307#discussion_r380963846", "createdAt": "2020-02-18T22:05:58Z", "author": {"login": "gregito"}, "path": "environment/build.gradle", "diffHunk": "@@ -26,6 +26,14 @@ configurations.all {\n     }\n }\n \n+sonarqube {\n+  properties {\n+    property 'sonar.projectName', 'Environment Service'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0Nzg0OA=="}, "originalCommit": {"oid": "b2e69bf074a9bd60e4862ed1785f74225b031351"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgzNjI0OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/repository/EnvironmentRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozMzo1OVrOFrTOhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjowNzowM1rOFrUOFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODEwMQ==", "bodyText": "is it used somewhere ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7307#discussion_r380948101", "createdAt": "2020-02-18T21:33:59Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/repository/EnvironmentRepository.java", "diffHunk": "@@ -59,4 +59,9 @@\n     @CheckPermission(action = ResourceAction.READ)\n     @Query(\"SELECT e.resourceCrn FROM Environment e WHERE e.name = :name AND e.accountId = :accountId\")\n     Optional<String> findResourceCrnByNameAndAccountId(@Param(\"name\") String name, @Param(\"accountId\") String accountId);\n+\n+    @CheckPermission(action = ResourceAction.READ)\n+    @Query(\"SELECT e FROM Environment e WHERE e.network.id = :networkId\")\n+    Optional<Environment> findByNetworkId(@Param(\"networkId\") Long networkId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e69bf074a9bd60e4862ed1785f74225b031351"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2NDM3NA==", "bodyText": "Most likely not, seems like a leftover method from the beginning. Going to remove it also, thanks", "url": "https://github.com/hortonworks/cloudbreak/pull/7307#discussion_r380964374", "createdAt": "2020-02-18T22:07:03Z", "author": {"login": "gregito"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/repository/EnvironmentRepository.java", "diffHunk": "@@ -59,4 +59,9 @@\n     @CheckPermission(action = ResourceAction.READ)\n     @Query(\"SELECT e.resourceCrn FROM Environment e WHERE e.name = :name AND e.accountId = :accountId\")\n     Optional<String> findResourceCrnByNameAndAccountId(@Param(\"name\") String name, @Param(\"accountId\") String accountId);\n+\n+    @CheckPermission(action = ResourceAction.READ)\n+    @Query(\"SELECT e FROM Environment e WHERE e.network.id = :networkId\")\n+    Optional<Environment> findByNetworkId(@Param(\"networkId\") Long networkId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODEwMQ=="}, "originalCommit": {"oid": "b2e69bf074a9bd60e4862ed1785f74225b031351"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzg0MDIxOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozNToyMVrOFrTREQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDoxMzoyMlrOFriXEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODc1Mw==", "bodyText": "do not use the word vpc in case of azure", "url": "https://github.com/hortonworks/cloudbreak/pull/7307#discussion_r380948753", "createdAt": "2020-02-18T21:35:21Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidator.java", "diffHunk": "@@ -91,8 +88,43 @@ private void checkExistingNetworkParamsProvidedWhenSubnetsPresent(NetworkDto net\n         }\n     }\n \n+    private void checkNetworkIdIsSpecifiedWhenSubnetIdsArePresent(ValidationResultBuilder resultBuilder,\n+            AzureParams azureParams, NetworkDto networkDto) {\n+        if (StringUtils.isEmpty(azureParams.getNetworkId()) && CollectionUtils.isNotEmpty(networkDto.getSubnetIds())) {\n+            resultBuilder.error(\"If subnetIds are specified, then networkId must be specified too.\");\n+        }\n+    }\n+\n+    private void checkSubnetsProvidedWhenExistingNetwork(ValidationResultBuilder resultBuilder,\n+            AzureParams azureParams, Map<String, CloudSubnet> subnetMetas) {\n+        if (StringUtils.isNotEmpty(azureParams.getNetworkId()) && StringUtils.isNotEmpty(azureParams.getResourceGroupName())\n+                && MapUtils.isEmpty(subnetMetas)) {\n+            String message = String.format(\"If networkId (%s) and resourceGroupName (%s) are specified then subnet ids must be specified as well.\",\n+                    azureParams.getNetworkId(), azureParams.getResourceGroupName());\n+            LOGGER.info(message);\n+            resultBuilder.error(message);\n+        }\n+    }\n+\n+    private void checkSubnetIdsAreTheSameAsTheSubnetMetasFromProvider(EnvironmentDto environmentDto, NetworkDto networkDto,\n+            ValidationResultBuilder resultBuilder) {\n+        if (environmentDto == null || networkDto == null) {\n+            LOGGER.warn(\"EnvironmentDto or NetworkDto. Neither them can be null!\");\n+            resultBuilder.error(\"Internal validation error\");\n+            return;\n+        }\n+        Map<String, CloudSubnet> cloudmetadata = cloudNetworkService.retrieveSubnetMetadata(environmentDto, networkDto);\n+        if (networkDto.getSubnetMetas().size() != cloudmetadata.size()) {\n+            String message = String.format(\"Subnets of the environment (%s) are not found in the vpc (%s).\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e69bf074a9bd60e4862ed1785f74225b031351"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDA3OA==", "bodyText": "vnet would be more suitable in this context?", "url": "https://github.com/hortonworks/cloudbreak/pull/7307#discussion_r380970078", "createdAt": "2020-02-18T22:19:43Z", "author": {"login": "gregito"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidator.java", "diffHunk": "@@ -91,8 +88,43 @@ private void checkExistingNetworkParamsProvidedWhenSubnetsPresent(NetworkDto net\n         }\n     }\n \n+    private void checkNetworkIdIsSpecifiedWhenSubnetIdsArePresent(ValidationResultBuilder resultBuilder,\n+            AzureParams azureParams, NetworkDto networkDto) {\n+        if (StringUtils.isEmpty(azureParams.getNetworkId()) && CollectionUtils.isNotEmpty(networkDto.getSubnetIds())) {\n+            resultBuilder.error(\"If subnetIds are specified, then networkId must be specified too.\");\n+        }\n+    }\n+\n+    private void checkSubnetsProvidedWhenExistingNetwork(ValidationResultBuilder resultBuilder,\n+            AzureParams azureParams, Map<String, CloudSubnet> subnetMetas) {\n+        if (StringUtils.isNotEmpty(azureParams.getNetworkId()) && StringUtils.isNotEmpty(azureParams.getResourceGroupName())\n+                && MapUtils.isEmpty(subnetMetas)) {\n+            String message = String.format(\"If networkId (%s) and resourceGroupName (%s) are specified then subnet ids must be specified as well.\",\n+                    azureParams.getNetworkId(), azureParams.getResourceGroupName());\n+            LOGGER.info(message);\n+            resultBuilder.error(message);\n+        }\n+    }\n+\n+    private void checkSubnetIdsAreTheSameAsTheSubnetMetasFromProvider(EnvironmentDto environmentDto, NetworkDto networkDto,\n+            ValidationResultBuilder resultBuilder) {\n+        if (environmentDto == null || networkDto == null) {\n+            LOGGER.warn(\"EnvironmentDto or NetworkDto. Neither them can be null!\");\n+            resultBuilder.error(\"Internal validation error\");\n+            return;\n+        }\n+        Map<String, CloudSubnet> cloudmetadata = cloudNetworkService.retrieveSubnetMetadata(environmentDto, networkDto);\n+        if (networkDto.getSubnetMetas().size() != cloudmetadata.size()) {\n+            String message = String.format(\"Subnets of the environment (%s) are not found in the vpc (%s).\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODc1Mw=="}, "originalCommit": {"oid": "b2e69bf074a9bd60e4862ed1785f74225b031351"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NjA0OA==", "bodyText": "networkid is fine", "url": "https://github.com/hortonworks/cloudbreak/pull/7307#discussion_r381196048", "createdAt": "2020-02-19T10:13:22Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidator.java", "diffHunk": "@@ -91,8 +88,43 @@ private void checkExistingNetworkParamsProvidedWhenSubnetsPresent(NetworkDto net\n         }\n     }\n \n+    private void checkNetworkIdIsSpecifiedWhenSubnetIdsArePresent(ValidationResultBuilder resultBuilder,\n+            AzureParams azureParams, NetworkDto networkDto) {\n+        if (StringUtils.isEmpty(azureParams.getNetworkId()) && CollectionUtils.isNotEmpty(networkDto.getSubnetIds())) {\n+            resultBuilder.error(\"If subnetIds are specified, then networkId must be specified too.\");\n+        }\n+    }\n+\n+    private void checkSubnetsProvidedWhenExistingNetwork(ValidationResultBuilder resultBuilder,\n+            AzureParams azureParams, Map<String, CloudSubnet> subnetMetas) {\n+        if (StringUtils.isNotEmpty(azureParams.getNetworkId()) && StringUtils.isNotEmpty(azureParams.getResourceGroupName())\n+                && MapUtils.isEmpty(subnetMetas)) {\n+            String message = String.format(\"If networkId (%s) and resourceGroupName (%s) are specified then subnet ids must be specified as well.\",\n+                    azureParams.getNetworkId(), azureParams.getResourceGroupName());\n+            LOGGER.info(message);\n+            resultBuilder.error(message);\n+        }\n+    }\n+\n+    private void checkSubnetIdsAreTheSameAsTheSubnetMetasFromProvider(EnvironmentDto environmentDto, NetworkDto networkDto,\n+            ValidationResultBuilder resultBuilder) {\n+        if (environmentDto == null || networkDto == null) {\n+            LOGGER.warn(\"EnvironmentDto or NetworkDto. Neither them can be null!\");\n+            resultBuilder.error(\"Internal validation error\");\n+            return;\n+        }\n+        Map<String, CloudSubnet> cloudmetadata = cloudNetworkService.retrieveSubnetMetadata(environmentDto, networkDto);\n+        if (networkDto.getSubnetMetas().size() != cloudmetadata.size()) {\n+            String message = String.format(\"Subnets of the environment (%s) are not found in the vpc (%s).\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODc1Mw=="}, "originalCommit": {"oid": "b2e69bf074a9bd60e4862ed1785f74225b031351"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzg0MjE0OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/validators/EnvironmentNetworkProviderValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozNjowMVrOFrTSPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoxNjoyMlrOFrUenw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0OTA1NA==", "bodyText": "I dont think we need '...' in LOGGER", "url": "https://github.com/hortonworks/cloudbreak/pull/7307#discussion_r380949054", "createdAt": "2020-02-18T21:36:01Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/validators/EnvironmentNetworkProviderValidator.java", "diffHunk": "@@ -88,14 +88,20 @@ private void evaluateProviderNetworkRelation(boolean networkParamExists, String\n         return Optional.ofNullable(o);\n     }\n \n-    private void validateNetwork(NetworkDto networkDto, String cloudPlatform, ValidationResultBuilder resultBuilder) {\n-        if (networkDto != null && Strings.isNullOrEmpty(networkDto.getNetworkCidr())) {\n-            EnvironmentNetworkValidator environmentNetworkValidator = environmentNetworkValidatorsByCloudPlatform.get(valueOf(cloudPlatform));\n-            if (networkDto.getNetworkCidr() != null && isInvalidNetworkMask(networkDto.getNetworkCidr())) {\n-                resultBuilder.error(String.format(\"The netmask must be /%s.\", EXPECTED_NETWORK_MASK));\n+    private void validateNetwork(NetworkDto networkDto, String cloudPlatform, ValidationResultBuilder resultBuilder, EnvironmentDto environmentDto) {\n+        if (networkDto != null) {\n+            if (Strings.isNullOrEmpty(networkDto.getNetworkCidr())) {\n+                if (networkDto.getNetworkCidr() != null && isInvalidNetworkMask(networkDto.getNetworkCidr())) {\n+                    resultBuilder.error(String.format(\"The netmask must be /%s.\", EXPECTED_NETWORK_MASK));\n+                }\n+            }\n+            if (resultBuilder.build().hasError()) {\n+                return;\n             }\n+            EnvironmentNetworkValidator environmentNetworkValidator = environmentNetworkValidatorsByCloudPlatform.get(valueOf(cloudPlatform));\n             if (environmentNetworkValidator != null) {\n-                environmentNetworkValidator.validateDuringFlow(networkDto, resultBuilder);\n+                LOGGER.debug(\"Going to validate environment ({}) network in flow...\", environmentDto.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e69bf074a9bd60e4862ed1785f74225b031351"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODYwNw==", "bodyText": "Hehe okey. It\u2019s just a \u201cmy kind of\u201d informal stuff, usually I add this triple dot in the logs where something is about to happen which could take a while.\nBut hae it y'r way :)", "url": "https://github.com/hortonworks/cloudbreak/pull/7307#discussion_r380968607", "createdAt": "2020-02-18T22:16:22Z", "author": {"login": "gregito"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/validators/EnvironmentNetworkProviderValidator.java", "diffHunk": "@@ -88,14 +88,20 @@ private void evaluateProviderNetworkRelation(boolean networkParamExists, String\n         return Optional.ofNullable(o);\n     }\n \n-    private void validateNetwork(NetworkDto networkDto, String cloudPlatform, ValidationResultBuilder resultBuilder) {\n-        if (networkDto != null && Strings.isNullOrEmpty(networkDto.getNetworkCidr())) {\n-            EnvironmentNetworkValidator environmentNetworkValidator = environmentNetworkValidatorsByCloudPlatform.get(valueOf(cloudPlatform));\n-            if (networkDto.getNetworkCidr() != null && isInvalidNetworkMask(networkDto.getNetworkCidr())) {\n-                resultBuilder.error(String.format(\"The netmask must be /%s.\", EXPECTED_NETWORK_MASK));\n+    private void validateNetwork(NetworkDto networkDto, String cloudPlatform, ValidationResultBuilder resultBuilder, EnvironmentDto environmentDto) {\n+        if (networkDto != null) {\n+            if (Strings.isNullOrEmpty(networkDto.getNetworkCidr())) {\n+                if (networkDto.getNetworkCidr() != null && isInvalidNetworkMask(networkDto.getNetworkCidr())) {\n+                    resultBuilder.error(String.format(\"The netmask must be /%s.\", EXPECTED_NETWORK_MASK));\n+                }\n+            }\n+            if (resultBuilder.build().hasError()) {\n+                return;\n             }\n+            EnvironmentNetworkValidator environmentNetworkValidator = environmentNetworkValidatorsByCloudPlatform.get(valueOf(cloudPlatform));\n             if (environmentNetworkValidator != null) {\n-                environmentNetworkValidator.validateDuringFlow(networkDto, resultBuilder);\n+                LOGGER.debug(\"Going to validate environment ({}) network in flow...\", environmentDto.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0OTA1NA=="}, "originalCommit": {"oid": "b2e69bf074a9bd60e4862ed1785f74225b031351"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2855, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}