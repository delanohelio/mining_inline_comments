{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTA2NTIw", "number": 8640, "title": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs", "bodyText": "This adds an API and flow to the environment service which allows for\nthe updating of all of an Environments Stacks pillar configs.\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\nThe API added is:\nPOST /v1/env/crn/{crn}/update_config\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I", "createdAt": "2020-07-24T21:55:32Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8640", "merged": true, "mergeCommit": {"oid": "91c4fca903d866bf3aabf224fbb9995e9fd33f4a"}, "closed": true, "closedAt": "2020-08-10T18:53:21Z", "author": {"login": "wonderslug"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5DNM5AFqTQ1NTg1MTMwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9l70IgBqjM2Mzk4MzcyOTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODUxMzAy", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-455851302", "createdAt": "2020-07-27T14:44:09Z", "commit": {"oid": "06585e009249694c467400932eb19b62d8228140"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDo0NDowOVrOG3lv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDo1MjoxMVrOG3mH9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0MzMzMw==", "bodyText": "Should this exist? I think updateConfigsInEnvironmentByCrn is sufficient and also it doesn't have consequence for things like reusing cluster names.", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r460943333", "createdAt": "2020-07-27T14:44:09Z", "author": {"login": "jamisonbennett"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/endpoint/EnvironmentEndpoint.java", "diffHunk": "@@ -205,4 +205,18 @@ SimpleEnvironmentResponses deleteMultipleByCrns(Set<String> crns,\n     @ApiOperation(value = EnvironmentOpDescription.CLI_COMMAND, produces = MediaType.APPLICATION_JSON, notes = ENVIRONMENT_NOTES,\n             nickname = \"getCreateEnvironmentForCli\")\n     Object getCreateEnvironmentForCli(@NotNull @Valid EnvironmentRequest environmentRequest);\n+\n+    @POST\n+    @Path(\"/crn/{crn}/update_config\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = EnvironmentOpDescription.UPDATE_CONFIG_BY_CRN, produces = MediaType.APPLICATION_JSON, notes = ENVIRONMENT_NOTES,\n+        nickname = \"updateConfigsInEnvironmentByCrnV1\")\n+    void updateConfigsInEnvironmentByCrn(@PathParam(\"crn\") String crn);\n+\n+    @POST\n+    @Path(\"/name/{name}/update_config\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = EnvironmentOpDescription.UPDATE_CONFIG_BY_NAME, produces = MediaType.APPLICATION_JSON, notes = ENVIRONMENT_NOTES,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06585e009249694c467400932eb19b62d8228140"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NDU5Ng==", "bodyText": "I don't see this class referenced anywhere.", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r460944596", "createdAt": "2020-07-27T14:45:47Z", "author": {"login": "jamisonbennett"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/config/update/event/EnvStackConfigUpdatesFailedEvent.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.sequenceiq.environment.environment.flow.config.update.event;\n+\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.FAILED_ENV_STACK_CONIFG_UPDATES_EVENT;\n+\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.flow.reactor.api.event.BaseFailedFlowEvent;\n+\n+public class EnvStackConfigUpdatesFailedEvent extends BaseFailedFlowEvent implements Selectable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06585e009249694c467400932eb19b62d8228140"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0OTQ5Mg==", "bodyText": "Is mutableNamesList.retainAll(remaining) needed? It looks like mutableNamesList just goes out of scope and results is a different container based on the continents of mutableNamesList.", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r460949492", "createdAt": "2020-07-27T14:52:11Z", "author": {"login": "jamisonbennett"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/poller/StackPollerProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.environment.environment.poller;\n+\n+import com.dyngr.core.AttemptMaker;\n+import com.dyngr.core.AttemptResult;\n+import com.dyngr.core.AttemptResults;\n+import com.dyngr.core.AttemptState;\n+import com.sequenceiq.environment.environment.service.stack.StackService;\n+import com.sequenceiq.flow.core.FlowConstants;\n+import com.sequenceiq.flow.domain.FlowLog;\n+import com.sequenceiq.flow.service.flowlog.FlowLogDBService;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.BadRequestException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackPollerProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackPollerProvider.class);\n+\n+    private final StackService stackService;\n+\n+    private final FlowLogDBService flowLogDBService;\n+\n+    public StackPollerProvider(\n+        StackService stackService,\n+        FlowLogDBService flowLogDBService) {\n+        this.stackService = stackService;\n+        this.flowLogDBService = flowLogDBService;\n+    }\n+\n+    public AttemptMaker<Void> stackUpdateConfigPoller(List<String> stackNames, Long envId, String flowId) {\n+        List<String> mutableNamesList = new ArrayList<>(stackNames);\n+        return () -> {\n+            Optional<FlowLog> flowLog = flowLogDBService.getLastFlowLog(flowId);\n+            if (flowLog.isPresent() && flowLog.get().getCurrentState().equals(FlowConstants.CANCELLED_STATE)) {\n+                return AttemptResults.finishWith(null);\n+            }\n+            List<String> remaining = new ArrayList<>();\n+            List<AttemptResult<Void>> results = collectStackUpdateConfigResults(mutableNamesList,\n+                remaining, envId);\n+            mutableNamesList.retainAll(remaining);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06585e009249694c467400932eb19b62d8228140"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06585e009249694c467400932eb19b62d8228140", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/06585e009249694c467400932eb19b62d8228140", "committedDate": "2020-07-24T21:51:13Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}, "afterCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d050661c401008cb0e4e853ad9191fdc19be0c96", "committedDate": "2020-07-27T21:04:30Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDAyMDIz", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-457402023", "createdAt": "2020-07-29T10:40:59Z", "commit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDo0MTowMFrOG4yzyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozNzozOFrOG42bRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwNTg5OA==", "bodyText": "this is not used", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462205898", "createdAt": "2020-07-29T10:41:00Z", "author": {"login": "lacikaaa"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/doc/environment/EnvironmentOpDescription.java", "diffHunk": "@@ -22,6 +22,8 @@\n     public static final String VERIFY_CREDENTIAL_BY_CRN = \"Verifies the credential used by the given environment.\";\n     public static final String CLI_COMMAND = \"produce cli command input for environment creation\";\n     public static final String GET_CRN_BY_NAME = \"Get the crn of an environment by name.\";\n+    public static final String UPDATE_CONFIG_BY_CRN = \"Update the configuration for all stacks in the Environment by the Environment CRN\";\n+    public static final String UPDATE_CONFIG_BY_NAME = \"Update the configuration for all stacks in the Environment by the Environment name\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwNjk4NA==", "bodyText": "I couldn't find any usage", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462206984", "createdAt": "2020-07-29T10:43:06Z", "author": {"login": "lacikaaa"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java", "diffHunk": "@@ -45,6 +45,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.AWS_PARAMETERS)\n     private AwsEnvironmentParameters aws;\n \n+    @ApiModelProperty(EnvironmentModelDescription.UPDATE_STACKS_CONFIG)\n+    private Boolean updateStacksConfig = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwNzMxNQ==", "bodyText": "couldn't find usage", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462207315", "createdAt": "2020-07-29T10:43:52Z", "author": {"login": "lacikaaa"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentStatus.java", "diffHunk": "@@ -59,7 +59,9 @@\n     START_FREEIPA_STARTED(\"Starting Free IPA\"),\n     START_FREEIPA_FAILED(\"Failed to Start Free IPA\"),\n \n-    FREEIPA_DELETED_ON_PROVIDER_SIDE(\"Free IPA deleted on cloud provider side\");\n+    FREEIPA_DELETED_ON_PROVIDER_SIDE(\"Free IPA deleted on cloud provider side\"),\n+\n+    STACKS_CONFIG_UPDATE_IN_PROGRESS(\"Stack configuration updates in progress\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxMzEzNg==", "bodyText": "I would use FlowLogDBService#findAllByResourceIdAndFinalizedIsFalseOrderByCreatedDesc here as it would spare some resources:\n\nwon't fetch db again for the environment\nyou could loose the finalized check in the next if\nyou could loose try-catch and use isEmpty instead", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462213136", "createdAt": "2020-07-29T10:56:00Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/stack/StackService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.sequenceiq.environment.environment.service.stack;\n+\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.StackV4Endpoint;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.common.exception.NotFoundException;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.flow.config.update.config.EnvStackConfigUpdatesFlowConfig;\n+import com.sequenceiq.environment.store.EnvironmentInMemoryStateStore;\n+import com.sequenceiq.flow.domain.FlowLog;\n+import com.sequenceiq.flow.service.FlowCancelService;\n+import com.sequenceiq.flow.service.flowlog.FlowLogDBService;\n+import javax.ws.rs.BadRequestException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class StackService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackService.class);\n+\n+    private final StackV4Endpoint stackV4Endpoint;\n+\n+    private final FlowCancelService flowCancelService;\n+\n+    private final FlowLogDBService flowLogDBService;\n+\n+    public StackService(\n+        StackV4Endpoint stackV4Endpoint,\n+        FlowCancelService flowCancelService,\n+        FlowLogDBService flowLogDBService) {\n+        this.stackV4Endpoint = stackV4Endpoint;\n+        this.flowCancelService = flowCancelService;\n+        this.flowLogDBService = flowLogDBService;\n+    }\n+\n+    public void triggerConfigUpdateForStack(String stackName) {\n+        try {\n+            stackV4Endpoint.updatePillarConfigurationByName(0L, stackName);\n+        } catch (BadRequestException bre) {\n+            LOGGER.info(String\n+                .format(\"Unable to start config update for stack %s.  Message is %s\", stackName,\n+                    bre.getMessage()));\n+            throw bre;\n+        }\n+    }\n+\n+    public void cancelRunningStackConfigUpdates(Environment environment) {\n+        try {\n+            FlowLog flowLog = flowLogDBService.getLastFlowLogByResourceCrnOrName(environment.getResourceCrn());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxNDQxMQ==", "bodyText": "this flowType check doesn't seem right to me.\nsimple EnvStackConfigUpdatesFlowConfig.class.equals(flowLog.getFlowType()) should work here", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462214411", "createdAt": "2020-07-29T10:58:43Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/stack/StackService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.sequenceiq.environment.environment.service.stack;\n+\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.StackV4Endpoint;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.common.exception.NotFoundException;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.flow.config.update.config.EnvStackConfigUpdatesFlowConfig;\n+import com.sequenceiq.environment.store.EnvironmentInMemoryStateStore;\n+import com.sequenceiq.flow.domain.FlowLog;\n+import com.sequenceiq.flow.service.FlowCancelService;\n+import com.sequenceiq.flow.service.flowlog.FlowLogDBService;\n+import javax.ws.rs.BadRequestException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class StackService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackService.class);\n+\n+    private final StackV4Endpoint stackV4Endpoint;\n+\n+    private final FlowCancelService flowCancelService;\n+\n+    private final FlowLogDBService flowLogDBService;\n+\n+    public StackService(\n+        StackV4Endpoint stackV4Endpoint,\n+        FlowCancelService flowCancelService,\n+        FlowLogDBService flowLogDBService) {\n+        this.stackV4Endpoint = stackV4Endpoint;\n+        this.flowCancelService = flowCancelService;\n+        this.flowLogDBService = flowLogDBService;\n+    }\n+\n+    public void triggerConfigUpdateForStack(String stackName) {\n+        try {\n+            stackV4Endpoint.updatePillarConfigurationByName(0L, stackName);\n+        } catch (BadRequestException bre) {\n+            LOGGER.info(String\n+                .format(\"Unable to start config update for stack %s.  Message is %s\", stackName,\n+                    bre.getMessage()));\n+            throw bre;\n+        }\n+    }\n+\n+    public void cancelRunningStackConfigUpdates(Environment environment) {\n+        try {\n+            FlowLog flowLog = flowLogDBService.getLastFlowLogByResourceCrnOrName(environment.getResourceCrn());\n+            if (!flowLog.getFinalized() && flowLog.getFlowType() != null\n+                && flowLog.getFlowType().getCanonicalName()\n+                .equals(EnvStackConfigUpdatesFlowConfig.class.getCanonicalName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxNzM3MA==", "bodyText": "I think you should catch WebApplicationException also and use WebApplicationExceptionMessageExtractor to get the message, just to be sure", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462217370", "createdAt": "2020-07-29T11:04:58Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/stack/StackService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.sequenceiq.environment.environment.service.stack;\n+\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.StackV4Endpoint;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.common.exception.NotFoundException;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.flow.config.update.config.EnvStackConfigUpdatesFlowConfig;\n+import com.sequenceiq.environment.store.EnvironmentInMemoryStateStore;\n+import com.sequenceiq.flow.domain.FlowLog;\n+import com.sequenceiq.flow.service.FlowCancelService;\n+import com.sequenceiq.flow.service.flowlog.FlowLogDBService;\n+import javax.ws.rs.BadRequestException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class StackService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackService.class);\n+\n+    private final StackV4Endpoint stackV4Endpoint;\n+\n+    private final FlowCancelService flowCancelService;\n+\n+    private final FlowLogDBService flowLogDBService;\n+\n+    public StackService(\n+        StackV4Endpoint stackV4Endpoint,\n+        FlowCancelService flowCancelService,\n+        FlowLogDBService flowLogDBService) {\n+        this.stackV4Endpoint = stackV4Endpoint;\n+        this.flowCancelService = flowCancelService;\n+        this.flowLogDBService = flowLogDBService;\n+    }\n+\n+    public void triggerConfigUpdateForStack(String stackName) {\n+        try {\n+            stackV4Endpoint.updatePillarConfigurationByName(0L, stackName);\n+        } catch (BadRequestException bre) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxOTQyMg==", "bodyText": "unnecessary linebreak", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462219422", "createdAt": "2020-07-29T11:09:00Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/config/update/EnvStackConfigUpdatesActions.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.sequenceiq.environment.environment.flow.config.update;\n+\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.FINALIZE_ENV_STACK_CONIFG_UPDATES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.HANDLE_FAILED_ENV_STACK_CONIFG_UPDATES_EVENT;\n+\n+import com.sequenceiq.cloudbreak.common.event.ResourceCrnPayload;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.environment.environment.EnvironmentStatus;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesEvent;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesHandlerSelectors;\n+import com.sequenceiq.environment.environment.flow.stop.event.EnvStopFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.environment.service.EnvironmentStatusUpdateService;\n+import com.sequenceiq.environment.metrics.EnvironmentMetricService;\n+import com.sequenceiq.environment.metrics.MetricType;\n+import com.sequenceiq.flow.core.CommonContext;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.statemachine.action.Action;\n+\n+@Configuration\n+public class EnvStackConfigUpdatesActions {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+        .getLogger(EnvStackConfigUpdatesActions.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMDEyMw==", "bodyText": "all doExecute has linebreaks, please clean them up", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462220123", "createdAt": "2020-07-29T11:10:27Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/config/update/EnvStackConfigUpdatesActions.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.sequenceiq.environment.environment.flow.config.update;\n+\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.FINALIZE_ENV_STACK_CONIFG_UPDATES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.HANDLE_FAILED_ENV_STACK_CONIFG_UPDATES_EVENT;\n+\n+import com.sequenceiq.cloudbreak.common.event.ResourceCrnPayload;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.environment.environment.EnvironmentStatus;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesEvent;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesHandlerSelectors;\n+import com.sequenceiq.environment.environment.flow.stop.event.EnvStopFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.environment.service.EnvironmentStatusUpdateService;\n+import com.sequenceiq.environment.metrics.EnvironmentMetricService;\n+import com.sequenceiq.environment.metrics.MetricType;\n+import com.sequenceiq.flow.core.CommonContext;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.statemachine.action.Action;\n+\n+@Configuration\n+public class EnvStackConfigUpdatesActions {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+        .getLogger(EnvStackConfigUpdatesActions.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final EnvironmentStatusUpdateService environmentStatusUpdateService;\n+\n+    private final EnvironmentMetricService metricService;\n+\n+    public EnvStackConfigUpdatesActions(EnvironmentService environmentService,\n+        EnvironmentStatusUpdateService environmentStatusUpdateService,\n+        EnvironmentMetricService metricService) {\n+        this.environmentService = environmentService;\n+        this.environmentStatusUpdateService = environmentStatusUpdateService;\n+        this.metricService = metricService;\n+    }\n+\n+    @Bean(name = \"STACK_CONFIG_UPDATES_START_STATE\")\n+    public Action<?, ?> collectClusterInfo() {\n+        return new AbstractEnvStackConfigUpdatesAction<>(EnvStackConfigUpdatesEvent.class) {\n+\n+            @Override\n+            protected void doExecute(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMTMzNA==", "bodyText": "shouldn't be there a start?", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462221334", "createdAt": "2020-07-29T11:12:56Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/config/update/EnvStackConfigUpdatesActions.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.sequenceiq.environment.environment.flow.config.update;\n+\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.FINALIZE_ENV_STACK_CONIFG_UPDATES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.HANDLE_FAILED_ENV_STACK_CONIFG_UPDATES_EVENT;\n+\n+import com.sequenceiq.cloudbreak.common.event.ResourceCrnPayload;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.environment.environment.EnvironmentStatus;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesEvent;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesHandlerSelectors;\n+import com.sequenceiq.environment.environment.flow.stop.event.EnvStopFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.environment.service.EnvironmentStatusUpdateService;\n+import com.sequenceiq.environment.metrics.EnvironmentMetricService;\n+import com.sequenceiq.environment.metrics.MetricType;\n+import com.sequenceiq.flow.core.CommonContext;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.statemachine.action.Action;\n+\n+@Configuration\n+public class EnvStackConfigUpdatesActions {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+        .getLogger(EnvStackConfigUpdatesActions.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final EnvironmentStatusUpdateService environmentStatusUpdateService;\n+\n+    private final EnvironmentMetricService metricService;\n+\n+    public EnvStackConfigUpdatesActions(EnvironmentService environmentService,\n+        EnvironmentStatusUpdateService environmentStatusUpdateService,\n+        EnvironmentMetricService metricService) {\n+        this.environmentService = environmentService;\n+        this.environmentStatusUpdateService = environmentStatusUpdateService;\n+        this.metricService = metricService;\n+    }\n+\n+    @Bean(name = \"STACK_CONFIG_UPDATES_START_STATE\")\n+    public Action<?, ?> collectClusterInfo() {\n+        return new AbstractEnvStackConfigUpdatesAction<>(EnvStackConfigUpdatesEvent.class) {\n+\n+            @Override\n+            protected void doExecute(\n+                CommonContext context, EnvStackConfigUpdatesEvent payload,\n+                Map<Object, Object> variables) {\n+\n+                EnvironmentDto environmentDto = environmentStatusUpdateService\n+                    .updateEnvironmentStatusAndNotify(context, payload,\n+                        getCurrentStatus(payload.getResourceId()),\n+                        ResourceEvent.ENVIRONMENT_STACK_CONFIGS_UPDATE_STARTED,\n+                        EnvStackConfigUpdatesState.STACK_CONFIG_UPDATES_START_STATE);\n+\n+                sendEvent(context,\n+                    EnvStackConfigUpdatesHandlerSelectors.STACK_CONFIG_UPDATES_HANDLER_EVENT\n+                        .selector(), environmentDto);\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"STACK_CONFIG_UPDATES_FINISHED_STATE\")\n+    public Action<?, ?> finishedAction() {\n+        return new AbstractEnvStackConfigUpdatesAction<>(ResourceCrnPayload.class) {\n+            @Override\n+            protected void doExecute(CommonContext context, ResourceCrnPayload payload,\n+                Map<Object, Object> variables) {\n+\n+                EnvironmentDto environmentDto = environmentStatusUpdateService\n+                    .updateEnvironmentStatusAndNotify(context, payload,\n+                        getCurrentStatus(payload.getResourceId()),\n+                        ResourceEvent.ENVIRONMENT_STACK_CONFIGS_UPDATE_FINISHED,\n+                        EnvStackConfigUpdatesState.STACK_CONFIG_UPDATES_FINISHED_STATE);\n+                metricService.incrementMetricCounter(MetricType.ENV_STACK_CONFIG_UPDATE_FINISHED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMTYwMA==", "bodyText": "this log message is not right", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462221600", "createdAt": "2020-07-29T11:13:34Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/config/update/EnvStackConfigUpdatesActions.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.sequenceiq.environment.environment.flow.config.update;\n+\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.FINALIZE_ENV_STACK_CONIFG_UPDATES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.HANDLE_FAILED_ENV_STACK_CONIFG_UPDATES_EVENT;\n+\n+import com.sequenceiq.cloudbreak.common.event.ResourceCrnPayload;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.environment.environment.EnvironmentStatus;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesEvent;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesHandlerSelectors;\n+import com.sequenceiq.environment.environment.flow.stop.event.EnvStopFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.environment.service.EnvironmentStatusUpdateService;\n+import com.sequenceiq.environment.metrics.EnvironmentMetricService;\n+import com.sequenceiq.environment.metrics.MetricType;\n+import com.sequenceiq.flow.core.CommonContext;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.statemachine.action.Action;\n+\n+@Configuration\n+public class EnvStackConfigUpdatesActions {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+        .getLogger(EnvStackConfigUpdatesActions.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final EnvironmentStatusUpdateService environmentStatusUpdateService;\n+\n+    private final EnvironmentMetricService metricService;\n+\n+    public EnvStackConfigUpdatesActions(EnvironmentService environmentService,\n+        EnvironmentStatusUpdateService environmentStatusUpdateService,\n+        EnvironmentMetricService metricService) {\n+        this.environmentService = environmentService;\n+        this.environmentStatusUpdateService = environmentStatusUpdateService;\n+        this.metricService = metricService;\n+    }\n+\n+    @Bean(name = \"STACK_CONFIG_UPDATES_START_STATE\")\n+    public Action<?, ?> collectClusterInfo() {\n+        return new AbstractEnvStackConfigUpdatesAction<>(EnvStackConfigUpdatesEvent.class) {\n+\n+            @Override\n+            protected void doExecute(\n+                CommonContext context, EnvStackConfigUpdatesEvent payload,\n+                Map<Object, Object> variables) {\n+\n+                EnvironmentDto environmentDto = environmentStatusUpdateService\n+                    .updateEnvironmentStatusAndNotify(context, payload,\n+                        getCurrentStatus(payload.getResourceId()),\n+                        ResourceEvent.ENVIRONMENT_STACK_CONFIGS_UPDATE_STARTED,\n+                        EnvStackConfigUpdatesState.STACK_CONFIG_UPDATES_START_STATE);\n+\n+                sendEvent(context,\n+                    EnvStackConfigUpdatesHandlerSelectors.STACK_CONFIG_UPDATES_HANDLER_EVENT\n+                        .selector(), environmentDto);\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"STACK_CONFIG_UPDATES_FINISHED_STATE\")\n+    public Action<?, ?> finishedAction() {\n+        return new AbstractEnvStackConfigUpdatesAction<>(ResourceCrnPayload.class) {\n+            @Override\n+            protected void doExecute(CommonContext context, ResourceCrnPayload payload,\n+                Map<Object, Object> variables) {\n+\n+                EnvironmentDto environmentDto = environmentStatusUpdateService\n+                    .updateEnvironmentStatusAndNotify(context, payload,\n+                        getCurrentStatus(payload.getResourceId()),\n+                        ResourceEvent.ENVIRONMENT_STACK_CONFIGS_UPDATE_FINISHED,\n+                        EnvStackConfigUpdatesState.STACK_CONFIG_UPDATES_FINISHED_STATE);\n+                metricService.incrementMetricCounter(MetricType.ENV_STACK_CONFIG_UPDATE_FINISHED,\n+                    environmentDto);\n+                LOGGER.info(\"Flow entered into ENV_STOP_FINISHED_STATE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMjMwMA==", "bodyText": "EnvStopFailedEvent?", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462222300", "createdAt": "2020-07-29T11:15:01Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/config/update/EnvStackConfigUpdatesActions.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.sequenceiq.environment.environment.flow.config.update;\n+\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.FINALIZE_ENV_STACK_CONIFG_UPDATES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.HANDLE_FAILED_ENV_STACK_CONIFG_UPDATES_EVENT;\n+\n+import com.sequenceiq.cloudbreak.common.event.ResourceCrnPayload;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.environment.environment.EnvironmentStatus;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesEvent;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesHandlerSelectors;\n+import com.sequenceiq.environment.environment.flow.stop.event.EnvStopFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.environment.service.EnvironmentStatusUpdateService;\n+import com.sequenceiq.environment.metrics.EnvironmentMetricService;\n+import com.sequenceiq.environment.metrics.MetricType;\n+import com.sequenceiq.flow.core.CommonContext;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.statemachine.action.Action;\n+\n+@Configuration\n+public class EnvStackConfigUpdatesActions {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+        .getLogger(EnvStackConfigUpdatesActions.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final EnvironmentStatusUpdateService environmentStatusUpdateService;\n+\n+    private final EnvironmentMetricService metricService;\n+\n+    public EnvStackConfigUpdatesActions(EnvironmentService environmentService,\n+        EnvironmentStatusUpdateService environmentStatusUpdateService,\n+        EnvironmentMetricService metricService) {\n+        this.environmentService = environmentService;\n+        this.environmentStatusUpdateService = environmentStatusUpdateService;\n+        this.metricService = metricService;\n+    }\n+\n+    @Bean(name = \"STACK_CONFIG_UPDATES_START_STATE\")\n+    public Action<?, ?> collectClusterInfo() {\n+        return new AbstractEnvStackConfigUpdatesAction<>(EnvStackConfigUpdatesEvent.class) {\n+\n+            @Override\n+            protected void doExecute(\n+                CommonContext context, EnvStackConfigUpdatesEvent payload,\n+                Map<Object, Object> variables) {\n+\n+                EnvironmentDto environmentDto = environmentStatusUpdateService\n+                    .updateEnvironmentStatusAndNotify(context, payload,\n+                        getCurrentStatus(payload.getResourceId()),\n+                        ResourceEvent.ENVIRONMENT_STACK_CONFIGS_UPDATE_STARTED,\n+                        EnvStackConfigUpdatesState.STACK_CONFIG_UPDATES_START_STATE);\n+\n+                sendEvent(context,\n+                    EnvStackConfigUpdatesHandlerSelectors.STACK_CONFIG_UPDATES_HANDLER_EVENT\n+                        .selector(), environmentDto);\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"STACK_CONFIG_UPDATES_FINISHED_STATE\")\n+    public Action<?, ?> finishedAction() {\n+        return new AbstractEnvStackConfigUpdatesAction<>(ResourceCrnPayload.class) {\n+            @Override\n+            protected void doExecute(CommonContext context, ResourceCrnPayload payload,\n+                Map<Object, Object> variables) {\n+\n+                EnvironmentDto environmentDto = environmentStatusUpdateService\n+                    .updateEnvironmentStatusAndNotify(context, payload,\n+                        getCurrentStatus(payload.getResourceId()),\n+                        ResourceEvent.ENVIRONMENT_STACK_CONFIGS_UPDATE_FINISHED,\n+                        EnvStackConfigUpdatesState.STACK_CONFIG_UPDATES_FINISHED_STATE);\n+                metricService.incrementMetricCounter(MetricType.ENV_STACK_CONFIG_UPDATE_FINISHED,\n+                    environmentDto);\n+                LOGGER.info(\"Flow entered into ENV_STOP_FINISHED_STATE\");\n+                sendEvent(context, FINALIZE_ENV_STACK_CONIFG_UPDATES_EVENT.event(), payload);\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"STACK_CONFIG_UPDATES_FAILED_STATE\")\n+    public Action<?, ?> failedAction() {\n+        return new AbstractEnvStackConfigUpdatesAction<>(EnvStopFailedEvent.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyNTU0NQ==", "bodyText": "what will be the env state in case of a failure?", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462225545", "createdAt": "2020-07-29T11:21:40Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/config/update/EnvStackConfigUpdatesActions.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.sequenceiq.environment.environment.flow.config.update;\n+\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.FINALIZE_ENV_STACK_CONIFG_UPDATES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.HANDLE_FAILED_ENV_STACK_CONIFG_UPDATES_EVENT;\n+\n+import com.sequenceiq.cloudbreak.common.event.ResourceCrnPayload;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.environment.environment.EnvironmentStatus;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesEvent;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesHandlerSelectors;\n+import com.sequenceiq.environment.environment.flow.stop.event.EnvStopFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.environment.service.EnvironmentStatusUpdateService;\n+import com.sequenceiq.environment.metrics.EnvironmentMetricService;\n+import com.sequenceiq.environment.metrics.MetricType;\n+import com.sequenceiq.flow.core.CommonContext;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.statemachine.action.Action;\n+\n+@Configuration\n+public class EnvStackConfigUpdatesActions {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+        .getLogger(EnvStackConfigUpdatesActions.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final EnvironmentStatusUpdateService environmentStatusUpdateService;\n+\n+    private final EnvironmentMetricService metricService;\n+\n+    public EnvStackConfigUpdatesActions(EnvironmentService environmentService,\n+        EnvironmentStatusUpdateService environmentStatusUpdateService,\n+        EnvironmentMetricService metricService) {\n+        this.environmentService = environmentService;\n+        this.environmentStatusUpdateService = environmentStatusUpdateService;\n+        this.metricService = metricService;\n+    }\n+\n+    @Bean(name = \"STACK_CONFIG_UPDATES_START_STATE\")\n+    public Action<?, ?> collectClusterInfo() {\n+        return new AbstractEnvStackConfigUpdatesAction<>(EnvStackConfigUpdatesEvent.class) {\n+\n+            @Override\n+            protected void doExecute(\n+                CommonContext context, EnvStackConfigUpdatesEvent payload,\n+                Map<Object, Object> variables) {\n+\n+                EnvironmentDto environmentDto = environmentStatusUpdateService\n+                    .updateEnvironmentStatusAndNotify(context, payload,\n+                        getCurrentStatus(payload.getResourceId()),\n+                        ResourceEvent.ENVIRONMENT_STACK_CONFIGS_UPDATE_STARTED,\n+                        EnvStackConfigUpdatesState.STACK_CONFIG_UPDATES_START_STATE);\n+\n+                sendEvent(context,\n+                    EnvStackConfigUpdatesHandlerSelectors.STACK_CONFIG_UPDATES_HANDLER_EVENT\n+                        .selector(), environmentDto);\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"STACK_CONFIG_UPDATES_FINISHED_STATE\")\n+    public Action<?, ?> finishedAction() {\n+        return new AbstractEnvStackConfigUpdatesAction<>(ResourceCrnPayload.class) {\n+            @Override\n+            protected void doExecute(CommonContext context, ResourceCrnPayload payload,\n+                Map<Object, Object> variables) {\n+\n+                EnvironmentDto environmentDto = environmentStatusUpdateService\n+                    .updateEnvironmentStatusAndNotify(context, payload,\n+                        getCurrentStatus(payload.getResourceId()),\n+                        ResourceEvent.ENVIRONMENT_STACK_CONFIGS_UPDATE_FINISHED,\n+                        EnvStackConfigUpdatesState.STACK_CONFIG_UPDATES_FINISHED_STATE);\n+                metricService.incrementMetricCounter(MetricType.ENV_STACK_CONFIG_UPDATE_FINISHED,\n+                    environmentDto);\n+                LOGGER.info(\"Flow entered into ENV_STOP_FINISHED_STATE\");\n+                sendEvent(context, FINALIZE_ENV_STACK_CONIFG_UPDATES_EVENT.event(), payload);\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"STACK_CONFIG_UPDATES_FAILED_STATE\")\n+    public Action<?, ?> failedAction() {\n+        return new AbstractEnvStackConfigUpdatesAction<>(EnvStopFailedEvent.class) {\n+            @Override\n+            protected void doExecute(CommonContext context, EnvStopFailedEvent payload,\n+                Map<Object, Object> variables) {\n+                LOGGER.warn(\n+                    String.format(\"Failed to update environments stack configs '%s'. Status: '%s'.\",\n+                        payload.getEnvironmentDto(), payload.getEnvironmentStatus()),\n+                    payload.getException());\n+                EnvironmentDto environmentDto = environmentStatusUpdateService\n+                    .updateFailedEnvironmentStatusAndNotify(context, payload,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyNjE3MA==", "bodyText": "I think it should be cluster, customer would recognize that better. maybe", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462226170", "createdAt": "2020-07-29T11:22:56Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/config/update/config/EnvStackConfigUpdatesFlowConfig.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sequenceiq.environment.environment.flow.config.update.config;\n+\n+import static com.sequenceiq.environment.environment.flow.config.update.EnvStackConfigUpdatesState.FINAL_STATE;\n+import static com.sequenceiq.environment.environment.flow.config.update.EnvStackConfigUpdatesState.INIT_STATE;\n+import static com.sequenceiq.environment.environment.flow.config.update.EnvStackConfigUpdatesState.STACK_CONFIG_UPDATES_FAILED_STATE;\n+import static com.sequenceiq.environment.environment.flow.config.update.EnvStackConfigUpdatesState.STACK_CONFIG_UPDATES_FINISHED_STATE;\n+import static com.sequenceiq.environment.environment.flow.config.update.EnvStackConfigUpdatesState.STACK_CONFIG_UPDATES_START_STATE;\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.ENV_STACK_CONFIG_UPDATES_START_EVENT;\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.FAILED_ENV_STACK_CONIFG_UPDATES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.FINALIZE_ENV_STACK_CONIFG_UPDATES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.FINISH_ENV_STACK_CONFIG_UPDATES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.HANDLE_FAILED_ENV_STACK_CONIFG_UPDATES_EVENT;\n+\n+import com.sequenceiq.environment.environment.flow.config.update.EnvStackConfigUpdatesState;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors;\n+import com.sequenceiq.flow.core.config.AbstractFlowConfiguration;\n+import com.sequenceiq.flow.core.config.RetryableFlowConfiguration;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class EnvStackConfigUpdatesFlowConfig extends\n+    AbstractFlowConfiguration<EnvStackConfigUpdatesState, EnvStackConfigUpdatesStateSelectors>\n+    implements RetryableFlowConfiguration<EnvStackConfigUpdatesStateSelectors> {\n+\n+    private static final List<Transition<EnvStackConfigUpdatesState, EnvStackConfigUpdatesStateSelectors>>\n+        TRANSITIONS = new Transition.Builder<EnvStackConfigUpdatesState, EnvStackConfigUpdatesStateSelectors>()\n+        .defaultFailureEvent(FAILED_ENV_STACK_CONIFG_UPDATES_EVENT)\n+\n+        .from(INIT_STATE).to(STACK_CONFIG_UPDATES_START_STATE)\n+        .event(ENV_STACK_CONFIG_UPDATES_START_EVENT).defaultFailureEvent()\n+\n+        .from(STACK_CONFIG_UPDATES_START_STATE).to(STACK_CONFIG_UPDATES_FINISHED_STATE)\n+        .event(FINISH_ENV_STACK_CONFIG_UPDATES_EVENT).defaultFailureEvent()\n+\n+        .from(STACK_CONFIG_UPDATES_FINISHED_STATE).to(FINAL_STATE)\n+        .event(FINALIZE_ENV_STACK_CONIFG_UPDATES_EVENT).defaultFailureEvent()\n+\n+        .build();\n+\n+    protected EnvStackConfigUpdatesFlowConfig() {\n+        super(EnvStackConfigUpdatesState.class, EnvStackConfigUpdatesStateSelectors.class);\n+    }\n+\n+    @Override\n+    protected List<Transition<EnvStackConfigUpdatesState, EnvStackConfigUpdatesStateSelectors>> getTransitions() {\n+        return TRANSITIONS;\n+    }\n+\n+    @Override\n+    protected FlowEdgeConfig<EnvStackConfigUpdatesState, EnvStackConfigUpdatesStateSelectors> getEdgeConfig() {\n+        return new FlowEdgeConfig<>(INIT_STATE, FINAL_STATE, STACK_CONFIG_UPDATES_FAILED_STATE,\n+            HANDLE_FAILED_ENV_STACK_CONIFG_UPDATES_EVENT);\n+    }\n+\n+    @Override\n+    public EnvStackConfigUpdatesStateSelectors[] getEvents() {\n+        return EnvStackConfigUpdatesStateSelectors.values();\n+    }\n+\n+    @Override\n+    public EnvStackConfigUpdatesStateSelectors[] getInitEvents() {\n+        return new EnvStackConfigUpdatesStateSelectors[]{ENV_STACK_CONFIG_UPDATES_START_EVENT};\n+    }\n+\n+    @Override\n+    public String getDisplayName() {\n+        return \"Update all Environment Stacks configuration\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyNzQ0Nw==", "bodyText": ".event() is might be better", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462227447", "createdAt": "2020-07-29T11:25:24Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/config/update/handler/StackConfigUpdatesHandler.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sequenceiq.environment.environment.flow.config.update.handler;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesEvent;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesEvent.EnvStackConfigUpdatesEventBuilder;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesHandlerSelectors;\n+import com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors;\n+import com.sequenceiq.environment.environment.service.stack.StackPollerService;\n+import com.sequenceiq.flow.core.FlowConstants;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+import org.springframework.stereotype.Component;\n+import reactor.bus.Event;\n+\n+@Component\n+public class StackConfigUpdatesHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private final StackPollerService stackPollerService;\n+\n+    public StackConfigUpdatesHandler(EventSender eventSender,\n+        StackPollerService stackPollerService) {\n+        super(eventSender);\n+        this.stackPollerService = stackPollerService;\n+    }\n+\n+    @Override\n+    public String selector() {\n+        return EnvStackConfigUpdatesHandlerSelectors.STACK_CONFIG_UPDATES_HANDLER_EVENT\n+            .name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyODEzNA==", "bodyText": "please add some tests", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462228134", "createdAt": "2020-07-29T11:26:58Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/poller/StackPollerProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.environment.environment.poller;\n+\n+import com.dyngr.core.AttemptMaker;\n+import com.dyngr.core.AttemptResult;\n+import com.dyngr.core.AttemptResults;\n+import com.dyngr.core.AttemptState;\n+import com.sequenceiq.environment.environment.service.stack.StackService;\n+import com.sequenceiq.flow.core.FlowConstants;\n+import com.sequenceiq.flow.domain.FlowLog;\n+import com.sequenceiq.flow.service.flowlog.FlowLogDBService;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.BadRequestException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackPollerProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyODI3NQ==", "bodyText": "not used, please consider adding some log", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462228275", "createdAt": "2020-07-29T11:27:14Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/poller/StackPollerProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.environment.environment.poller;\n+\n+import com.dyngr.core.AttemptMaker;\n+import com.dyngr.core.AttemptResult;\n+import com.dyngr.core.AttemptResults;\n+import com.dyngr.core.AttemptState;\n+import com.sequenceiq.environment.environment.service.stack.StackService;\n+import com.sequenceiq.flow.core.FlowConstants;\n+import com.sequenceiq.flow.domain.FlowLog;\n+import com.sequenceiq.flow.service.flowlog.FlowLogDBService;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.BadRequestException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackPollerProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackPollerProvider.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIzMTAxNA==", "bodyText": "iinstead of checking the flow maybe you should rely on EnvironmentInMemoryStateStore, but I think we will need somebody from env team to help out here", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462231014", "createdAt": "2020-07-29T11:32:33Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/poller/StackPollerProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.environment.environment.poller;\n+\n+import com.dyngr.core.AttemptMaker;\n+import com.dyngr.core.AttemptResult;\n+import com.dyngr.core.AttemptResults;\n+import com.dyngr.core.AttemptState;\n+import com.sequenceiq.environment.environment.service.stack.StackService;\n+import com.sequenceiq.flow.core.FlowConstants;\n+import com.sequenceiq.flow.domain.FlowLog;\n+import com.sequenceiq.flow.service.flowlog.FlowLogDBService;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.BadRequestException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackPollerProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackPollerProvider.class);\n+\n+    private final StackService stackService;\n+\n+    private final FlowLogDBService flowLogDBService;\n+\n+    public StackPollerProvider(\n+        StackService stackService,\n+        FlowLogDBService flowLogDBService) {\n+        this.stackService = stackService;\n+        this.flowLogDBService = flowLogDBService;\n+    }\n+\n+    public AttemptMaker<Void> stackUpdateConfigPoller(List<String> stackNames, Long envId, String flowId) {\n+        List<String> mutableNamesList = new ArrayList<>(stackNames);\n+        return () -> {\n+            Optional<FlowLog> flowLog = flowLogDBService.getLastFlowLog(flowId);\n+            if (flowLog.isPresent() && flowLog.get().getCurrentState().equals(FlowConstants.CANCELLED_STATE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1MDQzNg==", "bodyText": "if there is some error calling CB here, it's not really handled. Is it on purpose to leave it to the handler to handle it?", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462250436", "createdAt": "2020-07-29T12:11:00Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/stack/StackPollerService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sequenceiq.environment.environment.service.stack;\n+\n+import com.dyngr.Polling;\n+import com.dyngr.core.AttemptMaker;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.StackV4Endpoint;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.StackViewV4Responses;\n+import com.sequenceiq.environment.environment.poller.StackPollerProvider;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class StackPollerService {\n+\n+    private static final List<Status> SKIPPED_STATES = List.of(\n+        Status.CREATE_FAILED,\n+        Status.STOPPED,\n+        Status.STOP_IN_PROGRESS,\n+        Status.STOP_REQUESTED,\n+        Status.DELETE_IN_PROGRESS,\n+        Status.DELETE_COMPLETED,\n+        Status.DELETED_ON_PROVIDER_SIDE,\n+        Status.DELETE_FAILED,\n+        Status.PRE_DELETE_IN_PROGRESS,\n+        Status.START_FAILED,\n+        Status.EXTERNAL_DATABASE_CREATION_FAILED,\n+        Status.EXTERNAL_DATABASE_DELETION_FINISHED,\n+        Status.EXTERNAL_DATABASE_DELETION_FAILED\n+    );\n+\n+    private final StackV4Endpoint stackV4Endpoint;\n+\n+    private final StackPollerProvider stackPollerProvider;\n+\n+    @Value(\"${env.stack.config.update.polling.attemptCount:120}\")\n+    private Integer attemptCount;\n+\n+    @Value(\"${env.stack.config.update.sleep.time.seconds:60}\")\n+    private Integer sleepTime;\n+\n+    public StackPollerService(\n+        StackV4Endpoint stackV4Endpoint,\n+        StackPollerProvider stackPollerProvider) {\n+        this.stackV4Endpoint = stackV4Endpoint;\n+        this.stackPollerProvider = stackPollerProvider;\n+    }\n+\n+    public void updateStackConfigurations(Long envId, String envCrn, String flowId) {\n+        List<String> stackNames = getUpdateableStacks(envCrn);\n+        startStackConfigUpdatePolling(envCrn, stackNames,\n+            stackPollerProvider.stackUpdateConfigPoller(stackNames, envId, flowId));\n+    }\n+\n+    private void startStackConfigUpdatePolling(String envCrn, List<String> stackNames,\n+        AttemptMaker<Void> attemptMaker) {\n+        if (CollectionUtils.isNotEmpty(stackNames)) {\n+            Polling.stopAfterAttempt(attemptCount)\n+                .stopIfException(true)\n+                .waitPeriodly(sleepTime, TimeUnit.SECONDS)\n+                .run(attemptMaker);\n+        }\n+    }\n+\n+    private List<String> getUpdateableStacks(String envCrn) {\n+        StackViewV4Responses stackViewV4Responses = stackV4Endpoint.list(0L, envCrn, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1MTE5Nw==", "bodyText": "envCrn is not used", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462251197", "createdAt": "2020-07-29T12:12:27Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/stack/StackPollerService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sequenceiq.environment.environment.service.stack;\n+\n+import com.dyngr.Polling;\n+import com.dyngr.core.AttemptMaker;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.StackV4Endpoint;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.StackViewV4Responses;\n+import com.sequenceiq.environment.environment.poller.StackPollerProvider;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class StackPollerService {\n+\n+    private static final List<Status> SKIPPED_STATES = List.of(\n+        Status.CREATE_FAILED,\n+        Status.STOPPED,\n+        Status.STOP_IN_PROGRESS,\n+        Status.STOP_REQUESTED,\n+        Status.DELETE_IN_PROGRESS,\n+        Status.DELETE_COMPLETED,\n+        Status.DELETED_ON_PROVIDER_SIDE,\n+        Status.DELETE_FAILED,\n+        Status.PRE_DELETE_IN_PROGRESS,\n+        Status.START_FAILED,\n+        Status.EXTERNAL_DATABASE_CREATION_FAILED,\n+        Status.EXTERNAL_DATABASE_DELETION_FINISHED,\n+        Status.EXTERNAL_DATABASE_DELETION_FAILED\n+    );\n+\n+    private final StackV4Endpoint stackV4Endpoint;\n+\n+    private final StackPollerProvider stackPollerProvider;\n+\n+    @Value(\"${env.stack.config.update.polling.attemptCount:120}\")\n+    private Integer attemptCount;\n+\n+    @Value(\"${env.stack.config.update.sleep.time.seconds:60}\")\n+    private Integer sleepTime;\n+\n+    public StackPollerService(\n+        StackV4Endpoint stackV4Endpoint,\n+        StackPollerProvider stackPollerProvider) {\n+        this.stackV4Endpoint = stackV4Endpoint;\n+        this.stackPollerProvider = stackPollerProvider;\n+    }\n+\n+    public void updateStackConfigurations(Long envId, String envCrn, String flowId) {\n+        List<String> stackNames = getUpdateableStacks(envCrn);\n+        startStackConfigUpdatePolling(envCrn, stackNames,\n+            stackPollerProvider.stackUpdateConfigPoller(stackNames, envId, flowId));\n+    }\n+\n+    private void startStackConfigUpdatePolling(String envCrn, List<String> stackNames,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1MTMzMg==", "bodyText": "unnecessary linebreak", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462251332", "createdAt": "2020-07-29T12:12:43Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/stack/StackPollerService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sequenceiq.environment.environment.service.stack;\n+\n+import com.dyngr.Polling;\n+import com.dyngr.core.AttemptMaker;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.StackV4Endpoint;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.StackViewV4Responses;\n+import com.sequenceiq.environment.environment.poller.StackPollerProvider;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class StackPollerService {\n+\n+    private static final List<Status> SKIPPED_STATES = List.of(\n+        Status.CREATE_FAILED,\n+        Status.STOPPED,\n+        Status.STOP_IN_PROGRESS,\n+        Status.STOP_REQUESTED,\n+        Status.DELETE_IN_PROGRESS,\n+        Status.DELETE_COMPLETED,\n+        Status.DELETED_ON_PROVIDER_SIDE,\n+        Status.DELETE_FAILED,\n+        Status.PRE_DELETE_IN_PROGRESS,\n+        Status.START_FAILED,\n+        Status.EXTERNAL_DATABASE_CREATION_FAILED,\n+        Status.EXTERNAL_DATABASE_DELETION_FINISHED,\n+        Status.EXTERNAL_DATABASE_DELETION_FAILED\n+    );\n+\n+    private final StackV4Endpoint stackV4Endpoint;\n+\n+    private final StackPollerProvider stackPollerProvider;\n+\n+    @Value(\"${env.stack.config.update.polling.attemptCount:120}\")\n+    private Integer attemptCount;\n+\n+    @Value(\"${env.stack.config.update.sleep.time.seconds:60}\")\n+    private Integer sleepTime;\n+\n+    public StackPollerService(\n+        StackV4Endpoint stackV4Endpoint,\n+        StackPollerProvider stackPollerProvider) {\n+        this.stackV4Endpoint = stackV4Endpoint;\n+        this.stackPollerProvider = stackPollerProvider;\n+    }\n+\n+    public void updateStackConfigurations(Long envId, String envCrn, String flowId) {\n+        List<String> stackNames = getUpdateableStacks(envCrn);\n+        startStackConfigUpdatePolling(envCrn, stackNames,\n+            stackPollerProvider.stackUpdateConfigPoller(stackNames, envId, flowId));\n+    }\n+\n+    private void startStackConfigUpdatePolling(String envCrn, List<String> stackNames,\n+        AttemptMaker<Void> attemptMaker) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1MTk5NA==", "bodyText": "maybe we should switch to stopAfterDelay, os the attempt count won't have affect on how long we poll this. what do you think?", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462251994", "createdAt": "2020-07-29T12:13:58Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/stack/StackPollerService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sequenceiq.environment.environment.service.stack;\n+\n+import com.dyngr.Polling;\n+import com.dyngr.core.AttemptMaker;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.StackV4Endpoint;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.StackViewV4Responses;\n+import com.sequenceiq.environment.environment.poller.StackPollerProvider;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class StackPollerService {\n+\n+    private static final List<Status> SKIPPED_STATES = List.of(\n+        Status.CREATE_FAILED,\n+        Status.STOPPED,\n+        Status.STOP_IN_PROGRESS,\n+        Status.STOP_REQUESTED,\n+        Status.DELETE_IN_PROGRESS,\n+        Status.DELETE_COMPLETED,\n+        Status.DELETED_ON_PROVIDER_SIDE,\n+        Status.DELETE_FAILED,\n+        Status.PRE_DELETE_IN_PROGRESS,\n+        Status.START_FAILED,\n+        Status.EXTERNAL_DATABASE_CREATION_FAILED,\n+        Status.EXTERNAL_DATABASE_DELETION_FINISHED,\n+        Status.EXTERNAL_DATABASE_DELETION_FAILED\n+    );\n+\n+    private final StackV4Endpoint stackV4Endpoint;\n+\n+    private final StackPollerProvider stackPollerProvider;\n+\n+    @Value(\"${env.stack.config.update.polling.attemptCount:120}\")\n+    private Integer attemptCount;\n+\n+    @Value(\"${env.stack.config.update.sleep.time.seconds:60}\")\n+    private Integer sleepTime;\n+\n+    public StackPollerService(\n+        StackV4Endpoint stackV4Endpoint,\n+        StackPollerProvider stackPollerProvider) {\n+        this.stackV4Endpoint = stackV4Endpoint;\n+        this.stackPollerProvider = stackPollerProvider;\n+    }\n+\n+    public void updateStackConfigurations(Long envId, String envCrn, String flowId) {\n+        List<String> stackNames = getUpdateableStacks(envCrn);\n+        startStackConfigUpdatePolling(envCrn, stackNames,\n+            stackPollerProvider.stackUpdateConfigPoller(stackNames, envId, flowId));\n+    }\n+\n+    private void startStackConfigUpdatePolling(String envCrn, List<String> stackNames,\n+        AttemptMaker<Void> attemptMaker) {\n+        if (CollectionUtils.isNotEmpty(stackNames)) {\n+            Polling.stopAfterAttempt(attemptCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1MzYyMQ==", "bodyText": "why don't we use crn here? I think crn provides some additional uniqueness", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462253621", "createdAt": "2020-07-29T12:16:56Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/poller/StackPollerProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.environment.environment.poller;\n+\n+import com.dyngr.core.AttemptMaker;\n+import com.dyngr.core.AttemptResult;\n+import com.dyngr.core.AttemptResults;\n+import com.dyngr.core.AttemptState;\n+import com.sequenceiq.environment.environment.service.stack.StackService;\n+import com.sequenceiq.flow.core.FlowConstants;\n+import com.sequenceiq.flow.domain.FlowLog;\n+import com.sequenceiq.flow.service.flowlog.FlowLogDBService;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.BadRequestException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackPollerProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackPollerProvider.class);\n+\n+    private final StackService stackService;\n+\n+    private final FlowLogDBService flowLogDBService;\n+\n+    public StackPollerProvider(\n+        StackService stackService,\n+        FlowLogDBService flowLogDBService) {\n+        this.stackService = stackService;\n+        this.flowLogDBService = flowLogDBService;\n+    }\n+\n+    public AttemptMaker<Void> stackUpdateConfigPoller(List<String> stackNames, Long envId, String flowId) {\n+        List<String> mutableNamesList = new ArrayList<>(stackNames);\n+        return () -> {\n+            Optional<FlowLog> flowLog = flowLogDBService.getLastFlowLog(flowId);\n+            if (flowLog.isPresent() && flowLog.get().getCurrentState().equals(FlowConstants.CANCELLED_STATE)) {\n+                return AttemptResults.finishWith(null);\n+            }\n+            List<String> remaining = new ArrayList<>();\n+            List<AttemptResult<Void>> results = collectStackUpdateConfigResults(mutableNamesList,\n+                remaining, envId);\n+            mutableNamesList.retainAll(remaining);\n+            return evaluateResult(results);\n+        };\n+    }\n+\n+    private List<AttemptResult<Void>> collectStackUpdateConfigResults(List<String> stackNames,\n+        List<String> remaining, Long envId) {\n+        return stackNames.stream()\n+            .map(stackName -> fetchStackUpdateConfigResults(remaining, stackName, envId))\n+            .collect(Collectors.toList());\n+    }\n+\n+    private AttemptResult<Void> fetchStackUpdateConfigResults(List<String> remainingStacks,\n+        String stackName, Long envId) {\n+        try {\n+            stackService.triggerConfigUpdateForStack(stackName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1Mzg2Ng==", "bodyText": "env id not used\nline break", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462253866", "createdAt": "2020-07-29T12:17:21Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/poller/StackPollerProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.environment.environment.poller;\n+\n+import com.dyngr.core.AttemptMaker;\n+import com.dyngr.core.AttemptResult;\n+import com.dyngr.core.AttemptResults;\n+import com.dyngr.core.AttemptState;\n+import com.sequenceiq.environment.environment.service.stack.StackService;\n+import com.sequenceiq.flow.core.FlowConstants;\n+import com.sequenceiq.flow.domain.FlowLog;\n+import com.sequenceiq.flow.service.flowlog.FlowLogDBService;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.BadRequestException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackPollerProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackPollerProvider.class);\n+\n+    private final StackService stackService;\n+\n+    private final FlowLogDBService flowLogDBService;\n+\n+    public StackPollerProvider(\n+        StackService stackService,\n+        FlowLogDBService flowLogDBService) {\n+        this.stackService = stackService;\n+        this.flowLogDBService = flowLogDBService;\n+    }\n+\n+    public AttemptMaker<Void> stackUpdateConfigPoller(List<String> stackNames, Long envId, String flowId) {\n+        List<String> mutableNamesList = new ArrayList<>(stackNames);\n+        return () -> {\n+            Optional<FlowLog> flowLog = flowLogDBService.getLastFlowLog(flowId);\n+            if (flowLog.isPresent() && flowLog.get().getCurrentState().equals(FlowConstants.CANCELLED_STATE)) {\n+                return AttemptResults.finishWith(null);\n+            }\n+            List<String> remaining = new ArrayList<>();\n+            List<AttemptResult<Void>> results = collectStackUpdateConfigResults(mutableNamesList,\n+                remaining, envId);\n+            mutableNamesList.retainAll(remaining);\n+            return evaluateResult(results);\n+        };\n+    }\n+\n+    private List<AttemptResult<Void>> collectStackUpdateConfigResults(List<String> stackNames,\n+        List<String> remaining, Long envId) {\n+        return stackNames.stream()\n+            .map(stackName -> fetchStackUpdateConfigResults(remaining, stackName, envId))\n+            .collect(Collectors.toList());\n+    }\n+\n+    private AttemptResult<Void> fetchStackUpdateConfigResults(List<String> remainingStacks,\n+        String stackName, Long envId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1OTA2OQ==", "bodyText": "so instead of passing in the remainingStacks paramater and adding stuff, why don't we return with AttemptResult<String>?", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462259069", "createdAt": "2020-07-29T12:26:46Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/poller/StackPollerProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.environment.environment.poller;\n+\n+import com.dyngr.core.AttemptMaker;\n+import com.dyngr.core.AttemptResult;\n+import com.dyngr.core.AttemptResults;\n+import com.dyngr.core.AttemptState;\n+import com.sequenceiq.environment.environment.service.stack.StackService;\n+import com.sequenceiq.flow.core.FlowConstants;\n+import com.sequenceiq.flow.domain.FlowLog;\n+import com.sequenceiq.flow.service.flowlog.FlowLogDBService;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.BadRequestException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackPollerProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackPollerProvider.class);\n+\n+    private final StackService stackService;\n+\n+    private final FlowLogDBService flowLogDBService;\n+\n+    public StackPollerProvider(\n+        StackService stackService,\n+        FlowLogDBService flowLogDBService) {\n+        this.stackService = stackService;\n+        this.flowLogDBService = flowLogDBService;\n+    }\n+\n+    public AttemptMaker<Void> stackUpdateConfigPoller(List<String> stackNames, Long envId, String flowId) {\n+        List<String> mutableNamesList = new ArrayList<>(stackNames);\n+        return () -> {\n+            Optional<FlowLog> flowLog = flowLogDBService.getLastFlowLog(flowId);\n+            if (flowLog.isPresent() && flowLog.get().getCurrentState().equals(FlowConstants.CANCELLED_STATE)) {\n+                return AttemptResults.finishWith(null);\n+            }\n+            List<String> remaining = new ArrayList<>();\n+            List<AttemptResult<Void>> results = collectStackUpdateConfigResults(mutableNamesList,\n+                remaining, envId);\n+            mutableNamesList.retainAll(remaining);\n+            return evaluateResult(results);\n+        };\n+    }\n+\n+    private List<AttemptResult<Void>> collectStackUpdateConfigResults(List<String> stackNames,\n+        List<String> remaining, Long envId) {\n+        return stackNames.stream()\n+            .map(stackName -> fetchStackUpdateConfigResults(remaining, stackName, envId))\n+            .collect(Collectors.toList());\n+    }\n+\n+    private AttemptResult<Void> fetchStackUpdateConfigResults(List<String> remainingStacks,\n+        String stackName, Long envId) {\n+        try {\n+            stackService.triggerConfigUpdateForStack(stackName);\n+            return AttemptResults.finishWith(null);\n+        } catch (BadRequestException e) {\n+            remainingStacks.add(stackName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2MDcyMQ==", "bodyText": "I think you should use anyMatch here instead of count and filter if I understand the code well", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462260721", "createdAt": "2020-07-29T12:29:47Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/poller/StackPollerProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.environment.environment.poller;\n+\n+import com.dyngr.core.AttemptMaker;\n+import com.dyngr.core.AttemptResult;\n+import com.dyngr.core.AttemptResults;\n+import com.dyngr.core.AttemptState;\n+import com.sequenceiq.environment.environment.service.stack.StackService;\n+import com.sequenceiq.flow.core.FlowConstants;\n+import com.sequenceiq.flow.domain.FlowLog;\n+import com.sequenceiq.flow.service.flowlog.FlowLogDBService;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.BadRequestException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackPollerProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackPollerProvider.class);\n+\n+    private final StackService stackService;\n+\n+    private final FlowLogDBService flowLogDBService;\n+\n+    public StackPollerProvider(\n+        StackService stackService,\n+        FlowLogDBService flowLogDBService) {\n+        this.stackService = stackService;\n+        this.flowLogDBService = flowLogDBService;\n+    }\n+\n+    public AttemptMaker<Void> stackUpdateConfigPoller(List<String> stackNames, Long envId, String flowId) {\n+        List<String> mutableNamesList = new ArrayList<>(stackNames);\n+        return () -> {\n+            Optional<FlowLog> flowLog = flowLogDBService.getLastFlowLog(flowId);\n+            if (flowLog.isPresent() && flowLog.get().getCurrentState().equals(FlowConstants.CANCELLED_STATE)) {\n+                return AttemptResults.finishWith(null);\n+            }\n+            List<String> remaining = new ArrayList<>();\n+            List<AttemptResult<Void>> results = collectStackUpdateConfigResults(mutableNamesList,\n+                remaining, envId);\n+            mutableNamesList.retainAll(remaining);\n+            return evaluateResult(results);\n+        };\n+    }\n+\n+    private List<AttemptResult<Void>> collectStackUpdateConfigResults(List<String> stackNames,\n+        List<String> remaining, Long envId) {\n+        return stackNames.stream()\n+            .map(stackName -> fetchStackUpdateConfigResults(remaining, stackName, envId))\n+            .collect(Collectors.toList());\n+    }\n+\n+    private AttemptResult<Void> fetchStackUpdateConfigResults(List<String> remainingStacks,\n+        String stackName, Long envId) {\n+        try {\n+            stackService.triggerConfigUpdateForStack(stackName);\n+            return AttemptResults.finishWith(null);\n+        } catch (BadRequestException e) {\n+            remainingStacks.add(stackName);\n+            return AttemptResults.justContinue();\n+        } catch (Exception e) {\n+            return AttemptResults.breakFor(e);\n+        }\n+    }\n+\n+    AttemptResult<Void> evaluateResult(List<AttemptResult<Void>> results) {\n+        Optional<AttemptResult<Void>> error = results.stream()\n+            .filter(it -> it.getState() == AttemptState.BREAK).findFirst();\n+        if (error.isPresent()) {\n+            return error.get();\n+        }\n+        long count = results.stream().filter(it -> it.getState() == AttemptState.CONTINUE).count();\n+        if (count > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2NDcxMA==", "bodyText": "why are you fetching the env here if you fetch it in triggerStackConfigUpdates again? this method actually uses the same findByResourceCrnAndAccountIdAndArchivedIsFalse, just calls a converter later", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462264710", "createdAt": "2020-07-29T12:36:52Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentStackConfigUpdateService.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.sequenceiq.environment.environment.service;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.common.exception.NotFoundException;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.EnvironmentReactorFlowManager;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EnvironmentStackConfigUpdateService {\n+    private final EnvironmentService environmentService;\n+\n+    private final EnvironmentReactorFlowManager reactorFlowManager;\n+\n+    public EnvironmentStackConfigUpdateService(\n+        EnvironmentService environmentService,\n+        EnvironmentReactorFlowManager reactorFlowManager) {\n+        this.environmentService = environmentService;\n+        this.reactorFlowManager = reactorFlowManager;\n+    }\n+\n+    public void updateAllStackConfigsByCrn(String crn) {\n+        String accountId = Crn.fromString(crn).getAccountId();\n+        EnvironmentDto environment = environmentService.getByCrnAndAccountId(crn, accountId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2NTE1Ng==", "bodyText": "are you sure about this?", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r462265156", "createdAt": "2020-07-29T12:37:38Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/v1/EnvironmentController.java", "diffHunk": "@@ -306,4 +311,10 @@ public Object getCreateEnvironmentForCli(EnvironmentRequest environmentRequest)\n         Credential credential = credentialService.getByNameForAccountId(environmentRequest.getCredentialName(), accountId, ENVIRONMENT);\n         return environmentService.getCreateEnvironmentForCli(environmentRequest, credential.getCloudPlatform());\n     }\n+\n+    @Override\n+    @DisableCheckPermissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d050661c401008cb0e4e853ad9191fdc19be0c96", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d050661c401008cb0e4e853ad9191fdc19be0c96", "committedDate": "2020-07-27T21:04:30Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}, "afterCommit": {"oid": "f687be18dee7f04d12886049143cb8adc81463a5", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/f687be18dee7f04d12886049143cb8adc81463a5", "committedDate": "2020-07-30T03:39:30Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f687be18dee7f04d12886049143cb8adc81463a5", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/f687be18dee7f04d12886049143cb8adc81463a5", "committedDate": "2020-07-30T03:39:30Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}, "afterCommit": {"oid": "7aa92ae1201b85d66d37dbb7d62baca09ef79b7d", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7aa92ae1201b85d66d37dbb7d62baca09ef79b7d", "committedDate": "2020-07-30T15:36:07Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7aa92ae1201b85d66d37dbb7d62baca09ef79b7d", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7aa92ae1201b85d66d37dbb7d62baca09ef79b7d", "committedDate": "2020-07-30T15:36:07Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}, "afterCommit": {"oid": "769011dade94e6ef024ac4b427c4b28b42cee5ed", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/769011dade94e6ef024ac4b427c4b28b42cee5ed", "committedDate": "2020-07-31T16:38:25Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTI2MjQy", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-459926242", "createdAt": "2020-08-03T10:41:16Z", "commit": {"oid": "769011dade94e6ef024ac4b427c4b28b42cee5ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo0MToxNlrOG60ueA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo0MToxNlrOG60ueA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNDQ1Ng==", "bodyText": "nit: this could be also event()", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r464334456", "createdAt": "2020-08-03T10:41:16Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/config/update/event/EnvStackConfigUpdatesFailedEvent.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.sequenceiq.environment.environment.flow.config.update.event;\n+\n+\n+\n+import static com.sequenceiq.environment.environment.flow.config.update.event.EnvStackConfigUpdatesStateSelectors.FAILED_ENV_STACK_CONIFG_UPDATES_EVENT;\n+\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.environment.environment.EnvironmentStatus;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.flow.reactor.api.event.BaseFailedFlowEvent;\n+\n+public class EnvStackConfigUpdatesFailedEvent extends BaseFailedFlowEvent implements Selectable {\n+\n+    private final EnvironmentDto environmentDto;\n+\n+    private final EnvironmentStatus environmentStatus;\n+\n+    public EnvStackConfigUpdatesFailedEvent(EnvironmentDto environmentDto, Exception exception, EnvironmentStatus environmentStatus) {\n+        super(FAILED_ENV_STACK_CONIFG_UPDATES_EVENT.name(), environmentDto.getResourceId(),\n+                environmentDto.getName(), environmentDto.getResourceCrn(), exception);\n+        this.environmentDto = environmentDto;\n+        this.environmentStatus = environmentStatus;\n+    }\n+\n+    @Override\n+    public String selector() {\n+        return FAILED_ENV_STACK_CONIFG_UPDATES_EVENT.name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769011dade94e6ef024ac4b427c4b28b42cee5ed"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTM1MDk3", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-459935097", "createdAt": "2020-08-03T10:56:55Z", "commit": {"oid": "769011dade94e6ef024ac4b427c4b28b42cee5ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo1Njo1NVrOG61JWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo1Njo1NVrOG61JWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0MTMzOQ==", "bodyText": "I think if you switch to safeFromString method it should guarantee that it's a valid crn and it has account id or an Exception would be thrown", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r464341339", "createdAt": "2020-08-03T10:56:55Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentStackConfigUpdateService.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.sequenceiq.environment.environment.service;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.common.exception.NotFoundException;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.flow.EnvironmentReactorFlowManager;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EnvironmentStackConfigUpdateService {\n+    private final EnvironmentService environmentService;\n+\n+    private final EnvironmentReactorFlowManager reactorFlowManager;\n+\n+    public EnvironmentStackConfigUpdateService(\n+        EnvironmentService environmentService,\n+        EnvironmentReactorFlowManager reactorFlowManager) {\n+        this.environmentService = environmentService;\n+        this.reactorFlowManager = reactorFlowManager;\n+    }\n+\n+    public void updateAllStackConfigsByCrn(String envCrn) {\n+        String accountId = Crn.fromString(envCrn).getAccountId();\n+        if (accountId == null) {\n+            throw new NotFoundException(String.format(\"No account id found for crn '%s'\", envCrn));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769011dade94e6ef024ac4b427c4b28b42cee5ed"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "769011dade94e6ef024ac4b427c4b28b42cee5ed", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/769011dade94e6ef024ac4b427c4b28b42cee5ed", "committedDate": "2020-07-31T16:38:25Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}, "afterCommit": {"oid": "d167dcd04d5e94fd9ae3e927e7b655edbfe62ee3", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d167dcd04d5e94fd9ae3e927e7b655edbfe62ee3", "committedDate": "2020-08-03T14:37:30Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMDkxOTAw", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-460091900", "createdAt": "2020-08-03T14:50:12Z", "commit": {"oid": "d167dcd04d5e94fd9ae3e927e7b655edbfe62ee3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDo1MDoxMlrOG68n9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDo1MDoxMlrOG68n9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2Mzg2Mw==", "bodyText": "I am not sure that is it affects the UI but probably @keyki know this", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r464463863", "createdAt": "2020-08-03T14:50:12Z", "author": {"login": "doktoric"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/StackV4Endpoint.java", "diffHunk": "@@ -275,10 +275,10 @@ FlowIdentifier setClusterMaintenanceMode(@PathParam(\"workspaceId\") Long workspac\n     FlowIdentifier updateSaltByName(@PathParam(\"workspaceId\") Long workspaceId, @PathParam(\"name\") String name);\n \n     @PUT\n-    @Path(\"{name}/pillar_config_update\")\n+    @Path(\"crn/{crn}/pillar_config_update\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d167dcd04d5e94fd9ae3e927e7b655edbfe62ee3"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d167dcd04d5e94fd9ae3e927e7b655edbfe62ee3", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d167dcd04d5e94fd9ae3e927e7b655edbfe62ee3", "committedDate": "2020-08-03T14:37:30Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}, "afterCommit": {"oid": "11d41d542fd0ba45a56564a225c8d35955491775", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/11d41d542fd0ba45a56564a225c8d35955491775", "committedDate": "2020-08-04T19:21:25Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzM5MjQ1", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-461739245", "createdAt": "2020-08-05T14:48:17Z", "commit": {"oid": "11d41d542fd0ba45a56564a225c8d35955491775"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzc5Mzc2", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-461779376", "createdAt": "2020-08-05T15:30:28Z", "commit": {"oid": "11d41d542fd0ba45a56564a225c8d35955491775"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMDoyOFrOG8PAHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMDoyOFrOG8PAHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMzUzMw==", "bodyText": "could you add some test for this change? either via RestUrlParserTest or you could create a new test class\nthanks", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r465813533", "createdAt": "2020-08-05T15:30:28Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/urlparsers/V4ExistingResourceByCrnOrNameRestUrlParser.java", "diffHunk": "@@ -18,11 +18,11 @@\n     // v4/{workspaceId}/blueprints/name/{name}\n     // v4/{workspaceId}/blueprints/crn/{name}\n     private static final Pattern PATTERN = Pattern\n-            .compile(\"v4/(\\\\d+)/(blueprints|image_catalogs|recipes|stacks|distrox|cluster_templates)/(?:name|crn)/([^/]+)\");\n+            .compile(\"v4/(\\\\d+)/(blueprints|image_catalogs|recipes|stacks|distrox|cluster_templates)/(?:name|crn)/([^/]+)(/\\\\w+)?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d41d542fd0ba45a56564a225c8d35955491775"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzg4Nzkx", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-461788791", "createdAt": "2020-08-05T15:41:00Z", "commit": {"oid": "11d41d542fd0ba45a56564a225c8d35955491775"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTo0MTowMFrOG8PcLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTo0MTowMFrOG8PcLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyMDcxNg==", "bodyText": "nit: this is not necessary as safeFromString will throw an exception in case crn doesn't match the pattern, which enforces the accountid can't be empty.", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r465820716", "createdAt": "2020-08-05T15:41:00Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentStackConfigUpdateService.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.sequenceiq.environment.environment.service;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.common.exception.NotFoundException;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.flow.EnvironmentReactorFlowManager;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EnvironmentStackConfigUpdateService {\n+    private final EnvironmentService environmentService;\n+\n+    private final EnvironmentReactorFlowManager reactorFlowManager;\n+\n+    public EnvironmentStackConfigUpdateService(\n+        EnvironmentService environmentService,\n+        EnvironmentReactorFlowManager reactorFlowManager) {\n+        this.environmentService = environmentService;\n+        this.reactorFlowManager = reactorFlowManager;\n+    }\n+\n+    public void updateAllStackConfigsByCrn(String envCrn) {\n+        String accountId = Crn.safeFromString(envCrn).getAccountId();\n+        if (accountId == null) {\n+            throw new NotFoundException(String.format(\"No account id found for crn '%s'\", envCrn));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d41d542fd0ba45a56564a225c8d35955491775"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxODAwNjEz", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-461800613", "createdAt": "2020-08-05T15:54:32Z", "commit": {"oid": "11d41d542fd0ba45a56564a225c8d35955491775"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTo1NDozMlrOG8QAYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTo1NDozMlrOG8QAYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyOTk4Nw==", "bodyText": "this is not used", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r465829987", "createdAt": "2020-08-05T15:54:32Z", "author": {"login": "lacikaaa"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/doc/environment/EnvironmentModelDescription.java", "diffHunk": "@@ -93,6 +93,7 @@\n \n     public static final String PROXYCONFIG_NAME = \"Name of the proxyconfig of the environment.\";\n     public static final String PROXYCONFIG_RESPONSE = \"ProxyConfig attached to the environment.\";\n+    public static final String UPDATE_STACKS_CONFIG = \"Update the configuration for all Stacks in the Environment.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d41d542fd0ba45a56564a225c8d35955491775"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11d41d542fd0ba45a56564a225c8d35955491775", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/11d41d542fd0ba45a56564a225c8d35955491775", "committedDate": "2020-08-04T19:21:25Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}, "afterCommit": {"oid": "ff8a03e38089f9448bb2464907a84ba7fbf2798a", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ff8a03e38089f9448bb2464907a84ba7fbf2798a", "committedDate": "2020-08-05T16:04:22Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff8a03e38089f9448bb2464907a84ba7fbf2798a", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ff8a03e38089f9448bb2464907a84ba7fbf2798a", "committedDate": "2020-08-05T16:04:22Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}, "afterCommit": {"oid": "557053d4030382c68c7cb7c905666337cb98f06f", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/557053d4030382c68c7cb7c905666337cb98f06f", "committedDate": "2020-08-05T21:08:43Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDMwMzM3", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-462030337", "createdAt": "2020-08-05T21:16:48Z", "commit": {"oid": "557053d4030382c68c7cb7c905666337cb98f06f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMjgyODI2", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-462282826", "createdAt": "2020-08-06T08:10:29Z", "commit": {"oid": "557053d4030382c68c7cb7c905666337cb98f06f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxMDoyOVrOG8oFZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxMDoyOVrOG8oFZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNDQ4Nw==", "bodyText": "I think this change broke the API compatibility", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#discussion_r466224487", "createdAt": "2020-08-06T08:10:29Z", "author": {"login": "doktoric"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/StackV4Endpoint.java", "diffHunk": "@@ -293,11 +293,10 @@ FlowIdentifier updateSaltByName(@PathParam(\"workspaceId\") Long workspaceId, @Pat\n             @AccountId @QueryParam(\"accountId\") String accountId);\n \n     @PUT\n-    @Path(\"{name}/pillar_config_update\")\n+    @Path(\"crn/{crn}/pillar_config_update\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557053d4030382c68c7cb7c905666337cb98f06f"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "557053d4030382c68c7cb7c905666337cb98f06f", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/557053d4030382c68c7cb7c905666337cb98f06f", "committedDate": "2020-08-05T21:08:43Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}, "afterCommit": {"oid": "bb77c7410d793e79c2074ca3d27a381f24e62ed2", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/bb77c7410d793e79c2074ca3d27a381f24e62ed2", "committedDate": "2020-08-06T18:38:45Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb77c7410d793e79c2074ca3d27a381f24e62ed2", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/bb77c7410d793e79c2074ca3d27a381f24e62ed2", "committedDate": "2020-08-06T18:38:45Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}, "afterCommit": {"oid": "2fee47ec14c94dde7bed5ad5b70737804efcccf9", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2fee47ec14c94dde7bed5ad5b70737804efcccf9", "committedDate": "2020-08-07T17:53:17Z", "message": "code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MDA2MzAy", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-464006302", "createdAt": "2020-08-10T07:27:49Z", "commit": {"oid": "2fee47ec14c94dde7bed5ad5b70737804efcccf9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MDEyMDEw", "url": "https://github.com/hortonworks/cloudbreak/pull/8640#pullrequestreview-464012010", "createdAt": "2020-08-10T07:39:15Z", "commit": {"oid": "2fee47ec14c94dde7bed5ad5b70737804efcccf9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2fee47ec14c94dde7bed5ad5b70737804efcccf9", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2fee47ec14c94dde7bed5ad5b70737804efcccf9", "committedDate": "2020-08-07T17:53:17Z", "message": "code review"}, "afterCommit": {"oid": "e409707ac32743d6e88bcd20a387b51811d59409", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e409707ac32743d6e88bcd20a387b51811d59409", "committedDate": "2020-08-10T15:35:50Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34cfb178fdfe216ca4bf24516fb552795658d178", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/34cfb178fdfe216ca4bf24516fb552795658d178", "committedDate": "2020-08-10T17:01:40Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e409707ac32743d6e88bcd20a387b51811d59409", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e409707ac32743d6e88bcd20a387b51811d59409", "committedDate": "2020-08-10T15:35:50Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}, "afterCommit": {"oid": "34cfb178fdfe216ca4bf24516fb552795658d178", "author": {"user": {"login": "wonderslug", "name": "Brian Towles"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/34cfb178fdfe216ca4bf24516fb552795658d178", "committedDate": "2020-08-10T17:01:40Z", "message": "CB-6363: Create an Env api and flow which updates the Envs Stacks pillar configs\n\nThis adds an API and flow to the environment service which allows for\nthe updating of all of a Environments Stacks pillar configs.\n\nThis is primarily needed for FreeIPA right now, when a FreeIPA DNS\nserver changes IP to allow all of the Clusters within an environment\nto update their DNS server IP addresses.\n\nThe APIs added are:\nPOST /v1/env/name/{name}/update_config\nPOST /v1/env/crn/{crn}/update_config\n\nThese do not have authorization on them and should only ever be\ncalled from internal to the Control Plane.  They kick off the\nEnvStackConfigUpdates Flow which collects all of the stacks for\nthe environment and calls the Cloudbreak API and Flow created in\nCB-6364.  It does not monitor these flows, it just keeps\nretrying until it successfully submits a request for the pillar configs\nto be updated.\n\nIf another call to update the configs for the stacks come in while\none is processing and retrying, it first call will be canceled and the\nsecond will start the process again for all stacks.  This is to make sure\nthat all stacks are updated for when the latest call comes in.\n\nIt will retry submitting pillar updates every 60 seconds for 120 tries.\nThis is to give enough time for current running flows to finish allows\nthe pillar configs update to catch up the stack that did have flows running.\n\nThis is covered by the one-pager here:\nhttps://docs.google.com/document/d/1ntWZF1WP9BVRU8mP9IEzFnN63-qggG9CNEImVbXjs9I"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2641, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}