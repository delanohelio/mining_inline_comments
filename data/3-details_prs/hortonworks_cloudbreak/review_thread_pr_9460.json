{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNzU3NDMw", "number": 9460, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjowNDo0OFrOE6iRzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjozMjoxN1rOE6i4bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODE0NDc3OnYy", "diffSide": "RIGHT", "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjowNDo0OFrOH1qoxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjowNDo0OFrOH1qoxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzNTE0MQ==", "bodyText": "null collection is not ideal, please init an empty one", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526035141", "createdAt": "2020-11-18T12:04:48Z", "author": {"login": "lacikaaa"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "diffHunk": "@@ -129,18 +129,26 @@ public CloudNetworks networks(CloudCredential cloudCredential, Region region, Ma\n         Map<String, Set<CloudNetwork>> result = new HashMap<>();\n \n         String networkId = null;\n-        String subnetId = null;\n+        List<String> subnetIds = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODE0NzAxOnYy", "diffSide": "RIGHT", "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjowNToxOVrOH1qqDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjowNToxOVrOH1qqDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzNTQ2OA==", "bodyText": "this should be moved to a separate method", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526035468", "createdAt": "2020-11-18T12:05:19Z", "author": {"login": "lacikaaa"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "diffHunk": "@@ -129,18 +129,26 @@ public CloudNetworks networks(CloudCredential cloudCredential, Region region, Ma\n         Map<String, Set<CloudNetwork>> result = new HashMap<>();\n \n         String networkId = null;\n-        String subnetId = null;\n+        List<String> subnetIds = null;\n         String sharedProjectId = null;\n         if (filters != null) {\n             networkId = filters.getOrDefault(\"networkId\", null);\n-            subnetId = filters.getOrDefault(\"subnetId\", null);\n+            String subnetId = filters.getOrDefault(\"subnetId\", null);\n+            if (!Strings.isNullOrEmpty(subnetId)) {\n+                subnetIds = List.of(subnetId);\n+            } else {\n+                String subnetIdsString = filters.getOrDefault(\"subnetIds\", null);\n+                if (!Strings.isNullOrEmpty(subnetIdsString)) {\n+                    subnetIds = List.of(subnetIdsString.split(\",\"));\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODE1NTIwOnYy", "diffSide": "RIGHT", "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjowNzozOFrOH1qu_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjowNzozOFrOH1qu_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzNjczMg==", "bodyText": "this could be a private method and we could skip null check on subnetIds if the my previous comment is addressed", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526036732", "createdAt": "2020-11-18T12:07:38Z", "author": {"login": "lacikaaa"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "diffHunk": "@@ -184,18 +192,25 @@ public CloudNetworks networks(CloudCredential cloudCredential, Region region, Ma\n         return new CloudNetworks(result);\n     }\n \n-    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, String subnetId, String sharedProjectId) throws IOException {\n+    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, List<String> subnetIds,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODIxMTE4OnYy", "diffSide": "RIGHT", "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyMzoyNlrOH1rROw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxOTowNVrOH1y1tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NTQ5OQ==", "bodyText": "this seems a bit complicated and could be simplified. Like instead of query every subnet one by one we could still use the list then filter the result.\n    private SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, List<String> subnetIds,\n        String sharedProjectId) throws IOException {\n        String projectIdToQuery = StringUtils.isNotBlank(sharedProjectId) ? sharedProjectId : projectId;\n        SubnetworkList subnetworkList = compute.subnetworks().list(projectIdToQuery, region.value()).execute();\n        if (subnetIds.isEmpty()) {\n            return subnetworkList;\n        } else {\n            List<Subnetwork> filteredSubnets = subnetworkList.getItems().stream()\n                    .filter(subnetwork -> subnetIds.contains(subnetwork.getName()))\n                    .collect(Collectors.toList());\n            return new SubnetworkList().setItems(filteredSubnets);\n        }\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526045499", "createdAt": "2020-11-18T12:23:26Z", "author": {"login": "lacikaaa"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "diffHunk": "@@ -184,18 +192,25 @@ public CloudNetworks networks(CloudCredential cloudCredential, Region region, Ma\n         return new CloudNetworks(result);\n     }\n \n-    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, String subnetId, String sharedProjectId) throws IOException {\n+    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, List<String> subnetIds,\n+        String sharedProjectId) throws IOException {\n         SubnetworkList subnetworkList;\n-        if (StringUtils.isEmpty(subnetId)) {\n+        if (subnetIds != null && subnetIds.isEmpty()) {\n             subnetworkList = compute.subnetworks()\n                     .list(projectId, region.value()).execute();\n         } else {\n             if (!Strings.isNullOrEmpty(sharedProjectId)) {\n-                subnetworkList = new SubnetworkList()\n-                        .setItems(Collections.singletonList(compute.subnetworks().get(sharedProjectId, region.value(), subnetId).execute()));\n+                subnetworkList = new SubnetworkList().setItems(new ArrayList<>());\n+                for (String subnetId : subnetIds) {\n+                    Subnetwork subnetwork = compute.subnetworks().get(sharedProjectId, region.value(), subnetId).execute();\n+                    subnetworkList.getItems().add(subnetwork);\n+                }\n             } else {\n-                subnetworkList = new SubnetworkList()\n-                        .setItems(Collections.singletonList(compute.subnetworks().get(projectId, region.value(), subnetId).execute()));\n+                subnetworkList = new SubnetworkList().setItems(new ArrayList<>());\n+                for (String subnetId : subnetIds) {\n+                    Subnetwork subnetwork = compute.subnetworks().get(projectId, region.value(), subnetId).execute();\n+                    subnetworkList.getItems().add(subnetwork);\n+                }\n             }\n         }\n         return subnetworkList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA5NzY2MA==", "bodyText": "unfortunately it is not the same here? They are using the same object but in case of list most of the field is null", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526097660", "createdAt": "2020-11-18T13:45:13Z", "author": {"login": "doktoric"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "diffHunk": "@@ -184,18 +192,25 @@ public CloudNetworks networks(CloudCredential cloudCredential, Region region, Ma\n         return new CloudNetworks(result);\n     }\n \n-    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, String subnetId, String sharedProjectId) throws IOException {\n+    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, List<String> subnetIds,\n+        String sharedProjectId) throws IOException {\n         SubnetworkList subnetworkList;\n-        if (StringUtils.isEmpty(subnetId)) {\n+        if (subnetIds != null && subnetIds.isEmpty()) {\n             subnetworkList = compute.subnetworks()\n                     .list(projectId, region.value()).execute();\n         } else {\n             if (!Strings.isNullOrEmpty(sharedProjectId)) {\n-                subnetworkList = new SubnetworkList()\n-                        .setItems(Collections.singletonList(compute.subnetworks().get(sharedProjectId, region.value(), subnetId).execute()));\n+                subnetworkList = new SubnetworkList().setItems(new ArrayList<>());\n+                for (String subnetId : subnetIds) {\n+                    Subnetwork subnetwork = compute.subnetworks().get(sharedProjectId, region.value(), subnetId).execute();\n+                    subnetworkList.getItems().add(subnetwork);\n+                }\n             } else {\n-                subnetworkList = new SubnetworkList()\n-                        .setItems(Collections.singletonList(compute.subnetworks().get(projectId, region.value(), subnetId).execute()));\n+                subnetworkList = new SubnetworkList().setItems(new ArrayList<>());\n+                for (String subnetId : subnetIds) {\n+                    Subnetwork subnetwork = compute.subnetworks().get(projectId, region.value(), subnetId).execute();\n+                    subnetworkList.getItems().add(subnetwork);\n+                }\n             }\n         }\n         return subnetworkList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NTQ5OQ=="}, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEwNDAxNw==", "bodyText": "yeah, right, instead of creating a new, the old one's items should be overridden, that should do the trick. but the old implementation did the same, creating a new SubnetworkList object and adding subnetoworks to it's items.", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526104017", "createdAt": "2020-11-18T13:54:18Z", "author": {"login": "lacikaaa"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "diffHunk": "@@ -184,18 +192,25 @@ public CloudNetworks networks(CloudCredential cloudCredential, Region region, Ma\n         return new CloudNetworks(result);\n     }\n \n-    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, String subnetId, String sharedProjectId) throws IOException {\n+    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, List<String> subnetIds,\n+        String sharedProjectId) throws IOException {\n         SubnetworkList subnetworkList;\n-        if (StringUtils.isEmpty(subnetId)) {\n+        if (subnetIds != null && subnetIds.isEmpty()) {\n             subnetworkList = compute.subnetworks()\n                     .list(projectId, region.value()).execute();\n         } else {\n             if (!Strings.isNullOrEmpty(sharedProjectId)) {\n-                subnetworkList = new SubnetworkList()\n-                        .setItems(Collections.singletonList(compute.subnetworks().get(sharedProjectId, region.value(), subnetId).execute()));\n+                subnetworkList = new SubnetworkList().setItems(new ArrayList<>());\n+                for (String subnetId : subnetIds) {\n+                    Subnetwork subnetwork = compute.subnetworks().get(sharedProjectId, region.value(), subnetId).execute();\n+                    subnetworkList.getItems().add(subnetwork);\n+                }\n             } else {\n-                subnetworkList = new SubnetworkList()\n-                        .setItems(Collections.singletonList(compute.subnetworks().get(projectId, region.value(), subnetId).execute()));\n+                subnetworkList = new SubnetworkList().setItems(new ArrayList<>());\n+                for (String subnetId : subnetIds) {\n+                    Subnetwork subnetwork = compute.subnetworks().get(projectId, region.value(), subnetId).execute();\n+                    subnetworkList.getItems().add(subnetwork);\n+                }\n             }\n         }\n         return subnetworkList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NTQ5OQ=="}, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2OTUyNg==", "bodyText": "We just discussed on zoom", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526169526", "createdAt": "2020-11-18T15:19:05Z", "author": {"login": "doktoric"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "diffHunk": "@@ -184,18 +192,25 @@ public CloudNetworks networks(CloudCredential cloudCredential, Region region, Ma\n         return new CloudNetworks(result);\n     }\n \n-    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, String subnetId, String sharedProjectId) throws IOException {\n+    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, List<String> subnetIds,\n+        String sharedProjectId) throws IOException {\n         SubnetworkList subnetworkList;\n-        if (StringUtils.isEmpty(subnetId)) {\n+        if (subnetIds != null && subnetIds.isEmpty()) {\n             subnetworkList = compute.subnetworks()\n                     .list(projectId, region.value()).execute();\n         } else {\n             if (!Strings.isNullOrEmpty(sharedProjectId)) {\n-                subnetworkList = new SubnetworkList()\n-                        .setItems(Collections.singletonList(compute.subnetworks().get(sharedProjectId, region.value(), subnetId).execute()));\n+                subnetworkList = new SubnetworkList().setItems(new ArrayList<>());\n+                for (String subnetId : subnetIds) {\n+                    Subnetwork subnetwork = compute.subnetworks().get(sharedProjectId, region.value(), subnetId).execute();\n+                    subnetworkList.getItems().add(subnetwork);\n+                }\n             } else {\n-                subnetworkList = new SubnetworkList()\n-                        .setItems(Collections.singletonList(compute.subnetworks().get(projectId, region.value(), subnetId).execute()));\n+                subnetworkList = new SubnetworkList().setItems(new ArrayList<>());\n+                for (String subnetId : subnetIds) {\n+                    Subnetwork subnetwork = compute.subnetworks().get(projectId, region.value(), subnetId).execute();\n+                    subnetworkList.getItems().add(subnetwork);\n+                }\n             }\n         }\n         return subnetworkList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NTQ5OQ=="}, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODIyMDk3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/filter/GcpNetworkFilterProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyNjowMlrOH1rXNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyNjowMlrOH1rXNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NzAzMQ==", "bodyText": "this constant at least should be refactored into a field to avoid duplication here", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526047031", "createdAt": "2020-11-18T12:26:02Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/filter/GcpNetworkFilterProvider.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.freeipa.service.filter;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.freeipa.entity.Network;\n+\n+@Service\n+public class GcpNetworkFilterProvider implements NetworkFilterProvider {\n+\n+    @Override\n+    public Map<String, String> provide(Network network, String networkId, Collection<String> subnetIds) {\n+        Map<String, String> filter = new HashMap<>();\n+        if (network.getAttributes() != null && network.getAttributes().getMap() != null) {\n+            Map<String, Object> attributes = network.getAttributes().getMap();\n+            String sharedProjectId = (String) attributes.get(\"sharedProjectId\");\n+            filter.put(\"sharedProjectId\", sharedProjectId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODIyMzE1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/filter/GcpNetworkFilterProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyNjozN1rOH1rYmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyNjozN1rOH1rYmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NzM4NQ==", "bodyText": "I don't think we need this if, just use subnetIds", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526047385", "createdAt": "2020-11-18T12:26:37Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/filter/GcpNetworkFilterProvider.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.freeipa.service.filter;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.freeipa.entity.Network;\n+\n+@Service\n+public class GcpNetworkFilterProvider implements NetworkFilterProvider {\n+\n+    @Override\n+    public Map<String, String> provide(Network network, String networkId, Collection<String> subnetIds) {\n+        Map<String, String> filter = new HashMap<>();\n+        if (network.getAttributes() != null && network.getAttributes().getMap() != null) {\n+            Map<String, Object> attributes = network.getAttributes().getMap();\n+            String sharedProjectId = (String) attributes.get(\"sharedProjectId\");\n+            filter.put(\"sharedProjectId\", sharedProjectId);\n+            filter.put(\"networkId\", networkId);\n+            buildSubnetIdFilter(subnetIds, filter);\n+        }\n+        return filter;\n+    }\n+\n+    @Override\n+    public CloudPlatform cloudPlatform() {\n+        return CloudPlatform.GCP;\n+    }\n+\n+    private void buildSubnetIdFilter(Collection<String> subnetIds, Map<String, String> filter) {\n+        if (subnetIds != null && !subnetIds.isEmpty()) {\n+            if (subnetIds.size() > 1) {\n+                filter.put(\"subnetIds\", String.join(\",\", subnetIds));\n+            } else {\n+                filter.put(\"subnetId\", subnetIds.stream().findFirst().get());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODIzNTcxOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/filter/GcpNetworkFilterProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjozMDowN1rOH1rgmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjozMDowN1rOH1rgmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0OTQzNA==", "bodyText": "it would be much nicer if it would return with like a map and we could use filter.putAll where it is called instead of modifying the map passed via a parameter. It could return with empty map if not applicable", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526049434", "createdAt": "2020-11-18T12:30:07Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/filter/GcpNetworkFilterProvider.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.sequenceiq.freeipa.service.filter;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.base.Strings;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.freeipa.entity.Network;\n+\n+@Service\n+public class GcpNetworkFilterProvider implements NetworkFilterProvider {\n+\n+    @Override\n+    public Map<String, String> provide(Network network, String networkId, Collection<String> subnetIds) {\n+        Map<String, String> filter = new HashMap<>();\n+        if (network.getAttributes() != null && network.getAttributes().getMap() != null) {\n+            Map<String, Object> attributes = network.getAttributes().getMap();\n+            String sharedProjectId = (String) attributes.get(\"sharedProjectId\");\n+            if (!Strings.isNullOrEmpty(sharedProjectId)) {\n+                filter.put(\"sharedProjectId\", sharedProjectId);\n+            }\n+        }\n+        filter.put(\"networkId\", networkId);\n+        buildSubnetIdFilter(subnetIds, filter);\n+        return filter;\n+    }\n+\n+    @Override\n+    public CloudPlatform cloudPlatform() {\n+        return CloudPlatform.GCP;\n+    }\n+\n+    private void buildSubnetIdFilter(Collection<String> subnetIds, Map<String, String> filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74791e4d75ceafec88b71936302b5ff0a6f8be4a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODI0MzY3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/NetworkService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjozMjoxN1rOH1rlfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjozMjoxN1rOH1rlfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA1MDY4NA==", "bodyText": "could be moved to a separate method, like createFilter", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526050684", "createdAt": "2020-11-18T12:32:17Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/NetworkService.java", "diffHunk": "@@ -49,8 +55,13 @@\n     public Map<String, String> getFilteredSubnetWithCidr(String environmentCrn, Stack stack, String networkId, Collection<String> subnetIds) {\n         Credential credential = credentialService.getCredentialByEnvCrn(environmentCrn);\n         ExtendedCloudCredential cloudCredential = extendedCloudCredentialConverter.convert(credential);\n+        Map<String, String> filter = new HashMap<>();\n+        NetworkFilterProvider networkFilterProvider = networkFilterProviderMap.get(CloudPlatform.valueOf(stack.getCloudPlatform()));\n+        if (networkFilterProvider != null) {\n+            filter = networkFilterProvider.provide(stack.getNetwork(), networkId, subnetIds);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74791e4d75ceafec88b71936302b5ff0a6f8be4a"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3473, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}