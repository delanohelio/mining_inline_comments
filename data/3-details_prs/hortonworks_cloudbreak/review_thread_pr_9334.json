{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMzg3MTM1", "number": 9334, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDowNDo0MVrOEzuWRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1NToyNFrOEz4JmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjcyMTk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/clustertemplate/ClusterTemplateToClusterTemplateV4ResponseConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDowNDo0MVrOHrIZJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDowNDo0MVrOHrIZJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4ODMyNA==", "bodyText": "please add some logs here", "url": "https://github.com/hortonworks/cloudbreak/pull/9334#discussion_r514988324", "createdAt": "2020-10-30T10:04:41Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/clustertemplate/ClusterTemplateToClusterTemplateV4ResponseConverter.java", "diffHunk": "@@ -32,9 +39,21 @@ public ClusterTemplateV4Response convert(ClusterTemplate source) {\n         ClusterTemplateV4Response clusterTemplateV4Response = new ClusterTemplateV4Response();\n         clusterTemplateV4Response.setName(source.getName());\n         clusterTemplateV4Response.setDescription(source.getDescription());\n-        Stack stack = stackTemplateService.getByIdWithLists(source.getStackTemplate().getId()).orElse(null);\n-        StackV4Request stackV4Request = converterUtil.convert(stack, StackV4Request.class);\n-        clusterTemplateV4Response.setDistroXTemplate(getIfNotNull(stackV4Request, stackV4RequestConverter::convert));\n+        if (source.getStatus().isNonDefault()) {\n+            Stack stack = stackTemplateService.getByIdWithLists(source.getStackTemplate().getId()).orElse(null);\n+            StackV4Request stackV4Request = converterUtil.convert(stack, StackV4Request.class);\n+            clusterTemplateV4Response.setDistroXTemplate(getIfNotNull(stackV4Request, stackV4RequestConverter::convert));\n+            clusterTemplateV4Response.setNodeCount(stack.getFullNodeCount());\n+        } else {\n+            try {\n+                DefaultClusterTemplateV4Request clusterTemplateV4Request = new Json(getTemplateString(source))\n+                        .get(DefaultClusterTemplateV4Request.class);\n+                clusterTemplateV4Response.setDistroXTemplate(clusterTemplateV4Request.getDistroXTemplate());\n+                clusterTemplateV4Response.setNodeCount(getFullNodeCount(clusterTemplateV4Request.getDistroXTemplate()));\n+            } catch (IOException e) {\n+                clusterTemplateV4Response.setDistroXTemplate(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0a1876a507f6b0b820c7709a709dd5cb300bf67"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjkzOTI0OnYy", "diffSide": "RIGHT", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/common/ResourceStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxMDo0MVrOHrKcjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTo1OTo0MlrOHrMCkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyMTk2NQ==", "bodyText": "Do we need this? It is going to break during CB upgrade.", "url": "https://github.com/hortonworks/cloudbreak/pull/9334#discussion_r515021965", "createdAt": "2020-10-30T11:10:41Z", "author": {"login": "akanto"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/common/ResourceStatus.java", "diffHunk": "@@ -4,5 +4,13 @@\n     DEFAULT,\n     DEFAULT_DELETED,\n     USER_MANAGED,\n-    OUTDATED\n+    OUTDATED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd4fa70db892314f605420cc9d860ea464e037a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0ODA4MA==", "bodyText": "I just put a ; sign at the end", "url": "https://github.com/hortonworks/cloudbreak/pull/9334#discussion_r515048080", "createdAt": "2020-10-30T11:59:42Z", "author": {"login": "doktoric"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/common/ResourceStatus.java", "diffHunk": "@@ -4,5 +4,13 @@\n     DEFAULT,\n     DEFAULT_DELETED,\n     USER_MANAGED,\n-    OUTDATED\n+    OUTDATED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyMTk2NQ=="}, "originalCommit": {"oid": "bbd4fa70db892314f605420cc9d860ea464e037a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk0NjA2OnYy", "diffSide": "RIGHT", "path": "core-model/src/main/java/com/sequenceiq/cloudbreak/domain/view/ClusterTemplateClusterApiView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxMjo1N1rOHrKg4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxMjo1N1rOHrKg4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyMzA3Mg==", "bodyText": "Do we need an IP in the template?", "url": "https://github.com/hortonworks/cloudbreak/pull/9334#discussion_r515023072", "createdAt": "2020-10-30T11:12:57Z", "author": {"login": "akanto"}, "path": "core-model/src/main/java/com/sequenceiq/cloudbreak/domain/view/ClusterTemplateClusterApiView.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.sequenceiq.cloudbreak.domain.view;\n+\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status;\n+import com.sequenceiq.cloudbreak.converter.CertExpirationStateConverter;\n+import com.sequenceiq.cloudbreak.domain.converter.StatusConverter;\n+import com.sequenceiq.common.api.type.CertExpirationState;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+@Entity\n+@SuppressFBWarnings(\"UWF_UNWRITTEN_FIELD\")\n+@Table(name = \"Cluster\")\n+public class ClusterTemplateClusterApiView extends CompactView {\n+    @OneToOne(fetch = FetchType.LAZY)\n+    private ClusterTemplateStackApiView stack;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private BlueprintView blueprint;\n+\n+    private String clusterManagerIp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd4fa70db892314f605420cc9d860ea464e037a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk1MjQ0OnYy", "diffSide": "RIGHT", "path": "core-model/src/main/java/com/sequenceiq/cloudbreak/domain/view/ClusterTemplateStackApiView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNDozNFrOHrKkjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNDozNFrOHrKkjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNDAxMg==", "bodyText": "Do we need an Status in the template?", "url": "https://github.com/hortonworks/cloudbreak/pull/9334#discussion_r515024012", "createdAt": "2020-10-30T11:14:34Z", "author": {"login": "akanto"}, "path": "core-model/src/main/java/com/sequenceiq/cloudbreak/domain/view/ClusterTemplateStackApiView.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package com.sequenceiq.cloudbreak.domain.view;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status;\n+import com.sequenceiq.cloudbreak.converter.TunnelConverter;\n+import com.sequenceiq.cloudbreak.domain.converter.StackTypeConverter;\n+import com.sequenceiq.common.api.type.Tunnel;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+@Entity\n+@Table(name = \"Stack\")\n+// It's only here, because of findbugs does not know the fields will be set by JPA with Reflection\n+@SuppressFBWarnings(\"UWF_UNWRITTEN_FIELD\")\n+public class ClusterTemplateStackApiView extends CompactView {\n+\n+    @OneToOne(mappedBy = \"stack\")\n+    private ClusterTemplateClusterApiView cluster;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    private String cloudPlatform;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    private String platformVariant;\n+\n+    @OneToOne\n+    private StackStatusView stackStatus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd4fa70db892314f605420cc9d860ea464e037a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk1NzY3OnYy", "diffSide": "RIGHT", "path": "core-model/src/main/java/com/sequenceiq/cloudbreak/domain/view/ClusterTemplateStackApiView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNTo1NlrOHrKngA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNTo1NlrOHrKngA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNDc2OA==", "bodyText": "I think we can eliminate a few fields/relations from this entity.", "url": "https://github.com/hortonworks/cloudbreak/pull/9334#discussion_r515024768", "createdAt": "2020-10-30T11:15:56Z", "author": {"login": "akanto"}, "path": "core-model/src/main/java/com/sequenceiq/cloudbreak/domain/view/ClusterTemplateStackApiView.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package com.sequenceiq.cloudbreak.domain.view;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status;\n+import com.sequenceiq.cloudbreak.converter.TunnelConverter;\n+import com.sequenceiq.cloudbreak.domain.converter.StackTypeConverter;\n+import com.sequenceiq.common.api.type.Tunnel;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+@Entity\n+@Table(name = \"Stack\")\n+// It's only here, because of findbugs does not know the fields will be set by JPA with Reflection\n+@SuppressFBWarnings(\"UWF_UNWRITTEN_FIELD\")\n+public class ClusterTemplateStackApiView extends CompactView {\n+\n+    @OneToOne(mappedBy = \"stack\")\n+    private ClusterTemplateClusterApiView cluster;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    private String cloudPlatform;\n+\n+    @Column(columnDefinition = \"TEXT\")\n+    private String platformVariant;\n+\n+    @OneToOne\n+    private StackStatusView stackStatus;\n+\n+    @OneToMany(mappedBy = \"stack\", fetch = FetchType.EAGER)\n+    private Set<ClusterTemplateInstanceGroupView> instanceGroups = new HashSet<>();\n+\n+    private Long created;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd4fa70db892314f605420cc9d860ea464e037a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODA0Mzc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/template/ClusterTemplateService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTo0Mzo0OFrOHrU-3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTo0Mzo0OFrOHrU-3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5NDU4OA==", "bodyText": "Please correct the message and also log it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9334#discussion_r515194588", "createdAt": "2020-10-30T15:43:48Z", "author": {"login": "biharitomi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/template/ClusterTemplateService.java", "diffHunk": "@@ -264,25 +271,42 @@ public void updateDefaultClusterTemplates(long workspaceId) {\n     }\n \n     private Optional<String> getMessageIfBlueprintIsInvalidInCluster(ClusterTemplate clusterTemplate) {\n-        if (Objects.isNull(clusterTemplate.getStackTemplate().getCluster())) {\n+        if (!clusterTemplate.getStatus().isDefault() && Objects.isNull(clusterTemplate.getStackTemplate().getCluster())) {\n             String msg = \"Stack template in cluster definition should contain a \u2013 valid \u2013 cluster request!\";\n             return Optional.of(msg);\n         }\n         String msg = null;\n-        boolean hasBlueprint = nonNull(clusterTemplate.getStackTemplate().getCluster().getBlueprint());\n-        if (!hasBlueprint) {\n-            msg = \"Cluster definition should contain a cluster template!\";\n+        String blueprintName = null;\n+        if (clusterTemplate.getStatus().isDefault()) {\n+            try {\n+                blueprintName = new Json(getTemplateString(clusterTemplate)).get(DefaultClusterTemplateV4Request.class)\n+                        .getDistroXTemplate()\n+                        .getCluster()\n+                        .getBlueprintName();\n+            } catch (IOException e) {\n+                msg = \"The cluster template in the cluster definition should be an exists!\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9288dc8d5fc273bd21b51a46826d49fa541e9ecf"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODMyNzkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/template/ClusterTemplateService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1NToyNFrOHrXuug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1NToyNFrOHrXuug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzOTYxMA==", "bodyText": "Can we set it to false as it was? As I know it is not a very good idea to use parallal streams in a multithreaded web based application because it can cause high load for one request and the application should be able to serve many request at the same time.", "url": "https://github.com/hortonworks/cloudbreak/pull/9334#discussion_r515239610", "createdAt": "2020-10-30T16:55:24Z", "author": {"login": "sodre90"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/template/ClusterTemplateService.java", "diffHunk": "@@ -313,16 +337,17 @@ private void updateDefaultClusterTemplates(Workspace workspace) {\n             LOGGER.debug(\"Outdated clusterTemplates deleted: '{}'.\", outdatedTemplates.size());\n             clusterTemplates = clusterTemplateRepository.findAllByNotDeletedInWorkspace(workspace.getId());\n             LOGGER.debug(\"None deleted clusterTemplates collected: '{}'.\", clusterTemplates.size());\n-            clusterTemplateLoaderService.loadClusterTemplatesForWorkspace(clusterTemplates, this::createAll);\n+            clusterTemplateLoaderService.loadClusterTemplatesForWorkspace(clusterTemplates, workspace, this::createAll);\n             LOGGER.debug(\"ClusterTemplate modifications finished based on the defaults for '{}' workspace.\", workspace.getId());\n         }\n     }\n \n     private Collection<ClusterTemplate> createAll(Iterable<ClusterTemplate> clusterTemplates) {\n-        return StreamSupport.stream(clusterTemplates.spliterator(), false)\n+        User user = userService.getOrCreate(legacyRestRequestThreadLocalService.getCloudbreakUser());\n+        return StreamSupport.stream(clusterTemplates.spliterator(), true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9288dc8d5fc273bd21b51a46826d49fa541e9ecf"}, "originalPosition": 179}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2079, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}