{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MDMzNDUz", "number": 9683, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo0Nzo1M1rOFK8X5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjowMTozNFrOFK8uWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDE5MjM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo0Nzo1M1rOIN2nWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo0Nzo1M1rOIN2nWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM5NzIwOQ==", "bodyText": "nit: This import is int the wrong place.", "url": "https://github.com/hortonworks/cloudbreak/pull/9683#discussion_r551397209", "createdAt": "2021-01-04T15:47:53Z", "author": {"login": "hreeve-cloudera"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "diffHunk": "@@ -28,6 +28,7 @@\n import javax.annotation.Nonnull;\n import javax.inject.Inject;\n \n+import com.sequenceiq.common.api.type.LoadBalancerType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f9d70907f91211c364777acc39e8dd1cf154a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDIwMjA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo1MDoxMFrOIN2tSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzo0NjoxOFrOIN67vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM5ODczMQ==", "bodyText": "This orElse is internal within the filter method, correct? It's hard to parse as-is, because it's indented to the same level as the calls that are directly on stream(), so it seems like it should also be directly on stream(). Could you either change the indentation, or break this call out into two lines so it's easier to read?", "url": "https://github.com/hortonworks/cloudbreak/pull/9683#discussion_r551398731", "createdAt": "2021-01-04T15:50:10Z", "author": {"login": "hreeve-cloudera"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "diffHunk": "@@ -629,7 +630,19 @@ private void addGatewayUserFacingCertAndFqdn(GatewayConfig gatewayConfig, Cluste\n             gateway.put(\"userfacingkey\", cluster.getStack().getSecurityConfig().getUserFacingKey());\n             gateway.put(\"userfacingcert\", cluster.getStack().getSecurityConfig().getUserFacingCert());\n         }\n-        String fqdn = cluster.getFqdn();\n+\n+        String fqdn = null;\n+        if (cluster.getStack().getLoadBalancers() != null && cluster.getStack().getLoadBalancers().size() > 0) {\n+            fqdn = (cluster.getStack().getLoadBalancers().stream()\n+                    .filter(lb -> lb.getType() == LoadBalancerType.PUBLIC).findAny()\n+                    .orElse(cluster.getStack().getLoadBalancers().iterator().next()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f9d70907f91211c364777acc39e8dd1cf154a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2Nzk2NA==", "bodyText": "LoadBalanceryType.PUBLIC.equals(lb.getType())", "url": "https://github.com/hortonworks/cloudbreak/pull/9683#discussion_r551467964", "createdAt": "2021-01-04T17:46:18Z", "author": {"login": "frozenwizard"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "diffHunk": "@@ -629,7 +630,19 @@ private void addGatewayUserFacingCertAndFqdn(GatewayConfig gatewayConfig, Cluste\n             gateway.put(\"userfacingkey\", cluster.getStack().getSecurityConfig().getUserFacingKey());\n             gateway.put(\"userfacingcert\", cluster.getStack().getSecurityConfig().getUserFacingCert());\n         }\n-        String fqdn = cluster.getFqdn();\n+\n+        String fqdn = null;\n+        if (cluster.getStack().getLoadBalancers() != null && cluster.getStack().getLoadBalancers().size() > 0) {\n+            fqdn = (cluster.getStack().getLoadBalancers().stream()\n+                    .filter(lb -> lb.getType() == LoadBalancerType.PUBLIC).findAny()\n+                    .orElse(cluster.getStack().getLoadBalancers().iterator().next()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM5ODczMQ=="}, "originalCommit": {"oid": "c82f9d70907f91211c364777acc39e8dd1cf154a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDIwOTAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo1MTo0OVrOIN2xdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo1MTo0OVrOIN2xdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM5OTc5Ng==", "bodyText": "We should make this check isNotEmpty, so we don't set the fqdn to an empty string.", "url": "https://github.com/hortonworks/cloudbreak/pull/9683#discussion_r551399796", "createdAt": "2021-01-04T15:51:49Z", "author": {"login": "hreeve-cloudera"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "diffHunk": "@@ -629,7 +630,19 @@ private void addGatewayUserFacingCertAndFqdn(GatewayConfig gatewayConfig, Cluste\n             gateway.put(\"userfacingkey\", cluster.getStack().getSecurityConfig().getUserFacingKey());\n             gateway.put(\"userfacingcert\", cluster.getStack().getSecurityConfig().getUserFacingCert());\n         }\n-        String fqdn = cluster.getFqdn();\n+\n+        String fqdn = null;\n+        if (cluster.getStack().getLoadBalancers() != null && cluster.getStack().getLoadBalancers().size() > 0) {\n+            fqdn = (cluster.getStack().getLoadBalancers().stream()\n+                    .filter(lb -> lb.getType() == LoadBalancerType.PUBLIC).findAny()\n+                    .orElse(cluster.getStack().getLoadBalancers().iterator().next()))\n+                    .getFqdn();\n+        }\n+\n+        if (fqdn == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f9d70907f91211c364777acc39e8dd1cf154a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDIxOTg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/publicendpoint/GatewayPublicEndpointManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo1NDoyNlrOIN23vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo1NDoyNlrOIN23vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwMTQwNw==", "bodyText": "To be safe, we should make sure this logic isn't triggered if the DNS for the load balancer couldn't be registered. (See the else statement directly above this).", "url": "https://github.com/hortonworks/cloudbreak/pull/9683#discussion_r551401407", "createdAt": "2021-01-04T15:54:26Z", "author": {"login": "hreeve-cloudera"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/publicendpoint/GatewayPublicEndpointManagementService.java", "diffHunk": "@@ -132,6 +132,9 @@ public void updateDnsEntryForLoadBalancers(Stack stack) {\n                     LOGGER.warn(\"Could not find IP or cloud DNS info for load balancer with endpoint {} .\" +\n                         \"DNS registration will be skipped.\", loadBalancer.getEndpoint());\n                 }\n+\n+                loadBalancer.setFqdn(getDomainNameProvider().getFullyQualifiedEndpointName(\n+                        endpoint.get(), environment.getName(), getWorkloadSubdomain(userCrn)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f9d70907f91211c364777acc39e8dd1cf154a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDIyMDkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/util/StackUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo1NDo0MFrOIN24aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo1NDo0MFrOIN24aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwMTU3Ng==", "bodyText": "nit: This import is in the wrong place.", "url": "https://github.com/hortonworks/cloudbreak/pull/9683#discussion_r551401576", "createdAt": "2021-01-04T15:54:40Z", "author": {"login": "hreeve-cloudera"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/util/StackUtil.java", "diffHunk": "@@ -11,6 +11,7 @@\n \n import javax.inject.Inject;\n \n+import com.sequenceiq.common.api.type.LoadBalancerType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f9d70907f91211c364777acc39e8dd1cf154a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDIyOTg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/util/StackUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo1Njo0M1rOIN29lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo1Njo0M1rOIN29lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwMjkwMw==", "bodyText": "Same note about the indentation here. Since this code looks the same as the other code block, it might be worth pulling it out into a common method. Maybe putting it directly in Stack, so you can just call something like stack.getLoadBalancerUserFacingFQDN().", "url": "https://github.com/hortonworks/cloudbreak/pull/9683#discussion_r551402903", "createdAt": "2021-01-04T15:56:43Z", "author": {"login": "hreeve-cloudera"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/util/StackUtil.java", "diffHunk": "@@ -177,6 +178,13 @@ private String extractClusterManagerIp(long stackId) {\n     }\n \n     public String extractClusterManagerAddress(Stack stack) {\n+        if (stack.getLoadBalancers() != null && stack.getLoadBalancers().size() != 0) {\n+            return (stack.getLoadBalancers().stream()\n+                    .filter(lb -> lb.getType() == LoadBalancerType.PUBLIC).findAny()\n+                    .orElse(stack.getLoadBalancers().iterator().next()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f9d70907f91211c364777acc39e8dd1cf154a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDI0NzIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/schema/app/20201221232206_CB-9746:_Use_new_loadbalancer_endpoints_for_DL_services.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjowMDo1MFrOIN3Hww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjowMDo1MFrOIN3Hww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwNTUwNw==", "bodyText": "I don't think we should have the default be a string value. You're not checking the value of the load balancer FQDN name anywhere that I saw, so it seems like the code could see the string \"No Info\" and think that's a perfectly valid domain. I don't think we need a default value, since if it isn't set it should just be null, and then the statements that check if it's null will correctly evaluate to false.", "url": "https://github.com/hortonworks/cloudbreak/pull/9683#discussion_r551405507", "createdAt": "2021-01-04T16:00:50Z", "author": {"login": "hreeve-cloudera"}, "path": "core/src/main/resources/schema/app/20201221232206_CB-9746:_Use_new_loadbalancer_endpoints_for_DL_services.sql", "diffHunk": "@@ -0,0 +1,10 @@\n+-- // CB-9746: Use new loadbalancer endpoints for DL services\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE loadbalancer ADD COLUMN IF NOT EXISTS fqdn character varying(255) DEFAULT 'No Info';\n+UPDATE loadbalancer SET fqdn = 'No Info' WHERE fqdn IS NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f9d70907f91211c364777acc39e8dd1cf154a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDI0OTg1OnYy", "diffSide": "RIGHT", "path": "mock-thunderhead/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjowMTozNFrOIN3Jcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjowMTozNFrOIN3Jcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwNTkzOQ==", "bodyText": "I've been asked by the CB team to not enable this by default, since it only really works if you're using mow-dev UMS and most people won't be.", "url": "https://github.com/hortonworks/cloudbreak/pull/9683#discussion_r551405939", "createdAt": "2021-01-04T16:01:34Z", "author": {"login": "hreeve-cloudera"}, "path": "mock-thunderhead/src/main/resources/application.yml", "diffHunk": "@@ -34,4 +34,4 @@ auth:\n     database.wire.encryption.enable: true\n     datahub.runtime.upgrade.enable: true\n     embedded.database.on.attached.disk.enable: true\n-    datalake.loadbalancer.enable: false\n+    datalake.loadbalancer.enable: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f9d70907f91211c364777acc39e8dd1cf154a"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3395, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}