{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MzI2MDk4", "number": 8763, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNTo1NjoxOVrOEXEH4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDoxMTozOFrOEXJPyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjIwMjU3OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureStorageAccountBuilderService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNTo1NjoxOVrOG-pYmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNTo1NjoxOVrOG-pYmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0MjkzNw==", "bodyText": "Can you please extract this condition into a private method?", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468342937", "createdAt": "2020-08-11T05:56:19Z", "author": {"login": "tiborpopovics"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureStorageAccountBuilderService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.connector.resource;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.management.resources.Deployment;\n+import com.sequenceiq.cloudbreak.cloud.azure.AzureStorageAccountTemplateBuilder;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+\n+@Service\n+public class AzureStorageAccountBuilderService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountBuilderService.class);\n+\n+    @Inject\n+    private AzureStorageAccountTemplateBuilder azureStorageAccountTemplateBuilder;\n+\n+    public void buildStorageAccount(AzureClient client, StorageAccountParameters storageAccountParameters) {\n+\n+        try {\n+            String template = azureStorageAccountTemplateBuilder.build(storageAccountParameters);\n+            if (!client.templateDeploymentExists(storageAccountParameters.getResourceGroupName(), storageAccountParameters.getStorageAccountName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjIwNTk3OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNTo1Nzo0OVrOG-pakw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNTo1Nzo0OVrOG-pakw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0MzQ0Mw==", "bodyText": "Please write a unit test for this class.", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468343443", "createdAt": "2020-08-11T05:57:49Z", "author": {"login": "tiborpopovics"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjcxMzQzOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODo0MTo1OFrOG-uKDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODo1ODoyOVrOG-uxHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTEzMg==", "bodyText": "please double check if this parameter is required in redbeams' application.yml", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468421132", "createdAt": "2020-08-11T08:41:58Z", "author": {"login": "bergerdenes"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzMTEzNQ==", "bodyText": "The storage account is created for holding the images of VMs and is used in case of freeipa and core (datalake / distrox) services. Redbeams does not create VMs so I have not added this parameter there.", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468431135", "createdAt": "2020-08-11T08:58:29Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTEzMg=="}, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjcxODk2OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODo0MzoxOVrOG-uNZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODo0MzoxOVrOG-uNZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTk4OA==", "bodyText": "typo", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468421988", "createdAt": "2020-08-11T08:43:19Z", "author": {"login": "bergerdenes"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")\n+    private String armStorageAccountTemplatePath;\n+\n+    @Inject\n+    private Configuration freemarkerConfiguration;\n+\n+    @Inject\n+    private FreeMarkerTemplateUtils freeMarkerTemplateUtils;\n+\n+    public String build(StorageAccountParameters storageAccountParameters) {\n+        try {\n+            Map<String, Object> model = new HashMap<>();\n+            model.put(\"storageAccountName\", storageAccountParameters.getStorageAccountName());\n+            model.put(\"location\", storageAccountParameters.getStorageLocation());\n+            model.put(\"skuName\", storageAccountParameters.getStorageAccountSkuType().name().toString());\n+            model.put(\"encrypted\", storageAccountParameters.getEncrypted());\n+            model.put(\"userDefinedTags\", storageAccountParameters.getTags());\n+            String generatedTemplate = freeMarkerTemplateUtils.processTemplateIntoString(getTemplate(), model);\n+            LOGGER.info(\"Generated stroage account Arm template: {}\", generatedTemplate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjcyOTExOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODo0NTo1MFrOG-uTYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODo0NTo1MFrOG-uTYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMzUyMg==", "bodyText": "is this method necessary? could be inlined into the public getTemplate()", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468423522", "createdAt": "2020-08-11T08:45:50Z", "author": {"login": "bergerdenes"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")\n+    private String armStorageAccountTemplatePath;\n+\n+    @Inject\n+    private Configuration freemarkerConfiguration;\n+\n+    @Inject\n+    private FreeMarkerTemplateUtils freeMarkerTemplateUtils;\n+\n+    public String build(StorageAccountParameters storageAccountParameters) {\n+        try {\n+            Map<String, Object> model = new HashMap<>();\n+            model.put(\"storageAccountName\", storageAccountParameters.getStorageAccountName());\n+            model.put(\"location\", storageAccountParameters.getStorageLocation());\n+            model.put(\"skuName\", storageAccountParameters.getStorageAccountSkuType().name().toString());\n+            model.put(\"encrypted\", storageAccountParameters.getEncrypted());\n+            model.put(\"userDefinedTags\", storageAccountParameters.getTags());\n+            String generatedTemplate = freeMarkerTemplateUtils.processTemplateIntoString(getTemplate(), model);\n+            LOGGER.info(\"Generated stroage account Arm template: {}\", generatedTemplate);\n+            return generatedTemplate;\n+        } catch (IOException | TemplateException e) {\n+            throw new CloudConnectorException(\"Failed to process the storage account ARM Template\", e);\n+        }\n+    }\n+\n+    public Template getTemplate() {\n+        try {\n+            return new Template(armStorageAccountTemplatePath, getArmTemplate().toString(), freemarkerConfiguration);\n+        } catch (IOException e) {\n+            throw new CloudConnectorException(\"Couldn't create template object\", e);\n+        }\n+    }\n+\n+    private Template getArmTemplate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjk5NzAzOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTo1ODoxNlrOG-w2_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTo1ODoxNlrOG-w2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ2NTQwNw==", "bodyText": "this could be private", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468465407", "createdAt": "2020-08-11T09:58:16Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")\n+    private String armStorageAccountTemplatePath;\n+\n+    @Inject\n+    private Configuration freemarkerConfiguration;\n+\n+    @Inject\n+    private FreeMarkerTemplateUtils freeMarkerTemplateUtils;\n+\n+    public String build(StorageAccountParameters storageAccountParameters) {\n+        try {\n+            Map<String, Object> model = new HashMap<>();\n+            model.put(\"storageAccountName\", storageAccountParameters.getStorageAccountName());\n+            model.put(\"location\", storageAccountParameters.getStorageLocation());\n+            model.put(\"skuName\", storageAccountParameters.getStorageAccountSkuType().name().toString());\n+            model.put(\"encrypted\", storageAccountParameters.getEncrypted());\n+            model.put(\"userDefinedTags\", storageAccountParameters.getTags());\n+            String generatedTemplate = freeMarkerTemplateUtils.processTemplateIntoString(getTemplate(), model);\n+            LOGGER.info(\"Generated stroage account Arm template: {}\", generatedTemplate);\n+            return generatedTemplate;\n+        } catch (IOException | TemplateException e) {\n+            throw new CloudConnectorException(\"Failed to process the storage account ARM Template\", e);\n+        }\n+    }\n+\n+    public Template getTemplate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzA0MjAzOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureStorageAccountBuilderService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDoxMTozOFrOG-xSMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDoxMTozOFrOG-xSMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3MjM3MA==", "bodyText": "We should use the same mechanism as the other occurrences, e.g: https://github.com/hortonworks/cloudbreak/blob/master/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/upscale/AzureUpscaleService.java#L92-L102", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468472370", "createdAt": "2020-08-11T10:11:38Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureStorageAccountBuilderService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.connector.resource;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.management.resources.Deployment;\n+import com.sequenceiq.cloudbreak.cloud.azure.AzureStorageAccountTemplateBuilder;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+\n+@Service\n+public class AzureStorageAccountBuilderService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountBuilderService.class);\n+\n+    @Inject\n+    private AzureStorageAccountTemplateBuilder azureStorageAccountTemplateBuilder;\n+\n+    public void buildStorageAccount(AzureClient client, StorageAccountParameters storageAccountParameters) {\n+\n+        try {\n+            String template = azureStorageAccountTemplateBuilder.build(storageAccountParameters);\n+            if (!client.templateDeploymentExists(storageAccountParameters.getResourceGroupName(), storageAccountParameters.getStorageAccountName())) {\n+                String parameters = new Json(Map.of()).getValue();\n+                Deployment templateDeployment = client.createTemplateDeployment(\n+                        storageAccountParameters.getResourceGroupName(), storageAccountParameters.getStorageAccountName(), template, parameters);\n+                LOGGER.debug(\"Created template deployment for storage account: {}\", templateDeployment.exportTemplate().template());\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2370, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}