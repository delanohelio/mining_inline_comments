{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NjIxOTA3", "number": 9278, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowMzo1N1rOExPrFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyNjoyN1rOEy_M9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDcyNDY4OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/ProviderChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowMzo1N1rOHnRyJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1ODoxMlrOHoTnHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0Nzg3Ng==", "bodyText": "I think this might only work for cases where the status is unreachable. For example, if the instance health is unhealthy I suspect the UI will report \"running\" since it will rely on the VM status which will be started which means the instance status will be created which means the UI will report \"running\".", "url": "https://github.com/hortonworks/cloudbreak/pull/9278#discussion_r510947876", "createdAt": "2020-10-23T15:03:57Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/ProviderChecker.java", "diffHunk": "@@ -74,33 +77,39 @@\n         }, LOGGER, \":::Auto sync::: provider is checked in {}ms\");\n     }\n \n-    private InstanceStatus updateStatuses(CloudVmInstanceStatus vmInstanceStatus, InstanceMetaData instanceMetaData) {\n+    private InstanceStatus updateStatuses(CloudVmInstanceStatus vmInstanceStatus, InstanceMetaData instanceMetaData,\n+        Map<InstanceMetaData, DetailedStackStatus> instanceHealthStatusMap) {\n         LOGGER.info(\":::Auto sync::: {} instance metadata status update in progress, new status: {}\",\n                 instanceMetaData.getShortHostname(), vmInstanceStatus);\n         InstanceStatus status = null;\n-        switch (vmInstanceStatus.getStatus()) {\n-            case STARTED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.CREATED);\n-                status = InstanceStatus.CREATED;\n-                break;\n-            case STOPPED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.STOPPED);\n-                status = InstanceStatus.STOPPED;\n-                break;\n-            case FAILED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.FAILED);\n-                status = InstanceStatus.FAILED;\n-                break;\n-            case TERMINATED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_ON_PROVIDER_SIDE);\n-                status = InstanceStatus.DELETED_ON_PROVIDER_SIDE;\n-                break;\n-            case TERMINATED_BY_PROVIDER:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_BY_PROVIDER);\n-                status = InstanceStatus.DELETED_BY_PROVIDER;\n-                break;\n-            default:\n-                LOGGER.info(\":::Auto sync::: the '{}' status is not converted\", vmInstanceStatus.getStatus());\n+        if (DetailedStackStatus.UNREACHABLE == instanceHealthStatusMap.get(instanceMetaData)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f942f3c0aa971233e555bfbf5a058e33c93eb4f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyNjM5OQ==", "bodyText": "Thanks for the suggestion! I added an UNHEALTHY status to the instancestatus enum to catch UNHEALTHY separately. If this is merged, I will also add the UNHEALTHY to cloudbreak-cloud UI repository to be able to display UNHEALTHY in UI (https://github.com/hortonworks/hortonworks-cloud/blob/master/web/cloudbreak-ui/src/app/helpers/freeipa.helpers.ts).", "url": "https://github.com/hortonworks/cloudbreak/pull/9278#discussion_r512026399", "createdAt": "2020-10-26T14:58:12Z", "author": {"login": "christmasferret"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/ProviderChecker.java", "diffHunk": "@@ -74,33 +77,39 @@\n         }, LOGGER, \":::Auto sync::: provider is checked in {}ms\");\n     }\n \n-    private InstanceStatus updateStatuses(CloudVmInstanceStatus vmInstanceStatus, InstanceMetaData instanceMetaData) {\n+    private InstanceStatus updateStatuses(CloudVmInstanceStatus vmInstanceStatus, InstanceMetaData instanceMetaData,\n+        Map<InstanceMetaData, DetailedStackStatus> instanceHealthStatusMap) {\n         LOGGER.info(\":::Auto sync::: {} instance metadata status update in progress, new status: {}\",\n                 instanceMetaData.getShortHostname(), vmInstanceStatus);\n         InstanceStatus status = null;\n-        switch (vmInstanceStatus.getStatus()) {\n-            case STARTED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.CREATED);\n-                status = InstanceStatus.CREATED;\n-                break;\n-            case STOPPED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.STOPPED);\n-                status = InstanceStatus.STOPPED;\n-                break;\n-            case FAILED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.FAILED);\n-                status = InstanceStatus.FAILED;\n-                break;\n-            case TERMINATED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_ON_PROVIDER_SIDE);\n-                status = InstanceStatus.DELETED_ON_PROVIDER_SIDE;\n-                break;\n-            case TERMINATED_BY_PROVIDER:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_BY_PROVIDER);\n-                status = InstanceStatus.DELETED_BY_PROVIDER;\n-                break;\n-            default:\n-                LOGGER.info(\":::Auto sync::: the '{}' status is not converted\", vmInstanceStatus.getStatus());\n+        if (DetailedStackStatus.UNREACHABLE == instanceHealthStatusMap.get(instanceMetaData)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0Nzg3Ng=="}, "originalCommit": {"oid": "4f942f3c0aa971233e555bfbf5a058e33c93eb4f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDc3MTQzOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/ProviderChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToxNToyMlrOHnSOzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTowMDo0MFrOHoTvjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NTIxNQ==", "bodyText": "Since the unreachable's logic above is the highest precedence, it appears that unhealthy overrides stopped, failed, terminated, and terminated by the provider (all of which will report an unreachable status). I think the instance's health status should only be considered if the VM is in the running state.", "url": "https://github.com/hortonworks/cloudbreak/pull/9278#discussion_r510955215", "createdAt": "2020-10-23T15:15:22Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/ProviderChecker.java", "diffHunk": "@@ -74,33 +77,39 @@\n         }, LOGGER, \":::Auto sync::: provider is checked in {}ms\");\n     }\n \n-    private InstanceStatus updateStatuses(CloudVmInstanceStatus vmInstanceStatus, InstanceMetaData instanceMetaData) {\n+    private InstanceStatus updateStatuses(CloudVmInstanceStatus vmInstanceStatus, InstanceMetaData instanceMetaData,\n+        Map<InstanceMetaData, DetailedStackStatus> instanceHealthStatusMap) {\n         LOGGER.info(\":::Auto sync::: {} instance metadata status update in progress, new status: {}\",\n                 instanceMetaData.getShortHostname(), vmInstanceStatus);\n         InstanceStatus status = null;\n-        switch (vmInstanceStatus.getStatus()) {\n-            case STARTED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.CREATED);\n-                status = InstanceStatus.CREATED;\n-                break;\n-            case STOPPED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.STOPPED);\n-                status = InstanceStatus.STOPPED;\n-                break;\n-            case FAILED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.FAILED);\n-                status = InstanceStatus.FAILED;\n-                break;\n-            case TERMINATED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_ON_PROVIDER_SIDE);\n-                status = InstanceStatus.DELETED_ON_PROVIDER_SIDE;\n-                break;\n-            case TERMINATED_BY_PROVIDER:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_BY_PROVIDER);\n-                status = InstanceStatus.DELETED_BY_PROVIDER;\n-                break;\n-            default:\n-                LOGGER.info(\":::Auto sync::: the '{}' status is not converted\", vmInstanceStatus.getStatus());\n+        if (DetailedStackStatus.UNREACHABLE == instanceHealthStatusMap.get(instanceMetaData)) {\n+            setStatusIfNotTheSame(instanceMetaData, InstanceStatus.UNREACHABLE);\n+            status = InstanceStatus.UNREACHABLE;\n+        } else {\n+            switch (vmInstanceStatus.getStatus()) {\n+                case STARTED:\n+                    setStatusIfNotTheSame(instanceMetaData, InstanceStatus.CREATED);\n+                    status = InstanceStatus.CREATED;\n+                    break;\n+                case STOPPED:\n+                    setStatusIfNotTheSame(instanceMetaData, InstanceStatus.STOPPED);\n+                    status = InstanceStatus.STOPPED;\n+                    break;\n+                case FAILED:\n+                    setStatusIfNotTheSame(instanceMetaData, InstanceStatus.FAILED);\n+                    status = InstanceStatus.FAILED;\n+                    break;\n+                case TERMINATED:\n+                    setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_ON_PROVIDER_SIDE);\n+                    status = InstanceStatus.DELETED_ON_PROVIDER_SIDE;\n+                    break;\n+                case TERMINATED_BY_PROVIDER:\n+                    setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_BY_PROVIDER);\n+                    status = InstanceStatus.DELETED_BY_PROVIDER;\n+                    break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f942f3c0aa971233e555bfbf5a058e33c93eb4f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyODU1Nw==", "bodyText": "You are absolutely right. I made the change so it will not overwrite the failed and terminated status. Now only running instances that are unreachable or unhealthy are reported as it is.\nTested again below,", "url": "https://github.com/hortonworks/cloudbreak/pull/9278#discussion_r512028557", "createdAt": "2020-10-26T15:00:40Z", "author": {"login": "christmasferret"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/ProviderChecker.java", "diffHunk": "@@ -74,33 +77,39 @@\n         }, LOGGER, \":::Auto sync::: provider is checked in {}ms\");\n     }\n \n-    private InstanceStatus updateStatuses(CloudVmInstanceStatus vmInstanceStatus, InstanceMetaData instanceMetaData) {\n+    private InstanceStatus updateStatuses(CloudVmInstanceStatus vmInstanceStatus, InstanceMetaData instanceMetaData,\n+        Map<InstanceMetaData, DetailedStackStatus> instanceHealthStatusMap) {\n         LOGGER.info(\":::Auto sync::: {} instance metadata status update in progress, new status: {}\",\n                 instanceMetaData.getShortHostname(), vmInstanceStatus);\n         InstanceStatus status = null;\n-        switch (vmInstanceStatus.getStatus()) {\n-            case STARTED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.CREATED);\n-                status = InstanceStatus.CREATED;\n-                break;\n-            case STOPPED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.STOPPED);\n-                status = InstanceStatus.STOPPED;\n-                break;\n-            case FAILED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.FAILED);\n-                status = InstanceStatus.FAILED;\n-                break;\n-            case TERMINATED:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_ON_PROVIDER_SIDE);\n-                status = InstanceStatus.DELETED_ON_PROVIDER_SIDE;\n-                break;\n-            case TERMINATED_BY_PROVIDER:\n-                setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_BY_PROVIDER);\n-                status = InstanceStatus.DELETED_BY_PROVIDER;\n-                break;\n-            default:\n-                LOGGER.info(\":::Auto sync::: the '{}' status is not converted\", vmInstanceStatus.getStatus());\n+        if (DetailedStackStatus.UNREACHABLE == instanceHealthStatusMap.get(instanceMetaData)) {\n+            setStatusIfNotTheSame(instanceMetaData, InstanceStatus.UNREACHABLE);\n+            status = InstanceStatus.UNREACHABLE;\n+        } else {\n+            switch (vmInstanceStatus.getStatus()) {\n+                case STARTED:\n+                    setStatusIfNotTheSame(instanceMetaData, InstanceStatus.CREATED);\n+                    status = InstanceStatus.CREATED;\n+                    break;\n+                case STOPPED:\n+                    setStatusIfNotTheSame(instanceMetaData, InstanceStatus.STOPPED);\n+                    status = InstanceStatus.STOPPED;\n+                    break;\n+                case FAILED:\n+                    setStatusIfNotTheSame(instanceMetaData, InstanceStatus.FAILED);\n+                    status = InstanceStatus.FAILED;\n+                    break;\n+                case TERMINATED:\n+                    setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_ON_PROVIDER_SIDE);\n+                    status = InstanceStatus.DELETED_ON_PROVIDER_SIDE;\n+                    break;\n+                case TERMINATED_BY_PROVIDER:\n+                    setStatusIfNotTheSame(instanceMetaData, InstanceStatus.DELETED_BY_PROVIDER);\n+                    status = InstanceStatus.DELETED_BY_PROVIDER;\n+                    break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NTIxNQ=="}, "originalCommit": {"oid": "4f942f3c0aa971233e555bfbf5a058e33c93eb4f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDg0ODcwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/FreeipaChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTozMTo1MVrOHnS-6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTowMTo1NFrOHoTzQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2NzUyOA==", "bodyText": "Instead of using an outbound parameter instanceHealthStatusMap, would it be better to include that as a part of the SyncResult?", "url": "https://github.com/hortonworks/cloudbreak/pull/9278#discussion_r510967528", "createdAt": "2020-10-23T15:31:51Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/FreeipaChecker.java", "diffHunk": "@@ -29,31 +32,31 @@\n     @Inject\n     private FreeIpaHealthDetailsService freeIpaHealthDetailsService;\n \n-    private Pair<List<DetailedStackStatus>, String> checkStatus(Stack stack, Set<InstanceMetaData> checkableInstances) throws Exception {\n+    private Pair<Map<InstanceMetaData, DetailedStackStatus>, String> checkStatus(Stack stack, Set<InstanceMetaData> checkableInstances) throws Exception {\n         return checkedMeasure(() -> {\n-            List<DetailedStackStatus> statuses = new LinkedList<>();\n+            Map<InstanceMetaData, DetailedStackStatus> statuses = new HashMap<>();\n             List<RPCResponse<Boolean>> responses = new LinkedList<>();\n             for (InstanceMetaData instanceMetaData : checkableInstances) {\n                 try {\n                     RPCResponse<Boolean> response = checkedMeasure(() -> freeIpaHealthDetailsService.checkFreeIpaHealth(stack, instanceMetaData), LOGGER,\n                             \":::Auto sync::: FreeIPA health check ran in {}ms\");\n                     responses.add(response);\n                     if (response.getResult()) {\n-                        statuses.add(DetailedStackStatus.AVAILABLE);\n+                        statuses.put(instanceMetaData, DetailedStackStatus.AVAILABLE);\n                     } else {\n-                        statuses.add(DetailedStackStatus.UNHEALTHY);\n+                        statuses.put(instanceMetaData, DetailedStackStatus.UNHEALTHY);\n                     }\n                 } catch (Exception e) {\n                     LOGGER.info(\"FreeIpaClientException occurred during status fetch: \" + e.getMessage(), e);\n-                    statuses.add(DetailedStackStatus.UNREACHABLE);\n+                    statuses.put(instanceMetaData, DetailedStackStatus.UNREACHABLE);\n                 }\n             }\n             String message = getMessages(responses);\n             return Pair.of(statuses, message);\n         }, LOGGER, \":::Auto sync::: freeipa server status is checked in {}ms\");\n     }\n \n-    public SyncResult getStatus(Stack stack, Set<InstanceMetaData> checkableInstances) {\n+    public SyncResult getStatus(Stack stack, Set<InstanceMetaData> checkableInstances, Map<InstanceMetaData, DetailedStackStatus> instanceHealthStatusMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f942f3c0aa971233e555bfbf5a058e33c93eb4f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyOTUwNQ==", "bodyText": "This is great suggestion. I returned instanceHealthStatusMap in SyncResult now. It will make the code less coupled and more readable. I removed the carrier parameter.", "url": "https://github.com/hortonworks/cloudbreak/pull/9278#discussion_r512029505", "createdAt": "2020-10-26T15:01:54Z", "author": {"login": "christmasferret"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/FreeipaChecker.java", "diffHunk": "@@ -29,31 +32,31 @@\n     @Inject\n     private FreeIpaHealthDetailsService freeIpaHealthDetailsService;\n \n-    private Pair<List<DetailedStackStatus>, String> checkStatus(Stack stack, Set<InstanceMetaData> checkableInstances) throws Exception {\n+    private Pair<Map<InstanceMetaData, DetailedStackStatus>, String> checkStatus(Stack stack, Set<InstanceMetaData> checkableInstances) throws Exception {\n         return checkedMeasure(() -> {\n-            List<DetailedStackStatus> statuses = new LinkedList<>();\n+            Map<InstanceMetaData, DetailedStackStatus> statuses = new HashMap<>();\n             List<RPCResponse<Boolean>> responses = new LinkedList<>();\n             for (InstanceMetaData instanceMetaData : checkableInstances) {\n                 try {\n                     RPCResponse<Boolean> response = checkedMeasure(() -> freeIpaHealthDetailsService.checkFreeIpaHealth(stack, instanceMetaData), LOGGER,\n                             \":::Auto sync::: FreeIPA health check ran in {}ms\");\n                     responses.add(response);\n                     if (response.getResult()) {\n-                        statuses.add(DetailedStackStatus.AVAILABLE);\n+                        statuses.put(instanceMetaData, DetailedStackStatus.AVAILABLE);\n                     } else {\n-                        statuses.add(DetailedStackStatus.UNHEALTHY);\n+                        statuses.put(instanceMetaData, DetailedStackStatus.UNHEALTHY);\n                     }\n                 } catch (Exception e) {\n                     LOGGER.info(\"FreeIpaClientException occurred during status fetch: \" + e.getMessage(), e);\n-                    statuses.add(DetailedStackStatus.UNREACHABLE);\n+                    statuses.put(instanceMetaData, DetailedStackStatus.UNREACHABLE);\n                 }\n             }\n             String message = getMessages(responses);\n             return Pair.of(statuses, message);\n         }, LOGGER, \":::Auto sync::: freeipa server status is checked in {}ms\");\n     }\n \n-    public SyncResult getStatus(Stack stack, Set<InstanceMetaData> checkableInstances) {\n+    public SyncResult getStatus(Stack stack, Set<InstanceMetaData> checkableInstances, Map<InstanceMetaData, DetailedStackStatus> instanceHealthStatusMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2NzUyOA=="}, "originalCommit": {"oid": "4f942f3c0aa971233e555bfbf5a058e33c93eb4f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODk5NzY3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/StackStatusCheckerJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyNjoyN1rOHp8GQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToyMDo0OFrOHp97XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczODMwNQ==", "bodyText": "I think I know the answer to this but I wanted to check. Is the reason that DetailedStackStatus.UNHEALTHTY can't bypass the cloud provider check because we need to catch the case where 1 VM is running and 1 VM is either stopped, deleted, etc?", "url": "https://github.com/hortonworks/cloudbreak/pull/9278#discussion_r513738305", "createdAt": "2020-10-28T20:26:27Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/StackStatusCheckerJob.java", "diffHunk": "@@ -100,11 +100,16 @@ public void syncAStack(Stack stack) {\n                     }\n                     if (!checkableInstances.isEmpty()) {\n                         SyncResult syncResult = freeipaChecker.getStatus(stack, checkableInstances);\n-                        List<ProviderSyncResult> results = providerChecker.updateAndGetStatuses(stack, checkableInstances, syncResult.getInstanceStatusMap());\n-                        if (!results.isEmpty()) {\n-                            updateStackStatus(stack, syncResult, results, alreadyDeletedCount);\n+                        if (DetailedStackStatus.AVAILABLE == syncResult.getStatus()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ca87fd33ec0f33c10648f5c29ee0e421760d31"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2ODI4NQ==", "bodyText": "DetailedStackStatus.AVAILABLE happens only when freeipa in all instances are available. That is skipped by this change.", "url": "https://github.com/hortonworks/cloudbreak/pull/9278#discussion_r513768285", "createdAt": "2020-10-28T21:20:48Z", "author": {"login": "christmasferret"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/StackStatusCheckerJob.java", "diffHunk": "@@ -100,11 +100,16 @@ public void syncAStack(Stack stack) {\n                     }\n                     if (!checkableInstances.isEmpty()) {\n                         SyncResult syncResult = freeipaChecker.getStatus(stack, checkableInstances);\n-                        List<ProviderSyncResult> results = providerChecker.updateAndGetStatuses(stack, checkableInstances, syncResult.getInstanceStatusMap());\n-                        if (!results.isEmpty()) {\n-                            updateStackStatus(stack, syncResult, results, alreadyDeletedCount);\n+                        if (DetailedStackStatus.AVAILABLE == syncResult.getStatus()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczODMwNQ=="}, "originalCommit": {"oid": "85ca87fd33ec0f33c10648f5c29ee0e421760d31"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2040, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}