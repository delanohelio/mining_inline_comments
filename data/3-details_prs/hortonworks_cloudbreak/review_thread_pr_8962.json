{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMDAwMDYw", "number": 8962, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjoyNzowMFrOEh4Uug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjoyNzowMFrOEh4Uug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTYxMjc0OnYy", "diffSide": "RIGHT", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/NetworkParameterAdder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjoyNzowMFrOHPcaMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyMDo1MlrOHQCgLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1NjE0Ng==", "bodyText": "Not pressing and also a thing to consider for other cloud vendors too...\n       // GCP VPCs are global. Subnets have a global scope in region. So picking the first availability zone in the region for subnet. String zone = compute.regions().get(projectId, region.value()).execute().getZones().stream().findFirst().orElse(null);\nWe chose the first AZs in the region list to host the compute resources. If they talk to the database hosted in multiple AZs and if the traffic goes to a different AZ then the customer incurs a cost of 1 US cent per GB. Is it possible to pick AZs for database is in such a way that it is co-located with compute for the primary and the secondary can be any other AZ?", "url": "https://github.com/hortonworks/cloudbreak/pull/8962#discussion_r485956146", "createdAt": "2020-09-09T22:27:00Z", "author": {"login": "cegganesh84"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/NetworkParameterAdder.java", "diffHunk": "@@ -27,16 +27,21 @@\n     @VisibleForTesting\n     static final String SUBNET_ID = \"subnetId\";\n \n+    @VisibleForTesting\n+    static final String AVAILABILITY_ZONE = \"availabilityZone\";\n+\n     // These constants must match those in AzureNetworkView\n \n     @VisibleForTesting\n     static final String SUBNETS = \"subnets\";\n \n-    public Map<String, Object> addSubnetIds(Map<String, Object> parameters, List<String> subnetIds, CloudPlatform cloudPlatform) {\n+    public Map<String, Object> addSubnetIds(Map<String, Object> parameters, List<String> subnetIds, List<String> azs, CloudPlatform cloudPlatform) {\n         switch (cloudPlatform) {\n             case AWS:\n+            case GCP:\n             case MOCK:\n                 parameters.put(SUBNET_ID, String.join(\",\", subnetIds));\n+                parameters.put(AVAILABILITY_ZONE, String.join(\",\", azs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eddd98699555724a4071017b33c14e9931ab29e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0NDE5Mg==", "bodyText": "currently this service requires a subnet where the sql server needs to be deployed. I thought it would be nice to use the AZ of the selected subnet and then if we would like to adopt HA then just passing multiple subnet", "url": "https://github.com/hortonworks/cloudbreak/pull/8962#discussion_r486244192", "createdAt": "2020-09-10T10:51:01Z", "author": {"login": "doktoric"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/NetworkParameterAdder.java", "diffHunk": "@@ -27,16 +27,21 @@\n     @VisibleForTesting\n     static final String SUBNET_ID = \"subnetId\";\n \n+    @VisibleForTesting\n+    static final String AVAILABILITY_ZONE = \"availabilityZone\";\n+\n     // These constants must match those in AzureNetworkView\n \n     @VisibleForTesting\n     static final String SUBNETS = \"subnets\";\n \n-    public Map<String, Object> addSubnetIds(Map<String, Object> parameters, List<String> subnetIds, CloudPlatform cloudPlatform) {\n+    public Map<String, Object> addSubnetIds(Map<String, Object> parameters, List<String> subnetIds, List<String> azs, CloudPlatform cloudPlatform) {\n         switch (cloudPlatform) {\n             case AWS:\n+            case GCP:\n             case MOCK:\n                 parameters.put(SUBNET_ID, String.join(\",\", subnetIds));\n+                parameters.put(AVAILABILITY_ZONE, String.join(\",\", azs));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1NjE0Ng=="}, "originalCommit": {"oid": "3eddd98699555724a4071017b33c14e9931ab29e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MDI3MA==", "bodyText": "Yeah, sorry the pre-text of the question is in GCP a single subnet spans across all the AZs in that region (quite different from other vendors). So even if it is a single subnet given by the customer, in GCP traffic can go cross AZs. To prevent that in the GcpResourceBuilder, we deliberately choose the first subnet consistently to avoid deploying FreeIPA, DL and DH in three different AZs and thereby increasing the cost of the installation.", "url": "https://github.com/hortonworks/cloudbreak/pull/8962#discussion_r486580270", "createdAt": "2020-09-10T19:20:52Z", "author": {"login": "cegganesh84"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/NetworkParameterAdder.java", "diffHunk": "@@ -27,16 +27,21 @@\n     @VisibleForTesting\n     static final String SUBNET_ID = \"subnetId\";\n \n+    @VisibleForTesting\n+    static final String AVAILABILITY_ZONE = \"availabilityZone\";\n+\n     // These constants must match those in AzureNetworkView\n \n     @VisibleForTesting\n     static final String SUBNETS = \"subnets\";\n \n-    public Map<String, Object> addSubnetIds(Map<String, Object> parameters, List<String> subnetIds, CloudPlatform cloudPlatform) {\n+    public Map<String, Object> addSubnetIds(Map<String, Object> parameters, List<String> subnetIds, List<String> azs, CloudPlatform cloudPlatform) {\n         switch (cloudPlatform) {\n             case AWS:\n+            case GCP:\n             case MOCK:\n                 parameters.put(SUBNET_ID, String.join(\",\", subnetIds));\n+                parameters.put(AVAILABILITY_ZONE, String.join(\",\", azs));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1NjE0Ng=="}, "originalCommit": {"oid": "3eddd98699555724a4071017b33c14e9931ab29e"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2243, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}