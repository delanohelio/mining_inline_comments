{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMzQzMzQz", "number": 7643, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo0NTowMlrODrGEJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo0NTowMlrODrGEJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTE0NzI3OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzo0NTowMlrOF7PIaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjoxNTozNlrOF7jAXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1ODIxOQ==", "bodyText": "could you move these stream parameters into variables or even to methods?", "url": "https://github.com/hortonworks/cloudbreak/pull/7643#discussion_r397658219", "createdAt": "2020-03-25T07:45:02Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -133,18 +133,52 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n+        List<CloudInstance> affectedVms = new ArrayList<>();\n         try {\n-            Collection<String> instances = vms.stream().map(CloudInstance::getInstanceId).collect(Collectors.toSet());\n-            if (!instances.isEmpty()) {\n-                amazonEC2Client.rebootInstances(new RebootInstancesRequest().withInstanceIds(instances));\n+            if (!vms.isEmpty()) {\n+                List<CloudVmInstanceStatus> statuses = check(ac, vms);\n+                doReboot(affectedVms, amazonEC2Client, statuses.stream().filter(status -> status.getStatus() == InstanceStatus.STARTED)\n+                        .map(status -> status.getCloudInstance()).collect(Collectors.toList()));\n+                doStart(affectedVms, ac, statuses.stream().filter(status -> status.getStatus() == InstanceStatus.STOPPED)\n+                        .map(status -> status.getCloudInstance()).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50d22c381bf23d0715363758a054aa29b0b46e06"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4MzgzOQ==", "bodyText": "moved", "url": "https://github.com/hortonworks/cloudbreak/pull/7643#discussion_r397983839", "createdAt": "2020-03-25T16:15:36Z", "author": {"login": "holleyism"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -133,18 +133,52 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n+        List<CloudInstance> affectedVms = new ArrayList<>();\n         try {\n-            Collection<String> instances = vms.stream().map(CloudInstance::getInstanceId).collect(Collectors.toSet());\n-            if (!instances.isEmpty()) {\n-                amazonEC2Client.rebootInstances(new RebootInstancesRequest().withInstanceIds(instances));\n+            if (!vms.isEmpty()) {\n+                List<CloudVmInstanceStatus> statuses = check(ac, vms);\n+                doReboot(affectedVms, amazonEC2Client, statuses.stream().filter(status -> status.getStatus() == InstanceStatus.STARTED)\n+                        .map(status -> status.getCloudInstance()).collect(Collectors.toList()));\n+                doStart(affectedVms, ac, statuses.stream().filter(status -> status.getStatus() == InstanceStatus.STOPPED)\n+                        .map(status -> status.getCloudInstance()).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1ODIxOQ=="}, "originalCommit": {"oid": "50d22c381bf23d0715363758a054aa29b0b46e06"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2715, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}