{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzMwNjI0", "number": 7402, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoxOTo1NVrODjaBtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyMDowMFrODjaBzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDUzMTcyOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerConfigService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoxOTo1NVrOFvMmQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyMzowMFrOFvMtKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMzc5NA==", "bodyText": "Maybe the cluster name should be added to the log message", "url": "https://github.com/hortonworks/cloudbreak/pull/7402#discussion_r385033794", "createdAt": "2020-02-27T10:19:55Z", "author": {"login": "doktoric"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerConfigService.java", "diffHunk": "@@ -82,23 +85,35 @@ public void disableKnoxAutorestartIfCmVersionAtLeast(Versioned versionAtLeast, A\n     }\n \n     private void disableKnoxAutorestart(ApiClient client, String clusterName) {\n-        try {\n             ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(client);\n-            String knoxServiceName = getKnoxServiceName(clusterName, servicesResourceApi);\n+            getKnoxServiceName(clusterName, servicesResourceApi)\n+                    .ifPresentOrElse(\n+                            doDisableKnoxAutorestart(clusterName, servicesResourceApi),\n+                            () -> LOGGER.info(\"KNOX service name is missing, skipping disabling the autorestart property.\"));\n+    }\n \n+    private Consumer<String> doDisableKnoxAutorestart(String clusterName, ServicesResourceApi servicesResourceApi) {\n+        return knoxServiceName -> {\n             ApiConfig autorestartConfig = new ApiConfig().name(KNOX_AUTORESTART_ON_STOP).value(Boolean.FALSE.toString());\n             ApiServiceConfig serviceConfig = new ApiServiceConfig().addItemsItem(autorestartConfig);\n-            servicesResourceApi.updateServiceConfig(clusterName, knoxServiceName, \"\", serviceConfig);\n-        } catch (ApiException e) {\n-            LOGGER.debug(\"Failed to set autorestart_on_stop to KNOX in Cloudera Manager.\", e);\n-        }\n+            try {\n+                servicesResourceApi.updateServiceConfig(clusterName, knoxServiceName, \"\", serviceConfig);\n+            } catch (ApiException e) {\n+                LOGGER.debug(\"Failed to set autorestart_on_stop to KNOX in Cloudera Manager.\", e);\n+            }\n+        };\n     }\n \n-    private String getKnoxServiceName(String clusterName, ServicesResourceApi servicesResourceApi) throws ApiException {\n-        ApiServiceList serviceList = servicesResourceApi.readServices(clusterName, DataView.SUMMARY.name());\n-        return serviceList.getItems().stream()\n-                .filter(service -> KNOX_SERVICE.equals(service.getType()))\n-                .map(ApiService::getName)\n-                .findFirst().orElse(KNOX_SERVICE);\n+    private Optional<String> getKnoxServiceName(String clusterName, ServicesResourceApi servicesResourceApi) {\n+        try {\n+            ApiServiceList serviceList = servicesResourceApi.readServices(clusterName, DataView.SUMMARY.name());\n+            return serviceList.getItems().stream()\n+                    .filter(service -> KNOX_SERVICE.equals(service.getType()))\n+                    .map(ApiService::getName)\n+                    .findFirst();\n+        } catch (ApiException e) {\n+            LOGGER.debug(\"Failed to get KNOX service name from Cloudera Manager.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca104ce29503b8e0e43d3d822cac5fa1f4fc793c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzNTU2MA==", "bodyText": "Ideally the log entry should already contain it.", "url": "https://github.com/hortonworks/cloudbreak/pull/7402#discussion_r385035560", "createdAt": "2020-02-27T10:23:00Z", "author": {"login": "daszabo"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerConfigService.java", "diffHunk": "@@ -82,23 +85,35 @@ public void disableKnoxAutorestartIfCmVersionAtLeast(Versioned versionAtLeast, A\n     }\n \n     private void disableKnoxAutorestart(ApiClient client, String clusterName) {\n-        try {\n             ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(client);\n-            String knoxServiceName = getKnoxServiceName(clusterName, servicesResourceApi);\n+            getKnoxServiceName(clusterName, servicesResourceApi)\n+                    .ifPresentOrElse(\n+                            doDisableKnoxAutorestart(clusterName, servicesResourceApi),\n+                            () -> LOGGER.info(\"KNOX service name is missing, skipping disabling the autorestart property.\"));\n+    }\n \n+    private Consumer<String> doDisableKnoxAutorestart(String clusterName, ServicesResourceApi servicesResourceApi) {\n+        return knoxServiceName -> {\n             ApiConfig autorestartConfig = new ApiConfig().name(KNOX_AUTORESTART_ON_STOP).value(Boolean.FALSE.toString());\n             ApiServiceConfig serviceConfig = new ApiServiceConfig().addItemsItem(autorestartConfig);\n-            servicesResourceApi.updateServiceConfig(clusterName, knoxServiceName, \"\", serviceConfig);\n-        } catch (ApiException e) {\n-            LOGGER.debug(\"Failed to set autorestart_on_stop to KNOX in Cloudera Manager.\", e);\n-        }\n+            try {\n+                servicesResourceApi.updateServiceConfig(clusterName, knoxServiceName, \"\", serviceConfig);\n+            } catch (ApiException e) {\n+                LOGGER.debug(\"Failed to set autorestart_on_stop to KNOX in Cloudera Manager.\", e);\n+            }\n+        };\n     }\n \n-    private String getKnoxServiceName(String clusterName, ServicesResourceApi servicesResourceApi) throws ApiException {\n-        ApiServiceList serviceList = servicesResourceApi.readServices(clusterName, DataView.SUMMARY.name());\n-        return serviceList.getItems().stream()\n-                .filter(service -> KNOX_SERVICE.equals(service.getType()))\n-                .map(ApiService::getName)\n-                .findFirst().orElse(KNOX_SERVICE);\n+    private Optional<String> getKnoxServiceName(String clusterName, ServicesResourceApi servicesResourceApi) {\n+        try {\n+            ApiServiceList serviceList = servicesResourceApi.readServices(clusterName, DataView.SUMMARY.name());\n+            return serviceList.getItems().stream()\n+                    .filter(service -> KNOX_SERVICE.equals(service.getType()))\n+                    .map(ApiService::getName)\n+                    .findFirst();\n+        } catch (ApiException e) {\n+            LOGGER.debug(\"Failed to get KNOX service name from Cloudera Manager.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMzc5NA=="}, "originalCommit": {"oid": "ca104ce29503b8e0e43d3d822cac5fa1f4fc793c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDUzMTk2OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerConfigService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyMDowMFrOFvMmcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyMDowMFrOFvMmcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMzg0MQ==", "bodyText": "Maybe the cluster name should be added to the log message", "url": "https://github.com/hortonworks/cloudbreak/pull/7402#discussion_r385033841", "createdAt": "2020-02-27T10:20:00Z", "author": {"login": "doktoric"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerConfigService.java", "diffHunk": "@@ -82,23 +85,35 @@ public void disableKnoxAutorestartIfCmVersionAtLeast(Versioned versionAtLeast, A\n     }\n \n     private void disableKnoxAutorestart(ApiClient client, String clusterName) {\n-        try {\n             ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(client);\n-            String knoxServiceName = getKnoxServiceName(clusterName, servicesResourceApi);\n+            getKnoxServiceName(clusterName, servicesResourceApi)\n+                    .ifPresentOrElse(\n+                            doDisableKnoxAutorestart(clusterName, servicesResourceApi),\n+                            () -> LOGGER.info(\"KNOX service name is missing, skipping disabling the autorestart property.\"));\n+    }\n \n+    private Consumer<String> doDisableKnoxAutorestart(String clusterName, ServicesResourceApi servicesResourceApi) {\n+        return knoxServiceName -> {\n             ApiConfig autorestartConfig = new ApiConfig().name(KNOX_AUTORESTART_ON_STOP).value(Boolean.FALSE.toString());\n             ApiServiceConfig serviceConfig = new ApiServiceConfig().addItemsItem(autorestartConfig);\n-            servicesResourceApi.updateServiceConfig(clusterName, knoxServiceName, \"\", serviceConfig);\n-        } catch (ApiException e) {\n-            LOGGER.debug(\"Failed to set autorestart_on_stop to KNOX in Cloudera Manager.\", e);\n-        }\n+            try {\n+                servicesResourceApi.updateServiceConfig(clusterName, knoxServiceName, \"\", serviceConfig);\n+            } catch (ApiException e) {\n+                LOGGER.debug(\"Failed to set autorestart_on_stop to KNOX in Cloudera Manager.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca104ce29503b8e0e43d3d822cac5fa1f4fc793c"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2799, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}