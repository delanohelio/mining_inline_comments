{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzg0MjQ4", "number": 9675, "title": "CB-10095 Subnet selection for public gateway endpoint", "bodyText": "Adds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately.", "createdAt": "2020-12-21T23:47:03Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9675", "merged": true, "mergeCommit": {"oid": "85d78d70bcd53fbbcb66742c002b7c6758172283"}, "closed": true, "closedAt": "2021-01-11T21:13:01Z", "author": {"login": "hreeve-cloudera"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdofEx4gBqjQxMzgwNTg0ODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdvKKF6gBqjQxOTIwMTMwOTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a758d7bb6bbfa6eff939aaa417cd2a527cea8242", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a758d7bb6bbfa6eff939aaa417cd2a527cea8242", "committedDate": "2020-12-21T23:40:13Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "059e461b7a4e550635e316eddb90853c232c00a8", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/059e461b7a4e550635e316eddb90853c232c00a8", "committedDate": "2020-12-22T00:06:03Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "059e461b7a4e550635e316eddb90853c232c00a8", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/059e461b7a4e550635e316eddb90853c232c00a8", "committedDate": "2020-12-22T00:06:03Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "84311f8b118428de0e8120c3088cce8dc98a861e", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/84311f8b118428de0e8120c3088cce8dc98a861e", "committedDate": "2020-12-23T23:59:02Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84311f8b118428de0e8120c3088cce8dc98a861e", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/84311f8b118428de0e8120c3088cce8dc98a861e", "committedDate": "2020-12-23T23:59:02Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "86fce65d30118a698058bfe0b0fad279f08ab906", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/86fce65d30118a698058bfe0b0fad279f08ab906", "committedDate": "2020-12-28T16:07:59Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86fce65d30118a698058bfe0b0fad279f08ab906", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/86fce65d30118a698058bfe0b0fad279f08ab906", "committedDate": "2020-12-28T16:07:59Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "82bd813aa921bf95bd3e7d35c70361758008ca16", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/82bd813aa921bf95bd3e7d35c70361758008ca16", "committedDate": "2020-12-28T16:51:02Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82bd813aa921bf95bd3e7d35c70361758008ca16", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/82bd813aa921bf95bd3e7d35c70361758008ca16", "committedDate": "2020-12-28T16:51:02Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "66f7ee10ce9f979d6ed405f75c9948b801f3c87b", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/66f7ee10ce9f979d6ed405f75c9948b801f3c87b", "committedDate": "2021-01-04T02:08:04Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66f7ee10ce9f979d6ed405f75c9948b801f3c87b", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/66f7ee10ce9f979d6ed405f75c9948b801f3c87b", "committedDate": "2021-01-04T02:08:04Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "58e0ab92047b01966b79b86db80641eda0b3f4a9", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/58e0ab92047b01966b79b86db80641eda0b3f4a9", "committedDate": "2021-01-04T23:59:18Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58e0ab92047b01966b79b86db80641eda0b3f4a9", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/58e0ab92047b01966b79b86db80641eda0b3f4a9", "committedDate": "2021-01-04T23:59:18Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "304d954c377a49f67d16755a0c51c8a7e39413e7", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/304d954c377a49f67d16755a0c51c8a7e39413e7", "committedDate": "2021-01-05T16:27:04Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "304d954c377a49f67d16755a0c51c8a7e39413e7", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/304d954c377a49f67d16755a0c51c8a7e39413e7", "committedDate": "2021-01-05T16:27:04Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "ca415af38e9f9a39840f412c8a80b5bbe08fb319", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ca415af38e9f9a39840f412c8a80b5bbe08fb319", "committedDate": "2021-01-05T17:27:20Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca415af38e9f9a39840f412c8a80b5bbe08fb319", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ca415af38e9f9a39840f412c8a80b5bbe08fb319", "committedDate": "2021-01-05T17:27:20Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "b9ecc8ee55c11d5fa3503111021258b804843891", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/b9ecc8ee55c11d5fa3503111021258b804843891", "committedDate": "2021-01-05T20:19:57Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9ecc8ee55c11d5fa3503111021258b804843891", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/b9ecc8ee55c11d5fa3503111021258b804843891", "committedDate": "2021-01-05T20:19:57Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "80848f03b62b2b1570dd1cbf40bb4902b2a00aa9", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/80848f03b62b2b1570dd1cbf40bb4902b2a00aa9", "committedDate": "2021-01-05T21:55:17Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80848f03b62b2b1570dd1cbf40bb4902b2a00aa9", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/80848f03b62b2b1570dd1cbf40bb4902b2a00aa9", "committedDate": "2021-01-05T21:55:17Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "d7a3d9ecd1254859556f3b4943c50541d42b2d33", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d7a3d9ecd1254859556f3b4943c50541d42b2d33", "committedDate": "2021-01-05T22:04:33Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7a3d9ecd1254859556f3b4943c50541d42b2d33", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d7a3d9ecd1254859556f3b4943c50541d42b2d33", "committedDate": "2021-01-05T22:04:33Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "98018745ad6e55ee24466adcdb3619ba7056e6db", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/98018745ad6e55ee24466adcdb3619ba7056e6db", "committedDate": "2021-01-05T23:09:04Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98018745ad6e55ee24466adcdb3619ba7056e6db", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/98018745ad6e55ee24466adcdb3619ba7056e6db", "committedDate": "2021-01-05T23:09:04Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "4429d212e728db962f968afc9113ff8bfae2204d", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4429d212e728db962f968afc9113ff8bfae2204d", "committedDate": "2021-01-05T23:27:08Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4429d212e728db962f968afc9113ff8bfae2204d", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4429d212e728db962f968afc9113ff8bfae2204d", "committedDate": "2021-01-05T23:27:08Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "0aa94ac29a4722ed9600436b22024bae268d2264", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0aa94ac29a4722ed9600436b22024bae268d2264", "committedDate": "2021-01-06T00:36:21Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0aa94ac29a4722ed9600436b22024bae268d2264", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0aa94ac29a4722ed9600436b22024bae268d2264", "committedDate": "2021-01-06T00:36:21Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "6acba4cb038d8fa86d920b1ef4f7b2f606e29807", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6acba4cb038d8fa86d920b1ef4f7b2f606e29807", "committedDate": "2021-01-06T01:24:25Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6acba4cb038d8fa86d920b1ef4f7b2f606e29807", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6acba4cb038d8fa86d920b1ef4f7b2f606e29807", "committedDate": "2021-01-06T01:24:25Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6cd2ebe8438779c7148555fae81e3c07b87782fd", "committedDate": "2021-01-06T01:42:50Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMjc4Mjk4", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#pullrequestreview-562278298", "createdAt": "2021-01-06T02:08:07Z", "commit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMjowODowOFrOIOvLdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMjoyNDoxMVrOIOvceA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMyMzk1OA==", "bodyText": "Should we still use the selectedAZ here? The selectedAZ can be coming from the network request, but the user maybe explicitly specifying the subnet to use for the endpoint gateway anyways if provided. I was thinking that the provided getGatewayEndpointSubnetMetas will always take precedence.", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552323958", "createdAt": "2021-01-06T02:08:08Z", "author": {"login": "enis"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/environment/network/EnvironmentBaseNetworkConverter.java", "diffHunk": "@@ -32,34 +34,37 @@ public Network convertToLegacyNetwork(EnvironmentNetworkResponse source, String\n         result.setOutboundInternetTraffic(source.getOutboundInternetTraffic());\n         result.setNetworkCidrs(source.getNetworkCidrs());\n         Map<String, Object> attributes = new HashMap<>();\n-        Optional<CloudSubnet> cloudSubnet;\n-        if (StringUtils.isNotBlank(source.getPreferedSubnetId())) {\n-            LOGGER.debug(\"Choosing subnet by prefered subnet Id {}\", source.getPreferedSubnetId());\n-            CloudSubnet cloudSubnetById = source.getSubnetMetas().get(source.getPreferedSubnetId());\n-            if (cloudSubnetById == null) {\n-                cloudSubnetById = source.getSubnetMetas().values()\n-                        .stream()\n-                        .filter(e -> e.getId().equals(source.getPreferedSubnetId()))\n-                        .findFirst().orElse(null);\n-            }\n-            cloudSubnet = Optional.of(cloudSubnetById);\n-        } else if (StringUtils.isNotEmpty(availabilityZone)) {\n-            LOGGER.debug(\"Choosing subnet by availability zone {}\", availabilityZone);\n-            cloudSubnet = source.getSubnetMetas().values().stream()\n-                    .filter(s -> StringUtils.isNotEmpty(s.getAvailabilityZone()) &&\n-                            s.getAvailabilityZone().equals(availabilityZone))\n-                    .findFirst();\n-        } else {\n-            LOGGER.debug(\"Fallback to choose random subnet\");\n-            cloudSubnet = source.getSubnetMetas().values().stream().findFirst();\n-        }\n+        Optional<CloudSubnet> cloudSubnet = chooseSubnet(source.getPreferedSubnetId(), source.getSubnetMetas(), availabilityZone, true);\n         if (cloudSubnet.isEmpty()) {\n             throw new BadRequestException(\"No subnet for the given availability zone: \" + availabilityZone);\n         }\n         LOGGER.debug(\"Chosen subnet: {}\", cloudSubnet.get());\n+\n+        if (source.getPublicEndpointAccessGateway() == PublicEndpointAccessGateway.ENABLED) {\n+            String selectedAZ = cloudSubnet.get().getAvailabilityZone();\n+            Map<String, CloudSubnet> subnetsToParse;\n+            if (source.getGatewayEndpointSubnetMetas() == null || source.getGatewayEndpointSubnetMetas().isEmpty()) {\n+                subnetsToParse = source.getSubnetMetas();\n+            } else {\n+                subnetsToParse = source.getGatewayEndpointSubnetMetas();\n+            }\n+            Map<String, CloudSubnet> publicSubnetMetas = subnetsToParse.entrySet().stream()\n+                .filter(entry -> !entry.getValue().isPrivateSubnet())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+            Optional<CloudSubnet> endpointGatewayCloudSubnet = chooseSubnet(null,\n+                publicSubnetMetas, selectedAZ, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMyNjE3OQ==", "bodyText": "Seeing the name of this function together with the one below, I was just confused why we are having a check for both a Set (as in HashSet) and a List check. It turns out it is a check for existence.\nMaybe we can merge the List vs non-list cases to simplify. If there is only 1 subnet, then it is a list of 1.", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552326179", "createdAt": "2021-01-06T02:16:20Z", "author": {"login": "enis"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/view/AwsNetworkView.java", "diffHunk": "@@ -55,6 +57,23 @@ public boolean isSubnetList() {\n         return isSubnetList() ? List.of(getExistingSubnet().split(\",\")) : (isExistingSubnet() ? List.of(getExistingSubnet()) : List.of());\n     }\n \n+    private String getEndpointGatewaySubnet() {\n+        return network.getStringParameter(ENDPOINT_GATEWAY_SUBNET_ID);\n+    }\n+\n+    public boolean isEndpointGatewaySubnetSet() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMyNzkzNw==", "bodyText": "Should this check be a subset check rather than equals() check? We can have env with 3 subnets, but endpoint gateway with 1 subnet, no?", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552327937", "createdAt": "2021-01-06T02:22:48Z", "author": {"login": "enis"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/NetworkCreationHandler.java", "diffHunk": "@@ -114,6 +126,50 @@ private void setChildEnvironmentNetworkIfItHasParentWithTheSameCloudProvider(Env\n         }\n     }\n \n+    private Map<String, CloudSubnet> removePrivateSubnets(Map<String, CloudSubnet> endpointGatewaySubnetMetas) {\n+        LOGGER.debug(\"Removing any private subnets from the provided endpoint gateway list because they won't be used.\");\n+        if (endpointGatewaySubnetMetas == null || endpointGatewaySubnetMetas.isEmpty()) {\n+            return Map.of();\n+        }\n+        return endpointGatewaySubnetMetas.entrySet().stream()\n+            .filter(entry -> !entry.getValue().isPrivateSubnet())\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    }\n+\n+    private void validateSubnetsIfProvided(Environment environment, Map<String, CloudSubnet> subnetMetas,\n+            Map<String, CloudSubnet> endpointGatewaySubnetMetas) {\n+        if (hasNetwork(environment) && environment.getNetwork().getPublicEndpointAccessGateway() == PublicEndpointAccessGateway.ENABLED &&\n+                environment.getNetwork().getRegistrationType() != RegistrationType.CREATE_NEW) {\n+            if (subnetMetas != null && !subnetMetas.isEmpty()) {\n+                if (endpointGatewaySubnetMetas != null && !endpointGatewaySubnetMetas.isEmpty()) {\n+                    LOGGER.debug(\"Verifying that provided endpoint gateway subnets share availability zones with provided environment subnets.\");\n+                    Set<String> subnetAZs = subnetMetas.values().stream()\n+                        .map(CloudSubnet::getAvailabilityZone)\n+                        .collect(Collectors.toSet());\n+                    Set<String> endpointGatewaySubnetAZs = endpointGatewaySubnetMetas.values().stream()\n+                        .map(CloudSubnet::getAvailabilityZone)\n+                        .collect(Collectors.toSet());\n+                    if (!subnetAZs.equals(endpointGatewaySubnetAZs)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMyODMxMg==", "bodyText": "same here.", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552328312", "createdAt": "2021-01-06T02:24:11Z", "author": {"login": "enis"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/NetworkCreationHandler.java", "diffHunk": "@@ -114,6 +126,50 @@ private void setChildEnvironmentNetworkIfItHasParentWithTheSameCloudProvider(Env\n         }\n     }\n \n+    private Map<String, CloudSubnet> removePrivateSubnets(Map<String, CloudSubnet> endpointGatewaySubnetMetas) {\n+        LOGGER.debug(\"Removing any private subnets from the provided endpoint gateway list because they won't be used.\");\n+        if (endpointGatewaySubnetMetas == null || endpointGatewaySubnetMetas.isEmpty()) {\n+            return Map.of();\n+        }\n+        return endpointGatewaySubnetMetas.entrySet().stream()\n+            .filter(entry -> !entry.getValue().isPrivateSubnet())\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    }\n+\n+    private void validateSubnetsIfProvided(Environment environment, Map<String, CloudSubnet> subnetMetas,\n+            Map<String, CloudSubnet> endpointGatewaySubnetMetas) {\n+        if (hasNetwork(environment) && environment.getNetwork().getPublicEndpointAccessGateway() == PublicEndpointAccessGateway.ENABLED &&\n+                environment.getNetwork().getRegistrationType() != RegistrationType.CREATE_NEW) {\n+            if (subnetMetas != null && !subnetMetas.isEmpty()) {\n+                if (endpointGatewaySubnetMetas != null && !endpointGatewaySubnetMetas.isEmpty()) {\n+                    LOGGER.debug(\"Verifying that provided endpoint gateway subnets share availability zones with provided environment subnets.\");\n+                    Set<String> subnetAZs = subnetMetas.values().stream()\n+                        .map(CloudSubnet::getAvailabilityZone)\n+                        .collect(Collectors.toSet());\n+                    Set<String> endpointGatewaySubnetAZs = endpointGatewaySubnetMetas.values().stream()\n+                        .map(CloudSubnet::getAvailabilityZone)\n+                        .collect(Collectors.toSet());\n+                    if (!subnetAZs.equals(endpointGatewaySubnetAZs)) {\n+                        throw new BadRequestException(String.format(UNMATCHED_AZ, subnetAZs));\n+                    }\n+                } else {\n+                    LOGGER.debug(\"Verifying that public subnets in availability zones that match the private subnets were provided.\");\n+                    Set<String> privateAZs = subnetMetas.values().stream()\n+                        .filter(CloudSubnet::isPrivateSubnet)\n+                        .map(CloudSubnet::getAvailabilityZone)\n+                        .collect(Collectors.toSet());\n+                    Set<String> publicAZs = subnetMetas.values().stream()\n+                        .filter(subnet -> !subnet.isPrivateSubnet())\n+                        .map(CloudSubnet::getAvailabilityZone)\n+                        .collect(Collectors.toSet());\n+                    if (!privateAZs.equals(publicAZs)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyNzQyODY0", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#pullrequestreview-562742864", "createdAt": "2021-01-06T14:20:00Z", "commit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNDoyMDowMFrOIPDZgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNTozMDo0NlrOIPHMRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY1NTIzNQ==", "bodyText": "so it doesn't a converter anymore as it creates loadbalancers. I liked it when it returned the loadbalancer instead of adding to a list in the parameters.", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552655235", "createdAt": "2021-01-06T14:20:00Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsLaunchService.java", "diffHunk": "@@ -256,32 +254,59 @@ private void updateCloudformationWithLoadBalancers(AuthenticatedContext ac, Clou\n         }\n     }\n \n-    private AwsLoadBalancerScheme determinePublicVsPrivateSchema(AwsNetworkView awsNetworkView, AmazonEC2Client amazonEC2Client) {\n-        String subnetId = awsNetworkView.getExistingSubnet();\n-        String vpcId = awsNetworkView.getExistingVpc();\n+    private void convertLoadBalancer(CloudLoadBalancer cloudLoadBalancer, List<CloudResource> instances,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY2NjM2OQ==", "bodyText": "I would prefer utilizing the power of Optional:\n    public AwsListener getOrCreateListener(int port) {\n        return listeners.stream()\n            .filter(l -> l.getPort() == port)\n            .findFirst().orElseGet(() -> createListener(port));\n    }\n\n    private AwsListener createListener(int port) {\n        AwsListener listener = new AwsListener(scheme, port);\n        listeners.add(listener);\n        return listener;\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552666369", "createdAt": "2021-01-06T14:33:16Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/loadbalancer/AwsLoadBalancer.java", "diffHunk": "@@ -36,6 +41,19 @@ public AwsLoadBalancerScheme getScheme() {\n         return listeners;\n     }\n \n+    public AwsListener getOrCreateListener(int port) {\n+        Optional<AwsListener> listenerOptional = listeners.stream()\n+            .filter(l -> l.getPort() == port)\n+            .findFirst();\n+        if (listenerOptional.isPresent()) {\n+            return listenerOptional.get();\n+        } else {\n+            AwsListener listener = new AwsListener(scheme, port);\n+            listeners.add(listener);\n+            return listener;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY3NTIxNg==", "bodyText": "this could be moved to field level (practical reason next to one line less is we don't have to take care of it if we introduce a new constructor)", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552675216", "createdAt": "2021-01-06T14:43:26Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/loadbalancer/AwsTargetGroup.java", "diffHunk": "@@ -1,28 +1,24 @@\n package com.sequenceiq.cloudbreak.cloud.aws.loadbalancer;\n \n-import java.util.List;\n-\n-import org.apache.commons.lang3.StringUtils;\n+import java.util.HashSet;\n+import java.util.Set;\n \n public class AwsTargetGroup {\n \n     private static final String TARGET_GROUP_NAME_PREFIX = \"TargetGroupPort\";\n \n+    private final Set<String> instanceIds;\n+\n     private final int port;\n \n     private final String name;\n \n-    private final int order;\n-\n-    private final List<String> instanceIds;\n-\n     private String arn;\n \n-    public AwsTargetGroup(int port, AwsLoadBalancerScheme scheme, int order, List<String> instanceIds) {\n+    public AwsTargetGroup(AwsLoadBalancerScheme scheme, int port) {\n         this.port = port;\n-        this.order = order;\n-        this.instanceIds = instanceIds;\n-        name = getTargetGroupName(port, scheme);\n+        this.name = getTargetGroupName(port, scheme);\n+        this.instanceIds = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY5NzIxNw==", "bodyText": "can't we just remove these fields from the entity and leave them in the database. As you wrote somewhere these are not really used in any environment yet. If we can't remove them please create a followup jira to remove them in the next release, if you haven't created one already. thanks", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552697217", "createdAt": "2021-01-06T15:07:48Z", "author": {"login": "lacikaaa"}, "path": "core-model/src/main/java/com/sequenceiq/cloudbreak/domain/stack/loadbalancer/LoadBalancer.java", "diffHunk": "@@ -39,9 +41,16 @@\n \n     private String endpoint;\n \n+    /**\n+     * @deprecated Use {@link #targetGroupSet} instead.\n+     */\n+    @Deprecated\n     @OneToMany(mappedBy = \"loadBalancer\", cascade = CascadeType.REMOVE, orphanRemoval = true)\n     private Set<TargetGroup> targetGroups = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcxMTkwOQ==", "bodyText": "could you move it to a new method called sth like chooseSubnetForEndpointGateway?", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552711909", "createdAt": "2021-01-06T15:24:27Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/environment/network/EnvironmentBaseNetworkConverter.java", "diffHunk": "@@ -32,34 +34,37 @@ public Network convertToLegacyNetwork(EnvironmentNetworkResponse source, String\n         result.setOutboundInternetTraffic(source.getOutboundInternetTraffic());\n         result.setNetworkCidrs(source.getNetworkCidrs());\n         Map<String, Object> attributes = new HashMap<>();\n-        Optional<CloudSubnet> cloudSubnet;\n-        if (StringUtils.isNotBlank(source.getPreferedSubnetId())) {\n-            LOGGER.debug(\"Choosing subnet by prefered subnet Id {}\", source.getPreferedSubnetId());\n-            CloudSubnet cloudSubnetById = source.getSubnetMetas().get(source.getPreferedSubnetId());\n-            if (cloudSubnetById == null) {\n-                cloudSubnetById = source.getSubnetMetas().values()\n-                        .stream()\n-                        .filter(e -> e.getId().equals(source.getPreferedSubnetId()))\n-                        .findFirst().orElse(null);\n-            }\n-            cloudSubnet = Optional.of(cloudSubnetById);\n-        } else if (StringUtils.isNotEmpty(availabilityZone)) {\n-            LOGGER.debug(\"Choosing subnet by availability zone {}\", availabilityZone);\n-            cloudSubnet = source.getSubnetMetas().values().stream()\n-                    .filter(s -> StringUtils.isNotEmpty(s.getAvailabilityZone()) &&\n-                            s.getAvailabilityZone().equals(availabilityZone))\n-                    .findFirst();\n-        } else {\n-            LOGGER.debug(\"Fallback to choose random subnet\");\n-            cloudSubnet = source.getSubnetMetas().values().stream().findFirst();\n-        }\n+        Optional<CloudSubnet> cloudSubnet = chooseSubnet(source.getPreferedSubnetId(), source.getSubnetMetas(), availabilityZone, true);\n         if (cloudSubnet.isEmpty()) {\n             throw new BadRequestException(\"No subnet for the given availability zone: \" + availabilityZone);\n         }\n         LOGGER.debug(\"Chosen subnet: {}\", cloudSubnet.get());\n+\n+        if (source.getPublicEndpointAccessGateway() == PublicEndpointAccessGateway.ENABLED) {\n+            String selectedAZ = cloudSubnet.get().getAvailabilityZone();\n+            Map<String, CloudSubnet> subnetsToParse;\n+            if (source.getGatewayEndpointSubnetMetas() == null || source.getGatewayEndpointSubnetMetas().isEmpty()) {\n+                subnetsToParse = source.getSubnetMetas();\n+            } else {\n+                subnetsToParse = source.getGatewayEndpointSubnetMetas();\n+            }\n+            Map<String, CloudSubnet> publicSubnetMetas = subnetsToParse.entrySet().stream()\n+                .filter(entry -> !entry.getValue().isPrivateSubnet())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+            Optional<CloudSubnet> endpointGatewayCloudSubnet = chooseSubnet(null,\n+                publicSubnetMetas, selectedAZ, false);\n+            if (endpointGatewayCloudSubnet.isEmpty()) {\n+                throw new BadRequestException(\"Could not find public subnet in availability zone: \" + availabilityZone);\n+            }\n+            LOGGER.debug(\"Chosen endpoint gateway subnet: {}\", endpointGatewayCloudSubnet.get());\n+            attributes.put(\"endpointGatewaySubnetId\", endpointGatewayCloudSubnet.get().getId());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcxNzM4Mw==", "bodyText": "I think it would be useful to add some extra log lines, as there are a several if and it would help us investigate later", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552717383", "createdAt": "2021-01-06T15:30:46Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/stacks/StackV4RequestToStackConverter.java", "diffHunk": "@@ -349,39 +350,79 @@ private void validateStackAuthentication(StackV4Request source) {\n         return convertedSet;\n     }\n \n-    private Set<LoadBalancer> createLoadBalancers(StackV4Request source, Stack stack) {\n+    private Set<LoadBalancer> createLoadBalancers(StackV4Request source, Stack stack, DetailedEnvironmentResponse environment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6cd2ebe8438779c7148555fae81e3c07b87782fd", "committedDate": "2021-01-06T01:42:50Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "8fe1ddbfe659a08c934dc3ec02d3ba515fca40bc", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8fe1ddbfe659a08c934dc3ec02d3ba515fca40bc", "committedDate": "2021-01-06T19:51:28Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fe1ddbfe659a08c934dc3ec02d3ba515fca40bc", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8fe1ddbfe659a08c934dc3ec02d3ba515fca40bc", "committedDate": "2021-01-06T19:51:28Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "525c662ae37d23c6b985b8e4571c4edd46ea9e03", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/525c662ae37d23c6b985b8e4571c4edd46ea9e03", "committedDate": "2021-01-06T19:53:11Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "525c662ae37d23c6b985b8e4571c4edd46ea9e03", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/525c662ae37d23c6b985b8e4571c4edd46ea9e03", "committedDate": "2021-01-06T19:53:11Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "8b0ea1fd3c2035bb485c5b1633956af7b1112e9d", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8b0ea1fd3c2035bb485c5b1633956af7b1112e9d", "committedDate": "2021-01-06T20:48:34Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b0ea1fd3c2035bb485c5b1633956af7b1112e9d", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8b0ea1fd3c2035bb485c5b1633956af7b1112e9d", "committedDate": "2021-01-06T20:48:34Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7350f8f95c59441478aa883ee09d68ee4d7489ab", "committedDate": "2021-01-07T00:52:02Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyOTEyOTUw", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#pullrequestreview-562912950", "createdAt": "2021-01-06T17:44:09Z", "commit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzo0NDowOVrOIPPSyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDoxNjo1OFrOIPuCWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg1MDEyMw==", "bodyText": "Set.of()", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552850123", "createdAt": "2021-01-06T17:44:09Z", "author": {"login": "bergerdenes"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/spi/StackToCloudStackConverterTest.java", "diffHunk": "@@ -986,4 +986,48 @@ public void testConvertWithKnoxLoadBalancer() {\n         assertEquals(Set.of(\"group1\", \"group2\"), groupNames);\n     }\n \n+    @Test\n+    public void testConvertWithMultipleKnoxLoadBalancers() {\n+        Set<InstanceGroup> instanceGroups = new LinkedHashSet<>();\n+        InstanceGroup instanceGroup1 = mock(InstanceGroup.class);\n+        InstanceGroup instanceGroup2 = mock(InstanceGroup.class);\n+        when(instanceGroup1.getGroupName()).thenReturn(\"group1\");\n+        when(instanceGroup2.getGroupName()).thenReturn(\"group2\");\n+        instanceGroups.add(instanceGroup1);\n+        instanceGroups.add(instanceGroup2);\n+        when(stack.getInstanceGroupsAsList()).thenReturn(new ArrayList<>(instanceGroups));\n+        Template template = new Template();\n+        template.setVolumeTemplates(Sets.newHashSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg1MDc5MQ==", "bodyText": "Set.of()", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552850791", "createdAt": "2021-01-06T17:44:52Z", "author": {"login": "bergerdenes"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/spi/StackToCloudStackConverterTest.java", "diffHunk": "@@ -986,4 +986,48 @@ public void testConvertWithKnoxLoadBalancer() {\n         assertEquals(Set.of(\"group1\", \"group2\"), groupNames);\n     }\n \n+    @Test\n+    public void testConvertWithMultipleKnoxLoadBalancers() {\n+        Set<InstanceGroup> instanceGroups = new LinkedHashSet<>();\n+        InstanceGroup instanceGroup1 = mock(InstanceGroup.class);\n+        InstanceGroup instanceGroup2 = mock(InstanceGroup.class);\n+        when(instanceGroup1.getGroupName()).thenReturn(\"group1\");\n+        when(instanceGroup2.getGroupName()).thenReturn(\"group2\");\n+        instanceGroups.add(instanceGroup1);\n+        instanceGroups.add(instanceGroup2);\n+        when(stack.getInstanceGroupsAsList()).thenReturn(new ArrayList<>(instanceGroups));\n+        Template template = new Template();\n+        template.setVolumeTemplates(Sets.newHashSet());\n+        when(instanceGroup1.getTemplate()).thenReturn(template);\n+        when(instanceGroup1.getNotDeletedInstanceMetaDataSet()).thenReturn(Collections.emptySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg1MDkwMQ==", "bodyText": "Set.of()", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552850901", "createdAt": "2021-01-06T17:45:05Z", "author": {"login": "bergerdenes"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/spi/StackToCloudStackConverterTest.java", "diffHunk": "@@ -986,4 +986,48 @@ public void testConvertWithKnoxLoadBalancer() {\n         assertEquals(Set.of(\"group1\", \"group2\"), groupNames);\n     }\n \n+    @Test\n+    public void testConvertWithMultipleKnoxLoadBalancers() {\n+        Set<InstanceGroup> instanceGroups = new LinkedHashSet<>();\n+        InstanceGroup instanceGroup1 = mock(InstanceGroup.class);\n+        InstanceGroup instanceGroup2 = mock(InstanceGroup.class);\n+        when(instanceGroup1.getGroupName()).thenReturn(\"group1\");\n+        when(instanceGroup2.getGroupName()).thenReturn(\"group2\");\n+        instanceGroups.add(instanceGroup1);\n+        instanceGroups.add(instanceGroup2);\n+        when(stack.getInstanceGroupsAsList()).thenReturn(new ArrayList<>(instanceGroups));\n+        Template template = new Template();\n+        template.setVolumeTemplates(Sets.newHashSet());\n+        when(instanceGroup1.getTemplate()).thenReturn(template);\n+        when(instanceGroup1.getNotDeletedInstanceMetaDataSet()).thenReturn(Collections.emptySet());\n+        when(instanceGroup1.getStack()).thenReturn(stack);\n+        when(instanceGroup2.getTemplate()).thenReturn(template);\n+        when(instanceGroup2.getNotDeletedInstanceMetaDataSet()).thenReturn(Collections.emptySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg1MzQ3Ng==", "bodyText": "I assume that asserting equality for all of the stack properties would be overkill", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552853476", "createdAt": "2021-01-06T17:47:41Z", "author": {"login": "bergerdenes"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/spi/StackToCloudStackConverterTest.java", "diffHunk": "@@ -986,4 +986,48 @@ public void testConvertWithKnoxLoadBalancer() {\n         assertEquals(Set.of(\"group1\", \"group2\"), groupNames);\n     }\n \n+    @Test\n+    public void testConvertWithMultipleKnoxLoadBalancers() {\n+        Set<InstanceGroup> instanceGroups = new LinkedHashSet<>();\n+        InstanceGroup instanceGroup1 = mock(InstanceGroup.class);\n+        InstanceGroup instanceGroup2 = mock(InstanceGroup.class);\n+        when(instanceGroup1.getGroupName()).thenReturn(\"group1\");\n+        when(instanceGroup2.getGroupName()).thenReturn(\"group2\");\n+        instanceGroups.add(instanceGroup1);\n+        instanceGroups.add(instanceGroup2);\n+        when(stack.getInstanceGroupsAsList()).thenReturn(new ArrayList<>(instanceGroups));\n+        Template template = new Template();\n+        template.setVolumeTemplates(Sets.newHashSet());\n+        when(instanceGroup1.getTemplate()).thenReturn(template);\n+        when(instanceGroup1.getNotDeletedInstanceMetaDataSet()).thenReturn(Collections.emptySet());\n+        when(instanceGroup1.getStack()).thenReturn(stack);\n+        when(instanceGroup2.getTemplate()).thenReturn(template);\n+        when(instanceGroup2.getNotDeletedInstanceMetaDataSet()).thenReturn(Collections.emptySet());\n+        when(instanceGroup2.getStack()).thenReturn(stack);\n+        TargetGroup targetGroup = mock(TargetGroup.class);\n+        when(targetGroup.getType()).thenReturn(TargetGroupType.KNOX);\n+        LoadBalancer internalLoadBalancer = mock(LoadBalancer.class);\n+        when(internalLoadBalancer.getType()).thenReturn(LoadBalancerType.DEFAULT_GATEWAY);\n+        when(internalLoadBalancer.getId()).thenReturn(1L);\n+        LoadBalancer externalLoadBalancer = mock(LoadBalancer.class);\n+        when(externalLoadBalancer.getType()).thenReturn(LoadBalancerType.ENDPOINT_ACCESS_GATEWAY);\n+        when(externalLoadBalancer.getId()).thenReturn(2L);\n+        when(loadBalancerPersistenceService.findByStackId(anyLong())).thenReturn(Set.of(internalLoadBalancer, externalLoadBalancer));\n+        when(targetGroupPersistenceService.findByLoadBalancerId(anyLong())).thenReturn(Set.of(targetGroup));\n+        when(instanceGroupService.findByTargetGroupId(anyLong())).thenReturn(Set.of(instanceGroup1, instanceGroup2));\n+        when(loadBalancerConfigService.getPortsForTargetGroup(any(TargetGroup.class))).thenReturn(Set.of(443));\n+\n+        CloudStack result = underTest.convert(stack);\n+\n+        assertEquals(2, result.getLoadBalancers().size());\n+        Optional<CloudLoadBalancer> internalCloudLoadBalancer = result.getLoadBalancers().stream()\n+            .filter(lb -> lb.getType() == LoadBalancerType.DEFAULT_GATEWAY)\n+            .findFirst();\n+        assertTrue(internalCloudLoadBalancer.isPresent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg2NzI4Mg==", "bodyText": "you could use \"${subnetId}\"<#sep>,", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r552867282", "createdAt": "2021-01-06T18:02:52Z", "author": {"login": "bergerdenes"}, "path": "cloud-aws/src/main/resources/templates/aws-cf-stack.ftl", "diffHunk": "@@ -279,7 +279,11 @@\n       \"Properties\" : {\n         \"IpAddressType\" : \"ipv4\",\n         \"Scheme\" : \"${loadBalancer.awsScheme}\",\n-        \"Subnets\" : [ { \"Ref\" : \"SubnetId\" } ],\n+        \"Subnets\" : [\n+          <#list loadBalancer.subnetIds as subnetId>\n+          \"${subnetId}\"<#if (subnetId_index + 1) != loadBalancer.subnetIds?size>,</#if>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd2ebe8438779c7148555fae81e3c07b87782fd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMzAzOA==", "bodyText": "\u203c\ufe0f This change is not backward compatible\ni.e. changing enum values that are stored in the database is generally a wrong idea\nYou need to maintain backward(and forward) compatibility\nThis enum's values are stored int Cloudbreak database, in loadbalancer.type", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553323038", "createdAt": "2021-01-07T13:22:03Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/type/LoadBalancerType.java", "diffHunk": "@@ -1,6 +1,6 @@\n package com.sequenceiq.common.api.type;\n \n public enum LoadBalancerType {\n-    PUBLIC,\n-    PRIVATE\n+    ENDPOINT_ACCESS_GATEWAY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyNjQ3MQ==", "bodyText": "As Arpad suggested please follow the Database schema changes with zero downtime guideline and provide compatibility with deprecated fields. e.g. return the previous targetgroup if the new column is null.", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553326471", "createdAt": "2021-01-07T13:28:41Z", "author": {"login": "bergerdenes"}, "path": "core-model/src/main/java/com/sequenceiq/cloudbreak/domain/stack/loadbalancer/LoadBalancer.java", "diffHunk": "@@ -94,14 +103,34 @@ public void setEndpoint(String endpoint) {\n         this.endpoint = endpoint;\n     }\n \n+    /**\n+     * @deprecated Use {@link #getTargetGroupSet()} instead.\n+     */\n+    @Deprecated\n     public Set<TargetGroup> getTargetGroups() {\n         return targetGroups;\n     }\n \n+    /**\n+     * @deprecated Use {@link #setTargetGroupSet()} instead.\n+     */\n+    @Deprecated\n     public void setTargetGroups(Set<TargetGroup> targetGroups) {\n         this.targetGroups = targetGroups;\n     }\n \n+    public Set<TargetGroup> getTargetGroupSet() {\n+        return targetGroupSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyNzAyOQ==", "bodyText": "please be backward compatible\nremember, the older version of the service will still read the previous column only!", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553327029", "createdAt": "2021-01-07T13:29:50Z", "author": {"login": "bergerdenes"}, "path": "core-model/src/main/java/com/sequenceiq/cloudbreak/domain/stack/loadbalancer/TargetGroup.java", "diffHunk": "@@ -45,14 +53,34 @@ public void setType(TargetGroupType type) {\n         this.type = type;\n     }\n \n+    /**\n+     * @deprecated Use {@link #getLoadBalancerSet()} instead.\n+     */\n+    @Deprecated\n     public LoadBalancer getLoadBalancer() {\n         return loadBalancer;\n     }\n \n+    public Set<LoadBalancer> getLoadBalancerSet() {\n+        return loadBalancerSet;\n+    }\n+\n+    /**\n+     * @deprecated Use {@link #setLoadBalancerSet()} instead.\n+     */\n+    @Deprecated\n     public void setLoadBalancer(LoadBalancer loadBalancer) {\n         this.loadBalancer = loadBalancer;\n     }\n \n+    public void setLoadBalancerSet(Set<LoadBalancer> loadBalancerSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyODA3OQ==", "bodyText": "environment might be null in case of stacktype==TEMPLATE", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553328079", "createdAt": "2021-01-07T13:31:58Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/stacks/StackV4RequestToStackConverter.java", "diffHunk": "@@ -187,7 +188,7 @@ public Stack convert(StackV4Request source) {\n         stack.setExternalDatabaseCreationType(getIfNotNull(source.getExternalDatabase(), DatabaseRequest::getAvailabilityType));\n         determineServiceTypeTag(stack, source.getTags());\n         determineServiceFeatureTag(stack, source.getTags());\n-        stack.setLoadBalancers(createLoadBalancers(source, stack));\n+        stack.setLoadBalancers(createLoadBalancers(source, stack, environment));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyODgwOQ==", "bodyText": "environment might be null here", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553328809", "createdAt": "2021-01-07T13:33:27Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/stacks/StackV4RequestToStackConverter.java", "diffHunk": "@@ -349,39 +350,83 @@ private void validateStackAuthentication(StackV4Request source) {\n         return convertedSet;\n     }\n \n-    private Set<LoadBalancer> createLoadBalancers(StackV4Request source, Stack stack) {\n+    private Set<LoadBalancer> createLoadBalancers(StackV4Request source, Stack stack, DetailedEnvironmentResponse environment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzMDU5Mw==", "bodyText": "is the duplicate reference needed?", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553330593", "createdAt": "2021-01-07T13:36:54Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/stacks/StackV4RequestToStackConverter.java", "diffHunk": "@@ -349,39 +350,83 @@ private void validateStackAuthentication(StackV4Request source) {\n         return convertedSet;\n     }\n \n-    private Set<LoadBalancer> createLoadBalancers(StackV4Request source, Stack stack) {\n+    private Set<LoadBalancer> createLoadBalancers(StackV4Request source, Stack stack, DetailedEnvironmentResponse environment) {\n+        LOGGER.info(\"Setting up load balancers for stack {}\", source.getName());\n         Set<LoadBalancer> loadBalancers = new HashSet<>();\n-        Set<TargetGroup> targetGroups = new HashSet<>();\n-        // TODO expand this to data hubs\n-        if (StackType.DATALAKE.equals(source.getType()) &&\n-            entitlementService.datalakeLoadBalancerEnabled(ThreadBasedUserCrnProvider.getAccountId())) {\n-            LOGGER.info(\"Setting up load balancers for stack {}\", source.getName());\n-            Set<String> knoxGatewayGroupNames = loadBalancerConfigService.getKnoxGatewayGroups(stack);\n-            Set<InstanceGroup> knoxGatewayGroups = stack.getInstanceGroups().stream()\n-                .filter(ig -> knoxGatewayGroupNames.contains(ig.getGroupName()))\n-                .collect(Collectors.toSet());\n-            if (!knoxGatewayGroups.isEmpty()) {\n-                LOGGER.info(\"Knox gateway instance found; enabling Knox load balancer configuration.\");\n-                TargetGroup targetGroup = new TargetGroup();\n-                targetGroup.setType(TargetGroupType.KNOX);\n-                targetGroup.setInstanceGroups(knoxGatewayGroups);\n-                targetGroups.add(targetGroup);\n-                knoxGatewayGroups.forEach(ig -> ig.addTargetGroup(targetGroup));\n+\n+        Optional<TargetGroup> knoxTargetGroup = setupKnoxTargetGroup(stack);\n+        if (knoxTargetGroup.isPresent()) {\n+            if (shouldCreateInternalKnoxLoadBalancer(source.getType())) {\n+                LOGGER.debug(\"Found Knox enabled instance groups in stack. Setting up internal Knox load balancer\");\n+                setupKnoxLoadBalancer(\n+                    createLoadBalancerIfNotExists(loadBalancers, LoadBalancerType.DEFAULT_GATEWAY, stack),\n+                    knoxTargetGroup.get());\n+            }\n+            if (shouldCreateExternalKnoxLoadBalancer(source.getType(), environment.getNetwork())) {\n+                LOGGER.debug(\"Public endpoint access gateway is enabled. Setting up public Knox load balancer\");\n+                setupKnoxLoadBalancer(\n+                    createLoadBalancerIfNotExists(loadBalancers, LoadBalancerType.ENDPOINT_ACCESS_GATEWAY, stack),\n+                    knoxTargetGroup.get());\n             }\n-            // TODO CB-9368 - create target group for CM instances\n+        } else {\n+            LOGGER.debug(\"No Knox instance groups found. If load balancer creation is enabled, Knox routing in the load balancer will be skipped.\");\n+        }\n+\n+        // TODO CB-9368 - create target group for CM instances\n+\n+        return loadBalancers;\n+    }\n+\n+    private boolean shouldCreateInternalKnoxLoadBalancer(StackType type) {\n+        // TODO expand this to data hubs\n+        return StackType.DATALAKE.equals(type) &&\n+            (entitlementService.datalakeLoadBalancerEnabled(ThreadBasedUserCrnProvider.getAccountId())\n+            || entitlementService.publicEndpointAccessGatewayEnabled(ThreadBasedUserCrnProvider.getAccountId()));\n+    }\n+\n+    private boolean shouldCreateExternalKnoxLoadBalancer(StackType type, EnvironmentNetworkResponse network) {\n+        // TODO expand this to data hubs\n+        return network != null && network.getPublicEndpointAccessGateway() == PublicEndpointAccessGateway.ENABLED\n+            && StackType.DATALAKE.equals(type)\n+            && entitlementService.publicEndpointAccessGatewayEnabled(ThreadBasedUserCrnProvider.getAccountId());\n+    }\n+\n+    private Optional<TargetGroup> setupKnoxTargetGroup(Stack stack) {\n+        TargetGroup knoxTargetGroup = null;\n+        Set<String> knoxGatewayGroupNames = loadBalancerConfigService.getKnoxGatewayGroups(stack);\n+        Set<InstanceGroup> knoxGatewayGroups = stack.getInstanceGroups().stream()\n+            .filter(ig -> knoxGatewayGroupNames.contains(ig.getGroupName()))\n+            .collect(Collectors.toSet());\n+        if (!knoxGatewayGroups.isEmpty()) {\n+            LOGGER.info(\"Knox gateway instance found; enabling Knox load balancer configuration.\");\n+            knoxTargetGroup = new TargetGroup();\n+            knoxTargetGroup.setType(TargetGroupType.KNOX);\n+            knoxTargetGroup.setInstanceGroups(knoxGatewayGroups);\n+            TargetGroup finalKnoxTargetGroup = knoxTargetGroup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzMDg2OQ==", "bodyText": "seems a circular reference, is that intended?", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553330869", "createdAt": "2021-01-07T13:37:24Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/stacks/StackV4RequestToStackConverter.java", "diffHunk": "@@ -349,39 +350,83 @@ private void validateStackAuthentication(StackV4Request source) {\n         return convertedSet;\n     }\n \n-    private Set<LoadBalancer> createLoadBalancers(StackV4Request source, Stack stack) {\n+    private Set<LoadBalancer> createLoadBalancers(StackV4Request source, Stack stack, DetailedEnvironmentResponse environment) {\n+        LOGGER.info(\"Setting up load balancers for stack {}\", source.getName());\n         Set<LoadBalancer> loadBalancers = new HashSet<>();\n-        Set<TargetGroup> targetGroups = new HashSet<>();\n-        // TODO expand this to data hubs\n-        if (StackType.DATALAKE.equals(source.getType()) &&\n-            entitlementService.datalakeLoadBalancerEnabled(ThreadBasedUserCrnProvider.getAccountId())) {\n-            LOGGER.info(\"Setting up load balancers for stack {}\", source.getName());\n-            Set<String> knoxGatewayGroupNames = loadBalancerConfigService.getKnoxGatewayGroups(stack);\n-            Set<InstanceGroup> knoxGatewayGroups = stack.getInstanceGroups().stream()\n-                .filter(ig -> knoxGatewayGroupNames.contains(ig.getGroupName()))\n-                .collect(Collectors.toSet());\n-            if (!knoxGatewayGroups.isEmpty()) {\n-                LOGGER.info(\"Knox gateway instance found; enabling Knox load balancer configuration.\");\n-                TargetGroup targetGroup = new TargetGroup();\n-                targetGroup.setType(TargetGroupType.KNOX);\n-                targetGroup.setInstanceGroups(knoxGatewayGroups);\n-                targetGroups.add(targetGroup);\n-                knoxGatewayGroups.forEach(ig -> ig.addTargetGroup(targetGroup));\n+\n+        Optional<TargetGroup> knoxTargetGroup = setupKnoxTargetGroup(stack);\n+        if (knoxTargetGroup.isPresent()) {\n+            if (shouldCreateInternalKnoxLoadBalancer(source.getType())) {\n+                LOGGER.debug(\"Found Knox enabled instance groups in stack. Setting up internal Knox load balancer\");\n+                setupKnoxLoadBalancer(\n+                    createLoadBalancerIfNotExists(loadBalancers, LoadBalancerType.DEFAULT_GATEWAY, stack),\n+                    knoxTargetGroup.get());\n+            }\n+            if (shouldCreateExternalKnoxLoadBalancer(source.getType(), environment.getNetwork())) {\n+                LOGGER.debug(\"Public endpoint access gateway is enabled. Setting up public Knox load balancer\");\n+                setupKnoxLoadBalancer(\n+                    createLoadBalancerIfNotExists(loadBalancers, LoadBalancerType.ENDPOINT_ACCESS_GATEWAY, stack),\n+                    knoxTargetGroup.get());\n             }\n-            // TODO CB-9368 - create target group for CM instances\n+        } else {\n+            LOGGER.debug(\"No Knox instance groups found. If load balancer creation is enabled, Knox routing in the load balancer will be skipped.\");\n+        }\n+\n+        // TODO CB-9368 - create target group for CM instances\n+\n+        return loadBalancers;\n+    }\n+\n+    private boolean shouldCreateInternalKnoxLoadBalancer(StackType type) {\n+        // TODO expand this to data hubs\n+        return StackType.DATALAKE.equals(type) &&\n+            (entitlementService.datalakeLoadBalancerEnabled(ThreadBasedUserCrnProvider.getAccountId())\n+            || entitlementService.publicEndpointAccessGatewayEnabled(ThreadBasedUserCrnProvider.getAccountId()));\n+    }\n+\n+    private boolean shouldCreateExternalKnoxLoadBalancer(StackType type, EnvironmentNetworkResponse network) {\n+        // TODO expand this to data hubs\n+        return network != null && network.getPublicEndpointAccessGateway() == PublicEndpointAccessGateway.ENABLED\n+            && StackType.DATALAKE.equals(type)\n+            && entitlementService.publicEndpointAccessGatewayEnabled(ThreadBasedUserCrnProvider.getAccountId());\n+    }\n+\n+    private Optional<TargetGroup> setupKnoxTargetGroup(Stack stack) {\n+        TargetGroup knoxTargetGroup = null;\n+        Set<String> knoxGatewayGroupNames = loadBalancerConfigService.getKnoxGatewayGroups(stack);\n+        Set<InstanceGroup> knoxGatewayGroups = stack.getInstanceGroups().stream()\n+            .filter(ig -> knoxGatewayGroupNames.contains(ig.getGroupName()))\n+            .collect(Collectors.toSet());\n+        if (!knoxGatewayGroups.isEmpty()) {\n+            LOGGER.info(\"Knox gateway instance found; enabling Knox load balancer configuration.\");\n+            knoxTargetGroup = new TargetGroup();\n+            knoxTargetGroup.setType(TargetGroupType.KNOX);\n+            knoxTargetGroup.setInstanceGroups(knoxGatewayGroups);\n+            TargetGroup finalKnoxTargetGroup = knoxTargetGroup;\n+            knoxGatewayGroups.forEach(ig -> ig.addTargetGroup(finalKnoxTargetGroup));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzMjUyNw==", "bodyText": "what if the joining table does not contain anything? please maintain backward compatibility.\neven if you insert all records into the new targetgroup_loadbalancer table from the existing targetgroup table, a race condition might cause not migrated rows!", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553332527", "createdAt": "2021-01-07T13:40:36Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/repository/TargetGroupRepository.java", "diffHunk": "@@ -15,5 +15,6 @@\n     @Query(\"SELECT t FROM TargetGroup t INNER JOIN t.instanceGroups ig WHERE ig.id= :instanceGroupId\")\n     Set<TargetGroup> findByInstanceGroupId(@Param(\"instanceGroupId\") Long instanceGroupId);\n \n+    @Query(\"SELECT t FROM TargetGroup t INNER JOIN t.loadBalancerSet lb WHERE lb.id= :loadBalancerId\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzMzIyMA==", "bodyText": "this migration should happen at the second phase of the Database schema changes with zero downtime process (or at least repeated)", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553333220", "createdAt": "2021-01-07T13:41:58Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/resources/schema/app/20201210210553_CB-10095_Add_multiple_load_balancers_to_target_group.sql", "diffHunk": "@@ -0,0 +1,18 @@\n+-- // CB-10095 Add multiple load balancers to target group\n+-- Migration SQL that makes the change goes here.\n+\n+CREATE TABLE IF NOT EXISTS targetgroup_loadbalancer (\n+    targetgroupset_id     bigint NOT NULL,\n+    loadbalancerset_id    bigint NOT NULL\n+);\n+\n+ALTER TABLE ONLY targetgroup_loadbalancer ADD CONSTRAINT targetgroup_loadbalancer_pkey PRIMARY KEY (targetgroupset_id, loadbalancerset_id);\n+ALTER TABLE ONLY targetgroup_loadbalancer ADD CONSTRAINT fk_targetgroup_loadbalancer_targetgroup_id FOREIGN KEY (targetgroupset_id) REFERENCES targetgroup(id);\n+ALTER TABLE ONLY targetgroup_loadbalancer ADD CONSTRAINT fk_targetgroup_loadbalancer_loadbalancer_id FOREIGN KEY (loadbalancerset_id) REFERENCES loadbalancer(id);\n+\n+INSERT INTO targetgroup_loadbalancer (SELECT id, loadbalancer_id FROM targetgroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzNTA1NQ==", "bodyText": "this method seems too complex", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553335055", "createdAt": "2021-01-07T13:45:22Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/NetworkCreationHandler.java", "diffHunk": "@@ -114,6 +126,50 @@ private void setChildEnvironmentNetworkIfItHasParentWithTheSameCloudProvider(Env\n         }\n     }\n \n+    private Map<String, CloudSubnet> removePrivateSubnets(Map<String, CloudSubnet> endpointGatewaySubnetMetas) {\n+        LOGGER.debug(\"Removing any private subnets from the provided endpoint gateway list because they won't be used.\");\n+        if (endpointGatewaySubnetMetas == null || endpointGatewaySubnetMetas.isEmpty()) {\n+            return Map.of();\n+        }\n+        return endpointGatewaySubnetMetas.entrySet().stream()\n+            .filter(entry -> !entry.getValue().isPrivateSubnet())\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    }\n+\n+    private void validateSubnetsIfProvided(Environment environment, Map<String, CloudSubnet> subnetMetas,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0Njg3OA==", "bodyText": "<#sep>,", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553346878", "createdAt": "2021-01-07T14:05:15Z", "author": {"login": "bergerdenes"}, "path": "cloud-aws/src/main/resources/templates/aws-cf-stack.ftl", "diffHunk": "@@ -305,28 +307,26 @@\n         }\n       </#if>\n \n-        <#list listener.targetGroups as targetGroup>\n-        ,\"${targetGroup.name}\" : {\n-          \"Type\" : \"AWS::ElasticLoadBalancingV2::TargetGroup\",\n-          \"Properties\" : {\n-            \"Port\" : ${targetGroup.port},\n-            \"Protocol\" : \"TCP\",\n-            \"TargetType\" : \"instance\",\n-            <#if existingVPC>\n-            \"VpcId\" : { \"Ref\" : \"VPCId\" }\n-            <#else>\n-            \"VpcId\" : { \"Ref\" : \"VPC\" }\n-            </#if>\n-            <#if targetGroup.instanceIds?size != 0 >\n-            ,\"Targets\" : [\n-              <#list targetGroup.instanceIds as i>\n-                { \"Id\" : \"${i}\" }<#if (i_index + 1) != targetGroup.instanceIds?size>,</#if>\n-              </#list>\n-            ]\n-            </#if>\n-          }\n+      ,\"${listener.targetGroup.name}\" : {\n+        \"Type\" : \"AWS::ElasticLoadBalancingV2::TargetGroup\",\n+        \"Properties\" : {\n+          \"Port\" : ${listener.targetGroup.port},\n+          \"Protocol\" : \"TCP\",\n+          \"TargetType\" : \"instance\",\n+          <#if existingVPC>\n+          \"VpcId\" : { \"Ref\" : \"VPCId\" }\n+          <#else>\n+          \"VpcId\" : { \"Ref\" : \"VPC\" }\n+          </#if>\n+          <#if listener.targetGroup.instanceIds?size != 0 >\n+          ,\"Targets\" : [\n+            <#list listener.targetGroup.instanceIds as i>\n+              { \"Id\" : \"${i}\" }<#if (i_index + 1) != listener.targetGroup.instanceIds?size>,</#if>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0ODEwNQ==", "bodyText": "minor: use string constants instead and reuse them in assertions", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553348105", "createdAt": "2021-01-07T14:07:24Z", "author": {"login": "bergerdenes"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsMetaDataCollectorTest.java", "diffHunk": "@@ -323,4 +389,18 @@ private AuthenticatedContext authenticatedContext() {\n         authenticatedContext.putParameter(AmazonEC2Client.class, amazonEC2Client);\n         return authenticatedContext;\n     }\n+\n+    private void setupMethodsForLoadBalancer() {\n+        LoadBalancer internalLoadBalancer = new LoadBalancer()\n+            .withDNSName(\"internal-lb.aws.dns\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0ODc5MQ==", "bodyText": "observation: the entitlement flag is not used extensively, that is, a lot of changed functionality cannot be switched off as-is", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553348791", "createdAt": "2021-01-07T14:08:31Z", "author": {"login": "bergerdenes"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/EntitlementService.java", "diffHunk": "@@ -183,6 +184,10 @@ public boolean datalakeLoadBalancerEnabled(String accountId) {\n         return isEntitlementRegistered(accountId, CDP_DATA_LAKE_LOAD_BALANCER);\n     }\n \n+    public boolean publicEndpointAccessGatewayEnabled(String accountId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0OTEzNw==", "bodyText": "minor: please use constants", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553349137", "createdAt": "2021-01-07T14:09:03Z", "author": {"login": "bergerdenes"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/view/AwsNetworkViewTest.java", "diffHunk": "@@ -121,4 +122,20 @@ public void testMultipleSubnetCidrEmpty() {\n         assertTrue(underTest.getExistingVpcCidrs().contains(\"1.1.1.1\"));\n     }\n \n+    @Test\n+    public void testSingleEndpointGatewaySubnet() {\n+        when(network.getStringParameter(ENDPOINT_GATEWAY_SUBNET_ID)).thenReturn(\"subnet-123\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM1MjA2Mw==", "bodyText": "missing assertions", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553352063", "createdAt": "2021-01-07T14:14:09Z", "author": {"login": "bergerdenes"}, "path": "environment/src/test/java/com/sequenceiq/environment/environment/flow/creation/handler/NetworkCreationHandlerTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.sequenceiq.environment.environment.flow.creation.handler;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.ws.rs.BadRequestException;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.util.ReflectionUtils;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.cloud.model.network.SubnetType;\n+import com.sequenceiq.common.api.type.PublicEndpointAccessGateway;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationFailureEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentResourceService;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.network.CloudNetworkService;\n+import com.sequenceiq.environment.network.dao.domain.AwsNetwork;\n+import com.sequenceiq.environment.network.dao.domain.BaseNetwork;\n+import com.sequenceiq.environment.network.dao.domain.RegistrationType;\n+import com.sequenceiq.environment.network.dto.NetworkDto;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+\n+public class NetworkCreationHandlerTest {\n+\n+    private static final String UNMATCHED_AZ_MSG = \"Please provide public subnets in each of the following availability zones:\";\n+\n+    @InjectMocks\n+    private NetworkCreationHandler underTest;\n+\n+    @Mock\n+    private EnvironmentService environmentService;\n+\n+    @Mock\n+    private EnvironmentResourceService environmentResourceService;\n+\n+    @Mock\n+    private CloudNetworkService cloudNetworkService;\n+\n+    @Mock\n+    private EventBus eventBus;\n+\n+    @Mock\n+    private EventSender eventSender;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        Field enabledPlatformsField = ReflectionUtils.findField(NetworkCreationHandler.class, \"enabledPlatforms\");\n+        ReflectionUtils.makeAccessible(enabledPlatformsField);\n+        ReflectionUtils.setField(enabledPlatformsField, underTest, Set.of(\"AWS\", \"AZURE\"));\n+\n+        doNothing().when(eventSender).sendEvent(any(), any());\n+        when(eventBus.notify(any(Object.class), any(Event.class))).thenReturn(null);\n+    }\n+\n+    @Test\n+    public void testWithEndpointGatewayAndProvidedSubnets() {\n+        EnvironmentDto environmentDto = createEnvironmentDto();\n+        Event<EnvironmentDto> environmentDtoEvent = Event.wrap(environmentDto);\n+        AwsNetwork network = createNetwork();\n+        Environment environment = createEnvironment(network);\n+        Optional<Environment> environmentOptional = Optional.of(environment);\n+\n+        Map<String, CloudSubnet> subnets = createDefaultPrivateSubnets();\n+        Map<String, CloudSubnet> endpointGatewaySubnets = createDefaultPublicSubnets();\n+\n+        when(environmentService.findEnvironmentById(any())).thenReturn(environmentOptional);\n+        when(cloudNetworkService.retrieveSubnetMetadata(any(EnvironmentDto.class), any())).thenReturn(subnets);\n+        when(cloudNetworkService.retrieveEndpointGatewaySubnetMetadata(any(EnvironmentDto.class), any())).thenReturn(endpointGatewaySubnets);\n+        when(environmentResourceService.createAndSetNetwork(any(), any(), any(), any(), any())).thenReturn(network);\n+\n+        underTest.accept(environmentDtoEvent);\n+\n+        assertEquals(2, environmentDto.getNetwork().getEndpointGatewaySubnetMetas().size());\n+        assertEquals(Set.of(\"public-id1\", \"public-id2\"), environmentDto.getNetwork().getEndpointGatewaySubnetIds());\n+    }\n+\n+    @Test\n+    public void testWithEndpointGatewayRemovePrivateSubnets() {\n+        EnvironmentDto environmentDto = createEnvironmentDto();\n+        Event<EnvironmentDto> environmentDtoEvent = Event.wrap(environmentDto);\n+        AwsNetwork network = createNetwork();\n+        Environment environment = createEnvironment(network);\n+        Optional<Environment> environmentOptional = Optional.of(environment);\n+\n+        Map<String, CloudSubnet> subnets = createDefaultPrivateSubnets();\n+        Map<String, CloudSubnet> endpointGatewaySubnets = createDefaultPublicSubnets();\n+        endpointGatewaySubnets.putAll(createDefaultPrivateSubnets());\n+\n+        when(environmentService.findEnvironmentById(any())).thenReturn(environmentOptional);\n+        when(cloudNetworkService.retrieveSubnetMetadata(any(EnvironmentDto.class), any())).thenReturn(subnets);\n+        when(cloudNetworkService.retrieveEndpointGatewaySubnetMetadata(any(EnvironmentDto.class), any())).thenReturn(endpointGatewaySubnets);\n+        when(environmentResourceService.createAndSetNetwork(any(), any(), any(), any(), any())).thenReturn(network);\n+\n+        underTest.accept(environmentDtoEvent);\n+\n+        assertEquals(2, environmentDto.getNetwork().getEndpointGatewaySubnetMetas().size());\n+        assertEquals(Set.of(\"public-id1\", \"public-id2\"), environmentDto.getNetwork().getEndpointGatewaySubnetIds());\n+    }\n+\n+    @Test\n+    public void testWithEndpointGatewayAndEnvironmentSubnets() {\n+        EnvironmentDto environmentDto = createEnvironmentDto();\n+        Event<EnvironmentDto> environmentDtoEvent = Event.wrap(environmentDto);\n+        AwsNetwork network = createNetwork();\n+        Environment environment = createEnvironment(network);\n+        Optional<Environment> environmentOptional = Optional.of(environment);\n+\n+        Map<String, CloudSubnet> subnets = createDefaultPrivateSubnets();\n+        subnets.putAll(createDefaultPublicSubnets());\n+\n+        when(environmentService.findEnvironmentById(any())).thenReturn(environmentOptional);\n+        when(cloudNetworkService.retrieveSubnetMetadata(any(EnvironmentDto.class), any())).thenReturn(subnets);\n+        when(cloudNetworkService.retrieveEndpointGatewaySubnetMetadata(any(EnvironmentDto.class), any())).thenReturn(Map.of());\n+        when(environmentResourceService.createAndSetNetwork(any(), any(), any(), any(), any())).thenReturn(network);\n+\n+        underTest.accept(environmentDtoEvent);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM1MzgxNw==", "bodyText": "assert on actual values?\nsame for all tests below", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#discussion_r553353817", "createdAt": "2021-01-07T14:16:58Z", "author": {"login": "bergerdenes"}, "path": "environment/src/test/java/com/sequenceiq/environment/network/service/SubnetIdProviderTest.java", "diffHunk": "@@ -161,6 +163,82 @@ public void shouldReturnNullInCaseOfNonSupportedCloudPlatform() {\n         Assertions.assertNull(actual);\n     }\n \n+    @Test\n+    public void testSelectSubnetForEndpointAccessGatewayWithProvidedSubnets() {\n+        setupConnectorWithSelectionResult(List.of(\n+            new CloudSubnet(\"public-id-2\", \"name-2\", \"AZ-b\", \"\")));\n+        Map<String, CloudSubnet> subnets = new HashMap<>();\n+        subnets.putAll(createPrivateSubnetEntry(\"id-1\", \"name-1\", \"AZ-a\"));\n+        subnets.putAll(createPrivateSubnetEntry(\"id-2\", \"name-2\", \"AZ-b\"));\n+        Map<String, CloudSubnet> publicSubnets = new HashMap<>();\n+        publicSubnets.putAll(createPublicSubnetEntry(\"public-id-1\", \"name-1\", \"AZ-a\"));\n+        publicSubnets.putAll(createPublicSubnetEntry(\"public-id-2\", \"name-2\", \"AZ-b\"));\n+        NetworkDto networkDto = NetworkDto.builder()\n+            .withSubnetMetas(subnets)\n+            .withCbSubnets(subnets)\n+            .withEndpointGatewaySubnetMetas(publicSubnets)\n+            .build();\n+\n+        String actual = underTest.provideEndpointGateway(networkDto, CloudPlatform.AWS, \"id-2\");\n+\n+        Assertions.assertNotNull(actual);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7350f8f95c59441478aa883ee09d68ee4d7489ab", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7350f8f95c59441478aa883ee09d68ee4d7489ab", "committedDate": "2021-01-07T00:52:02Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "eecce917a289941d2c5b0514aa9c157fce82db95", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/eecce917a289941d2c5b0514aa9c157fce82db95", "committedDate": "2021-01-07T22:22:50Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eecce917a289941d2c5b0514aa9c157fce82db95", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/eecce917a289941d2c5b0514aa9c157fce82db95", "committedDate": "2021-01-07T22:22:50Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}, "afterCommit": {"oid": "41df1a140fc75b8a6b42a284bfcf1067877e29ec", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/41df1a140fc75b8a6b42a284bfcf1067877e29ec", "committedDate": "2021-01-07T22:44:43Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MjQxMjk2", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#pullrequestreview-564241296", "createdAt": "2021-01-08T13:01:09Z", "commit": {"oid": "41df1a140fc75b8a6b42a284bfcf1067877e29ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1NTIwNTk2", "url": "https://github.com/hortonworks/cloudbreak/pull/9675#pullrequestreview-565520596", "createdAt": "2021-01-11T16:21:04Z", "commit": {"oid": "5371ff335359b2595cfb127d07737cdb31b50820"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4f7fc74452d11e1ef2ea2e86f431241edf6a4d7", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a4f7fc74452d11e1ef2ea2e86f431241edf6a4d7", "committedDate": "2021-01-11T17:41:19Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "586af6e9b527743003d7edeaff141eb6073d1ac7", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/586af6e9b527743003d7edeaff141eb6073d1ac7", "committedDate": "2021-01-11T17:13:26Z", "message": "Merge branch 'master' into CB-10095"}, "afterCommit": {"oid": "a4f7fc74452d11e1ef2ea2e86f431241edf6a4d7", "author": {"user": {"login": "hreeve-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a4f7fc74452d11e1ef2ea2e86f431241edf6a4d7", "committedDate": "2021-01-11T17:41:19Z", "message": "CB-10095 Subnet selection for public gateway endpoint\n\nAdds new logic to create a public load balancer to act as a public gateway to\nthe Knox endpoints in an otherwise private system. Logic will be triggered if\nthe \"publicEndpointAccessGateway\" flag in the environment request is set to\nENABLED, and the tenant has the new CDP_PUBLIC_ENDPOINT_ACCESS_GATEWAY\nentitlement.\n\nA list of subnets to use for the public LB can optionally be provided as part\nof the environment creation request. If provided, any private subnets in the\nlist will be discarded, and a public subnet in the same AZ as the selected stack\nsubnet will be used. If the endpoint subnets aren't explicitly provided, the\nsubnets provided for environment creation are used instead. If public subnets in\nthe appropriate availability zones are not provided, creation will fail\nimmediately.\n\nTested with unit tests and by running CB locally with hardcoded API fields to\nverify cloud resources were created and configured appropriately."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1903, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}