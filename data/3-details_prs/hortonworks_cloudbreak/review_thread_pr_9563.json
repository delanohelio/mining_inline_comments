{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMTIzMzM4", "number": 9563, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMjo1NToxN1rOFBknvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDowOTo1NlrOFC8ZUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTkyODkyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/v2/StackToTemplatePreparationObjectConverterTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMjo1NToxN1rOIAT5Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDo1NzowNlrOIAhG3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5Njg0Mw==", "bodyText": "praise: I really like this way of exception testing. Are we trying to move CB to AssertJ?", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537196843", "createdAt": "2020-12-07T02:55:17Z", "author": {"login": "brycederriso"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/v2/StackToTemplatePreparationObjectConverterTest.java", "diffHunk": "@@ -366,11 +371,10 @@ public void testConvertIfTheAttemptOfObtainingBaseFileSystemConfigurationsViewTh\n                 eq(configQueryEntries))).thenThrow(invokedException);\n         when(cmCloudStorageConfigProvider.getConfigQueryEntries()).thenReturn(configQueryEntries);\n \n-        expectedException.expect(CloudbreakServiceException.class);\n-        expectedException.expectMessage(iOExceptionMessage);\n-        expectedException.expectCause(is(invokedException));\n-\n-        underTest.convert(stackMock);\n+        assertThatCode(() -> underTest.convert(stackMock))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI4OTY5Ng==", "bodyText": "@lajosrodek we are also using this way https://github.com/hortonworks/cloudbreak/blob/master/cluster-cm/src/test/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationServiceTest.java#L170", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537289696", "createdAt": "2020-12-07T07:41:10Z", "author": {"login": "doktoric"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/v2/StackToTemplatePreparationObjectConverterTest.java", "diffHunk": "@@ -366,11 +371,10 @@ public void testConvertIfTheAttemptOfObtainingBaseFileSystemConfigurationsViewTh\n                 eq(configQueryEntries))).thenThrow(invokedException);\n         when(cmCloudStorageConfigProvider.getConfigQueryEntries()).thenReturn(configQueryEntries);\n \n-        expectedException.expect(CloudbreakServiceException.class);\n-        expectedException.expectMessage(iOExceptionMessage);\n-        expectedException.expectCause(is(invokedException));\n-\n-        underTest.convert(stackMock);\n+        assertThatCode(() -> underTest.convert(stackMock))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5Njg0Mw=="}, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM1ODc1OQ==", "bodyText": "@brycederriso  I personally prefer AssertJ over JUnit and Hamcrest assertions due to its fluent API and more expressive structure. Not sure if AssertJ is the future and especially not aware of any specific initiatives in CB around AssertJ usage. I think JUnit 4 should be avoided altogether in new tests and gradually migrated to JUnit 5 in legacy ones, but there is probably no such requirement for AssertJ.\n@doktoric Shall I then replace the AssertJ assertThatCode() construct with the JUnit 5 assertThrows()?", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537358759", "createdAt": "2020-12-07T09:36:16Z", "author": {"login": "lajosrodek"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/v2/StackToTemplatePreparationObjectConverterTest.java", "diffHunk": "@@ -366,11 +371,10 @@ public void testConvertIfTheAttemptOfObtainingBaseFileSystemConfigurationsViewTh\n                 eq(configQueryEntries))).thenThrow(invokedException);\n         when(cmCloudStorageConfigProvider.getConfigQueryEntries()).thenReturn(configQueryEntries);\n \n-        expectedException.expect(CloudbreakServiceException.class);\n-        expectedException.expectMessage(iOExceptionMessage);\n-        expectedException.expectCause(is(invokedException));\n-\n-        underTest.convert(stackMock);\n+        assertThatCode(() -> underTest.convert(stackMock))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5Njg0Mw=="}, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwMTk4OA==", "bodyText": "@lajosrodek I would appreciate that.", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537401988", "createdAt": "2020-12-07T10:39:43Z", "author": {"login": "doktoric"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/v2/StackToTemplatePreparationObjectConverterTest.java", "diffHunk": "@@ -366,11 +371,10 @@ public void testConvertIfTheAttemptOfObtainingBaseFileSystemConfigurationsViewTh\n                 eq(configQueryEntries))).thenThrow(invokedException);\n         when(cmCloudStorageConfigProvider.getConfigQueryEntries()).thenReturn(configQueryEntries);\n \n-        expectedException.expect(CloudbreakServiceException.class);\n-        expectedException.expectMessage(iOExceptionMessage);\n-        expectedException.expectCause(is(invokedException));\n-\n-        underTest.convert(stackMock);\n+        assertThatCode(() -> underTest.convert(stackMock))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5Njg0Mw=="}, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMzM0MA==", "bodyText": "@doktoric  Sure, done. Now it is actually a combination of JUnit 5 & AssertJ. \ud83d\ude08", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537413340", "createdAt": "2020-12-07T10:57:06Z", "author": {"login": "lajosrodek"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/v2/StackToTemplatePreparationObjectConverterTest.java", "diffHunk": "@@ -366,11 +371,10 @@ public void testConvertIfTheAttemptOfObtainingBaseFileSystemConfigurationsViewTh\n                 eq(configQueryEntries))).thenThrow(invokedException);\n         when(cmCloudStorageConfigProvider.getConfigQueryEntries()).thenReturn(configQueryEntries);\n \n-        expectedException.expect(CloudbreakServiceException.class);\n-        expectedException.expectMessage(iOExceptionMessage);\n-        expectedException.expectCause(is(invokedException));\n-\n-        underTest.convert(stackMock);\n+        assertThatCode(() -> underTest.convert(stackMock))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5Njg0Mw=="}, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTk1NzIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/rdsconfig/RedbeamsDbCertificateProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzowODowMlrOIAUHsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOToyODoyM1rOIAdcoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwMDU2Mw==", "bodyText": "praise: Thanks for refactoring!", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537200563", "createdAt": "2020-12-07T03:08:02Z", "author": {"login": "brycederriso"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/rdsconfig/RedbeamsDbCertificateProvider.java", "diffHunk": "@@ -70,10 +79,10 @@ private void getDatalakeDatabaseRootCerts(Stack stack, Set<String> result) {\n             LOGGER.info(\"Gathering cluster's(crn:'{}', name: '{}') remote database root certificates\", stackResourceCrn, clusterName);\n             String databaseServerCrn = cluster.getDatabaseServerCrn();\n             DatabaseServerV4Response databaseServer = dbServerConfigurer.getDatabaseServer(databaseServerCrn);\n-            if (databaseServer.getSslConfig() != null) {\n-                SslMode sslMode = databaseServer.getSslConfig().getSslMode();\n-                if (SslMode.ENABLED.equals(sslMode)) {\n-                    Set<String> sslCertificates = databaseServer.getSslConfig().getSslCertificates();\n+            SslConfigV4Response sslConfig = databaseServer.getSslConfig();\n+            if (sslConfig != null) {\n+                if (SslMode.isEnabled(sslConfig.getSslMode())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM1MzM3Nw==", "bodyText": "Welcome. \ud83d\ude03", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537353377", "createdAt": "2020-12-07T09:28:23Z", "author": {"login": "lajosrodek"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/rdsconfig/RedbeamsDbCertificateProvider.java", "diffHunk": "@@ -70,10 +79,10 @@ private void getDatalakeDatabaseRootCerts(Stack stack, Set<String> result) {\n             LOGGER.info(\"Gathering cluster's(crn:'{}', name: '{}') remote database root certificates\", stackResourceCrn, clusterName);\n             String databaseServerCrn = cluster.getDatabaseServerCrn();\n             DatabaseServerV4Response databaseServer = dbServerConfigurer.getDatabaseServer(databaseServerCrn);\n-            if (databaseServer.getSslConfig() != null) {\n-                SslMode sslMode = databaseServer.getSslConfig().getSslMode();\n-                if (SslMode.ENABLED.equals(sslMode)) {\n-                    Set<String> sslCertificates = databaseServer.getSslConfig().getSslCertificates();\n+            SslConfigV4Response sslConfig = databaseServer.getSslConfig();\n+            if (sslConfig != null) {\n+                if (SslMode.isEnabled(sslConfig.getSslMode())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwMDU2Mw=="}, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTk2Mjg4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/v2/StackToTemplatePreparationObjectConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzoxMDo1NVrOIAUKoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTozNzowM1rOIAdzzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwMTMxMw==", "bodyText": "question: This looks like the only new test in this file, is that the case? (I'm not missing any?)\nThe rest of the changes are conversions to AssertJ?", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537201313", "createdAt": "2020-12-07T03:10:55Z", "author": {"login": "brycederriso"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/v2/StackToTemplatePreparationObjectConverterTest.java", "diffHunk": "@@ -526,7 +534,17 @@ public void testMissingClouderaManagerIp() {\n         when(stackMock.getPrimaryGatewayInstance()).thenReturn(dummyMetadata);\n \n         TemplatePreparationObject result = underTest.convert(stackMock);\n-        assertEquals(\"10.0.0.1\", result.getGeneralClusterConfigs().getClusterManagerIp());\n+\n+        assertThat(result.getGeneralClusterConfigs().getClusterManagerIp()).isEqualTo(\"10.0.0.1\");\n         verify(gatewayConfigService, times(1)).getPrimaryGatewayIp(any(Stack.class));\n     }\n+\n+    @Test\n+    void testRdsSslCertificateFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM1OTMxMA==", "bodyText": "Correct, the rest is just noise due to AssertJ.", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537359310", "createdAt": "2020-12-07T09:37:03Z", "author": {"login": "lajosrodek"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/converter/v2/StackToTemplatePreparationObjectConverterTest.java", "diffHunk": "@@ -526,7 +534,17 @@ public void testMissingClouderaManagerIp() {\n         when(stackMock.getPrimaryGatewayInstance()).thenReturn(dummyMetadata);\n \n         TemplatePreparationObject result = underTest.convert(stackMock);\n-        assertEquals(\"10.0.0.1\", result.getGeneralClusterConfigs().getClusterManagerIp());\n+\n+        assertThat(result.getGeneralClusterConfigs().getClusterManagerIp()).isEqualTo(\"10.0.0.1\");\n         verify(gatewayConfigService, times(1)).getPrimaryGatewayIp(any(Stack.class));\n     }\n+\n+    @Test\n+    void testRdsSslCertificateFile() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwMTMxMw=="}, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjA0ODI0OnYy", "diffSide": "RIGHT", "path": "template-manager-core/src/main/java/com/sequenceiq/cloudbreak/template/TemplatePreparationObject.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzo1MDoxOVrOIAU2SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxODoyNFrOIAxiNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMjQ4OQ==", "bodyText": "question: What is this TemplatePreparationObject for? It looks like just a plain old value object.\nI see it's in the template namespace, but I don't actually know what that means in the broader context of CB.", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537212489", "createdAt": "2020-12-07T03:50:19Z", "author": {"login": "brycederriso"}, "path": "template-manager-core/src/main/java/com/sequenceiq/cloudbreak/template/TemplatePreparationObject.java", "diffHunk": "@@ -53,6 +53,8 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI4NTE2NA==", "bodyText": "@brycederriso read more here https://cloudera.atlassian.net/wiki/spaces/ENG/pages/730268997/TRAINING+-+Cloudera+Manager+template+generation", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537285164", "createdAt": "2020-12-07T07:31:33Z", "author": {"login": "doktoric"}, "path": "template-manager-core/src/main/java/com/sequenceiq/cloudbreak/template/TemplatePreparationObject.java", "diffHunk": "@@ -53,6 +53,8 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMjQ4OQ=="}, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2MzQyMg==", "bodyText": "Yes, it is an immutable POJO that contains all the cluster & service details needed for dynamic template generation. As explained in the wiki that Richie linked, the TemplatePreparationObject instance is fed into two kinds of template engines: Handlebars (used for dynamic parameter placeholders within CM cluster templates; see TemplateProcessor) and the CB logic generating CM cluster templates (CentralCmTemplateUpdater.updateCmTemplateConfiguration()).", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537363422", "createdAt": "2020-12-07T09:42:56Z", "author": {"login": "lajosrodek"}, "path": "template-manager-core/src/main/java/com/sequenceiq/cloudbreak/template/TemplatePreparationObject.java", "diffHunk": "@@ -53,6 +53,8 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMjQ4OQ=="}, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4MjQ4NA==", "bodyText": "Thanks!", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r537682484", "createdAt": "2020-12-07T17:18:24Z", "author": {"login": "brycederriso"}, "path": "template-manager-core/src/main/java/com/sequenceiq/cloudbreak/template/TemplatePreparationObject.java", "diffHunk": "@@ -53,6 +53,8 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIxMjQ4OQ=="}, "originalCommit": {"oid": "93834f59eeec167b7354b56f5778256ebea75fb9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjI0NTU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/StackToTemplatePreparationObjectConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzo1NzozNVrOICV5Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTozMDoyOVrOICapwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyNjc3MA==", "bodyText": "Shouldn't the builder's method name relate to the file path too?", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r539326770", "createdAt": "2020-12-09T13:57:35Z", "author": {"login": "biharitomi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/StackToTemplatePreparationObjectConverter.java", "diffHunk": "@@ -210,6 +214,7 @@ public TemplatePreparationObject convert(Stack source) {\n             Builder builder = Builder.builder()\n                     .withCloudPlatform(CloudPlatform.valueOf(source.getCloudPlatform()))\n                     .withRdsConfigs(postgresConfigService.createRdsConfigIfNeeded(source, cluster))\n+                    .withRdsSslCertificateFile(dbCertificateProvider.getSslCertsFilePath())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499fda4f800d15d654255c3c1d6192cfe9b978c7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNDczNg==", "bodyText": "Good point. Fixed.", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r539404736", "createdAt": "2020-12-09T15:30:29Z", "author": {"login": "lajosrodek"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/StackToTemplatePreparationObjectConverter.java", "diffHunk": "@@ -210,6 +214,7 @@ public TemplatePreparationObject convert(Stack source) {\n             Builder builder = Builder.builder()\n                     .withCloudPlatform(CloudPlatform.valueOf(source.getCloudPlatform()))\n                     .withRdsConfigs(postgresConfigService.createRdsConfigIfNeeded(source, cluster))\n+                    .withRdsSslCertificateFile(dbCertificateProvider.getSslCertsFilePath())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyNjc3MA=="}, "originalCommit": {"oid": "499fda4f800d15d654255c3c1d6192cfe9b978c7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjMwMjQwOnYy", "diffSide": "RIGHT", "path": "template-manager-core/src/main/java/com/sequenceiq/cloudbreak/template/TemplatePreparationObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDowODo0MFrOICWarg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTozMDo0NVrOICaqsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMzNTM0Mg==", "bodyText": "Can we name it {{rdsSslCertificateFilePath}} or ending with location? I think it would be more straightforward that way.", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r539335342", "createdAt": "2020-12-09T14:08:40Z", "author": {"login": "biharitomi"}, "path": "template-manager-core/src/main/java/com/sequenceiq/cloudbreak/template/TemplatePreparationObject.java", "diffHunk": "@@ -53,6 +53,8 @@\n \n     private final Map<String, RDSConfig> rdsConfigs;\n \n+    private final String rdsSslCertificateFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499fda4f800d15d654255c3c1d6192cfe9b978c7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNDk3OQ==", "bodyText": "Good point. Fixed.", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r539404979", "createdAt": "2020-12-09T15:30:45Z", "author": {"login": "lajosrodek"}, "path": "template-manager-core/src/main/java/com/sequenceiq/cloudbreak/template/TemplatePreparationObject.java", "diffHunk": "@@ -53,6 +53,8 @@\n \n     private final Map<String, RDSConfig> rdsConfigs;\n \n+    private final String rdsSslCertificateFile;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMzNTM0Mg=="}, "originalCommit": {"oid": "499fda4f800d15d654255c3c1d6192cfe9b978c7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjMwOTk1OnYy", "diffSide": "RIGHT", "path": "template-manager-core/src/main/java/com/sequenceiq/cloudbreak/template/views/RdsView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDowOTo1NlrOICWe3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTozMDo1N1rOICarSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMzNjQxNQ==", "bodyText": "The same here, it is not the file, it's just the location/path of the file.", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r539336415", "createdAt": "2020-12-09T14:09:56Z", "author": {"login": "biharitomi"}, "path": "template-manager-core/src/main/java/com/sequenceiq/cloudbreak/template/views/RdsView.java", "diffHunk": "@@ -59,6 +58,12 @@\n     private final RdsViewDialect rdsViewDialect;\n \n     public RdsView(RDSConfig rdsConfig) {\n+        this(rdsConfig, \"\");\n+    }\n+\n+    public RdsView(RDSConfig rdsConfig, String sslCertificateFile) {\n+        // Note: any value is valid for sslCertificateFile for sake of backward compatibility.\n+        this.sslCertificateFile = Objects.requireNonNullElse(sslCertificateFile, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499fda4f800d15d654255c3c1d6192cfe9b978c7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwNTEyOA==", "bodyText": "Good point. Fixed.", "url": "https://github.com/hortonworks/cloudbreak/pull/9563#discussion_r539405128", "createdAt": "2020-12-09T15:30:57Z", "author": {"login": "lajosrodek"}, "path": "template-manager-core/src/main/java/com/sequenceiq/cloudbreak/template/views/RdsView.java", "diffHunk": "@@ -59,6 +58,12 @@\n     private final RdsViewDialect rdsViewDialect;\n \n     public RdsView(RDSConfig rdsConfig) {\n+        this(rdsConfig, \"\");\n+    }\n+\n+    public RdsView(RDSConfig rdsConfig, String sslCertificateFile) {\n+        // Note: any value is valid for sslCertificateFile for sake of backward compatibility.\n+        this.sslCertificateFile = Objects.requireNonNullElse(sslCertificateFile, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMzNjQxNQ=="}, "originalCommit": {"oid": "499fda4f800d15d654255c3c1d6192cfe9b978c7"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3411, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}