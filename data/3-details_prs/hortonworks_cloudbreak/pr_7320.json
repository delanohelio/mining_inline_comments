{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MDM1MTc1", "number": 7320, "title": "CB-5468 The subnet selection logic be part of the cloud moduls", "bodyText": "The goal here is to refactor the subnet selection logic into one place.\nSo far 2 places were factored out:\n\nRedbeams SubnetChooserService\nEnvironment Service: SubnetIdProvider\n\nPossible further targets are:\n\nnetwork validation: after checking the presence of stated subnets in the cloud provider, it should suffice to apply subnet selection logic. If it works then the network is valid.\n\nI followed the one pager about subnets by Attila.\nNotable difference to previous implementation of subnetIdProvider:\n\nif no suitable subnet found (e.g. there is no private subnet and the public one has MapPublicIp false), then there is no fallback selection strategy but an exception is thrown.\nif there are not enough subnets, exception is thrown", "createdAt": "2020-02-19T08:40:50Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7320", "merged": true, "mergeCommit": {"oid": "b60113ee9b79ea6f9f262995277beaf2d16f2026"}, "closed": true, "closedAt": "2020-02-26T17:01:33Z", "author": {"login": "gergopapi2"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF0DBWAFqTM2MTAwMjUxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIGyHngBqjMwNzM3MTYwNjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMDAyNTE2", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-361002516", "createdAt": "2020-02-19T10:34:03Z", "commit": {"oid": "8f5ff1e1be1cff92ef4daa6501ca028157690307"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozNDowM1rOFrjDzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozNDowM1rOFrjDzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNzUwMw==", "bodyText": "I think an object would better here which contains all of the property", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r381207503", "createdAt": "2020-02-19T10:34:03Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsNetworkConnector.java", "diffHunk": "@@ -126,6 +133,19 @@ public String getNetworkCidr(Network network, CloudCredential credential) {\n         return vpcCidrs.get(0);\n     }\n \n+    @Override\n+    public List<CloudSubnet> selectSubnets(List<CloudSubnet> subnetMetas, Tunnel tunnel, boolean ha, boolean preferPrivateAnyways) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f5ff1e1be1cff92ef4daa6501ca028157690307"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMDAzNjk1", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-361003695", "createdAt": "2020-02-19T10:35:50Z", "commit": {"oid": "8f5ff1e1be1cff92ef4daa6501ca028157690307"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozNTo1MFrOFrjHYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozNTo1MFrOFrjHYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwODQxNg==", "bodyText": "No suitable subnet found because ther eis no public subnet in {} list", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r381208416", "createdAt": "2020-02-19T10:35:50Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategySinglePreferPrivate.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Component\n+public class SubnetSelectorStrategySinglePreferPrivate extends SubnetSelectorStrategy {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategySinglePreferPrivate.class);\n+\n+    @Inject\n+    private SubnetSelectorService subnetSelectorService;\n+\n+    @Override\n+    public List<CloudSubnet> selectInternal(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> foundSubnet = subnetSelectorService.getOnePrivateSubnet(subnetMetas);\n+        if (foundSubnet.isEmpty()) {\n+            foundSubnet = subnetSelectorService.getOnePublicSubnet(subnetMetas);\n+            if (foundSubnet.isEmpty()) {\n+                error(\"No suitable subnet found.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f5ff1e1be1cff92ef4daa6501ca028157690307"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMDA1MjAz", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-361005203", "createdAt": "2020-02-19T10:38:05Z", "commit": {"oid": "8f5ff1e1be1cff92ef4daa6501ca028157690307"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozODowNVrOFrjMSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozODowNVrOFrjMSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwOTY3Mw==", "bodyText": "I think these test are great but would be beneficial to say what is happenning like testCollectOnePrivateSubnetPerAzWhenTwoInOneAZ -> testCollectOnePrivateSubnetPerAzWhenTwoInOneAZThenShouldReturnOneAZ", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r381209673", "createdAt": "2020-02-19T10:38:05Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorServiceTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+\n+import static com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector.SubnetBuilder.AZ_A;\n+import static com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector.SubnetBuilder.AZ_B;\n+import static com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector.SubnetBuilder.AZ_C;\n+import static com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector.SubnetBuilder.AZ_D;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SubnetSelectorServiceTest {\n+\n+    private final SubnetSelectorService subnetSelectorService = new SubnetSelectorService();\n+\n+    @Test\n+    public void testCollectOnePrivateSubnetPerAzWhenEmpty() {\n+        List<CloudSubnet> cloudSubnets = new SubnetBuilder()\n+                .build();\n+\n+        Map<String, CloudSubnet> privateSubnetsPerAz = subnetSelectorService.collectOnePrivateSubnetPerAz(cloudSubnets, 3);\n+\n+        assertTrue(privateSubnetsPerAz.isEmpty());\n+    }\n+\n+    @Test\n+    public void testCollectOnePrivateSubnetPerAz() {\n+        List<CloudSubnet> cloudSubnets = new SubnetBuilder()\n+                .withPrivateSubnet(AZ_A)\n+                .withPrivateSubnet(AZ_B)\n+                .withPrivateSubnet(AZ_C)\n+                .build();\n+\n+        Map<String, CloudSubnet> privateSubnetsPerAz = subnetSelectorService.collectOnePrivateSubnetPerAz(cloudSubnets, 3);\n+\n+        assertThat(privateSubnetsPerAz.values(), hasSize(3));\n+    }\n+\n+    @Test\n+    public void testCollectOnePrivateSubnetPerAzWhenMoreThanThree() {\n+        List<CloudSubnet> cloudSubnets = new SubnetBuilder()\n+                .withPrivateSubnet(AZ_A)\n+                .withPrivateSubnet(AZ_B)\n+                .withPrivateSubnet(AZ_C)\n+                .withPrivateSubnet(AZ_D)\n+                .build();\n+\n+        Map<String, CloudSubnet> privateSubnetsPerAz = subnetSelectorService.collectOnePrivateSubnetPerAz(cloudSubnets, 3);\n+\n+        assertThat(privateSubnetsPerAz.values(), hasSize(3));\n+    }\n+\n+    @Test\n+    public void testCollectOnePrivateSubnetPerAzWhenTwoInOneAZ() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f5ff1e1be1cff92ef4daa6501ca028157690307"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMDA1OTYz", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-361005963", "createdAt": "2020-02-19T10:39:17Z", "commit": {"oid": "8f5ff1e1be1cff92ef4daa6501ca028157690307"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozOToxN1rOFrjO2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozOToxN1rOFrjO2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxMDMzMA==", "bodyText": "the name of the test should be more specific", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r381210330", "createdAt": "2020-02-19T10:39:17Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategySinglePreferPrivateTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import static com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector.SubnetBuilder.AZ_A;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.BadRequestException;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SubnetSelectorStrategySinglePreferPrivateTest {\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    @Mock\n+    private SubnetSelectorService subnetSelectorService;\n+\n+    @InjectMocks\n+    private SubnetSelectorStrategySinglePreferPrivate underTest;\n+\n+    private final SubnetHelper subnetHelper = new SubnetHelper();\n+\n+    @Before\n+    public void setup() {\n+        when(subnetSelectorService.getOnePrivateSubnet(ArgumentMatchers.any())).thenCallRealMethod();\n+        when(subnetSelectorService.getOnePublicSubnet(ArgumentMatchers.any())).thenCallRealMethod();\n+    }\n+\n+    @Test\n+    public void testWhenOnePrivateSubnet() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f5ff1e1be1cff92ef4daa6501ca028157690307"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f5ff1e1be1cff92ef4daa6501ca028157690307", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8f5ff1e1be1cff92ef4daa6501ca028157690307", "committedDate": "2020-02-19T08:37:54Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}, "afterCommit": {"oid": "35eca3d912f81f7e8e42b344d1fe093703ce71a4", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/35eca3d912f81f7e8e42b344d1fe093703ce71a4", "committedDate": "2020-02-19T15:14:27Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35eca3d912f81f7e8e42b344d1fe093703ce71a4", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/35eca3d912f81f7e8e42b344d1fe093703ce71a4", "committedDate": "2020-02-19T15:14:27Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}, "afterCommit": {"oid": "9be1775460835525551699cb126e2d3cc9f991e8", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/9be1775460835525551699cb126e2d3cc9f991e8", "committedDate": "2020-02-20T08:12:09Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9be1775460835525551699cb126e2d3cc9f991e8", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/9be1775460835525551699cb126e2d3cc9f991e8", "committedDate": "2020-02-20T08:12:09Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}, "afterCommit": {"oid": "2e3d1eb97ca333983ac2e40e943a4f833484d0ad", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2e3d1eb97ca333983ac2e40e943a4f833484d0ad", "committedDate": "2020-02-20T09:22:42Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e3d1eb97ca333983ac2e40e943a4f833484d0ad", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2e3d1eb97ca333983ac2e40e943a4f833484d0ad", "committedDate": "2020-02-20T09:22:42Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}, "afterCommit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2cbf1fe59e511ba0f734de74b0fb86f974515c44", "committedDate": "2020-02-20T09:42:18Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTIxNzI0", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-363121724", "createdAt": "2020-02-23T20:56:42Z", "commit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjQ1Nzg0", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-363245784", "createdAt": "2020-02-24T09:17:37Z", "commit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOToxNzozN1rOFtZijQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOToxNzozN1rOFtZijQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0ODY4NQ==", "bodyText": "this could be simplified with stream, like:\nsubnetMetas.stream().filter(isPrivate).limit(max).collect(Collectors.toMap(key,value,(existing, new)->existing))", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383148685", "createdAt": "2020-02-24T09:17:37Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Service\n+class SubnetSelectorService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorService.class);\n+\n+    Map<String, CloudSubnet> collectOnePrivateSubnetPerAz(List<CloudSubnet> subnetMetas, int max) {\n+        Map<String, CloudSubnet> subnetsPerAz = new HashMap<>();\n+        Iterator<CloudSubnet> subnetIterator = subnetMetas.iterator();\n+        while (subnetsPerAz.size() < max && subnetIterator.hasNext()) {\n+            CloudSubnet nextSubnet = subnetIterator.next();\n+            if (nextSubnet.isPrivateSubnet()) {\n+                subnetsPerAz.putIfAbsent(nextSubnet.getAvailabilityZone(), nextSubnet);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjQ5Mzc0", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-363249374", "createdAt": "2020-02-24T09:24:11Z", "commit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOToyNDoxMVrOFtZt3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOToyNDoxMVrOFtZt3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTU4Mw==", "bodyText": "it's similar to the private one, could be replaced with stream.", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383151583", "createdAt": "2020-02-24T09:24:11Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Service\n+class SubnetSelectorService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorService.class);\n+\n+    Map<String, CloudSubnet> collectOnePrivateSubnetPerAz(List<CloudSubnet> subnetMetas, int max) {\n+        Map<String, CloudSubnet> subnetsPerAz = new HashMap<>();\n+        Iterator<CloudSubnet> subnetIterator = subnetMetas.iterator();\n+        while (subnetsPerAz.size() < max && subnetIterator.hasNext()) {\n+            CloudSubnet nextSubnet = subnetIterator.next();\n+            if (nextSubnet.isPrivateSubnet()) {\n+                subnetsPerAz.putIfAbsent(nextSubnet.getAvailabilityZone(), nextSubnet);\n+            }\n+        }\n+        LOGGER.debug(\"Private subnets per AZ: {}\", subnetsPerAz.values().stream().map(CloudSubnet::getId).collect(Collectors.joining(\",\")));\n+        return subnetsPerAz;\n+    }\n+\n+    Optional<CloudSubnet> getOnePrivateSubnet(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> foundCloudSubnet = subnetMetas.stream()\n+                .filter(CloudSubnet::isPrivateSubnet)\n+                .findFirst();\n+        LOGGER.debug(\"Found private subnet: {}\", foundCloudSubnet.map(CloudSubnet::getId).orElse(\"Not found\"));\n+        return foundCloudSubnet;\n+    }\n+\n+    Map<String, CloudSubnet> collectOnePublicSubnetPerAz(List<CloudSubnet> subnetMetas, int max) {\n+        Map<String, CloudSubnet> subnetsPerAz = new HashMap<>();\n+        Iterator<CloudSubnet> subnetIterator = subnetMetas.iterator();\n+        while (subnetsPerAz.size() < max && subnetIterator.hasNext()) {\n+            CloudSubnet nextSubnet = subnetIterator.next();\n+            if (isUsablePublicSubnet(nextSubnet)) {\n+                subnetsPerAz.putIfAbsent(nextSubnet.getAvailabilityZone(), nextSubnet);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjU2Mjcz", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-363256273", "createdAt": "2020-02-24T09:35:46Z", "commit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTozNTo0NlrOFtaDuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTozNTo0NlrOFtaDuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1NzE3Ng==", "bodyText": "could you move this into @Values so we can modify it easily if needed", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383157176", "createdAt": "2020-02-24T09:35:46Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPrivate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Component\n+public class SubnetSelectorStrategyMultiplePreferPrivate extends SubnetSelectorStrategy {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategyMultiplePreferPrivate.class);\n+\n+    private static final int MIN_SUBNET_IN_DIFFERENT_AZ = 2;\n+\n+    private static final int MAX_SUBNET_IN_DIFFERENT_AZ = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjU3NTc2", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-363257576", "createdAt": "2020-02-24T09:38:03Z", "commit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTozODowNFrOFtaH0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTozODowNFrOFtaH0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1ODIyNw==", "bodyText": "line break seems unnecessary", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383158227", "createdAt": "2020-02-24T09:38:04Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPrivate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Component\n+public class SubnetSelectorStrategyMultiplePreferPrivate extends SubnetSelectorStrategy {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategyMultiplePreferPrivate.class);\n+\n+    private static final int MIN_SUBNET_IN_DIFFERENT_AZ = 2;\n+\n+    private static final int MAX_SUBNET_IN_DIFFERENT_AZ = 3;\n+\n+    @Inject\n+    private SubnetSelectorService subnetSelectorService;\n+\n+    @Override\n+    public List<CloudSubnet> selectInternal(List<CloudSubnet> subnetMetas) {\n+        Map<String, CloudSubnet> selectedSubnets = subnetSelectorService.collectOnePrivateSubnetPerAz(subnetMetas, MAX_SUBNET_IN_DIFFERENT_AZ);\n+        if (selectedSubnets.size() < MIN_SUBNET_IN_DIFFERENT_AZ) {\n+            Map<String, CloudSubnet> publicSubnetsPerAz = subnetSelectorService.collectOnePublicSubnetPerAz(subnetMetas, MIN_SUBNET_IN_DIFFERENT_AZ);\n+            subnetSelectorService.collectSubnetsOfMissingAz(selectedSubnets, publicSubnetsPerAz,\n+                    MIN_SUBNET_IN_DIFFERENT_AZ);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjU5MDE3", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-363259017", "createdAt": "2020-02-24T09:40:34Z", "commit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTo0MDozNFrOFtaMjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTo0MDozNFrOFtaMjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1OTQzOA==", "bodyText": "same as above", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383159438", "createdAt": "2020-02-24T09:40:34Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPublic.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Component\n+public class SubnetSelectorStrategyMultiplePreferPublic extends SubnetSelectorStrategy {\n+\n+    private static final int MIN_SUBNET_IN_DIFFERENT_AZ = 2;\n+\n+    private static final int MAX_SUBNET_IN_DIFFERENT_AZ = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjYxOTY4", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-363261968", "createdAt": "2020-02-24T09:45:04Z", "commit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTo0NTowNFrOFtaWCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTo0NTowNFrOFtaWCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MTg2Nw==", "bodyText": "on AWS implementation there is a validation if subnetMetas is null. I think it would make sense to have the same here", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383161867", "createdAt": "2020-02-24T09:45:04Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkConnector.java", "diffHunk": "@@ -137,6 +139,16 @@ public String getNetworkCidr(Network network, CloudCredential credential) {\n         return networkCidrs.get(0);\n     }\n \n+    @Override\n+    public List<CloudSubnet> selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetMetas.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjYyNDEx", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-363262411", "createdAt": "2020-02-24T09:45:47Z", "commit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTo0NTo0N1rOFtaXeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTo0NTo0N1rOFtaXeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MjIzMg==", "bodyText": "same here, check if it's null", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383162232", "createdAt": "2020-02-24T09:45:47Z", "author": {"login": "lacikaaa"}, "path": "cloud-mock/src/main/java/com/sequenceiq/cloudbreak/cloud/mock/MockNetworkConnector.java", "diffHunk": "@@ -45,6 +55,16 @@ public String getNetworkCidr(Network network, CloudCredential credential) {\n         return \"10.0.0.0/8\";\n     }\n \n+    @Override\n+    public List<CloudSubnet> selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetMetas.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjY2NjQz", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-363266643", "createdAt": "2020-02-24T09:52:00Z", "commit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTo1MjowMFrOFtakjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTo1MjowMFrOFtakjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2NTU4MQ==", "bodyText": "I would move this logic into DBStack as it could be reused there.\nalso the CloudPlatform parameter is not necessary, as it's in dbStack", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383165581", "createdAt": "2020-02-24T09:52:00Z", "author": {"login": "lacikaaa"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/SubnetChooserService.java", "diffHunk": "@@ -7,38 +7,41 @@\n \n import org.springframework.stereotype.Service;\n \n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudPlatformVariant;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n-import com.sequenceiq.redbeams.exception.BadRequestException;\n-import com.sequenceiq.redbeams.exception.RedbeamsException;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.aws.AwsDatabaseServerV4Parameters;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n \n @Service\n public class SubnetChooserService {\n \n     @Inject\n-    private AwsSubnetChooser awsSubnetChooser;\n-\n-    public List<CloudSubnet> chooseSubnets(List<CloudSubnet> subnetMetas, CloudPlatform cloudPlatform, Map<String, String> dbParameters) {\n-        switch (cloudPlatform) {\n-            case AWS:\n-                return awsSubnetChooser.chooseSubnets(subnetMetas, dbParameters);\n-            case AZURE:\n-                return chooseSubnetsAzure(subnetMetas);\n-            case MOCK:\n-                return chooseSubnetsMock(subnetMetas);\n-            default:\n-                throw new RedbeamsException(String.format(\"Support for cloud platform %s not yet added\", cloudPlatform.name()));\n-        }\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    public List<CloudSubnet> chooseSubnets(List<CloudSubnet> subnetMetas, CloudPlatform cloudPlatform, DBStack dbStack) {\n+        return cloudPlatformConnectors.get(new CloudPlatformVariant(dbStack.getCloudPlatform(), dbStack.getPlatformVariant()))\n+                .networkConnector()\n+                .selectSubnets(\n+                        subnetMetas,\n+                        SubnetSelectionParameters.builder()\n+                                .withHa(isHa(cloudPlatform, dbStack))\n+                                .withPreferPrivateNetwork()\n+                                .build()\n+                );\n     }\n \n-    private List<CloudSubnet> chooseSubnetsAzure(List<CloudSubnet> subnetMetas) {\n-        if (subnetMetas.isEmpty()) {\n-            throw new BadRequestException(\"Insufficient number of subnets: at least one subnet needed\");\n+    private boolean isHa(CloudPlatform cloudPlatform, DBStack dbStack) {\n+        boolean ha = true;\n+        if (CloudPlatform.AWS.equals(cloudPlatform)) {\n+            ha = !isAwsNoHaRequested(dbStack.getParameters());\n         }\n-        return subnetMetas.subList(0, 1);\n+        return ha;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTcyNDM2", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-363972436", "createdAt": "2020-02-25T09:10:01Z", "commit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2cbf1fe59e511ba0f734de74b0fb86f974515c44", "committedDate": "2020-02-20T09:42:18Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}, "afterCommit": {"oid": "bef272fdb57fe6c7e9f8f691cfbd0a38b1ebb609", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/bef272fdb57fe6c7e9f8f691cfbd0a38b1ebb609", "committedDate": "2020-02-25T16:42:52Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bef272fdb57fe6c7e9f8f691cfbd0a38b1ebb609", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/bef272fdb57fe6c7e9f8f691cfbd0a38b1ebb609", "committedDate": "2020-02-25T16:42:52Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}, "afterCommit": {"oid": "73b7641e057f33c7240e79992b4a41c8db548500", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/73b7641e057f33c7240e79992b4a41c8db548500", "committedDate": "2020-02-26T07:39:24Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73b7641e057f33c7240e79992b4a41c8db548500", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/73b7641e057f33c7240e79992b4a41c8db548500", "committedDate": "2020-02-26T07:39:24Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}, "afterCommit": {"oid": "3011f2378d810f9f56c9d5f792f9ec568d9fbe4b", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/3011f2378d810f9f56c9d5f792f9ec568d9fbe4b", "committedDate": "2020-02-26T11:20:51Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODIyMDYx", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#pullrequestreview-364822061", "createdAt": "2020-02-26T11:26:34Z", "commit": {"oid": "3011f2378d810f9f56c9d5f792f9ec568d9fbe4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c43a5c525dea54caaa4f4bf122d2cef43dc6768e", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c43a5c525dea54caaa4f4bf122d2cef43dc6768e", "committedDate": "2020-02-26T13:31:16Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3011f2378d810f9f56c9d5f792f9ec568d9fbe4b", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/3011f2378d810f9f56c9d5f792f9ec568d9fbe4b", "committedDate": "2020-02-26T11:20:51Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}, "afterCommit": {"oid": "c43a5c525dea54caaa4f4bf122d2cef43dc6768e", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c43a5c525dea54caaa4f4bf122d2cef43dc6768e", "committedDate": "2020-02-26T13:31:16Z", "message": "CB-5468 The subnet selection logic be part of the cloud moduls"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1890, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}