{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NTQ5ODk2", "number": 9031, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoxMDozNVrOEkdu3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo0NDo1OFrOEkeclg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjcxMzI1OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoxMDozNVrOHTbFpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo1MDo0NFrOHTgfqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEyODgwNA==", "bodyText": "Maybe CREATE/DELETE/UPDATE a credential?", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490128804", "createdAt": "2020-09-17T10:10:35Z", "author": {"login": "biharitomi"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "diffHunk": "@@ -21,5 +21,10 @@\n     RETRY_DATALAKE_CLUSTER,\n     INSTANCE_DELETE_DATALAKE_CLUSTER,\n     MAINTAIN_DATALAKE_CLUSTER,\n-    START_DATALAKE_CLUSTER\n+    START_DATALAKE_CLUSTER,\n+\n+    CREATE_ENVIRONMENT,\n+    DELETE_ENVIRONMENT,\n+    STOP_ENVIRONMENT,\n+    START_ENVIRONMENT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxNzM4Nw==", "bodyText": "Credential audit logs are added", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490217387", "createdAt": "2020-09-17T12:50:44Z", "author": {"login": "topolyai5"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "diffHunk": "@@ -21,5 +21,10 @@\n     RETRY_DATALAKE_CLUSTER,\n     INSTANCE_DELETE_DATALAKE_CLUSTER,\n     MAINTAIN_DATALAKE_CLUSTER,\n-    START_DATALAKE_CLUSTER\n+    START_DATALAKE_CLUSTER,\n+\n+    CREATE_ENVIRONMENT,\n+    DELETE_ENVIRONMENT,\n+    STOP_ENVIRONMENT,\n+    START_ENVIRONMENT", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEyODgwNA=="}, "originalCommit": {"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njc1NTIyOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/audit/flow/CreationEnvironmentFlowOperationAuditEventNameConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyMjo0M1rOHTbfcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyMjo0M1rOHTbfcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzNTQxMA==", "bodyText": "EnvironmentCreationFlowOperation.... would sound better to me, what do yo think?", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490135410", "createdAt": "2020-09-17T10:22:43Z", "author": {"login": "biharitomi"}, "path": "environment/src/main/java/com/sequenceiq/environment/audit/flow/CreationEnvironmentFlowOperationAuditEventNameConverter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.environment.audit.flow;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredFlowEvent;\n+\n+@Component\n+public class CreationEnvironmentFlowOperationAuditEventNameConverter implements EnvironmentFlowOperationAuditEventNameConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njc3MTEwOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/audit/rest/EnvironmentRestResourceAuditEventConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyNzoxNVrOHTbpEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyNzoxNVrOHTbpEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzNzg3NA==", "bodyText": "One return statement would be easier to read.", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490137874", "createdAt": "2020-09-17T10:27:15Z", "author": {"login": "biharitomi"}, "path": "environment/src/main/java/com/sequenceiq/environment/audit/rest/EnvironmentRestResourceAuditEventConverter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.sequenceiq.environment.audit.rest;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CDPRestCommonService;\n+import com.sequenceiq.cloudbreak.structuredevent.service.audit.auditeventname.rest.CDPRestResourceAuditEventConverter;\n+\n+@Component\n+public class EnvironmentRestResourceAuditEventConverter implements CDPRestResourceAuditEventConverter {\n+\n+    @Inject\n+    private CDPRestCommonService restCommonService;\n+\n+    @Override\n+    public AuditEventName auditEventName(CDPStructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();\n+        AuditEventName eventName = null;\n+        String resourceEvent = structuredEvent.getOperation().getResourceEvent();\n+        if (\"POST\".equals(method) || \"PUT\".equals(method)) {\n+            if (resourceEvent == null) {\n+                eventName = AuditEventName.CREATE_ENVIRONMENT;\n+            } else {\n+                eventName = updateRest(resourceEvent);\n+            }\n+        } else if (\"DELETE\".equals(method)) {\n+            eventName = deletionRest(resourceEvent, structuredEvent.getOperation());\n+        }\n+        return eventName;\n+    }\n+\n+    private AuditEventName deletionRest(String resourceEvent, CDPOperationDetails operationDetails) {\n+        if (StringUtils.isEmpty(resourceEvent)\n+                || resourceEvent.equals(operationDetails.getResourceName())\n+                || resourceEvent.equals(operationDetails.getResourceCrn())) {\n+            return AuditEventName.DELETE_ENVIRONMENT;\n+        }\n+        return null;\n+    }\n+\n+    private AuditEventName updateRest(String resourceEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njc5MTUyOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/events/EnvironmentStructuredFlowEventFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozMzoxOVrOHTb1kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozMzoxOVrOHTb1kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MTA3NQ==", "bodyText": "It indicates the type of the given operation and JSON deserialisation logic uses that field. I wouldn't change it, because it has already fixed previously to work properly. Please test it with querying events from the backend, because I am sure this change would break get operation on structured events.", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490141075", "createdAt": "2020-09-17T10:33:19Z", "author": {"login": "biharitomi"}, "path": "environment/src/main/java/com/sequenceiq/environment/events/EnvironmentStructuredFlowEventFactory.java", "diffHunk": "@@ -40,11 +41,11 @@ public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDet\n     @Override\n     public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDetails flowDetails, Boolean detailed, Exception exception) {\n         Environment environment = environmentService.findEnvironmentByIdOrThrow(resourceId);\n-        String resourceType = CDPStructuredFlowEvent.class.getSimpleName();\n+        String resourceType = CloudbreakEventService.ENVIRONMENT_RESOURCE_TYPE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgwODMyOnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/CDPAsyncAuditStructuredEventSender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozODoxNFrOHTb_vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToyODoxMFrOHTdj8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MzY3Nw==", "bodyText": "Shouldn't we be prepared for cases when Reactor is not able to process the event?", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490143677", "createdAt": "2020-09-17T10:38:14Z", "author": {"login": "biharitomi"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/CDPAsyncAuditStructuredEventSender.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.audit;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.conf.StructuredEventEnablementConfig;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEventSenderService;\n+import com.sequenceiq.flow.reactor.ErrorHandlerAwareReactorEventFactory;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class CDPAsyncAuditStructuredEventSender implements CDPStructuredEventSenderService {\n+\n+    public static final String AUDIT_EVENT_LOG_MESSAGE = \"AUDIT_EVENT_LOG_MESSAGE\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPAsyncAuditStructuredEventSender.class);\n+\n+    @Inject\n+    private StructuredEventEnablementConfig structuredEventSenderConfig;\n+\n+    @Inject\n+    private ErrorHandlerAwareReactorEventFactory eventFactory;\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Inject\n+    private Map<String, CDPEventDataExtractor<? extends CDPStructuredEvent>> eventDataExtractorMap;\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return structuredEventSenderConfig.isAuditServiceEnabled();\n+    }\n+\n+    @Override\n+    public void create(CDPStructuredEvent structuredEvent) {\n+        StructuredEventType eventType = structuredEvent.getOperation().getEventType();\n+        CDPEventDataExtractor<? extends CDPStructuredEvent> eventDataExtractor =\n+                eventDataExtractorMap.get(eventType.name().toLowerCase() + \"CDPEventDataExtractor\");\n+        if (eventDataExtractor == null) {\n+            LOGGER.debug(\"Event data converter does not exist for event type of {}\", eventType);\n+            return;\n+        }\n+        boolean shouldAudit = eventDataExtractor.shouldAudit(structuredEvent);\n+        if (shouldAudit) {\n+            sendAsyncEvent(AUDIT_EVENT_LOG_MESSAGE, eventFactory.createEvent(structuredEvent));\n+        } else {\n+            LOGGER.debug(\"Audit Event is disabled for this structure event: {}\", structuredEvent);\n+        }\n+    }\n+\n+    private void sendAsyncEvent(String selector, Event<?> event) {\n+        eventBus.notify(selector, event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2OTMzMA==", "bodyText": "Only one handler exists and this handler always subscribe to the event", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490169330", "createdAt": "2020-09-17T11:28:10Z", "author": {"login": "topolyai5"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/CDPAsyncAuditStructuredEventSender.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.audit;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.conf.StructuredEventEnablementConfig;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEventSenderService;\n+import com.sequenceiq.flow.reactor.ErrorHandlerAwareReactorEventFactory;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class CDPAsyncAuditStructuredEventSender implements CDPStructuredEventSenderService {\n+\n+    public static final String AUDIT_EVENT_LOG_MESSAGE = \"AUDIT_EVENT_LOG_MESSAGE\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPAsyncAuditStructuredEventSender.class);\n+\n+    @Inject\n+    private StructuredEventEnablementConfig structuredEventSenderConfig;\n+\n+    @Inject\n+    private ErrorHandlerAwareReactorEventFactory eventFactory;\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Inject\n+    private Map<String, CDPEventDataExtractor<? extends CDPStructuredEvent>> eventDataExtractorMap;\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return structuredEventSenderConfig.isAuditServiceEnabled();\n+    }\n+\n+    @Override\n+    public void create(CDPStructuredEvent structuredEvent) {\n+        StructuredEventType eventType = structuredEvent.getOperation().getEventType();\n+        CDPEventDataExtractor<? extends CDPStructuredEvent> eventDataExtractor =\n+                eventDataExtractorMap.get(eventType.name().toLowerCase() + \"CDPEventDataExtractor\");\n+        if (eventDataExtractor == null) {\n+            LOGGER.debug(\"Event data converter does not exist for event type of {}\", eventType);\n+            return;\n+        }\n+        boolean shouldAudit = eventDataExtractor.shouldAudit(structuredEvent);\n+        if (shouldAudit) {\n+            sendAsyncEvent(AUDIT_EVENT_LOG_MESSAGE, eventFactory.createEvent(structuredEvent));\n+        } else {\n+            LOGGER.debug(\"Audit Event is disabled for this structure event: {}\", structuredEvent);\n+        }\n+    }\n+\n+    private void sendAsyncEvent(String selector, Event<?> event) {\n+        eventBus.notify(selector, event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MzY3Nw=="}, "originalCommit": {"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgxMTc2OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/CDPAsyncAuditStructuredEventSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozOTowOVrOHTcBqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozOTowOVrOHTcBqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDE3MQ==", "bodyText": "I think a happy log message could be welcomed here :)", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490144171", "createdAt": "2020-09-17T10:39:09Z", "author": {"login": "biharitomi"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/CDPAsyncAuditStructuredEventSender.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.audit;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.conf.StructuredEventEnablementConfig;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEventSenderService;\n+import com.sequenceiq.flow.reactor.ErrorHandlerAwareReactorEventFactory;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class CDPAsyncAuditStructuredEventSender implements CDPStructuredEventSenderService {\n+\n+    public static final String AUDIT_EVENT_LOG_MESSAGE = \"AUDIT_EVENT_LOG_MESSAGE\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPAsyncAuditStructuredEventSender.class);\n+\n+    @Inject\n+    private StructuredEventEnablementConfig structuredEventSenderConfig;\n+\n+    @Inject\n+    private ErrorHandlerAwareReactorEventFactory eventFactory;\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Inject\n+    private Map<String, CDPEventDataExtractor<? extends CDPStructuredEvent>> eventDataExtractorMap;\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return structuredEventSenderConfig.isAuditServiceEnabled();\n+    }\n+\n+    @Override\n+    public void create(CDPStructuredEvent structuredEvent) {\n+        StructuredEventType eventType = structuredEvent.getOperation().getEventType();\n+        CDPEventDataExtractor<? extends CDPStructuredEvent> eventDataExtractor =\n+                eventDataExtractorMap.get(eventType.name().toLowerCase() + \"CDPEventDataExtractor\");\n+        if (eventDataExtractor == null) {\n+            LOGGER.debug(\"Event data converter does not exist for event type of {}\", eventType);\n+            return;\n+        }\n+        boolean shouldAudit = eventDataExtractor.shouldAudit(structuredEvent);\n+        if (shouldAudit) {\n+            sendAsyncEvent(AUDIT_EVENT_LOG_MESSAGE, eventFactory.createEvent(structuredEvent));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgxNjc1OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/CDPAuditStructuredEventHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo0MDo0NFrOHTcEyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo0MDo0NFrOHTcEyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDk2OQ==", "bodyText": "Warn level should be enough here, as it is just a warning without propagating any error about that the audit event could not be send and/or processed.", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490144969", "createdAt": "2020-09-17T10:40:44Z", "author": {"login": "biharitomi"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/CDPAuditStructuredEventHandler.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.audit;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.AuditClient;\n+import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class CDPAuditStructuredEventHandler<T extends CDPStructuredEvent> implements EventHandler<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPAuditStructuredEventHandler.class);\n+\n+    @Inject\n+    private AuditClient auditClient;\n+\n+    @Inject\n+    private Map<String, CDPEventDataExtractor<T>> eventDataExtractorMap;\n+\n+    @Override\n+    public String selector() {\n+        return CDPAsyncAuditStructuredEventSender.AUDIT_EVENT_LOG_MESSAGE;\n+    }\n+\n+    @Override\n+    public void accept(Event<T> structuredEvent) {\n+        try {\n+            T data = structuredEvent.getData();\n+            CDPOperationDetails operation = data.getOperation();\n+            CDPEventDataExtractor<T> extractor = eventDataExtractorMap.get(operation.getEventType().name().toLowerCase() + \"CDPEventDataExtractor\");\n+            LOGGER.info(\"Extract audit event as {}\", extractor);\n+            AuditEvent event = AuditEvent.builder()\n+                    .withAccountId(operation.getAccountId())\n+                    .withActor(ActorCrn.builder().withActorCrn(operation.getUserCrn()).build())\n+                    .withEventData(extractor.eventData(data))\n+                    .withEventName(extractor.eventName(data))\n+                    .withEventSource(extractor.eventSource(data))\n+                    .withSourceIp(extractor.sourceIp(data))\n+                    .build();\n+            auditClient.createAuditEvent(event);\n+        } catch (UnsupportedOperationException e) {\n+            LOGGER.debug(\"Audit log is unnecessary: {}\", e.getMessage());\n+        } catch (Exception e) {\n+            LOGGER.error(\"Cannot perform auditing: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgzMDMwOnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/auditeventname/flow/CDPFlowResourceAuditEventConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo0NDo1OFrOHTcNgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMToyOTo1MVrOHTdnYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NzIwMQ==", "bodyText": "Is this implemented somewhere? or it is for future purposes?", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490147201", "createdAt": "2020-09-17T10:44:58Z", "author": {"login": "biharitomi"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/auditeventname/flow/CDPFlowResourceAuditEventConverter.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.audit.auditeventname.flow;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredFlowEvent;\n+\n+public interface CDPFlowResourceAuditEventConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MDIwOQ==", "bodyText": "Yes it is implemented here: public class EnvironmentFlowAuditEventNameConverter implements CDPFlowResourceAuditEventConverter {", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490170209", "createdAt": "2020-09-17T11:29:51Z", "author": {"login": "topolyai5"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/auditeventname/flow/CDPFlowResourceAuditEventConverter.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.audit.auditeventname.flow;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredFlowEvent;\n+\n+public interface CDPFlowResourceAuditEventConverter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NzIwMQ=="}, "originalCommit": {"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2294, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}