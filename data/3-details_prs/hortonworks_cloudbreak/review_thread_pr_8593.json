{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMzI1MDYz", "number": 8593, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoxMDowM1rOEQND4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0MDowNFrOEQOM1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDI2NjU2OnYy", "diffSide": "RIGHT", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/diagnostics/model/DiagnosticsCollectionRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoxMDowM1rOG0OxHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0OTowNFrOG0Q-xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMTA4NA==", "bodyText": "what happens if you use this on distrox api? i think it will fail because it check for datalake", "url": "https://github.com/hortonworks/cloudbreak/pull/8593#discussion_r457421084", "createdAt": "2020-07-20T14:10:03Z", "author": {"login": "horadla23"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/diagnostics/model/DiagnosticsCollectionRequest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.diagnostics.model;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.authorization.annotation.ResourceObjectField;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationVariableType;\n+import com.sequenceiq.cloudbreak.doc.ModelDescriptions;\n+import com.sequenceiq.common.api.diagnostics.BaseDiagnosticsCollectionRequest;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel(\"DiagnosticsCollectionRequest\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class DiagnosticsCollectionRequest extends BaseDiagnosticsCollectionRequest {\n+\n+    @NotNull\n+    @ApiModelProperty(ModelDescriptions.StackModelDescription.CRN)\n+    @ResourceObjectField(action = AuthorizationResourceAction.DATALAKE_READ, variableType = AuthorizationVariableType.CRN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c702d45dc42d8599aa7f6a9f8b3aebf6f778e796"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NTI5MQ==", "bodyText": "Yea I think it would fail. I don't think it's a good idea to check datahub operations with datalake resource type", "url": "https://github.com/hortonworks/cloudbreak/pull/8593#discussion_r457455291", "createdAt": "2020-07-20T14:46:56Z", "author": {"login": "attilapalfi92"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/diagnostics/model/DiagnosticsCollectionRequest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.diagnostics.model;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.authorization.annotation.ResourceObjectField;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationVariableType;\n+import com.sequenceiq.cloudbreak.doc.ModelDescriptions;\n+import com.sequenceiq.common.api.diagnostics.BaseDiagnosticsCollectionRequest;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel(\"DiagnosticsCollectionRequest\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class DiagnosticsCollectionRequest extends BaseDiagnosticsCollectionRequest {\n+\n+    @NotNull\n+    @ApiModelProperty(ModelDescriptions.StackModelDescription.CRN)\n+    @ResourceObjectField(action = AuthorizationResourceAction.DATALAKE_READ, variableType = AuthorizationVariableType.CRN)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMTA4NA=="}, "originalCommit": {"oid": "c702d45dc42d8599aa7f6a9f8b3aebf6f778e796"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NzM0OA==", "bodyText": "ohh sry its an old comment, not relevant, browser kept it", "url": "https://github.com/hortonworks/cloudbreak/pull/8593#discussion_r457457348", "createdAt": "2020-07-20T14:49:04Z", "author": {"login": "horadla23"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/diagnostics/model/DiagnosticsCollectionRequest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.diagnostics.model;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.authorization.annotation.ResourceObjectField;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationVariableType;\n+import com.sequenceiq.cloudbreak.doc.ModelDescriptions;\n+import com.sequenceiq.common.api.diagnostics.BaseDiagnosticsCollectionRequest;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel(\"DiagnosticsCollectionRequest\")\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class DiagnosticsCollectionRequest extends BaseDiagnosticsCollectionRequest {\n+\n+    @NotNull\n+    @ApiModelProperty(ModelDescriptions.StackModelDescription.CRN)\n+    @ResourceObjectField(action = AuthorizationResourceAction.DATALAKE_READ, variableType = AuthorizationVariableType.CRN)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMTA4NA=="}, "originalCommit": {"oid": "c702d45dc42d8599aa7f6a9f8b3aebf6f778e796"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQ1MzM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/DiagnosticsV4Controller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0MDowNFrOG0QelA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0MDowNFrOG0QelA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0OTEwOA==", "bodyText": "as discussed, pls authorize this as it is done in related controller of datalake service", "url": "https://github.com/hortonworks/cloudbreak/pull/8593#discussion_r457449108", "createdAt": "2020-07-20T14:40:04Z", "author": {"login": "horadla23"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/DiagnosticsV4Controller.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.sequenceiq.cloudbreak.controller.v4;\n+\n+import javax.inject.Inject;\n+import javax.validation.Valid;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Controller;\n+\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.diagnostics.DiagnosticsV4Endpoint;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.diagnostics.model.DiagnosticsCollectionRequest;\n+import com.sequenceiq.cloudbreak.core.flow2.service.DiagnosticsTriggerService;\n+import com.sequenceiq.cloudbreak.service.CloudbreakRestRequestThreadLocalService;\n+import com.sequenceiq.cloudbreak.telemetry.VmLogsService;\n+import com.sequenceiq.cloudbreak.telemetry.converter.VmLogsToVmLogsResponseConverter;\n+import com.sequenceiq.common.api.telemetry.response.VmLogsResponse;\n+\n+@Controller\n+@DisableCheckPermissions\n+public class DiagnosticsV4Controller implements DiagnosticsV4Endpoint {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DiagnosticsV4Controller.class);\n+\n+    @Inject\n+    private CloudbreakRestRequestThreadLocalService crnService;\n+\n+    @Inject\n+    private DiagnosticsTriggerService diagnosticsTriggerService;\n+\n+    @Inject\n+    private VmLogsService vmLogsService;\n+\n+    @Inject\n+    private VmLogsToVmLogsResponseConverter vmlogsConverter;\n+\n+    @Override\n+    public void collectDiagnostics(@Valid DiagnosticsCollectionRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c702d45dc42d8599aa7f6a9f8b3aebf6f778e796"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3053, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}