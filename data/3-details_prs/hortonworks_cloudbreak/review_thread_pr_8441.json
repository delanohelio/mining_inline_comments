{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwOTgzOTI4", "number": 8441, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToxOTo0OVrOEKAq4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToyMzozOFrOEKAw3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTMyMTk0OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/resource/AwsVolumeResourceBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToxOTo0OVrOGqzoCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDo1MDo1N1rOGscpPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzOTIxMA==", "bodyText": "Minor, we could introduce a new method to replace group.getReferenceInstanceConfiguration().getTemplate() with getReferenceTemplate as it is used at many places.", "url": "https://github.com/hortonworks/cloudbreak/pull/8441#discussion_r447539210", "createdAt": "2020-06-30T09:19:49Z", "author": {"login": "keyki"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/resource/AwsVolumeResourceBuilder.java", "diffHunk": "@@ -226,18 +229,39 @@ private String getAvailabilityZoneFromSubnet(AuthenticatedContext auth, CloudRes\n                 .build();\n     }\n \n-    private Function<VolumeSetAttributes.Volume, CreateVolumeRequest> createVolumeRequest(String snapshotId, TagSpecification tagSpecification,\n-            VolumeSetAttributes volumeSet) {\n-        return volume -> new CreateVolumeRequest()\n-                .withAvailabilityZone(volumeSet.getAvailabilityZone())\n-                .withSize(volume.getSize())\n-                .withSnapshotId(snapshotId)\n-                .withTagSpecifications(tagSpecification)\n-                .withVolumeType(volume.getType());\n+    private boolean isFastEbsEncryptionEnabled(Group group) {\n+        return new AwsInstanceView(group.getReferenceInstanceConfiguration().getTemplate()).isFastEbsEncryptionEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0303e48ca79d8f5a5c49249fe68a8cb98a6c244f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3NTMzMQ==", "bodyText": "Good idea, will do that in a follow-up PR. \ud83d\udc4d", "url": "https://github.com/hortonworks/cloudbreak/pull/8441#discussion_r447575331", "createdAt": "2020-06-30T10:19:33Z", "author": {"login": "lajosrodek"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/resource/AwsVolumeResourceBuilder.java", "diffHunk": "@@ -226,18 +229,39 @@ private String getAvailabilityZoneFromSubnet(AuthenticatedContext auth, CloudRes\n                 .build();\n     }\n \n-    private Function<VolumeSetAttributes.Volume, CreateVolumeRequest> createVolumeRequest(String snapshotId, TagSpecification tagSpecification,\n-            VolumeSetAttributes volumeSet) {\n-        return volume -> new CreateVolumeRequest()\n-                .withAvailabilityZone(volumeSet.getAvailabilityZone())\n-                .withSize(volume.getSize())\n-                .withSnapshotId(snapshotId)\n-                .withTagSpecifications(tagSpecification)\n-                .withVolumeType(volume.getType());\n+    private boolean isFastEbsEncryptionEnabled(Group group) {\n+        return new AwsInstanceView(group.getReferenceInstanceConfiguration().getTemplate()).isFastEbsEncryptionEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzOTIxMA=="}, "originalCommit": {"oid": "0303e48ca79d8f5a5c49249fe68a8cb98a6c244f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1OTgzNw==", "bodyText": "See #8482.", "url": "https://github.com/hortonworks/cloudbreak/pull/8441#discussion_r449259837", "createdAt": "2020-07-02T20:50:57Z", "author": {"login": "lajosrodek"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/resource/AwsVolumeResourceBuilder.java", "diffHunk": "@@ -226,18 +229,39 @@ private String getAvailabilityZoneFromSubnet(AuthenticatedContext auth, CloudRes\n                 .build();\n     }\n \n-    private Function<VolumeSetAttributes.Volume, CreateVolumeRequest> createVolumeRequest(String snapshotId, TagSpecification tagSpecification,\n-            VolumeSetAttributes volumeSet) {\n-        return volume -> new CreateVolumeRequest()\n-                .withAvailabilityZone(volumeSet.getAvailabilityZone())\n-                .withSize(volume.getSize())\n-                .withSnapshotId(snapshotId)\n-                .withTagSpecifications(tagSpecification)\n-                .withVolumeType(volume.getType());\n+    private boolean isFastEbsEncryptionEnabled(Group group) {\n+        return new AwsInstanceView(group.getReferenceInstanceConfiguration().getTemplate()).isFastEbsEncryptionEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzOTIxMA=="}, "originalCommit": {"oid": "0303e48ca79d8f5a5c49249fe68a8cb98a6c244f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTMzNzI0OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/resources/templates/aws-cf-dbstack.ftl", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToyMzozOFrOGqzxaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDoxMjozOVrOGq1l_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0MTYwOQ==", "bodyText": "Is this a bug being fixed? What does it cause if we have the , there?", "url": "https://github.com/hortonworks/cloudbreak/pull/8441#discussion_r447541609", "createdAt": "2020-06-30T09:23:38Z", "author": {"login": "keyki"}, "path": "cloud-aws/src/main/resources/templates/aws-cf-dbstack.ftl", "diffHunk": "@@ -89,7 +89,7 @@\n     \"VPCSecurityGroupsParameter\": {\n         \"Type\": \"List<AWS::EC2::SecurityGroup::Id>\",\n         \"Description\": \"VPC security groups\"\n-    },\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0303e48ca79d8f5a5c49249fe68a8cb98a6c244f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDA3MQ==", "bodyText": "Yes, it is a malformed JSON. I noticed this when adding a unit test case. I wonder if anyone has used that code path before, otherwise CF would have rejected the request (unless their JSON parser is lenient enough to ignore such extra commas).", "url": "https://github.com/hortonworks/cloudbreak/pull/8441#discussion_r447570071", "createdAt": "2020-06-30T10:10:01Z", "author": {"login": "lajosrodek"}, "path": "cloud-aws/src/main/resources/templates/aws-cf-dbstack.ftl", "diffHunk": "@@ -89,7 +89,7 @@\n     \"VPCSecurityGroupsParameter\": {\n         \"Type\": \"List<AWS::EC2::SecurityGroup::Id>\",\n         \"Description\": \"VPC security groups\"\n-    },\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0MTYwOQ=="}, "originalCommit": {"oid": "0303e48ca79d8f5a5c49249fe68a8cb98a6c244f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MTQ1Mg==", "bodyText": "In particular, each test case of CloudFormationTemplateBuilderDBTest starts with the assertion assertThat(JsonUtil.isValid(result)).overridingErrorMessage(\"Invalid JSON: \" + result).isTrue();. This failed due to the above extra comma.", "url": "https://github.com/hortonworks/cloudbreak/pull/8441#discussion_r447571452", "createdAt": "2020-06-30T10:12:39Z", "author": {"login": "lajosrodek"}, "path": "cloud-aws/src/main/resources/templates/aws-cf-dbstack.ftl", "diffHunk": "@@ -89,7 +89,7 @@\n     \"VPCSecurityGroupsParameter\": {\n         \"Type\": \"List<AWS::EC2::SecurityGroup::Id>\",\n         \"Description\": \"VPC security groups\"\n-    },\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0MTYwOQ=="}, "originalCommit": {"oid": "0303e48ca79d8f5a5c49249fe68a8cb98a6c244f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3179, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}