{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzA5MzA4", "number": 7951, "title": "CB-4377: Use cluster proxy HA for FreeIPA connections", "bodyText": "DEPENDS ON: hortonworks/cloudbreak-deployer#657\nUse cluster proxy HA for FreeIPA connections. Configure cluster proxy\nto monitor the FreeIPA health using the login page. A better health\ncheck is being developed, but the login will at least allow cluster\nproxy to determine if FreeIPA is reachable.\nUse a sticky session to maintain the connection to a specific FreeIPA\ninstance.\nWhen provisioning, wait for the HA endpoint provide a good status\nbefore continuing to provision.\nThis was tested manually, by stopping nginx on one node and performing\nFreeIPA management service requests to FreeIPA. Then the first node\nwas brought back up and the same thing was done after bringing the\nsecond node down.\nCloses #CB-4377", "createdAt": "2020-04-30T16:43:55Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7951", "merged": true, "mergeCommit": {"oid": "730dfca45202dc11ffd9658a8dadf440a69b11c3"}, "closed": true, "closedAt": "2020-05-05T15:55:44Z", "author": {"login": "jamisonbennett"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccwlFvgFqTQwMzcyNjEzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABceWIbwAFqTQwNTkyMjQ3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzI2MTM5", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#pullrequestreview-403726139", "createdAt": "2020-04-30T17:23:26Z", "commit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoyMzoyNlrOGOzCLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoyMzoyNlrOGOzCLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2OTM4OA==", "bodyText": "Wouldnt these be the cases we do want to retry on?  Bad Gateway means it still could be starting up.", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#discussion_r418169388", "createdAt": "2020-04-30T17:23:26Z", "author": {"login": "wonderslug"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientExceptionUtil.java", "diffHunk": "@@ -57,8 +57,6 @@\n             HttpStatus.REQUEST_TIMEOUT,\n             HttpStatus.TOO_MANY_REQUESTS,\n             HttpStatus.INTERNAL_SERVER_ERROR,\n-            HttpStatus.BAD_GATEWAY,\n-            HttpStatus.SERVICE_UNAVAILABLE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0ODgxMzE1", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#pullrequestreview-404881315", "createdAt": "2020-05-04T10:50:19Z", "commit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo1MDoxOVrOGP7Q5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTo1OTozMVrOGP9K0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MjgwNg==", "bodyText": "it's already defined inn the app yaml, so I think we should remove all default values from here", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#discussion_r419352806", "createdAt": "2020-05-04T10:50:19Z", "author": {"login": "lacikaaa"}, "path": "cluster-proxy/src/main/java/com/sequenceiq/cloudbreak/clusterproxy/ClusterProxyConfiguration.java", "diffHunk": "@@ -29,6 +29,9 @@\n     @Value(\"${clusterProxy.removeConfigPath:/rpc/removeConfig}\")\n     private String removeConfigPath;\n \n+    @Value(\"${clusterProxy.readConfigPath:/rpc/readConfig}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2NzMwNQ==", "bodyText": "could you move it to a separate method, like createStickyHeaders?", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#discussion_r419367305", "createdAt": "2020-05-04T11:23:05Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java", "diffHunk": "@@ -144,22 +159,39 @@ public FreeIpaClient build(boolean withPing) throws URISyntaxException, IOExcept\n                 LOGGER.debug(\"Ping at target: {}\", target);\n                 HttpHead request = new HttpHead(target);\n                 additionalHeaders.forEach(request::addHeader);\n+                additionalHeadersStickySessionFirstRpc.forEach(request::addHeader);\n                 try (CloseableHttpResponse response = client.execute(request)) {\n                     if (UNAVIALLBE_PING_HTTP_RESPONSES.contains(response.getStatusLine().getStatusCode())) {\n                         throw new HttpException(\"Ping failed with http status code \" + response.getStatusLine().getStatusCode());\n                     }\n+                    if (stickyIdHeader.isPresent()) {\n+                        stickyId = Optional.ofNullable(response.getLastHeader(stickyIdHeader.get())).map(NameValuePair::getValue);\n+                    }\n                 }\n                 LOGGER.debug(\"Freeipa is reachable\");\n             } catch (Exception e) {\n                 throw new FreeIpaHostNotAvailableException(\"Ping failed\", e);\n             }\n         }\n-        String sessionCookie = connect(user, pass, clientConfig.getApiAddress(), port);\n+        Map<String, String> stickyHeaders = new HashMap<>();\n+        if (stickyId.isEmpty()) {\n+            stickyHeaders.putAll(additionalHeadersStickySessionFirstRpc);\n+        } else {\n+            stickyHeaders.putAll(additionalHeadersStickySession);\n+            stickyHeaders.put(stickyIdHeader.get(), stickyId.get());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2NzUxMA==", "bodyText": "could refactor it into a method like buildHeaders?", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#discussion_r419367510", "createdAt": "2020-05-04T11:23:38Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java", "diffHunk": "@@ -144,22 +159,39 @@ public FreeIpaClient build(boolean withPing) throws URISyntaxException, IOExcept\n                 LOGGER.debug(\"Ping at target: {}\", target);\n                 HttpHead request = new HttpHead(target);\n                 additionalHeaders.forEach(request::addHeader);\n+                additionalHeadersStickySessionFirstRpc.forEach(request::addHeader);\n                 try (CloseableHttpResponse response = client.execute(request)) {\n                     if (UNAVIALLBE_PING_HTTP_RESPONSES.contains(response.getStatusLine().getStatusCode())) {\n                         throw new HttpException(\"Ping failed with http status code \" + response.getStatusLine().getStatusCode());\n                     }\n+                    if (stickyIdHeader.isPresent()) {\n+                        stickyId = Optional.ofNullable(response.getLastHeader(stickyIdHeader.get())).map(NameValuePair::getValue);\n+                    }\n                 }\n                 LOGGER.debug(\"Freeipa is reachable\");\n             } catch (Exception e) {\n                 throw new FreeIpaHostNotAvailableException(\"Ping failed\", e);\n             }\n         }\n-        String sessionCookie = connect(user, pass, clientConfig.getApiAddress(), port);\n+        Map<String, String> stickyHeaders = new HashMap<>();\n+        if (stickyId.isEmpty()) {\n+            stickyHeaders.putAll(additionalHeadersStickySessionFirstRpc);\n+        } else {\n+            stickyHeaders.putAll(additionalHeadersStickySession);\n+            stickyHeaders.put(stickyIdHeader.get(), stickyId.get());\n+        }\n+        ConnectReturn connectReturn = connect(user, pass, clientConfig.getApiAddress(), port, stickyHeaders, stickyIdHeader);\n+        String sessionCookie = connectReturn.getCookie();\n+        stickyId = connectReturn.getStickyId();\n \n-        Map<String, String> headers = ImmutableMap.<String, String>builder()\n+        ImmutableMap.Builder<String, String> headersBuidler = ImmutableMap.<String, String>builder()\n                 .put(\"Cookie\", \"ipa_session=\" + sessionCookie)\n                 .putAll(additionalHeaders)\n-                .build();\n+                .putAll(additionalHeadersStickySession);\n+        if (stickyIdHeader.isPresent() && stickyId.isPresent()) {\n+            headersBuidler.put(stickyIdHeader.get(), stickyId.get());\n+        }\n+        Map<String, String> headers = headersBuidler.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2ODE2Ng==", "bodyText": "I know this class is tied to this pretty much, but as it is already pretty big, could you move it out?", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#discussion_r419368166", "createdAt": "2020-05-04T11:25:03Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java", "diffHunk": "@@ -271,4 +308,24 @@ private CloseableHttpResponse execute(HttpPost post, CookieStore cookieStore) th\n     private static HostnameVerifier hostnameVerifier() {\n         return (s, sslSession) -> true;\n     }\n+\n+    private static class ConnectReturn {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3MjY1MA==", "bodyText": "could you move this to a method also?", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#discussion_r419372650", "createdAt": "2020-05-04T11:34:54Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java", "diffHunk": "@@ -144,22 +159,39 @@ public FreeIpaClient build(boolean withPing) throws URISyntaxException, IOExcept\n                 LOGGER.debug(\"Ping at target: {}\", target);\n                 HttpHead request = new HttpHead(target);\n                 additionalHeaders.forEach(request::addHeader);\n+                additionalHeadersStickySessionFirstRpc.forEach(request::addHeader);\n                 try (CloseableHttpResponse response = client.execute(request)) {\n                     if (UNAVIALLBE_PING_HTTP_RESPONSES.contains(response.getStatusLine().getStatusCode())) {\n                         throw new HttpException(\"Ping failed with http status code \" + response.getStatusLine().getStatusCode());\n                     }\n+                    if (stickyIdHeader.isPresent()) {\n+                        stickyId = Optional.ofNullable(response.getLastHeader(stickyIdHeader.get())).map(NameValuePair::getValue);\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3Nzg3Ng==", "bodyText": "could you give this variable a meaningful name?", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#discussion_r419377876", "createdAt": "2020-05-04T11:46:21Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -104,20 +121,17 @@ private FreeIpaClient getFreeIpaClient(Stack stack, boolean withPing, boolean fo\n         }\n     }\n \n-    private Optional<FreeIpaClient> getFreeIpaClient(Stack stack, InstanceMetaData instanceMetaData, boolean withPing, boolean lastInstance) throws Exception {\n-        Optional<FreeIpaClient> client = Optional.empty();\n+    private Optional<FreeIpaClient> getFreeIpaClientForDirectConnect(Stack stack, InstanceMetaData instanceMetaData, boolean withPing, boolean lastInstance)\n+            throws Exception {\n+        Optional<FreeIpaClient> ret = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4MjIzMg==", "bodyText": "could you move this to a variable, it easier to follow that way", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#discussion_r419382232", "createdAt": "2020-05-04T11:55:46Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/ClusterProxyService.java", "diffHunk": "@@ -193,12 +248,10 @@ public String getProxyPath(String crn) {\n         return String.format(\"%s/proxy/%s/%s\", clusterProxyConfiguration.getClusterProxyBasePath(), crn, FREEIPA_SERVICE_NAME);\n     }\n \n-    public String getProxyPath(Stack stack, String serviceName) {\n-        if (ClusterProxyServiceAvailabilityChecker.isDnsBasedServiceNameAvailable(stack)) {\n-            return String.format(\"%s/proxy/%s/%s\", clusterProxyConfiguration.getClusterProxyBasePath(), stack.getResourceCrn(), serviceName);\n-        } else {\n-            return getProxyPath(stack.getResourceCrn());\n-        }\n+    public String getProxyPath(Stack stack, Optional<String> serviceName) {\n+        FreeIpa freeIpa = freeIpaService.findByStack(stack);\n+        return String.format(\"%s/proxy/%s/%s\", clusterProxyConfiguration.getClusterProxyBasePath(), stack.getResourceCrn(),\n+                serviceName.orElse(FreeIpaDomainUtils.getFreeIpaFqdn(freeIpa.getDomain())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NDAxOQ==", "bodyText": "would it have any benefit if these values would be configurable?", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#discussion_r419384019", "createdAt": "2020-05-04T11:59:31Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/ClusterProxyService.java", "diffHunk": "@@ -50,6 +59,24 @@\n \n     private static final String NGINX_PROTOCOL = \"https\";\n \n+    private static final int MAX_ATTEMPTS = 3;\n+\n+    private static final int MAX_FAILURE = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95066c61da58fdec8d49135faf36dd8b48282df2", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/95066c61da58fdec8d49135faf36dd8b48282df2", "committedDate": "2020-04-30T16:38:35Z", "message": "CB-4377: Use cluster proxy HA for FreeIPA connections\n\nUse cluster proxy HA for FreeIPA connections. Configure cluster proxy\nto monitor the FreeIPA health using the login page. A better health\ncheck is being developed, but the login will at least allow cluster\nproxy to determine if FreeIPA is reachable.\n\nUse a sticky session to maintain the connection to a specific FreeIPA\ninstance.\n\nWhen provisioning, wait for the HA endpoint provide a good status\nbefore continuing to provision.\n\nThis was tested manually, by stopping nginx on one node and performing\nFreeIPA management service requests to FreeIPA. Then the first node\nwas brought back up and the same thing was done after bringing the\nsecond node down."}, "afterCommit": {"oid": "e7e5a585c5f38a5a8175be82a6a142f035df35e1", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e7e5a585c5f38a5a8175be82a6a142f035df35e1", "committedDate": "2020-05-04T18:50:50Z", "message": "CB-4377: Use cluster proxy HA for FreeIPA connections\n\nUse cluster proxy HA for FreeIPA connections. Configure cluster proxy\nto monitor the FreeIPA health using the login page. A better health\ncheck is being developed, but the login will at least allow cluster\nproxy to determine if FreeIPA is reachable.\n\nUse a sticky session to maintain the connection to a specific FreeIPA\ninstance.\n\nWhen provisioning, wait for the HA endpoint provide a good status\nbefore continuing to provision.\n\nThis was tested manually, by stopping nginx on one node and performing\nFreeIPA management service requests to FreeIPA. Then the first node\nwas brought back up and the same thing was done after bringing the\nsecond node down."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NTA2Mjcw", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#pullrequestreview-405506270", "createdAt": "2020-05-05T05:50:01Z", "commit": {"oid": "e7e5a585c5f38a5a8175be82a6a142f035df35e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7e5a585c5f38a5a8175be82a6a142f035df35e1", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e7e5a585c5f38a5a8175be82a6a142f035df35e1", "committedDate": "2020-05-04T18:50:50Z", "message": "CB-4377: Use cluster proxy HA for FreeIPA connections\n\nUse cluster proxy HA for FreeIPA connections. Configure cluster proxy\nto monitor the FreeIPA health using the login page. A better health\ncheck is being developed, but the login will at least allow cluster\nproxy to determine if FreeIPA is reachable.\n\nUse a sticky session to maintain the connection to a specific FreeIPA\ninstance.\n\nWhen provisioning, wait for the HA endpoint provide a good status\nbefore continuing to provision.\n\nThis was tested manually, by stopping nginx on one node and performing\nFreeIPA management service requests to FreeIPA. Then the first node\nwas brought back up and the same thing was done after bringing the\nsecond node down."}, "afterCommit": {"oid": "bf35393917520568cd29b77ade84a0571b58b96a", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/bf35393917520568cd29b77ade84a0571b58b96a", "committedDate": "2020-05-05T12:53:34Z", "message": "CB-4377: Use cluster proxy HA for FreeIPA connections\n\nUse cluster proxy HA for FreeIPA connections. Configure cluster proxy\nto monitor the FreeIPA health using the login page. A better health\ncheck is being developed, but the login will at least allow cluster\nproxy to determine if FreeIPA is reachable.\n\nUse a sticky session to maintain the connection to a specific FreeIPA\ninstance.\n\nWhen provisioning, wait for the HA endpoint provide a good status\nbefore continuing to provision.\n\nThis was tested manually, by stopping nginx on one node and performing\nFreeIPA management service requests to FreeIPA. Then the first node\nwas brought back up and the same thing was done after bringing the\nsecond node down."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81c68c0859dadb8bd36846858828d0c8c1a6d444", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/81c68c0859dadb8bd36846858828d0c8c1a6d444", "committedDate": "2020-05-05T13:28:35Z", "message": "CB-4377: Use cluster proxy HA for FreeIPA connections\n\nUse cluster proxy HA for FreeIPA connections. Configure cluster proxy\nto monitor the FreeIPA health using the login page. A better health\ncheck is being developed, but the login will at least allow cluster\nproxy to determine if FreeIPA is reachable.\n\nUse a sticky session to maintain the connection to a specific FreeIPA\ninstance.\n\nWhen provisioning, wait for the HA endpoint provide a good status\nbefore continuing to provision.\n\nThis was tested manually, by stopping nginx on one node and performing\nFreeIPA management service requests to FreeIPA. Then the first node\nwas brought back up and the same thing was done after bringing the\nsecond node down."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf35393917520568cd29b77ade84a0571b58b96a", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/bf35393917520568cd29b77ade84a0571b58b96a", "committedDate": "2020-05-05T12:53:34Z", "message": "CB-4377: Use cluster proxy HA for FreeIPA connections\n\nUse cluster proxy HA for FreeIPA connections. Configure cluster proxy\nto monitor the FreeIPA health using the login page. A better health\ncheck is being developed, but the login will at least allow cluster\nproxy to determine if FreeIPA is reachable.\n\nUse a sticky session to maintain the connection to a specific FreeIPA\ninstance.\n\nWhen provisioning, wait for the HA endpoint provide a good status\nbefore continuing to provision.\n\nThis was tested manually, by stopping nginx on one node and performing\nFreeIPA management service requests to FreeIPA. Then the first node\nwas brought back up and the same thing was done after bringing the\nsecond node down."}, "afterCommit": {"oid": "81c68c0859dadb8bd36846858828d0c8c1a6d444", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/81c68c0859dadb8bd36846858828d0c8c1a6d444", "committedDate": "2020-05-05T13:28:35Z", "message": "CB-4377: Use cluster proxy HA for FreeIPA connections\n\nUse cluster proxy HA for FreeIPA connections. Configure cluster proxy\nto monitor the FreeIPA health using the login page. A better health\ncheck is being developed, but the login will at least allow cluster\nproxy to determine if FreeIPA is reachable.\n\nUse a sticky session to maintain the connection to a specific FreeIPA\ninstance.\n\nWhen provisioning, wait for the HA endpoint provide a good status\nbefore continuing to provision.\n\nThis was tested manually, by stopping nginx on one node and performing\nFreeIPA management service requests to FreeIPA. Then the first node\nwas brought back up and the same thing was done after bringing the\nsecond node down."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTIyNDY0", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#pullrequestreview-405922464", "createdAt": "2020-05-05T15:50:55Z", "commit": {"oid": "81c68c0859dadb8bd36846858828d0c8c1a6d444"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTIyNDc0", "url": "https://github.com/hortonworks/cloudbreak/pull/7951#pullrequestreview-405922474", "createdAt": "2020-05-05T15:50:56Z", "commit": {"oid": "81c68c0859dadb8bd36846858828d0c8c1a6d444"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2150, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}