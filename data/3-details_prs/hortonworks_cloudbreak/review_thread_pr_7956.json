{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMzQ4MDM3", "number": 7956, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzoyNjo1N1rOD4_Lkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo0Njo0MlrOD6LH1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDgyMDAyOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UmsUsersStateProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzoyNjo1N1rOGQAO-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzoyNjo1N1rOGQAO-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNDIzMg==", "bodyText": "I think you could iterate the entryset, so you won't have to make a get() against the map", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#discussion_r419434232", "createdAt": "2020-05-04T13:26:57Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UmsUsersStateProvider.java", "diffHunk": "@@ -64,23 +64,27 @@\n             Map<String, FmsGroup> crnToFmsGroup = grpcUmsClient.listGroups(actorCrn, accountId, List.of(), requestIdOptional).stream()\n                     .collect(Collectors.toMap(Group::getCrn, this::umsGroupToGroup));\n \n-            List<WorkloadAdministrationGroup> wags = grpcUmsClient.listWorkloadAdministrationGroups(INTERNAL_ACTOR_CRN, accountId, requestIdOptional);\n-\n+            Map<WorkloadAdministrationGroup, FmsGroup> wags = grpcUmsClient.listWorkloadAdministrationGroups(INTERNAL_ACTOR_CRN, accountId, requestIdOptional)\n+                    .stream()\n+                    .collect(Collectors.toMap(wag -> wag, wag -> nameToGroup(wag.getWorkloadAdministrationGroupName())));\n             environmentCrns.forEach(environmentCrn -> {\n-                UmsUsersState.Builder umsUsersStateBuilder = new UmsUsersState.Builder();\n+                UmsUsersState.Builder umsUsersStateBuilder = new UmsUsersState.Builder()\n+                        .setWorkloadAdministrationGroups(wags.values());\n+\n                 UsersState.Builder usersStateBuilder = new UsersState.Builder();\n                 Set<String> wagNamesForOtherEnvironments = new HashSet<>();\n \n+\n                 crnToFmsGroup.values().forEach(usersStateBuilder::addGroup);\n \n                 // Only add workload admin groups that belong to this environment.\n                 // At the same time, build a set of workload admin groups that are\n                 // associated with other environments so we can filter these out in\n                 // the per-user group listing in handleUser.\n-                wags.forEach(wag -> {\n+                wags.keySet().forEach(wag -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649f39c81b14ee02f5e59ff7dbea0d4bbf454605"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDg1NzkwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/FmsGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzozNTowNVrOGQAlhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzozNTowNVrOGQAlhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0MDAwNw==", "bodyText": "usually set methods don't return, I think builder pattern use the with naming convention", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#discussion_r419440007", "createdAt": "2020-05-04T13:35:05Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/FmsGroup.java", "diffHunk": "@@ -6,8 +6,9 @@\n \n     private String name;\n \n-    public void setName(String name) {\n+    public FmsGroup setName(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649f39c81b14ee02f5e59ff7dbea0d4bbf454605"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzI1OTYwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/UsersStateDifference.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo0NjowNVrOGR24-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDoyOToyOFrOGSPEGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM3ODI5OA==", "bodyText": "overall things lgtm, but I think this log could be moved into the calculate methods.\nalso isDebugEnabled is overkill I think, as we have debug enabled everywhere, and if we are planning to change that then we will have to revisit our logging anyway", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#discussion_r421378298", "createdAt": "2020-05-07T09:46:05Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/UsersStateDifference.java", "diffHunk": "@@ -5,113 +5,187 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Sets;\n-import com.sequenceiq.freeipa.service.freeipa.user.UserServiceConstants;\n+import com.sequenceiq.freeipa.client.FreeIpaChecks;\n+import com.sequenceiq.freeipa.service.freeipa.user.UserSyncConstants;\n \n public class UsersStateDifference {\n     private static final Logger LOGGER = LoggerFactory.getLogger(UsersStateDifference.class);\n \n-    private Set<FmsGroup> groupsToAdd;\n+    private ImmutableSet<FmsGroup> groupsToAdd;\n \n-    private Set<FmsUser> usersToAdd;\n+    private ImmutableSet<FmsGroup> groupsToRemove;\n \n-    private Set<String> usersToRemove;\n+    private ImmutableSet<FmsUser> usersToAdd;\n \n-    private Multimap<String, String> groupMembershipToAdd;\n+    private ImmutableSet<String> usersToRemove;\n \n-    private Multimap<String, String> groupMembershipToRemove;\n+    private ImmutableMultimap<String, String> groupMembershipToAdd;\n \n-    public UsersStateDifference(Set<FmsGroup> groupsToAdd, Set<FmsUser> usersToAdd, Set<String> usersToRemove,\n-                                Multimap<String, String> groupMembershipToAdd, Multimap<String, String> groupMembershipToRemove) {\n+    private ImmutableMultimap<String, String> groupMembershipToRemove;\n+\n+    public UsersStateDifference(ImmutableSet<FmsGroup> groupsToAdd, ImmutableSet<FmsGroup> groupsToRemove,\n+            ImmutableSet<FmsUser> usersToAdd, ImmutableSet<String> usersToRemove,\n+            ImmutableMultimap<String, String> groupMembershipToAdd, ImmutableMultimap<String, String> groupMembershipToRemove) {\n         this.groupsToAdd = requireNonNull(groupsToAdd);\n+        this.groupsToRemove = requireNonNull(groupsToRemove);\n         this.usersToAdd = requireNonNull(usersToAdd);\n         this.usersToRemove = requireNonNull(usersToRemove);\n         this.groupMembershipToAdd = requireNonNull(groupMembershipToAdd);\n         this.groupMembershipToRemove = requireNonNull(groupMembershipToRemove);\n     }\n \n-    public Set<FmsGroup> getGroupsToAdd() {\n+    public ImmutableSet<FmsGroup> getGroupsToAdd() {\n         return groupsToAdd;\n     }\n \n-    public Set<FmsUser> getUsersToAdd() {\n+    public ImmutableSet<FmsGroup> getGroupsToRemove() {\n+        return groupsToRemove;\n+    }\n+\n+    public ImmutableSet<FmsUser> getUsersToAdd() {\n         return usersToAdd;\n     }\n \n-    public Set<String> getUsersToRemove() {\n+    public ImmutableSet<String> getUsersToRemove() {\n         return usersToRemove;\n     }\n \n-    public Multimap<String, String> getGroupMembershipToAdd() {\n+    public ImmutableMultimap<String, String> getGroupMembershipToAdd() {\n         return groupMembershipToAdd;\n     }\n \n-    public Multimap<String, String> getGroupMembershipToRemove() {\n+    public ImmutableMultimap<String, String> getGroupMembershipToRemove() {\n         return groupMembershipToRemove;\n     }\n \n     @Override\n     public String toString() {\n         return \"UsersStateDifference{\"\n                 + \"groupsToAdd=\" + groupsToAdd\n+                + \", groupsToRemove=\" + groupsToRemove\n                 + \", usersToAdd=\" + usersToAdd\n                 + \", usersToRemove=\" + usersToRemove\n                 + \", groupMembershipToAdd=\" + groupMembershipToAdd\n                 + \", groupMembershipToRemove=\" + groupMembershipToRemove\n                 + '}';\n     }\n \n-    public static UsersStateDifference fromUmsAndIpaUsersStates(UsersState umsState, UsersState ipaState) {\n-        Multimap<String, String> umsGroupMembership = umsState.getGroupMembership();\n-        Multimap<String, String> ipaGroupMembership = ipaState.getGroupMembership();\n-\n-        Multimap<String, String> groupMembershipToAdd = HashMultimap.create();\n-        umsGroupMembership.forEach((group, user) -> {\n-            if (!ipaGroupMembership.containsEntry(group, user)) {\n-                LOGGER.debug(\"adding user : {} to group : {}\", user, group);\n-                groupMembershipToAdd.put(group, user);\n-            }\n-        });\n-        LOGGER.info(\"groupMembershipToAdd size= {}\", groupMembershipToAdd.size());\n-\n-        Multimap<String, String> groupMembershipToRemove = HashMultimap.create();\n-        ipaGroupMembership.forEach((group, user) -> {\n-            if (!umsGroupMembership.containsEntry(group, user)) {\n-                LOGGER.debug(\"removing user : {} to group : {}\", user, group);\n-                groupMembershipToRemove.put(group, user);\n-            }\n-        });\n-\n-        LOGGER.info(\"groupMembershipToRemove size= {}\", groupMembershipToRemove.size());\n-\n-        Set<String> usersToRemove =\n-            getUsersToBeRemoved(\n-                umsState.getGroupMembership().get(UserServiceConstants.CDP_USERSYNC_INTERNAL_GROUP),\n-                ipaState.getGroupMembership().get(UserServiceConstants.CDP_USERSYNC_INTERNAL_GROUP));\n-        LOGGER.info(\"usersToRemove size= {}\", usersToRemove.size());\n+    public static UsersStateDifference fromUmsAndIpaUsersStates(UmsUsersState umsState, UsersState ipaState) {\n+        ImmutableSet<FmsUser> usersToAdd = calculateUsersToAdd(umsState, ipaState);\n+        LOGGER.info(\"usersToAdd size = {}\", usersToAdd.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"adding users {}\", usersToAdd.stream().map(FmsUser::getName).collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableSet<String> usersToRemove = calculateUsersToRemove(umsState, ipaState);\n+        LOGGER.info(\"usersToRemove size = {}\", usersToRemove.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"removing users {}\", usersToRemove.stream().collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableSet<FmsGroup> groupsToAdd = calculateGroupsToAdd(umsState, ipaState);\n+        LOGGER.info(\"groupsToAdd size = {}\", groupsToAdd.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"adding groups {}\", groupsToAdd.stream().map(FmsGroup::getName).collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableSet<FmsGroup> groupsToRemove = calculateGroupsToRemove(umsState, ipaState);\n+        LOGGER.info(\"groupsToRemove size = {}\", groupsToRemove.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"removing groups {}\", groupsToRemove.stream().map(FmsGroup::getName).collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableMultimap<String, String> groupMembershipToAdd = calculateGroupMembershipToAdd(umsState, ipaState);\n+        LOGGER.info(\"groupMembershipToAdd size = {}\", groupMembershipToAdd.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"adding group memberships {}\", groupMembershipToAdd.asMap());\n+        }\n+\n+        ImmutableMultimap<String, String> groupMembershipToRemove = calculateGroupMembershipToRemove(umsState, ipaState);\n+        LOGGER.info(\"groupMembershipToRemove size = {}\", groupMembershipToRemove.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"removing group memberships {}\", groupMembershipToRemove.asMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca44905acecff893ad76a2b6f033fa0d1ae6233"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3NDM2Mg==", "bodyText": "done", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#discussion_r421774362", "createdAt": "2020-05-07T20:29:28Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/UsersStateDifference.java", "diffHunk": "@@ -5,113 +5,187 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Sets;\n-import com.sequenceiq.freeipa.service.freeipa.user.UserServiceConstants;\n+import com.sequenceiq.freeipa.client.FreeIpaChecks;\n+import com.sequenceiq.freeipa.service.freeipa.user.UserSyncConstants;\n \n public class UsersStateDifference {\n     private static final Logger LOGGER = LoggerFactory.getLogger(UsersStateDifference.class);\n \n-    private Set<FmsGroup> groupsToAdd;\n+    private ImmutableSet<FmsGroup> groupsToAdd;\n \n-    private Set<FmsUser> usersToAdd;\n+    private ImmutableSet<FmsGroup> groupsToRemove;\n \n-    private Set<String> usersToRemove;\n+    private ImmutableSet<FmsUser> usersToAdd;\n \n-    private Multimap<String, String> groupMembershipToAdd;\n+    private ImmutableSet<String> usersToRemove;\n \n-    private Multimap<String, String> groupMembershipToRemove;\n+    private ImmutableMultimap<String, String> groupMembershipToAdd;\n \n-    public UsersStateDifference(Set<FmsGroup> groupsToAdd, Set<FmsUser> usersToAdd, Set<String> usersToRemove,\n-                                Multimap<String, String> groupMembershipToAdd, Multimap<String, String> groupMembershipToRemove) {\n+    private ImmutableMultimap<String, String> groupMembershipToRemove;\n+\n+    public UsersStateDifference(ImmutableSet<FmsGroup> groupsToAdd, ImmutableSet<FmsGroup> groupsToRemove,\n+            ImmutableSet<FmsUser> usersToAdd, ImmutableSet<String> usersToRemove,\n+            ImmutableMultimap<String, String> groupMembershipToAdd, ImmutableMultimap<String, String> groupMembershipToRemove) {\n         this.groupsToAdd = requireNonNull(groupsToAdd);\n+        this.groupsToRemove = requireNonNull(groupsToRemove);\n         this.usersToAdd = requireNonNull(usersToAdd);\n         this.usersToRemove = requireNonNull(usersToRemove);\n         this.groupMembershipToAdd = requireNonNull(groupMembershipToAdd);\n         this.groupMembershipToRemove = requireNonNull(groupMembershipToRemove);\n     }\n \n-    public Set<FmsGroup> getGroupsToAdd() {\n+    public ImmutableSet<FmsGroup> getGroupsToAdd() {\n         return groupsToAdd;\n     }\n \n-    public Set<FmsUser> getUsersToAdd() {\n+    public ImmutableSet<FmsGroup> getGroupsToRemove() {\n+        return groupsToRemove;\n+    }\n+\n+    public ImmutableSet<FmsUser> getUsersToAdd() {\n         return usersToAdd;\n     }\n \n-    public Set<String> getUsersToRemove() {\n+    public ImmutableSet<String> getUsersToRemove() {\n         return usersToRemove;\n     }\n \n-    public Multimap<String, String> getGroupMembershipToAdd() {\n+    public ImmutableMultimap<String, String> getGroupMembershipToAdd() {\n         return groupMembershipToAdd;\n     }\n \n-    public Multimap<String, String> getGroupMembershipToRemove() {\n+    public ImmutableMultimap<String, String> getGroupMembershipToRemove() {\n         return groupMembershipToRemove;\n     }\n \n     @Override\n     public String toString() {\n         return \"UsersStateDifference{\"\n                 + \"groupsToAdd=\" + groupsToAdd\n+                + \", groupsToRemove=\" + groupsToRemove\n                 + \", usersToAdd=\" + usersToAdd\n                 + \", usersToRemove=\" + usersToRemove\n                 + \", groupMembershipToAdd=\" + groupMembershipToAdd\n                 + \", groupMembershipToRemove=\" + groupMembershipToRemove\n                 + '}';\n     }\n \n-    public static UsersStateDifference fromUmsAndIpaUsersStates(UsersState umsState, UsersState ipaState) {\n-        Multimap<String, String> umsGroupMembership = umsState.getGroupMembership();\n-        Multimap<String, String> ipaGroupMembership = ipaState.getGroupMembership();\n-\n-        Multimap<String, String> groupMembershipToAdd = HashMultimap.create();\n-        umsGroupMembership.forEach((group, user) -> {\n-            if (!ipaGroupMembership.containsEntry(group, user)) {\n-                LOGGER.debug(\"adding user : {} to group : {}\", user, group);\n-                groupMembershipToAdd.put(group, user);\n-            }\n-        });\n-        LOGGER.info(\"groupMembershipToAdd size= {}\", groupMembershipToAdd.size());\n-\n-        Multimap<String, String> groupMembershipToRemove = HashMultimap.create();\n-        ipaGroupMembership.forEach((group, user) -> {\n-            if (!umsGroupMembership.containsEntry(group, user)) {\n-                LOGGER.debug(\"removing user : {} to group : {}\", user, group);\n-                groupMembershipToRemove.put(group, user);\n-            }\n-        });\n-\n-        LOGGER.info(\"groupMembershipToRemove size= {}\", groupMembershipToRemove.size());\n-\n-        Set<String> usersToRemove =\n-            getUsersToBeRemoved(\n-                umsState.getGroupMembership().get(UserServiceConstants.CDP_USERSYNC_INTERNAL_GROUP),\n-                ipaState.getGroupMembership().get(UserServiceConstants.CDP_USERSYNC_INTERNAL_GROUP));\n-        LOGGER.info(\"usersToRemove size= {}\", usersToRemove.size());\n+    public static UsersStateDifference fromUmsAndIpaUsersStates(UmsUsersState umsState, UsersState ipaState) {\n+        ImmutableSet<FmsUser> usersToAdd = calculateUsersToAdd(umsState, ipaState);\n+        LOGGER.info(\"usersToAdd size = {}\", usersToAdd.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"adding users {}\", usersToAdd.stream().map(FmsUser::getName).collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableSet<String> usersToRemove = calculateUsersToRemove(umsState, ipaState);\n+        LOGGER.info(\"usersToRemove size = {}\", usersToRemove.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"removing users {}\", usersToRemove.stream().collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableSet<FmsGroup> groupsToAdd = calculateGroupsToAdd(umsState, ipaState);\n+        LOGGER.info(\"groupsToAdd size = {}\", groupsToAdd.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"adding groups {}\", groupsToAdd.stream().map(FmsGroup::getName).collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableSet<FmsGroup> groupsToRemove = calculateGroupsToRemove(umsState, ipaState);\n+        LOGGER.info(\"groupsToRemove size = {}\", groupsToRemove.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"removing groups {}\", groupsToRemove.stream().map(FmsGroup::getName).collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableMultimap<String, String> groupMembershipToAdd = calculateGroupMembershipToAdd(umsState, ipaState);\n+        LOGGER.info(\"groupMembershipToAdd size = {}\", groupMembershipToAdd.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"adding group memberships {}\", groupMembershipToAdd.asMap());\n+        }\n+\n+        ImmutableMultimap<String, String> groupMembershipToRemove = calculateGroupMembershipToRemove(umsState, ipaState);\n+        LOGGER.info(\"groupMembershipToRemove size = {}\", groupMembershipToRemove.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"removing group memberships {}\", groupMembershipToRemove.asMap());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM3ODI5OA=="}, "originalCommit": {"oid": "2ca44905acecff893ad76a2b6f033fa0d1ae6233"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzI2MjI4OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/UsersStateDifference.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo0Njo0MlrOGR26pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo0Njo0MlrOGR26pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM3ODcyNg==", "bodyText": "this stream is not necessary I think", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#discussion_r421378726", "createdAt": "2020-05-07T09:46:42Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/UsersStateDifference.java", "diffHunk": "@@ -5,113 +5,187 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Sets;\n-import com.sequenceiq.freeipa.service.freeipa.user.UserServiceConstants;\n+import com.sequenceiq.freeipa.client.FreeIpaChecks;\n+import com.sequenceiq.freeipa.service.freeipa.user.UserSyncConstants;\n \n public class UsersStateDifference {\n     private static final Logger LOGGER = LoggerFactory.getLogger(UsersStateDifference.class);\n \n-    private Set<FmsGroup> groupsToAdd;\n+    private ImmutableSet<FmsGroup> groupsToAdd;\n \n-    private Set<FmsUser> usersToAdd;\n+    private ImmutableSet<FmsGroup> groupsToRemove;\n \n-    private Set<String> usersToRemove;\n+    private ImmutableSet<FmsUser> usersToAdd;\n \n-    private Multimap<String, String> groupMembershipToAdd;\n+    private ImmutableSet<String> usersToRemove;\n \n-    private Multimap<String, String> groupMembershipToRemove;\n+    private ImmutableMultimap<String, String> groupMembershipToAdd;\n \n-    public UsersStateDifference(Set<FmsGroup> groupsToAdd, Set<FmsUser> usersToAdd, Set<String> usersToRemove,\n-                                Multimap<String, String> groupMembershipToAdd, Multimap<String, String> groupMembershipToRemove) {\n+    private ImmutableMultimap<String, String> groupMembershipToRemove;\n+\n+    public UsersStateDifference(ImmutableSet<FmsGroup> groupsToAdd, ImmutableSet<FmsGroup> groupsToRemove,\n+            ImmutableSet<FmsUser> usersToAdd, ImmutableSet<String> usersToRemove,\n+            ImmutableMultimap<String, String> groupMembershipToAdd, ImmutableMultimap<String, String> groupMembershipToRemove) {\n         this.groupsToAdd = requireNonNull(groupsToAdd);\n+        this.groupsToRemove = requireNonNull(groupsToRemove);\n         this.usersToAdd = requireNonNull(usersToAdd);\n         this.usersToRemove = requireNonNull(usersToRemove);\n         this.groupMembershipToAdd = requireNonNull(groupMembershipToAdd);\n         this.groupMembershipToRemove = requireNonNull(groupMembershipToRemove);\n     }\n \n-    public Set<FmsGroup> getGroupsToAdd() {\n+    public ImmutableSet<FmsGroup> getGroupsToAdd() {\n         return groupsToAdd;\n     }\n \n-    public Set<FmsUser> getUsersToAdd() {\n+    public ImmutableSet<FmsGroup> getGroupsToRemove() {\n+        return groupsToRemove;\n+    }\n+\n+    public ImmutableSet<FmsUser> getUsersToAdd() {\n         return usersToAdd;\n     }\n \n-    public Set<String> getUsersToRemove() {\n+    public ImmutableSet<String> getUsersToRemove() {\n         return usersToRemove;\n     }\n \n-    public Multimap<String, String> getGroupMembershipToAdd() {\n+    public ImmutableMultimap<String, String> getGroupMembershipToAdd() {\n         return groupMembershipToAdd;\n     }\n \n-    public Multimap<String, String> getGroupMembershipToRemove() {\n+    public ImmutableMultimap<String, String> getGroupMembershipToRemove() {\n         return groupMembershipToRemove;\n     }\n \n     @Override\n     public String toString() {\n         return \"UsersStateDifference{\"\n                 + \"groupsToAdd=\" + groupsToAdd\n+                + \", groupsToRemove=\" + groupsToRemove\n                 + \", usersToAdd=\" + usersToAdd\n                 + \", usersToRemove=\" + usersToRemove\n                 + \", groupMembershipToAdd=\" + groupMembershipToAdd\n                 + \", groupMembershipToRemove=\" + groupMembershipToRemove\n                 + '}';\n     }\n \n-    public static UsersStateDifference fromUmsAndIpaUsersStates(UsersState umsState, UsersState ipaState) {\n-        Multimap<String, String> umsGroupMembership = umsState.getGroupMembership();\n-        Multimap<String, String> ipaGroupMembership = ipaState.getGroupMembership();\n-\n-        Multimap<String, String> groupMembershipToAdd = HashMultimap.create();\n-        umsGroupMembership.forEach((group, user) -> {\n-            if (!ipaGroupMembership.containsEntry(group, user)) {\n-                LOGGER.debug(\"adding user : {} to group : {}\", user, group);\n-                groupMembershipToAdd.put(group, user);\n-            }\n-        });\n-        LOGGER.info(\"groupMembershipToAdd size= {}\", groupMembershipToAdd.size());\n-\n-        Multimap<String, String> groupMembershipToRemove = HashMultimap.create();\n-        ipaGroupMembership.forEach((group, user) -> {\n-            if (!umsGroupMembership.containsEntry(group, user)) {\n-                LOGGER.debug(\"removing user : {} to group : {}\", user, group);\n-                groupMembershipToRemove.put(group, user);\n-            }\n-        });\n-\n-        LOGGER.info(\"groupMembershipToRemove size= {}\", groupMembershipToRemove.size());\n-\n-        Set<String> usersToRemove =\n-            getUsersToBeRemoved(\n-                umsState.getGroupMembership().get(UserServiceConstants.CDP_USERSYNC_INTERNAL_GROUP),\n-                ipaState.getGroupMembership().get(UserServiceConstants.CDP_USERSYNC_INTERNAL_GROUP));\n-        LOGGER.info(\"usersToRemove size= {}\", usersToRemove.size());\n+    public static UsersStateDifference fromUmsAndIpaUsersStates(UmsUsersState umsState, UsersState ipaState) {\n+        ImmutableSet<FmsUser> usersToAdd = calculateUsersToAdd(umsState, ipaState);\n+        LOGGER.info(\"usersToAdd size = {}\", usersToAdd.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"adding users {}\", usersToAdd.stream().map(FmsUser::getName).collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableSet<String> usersToRemove = calculateUsersToRemove(umsState, ipaState);\n+        LOGGER.info(\"usersToRemove size = {}\", usersToRemove.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"removing users {}\", usersToRemove.stream().collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca44905acecff893ad76a2b6f033fa0d1ae6233"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2416, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}