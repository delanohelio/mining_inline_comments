{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5ODE5Njk1", "number": 9046, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoxNzo0NlrOEm7b9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoyNToxMFrOEp38sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjU1MTU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/StackCreatorService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoxNzo0NlrOHXPC3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoxNzo0NlrOHXPC3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyNTc4OQ==", "bodyText": "is it need?", "url": "https://github.com/hortonworks/cloudbreak/pull/9046#discussion_r494125789", "createdAt": "2020-09-24T08:17:46Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/StackCreatorService.java", "diffHunk": "@@ -406,15 +360,14 @@ private void createClusterIfNeed(User user, StackV4Request stackRequest, Stack s\n     }\n \n     private void ensureStackDoesNotExists(String stackName, Workspace workspace) {\n-        try {\n-            stackService.getIdByNameInWorkspace(stackName, workspace.getId());\n-        } catch (NotFoundException e) {\n-            return;\n+        Optional<StackView> byName = stackViewService.findByName(stackName, workspace.getId());\n+        if (byName.isPresent()) {\n+            throw new BadRequestException(\"Cluster already exists: \" + stackName);\n         }\n-        throw new BadRequestException(\"Cluster already exists: \" + stackName);\n     }\n \n     private Blueprint determineBlueprint(StackV4Request stackRequest, Workspace workspace) {\n+        //blueprintService.updateDefaultBlueprintCollection(workspace.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c7cb06003fd86190f5383ba0ccf8202e4c96d03"}, "originalPosition": 436}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzAwMDc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/StackCreatorService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToxMjo1NFrOHYuquA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToxMjo1NFrOHYuquA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MjQ3Mg==", "bodyText": "what kind of grpc call?", "url": "https://github.com/hortonworks/cloudbreak/pull/9046#discussion_r495692472", "createdAt": "2020-09-28T05:12:54Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/StackCreatorService.java", "diffHunk": "@@ -301,23 +273,12 @@ public StackV4Response createStack(User user, Workspace workspace, StackV4Reques\n     }\n \n     private void assignOwnerRoleOnDataHub(User user, StackV4Request stackRequest, Stack newStack) {\n+        // TODO grpc call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04365b2d399769cc8f16fb088b52e4ea0d4610e"}, "originalPosition": 381}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzAwMzk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/template/InstanceTemplateValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToxNDo1OVrOHYusjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoyMzoyOFrOHbz0uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5Mjk0MQ==", "bodyText": "Maybe this validation runs in the flow", "url": "https://github.com/hortonworks/cloudbreak/pull/9046#discussion_r495692941", "createdAt": "2020-09-28T05:14:59Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/template/InstanceTemplateValidator.java", "diffHunk": "@@ -4,23 +4,22 @@\n \n import org.springframework.stereotype.Component;\n \n-import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.instancegroup.template.InstanceTemplateV4Request;\n+import com.sequenceiq.cloudbreak.domain.Template;\n import com.sequenceiq.cloudbreak.validation.ValidationResult;\n import com.sequenceiq.cloudbreak.validation.ValidationResult.ValidationResultBuilder;\n import com.sequenceiq.cloudbreak.validation.Validator;\n \n @Component\n-public class InstanceTemplateV4RequestValidator implements Validator<InstanceTemplateV4Request> {\n+public class InstanceTemplateValidator implements Validator<Template> {\n \n     @Override\n-    public ValidationResult validate(InstanceTemplateV4Request subject) {\n+    public ValidationResult validate(Template subject) {\n         ValidationResultBuilder resultBuilder = ValidationResult.builder();\n         if (Objects.isNull(subject)) {\n             resultBuilder.error(\"Template request cannot be null in the instance group request.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04365b2d399769cc8f16fb088b52e4ea0d4610e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNDk0NA==", "bodyText": "there is no provider related validation", "url": "https://github.com/hortonworks/cloudbreak/pull/9046#discussion_r495714944", "createdAt": "2020-09-28T06:31:09Z", "author": {"login": "doktoric"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/template/InstanceTemplateValidator.java", "diffHunk": "@@ -4,23 +4,22 @@\n \n import org.springframework.stereotype.Component;\n \n-import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.instancegroup.template.InstanceTemplateV4Request;\n+import com.sequenceiq.cloudbreak.domain.Template;\n import com.sequenceiq.cloudbreak.validation.ValidationResult;\n import com.sequenceiq.cloudbreak.validation.ValidationResult.ValidationResultBuilder;\n import com.sequenceiq.cloudbreak.validation.Validator;\n \n @Component\n-public class InstanceTemplateV4RequestValidator implements Validator<InstanceTemplateV4Request> {\n+public class InstanceTemplateValidator implements Validator<Template> {\n \n     @Override\n-    public ValidationResult validate(InstanceTemplateV4Request subject) {\n+    public ValidationResult validate(Template subject) {\n         ValidationResultBuilder resultBuilder = ValidationResult.builder();\n         if (Objects.isNull(subject)) {\n             resultBuilder.error(\"Template request cannot be null in the instance group request.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5Mjk0MQ=="}, "originalCommit": {"oid": "c04365b2d399769cc8f16fb088b52e4ea0d4610e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMjY4MA==", "bodyText": "I mean request in the message", "url": "https://github.com/hortonworks/cloudbreak/pull/9046#discussion_r498922680", "createdAt": "2020-10-02T16:23:28Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/template/InstanceTemplateValidator.java", "diffHunk": "@@ -4,23 +4,22 @@\n \n import org.springframework.stereotype.Component;\n \n-import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.instancegroup.template.InstanceTemplateV4Request;\n+import com.sequenceiq.cloudbreak.domain.Template;\n import com.sequenceiq.cloudbreak.validation.ValidationResult;\n import com.sequenceiq.cloudbreak.validation.ValidationResult.ValidationResultBuilder;\n import com.sequenceiq.cloudbreak.validation.Validator;\n \n @Component\n-public class InstanceTemplateV4RequestValidator implements Validator<InstanceTemplateV4Request> {\n+public class InstanceTemplateValidator implements Validator<Template> {\n \n     @Override\n-    public ValidationResult validate(InstanceTemplateV4Request subject) {\n+    public ValidationResult validate(Template subject) {\n         ValidationResultBuilder resultBuilder = ValidationResult.builder();\n         if (Objects.isNull(subject)) {\n             resultBuilder.error(\"Template request cannot be null in the instance group request.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5Mjk0MQ=="}, "originalCommit": {"oid": "c04365b2d399769cc8f16fb088b52e4ea0d4610e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzAwNjM3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/sequenceiq/cloudbreak/controller/validation/stack/StackV4RequestValidatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToxNjoyN1rOHYut5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToxNjoyN1rOHYut5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MzI4Ng==", "bodyText": "Please rename the test class, and check all the test names in the PR", "url": "https://github.com/hortonworks/cloudbreak/pull/9046#discussion_r495693286", "createdAt": "2020-09-28T05:16:27Z", "author": {"login": "topolyai5"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/controller/validation/stack/StackV4RequestValidatorTest.java", "diffHunk": "@@ -14,25 +15,21 @@\n import org.mockito.junit.MockitoJUnitRunner;\n import org.slf4j.LoggerFactory;\n \n-import com.sequenceiq.cloudbreak.api.endpoint.v4.database.base.DatabaseType;\n-import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.StackV4Request;\n-import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.cluster.ClusterV4Request;\n-import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.environment.placement.PlacementSettingsV4Request;\n-import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.instancegroup.InstanceGroupV4Request;\n-import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.instancegroup.template.InstanceTemplateV4Request;\n-import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.instancegroup.template.volume.VolumeV4Request;\n+import com.google.common.collect.Sets;\n import com.sequenceiq.cloudbreak.cloud.model.CloudRegions;\n-import com.sequenceiq.cloudbreak.controller.validation.template.InstanceTemplateV4RequestValidator;\n+import com.sequenceiq.cloudbreak.controller.validation.template.InstanceTemplateValidator;\n import com.sequenceiq.cloudbreak.domain.Blueprint;\n-import com.sequenceiq.cloudbreak.domain.RDSConfig;\n+import com.sequenceiq.cloudbreak.domain.Template;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.domain.stack.instance.InstanceGroup;\n import com.sequenceiq.cloudbreak.dto.credential.Credential;\n import com.sequenceiq.cloudbreak.ldap.LdapConfigService;\n-import com.sequenceiq.cloudbreak.structuredevent.CloudbreakRestRequestThreadLocalService;\n import com.sequenceiq.cloudbreak.service.blueprint.BlueprintService;\n import com.sequenceiq.cloudbreak.service.environment.EnvironmentClientService;\n import com.sequenceiq.cloudbreak.service.rdsconfig.RdsConfigService;\n+import com.sequenceiq.cloudbreak.structuredevent.CloudbreakRestRequestThreadLocalService;\n import com.sequenceiq.cloudbreak.validation.ValidationResult;\n-import com.sequenceiq.cloudbreak.validation.ValidationResult.State;\n \n @RunWith(MockitoJUnitRunner.class)\n public class StackV4RequestValidatorTest extends StackRequestValidatorTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04365b2d399769cc8f16fb088b52e4ea0d4610e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzAwODA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/validate/cloud/CloudConfigValidationActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToxNzozMVrOHYuu4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToxNzozMVrOHYuu4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MzUzOQ==", "bodyText": "please rename the field", "url": "https://github.com/hortonworks/cloudbreak/pull/9046#discussion_r495693539", "createdAt": "2020-09-28T05:17:31Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/validate/cloud/CloudConfigValidationActions.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package com.sequenceiq.cloudbreak.core.flow2.validate.cloud;\n+\n+import static com.sequenceiq.cloudbreak.util.Benchmark.measure;\n+import static com.sequenceiq.common.api.type.CdpResourceType.fromStackType;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.statemachine.StateContext;\n+import org.springframework.statemachine.action.Action;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType;\n+import com.sequenceiq.cloudbreak.cloud.event.validation.ParametersValidationRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.controller.validation.ParametersValidator;\n+import com.sequenceiq.cloudbreak.controller.validation.datalake.DataLakeValidator;\n+import com.sequenceiq.cloudbreak.controller.validation.environment.ClusterCreationEnvironmentValidator;\n+import com.sequenceiq.cloudbreak.controller.validation.stack.StackValidator;\n+import com.sequenceiq.cloudbreak.controller.validation.template.TemplateValidator;\n+import com.sequenceiq.cloudbreak.converter.spi.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.StackUpdaterService;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.AbstractStackFailureAction;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.StackContext;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.StackFailureContext;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.provision.action.AbstractStackCreationAction;\n+import com.sequenceiq.cloudbreak.core.flow2.validate.cloud.config.CloudConfigValidationEvent;\n+import com.sequenceiq.cloudbreak.core.flow2.validate.cloud.config.CloudConfigValidationState;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.stack.instance.InstanceGroup;\n+import com.sequenceiq.cloudbreak.domain.view.StackView;\n+import com.sequenceiq.cloudbreak.dto.credential.Credential;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackFailureEvent;\n+import com.sequenceiq.cloudbreak.service.environment.EnvironmentClientService;\n+import com.sequenceiq.cloudbreak.service.environment.credential.CredentialConverter;\n+import com.sequenceiq.cloudbreak.service.stack.StackViewService;\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.api.v1.environment.model.response.DetailedEnvironmentResponse;\n+import com.sequenceiq.flow.core.Flow;\n+import com.sequenceiq.flow.core.FlowParameters;\n+\n+@Configuration\n+public class CloudConfigValidationActions {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CloudConfigValidationActions.class);\n+\n+    @Inject\n+    private StackUpdaterService stackUpdaterService;\n+\n+    @Inject\n+    private EnvironmentClientService environmentClientService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    @Inject\n+    private CredentialConverter credentialConverter;\n+\n+    @Inject\n+    private StackViewService stackViewService;\n+\n+    @Inject\n+    private ParametersValidator parametersValidator;\n+\n+    @Inject\n+    private StackValidator stackRequestValidator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04365b2d399769cc8f16fb088b52e4ea0d4610e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzAxODE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/blueprint/BlueprintService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToyMzo0OFrOHYu0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToyMzo0OFrOHYu0qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5NTAxOA==", "bodyText": "please remove the slash or delete the code", "url": "https://github.com/hortonworks/cloudbreak/pull/9046#discussion_r495695018", "createdAt": "2020-09-28T05:23:48Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/blueprint/BlueprintService.java", "diffHunk": "@@ -206,7 +206,7 @@ public ScaleRecommendation getScaleRecommendation(Long workspaceId, String bluep\n     }\n \n     public Set<Blueprint> getAllAvailableInWorkspace(Workspace workspace) {\n-        updateDefaultBlueprintCollection(workspace);\n+        //updateDefaultBlueprintCollection(workspace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04365b2d399769cc8f16fb088b52e4ea0d4610e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzAyNTY2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/sequenceiq/cloudbreak/controller/StackCreatorServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToyNzo0NlrOHYu40Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNToyNzo0NlrOHYu40Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5NjA4MQ==", "bodyText": "remove comment section", "url": "https://github.com/hortonworks/cloudbreak/pull/9046#discussion_r495696081", "createdAt": "2020-09-28T05:27:46Z", "author": {"login": "topolyai5"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/controller/StackCreatorServiceTest.java", "diffHunk": "@@ -201,8 +183,8 @@ public void shouldThrowBadRequestWhenRecipeIsMissing() {\n         instanceGroupV4Request.setRecipeNames(Set.of(RECIPE_NAME));\n         stackRequest.setInstanceGroups(List.of(instanceGroupV4Request));\n \n-        when(validationResult.getState()).thenReturn(State.VALID);\n-        when(stackRequestValidator.validate(stackRequest)).thenReturn(validationResult);\n+        //when(validationResult.getState()).thenReturn(State.VALID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04365b2d399769cc8f16fb088b52e4ea0d4610e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQzNzI4OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/stack/CreateFreeIpaRequestToStackConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoyNToxMFrOHbz33Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoyNToxMFrOHbz33Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMzQ4NQ==", "bodyText": "it will conflict with my change", "url": "https://github.com/hortonworks/cloudbreak/pull/9046#discussion_r498923485", "createdAt": "2020-10-02T16:25:10Z", "author": {"login": "topolyai5"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/stack/CreateFreeIpaRequestToStackConverter.java", "diffHunk": "@@ -218,7 +218,7 @@ private Json getTags(CreateFreeIpaRequest source, Stack stack, String userCrn, S\n             // userdefined tags comming from environment service\n             return new Json(new StackTags(userDefined, new HashMap<>(), getDefaultTags(stack, userCrn, userName)));\n         } catch (Exception ignored) {\n-            throw new BadRequestException(\"Failed to convert dynamic tags.\");\n+            throw new BadRequestException(\"Failed to convert dynamic tags.\" + ignored.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e006cfc44e6af90c7cdbb42070ad17c190175495"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2181, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}