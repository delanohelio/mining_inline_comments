{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1ODYwMjEz", "number": 9496, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDowODo1N1rOE8ofkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDowODo1N1rOE8ofkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDEzNDU2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/start/OneFreeIpaReachableAttempt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDowODo1N1rOH43tSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyNDoyN1rOH444vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM5NTAxOQ==", "bodyText": "You can check this in the constructor or in the factory.", "url": "https://github.com/hortonworks/cloudbreak/pull/9496#discussion_r529395019", "createdAt": "2020-11-24T10:08:57Z", "author": {"login": "topolyai5"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/start/OneFreeIpaReachableAttempt.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.sequenceiq.freeipa.flow.stack.start;\n+\n+import static com.sequenceiq.cloudbreak.util.Benchmark.checkedMeasure;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.dyngr.core.AttemptMaker;\n+import com.dyngr.core.AttemptResult;\n+import com.dyngr.core.AttemptResults;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.cloud.store.InMemoryStateStore;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceMetaData;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.FreeIpaHealthDetailsService;\n+\n+public class OneFreeIpaReachableAttempt implements AttemptMaker<Void> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(OneFreeIpaReachableAttempt.class);\n+\n+    private final FreeIpaHealthDetailsService freeIpaHealthDetailsService;\n+\n+    private final Stack stack;\n+\n+    private final Set<InstanceMetaData> instanceMetaDataSet;\n+\n+    public OneFreeIpaReachableAttempt(FreeIpaHealthDetailsService freeIpaHealthDetailsService, Stack stack, Set<InstanceMetaData> instanceMetaDataSet) {\n+        this.freeIpaHealthDetailsService = freeIpaHealthDetailsService;\n+        this.stack = stack;\n+        this.instanceMetaDataSet = instanceMetaDataSet;\n+    }\n+\n+    @Override\n+    public AttemptResult<Void> process() {\n+        if (stack == null || instanceMetaDataSet == null || instanceMetaDataSet.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83f2b6343055340df03da8b884715d6727e6d1cb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQxNDMzMg==", "bodyText": "OK, thanks", "url": "https://github.com/hortonworks/cloudbreak/pull/9496#discussion_r529414332", "createdAt": "2020-11-24T10:24:27Z", "author": {"login": "afarsang"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/start/OneFreeIpaReachableAttempt.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.sequenceiq.freeipa.flow.stack.start;\n+\n+import static com.sequenceiq.cloudbreak.util.Benchmark.checkedMeasure;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.dyngr.core.AttemptMaker;\n+import com.dyngr.core.AttemptResult;\n+import com.dyngr.core.AttemptResults;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.cloud.store.InMemoryStateStore;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+import com.sequenceiq.freeipa.entity.InstanceMetaData;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.FreeIpaHealthDetailsService;\n+\n+public class OneFreeIpaReachableAttempt implements AttemptMaker<Void> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(OneFreeIpaReachableAttempt.class);\n+\n+    private final FreeIpaHealthDetailsService freeIpaHealthDetailsService;\n+\n+    private final Stack stack;\n+\n+    private final Set<InstanceMetaData> instanceMetaDataSet;\n+\n+    public OneFreeIpaReachableAttempt(FreeIpaHealthDetailsService freeIpaHealthDetailsService, Stack stack, Set<InstanceMetaData> instanceMetaDataSet) {\n+        this.freeIpaHealthDetailsService = freeIpaHealthDetailsService;\n+        this.stack = stack;\n+        this.instanceMetaDataSet = instanceMetaDataSet;\n+    }\n+\n+    @Override\n+    public AttemptResult<Void> process() {\n+        if (stack == null || instanceMetaDataSet == null || instanceMetaDataSet.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM5NTAxOQ=="}, "originalCommit": {"oid": "83f2b6343055340df03da8b884715d6727e6d1cb"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3506, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}