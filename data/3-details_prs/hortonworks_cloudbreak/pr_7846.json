{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDkyOTQ1", "number": 7846, "title": "CB-6583 Allow ManagementConsoleUser's to use our default provided image catalog", "bodyText": "Add default resource checker for authorization. Add authorization to image catalog.", "createdAt": "2020-04-21T07:32:34Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7846", "merged": true, "mergeCommit": {"oid": "68f838b93401812775b986306a16181d94e89674"}, "closed": true, "closedAt": "2020-05-04T12:42:14Z", "author": {"login": "foldik"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZvRsNgFqTM5NzA4OTE2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd98BHgFqTQwNDkwOTE0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDg5MTY3", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#pullrequestreview-397089167", "createdAt": "2020-04-21T08:10:40Z", "commit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxMDo0MFrOGI4k4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxODowN1rOGI45qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODczNg==", "bodyText": "Is there a reason to switch to constructor injection? I have no problem with it, just other classes in the module don't use it", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411968736", "createdAt": "2020-04-21T08:10:40Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "diffHunk": "@@ -18,39 +22,95 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n-import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.google.common.collect.Maps;\n import com.sequenceiq.authorization.annotation.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.RightUtils;\n \n @Component\n public class CommonPermissionCheckingUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonPermissionCheckingUtils.class);\n \n-    @Inject\n-    private UmsAccountAuthorizationService umsAccountAuthorizationService;\n+    private final UmsAccountAuthorizationService umsAccountAuthorizationService;\n+\n+    private final UmsResourceAuthorizationService umsResourceAuthorizationService;\n+\n+    private final Map<AuthorizationResourceType, DefaultResourceChecker> defaultResourceCheckers;\n \n     @Inject\n-    private UmsResourceAuthorizationService umsResourceAuthorizationService;\n+    public CommonPermissionCheckingUtils(UmsAccountAuthorizationService umsAccountAuthorizationService,\n+            UmsResourceAuthorizationService umsResourceAuthorizationService,\n+            List<DefaultResourceChecker> defaultResourceCheckers) {\n+        this.umsAccountAuthorizationService = umsAccountAuthorizationService;\n+        this.umsResourceAuthorizationService = umsResourceAuthorizationService;\n+        this.defaultResourceCheckers = Maps.immutableEnumMap(defaultResourceCheckers.stream()\n+                .collect(toMap(DefaultResourceChecker::getResourceType, Function.identity())));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2OTA3NQ==", "bodyText": "This block occurs twice, please move into a method", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411969075", "createdAt": "2020-04-21T08:11:04Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "diffHunk": "@@ -18,39 +22,95 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n-import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.google.common.collect.Maps;\n import com.sequenceiq.authorization.annotation.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.RightUtils;\n \n @Component\n public class CommonPermissionCheckingUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonPermissionCheckingUtils.class);\n \n-    @Inject\n-    private UmsAccountAuthorizationService umsAccountAuthorizationService;\n+    private final UmsAccountAuthorizationService umsAccountAuthorizationService;\n+\n+    private final UmsResourceAuthorizationService umsResourceAuthorizationService;\n+\n+    private final Map<AuthorizationResourceType, DefaultResourceChecker> defaultResourceCheckers;\n \n     @Inject\n-    private UmsResourceAuthorizationService umsResourceAuthorizationService;\n+    public CommonPermissionCheckingUtils(UmsAccountAuthorizationService umsAccountAuthorizationService,\n+            UmsResourceAuthorizationService umsResourceAuthorizationService,\n+            List<DefaultResourceChecker> defaultResourceCheckers) {\n+        this.umsAccountAuthorizationService = umsAccountAuthorizationService;\n+        this.umsResourceAuthorizationService = umsResourceAuthorizationService;\n+        this.defaultResourceCheckers = Maps.immutableEnumMap(defaultResourceCheckers.stream()\n+                .collect(toMap(DefaultResourceChecker::getResourceType, Function.identity())));\n+    }\n \n     public void checkPermissionForUser(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn) {\n         umsAccountAuthorizationService.checkRightOfUser(userCrn, resource, action);\n     }\n \n     public void checkPermissionForUserOnResource(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn, String resourceCrn) {\n-        umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        DefaultResourceChecker defaultResourceChecker = defaultResourceCheckers.get(resource);\n+        if (defaultResourceChecker == null || !defaultResourceChecker.isDefault(resourceCrn)) {\n+            umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        } else {\n+            if (!defaultResourceChecker.isAllowedAction(action)) {\n+                String right = RightUtils.getRight(resource, action);\n+                String msg = String.format(\"You have no right to perform %s on resource %s\", right, resourceCrn);\n+                LOGGER.error(msg);\n+                throw new AccessDeniedException(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2OTY3MA==", "bodyText": "This also appears twice, maybe it is wort to move out into a method to increase readability of the code", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411969670", "createdAt": "2020-04-21T08:11:47Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "diffHunk": "@@ -18,39 +22,95 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n-import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.google.common.collect.Maps;\n import com.sequenceiq.authorization.annotation.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.RightUtils;\n \n @Component\n public class CommonPermissionCheckingUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonPermissionCheckingUtils.class);\n \n-    @Inject\n-    private UmsAccountAuthorizationService umsAccountAuthorizationService;\n+    private final UmsAccountAuthorizationService umsAccountAuthorizationService;\n+\n+    private final UmsResourceAuthorizationService umsResourceAuthorizationService;\n+\n+    private final Map<AuthorizationResourceType, DefaultResourceChecker> defaultResourceCheckers;\n \n     @Inject\n-    private UmsResourceAuthorizationService umsResourceAuthorizationService;\n+    public CommonPermissionCheckingUtils(UmsAccountAuthorizationService umsAccountAuthorizationService,\n+            UmsResourceAuthorizationService umsResourceAuthorizationService,\n+            List<DefaultResourceChecker> defaultResourceCheckers) {\n+        this.umsAccountAuthorizationService = umsAccountAuthorizationService;\n+        this.umsResourceAuthorizationService = umsResourceAuthorizationService;\n+        this.defaultResourceCheckers = Maps.immutableEnumMap(defaultResourceCheckers.stream()\n+                .collect(toMap(DefaultResourceChecker::getResourceType, Function.identity())));\n+    }\n \n     public void checkPermissionForUser(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn) {\n         umsAccountAuthorizationService.checkRightOfUser(userCrn, resource, action);\n     }\n \n     public void checkPermissionForUserOnResource(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn, String resourceCrn) {\n-        umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        DefaultResourceChecker defaultResourceChecker = defaultResourceCheckers.get(resource);\n+        if (defaultResourceChecker == null || !defaultResourceChecker.isDefault(resourceCrn)) {\n+            umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        } else {\n+            if (!defaultResourceChecker.isAllowedAction(action)) {\n+                String right = RightUtils.getRight(resource, action);\n+                String msg = String.format(\"You have no right to perform %s on resource %s\", right, resourceCrn);\n+                LOGGER.error(msg);\n+                throw new AccessDeniedException(msg);\n+            }\n+        }\n     }\n \n     public void checkPermissionForUserOnResources(AuthorizationResourceType resource, AuthorizationResourceAction action,\n             String userCrn, Collection<String> resourceCrns) {\n-        umsResourceAuthorizationService.checkRightOfUserOnResources(userCrn, resource, action, resourceCrns);\n+        DefaultResourceChecker defaultResourceChecker = defaultResourceCheckers.get(resource);\n+        if (defaultResourceChecker == null) {\n+            umsResourceAuthorizationService.checkRightOfUserOnResources(userCrn, resource, action, resourceCrns);\n+        } else {\n+            Collection<String> defaultResourceCrns = defaultResourceChecker.getDefaultResourceCrns(resourceCrns);\n+            Collection<String> notDefaultResourceCrns = resourceCrns.stream()\n+                    .filter(crn -> !defaultResourceCrns.contains(crn))\n+                    .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MzE5MA==", "bodyText": "Are these the CRNs of default catalogs? Format doesn't like a CRN format", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411973190", "createdAt": "2020-04-21T08:16:50Z", "author": {"login": "horadla23"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java", "diffHunk": "@@ -54,15 +59,20 @@\n import com.sequenceiq.cloudbreak.service.account.PreferencesService;\n import com.sequenceiq.cloudbreak.service.user.UserProfileHandler;\n import com.sequenceiq.cloudbreak.service.user.UserProfileService;\n+import com.sequenceiq.cloudbreak.service.workspace.WorkspaceService;\n import com.sequenceiq.cloudbreak.workspace.model.User;\n import com.sequenceiq.cloudbreak.workspace.model.Workspace;\n import com.sequenceiq.cloudbreak.workspace.repository.workspace.WorkspaceResourceRepository;\n \n @Component\n-public class ImageCatalogService extends AbstractWorkspaceAwareResourceService<ImageCatalog> {\n+public class ImageCatalogService extends AbstractWorkspaceAwareResourceService<ImageCatalog> implements ResourceBasedCrnProvider {\n \n     public static final String UNDEFINED = \"\";\n \n+    public static final String CLOUDBREAK_DEFAULT_CATALOG_CRN = \"cloudbreak-default-catalog-crn\";\n+\n+    public static final String CDP_DEFAULT_CATALOG_CRN = \"cdp-default-catalog-crn\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3NDA1Nw==", "bodyText": "I think we should talk about these default catalogs, I am not sure I get the logic here", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411974057", "createdAt": "2020-04-21T08:18:07Z", "author": {"login": "horadla23"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java", "diffHunk": "@@ -691,6 +692,54 @@ private String createCRN(String accountId) {\n                 .toString();\n     }\n \n+    @Override\n+    public String getResourceCrnByResourceName(String resourceName) {\n+        if (CDP_DEFAULT_CATALOG_NAME.equals(resourceName)) {\n+            return CDP_DEFAULT_CATALOG_CRN;\n+        } else if (legacyCatalogEnabled && CLOUDBREAK_DEFAULT_CATALOG_NAME.equals(resourceName)) {\n+            return CLOUDBREAK_DEFAULT_CATALOG_CRN;\n+        } else {\n+            return imageCatalogRepository.findResourceCrnByNameAndWorkspaceId(resourceName, workspaceService.getForCurrentUser().getId())\n+                    .orElseThrow(() -> NotFoundException.notFoundException(\"Image catalog\", resourceName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 153}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/eb2912824e11018aa304ce6b6d4482cccf380e39", "committedDate": "2020-04-21T07:29:27Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}, "afterCommit": {"oid": "e0b66b9fe3fc9776d06d2efef5bc498e7c9ecd4a", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e0b66b9fe3fc9776d06d2efef5bc498e7c9ecd4a", "committedDate": "2020-04-21T12:22:20Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0b66b9fe3fc9776d06d2efef5bc498e7c9ecd4a", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e0b66b9fe3fc9776d06d2efef5bc498e7c9ecd4a", "committedDate": "2020-04-21T12:22:20Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}, "afterCommit": {"oid": "7024a341b45f4e3a58c71c4ff6fd9dd204a4dd62", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7024a341b45f4e3a58c71c4ff6fd9dd204a4dd62", "committedDate": "2020-04-22T08:56:55Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7024a341b45f4e3a58c71c4ff6fd9dd204a4dd62", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7024a341b45f4e3a58c71c4ff6fd9dd204a4dd62", "committedDate": "2020-04-22T08:56:55Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}, "afterCommit": {"oid": "2d1a95079a228dfb2d5c70234dd6b1ef69443f36", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2d1a95079a228dfb2d5c70234dd6b1ef69443f36", "committedDate": "2020-04-22T09:30:16Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d1a95079a228dfb2d5c70234dd6b1ef69443f36", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2d1a95079a228dfb2d5c70234dd6b1ef69443f36", "committedDate": "2020-04-22T09:30:16Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}, "afterCommit": {"oid": "0c845a813ed7eda339500caadf0a829392086cba", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0c845a813ed7eda339500caadf0a829392086cba", "committedDate": "2020-04-22T09:51:27Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MDk0MjY0", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#pullrequestreview-398094264", "createdAt": "2020-04-22T11:26:47Z", "commit": {"oid": "0c845a813ed7eda339500caadf0a829392086cba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c845a813ed7eda339500caadf0a829392086cba", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0c845a813ed7eda339500caadf0a829392086cba", "committedDate": "2020-04-22T09:51:27Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}, "afterCommit": {"oid": "03d6c883d431af42c3eebe4b9fdc58a166c80d0a", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/03d6c883d431af42c3eebe4b9fdc58a166c80d0a", "committedDate": "2020-04-27T06:51:27Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03d6c883d431af42c3eebe4b9fdc58a166c80d0a", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/03d6c883d431af42c3eebe4b9fdc58a166c80d0a", "committedDate": "2020-04-27T06:51:27Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}, "afterCommit": {"oid": "27b64ead57d90576c1c8d3792b72ea80032b6b70", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/27b64ead57d90576c1c8d3792b72ea80032b6b70", "committedDate": "2020-04-27T07:15:25Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27b64ead57d90576c1c8d3792b72ea80032b6b70", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/27b64ead57d90576c1c8d3792b72ea80032b6b70", "committedDate": "2020-04-27T07:15:25Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}, "afterCommit": {"oid": "21f0c2e97de25313ff224fed53d41c21ba39882d", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/21f0c2e97de25313ff224fed53d41c21ba39882d", "committedDate": "2020-04-27T08:32:10Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21f0c2e97de25313ff224fed53d41c21ba39882d", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/21f0c2e97de25313ff224fed53d41c21ba39882d", "committedDate": "2020-04-27T08:32:10Z", "message": "CB-6583 Add default resource checker for authorization. Add authorization to image catalog."}, "afterCommit": {"oid": "2f0df1ae5aae23da79edd141e34bab3dc6d0536b", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2f0df1ae5aae23da79edd141e34bab3dc6d0536b", "committedDate": "2020-04-27T11:01:28Z", "message": "CB-6583 Add authorization to image catalog."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f0df1ae5aae23da79edd141e34bab3dc6d0536b", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2f0df1ae5aae23da79edd141e34bab3dc6d0536b", "committedDate": "2020-04-27T11:01:28Z", "message": "CB-6583 Add authorization to image catalog."}, "afterCommit": {"oid": "f8d3ff4e4da0e002429d65e2aee4f6006ea10524", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/f8d3ff4e4da0e002429d65e2aee4f6006ea10524", "committedDate": "2020-05-04T08:33:28Z", "message": "CB-6583 Add authorization to image catalog."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34cf00a199a942d386dfd087e6d365956fcf395e", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/34cf00a199a942d386dfd087e6d365956fcf395e", "committedDate": "2020-05-04T10:57:31Z", "message": "CB-6583 Add authorization to image catalog."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8d3ff4e4da0e002429d65e2aee4f6006ea10524", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/f8d3ff4e4da0e002429d65e2aee4f6006ea10524", "committedDate": "2020-05-04T08:33:28Z", "message": "CB-6583 Add authorization to image catalog."}, "afterCommit": {"oid": "34cf00a199a942d386dfd087e6d365956fcf395e", "author": {"user": {"login": "foldik", "name": "Attila Kristof Foldi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/34cf00a199a942d386dfd087e6d365956fcf395e", "committedDate": "2020-05-04T10:57:31Z", "message": "CB-6583 Add authorization to image catalog."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTA5MTQx", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#pullrequestreview-404909141", "createdAt": "2020-05-04T11:39:39Z", "commit": {"oid": "34cf00a199a942d386dfd087e6d365956fcf395e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2221, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}