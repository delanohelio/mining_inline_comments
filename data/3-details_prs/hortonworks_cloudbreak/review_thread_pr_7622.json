{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNTIwMjEx", "number": 7622, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyNDo1NVrODrIGVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1NToyMVrODrI0sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTQ4MDU1OnYy", "diffSide": "RIGHT", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyNDo1NVrOF7SUNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoyMTowNVrOF7Ub8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMDM4OA==", "bodyText": "The hasRights method before has an incorrect logging (called with 2 args although the log will contain only the first argument). Can you please fix that?\n\t        LOGGER.info(\"Checking whether member [] has rights [{}]\",\n                memberCrn,\n                rightChecks.stream().map(AuthorizationProto.RightCheck::getRight).collect(Collectors.toList()));\t                rightChecks.stream().map(AuthorizationProto.RightCheck::getRight).collect(Collectors.toList()))", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397710388", "createdAt": "2020-03-25T09:24:55Z", "author": {"login": "foldik"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -379,13 +379,15 @@ public boolean checkRight(String actorCrn, String userCrn, String right, Optiona\n         }\n     }\n \n-    public List<Boolean> hasRights(String actorCrn, String memberCrn, Map<String, String> rightCheckMap, Optional<String> requestId) {\n+    public Map<String, Boolean> hasRights(String actorCrn, String memberCrn, List<String> resources, String right, Optional<String> requestId) {\n         List<AuthorizationProto.RightCheck> rightChecks = Lists.newArrayList();\n-        rightCheckMap.entrySet().stream().forEach(entry -> rightChecks.add(AuthorizationProto.RightCheck.newBuilder()\n-                .setResource(entry.getKey())\n-                .setRight(entry.getValue())\n+        resources.stream().forEach(resource -> rightChecks.add(AuthorizationProto.RightCheck.newBuilder()\n+                .setResource(resource)\n+                .setRight(right)\n                 .build()));\n-        return hasRights(actorCrn, memberCrn, rightChecks, requestId);\n+        List<Boolean> result = hasRights(actorCrn, memberCrn, rightChecks, requestId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339d970c0a7485333d2610b3b0e566bbceba566"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NTEzOQ==", "bodyText": "sure", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397745139", "createdAt": "2020-03-25T10:21:05Z", "author": {"login": "horadla23"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -379,13 +379,15 @@ public boolean checkRight(String actorCrn, String userCrn, String right, Optiona\n         }\n     }\n \n-    public List<Boolean> hasRights(String actorCrn, String memberCrn, Map<String, String> rightCheckMap, Optional<String> requestId) {\n+    public Map<String, Boolean> hasRights(String actorCrn, String memberCrn, List<String> resources, String right, Optional<String> requestId) {\n         List<AuthorizationProto.RightCheck> rightChecks = Lists.newArrayList();\n-        rightCheckMap.entrySet().stream().forEach(entry -> rightChecks.add(AuthorizationProto.RightCheck.newBuilder()\n-                .setResource(entry.getKey())\n-                .setRight(entry.getValue())\n+        resources.stream().forEach(resource -> rightChecks.add(AuthorizationProto.RightCheck.newBuilder()\n+                .setResource(resource)\n+                .setRight(right)\n                 .build()));\n-        return hasRights(actorCrn, memberCrn, rightChecks, requestId);\n+        List<Boolean> result = hasRights(actorCrn, memberCrn, rightChecks, requestId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxMDM4OA=="}, "originalCommit": {"oid": "8339d970c0a7485333d2610b3b0e566bbceba566"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTUyMDQ1OnYy", "diffSide": "RIGHT", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTozNDo0N1rOF7Ss0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoyMjo1MFrOF7UgAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNjY4OQ==", "bodyText": "Please rewire it to stream().map(...).collect() format.", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397716689", "createdAt": "2020-03-25T09:34:47Z", "author": {"login": "foldik"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -379,13 +379,15 @@ public boolean checkRight(String actorCrn, String userCrn, String right, Optiona\n         }\n     }\n \n-    public List<Boolean> hasRights(String actorCrn, String memberCrn, Map<String, String> rightCheckMap, Optional<String> requestId) {\n+    public Map<String, Boolean> hasRights(String actorCrn, String memberCrn, List<String> resources, String right, Optional<String> requestId) {\n         List<AuthorizationProto.RightCheck> rightChecks = Lists.newArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339d970c0a7485333d2610b3b0e566bbceba566"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NjE3Ng==", "bodyText": "ok, I do not know why I didn't use for the first time :)", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397746176", "createdAt": "2020-03-25T10:22:50Z", "author": {"login": "horadla23"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -379,13 +379,15 @@ public boolean checkRight(String actorCrn, String userCrn, String right, Optiona\n         }\n     }\n \n-    public List<Boolean> hasRights(String actorCrn, String memberCrn, Map<String, String> rightCheckMap, Optional<String> requestId) {\n+    public Map<String, Boolean> hasRights(String actorCrn, String memberCrn, List<String> resources, String right, Optional<String> requestId) {\n         List<AuthorizationProto.RightCheck> rightChecks = Lists.newArrayList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxNjY4OQ=="}, "originalCommit": {"oid": "8339d970c0a7485333d2610b3b0e566bbceba566"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTU5OTIxOnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ListPermissionChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1NToyMVrOF7TeZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoyNToxM1rOF7Ul-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyOTM4Mw==", "bodyText": "Please use a Collectors.toSet() here.", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397729383", "createdAt": "2020-03-25T09:55:21Z", "author": {"login": "foldik"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ListPermissionChecker.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.sequenceiq.authorization.service;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.annotation.FilterListBasedOnPermissions;\n+import com.sequenceiq.authorization.resource.AuthorizationFilterableResponseCollection;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.ResourceCrnAwareApiModel;\n+import com.sequenceiq.authorization.resource.ListResponseAuthorizationType;\n+\n+@Component\n+public class ListPermissionChecker implements PermissionChecker<FilterListBasedOnPermissions> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ListPermissionChecker.class);\n+\n+    @Inject\n+    private CommonPermissionCheckingUtils commonPermissionCheckingUtils;\n+\n+    @Inject\n+    private List<ResourceBasedCrnProvider> resourceBasedCrnProviders;\n+\n+    private final Map<AuthorizationResourceType, ResourceBasedCrnProvider> resourceBasedCrnProviderMap = new HashMap<>();\n+\n+    @PostConstruct\n+    public void populateResourceBasedCrnProviderMap() {\n+        resourceBasedCrnProviders.forEach(resourceBasedCrnProvider ->\n+                resourceBasedCrnProviderMap.put(resourceBasedCrnProvider.getResourceType(), resourceBasedCrnProvider));\n+    }\n+\n+    @Override\n+    public <T extends Annotation> Object checkPermissions(T rawMethodAnnotation, AuthorizationResourceType resourceType, String userCrn,\n+            ProceedingJoinPoint proceedingJoinPoint, MethodSignature methodSignature, long startTime) {\n+        FilterListBasedOnPermissions methodAnnotation = (FilterListBasedOnPermissions) rawMethodAnnotation;\n+        AuthorizationResourceAction action = methodAnnotation.action();\n+        List<String> allResourceCrns = resourceBasedCrnProviderMap.get(resourceType).getResourceCrnsInAccount();\n+        List<String> filteredResourceCrns = commonPermissionCheckingUtils.getPermissionsForUserOnResources(resourceType, action, userCrn, allResourceCrns)\n+                .entrySet()\n+                .stream()\n+                .filter(Map.Entry::getValue)\n+                .map(Map.Entry::getKey)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339d970c0a7485333d2610b3b0e566bbceba566"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NzcwNQ==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/7622#discussion_r397747705", "createdAt": "2020-03-25T10:25:13Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ListPermissionChecker.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.sequenceiq.authorization.service;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.annotation.FilterListBasedOnPermissions;\n+import com.sequenceiq.authorization.resource.AuthorizationFilterableResponseCollection;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.ResourceCrnAwareApiModel;\n+import com.sequenceiq.authorization.resource.ListResponseAuthorizationType;\n+\n+@Component\n+public class ListPermissionChecker implements PermissionChecker<FilterListBasedOnPermissions> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ListPermissionChecker.class);\n+\n+    @Inject\n+    private CommonPermissionCheckingUtils commonPermissionCheckingUtils;\n+\n+    @Inject\n+    private List<ResourceBasedCrnProvider> resourceBasedCrnProviders;\n+\n+    private final Map<AuthorizationResourceType, ResourceBasedCrnProvider> resourceBasedCrnProviderMap = new HashMap<>();\n+\n+    @PostConstruct\n+    public void populateResourceBasedCrnProviderMap() {\n+        resourceBasedCrnProviders.forEach(resourceBasedCrnProvider ->\n+                resourceBasedCrnProviderMap.put(resourceBasedCrnProvider.getResourceType(), resourceBasedCrnProvider));\n+    }\n+\n+    @Override\n+    public <T extends Annotation> Object checkPermissions(T rawMethodAnnotation, AuthorizationResourceType resourceType, String userCrn,\n+            ProceedingJoinPoint proceedingJoinPoint, MethodSignature methodSignature, long startTime) {\n+        FilterListBasedOnPermissions methodAnnotation = (FilterListBasedOnPermissions) rawMethodAnnotation;\n+        AuthorizationResourceAction action = methodAnnotation.action();\n+        List<String> allResourceCrns = resourceBasedCrnProviderMap.get(resourceType).getResourceCrnsInAccount();\n+        List<String> filteredResourceCrns = commonPermissionCheckingUtils.getPermissionsForUserOnResources(resourceType, action, userCrn, allResourceCrns)\n+                .entrySet()\n+                .stream()\n+                .filter(Map.Entry::getValue)\n+                .map(Map.Entry::getKey)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyOTM4Mw=="}, "originalCommit": {"oid": "8339d970c0a7485333d2610b3b0e566bbceba566"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2696, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}