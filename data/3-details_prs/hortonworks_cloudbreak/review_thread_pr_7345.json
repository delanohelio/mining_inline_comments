{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTg1NTA3", "number": 7345, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDozODoyMlrODieChw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0NjozNlrODlrcCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDcwMzQzOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDozODoyMlrOFtvCXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToxMDo1NVrOFu8WFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDg5Mw==", "bodyText": "I'm not too fond of the location of this file. I'd prefer it to reside closer to the service that will actually use it.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383500893", "createdAt": "2020-02-24T20:38:22Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcyNTEyMA==", "bodyText": "this definitely smells, please look for a better place", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383725120", "createdAt": "2020-02-25T08:34:11Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDg5Mw=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDI1NA==", "bodyText": "Ah sure let me find a better place (I've placed it here because KrbKeySetEncoder is here which plays an analogous role). I think we want to expose this as part of UserV1Endpoint and maybe add a UserKeytabGenService.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384164254", "createdAt": "2020-02-25T22:26:15Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDg5Mw=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxODY5MA==", "bodyText": "that class is in a wrong package also IMHO", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384418690", "createdAt": "2020-02-26T10:56:12Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDg5Mw=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyODk4Nw==", "bodyText": "I gree that KrbKeySetEncoder is also in the wrong spot. I suggest com.sequenceiq.freeipa.service.freeipa.user.krb or com.sequenceiq.freeipa.service.freeipa.user.util", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384728987", "createdAt": "2020-02-26T19:54:28Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDg5Mw=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2NzUwOQ==", "bodyText": "Thanks, I'll move both of them.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384767509", "createdAt": "2020-02-26T21:10:55Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDg5Mw=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI2OTUwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDoxNDowNFrOFt0d_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDoxNDowNFrOFt0d_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4OTg4Ng==", "bodyText": "verify/assert parameters?", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383589886", "createdAt": "2020-02-25T00:14:04Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEncoder;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;\n+import org.apache.directory.shared.kerberos.KerberosTime;\n+import org.apache.directory.shared.kerberos.codec.types.EncryptionType;\n+import org.apache.directory.shared.kerberos.components.EncryptionKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public final class KrbKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KrbKeytabGenerator.class);\n+\n+    private static final int PRINCIPAL_TYPE_1 = 1;\n+\n+    private static final byte[] KEYTAB_VERSION_0X502 = { (byte) 0x05, (byte) 0x02 };\n+\n+    private static final byte KEY_VERSION_NUMBER_ZERO = 0;\n+\n+    @Inject\n+    private Clock clock;\n+\n+    private KeytabEntry toKeytabEntry(String user, String realm, ActorKerberosKey actorKerberosKey) {\n+        String principalName = user + '@' + realm;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI3MTA0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDoxNDo1NVrOFt0e8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyODoyMFrOFu86tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MDEyOA==", "bodyText": "This is the kvno? Add a comment?", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383590128", "createdAt": "2020-02-25T00:14:55Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEncoder;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;\n+import org.apache.directory.shared.kerberos.KerberosTime;\n+import org.apache.directory.shared.kerberos.codec.types.EncryptionType;\n+import org.apache.directory.shared.kerberos.components.EncryptionKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public final class KrbKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KrbKeytabGenerator.class);\n+\n+    private static final int PRINCIPAL_TYPE_1 = 1;\n+\n+    private static final byte[] KEYTAB_VERSION_0X502 = { (byte) 0x05, (byte) 0x02 };\n+\n+    private static final byte KEY_VERSION_NUMBER_ZERO = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3Njg4Nw==", "bodyText": "Added", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384776887", "createdAt": "2020-02-26T21:28:20Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEncoder;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;\n+import org.apache.directory.shared.kerberos.KerberosTime;\n+import org.apache.directory.shared.kerberos.codec.types.EncryptionType;\n+import org.apache.directory.shared.kerberos.components.EncryptionKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public final class KrbKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KrbKeytabGenerator.class);\n+\n+    private static final int PRINCIPAL_TYPE_1 = 1;\n+\n+    private static final byte[] KEYTAB_VERSION_0X502 = { (byte) 0x05, (byte) 0x02 };\n+\n+    private static final byte KEY_VERSION_NUMBER_ZERO = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MDEyOA=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI3MTM4OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDoxNTowOVrOFt0fMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToxODo1NlrOFu8nfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MDE5Mg==", "bodyText": "What is this principal type?", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383590192", "createdAt": "2020-02-25T00:15:09Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEncoder;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;\n+import org.apache.directory.shared.kerberos.KerberosTime;\n+import org.apache.directory.shared.kerberos.codec.types.EncryptionType;\n+import org.apache.directory.shared.kerberos.components.EncryptionKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public final class KrbKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KrbKeytabGenerator.class);\n+\n+    private static final int PRINCIPAL_TYPE_1 = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3MTk2Ng==", "bodyText": "This is goes away in my upcoming change that uses kerby-util package. Internally it will still set a name type of 1 meaning NT-PRINCIPAL, which is what we want I believe.\nI'm not sure how important this field is either ways, as per https://tools.ietf.org/html/rfc4120\n\"The name-type SHOULD be treated only as a hint to interpreting the meaning of a name.  It is not significant when checking for equivalence. Principal names that differ only in the name-type identify the same principal.\"", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384771966", "createdAt": "2020-02-26T21:18:56Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEncoder;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;\n+import org.apache.directory.shared.kerberos.KerberosTime;\n+import org.apache.directory.shared.kerberos.codec.types.EncryptionType;\n+import org.apache.directory.shared.kerberos.components.EncryptionKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public final class KrbKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KrbKeytabGenerator.class);\n+\n+    private static final int PRINCIPAL_TYPE_1 = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MDE5Mg=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI3Mjg2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDoxNTozNlrOFt0f-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDoxNTozNlrOFt0f-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MDM5NQ==", "bodyText": "verify/assert parameters?", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383590395", "createdAt": "2020-02-25T00:15:36Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEncoder;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;\n+import org.apache.directory.shared.kerberos.KerberosTime;\n+import org.apache.directory.shared.kerberos.codec.types.EncryptionType;\n+import org.apache.directory.shared.kerberos.components.EncryptionKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public final class KrbKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KrbKeytabGenerator.class);\n+\n+    private static final int PRINCIPAL_TYPE_1 = 1;\n+\n+    private static final byte[] KEYTAB_VERSION_0X502 = { (byte) 0x05, (byte) 0x02 };\n+\n+    private static final byte KEY_VERSION_NUMBER_ZERO = 0;\n+\n+    @Inject\n+    private Clock clock;\n+\n+    private KeytabEntry toKeytabEntry(String user, String realm, ActorKerberosKey actorKerberosKey) {\n+        String principalName = user + '@' + realm;\n+\n+        EncryptionType encryptionType = EncryptionType.getTypeByValue(actorKerberosKey.getKeyType());\n+        byte[] key = Base64.getDecoder().decode(actorKerberosKey.getKeyValue());\n+        EncryptionKey encryptionKey = new EncryptionKey(encryptionType, key);\n+\n+        KerberosTime time = new KerberosTime(clock.getCurrentTimeMillis());\n+\n+        return new KeytabEntry(principalName, PRINCIPAL_TYPE_1, time, KEY_VERSION_NUMBER_ZERO, encryptionKey);\n+    }\n+\n+    public String generateKeytabBase64(String workloadUserName, String realm, List<ActorKerberosKey> actorKerberosKeys) {\n+        LOGGER.info(\"Generating keytab for workloadUserName = {} with realm = {}\", workloadUserName, realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI3NzE4OnYy", "diffSide": "RIGHT", "path": "freeipa/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDoxODowMlrOFt0isQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyMDoxM1rOFu8qKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MTA4OQ==", "bodyText": "So what is this needed for? You copied the code, no?", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383591089", "createdAt": "2020-02-25T00:18:02Z", "author": {"login": "giladwolff"}, "path": "freeipa/build.gradle", "diffHunk": "@@ -51,6 +51,9 @@ dependencies {\n   implementation     group: 'io.opentracing.contrib',    name: 'opentracing-jaxrs2',                       version: opentracingJaxrs2Version\n   implementation     group: 'io.opentracing.contrib',    name: 'opentracing-jdbc',                         version: opentracingJdbcVersion\n \n+  implementation     group: 'org.apache.directory.api',  name: 'api-asn1-api',                         version: '2.0.0'\n+  implementation     group: 'org.apache.directory.api',  name: 'api-asn1-ber',                         version: '2.0.0'\n+  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3MjY1MA==", "bodyText": "This is no longer needed with my upcoming change.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384772650", "createdAt": "2020-02-26T21:20:13Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/build.gradle", "diffHunk": "@@ -51,6 +51,9 @@ dependencies {\n   implementation     group: 'io.opentracing.contrib',    name: 'opentracing-jaxrs2',                       version: opentracingJaxrs2Version\n   implementation     group: 'io.opentracing.contrib',    name: 'opentracing-jdbc',                         version: opentracingJdbcVersion\n \n+  implementation     group: 'org.apache.directory.api',  name: 'api-asn1-api',                         version: '2.0.0'\n+  implementation     group: 'org.apache.directory.api',  name: 'api-asn1-ber',                         version: '2.0.0'\n+  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MTA4OQ=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI4MDExOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/org/apache/directory/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDoxOToyMFrOFt0kWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo0Mzo1MlrOFu5nhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MTUxMg==", "bodyText": "I would just drop the org/apache/directory from the package and move it to somewhere where the rest of you code lives (KeytabUtils?) You can put the readme and the classes there.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383591512", "createdAt": "2020-02-25T00:19:20Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/org/apache/directory/README.md", "diffHunk": "@@ -0,0 +1,12 @@\n+This packge contains classes to aid in the generation of Kerberos Keytabs. The classes here are taken", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcyNDE1MQ==", "bodyText": "either this or put it in a different modul. I prefer the latter\nwhat's the reason we don't use the library? is it too big?", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383724151", "createdAt": "2020-02-25T08:32:13Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/org/apache/directory/README.md", "diffHunk": "@@ -0,0 +1,12 @@\n+This packge contains classes to aid in the generation of Kerberos Keytabs. The classes here are taken", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MTUxMg=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyMjgyMw==", "bodyText": "Yes, the entire Apache DS library is a fairly heavy dependency. I've just looked into Apache Kerby which Kevin Risden mentioned to me earlier. There's a 'kerb-util' artifact that we can use which allows creating keytab. That may be more reasonable to pull in so we don't have to copy over source code. Let me try that.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384722823", "createdAt": "2020-02-26T19:43:52Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/org/apache/directory/README.md", "diffHunk": "@@ -0,0 +1,12 @@\n+This packge contains classes to aid in the generation of Kerberos Keytabs. The classes here are taken", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MTUxMg=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI4MzI3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/test/java/com/sequenceiq/freeipa/util/KrbKeyTabGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDoyMTowOFrOFt0mTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyMDozMVrOFu8qww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MjAxNQ==", "bodyText": "Are there any meaningful tests you want to bring from apache.directory?", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383592015", "createdAt": "2020-02-25T00:21:08Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/test/java/com/sequenceiq/freeipa/util/KrbKeyTabGeneratorTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3MjgwMw==", "bodyText": "No longer needed.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384772803", "createdAt": "2020-02-26T21:20:31Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/test/java/com/sequenceiq/freeipa/util/KrbKeyTabGeneratorTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MjAxNQ=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI4NTAwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/org/apache/directory/shared/kerberos/components/EncryptionKey.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDoyMjowMlrOFt0nbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyMTozNlrOFu8tBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MjMwMg==", "bodyText": "So what is the apache license? Can we copy the code and use it/modify it as long as we have the copyright statement?", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383592302", "createdAt": "2020-02-25T00:22:02Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/org/apache/directory/shared/kerberos/components/EncryptionKey.java", "diffHunk": "@@ -0,0 +1,330 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MjYzOA==", "bodyText": "I think I answered my own question by doing a git grep on thunderhead git repo. I think it's fine.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383592638", "createdAt": "2020-02-25T00:23:12Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/org/apache/directory/shared/kerberos/components/EncryptionKey.java", "diffHunk": "@@ -0,0 +1,330 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MjMwMg=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3MzM4Mw==", "bodyText": "Cool. I think all we need to do is just include the original license, and if we've modified the code we just put some Cloudera modification header.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384773383", "createdAt": "2020-02-26T21:21:36Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/org/apache/directory/shared/kerberos/components/EncryptionKey.java", "diffHunk": "@@ -0,0 +1,330 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MjMwMg=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjE1MDQ2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODozNDoyNFrOFt8uog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyMjoyMFrOFu8ulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcyNTIxOA==", "bodyText": "where is this class used?", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383725218", "createdAt": "2020-02-25T08:34:24Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEncoder;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;\n+import org.apache.directory.shared.kerberos.KerberosTime;\n+import org.apache.directory.shared.kerberos.codec.types.EncryptionType;\n+import org.apache.directory.shared.kerberos.components.EncryptionKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public final class KrbKeytabGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3Mzc4Mw==", "bodyText": "The functionality will be exposed as a public endpoint in a follow-on commit.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384773783", "createdAt": "2020-02-26T21:22:20Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEncoder;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;\n+import org.apache.directory.shared.kerberos.KerberosTime;\n+import org.apache.directory.shared.kerberos.codec.types.EncryptionType;\n+import org.apache.directory.shared.kerberos.components.EncryptionKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public final class KrbKeytabGenerator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcyNTIxOA=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjE1MzIwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODozNToyNFrOFt8whQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyMzozMlrOFu8w6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcyNTcwMQ==", "bodyText": "these variables need more meaningful name, or if it's really necessary add comments please", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383725701", "createdAt": "2020-02-25T08:35:24Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEncoder;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;\n+import org.apache.directory.shared.kerberos.KerberosTime;\n+import org.apache.directory.shared.kerberos.codec.types.EncryptionType;\n+import org.apache.directory.shared.kerberos.components.EncryptionKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public final class KrbKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KrbKeytabGenerator.class);\n+\n+    private static final int PRINCIPAL_TYPE_1 = 1;\n+\n+    private static final byte[] KEYTAB_VERSION_0X502 = { (byte) 0x05, (byte) 0x02 };\n+\n+    private static final byte KEY_VERSION_NUMBER_ZERO = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NDM3OQ==", "bodyText": "Next commit gets rid of some of these variables (internally they still get these values). I've added a comment about key version number.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384774379", "createdAt": "2020-02-26T21:23:32Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEncoder;\n+import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;\n+import org.apache.directory.shared.kerberos.KerberosTime;\n+import org.apache.directory.shared.kerberos.codec.types.EncryptionType;\n+import org.apache.directory.shared.kerberos.components.EncryptionKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public final class KrbKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KrbKeytabGenerator.class);\n+\n+    private static final int PRINCIPAL_TYPE_1 = 1;\n+\n+    private static final byte[] KEYTAB_VERSION_0X502 = { (byte) 0x05, (byte) 0x02 };\n+\n+    private static final byte KEY_VERSION_NUMBER_ZERO = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcyNTcwMQ=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjI0MDU1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/test/java/com/sequenceiq/freeipa/util/KrbKeyTabGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTowMjowOFrOFt9mNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyNDo0NFrOFu8zTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczOTQ0NA==", "bodyText": "it looks like to me there is only 1 happy path tested. Are you sure there isn't anything which can go wrong here? Like a parameter is wrong", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r383739444", "createdAt": "2020-02-25T09:02:08Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/test/java/com/sequenceiq/freeipa/util/KrbKeyTabGeneratorTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class KrbKeyTabGeneratorTest {\n+\n+    private static final long MOCK_TIME = 1576171731141L;\n+\n+    @InjectMocks\n+    KrbKeytabGenerator underTest;\n+\n+    @Mock\n+    private Clock clock;\n+\n+    @Test\n+    void testGenerateKeytabBase64() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NDk4OQ==", "bodyText": "I think there's some more validation (i.e. has to be a valid workload user) we can add, but it might be at a higher level.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r384774989", "createdAt": "2020-02-26T21:24:44Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/test/java/com/sequenceiq/freeipa/util/KrbKeyTabGeneratorTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class KrbKeyTabGeneratorTest {\n+\n+    private static final long MOCK_TIME = 1576171731141L;\n+\n+    @InjectMocks\n+    KrbKeytabGenerator underTest;\n+\n+    @Mock\n+    private Clock clock;\n+\n+    @Test\n+    void testGenerateKeytabBase64() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczOTQ0NA=="}, "originalCommit": {"oid": "1b1ddcca9b04cd7dc79dfc5bfb4e9b2dd0f32856"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDM0NDkzOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/krb/KrbKeytabGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOToyOToyOVrOFvK1Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoxNzo1OVrOFwGPkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwNDg3NQ==", "bodyText": "Not a big deal, but could you drop krb in favor of kerberos? I think the package should be user.kerberos and the class name UserKeytabGenerator. This would reflect more of it's purpose in my opinion.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r385004875", "createdAt": "2020-02-27T09:29:29Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/krb/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.sequenceiq.freeipa.service.freeipa.user.krb;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.kerby.kerberos.kerb.keytab.Keytab;\n+import org.apache.kerby.kerberos.kerb.keytab.KeytabEntry;\n+import org.apache.kerby.kerberos.kerb.type.KerberosTime;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionKey;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionType;\n+import org.apache.kerby.kerberos.kerb.type.base.PrincipalName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Kerberos keytab generator - This class is repsonsible for generating a keytab using existing keys\n+ * belonging to an actor in User Management Service.\n+ */\n+@Component\n+public final class KrbKeytabGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff2bd274d662265b21fcb38d535f03b3930f67e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODI1Nw==", "bodyText": "Done.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r385978257", "createdAt": "2020-02-29T00:17:59Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/krb/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.sequenceiq.freeipa.service.freeipa.user.krb;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.kerby.kerberos.kerb.keytab.Keytab;\n+import org.apache.kerby.kerberos.kerb.keytab.KeytabEntry;\n+import org.apache.kerby.kerberos.kerb.type.KerberosTime;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionKey;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionType;\n+import org.apache.kerby.kerberos.kerb.type.base.PrincipalName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Kerberos keytab generator - This class is repsonsible for generating a keytab using existing keys\n+ * belonging to an actor in User Management Service.\n+ */\n+@Component\n+public final class KrbKeytabGenerator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwNDg3NQ=="}, "originalCommit": {"oid": "aff2bd274d662265b21fcb38d535f03b3930f67e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDM1NDYwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/krb/KrbKeytabGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTozMjowNFrOFvK6_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoxNzozOVrOFwGPXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwNjMzNA==", "bodyText": "I see one try without catch, so my concern is if something goes wrong in this code, maybe we would like to convert it to a custom exception a propagate it upwards in that format. What do you think about it?", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r385006334", "createdAt": "2020-02-27T09:32:04Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/krb/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.sequenceiq.freeipa.service.freeipa.user.krb;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.kerby.kerberos.kerb.keytab.Keytab;\n+import org.apache.kerby.kerberos.kerb.keytab.KeytabEntry;\n+import org.apache.kerby.kerberos.kerb.type.KerberosTime;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionKey;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionType;\n+import org.apache.kerby.kerberos.kerb.type.base.PrincipalName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Kerberos keytab generator - This class is repsonsible for generating a keytab using existing keys\n+ * belonging to an actor in User Management Service.\n+ */\n+@Component\n+public final class KrbKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KrbKeytabGenerator.class);\n+\n+    // For the key version number (kvno) in the keytab entries, we use a value of 0. Based on\n+    // expirementiation we've found that for user principles, keytab entries with kvno of zero\n+    // works fine, regardless of what the actual key versions are set in the KDC / Directory Server.\n+    private static final int KEY_VERSION_NUMBER_ZERO = 0;\n+\n+    @Inject\n+    private Clock clock;\n+\n+    private KeytabEntry toKeytabEntry(String user, String realm, ActorKerberosKey actorKerberosKey) {\n+        requireNonNull(user, \"user must not be null\");\n+        requireNonNull(realm, \"realm must not be null\");\n+        requireNonNull(actorKerberosKey, \"actorKerberosKey must not be null\");\n+\n+        PrincipalName principalName = new PrincipalName(user + '@' + realm);\n+\n+        EncryptionType encryptionType = EncryptionType.fromValue(actorKerberosKey.getKeyType());\n+        byte[] key = Base64.getDecoder().decode(actorKerberosKey.getKeyValue());\n+        EncryptionKey encryptionKey = new EncryptionKey(encryptionType, key);\n+\n+        KerberosTime time = new KerberosTime(clock.getCurrentTimeMillis());\n+\n+        return new KeytabEntry(principalName, time, KEY_VERSION_NUMBER_ZERO, encryptionKey);\n+    }\n+\n+    public String generateKeytabBase64(String username, String realm, List<ActorKerberosKey> actorKerberosKeys) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff2bd274d662265b21fcb38d535f03b3930f67e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODIwNg==", "bodyText": "That catch for this would be an IOException. I highly doubt we hit the exception here since it's not actually doing file / network IO. I have added a check for this in the service that calls this function, see updated PR.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r385978206", "createdAt": "2020-02-29T00:17:39Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/krb/KrbKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.sequenceiq.freeipa.service.freeipa.user.krb;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.kerby.kerberos.kerb.keytab.Keytab;\n+import org.apache.kerby.kerberos.kerb.keytab.KeytabEntry;\n+import org.apache.kerby.kerberos.kerb.type.KerberosTime;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionKey;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionType;\n+import org.apache.kerby.kerberos.kerb.type.base.PrincipalName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Kerberos keytab generator - This class is repsonsible for generating a keytab using existing keys\n+ * belonging to an actor in User Management Service.\n+ */\n+@Component\n+public final class KrbKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KrbKeytabGenerator.class);\n+\n+    // For the key version number (kvno) in the keytab entries, we use a value of 0. Based on\n+    // expirementiation we've found that for user principles, keytab entries with kvno of zero\n+    // works fine, regardless of what the actual key versions are set in the KDC / Directory Server.\n+    private static final int KEY_VERSION_NUMBER_ZERO = 0;\n+\n+    @Inject\n+    private Clock clock;\n+\n+    private KeytabEntry toKeytabEntry(String user, String realm, ActorKerberosKey actorKerberosKey) {\n+        requireNonNull(user, \"user must not be null\");\n+        requireNonNull(realm, \"realm must not be null\");\n+        requireNonNull(actorKerberosKey, \"actorKerberosKey must not be null\");\n+\n+        PrincipalName principalName = new PrincipalName(user + '@' + realm);\n+\n+        EncryptionType encryptionType = EncryptionType.fromValue(actorKerberosKey.getKeyType());\n+        byte[] key = Base64.getDecoder().decode(actorKerberosKey.getKeyValue());\n+        EncryptionKey encryptionKey = new EncryptionKey(encryptionType, key);\n+\n+        KerberosTime time = new KerberosTime(clock.getCurrentTimeMillis());\n+\n+        return new KeytabEntry(principalName, time, KEY_VERSION_NUMBER_ZERO, encryptionKey);\n+    }\n+\n+    public String generateKeytabBase64(String username, String realm, List<ActorKerberosKey> actorKerberosKeys) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwNjMzNA=="}, "originalCommit": {"oid": "aff2bd274d662265b21fcb38d535f03b3930f67e"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDM2NTM1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/test/java/com/sequenceiq/freeipa/service/freeipa/user/krb/KrbKeyTabGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTozNTowOFrOFvLBpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoxOTowN1rOFwGQTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwODAzOA==", "bodyText": "I think we need test for those non null checks at least.\nCould you come up with any scenario where other part of the code breaks? I mean a lot static calls are used so this is not easy to test, but what if ActorKerberosKey holds wrong value, or the username holds the whole principal. I think we should cover some unhappy path here.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r385008038", "createdAt": "2020-02-27T09:35:08Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/test/java/com/sequenceiq/freeipa/service/freeipa/user/krb/KrbKeyTabGeneratorTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.sequenceiq.freeipa.service.freeipa.user.krb;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class KrbKeyTabGeneratorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff2bd274d662265b21fcb38d535f03b3930f67e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODQ0Nw==", "bodyText": "Added some null tests and a test for empty key list. As for the other unhappy paths, I don't think it's worth testing at this layer. A user won't provide any of these inputs directly. We pull the keys and username off of UMS and the realm will be pulled from kerberos config. I've updated the PR with the actual service that uses this component. Please see updated PR.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r385978447", "createdAt": "2020-02-29T00:19:07Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/test/java/com/sequenceiq/freeipa/service/freeipa/user/krb/KrbKeyTabGeneratorTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.sequenceiq.freeipa.service.freeipa.user.krb;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class KrbKeyTabGeneratorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwODAzOA=="}, "originalCommit": {"oid": "aff2bd274d662265b21fcb38d535f03b3930f67e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDY2NTY0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMToxMzo1MFrOFwGvUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMToxMzo1MFrOFwGvUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjM4NA==", "bodyText": "'the calling has' -> 'the calling user has'", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r385986384", "createdAt": "2020-02-29T01:13:50Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -98,6 +102,19 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    public String getKeytab(@NotNull String environmentCrn, String targetUserCrn) {\n+        String callerUserCrn = checkUserCrn();\n+        LOGGER.debug(\"getKeytab() request for environmentCrn={}, callerUserCrn={}, targetUserCrn={}\", environmentCrn, callerUserCrn, targetUserCrn);\n+        // TODO For now, we ignore the optional targetUserCrn and only allow retrieving keytab for the calling user. When\n+        //      we later enable this, we need to make sure that the calling has the necessary authorization / right to get", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a754e4a9b0330ce3840214f1babed1e87c1de9a9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU3MzcwOnYy", "diffSide": "RIGHT", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/UserV1Endpoint.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODozMzozM1rOFw8SXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo1MDoyOVrOFz789w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MzcwOQ==", "bodyText": "I think this should be in KerberosMgmtV1Endpoint. What do you think @handavid ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r386863709", "createdAt": "2020-03-03T08:33:33Z", "author": {"login": "lacikaaa"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/UserV1Endpoint.java", "diffHunk": "@@ -52,4 +52,11 @@\n     @ApiOperation(value = UserOperationDescriptions.SYNC_OPERATION_STATUS, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n             nickname = \"getSyncOperationStatusV1\")\n     SyncOperationStatus getSyncOperationStatus(@NotNull @QueryParam(\"operationId\") String operationId);\n+\n+    @GET\n+    @Path(\"getKeytab\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = UserOperationDescriptions.GET_KEYTAB, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n+            nickname = \"getKeytabV1\")\n+    String getKeytab(@NotNull @QueryParam(\"environment\") String environment, @QueryParam(\"user\") String user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a754e4a9b0330ce3840214f1babed1e87c1de9a9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwMDY3OQ==", "bodyText": "@jamisonbennett", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r386900679", "createdAt": "2020-03-03T09:41:49Z", "author": {"login": "lacikaaa"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/UserV1Endpoint.java", "diffHunk": "@@ -52,4 +52,11 @@\n     @ApiOperation(value = UserOperationDescriptions.SYNC_OPERATION_STATUS, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n             nickname = \"getSyncOperationStatusV1\")\n     SyncOperationStatus getSyncOperationStatus(@NotNull @QueryParam(\"operationId\") String operationId);\n+\n+    @GET\n+    @Path(\"getKeytab\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = UserOperationDescriptions.GET_KEYTAB, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n+            nickname = \"getKeytabV1\")\n+    String getKeytab(@NotNull @QueryParam(\"environment\") String environment, @QueryParam(\"user\") String user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MzcwOQ=="}, "originalCommit": {"oid": "a754e4a9b0330ce3840214f1babed1e87c1de9a9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMzYwMA==", "bodyText": "Since this endpoint is tied to user in ums, I think this place is fine too. Happy to change if I'm outvoted though :)", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r387313600", "createdAt": "2020-03-03T21:47:44Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/UserV1Endpoint.java", "diffHunk": "@@ -52,4 +52,11 @@\n     @ApiOperation(value = UserOperationDescriptions.SYNC_OPERATION_STATUS, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n             nickname = \"getSyncOperationStatusV1\")\n     SyncOperationStatus getSyncOperationStatus(@NotNull @QueryParam(\"operationId\") String operationId);\n+\n+    @GET\n+    @Path(\"getKeytab\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = UserOperationDescriptions.GET_KEYTAB, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n+            nickname = \"getKeytabV1\")\n+    String getKeytab(@NotNull @QueryParam(\"environment\") String environment, @QueryParam(\"user\") String user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MzcwOQ=="}, "originalCommit": {"oid": "a754e4a9b0330ce3840214f1babed1e87c1de9a9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzM4Mg==", "bodyText": "Thanks for making these contributions, I have a couple of thoughts on this which you may have already considered. Sorry for the lengthy comment.\nFirst, its cool how this is an HTTP get. It looks like you have lots of logic that creates a keytab without using the public FreeIPA API to retrieve the keytab. I am quite intrigued at how you were able to do this. I think the public FreeIPA get keytab API for user principals updates the KVNO every time. \ud83d\ude04\nAs an aside, avoiding incrementing the KVNO for users is one of the features the TGT generator provides. The TGT generator creates service principals for users. For example, principal myuser/cluster1.cloudera.site@CLOUDERA.SITE will be used rather than myuser@CLOUDERA.SITE. In both cases, the principal will be mapped hadoop user myuser. This was done because only service principals could be retrieved without invalidating prior keytabs. I am not sure if this is something that would be useful to know more about but reach out to me if it is and I can provide you with the design documentation.\nSecond, although this only is able to retrieve the keytab for a specific user, I think the KerberosMgmtV1Endpoint is a more logical location for the code. That endpoint already handles keytabs for service principals and host principals. At some point, we may have a need for user principals.\nThrid, I think the other keytab API calls returned a vault path with the principal and the keytab. Vault should probably be used. The data in vault was base64 encoded.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388603382", "createdAt": "2020-03-05T22:26:21Z", "author": {"login": "jamisonbennett"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/UserV1Endpoint.java", "diffHunk": "@@ -52,4 +52,11 @@\n     @ApiOperation(value = UserOperationDescriptions.SYNC_OPERATION_STATUS, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n             nickname = \"getSyncOperationStatusV1\")\n     SyncOperationStatus getSyncOperationStatus(@NotNull @QueryParam(\"operationId\") String operationId);\n+\n+    @GET\n+    @Path(\"getKeytab\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = UserOperationDescriptions.GET_KEYTAB, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n+            nickname = \"getKeytabV1\")\n+    String getKeytab(@NotNull @QueryParam(\"environment\") String environment, @QueryParam(\"user\") String user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MzcwOQ=="}, "originalCommit": {"oid": "a754e4a9b0330ce3840214f1babed1e87c1de9a9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwODkxOA==", "bodyText": "I'll defer to Jamison here regarding keytab generation. Based on his comments, I think that this API probably belongs next to the other keytab APIs", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388708918", "createdAt": "2020-03-06T04:33:21Z", "author": {"login": "handavid"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/UserV1Endpoint.java", "diffHunk": "@@ -52,4 +52,11 @@\n     @ApiOperation(value = UserOperationDescriptions.SYNC_OPERATION_STATUS, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n             nickname = \"getSyncOperationStatusV1\")\n     SyncOperationStatus getSyncOperationStatus(@NotNull @QueryParam(\"operationId\") String operationId);\n+\n+    @GET\n+    @Path(\"getKeytab\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = UserOperationDescriptions.GET_KEYTAB, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n+            nickname = \"getKeytabV1\")\n+    String getKeytab(@NotNull @QueryParam(\"environment\") String environment, @QueryParam(\"user\") String user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MzcwOQ=="}, "originalCommit": {"oid": "a754e4a9b0330ce3840214f1babed1e87c1de9a9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2NDQ3NA==", "bodyText": "We do not use the public FreeIPA APIs. We have the password hashes in the control plane and we just package them in a keytab format. We use kvno 0 which works with an arbitrary kvno in the kdc. Asif did a POC before sending this out.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r389464474", "createdAt": "2020-03-09T05:02:40Z", "author": {"login": "giladwolff"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/UserV1Endpoint.java", "diffHunk": "@@ -52,4 +52,11 @@\n     @ApiOperation(value = UserOperationDescriptions.SYNC_OPERATION_STATUS, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n             nickname = \"getSyncOperationStatusV1\")\n     SyncOperationStatus getSyncOperationStatus(@NotNull @QueryParam(\"operationId\") String operationId);\n+\n+    @GET\n+    @Path(\"getKeytab\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = UserOperationDescriptions.GET_KEYTAB, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n+            nickname = \"getKeytabV1\")\n+    String getKeytab(@NotNull @QueryParam(\"environment\") String environment, @QueryParam(\"user\") String user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MzcwOQ=="}, "originalCommit": {"oid": "a754e4a9b0330ce3840214f1babed1e87c1de9a9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMzk1OQ==", "bodyText": "Thanks for looking Jamison. I've moved it to KerberosMgmtV1Endpoint As mentioned this work is heavily tied with 'syncing password hash' feature that others have worked on in the past. Some more details about this approach can be found on the design doc here:\nhttps://docs.google.com/document/d/1-M9-WD0SGBNMsnJbZtXTMmrh0EHRG8tGVYUlIR64byg\nCan we use a string and not a vault path, for now at least? This will be exposed as a public endpoint in environments2 api service in thunderhead and we don't have vault integration there yet. I can file jira to look into it, but I'd rather do it as a follow up.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r390003959", "createdAt": "2020-03-09T22:50:29Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/UserV1Endpoint.java", "diffHunk": "@@ -52,4 +52,11 @@\n     @ApiOperation(value = UserOperationDescriptions.SYNC_OPERATION_STATUS, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n             nickname = \"getSyncOperationStatusV1\")\n     SyncOperationStatus getSyncOperationStatus(@NotNull @QueryParam(\"operationId\") String operationId);\n+\n+    @GET\n+    @Path(\"getKeytab\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = UserOperationDescriptions.GET_KEYTAB, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n+            nickname = \"getKeytabV1\")\n+    String getKeytab(@NotNull @QueryParam(\"environment\") String environment, @QueryParam(\"user\") String user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MzcwOQ=="}, "originalCommit": {"oid": "a754e4a9b0330ce3840214f1babed1e87c1de9a9"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU4NTc3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODozNzo1MVrOFw8aGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0NTozM1rOFxXrZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NTY5MA==", "bodyText": "We might take of that targetUserCrn from the API and add it when we support it, as it won't be a breaking change. If we keep this way I think we should not throw an exception when target and caller crn are the same.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r386865690", "createdAt": "2020-03-03T08:37:51Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -98,6 +102,19 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    public String getKeytab(@NotNull String environmentCrn, String targetUserCrn) {\n+        String callerUserCrn = checkUserCrn();\n+        LOGGER.debug(\"getKeytab() request for environmentCrn={}, callerUserCrn={}, targetUserCrn={}\", environmentCrn, callerUserCrn, targetUserCrn);\n+        // TODO For now, we ignore the optional targetUserCrn and only allow retrieving keytab for the calling user. When\n+        //      we later enable this, we need to make sure that the calling has the necessary authorization / right to get\n+        //      keytab for another user.\n+        if (targetUserCrn != null) {\n+            throw new BadRequestException(\"Retrieving a keytab for another user is not yet supported\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a754e4a9b0330ce3840214f1babed1e87c1de9a9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMjQ4NA==", "bodyText": "Good point, I've updated to not throw when target is same.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r387312484", "createdAt": "2020-03-03T21:45:33Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -98,6 +102,19 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    public String getKeytab(@NotNull String environmentCrn, String targetUserCrn) {\n+        String callerUserCrn = checkUserCrn();\n+        LOGGER.debug(\"getKeytab() request for environmentCrn={}, callerUserCrn={}, targetUserCrn={}\", environmentCrn, callerUserCrn, targetUserCrn);\n+        // TODO For now, we ignore the optional targetUserCrn and only allow retrieving keytab for the calling user. When\n+        //      we later enable this, we need to make sure that the calling has the necessary authorization / right to get\n+        //      keytab for another user.\n+        if (targetUserCrn != null) {\n+            throw new BadRequestException(\"Retrieving a keytab for another user is not yet supported\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NTY5MA=="}, "originalCommit": {"oid": "a754e4a9b0330ce3840214f1babed1e87c1de9a9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzYzNzkzOnYy", "diffSide": "RIGHT", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/doc/UserOperationDescriptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoyNzozMFrOFymfxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo1MTo0MlrOFz7-Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzg0Nw==", "bodyText": "You should also probably mention that the data is base64 encoded and that is is a vault path (assuming you make the vault change).", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388603847", "createdAt": "2020-03-05T22:27:30Z", "author": {"login": "jamisonbennett"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/doc/UserOperationDescriptions.java", "diffHunk": "@@ -5,6 +5,7 @@\n     public static final String SYNC_ALL = \"Synchronizes Groups and Users to the FreeIPA servers\";\n     public static final String SET_PASSWORD = \"Sets the user's password in the FreeIPA servers\";\n     public static final String SYNC_OPERATION_STATUS = \"Gets the status of a sync operation\";\n+    public static final String GET_KEYTAB = \"Gets a keytab as a base64 encoded string for a User under a specified Environment\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDMyMg==", "bodyText": "As mentioned, I'd like to not go with vault path for now and just return the base64 string directly.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r390004322", "createdAt": "2020-03-09T22:51:42Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/doc/UserOperationDescriptions.java", "diffHunk": "@@ -5,6 +5,7 @@\n     public static final String SYNC_ALL = \"Synchronizes Groups and Users to the FreeIPA servers\";\n     public static final String SET_PASSWORD = \"Sets the user's password in the FreeIPA servers\";\n     public static final String SYNC_OPERATION_STATUS = \"Gets the status of a sync operation\";\n+    public static final String GET_KEYTAB = \"Gets a keytab as a base64 encoded string for a User under a specified Environment\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzg0Nw=="}, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzY0NjY4OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjozMDo1M1rOFymkyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjozMDo1M1rOFymkyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwNTEzMA==", "bodyText": "nit: \"yet\" is probably not needed.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388605130", "createdAt": "2020-03-05T22:30:53Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -107,6 +111,19 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    public String getKeytab(@NotNull String environmentCrn, String targetUserCrn) {\n+        String callerUserCrn = checkUserCrn();\n+        LOGGER.debug(\"getKeytab() request for environmentCrn={}, callerUserCrn={}, targetUserCrn={}\", environmentCrn, callerUserCrn, targetUserCrn);\n+        // TODO For now, we ignore the optional targetUserCrn and only allow retrieving keytab for the calling user. When\n+        //      we later enable this, we need to make sure that the calling user has the necessary authorization / right to get\n+        //      keytab for another user.\n+        if (targetUserCrn != null && !callerUserCrn.equals(targetUserCrn)) {\n+            throw new BadRequestException(\"Retrieving a keytab for another user is not yet supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzY0ODk2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserKeytabService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjozMTo1MVrOFymmJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDozOTowMFrOFys-EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwNTQ3OA==", "bodyText": "I am glad to see you using the IAM service here rather than FREEIPA. I had to make a similar correction today \ud83d\ude04", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388605478", "createdAt": "2020-03-05T22:31:51Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserKeytabService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetActorWorkloadCredentialsResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.auth.security.InternalCrnBuilder;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.controller.exception.BadRequestException;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfig;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfigRepository;\n+import com.sequenceiq.freeipa.service.freeipa.user.kerberos.UserKeytabGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.sequenceiq.freeipa.controller.exception.NotFoundException.notFound;\n+\n+@Service\n+public class UserKeytabService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserKeytabService.class);\n+\n+    private static final String IAM_INTERNAL_ACTOR_CRN = new InternalCrnBuilder(Crn.Service.IAM).getInternalCrnForServiceAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTkwNQ==", "bodyText": "we had a talk ;)", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388709905", "createdAt": "2020-03-06T04:39:00Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserKeytabService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetActorWorkloadCredentialsResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.auth.security.InternalCrnBuilder;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.controller.exception.BadRequestException;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfig;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfigRepository;\n+import com.sequenceiq.freeipa.service.freeipa.user.kerberos.UserKeytabGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.sequenceiq.freeipa.controller.exception.NotFoundException.notFound;\n+\n+@Service\n+public class UserKeytabService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserKeytabService.class);\n+\n+    private static final String IAM_INTERNAL_ACTOR_CRN = new InternalCrnBuilder(Crn.Service.IAM).getInternalCrnForServiceAsString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwNTQ3OA=="}, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzcyODY3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/kerberos/UserKeytabGenerator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzowMjo1MlrOFynUlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo1OTo0OFrOFz8IWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNzM2NA==", "bodyText": "This is interesting that the value of 0 always works.\nAt one point, I had tested the kvno and every time the public FreeIPA API was called to get a user keytab, the KVNO incremented and the old keytab would stop working. Maybe the first KVNO that is issued by the public FreeIPA API is 1 and thus 0 can still be treated specially. You might want to double check this to ensure the user's keytab can't be invalidated (although I suppose we are not calling that API today so maybe its a don't care).\nI believe that at one point @toddlipcon worked on a way to get user keytabs without invalidating them. Is this the same process? I am pretty curious about this.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388617364", "createdAt": "2020-03-05T23:02:52Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/kerberos/UserKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sequenceiq.freeipa.service.freeipa.user.kerberos;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.kerby.kerberos.kerb.keytab.Keytab;\n+import org.apache.kerby.kerberos.kerb.keytab.KeytabEntry;\n+import org.apache.kerby.kerberos.kerb.type.KerberosTime;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionKey;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionType;\n+import org.apache.kerby.kerberos.kerb.type.base.PrincipalName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Kerberos keytab generator - This class is repsonsible for generating a keytab using existing keys\n+ * belonging to an actor in User Management Service.\n+ */\n+@Component\n+public class UserKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserKeytabGenerator.class);\n+\n+    // For the key version number (kvno) in the keytab entries, we use a value of 0. Based on\n+    // expirementiation we've found that for user principles, keytab entries with kvno of zero\n+    // works fine, regardless of what the actual key versions are set in the KDC / Directory Server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MDYzNQ==", "bodyText": "I think you might have already gotten the answer elsewhere, but yea, this builds on work that Gilad (I think) did in the UMS which can produce keytabs for users. That work, in turn, builds on the stuff we worked on a few months back where the UMS stores the hashed password and kerberos principal keys for users locally for password sync purposes. Given that the UMS has the kerberos principal keys, it's just a file formatting exercise to embed those keys into a keytab file, with no FreeIPA instance in the loop at all. (in fact this API should work even if there is no environment created)", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r389060635", "createdAt": "2020-03-06T18:10:06Z", "author": {"login": "toddlipcon"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/kerberos/UserKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sequenceiq.freeipa.service.freeipa.user.kerberos;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.kerby.kerberos.kerb.keytab.Keytab;\n+import org.apache.kerby.kerberos.kerb.keytab.KeytabEntry;\n+import org.apache.kerby.kerberos.kerb.type.KerberosTime;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionKey;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionType;\n+import org.apache.kerby.kerberos.kerb.type.base.PrincipalName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Kerberos keytab generator - This class is repsonsible for generating a keytab using existing keys\n+ * belonging to an actor in User Management Service.\n+ */\n+@Component\n+public class UserKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserKeytabGenerator.class);\n+\n+    // For the key version number (kvno) in the keytab entries, we use a value of 0. Based on\n+    // expirementiation we've found that for user principles, keytab entries with kvno of zero\n+    // works fine, regardless of what the actual key versions are set in the KDC / Directory Server.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNzM2NA=="}, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNTgzNw==", "bodyText": "Just a bit more info, my original comment on kvno = 0 here maybe a bit misleading. As per my testing, the key version number didn't matter and I don't think 0 is special. Setting this to an arbitrary number like 42 would probably still work (though a bulk of my testing was using kvno = 0).\nUsing FreeIPA API is get keytab for user principles, generates new keys and updates the KDC with the new keys and increments the key version number (even if you use the same password; new random salts get used, resulting in different keys). So the older keytab getting invalidated is due to keys not matching and nothing to do with key version numbers. As Todd mentioned since we have keys already in UMS we use those as the basis for the keytab.\nAnother thing to note, based on above; any keytab a user gets using this api will still get invalidated if the user were to later call ipa-getkeytab directly (but would start working again after user sync occurs). So we should discourage any user from using this ipa-getkeytab or trying to get the keytab by other means outside the api we provide.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r390005837", "createdAt": "2020-03-09T22:56:34Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/kerberos/UserKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sequenceiq.freeipa.service.freeipa.user.kerberos;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.kerby.kerberos.kerb.keytab.Keytab;\n+import org.apache.kerby.kerberos.kerb.keytab.KeytabEntry;\n+import org.apache.kerby.kerberos.kerb.type.KerberosTime;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionKey;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionType;\n+import org.apache.kerby.kerberos.kerb.type.base.PrincipalName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Kerberos keytab generator - This class is repsonsible for generating a keytab using existing keys\n+ * belonging to an actor in User Management Service.\n+ */\n+@Component\n+public class UserKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserKeytabGenerator.class);\n+\n+    // For the key version number (kvno) in the keytab entries, we use a value of 0. Based on\n+    // expirementiation we've found that for user principles, keytab entries with kvno of zero\n+    // works fine, regardless of what the actual key versions are set in the KDC / Directory Server.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNzM2NA=="}, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjg3NA==", "bodyText": "Also, this API still requires an environment, because we need the realm inside the keytab. In order to generate the keytab, we perform a lookup of the realm based on environment.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r390006874", "createdAt": "2020-03-09T22:59:48Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/kerberos/UserKeytabGenerator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sequenceiq.freeipa.service.freeipa.user.kerberos;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import org.apache.kerby.kerberos.kerb.keytab.Keytab;\n+import org.apache.kerby.kerberos.kerb.keytab.KeytabEntry;\n+import org.apache.kerby.kerberos.kerb.type.KerberosTime;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionKey;\n+import org.apache.kerby.kerberos.kerb.type.base.EncryptionType;\n+import org.apache.kerby.kerberos.kerb.type.base.PrincipalName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Kerberos keytab generator - This class is repsonsible for generating a keytab using existing keys\n+ * belonging to an actor in User Management Service.\n+ */\n+@Component\n+public class UserKeytabGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserKeytabGenerator.class);\n+\n+    // For the key version number (kvno) in the keytab entries, we use a value of 0. Based on\n+    // expirementiation we've found that for user principles, keytab entries with kvno of zero\n+    // works fine, regardless of what the actual key versions are set in the KDC / Directory Server.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNzM2NA=="}, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM0MTg0OnYy", "diffSide": "RIGHT", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/UserV1Endpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDozMzo1N1rOFys6pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDozMzo1N1rOFys6pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTAzMA==", "bodyText": "if the query params are CRNs, then let's include CRN in the names. e.g., environmentCrn", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388709030", "createdAt": "2020-03-06T04:33:57Z", "author": {"login": "handavid"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/UserV1Endpoint.java", "diffHunk": "@@ -52,4 +52,11 @@\n     @ApiOperation(value = UserOperationDescriptions.SYNC_OPERATION_STATUS, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n             nickname = \"getSyncOperationStatusV1\")\n     SyncOperationStatus getSyncOperationStatus(@NotNull @QueryParam(\"operationId\") String operationId);\n+\n+    @GET\n+    @Path(\"getKeytab\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = UserOperationDescriptions.GET_KEYTAB, notes = UserNotes.USER_NOTES, produces = MediaType.APPLICATION_JSON,\n+            nickname = \"getKeytabV1\")\n+    String getKeytab(@NotNull @QueryParam(\"environment\") String environment, @QueryParam(\"user\") String user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM0NjM2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDozODoyOFrOFys9oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzoxMzowMlrOFz8ZOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTc5Mg==", "bodyText": "based on the expected future use-case, we should require the targetUserCrn field. i.e., mark it @NotNull.\nAs a design principle, we do not want to pull request arguments out of the actor or other metadata. All required information should be in the request itself. (yes, a bunch of the other APIs violate this but I'll fix this in the v2 API)\ncan we rename callerUserCrn to actorCrn?\nwe can keep the actorCrn.equals(targetUserCrn) check as a faux authorization check for now.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388709792", "createdAt": "2020-03-06T04:38:28Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -107,6 +111,19 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    public String getKeytab(@NotNull String environmentCrn, String targetUserCrn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMTE5Mg==", "bodyText": "Done. I've also renamed to actorCrn (I wonder if we should rename ThreadBasedUserCrnProvider -> ThreadBasedActorrCrnProvider).", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r390011192", "createdAt": "2020-03-09T23:13:02Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -107,6 +111,19 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    public String getKeytab(@NotNull String environmentCrn, String targetUserCrn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTc5Mg=="}, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM1MDY0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0MjoxMFrOFytALw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0MjoxMFrOFytALw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDQ0Nw==", "bodyText": "call this with the targetUserCrn rather than the actorCrn. The actorCrn will be available to other code in through the ThreadBasedUserCrnProvider (I think I remembered that correctly)", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388710447", "createdAt": "2020-03-06T04:42:10Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -107,6 +111,19 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    public String getKeytab(@NotNull String environmentCrn, String targetUserCrn) {\n+        String callerUserCrn = checkUserCrn();\n+        LOGGER.debug(\"getKeytab() request for environmentCrn={}, callerUserCrn={}, targetUserCrn={}\", environmentCrn, callerUserCrn, targetUserCrn);\n+        // TODO For now, we ignore the optional targetUserCrn and only allow retrieving keytab for the calling user. When\n+        //      we later enable this, we need to make sure that the calling user has the necessary authorization / right to get\n+        //      keytab for another user.\n+        if (targetUserCrn != null && !callerUserCrn.equals(targetUserCrn)) {\n+            throw new BadRequestException(\"Retrieving a keytab for another user is not yet supported\");\n+        }\n+        return userKeytabService.getKeytabBase64(callerUserCrn, environmentCrn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM1MjcxOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserKeytabService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0Mzo1MlrOFytBcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0Mzo1MlrOFytBcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDc2OA==", "bodyText": "Crn.safeFromString instead of Objects.requireNonNull", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388710768", "createdAt": "2020-03-06T04:43:52Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserKeytabService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetActorWorkloadCredentialsResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.auth.security.InternalCrnBuilder;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.controller.exception.BadRequestException;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfig;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfigRepository;\n+import com.sequenceiq.freeipa.service.freeipa.user.kerberos.UserKeytabGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.sequenceiq.freeipa.controller.exception.NotFoundException.notFound;\n+\n+@Service\n+public class UserKeytabService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserKeytabService.class);\n+\n+    private static final String IAM_INTERNAL_ACTOR_CRN = new InternalCrnBuilder(Crn.Service.IAM).getInternalCrnForServiceAsString();\n+\n+    @Inject\n+    private KerberosConfigRepository kerberosConfigRepository;\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    @Inject\n+    private UserKeytabGenerator userKeytabGenerator;\n+\n+    private String getKerberosRealm(String accountId, String environmentCrn) {\n+        KerberosConfig krbConfig =  kerberosConfigRepository\n+                .findByAccountIdAndEnvironmentCrnAndClusterNameIsNull(accountId, environmentCrn)\n+                .orElseThrow(notFound(\"KerberosConfig for environment\", environmentCrn));\n+        return krbConfig.getRealm();\n+    }\n+\n+    private void validateSameAccount(String userAccountId, String environmentCrn) {\n+        String environmentCrnAccountId = Objects.requireNonNull(Crn.fromString(environmentCrn)).getAccountId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM1Mjk5OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserKeytabService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0NDowOVrOFytBnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0NDowOVrOFytBnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDgxMw==", "bodyText": "Crn.safeFromString instead of Objects.requireNonNull", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388710813", "createdAt": "2020-03-06T04:44:09Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserKeytabService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetActorWorkloadCredentialsResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.auth.security.InternalCrnBuilder;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.controller.exception.BadRequestException;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfig;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfigRepository;\n+import com.sequenceiq.freeipa.service.freeipa.user.kerberos.UserKeytabGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.sequenceiq.freeipa.controller.exception.NotFoundException.notFound;\n+\n+@Service\n+public class UserKeytabService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserKeytabService.class);\n+\n+    private static final String IAM_INTERNAL_ACTOR_CRN = new InternalCrnBuilder(Crn.Service.IAM).getInternalCrnForServiceAsString();\n+\n+    @Inject\n+    private KerberosConfigRepository kerberosConfigRepository;\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    @Inject\n+    private UserKeytabGenerator userKeytabGenerator;\n+\n+    private String getKerberosRealm(String accountId, String environmentCrn) {\n+        KerberosConfig krbConfig =  kerberosConfigRepository\n+                .findByAccountIdAndEnvironmentCrnAndClusterNameIsNull(accountId, environmentCrn)\n+                .orElseThrow(notFound(\"KerberosConfig for environment\", environmentCrn));\n+        return krbConfig.getRealm();\n+    }\n+\n+    private void validateSameAccount(String userAccountId, String environmentCrn) {\n+        String environmentCrnAccountId = Objects.requireNonNull(Crn.fromString(environmentCrn)).getAccountId();\n+        if (!environmentCrnAccountId.equals(userAccountId)) {\n+            throw new BadRequestException(\"User and Environment must be in the same account\");\n+        }\n+    }\n+\n+    public String getKeytabBase64(String userCrn, String environmentCrn) {\n+        String userAccountId = Objects.requireNonNull(Crn.fromString(userCrn)).getAccountId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM1NTE2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserKeytabService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0NjowM1rOFytC7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzoxOTo0M1rOFz8hwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMTE0OA==", "bodyText": "can you throw a more meaningful exception? perhaps make a custom exception so that we can map it to a response code in the api layer", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388711148", "createdAt": "2020-03-06T04:46:03Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserKeytabService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetActorWorkloadCredentialsResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.auth.security.InternalCrnBuilder;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.controller.exception.BadRequestException;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfig;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfigRepository;\n+import com.sequenceiq.freeipa.service.freeipa.user.kerberos.UserKeytabGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.sequenceiq.freeipa.controller.exception.NotFoundException.notFound;\n+\n+@Service\n+public class UserKeytabService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserKeytabService.class);\n+\n+    private static final String IAM_INTERNAL_ACTOR_CRN = new InternalCrnBuilder(Crn.Service.IAM).getInternalCrnForServiceAsString();\n+\n+    @Inject\n+    private KerberosConfigRepository kerberosConfigRepository;\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    @Inject\n+    private UserKeytabGenerator userKeytabGenerator;\n+\n+    private String getKerberosRealm(String accountId, String environmentCrn) {\n+        KerberosConfig krbConfig =  kerberosConfigRepository\n+                .findByAccountIdAndEnvironmentCrnAndClusterNameIsNull(accountId, environmentCrn)\n+                .orElseThrow(notFound(\"KerberosConfig for environment\", environmentCrn));\n+        return krbConfig.getRealm();\n+    }\n+\n+    private void validateSameAccount(String userAccountId, String environmentCrn) {\n+        String environmentCrnAccountId = Objects.requireNonNull(Crn.fromString(environmentCrn)).getAccountId();\n+        if (!environmentCrnAccountId.equals(userAccountId)) {\n+            throw new BadRequestException(\"User and Environment must be in the same account\");\n+        }\n+    }\n+\n+    public String getKeytabBase64(String userCrn, String environmentCrn) {\n+        String userAccountId = Objects.requireNonNull(Crn.fromString(userCrn)).getAccountId();\n+        validateSameAccount(userAccountId, environmentCrn);\n+\n+        String realm = getKerberosRealm(userAccountId, environmentCrn);\n+\n+        GetActorWorkloadCredentialsResponse getActorWorkloadCredentialsResponse =\n+                grpcUmsClient.getActorWorkloadCredentials(IAM_INTERNAL_ACTOR_CRN, userCrn, MDCUtils.getRequestId());\n+        String workloadUsername = getActorWorkloadCredentialsResponse.getWorkloadUsername();\n+        List<ActorKerberosKey> actorKerberosKeys = getActorWorkloadCredentialsResponse.getKerberosKeysList();\n+\n+        try {\n+            return userKeytabGenerator.generateKeytabBase64(workloadUsername, realm, actorKerberosKeys);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to generate keytab\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMzM3Nw==", "bodyText": "I've moved the exception handling into UserKeytabGenerator. I don't see how the IOException will ever trigger since we're passing our own ByteArrayOutputStream rather than doing file i/o. So I don't think a custom exception here is warranted.", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r390013377", "createdAt": "2020-03-09T23:19:43Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UserKeytabService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetActorWorkloadCredentialsResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ActorKerberosKey;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.auth.security.InternalCrnBuilder;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.controller.exception.BadRequestException;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfig;\n+import com.sequenceiq.freeipa.kerberos.KerberosConfigRepository;\n+import com.sequenceiq.freeipa.service.freeipa.user.kerberos.UserKeytabGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.sequenceiq.freeipa.controller.exception.NotFoundException.notFound;\n+\n+@Service\n+public class UserKeytabService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserKeytabService.class);\n+\n+    private static final String IAM_INTERNAL_ACTOR_CRN = new InternalCrnBuilder(Crn.Service.IAM).getInternalCrnForServiceAsString();\n+\n+    @Inject\n+    private KerberosConfigRepository kerberosConfigRepository;\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    @Inject\n+    private UserKeytabGenerator userKeytabGenerator;\n+\n+    private String getKerberosRealm(String accountId, String environmentCrn) {\n+        KerberosConfig krbConfig =  kerberosConfigRepository\n+                .findByAccountIdAndEnvironmentCrnAndClusterNameIsNull(accountId, environmentCrn)\n+                .orElseThrow(notFound(\"KerberosConfig for environment\", environmentCrn));\n+        return krbConfig.getRealm();\n+    }\n+\n+    private void validateSameAccount(String userAccountId, String environmentCrn) {\n+        String environmentCrnAccountId = Objects.requireNonNull(Crn.fromString(environmentCrn)).getAccountId();\n+        if (!environmentCrnAccountId.equals(userAccountId)) {\n+            throw new BadRequestException(\"User and Environment must be in the same account\");\n+        }\n+    }\n+\n+    public String getKeytabBase64(String userCrn, String environmentCrn) {\n+        String userAccountId = Objects.requireNonNull(Crn.fromString(userCrn)).getAccountId();\n+        validateSameAccount(userAccountId, environmentCrn);\n+\n+        String realm = getKerberosRealm(userAccountId, environmentCrn);\n+\n+        GetActorWorkloadCredentialsResponse getActorWorkloadCredentialsResponse =\n+                grpcUmsClient.getActorWorkloadCredentials(IAM_INTERNAL_ACTOR_CRN, userCrn, MDCUtils.getRequestId());\n+        String workloadUsername = getActorWorkloadCredentialsResponse.getWorkloadUsername();\n+        List<ActorKerberosKey> actorKerberosKeys = getActorWorkloadCredentialsResponse.getKerberosKeysList();\n+\n+        try {\n+            return userKeytabGenerator.generateKeytabBase64(workloadUsername, realm, actorKerberosKeys);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to generate keytab\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMTE0OA=="}, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM1NTk0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/kerberos/KrbKeySetEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0NjozNlrOFytDYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzoxOTo1NlrOFz8h9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMTI2Nw==", "bodyText": "thank you!", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r388711267", "createdAt": "2020-03-06T04:46:36Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/kerberos/KrbKeySetEncoder.java", "diffHunk": "@@ -1,4 +1,4 @@\n-package com.sequenceiq.freeipa.util;\n+package com.sequenceiq.freeipa.service.freeipa.user.kerberos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMzQzMQ==", "bodyText": "np! :)", "url": "https://github.com/hortonworks/cloudbreak/pull/7345#discussion_r390013431", "createdAt": "2020-03-09T23:19:56Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/kerberos/KrbKeySetEncoder.java", "diffHunk": "@@ -1,4 +1,4 @@\n-package com.sequenceiq.freeipa.util;\n+package com.sequenceiq.freeipa.service.freeipa.user.kerberos;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMTI2Nw=="}, "originalCommit": {"oid": "96f885d6c58bf64599edb274845fd2f2ea4b2de0"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2757, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}