{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NDAzOTQ2", "number": 8370, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo1NjoyMlrOEH4LjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNjoxOFrOEH5FTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Njk1OTQ4OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/action/v4/environment/AbstractEnvironmentAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo1NjoyMlrOGnf3JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxMDoyMFrOGngZAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2OTY2OQ==", "bodyText": "typo in maxrety", "url": "https://github.com/hortonworks/cloudbreak/pull/8370#discussion_r444069669", "createdAt": "2020-06-23T08:56:22Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/action/v4/environment/AbstractEnvironmentAction.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sequenceiq.it.cloudbreak.action.v4.environment;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.it.cloudbreak.EnvironmentClient;\n+import com.sequenceiq.it.cloudbreak.action.Action;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n+import com.sequenceiq.it.cloudbreak.util.wait.WaitUtil;\n+\n+public abstract class AbstractEnvironmentAction implements Action<EnvironmentTestDto, EnvironmentClient> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractEnvironmentAction.class);\n+\n+    @Override\n+    public EnvironmentTestDto action(TestContext testContext, EnvironmentTestDto testDto, EnvironmentClient client) throws Exception {\n+        int retries = 0;\n+        while (retries <= testDto.getWaitUtil().getMaxRetry()) {\n+            try {\n+                return environmentAction(testContext, testDto, client);\n+            } catch (Exception e) {\n+                LOGGER.info(\"Exception during executing Environment action: \", e);\n+                if (e.getMessage().contains(\"flow under operation\")) {\n+                    waitTillFlowInOperation(testDto.getWaitUtil());\n+                    retries++;\n+                } else {\n+                    throw e;\n+                }\n+            }\n+        }\n+        throw new Exception(\"Exception during executing Environment action: exceeding maxrety during waiting for flow\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882ab3f5b62d5976fb0a45fc51a980bd242071ac"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3ODMzNw==", "bodyText": "good catch! :)", "url": "https://github.com/hortonworks/cloudbreak/pull/8370#discussion_r444078337", "createdAt": "2020-06-23T09:10:20Z", "author": {"login": "bbihari"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/action/v4/environment/AbstractEnvironmentAction.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sequenceiq.it.cloudbreak.action.v4.environment;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.it.cloudbreak.EnvironmentClient;\n+import com.sequenceiq.it.cloudbreak.action.Action;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n+import com.sequenceiq.it.cloudbreak.util.wait.WaitUtil;\n+\n+public abstract class AbstractEnvironmentAction implements Action<EnvironmentTestDto, EnvironmentClient> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractEnvironmentAction.class);\n+\n+    @Override\n+    public EnvironmentTestDto action(TestContext testContext, EnvironmentTestDto testDto, EnvironmentClient client) throws Exception {\n+        int retries = 0;\n+        while (retries <= testDto.getWaitUtil().getMaxRetry()) {\n+            try {\n+                return environmentAction(testContext, testDto, client);\n+            } catch (Exception e) {\n+                LOGGER.info(\"Exception during executing Environment action: \", e);\n+                if (e.getMessage().contains(\"flow under operation\")) {\n+                    waitTillFlowInOperation(testDto.getWaitUtil());\n+                    retries++;\n+                } else {\n+                    throw e;\n+                }\n+            }\n+        }\n+        throw new Exception(\"Exception during executing Environment action: exceeding maxrety during waiting for flow\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2OTY2OQ=="}, "originalCommit": {"oid": "882ab3f5b62d5976fb0a45fc51a980bd242071ac"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzEwNzM1OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/FreeIpaStartStopTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNjoxOFrOGnhV1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDowNjowNVrOGniZpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzkxMQ==", "bodyText": "Unused variable?", "url": "https://github.com/hortonworks/cloudbreak/pull/8370#discussion_r444093911", "createdAt": "2020-06-23T09:36:18Z", "author": {"login": "lnardai"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/FreeIpaStartStopTest.java", "diffHunk": "@@ -20,6 +22,8 @@\n \n public class FreeIpaStartStopTest extends AbstractIntegrationTest {\n \n+    private static final Duration POLLING_INTERVAL = Duration.of(3000, ChronoUnit.MILLIS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36a6efb9c25f51578a18c00f74736532f0d9d24d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExMTI3MA==", "bodyText": "fixed", "url": "https://github.com/hortonworks/cloudbreak/pull/8370#discussion_r444111270", "createdAt": "2020-06-23T10:06:05Z", "author": {"login": "bbihari"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/FreeIpaStartStopTest.java", "diffHunk": "@@ -20,6 +22,8 @@\n \n public class FreeIpaStartStopTest extends AbstractIntegrationTest {\n \n+    private static final Duration POLLING_INTERVAL = Duration.of(3000, ChronoUnit.MILLIS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzkxMQ=="}, "originalCommit": {"oid": "36a6efb9c25f51578a18c00f74736532f0d9d24d"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3158, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}