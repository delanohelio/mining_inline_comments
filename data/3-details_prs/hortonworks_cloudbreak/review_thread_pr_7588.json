{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NzMwNjAw", "number": 7588, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNTo1MzozN1rODoH9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo0MDowMVrODoY31Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAwMTEwOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsNetworkConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNTo1MzozN1rOF2fs-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNTo1MzozN1rOF2fs-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4Njg0MA==", "bodyText": "SubnetSelectorStrategyType could be renamed to filterStrategy as it does not select anymore.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r392686840", "createdAt": "2020-03-15T15:53:37Z", "author": {"login": "keyki"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsNetworkConnector.java", "diffHunk": "@@ -135,18 +142,25 @@ public String getNetworkCidr(Network network, CloudCredential credential) {\n     }\n \n     @Override\n-    public SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters) {\n-        boolean preferPrivate = subnetSelectionParameters.isForDatabase() || subnetSelectionParameters.getTunnel().useCcm();\n+    public SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters) {\n+        boolean preferPrivate = subnetSelectionParameters.isPreferPrivateIfExist() || subnetSelectionParameters.getTunnel().useCcm();\n \n-        SubnetSelectorStrategyType subnetSelectorStrategyType;\n-        if (subnetSelectionParameters.isHa()) {\n-            subnetSelectorStrategyType = preferPrivate ? SubnetSelectorStrategyType.MULTIPLE_PREFER_PRIVATE : SubnetSelectorStrategyType.MULTIPLE_PREFER_PUBLIC;\n-        } else {\n-            subnetSelectorStrategyType = preferPrivate ? SubnetSelectorStrategyType.SINGLE_PREFER_PRIVATE : SubnetSelectorStrategyType.SINGLE_PREFER_PUBLIC;\n-        }\n+        SubnetSelectorStrategyType subnetSelectorStrategyType = preferPrivate ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a05cd080d86f366e0b9131e08bb2ca2d4d2eb3"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAwMjcxOnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNTo1NTo1N1rOF2ft2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMDoyNDoxN1rOF2hEIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzA2Nw==", "bodyText": "We should add a lot more logging to figure out what happens when it's not something that we expect.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r392687067", "createdAt": "2020-03-15T15:55:57Z", "author": {"login": "keyki"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,84 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n \n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n+\n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetSelectionResult.hasResult()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a05cd080d86f366e0b9131e08bb2ca2d4d2eb3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwOTE1Mg==", "bodyText": "yep already mentioned in the PR description", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r392709152", "createdAt": "2020-03-15T20:24:17Z", "author": {"login": "doktoric"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,84 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n \n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n+\n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetSelectionResult.hasResult()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzA2Nw=="}, "originalCommit": {"oid": "45a05cd080d86f366e0b9131e08bb2ca2d4d2eb3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjI3NTE5OnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1MzoxNFrOF21HNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDowODo0NlrOF3ED5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNzYyMA==", "bodyText": "In my opinion a default implementation might not be the best solution. The algorithm here is the AWS implementation. I would suggest an abstract method with cloud-provider specific implementations.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393037620", "createdAt": "2020-03-16T13:53:14Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzOTI0OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393139248", "createdAt": "2020-03-16T16:10:04Z", "author": {"login": "doktoric"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNzYyMA=="}, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI4MjAwNA==", "bodyText": "btw this is the same for mock", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393282004", "createdAt": "2020-03-16T20:07:36Z", "author": {"login": "doktoric"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNzYyMA=="}, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI4MjUzMg==", "bodyText": "I think the default method is fine here becase probably other will use the same except Azure", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393282532", "createdAt": "2020-03-16T20:08:46Z", "author": {"login": "doktoric"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNzYyMA=="}, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjI4Njg3OnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1NjowMlrOF21ObA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozMDoyNVrOF28Jew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzOTQ2OA==", "bodyText": "I prefer return early over indentations - this is, however, a matter of taste.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393039468", "createdAt": "2020-03-16T13:56:02Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetSelectionResult.hasResult()) {\n+            LOGGER.info(\"There are subnets in the subnet selection: {}.\", subnetSelectionResult);\n+            List<CloudSubnet> result = new ArrayList<>();\n+            if (subnetSelectionParameters.isHa()) {\n+                LOGGER.info(\"The request contains HA option: true: {}.\", subnetSelectionParameters);\n+                Map<String, List<CloudSubnet>> groupedSubnetsByAz = groupSubnetsByAz(subnetSelectionResult.getResult());\n+                LOGGER.info(\"The subnets groupped by AZs and the result is: {}.\", groupedSubnetsByAz);\n+                // We dont have enough AZ\n+                if (!isDifferentAzCountEnough(groupedSubnetsByAz)) {\n+                    LOGGER.info(\"There is not enough different AZ in the subnet setup.\");\n+                    return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, groupedSubnetsByAz.keySet().size(), subnetCountInDifferentAzMin()));\n+                } else {\n+                    // We have enough AZ\n+                    for (Map.Entry<String, List<CloudSubnet>> entry : groupedSubnetsByAz.entrySet()) {\n+                        int random = new Random().nextInt(entry.getValue().size());\n+                        CloudSubnet cloudSubnet = entry.getValue().get(random);\n+                        LOGGER.info(\"The selected subnet is: {} by random id {}.\", cloudSubnet, random);\n+                        result.add(cloudSubnet);\n+                        if (result.size() == subnetCountInDifferentAzMax()) {\n+                            LOGGER.info(\"The selection logic already selected enough subnet which is {}.\", result.size());\n+                            break;\n+                        }\n+                    }\n+                }\n+            } else {\n+                int random = new Random().nextInt(subnetSelectionResult.getResult().size());\n+                CloudSubnet cloudSubnet = subnetSelectionResult.getResult().get(random);\n+                LOGGER.info(\"The selected subnet is: {} by random id {}.\", cloudSubnet, random);\n+                result.add(cloudSubnet);\n+            }\n+            LOGGER.info(\"The selected subnets are: {} for the resource provisioning.\", result);\n+            return new SubnetSelectionResult(result);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzOTYzNw==", "bodyText": "If you dont mind I would like to do this way", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393139637", "createdAt": "2020-03-16T16:10:37Z", "author": {"login": "doktoric"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetSelectionResult.hasResult()) {\n+            LOGGER.info(\"There are subnets in the subnet selection: {}.\", subnetSelectionResult);\n+            List<CloudSubnet> result = new ArrayList<>();\n+            if (subnetSelectionParameters.isHa()) {\n+                LOGGER.info(\"The request contains HA option: true: {}.\", subnetSelectionParameters);\n+                Map<String, List<CloudSubnet>> groupedSubnetsByAz = groupSubnetsByAz(subnetSelectionResult.getResult());\n+                LOGGER.info(\"The subnets groupped by AZs and the result is: {}.\", groupedSubnetsByAz);\n+                // We dont have enough AZ\n+                if (!isDifferentAzCountEnough(groupedSubnetsByAz)) {\n+                    LOGGER.info(\"There is not enough different AZ in the subnet setup.\");\n+                    return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, groupedSubnetsByAz.keySet().size(), subnetCountInDifferentAzMin()));\n+                } else {\n+                    // We have enough AZ\n+                    for (Map.Entry<String, List<CloudSubnet>> entry : groupedSubnetsByAz.entrySet()) {\n+                        int random = new Random().nextInt(entry.getValue().size());\n+                        CloudSubnet cloudSubnet = entry.getValue().get(random);\n+                        LOGGER.info(\"The selected subnet is: {} by random id {}.\", cloudSubnet, random);\n+                        result.add(cloudSubnet);\n+                        if (result.size() == subnetCountInDifferentAzMax()) {\n+                            LOGGER.info(\"The selection logic already selected enough subnet which is {}.\", result.size());\n+                            break;\n+                        }\n+                    }\n+                }\n+            } else {\n+                int random = new Random().nextInt(subnetSelectionResult.getResult().size());\n+                CloudSubnet cloudSubnet = subnetSelectionResult.getResult().get(random);\n+                LOGGER.info(\"The selected subnet is: {} by random id {}.\", cloudSubnet, random);\n+                result.add(cloudSubnet);\n+            }\n+            LOGGER.info(\"The selected subnets are: {} for the resource provisioning.\", result);\n+            return new SubnetSelectionResult(result);\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzOTQ2OA=="}, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1Mjg5MQ==", "bodyText": "Yes, I accept that.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393152891", "createdAt": "2020-03-16T16:30:25Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetSelectionResult.hasResult()) {\n+            LOGGER.info(\"There are subnets in the subnet selection: {}.\", subnetSelectionResult);\n+            List<CloudSubnet> result = new ArrayList<>();\n+            if (subnetSelectionParameters.isHa()) {\n+                LOGGER.info(\"The request contains HA option: true: {}.\", subnetSelectionParameters);\n+                Map<String, List<CloudSubnet>> groupedSubnetsByAz = groupSubnetsByAz(subnetSelectionResult.getResult());\n+                LOGGER.info(\"The subnets groupped by AZs and the result is: {}.\", groupedSubnetsByAz);\n+                // We dont have enough AZ\n+                if (!isDifferentAzCountEnough(groupedSubnetsByAz)) {\n+                    LOGGER.info(\"There is not enough different AZ in the subnet setup.\");\n+                    return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, groupedSubnetsByAz.keySet().size(), subnetCountInDifferentAzMin()));\n+                } else {\n+                    // We have enough AZ\n+                    for (Map.Entry<String, List<CloudSubnet>> entry : groupedSubnetsByAz.entrySet()) {\n+                        int random = new Random().nextInt(entry.getValue().size());\n+                        CloudSubnet cloudSubnet = entry.getValue().get(random);\n+                        LOGGER.info(\"The selected subnet is: {} by random id {}.\", cloudSubnet, random);\n+                        result.add(cloudSubnet);\n+                        if (result.size() == subnetCountInDifferentAzMax()) {\n+                            LOGGER.info(\"The selection logic already selected enough subnet which is {}.\", result.size());\n+                            break;\n+                        }\n+                    }\n+                }\n+            } else {\n+                int random = new Random().nextInt(subnetSelectionResult.getResult().size());\n+                CloudSubnet cloudSubnet = subnetSelectionResult.getResult().get(random);\n+                LOGGER.info(\"The selected subnet is: {} by random id {}.\", cloudSubnet, random);\n+                result.add(cloudSubnet);\n+            }\n+            LOGGER.info(\"The selected subnets are: {} for the resource provisioning.\", result);\n+            return new SubnetSelectionResult(result);\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzOTQ2OA=="}, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjI5MDA4OnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1Njo1NFrOF21QgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1Njo1NFrOF21QgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0MDAwMA==", "bodyText": "This else is far from its corresponding if, I would extract methods for ha and non-ha, respectively.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393040000", "createdAt": "2020-03-16T13:56:54Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetSelectionResult.hasResult()) {\n+            LOGGER.info(\"There are subnets in the subnet selection: {}.\", subnetSelectionResult);\n+            List<CloudSubnet> result = new ArrayList<>();\n+            if (subnetSelectionParameters.isHa()) {\n+                LOGGER.info(\"The request contains HA option: true: {}.\", subnetSelectionParameters);\n+                Map<String, List<CloudSubnet>> groupedSubnetsByAz = groupSubnetsByAz(subnetSelectionResult.getResult());\n+                LOGGER.info(\"The subnets groupped by AZs and the result is: {}.\", groupedSubnetsByAz);\n+                // We dont have enough AZ\n+                if (!isDifferentAzCountEnough(groupedSubnetsByAz)) {\n+                    LOGGER.info(\"There is not enough different AZ in the subnet setup.\");\n+                    return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, groupedSubnetsByAz.keySet().size(), subnetCountInDifferentAzMin()));\n+                } else {\n+                    // We have enough AZ\n+                    for (Map.Entry<String, List<CloudSubnet>> entry : groupedSubnetsByAz.entrySet()) {\n+                        int random = new Random().nextInt(entry.getValue().size());\n+                        CloudSubnet cloudSubnet = entry.getValue().get(random);\n+                        LOGGER.info(\"The selected subnet is: {} by random id {}.\", cloudSubnet, random);\n+                        result.add(cloudSubnet);\n+                        if (result.size() == subnetCountInDifferentAzMax()) {\n+                            LOGGER.info(\"The selection logic already selected enough subnet which is {}.\", result.size());\n+                            break;\n+                        }\n+                    }\n+                }\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjI5ODAxOnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1ODo1MlrOF21VrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1ODo1MlrOF21VrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0MTMyNA==", "bodyText": "The corresponding if is an error handling with return. After that I would omit an else to reduce indentations. This is, however, almost a matter of taste, and so do not insist on it to be changed.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393041324", "createdAt": "2020-03-16T13:58:52Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetSelectionResult.hasResult()) {\n+            LOGGER.info(\"There are subnets in the subnet selection: {}.\", subnetSelectionResult);\n+            List<CloudSubnet> result = new ArrayList<>();\n+            if (subnetSelectionParameters.isHa()) {\n+                LOGGER.info(\"The request contains HA option: true: {}.\", subnetSelectionParameters);\n+                Map<String, List<CloudSubnet>> groupedSubnetsByAz = groupSubnetsByAz(subnetSelectionResult.getResult());\n+                LOGGER.info(\"The subnets groupped by AZs and the result is: {}.\", groupedSubnetsByAz);\n+                // We dont have enough AZ\n+                if (!isDifferentAzCountEnough(groupedSubnetsByAz)) {\n+                    LOGGER.info(\"There is not enough different AZ in the subnet setup.\");\n+                    return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, groupedSubnetsByAz.keySet().size(), subnetCountInDifferentAzMin()));\n+                } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjM0MTk2OnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowOToyMFrOF21xfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowOToyMFrOF21xfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0ODQ0NQ==", "bodyText": "This algorithm, if given a map with AZs ordered (that is, keys are: AZ-a, AZ-b, AZ-c .. AZ-n) leads to an uneven distribution of selected AZs and so subnets. It might make sense to select AZs randomly as well.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393048445", "createdAt": "2020-03-16T14:09:20Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetSelectionResult.hasResult()) {\n+            LOGGER.info(\"There are subnets in the subnet selection: {}.\", subnetSelectionResult);\n+            List<CloudSubnet> result = new ArrayList<>();\n+            if (subnetSelectionParameters.isHa()) {\n+                LOGGER.info(\"The request contains HA option: true: {}.\", subnetSelectionParameters);\n+                Map<String, List<CloudSubnet>> groupedSubnetsByAz = groupSubnetsByAz(subnetSelectionResult.getResult());\n+                LOGGER.info(\"The subnets groupped by AZs and the result is: {}.\", groupedSubnetsByAz);\n+                // We dont have enough AZ\n+                if (!isDifferentAzCountEnough(groupedSubnetsByAz)) {\n+                    LOGGER.info(\"There is not enough different AZ in the subnet setup.\");\n+                    return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, groupedSubnetsByAz.keySet().size(), subnetCountInDifferentAzMin()));\n+                } else {\n+                    // We have enough AZ\n+                    for (Map.Entry<String, List<CloudSubnet>> entry : groupedSubnetsByAz.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjM0NDM2OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDoxMDowMFrOF21zFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDoxMDowMFrOF21zFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0ODg1NQ==", "bodyText": "Selection is already done in the NetworkProvider, I would delete the randomization part.\nJust a note: if random subnet selection is introduced, then EnvironmentResponse will change from call to call as subnet selection is run every time a GET environment is invoked.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393048855", "createdAt": "2020-03-16T14:10:00Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -31,9 +31,21 @@ public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlat\n             LOGGER.debug(\"Check failed, returning null\");\n             return null;\n         }\n-        SubnetSelectionResult subnetSelectionResult = cloudPlatformConnectors.get(new CloudPlatformVariant(cloudPlatform.name(), cloudPlatform.name()))\n-                .networkConnector()\n-                .selectSubnets(new ArrayList<>(network.getSubnetMetas().values()), SubnetSelectionParameters.builder().withTunnel(tunnel).build());\n+\n+        NetworkConnector networkConnector = cloudPlatformConnectors\n+                .get(new CloudPlatformVariant(cloudPlatform.name(), cloudPlatform.name()))\n+                .networkConnector();\n+        SubnetSelectionParameters subnetSelectionParameters = SubnetSelectionParameters\n+                .builder()\n+                .withTunnel(tunnel)\n+                .build();\n+\n+        SubnetSelectionResult subnetSelectionResult = networkConnector\n+                .filterSubnets(network.getSubnetMetas().values(), subnetSelectionParameters);\n+        LOGGER.info(\"Filtered subnets are: {}\", subnetSelectionResult);\n+        subnetSelectionResult = networkConnector\n+                .selectSubnets(subnetSelectionResult, subnetSelectionParameters);\n+        LOGGER.info(\"Subnets after the selection are: {}\", subnetSelectionResult);\n         CloudSubnet selectedSubnet = subnetSelectionResult.hasResult()\n                 ? subnetSelectionResult.getResult().get(new Random().nextInt(subnetSelectionResult.getResult().size()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjUxODkwOnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo0Mjo1MVrOF23hcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo0Mjo1MVrOF23hcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3NzEwNw==", "bodyText": "This should be a private method, thus I would extract a class that would contain:\n\nselectSubnets\nisDifferentAzCountEnough\ngroupSubnetsByAz\n\nI would prefer to put this logic to AwsNetworkConnector.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393077107", "createdAt": "2020-03-16T14:42:51Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();\n+\n+    int subnetCountInDifferentAzMax();\n+\n+    default SubnetSelectionResult selectSubnets(SubnetSelectionResult subnetSelectionResult, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetSelectionResult.hasResult()) {\n+            LOGGER.info(\"There are subnets in the subnet selection: {}.\", subnetSelectionResult);\n+            List<CloudSubnet> result = new ArrayList<>();\n+            if (subnetSelectionParameters.isHa()) {\n+                LOGGER.info(\"The request contains HA option: true: {}.\", subnetSelectionParameters);\n+                Map<String, List<CloudSubnet>> groupedSubnetsByAz = groupSubnetsByAz(subnetSelectionResult.getResult());\n+                LOGGER.info(\"The subnets groupped by AZs and the result is: {}.\", groupedSubnetsByAz);\n+                // We dont have enough AZ\n+                if (!isDifferentAzCountEnough(groupedSubnetsByAz)) {\n+                    LOGGER.info(\"There is not enough different AZ in the subnet setup.\");\n+                    return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, groupedSubnetsByAz.keySet().size(), subnetCountInDifferentAzMin()));\n+                } else {\n+                    // We have enough AZ\n+                    for (Map.Entry<String, List<CloudSubnet>> entry : groupedSubnetsByAz.entrySet()) {\n+                        int random = new Random().nextInt(entry.getValue().size());\n+                        CloudSubnet cloudSubnet = entry.getValue().get(random);\n+                        LOGGER.info(\"The selected subnet is: {} by random id {}.\", cloudSubnet, random);\n+                        result.add(cloudSubnet);\n+                        if (result.size() == subnetCountInDifferentAzMax()) {\n+                            LOGGER.info(\"The selection logic already selected enough subnet which is {}.\", result.size());\n+                            break;\n+                        }\n+                    }\n+                }\n+            } else {\n+                int random = new Random().nextInt(subnetSelectionResult.getResult().size());\n+                CloudSubnet cloudSubnet = subnetSelectionResult.getResult().get(random);\n+                LOGGER.info(\"The selected subnet is: {} by random id {}.\", cloudSubnet, random);\n+                result.add(cloudSubnet);\n+            }\n+            LOGGER.info(\"The selected subnets are: {} for the resource provisioning.\", result);\n+            return new SubnetSelectionResult(result);\n+        } else {\n+            LOGGER.info(\"There is no result in the subnet selection: {}.\", subnetSelectionResult);\n+            return subnetSelectionResult;\n+        }\n+    }\n+\n+    default boolean isDifferentAzCountEnough(Map<String, List<CloudSubnet>> groupedSubnetsByAz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjU2Njc1OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo1MzoyNlrOF23_bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo1MzoyNlrOF23_bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4NDc4Mw==", "bodyText": "Private => public (method collects public subnets, log should say public as well).", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393084783", "createdAt": "2020-03-16T14:53:26Z", "author": {"login": "gergopapi2"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorService.java", "diffHunk": "@@ -18,61 +15,30 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorService.class);\n \n-    Map<String, CloudSubnet> collectOnePrivateSubnetPerAz(List<CloudSubnet> subnetMetas, int max) {\n-        Map<String, CloudSubnet> subnetsPerAz = new HashMap<>();\n-        Iterator<CloudSubnet> subnetIterator = subnetMetas.iterator();\n-        while (subnetsPerAz.size() < max && subnetIterator.hasNext()) {\n-            CloudSubnet nextSubnet = subnetIterator.next();\n-            if (nextSubnet.isPrivateSubnet()) {\n-                subnetsPerAz.putIfAbsent(nextSubnet.getAvailabilityZone(), nextSubnet);\n+    List<CloudSubnet> collectPublicSubnets(Collection<CloudSubnet> subnetMetas) {\n+        List<CloudSubnet> result = new ArrayList<>();\n+        for (CloudSubnet subnetMeta : subnetMetas) {\n+            if (isUsablePublicSubnet(subnetMeta)) {\n+                result.add(subnetMeta);\n             }\n         }\n-        LOGGER.debug(\"Private subnets per AZ: {}\", subnetsPerAz.values().stream().map(CloudSubnet::getId).collect(Collectors.joining(\",\")));\n-        return subnetsPerAz;\n+        LOGGER.debug(\"Private subnets for selections: {}\", result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjU3ODE1OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPrivate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo1NTo1NFrOF24GdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo1NTo1NFrOF24GdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4NjU4MQ==", "bodyText": "List of private subnets was listed in subnetSelectorService already, I think it is not necessary to log in once again.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393086581", "createdAt": "2020-03-16T14:55:54Z", "author": {"login": "gergopapi2"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPrivate.java", "diffHunk": "@@ -20,37 +17,23 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategyMultiplePreferPrivate.class);\n \n-    @VisibleForTesting\n-    @Value(\"${cb.aws.subnet.different.az.min:2}\")\n-    int minSubnetCountInDifferentAz;\n-\n-    @VisibleForTesting\n-    @Value(\"${cb.aws.subnet.different.az.max:3}\")\n-    int maxSubnetCountInDifferentAz;\n-\n     @Inject\n     private SubnetSelectorService subnetSelectorService;\n \n     @Override\n-    public SubnetSelectionResult selectInternal(List<CloudSubnet> subnetMetas) {\n-        Map<String, CloudSubnet> selectedSubnets = subnetSelectorService.collectOnePrivateSubnetPerAz(subnetMetas, maxSubnetCountInDifferentAz);\n-        if (selectedSubnets.size() < minSubnetCountInDifferentAz) {\n-            Map<String, CloudSubnet> publicSubnetsPerAz = subnetSelectorService.collectOnePublicSubnetPerAz(subnetMetas, minSubnetCountInDifferentAz);\n-            subnetSelectorService.collectSubnetsOfMissingAz(selectedSubnets, publicSubnetsPerAz, minSubnetCountInDifferentAz);\n-            if (selectedSubnets.size() < minSubnetCountInDifferentAz) {\n-                return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, selectedSubnets.size(), minSubnetCountInDifferentAz));\n-            }\n+    public SubnetSelectionResult select(Collection<CloudSubnet> subnets) {\n+        List<CloudSubnet> result = subnetSelectorService.collectPrivateSubnets(subnets);\n+        LOGGER.info(\"Collected private subnets are: {}\", result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjU3OTk3OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPrivate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo1NjoyMFrOF24HoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo1NjoyMFrOF24HoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4Njg4MA==", "bodyText": "There are now => should read: There are no", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393086880", "createdAt": "2020-03-16T14:56:20Z", "author": {"login": "gergopapi2"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPrivate.java", "diffHunk": "@@ -20,37 +17,23 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategyMultiplePreferPrivate.class);\n \n-    @VisibleForTesting\n-    @Value(\"${cb.aws.subnet.different.az.min:2}\")\n-    int minSubnetCountInDifferentAz;\n-\n-    @VisibleForTesting\n-    @Value(\"${cb.aws.subnet.different.az.max:3}\")\n-    int maxSubnetCountInDifferentAz;\n-\n     @Inject\n     private SubnetSelectorService subnetSelectorService;\n \n     @Override\n-    public SubnetSelectionResult selectInternal(List<CloudSubnet> subnetMetas) {\n-        Map<String, CloudSubnet> selectedSubnets = subnetSelectorService.collectOnePrivateSubnetPerAz(subnetMetas, maxSubnetCountInDifferentAz);\n-        if (selectedSubnets.size() < minSubnetCountInDifferentAz) {\n-            Map<String, CloudSubnet> publicSubnetsPerAz = subnetSelectorService.collectOnePublicSubnetPerAz(subnetMetas, minSubnetCountInDifferentAz);\n-            subnetSelectorService.collectSubnetsOfMissingAz(selectedSubnets, publicSubnetsPerAz, minSubnetCountInDifferentAz);\n-            if (selectedSubnets.size() < minSubnetCountInDifferentAz) {\n-                return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, selectedSubnets.size(), minSubnetCountInDifferentAz));\n-            }\n+    public SubnetSelectionResult select(Collection<CloudSubnet> subnets) {\n+        List<CloudSubnet> result = subnetSelectorService.collectPrivateSubnets(subnets);\n+        LOGGER.info(\"Collected private subnets are: {}\", result);\n+        if (result.isEmpty()) {\n+            LOGGER.info(\"There are now private subnets in the environment, falling back to public subnets: {}\", subnets);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjU4MDcxOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPublic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo1NjozMVrOF24IEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo1NjozMVrOF24IEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4Njk5NQ==", "bodyText": "There are now => should read: There are no", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393086995", "createdAt": "2020-03-16T14:56:31Z", "author": {"login": "gergopapi2"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPublic.java", "diffHunk": "@@ -1,53 +1,39 @@\n package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n \n-import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n-import java.util.Map;\n \n import javax.inject.Inject;\n \n-import org.springframework.beans.factory.annotation.Value;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n @Component\n public class SubnetSelectorStrategyMultiplePreferPublic extends SubnetSelectorStrategy {\n \n-    @VisibleForTesting\n-    @Value(\"${cb.aws.subnet.different.az.min:2}\")\n-    int minSubnetCountInDifferentAz;\n-\n-    @VisibleForTesting\n-    @Value(\"${cb.aws.subnet.different.az.max:3}\")\n-    int maxSubnetCountInDifferentAz;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategyMultiplePreferPublic.class);\n \n     @Inject\n     private SubnetSelectorService subnetSelectorService;\n \n     @Override\n-    protected SubnetSelectionResult selectInternal(List<CloudSubnet> subnetMetas) {\n-        Map<String, CloudSubnet> selectedSubnets = subnetSelectorService.collectOnePublicSubnetPerAz(subnetMetas, maxSubnetCountInDifferentAz);\n-        if (selectedSubnets.size() < minSubnetCountInDifferentAz) {\n-            Map<String, CloudSubnet> privateSubnetsPerAz = subnetSelectorService.collectOnePrivateSubnetPerAz(subnetMetas, maxSubnetCountInDifferentAz);\n-            subnetSelectorService.collectSubnetsOfMissingAz(selectedSubnets, privateSubnetsPerAz,\n-                    minSubnetCountInDifferentAz);\n-            if (selectedSubnets.size() < minSubnetCountInDifferentAz) {\n-                return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, selectedSubnets.size(), minSubnetCountInDifferentAz));\n-            }\n+    public SubnetSelectionResult select(Collection<CloudSubnet> subnets) {\n+        List<CloudSubnet> result = subnetSelectorService.collectPublicSubnets(subnets);\n+        LOGGER.info(\"Collected pubic subnets are: {}\", result);\n+        if (result.isEmpty()) {\n+            LOGGER.info(\"There are now public subnets in the environment, falling back to private subnets: {}\", subnets);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjYzMzgyOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPublic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowODoxMVrOF24phA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowODoxMVrOF24phA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NTU1Ng==", "bodyText": "Consider the case we have 3 subnets:\nAZ-a: public (mapPublicIpOnLaunch=true)\nAZ-b: private\nAZ-c: private\nNow, the filter method would return AZ-a only. In this case the select step after the filter will throw an error because fallback private subnets are not present.\nA similar problem would be with the PreferPrivate variant.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393095556", "createdAt": "2020-03-16T15:08:11Z", "author": {"login": "gergopapi2"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPublic.java", "diffHunk": "@@ -1,53 +1,39 @@\n package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n \n-import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n-import java.util.Map;\n \n import javax.inject.Inject;\n \n-import org.springframework.beans.factory.annotation.Value;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n @Component\n public class SubnetSelectorStrategyMultiplePreferPublic extends SubnetSelectorStrategy {\n \n-    @VisibleForTesting\n-    @Value(\"${cb.aws.subnet.different.az.min:2}\")\n-    int minSubnetCountInDifferentAz;\n-\n-    @VisibleForTesting\n-    @Value(\"${cb.aws.subnet.different.az.max:3}\")\n-    int maxSubnetCountInDifferentAz;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategyMultiplePreferPublic.class);\n \n     @Inject\n     private SubnetSelectorService subnetSelectorService;\n \n     @Override\n-    protected SubnetSelectionResult selectInternal(List<CloudSubnet> subnetMetas) {\n-        Map<String, CloudSubnet> selectedSubnets = subnetSelectorService.collectOnePublicSubnetPerAz(subnetMetas, maxSubnetCountInDifferentAz);\n-        if (selectedSubnets.size() < minSubnetCountInDifferentAz) {\n-            Map<String, CloudSubnet> privateSubnetsPerAz = subnetSelectorService.collectOnePrivateSubnetPerAz(subnetMetas, maxSubnetCountInDifferentAz);\n-            subnetSelectorService.collectSubnetsOfMissingAz(selectedSubnets, privateSubnetsPerAz,\n-                    minSubnetCountInDifferentAz);\n-            if (selectedSubnets.size() < minSubnetCountInDifferentAz) {\n-                return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, selectedSubnets.size(), minSubnetCountInDifferentAz));\n-            }\n+    public SubnetSelectionResult select(Collection<CloudSubnet> subnets) {\n+        List<CloudSubnet> result = subnetSelectorService.collectPublicSubnets(subnets);\n+        LOGGER.info(\"Collected pubic subnets are: {}\", result);\n+        if (result.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjYzNzgyOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPublic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowOToxNFrOF24sCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowOToxNFrOF24sCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NjIwMw==", "bodyText": "Since this is the filter step, I would rather rename it to SubnetFilterStrategy", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393096203", "createdAt": "2020-03-16T15:09:14Z", "author": {"login": "gergopapi2"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPublic.java", "diffHunk": "@@ -1,53 +1,39 @@\n package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n \n-import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n-import java.util.Map;\n \n import javax.inject.Inject;\n \n-import org.springframework.beans.factory.annotation.Value;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n @Component\n public class SubnetSelectorStrategyMultiplePreferPublic extends SubnetSelectorStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjYzODYyOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPublic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowOToyN1rOF24skA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowOToyN1rOF24skA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NjMzNg==", "bodyText": "I would rename it to filter.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393096336", "createdAt": "2020-03-16T15:09:27Z", "author": {"login": "gergopapi2"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPublic.java", "diffHunk": "@@ -1,53 +1,39 @@\n package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n \n-import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n-import java.util.Map;\n \n import javax.inject.Inject;\n \n-import org.springframework.beans.factory.annotation.Value;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n @Component\n public class SubnetSelectorStrategyMultiplePreferPublic extends SubnetSelectorStrategy {\n \n-    @VisibleForTesting\n-    @Value(\"${cb.aws.subnet.different.az.min:2}\")\n-    int minSubnetCountInDifferentAz;\n-\n-    @VisibleForTesting\n-    @Value(\"${cb.aws.subnet.different.az.max:3}\")\n-    int maxSubnetCountInDifferentAz;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategyMultiplePreferPublic.class);\n \n     @Inject\n     private SubnetSelectorService subnetSelectorService;\n \n     @Override\n-    protected SubnetSelectionResult selectInternal(List<CloudSubnet> subnetMetas) {\n-        Map<String, CloudSubnet> selectedSubnets = subnetSelectorService.collectOnePublicSubnetPerAz(subnetMetas, maxSubnetCountInDifferentAz);\n-        if (selectedSubnets.size() < minSubnetCountInDifferentAz) {\n-            Map<String, CloudSubnet> privateSubnetsPerAz = subnetSelectorService.collectOnePrivateSubnetPerAz(subnetMetas, maxSubnetCountInDifferentAz);\n-            subnetSelectorService.collectSubnetsOfMissingAz(selectedSubnets, privateSubnetsPerAz,\n-                    minSubnetCountInDifferentAz);\n-            if (selectedSubnets.size() < minSubnetCountInDifferentAz) {\n-                return new SubnetSelectionResult(String.format(NOT_ENOUGH_AZ, selectedSubnets.size(), minSubnetCountInDifferentAz));\n-            }\n+    public SubnetSelectionResult select(Collection<CloudSubnet> subnets) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjc0MTQyOnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozMzowNFrOF25tqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozMzowNFrOF25tqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExMzAwMg==", "bodyText": "The result of filterSubnets is always used in conjunction with select (except for logging). I therefore would not put filterSubnets to the api but would make it a private implementation within AWS / Azure / Mock.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393113002", "createdAt": "2020-03-16T15:33:04Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjc0NzM3OnYy", "diffSide": "RIGHT", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/SubnetChooserService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNDoyNFrOF25xYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNDoyNFrOF25xYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExMzk1NA==", "bodyText": "I think there is enough logging within the selection logic, I would not list the result here again. If logging in the filter - selection is not enough, I would add it there.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393113954", "createdAt": "2020-03-16T15:34:24Z", "author": {"login": "gergopapi2"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/SubnetChooserService.java", "diffHunk": "@@ -18,20 +21,25 @@\n @Service\n public class SubnetChooserService {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetChooserService.class);\n+\n     @Inject\n     private CloudPlatformConnectors cloudPlatformConnectors;\n \n     public List<CloudSubnet> chooseSubnets(List<CloudSubnet> subnetMetas, CloudPlatform cloudPlatform, DBStack dbStack) {\n-        SubnetSelectionResult subnetSelectionResult =\n-                cloudPlatformConnectors.get(new CloudPlatformVariant(dbStack.getCloudPlatform(), dbStack.getPlatformVariant()))\n-                .networkConnector()\n-                .selectSubnets(\n-                        subnetMetas,\n-                        SubnetSelectionParameters.builder()\n-                                .withHa(dbStack.isHa())\n-                                .withForDatabase()\n-                                .build()\n-                );\n+        NetworkConnector networkConnector = cloudPlatformConnectors.get(new CloudPlatformVariant(dbStack.getCloudPlatform(), dbStack.getPlatformVariant()))\n+                .networkConnector();\n+        SubnetSelectionParameters build = SubnetSelectionParameters\n+                .builder()\n+                .withHa(dbStack.isHa())\n+                .withPreferPrivateIfExist()\n+                .build();\n+        SubnetSelectionResult subnetSelectionResult = networkConnector\n+                .filterSubnets(subnetMetas, build);\n+        LOGGER.info(\"Filtered subnets are: {}\", subnetSelectionResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjc0ODE1OnYy", "diffSide": "RIGHT", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/SubnetChooserService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNDozOFrOF25x6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNDozOFrOF25x6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNDA4OQ==", "bodyText": "I would omit this logging, for the same reasons as above.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393114089", "createdAt": "2020-03-16T15:34:38Z", "author": {"login": "gergopapi2"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/SubnetChooserService.java", "diffHunk": "@@ -18,20 +21,25 @@\n @Service\n public class SubnetChooserService {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetChooserService.class);\n+\n     @Inject\n     private CloudPlatformConnectors cloudPlatformConnectors;\n \n     public List<CloudSubnet> chooseSubnets(List<CloudSubnet> subnetMetas, CloudPlatform cloudPlatform, DBStack dbStack) {\n-        SubnetSelectionResult subnetSelectionResult =\n-                cloudPlatformConnectors.get(new CloudPlatformVariant(dbStack.getCloudPlatform(), dbStack.getPlatformVariant()))\n-                .networkConnector()\n-                .selectSubnets(\n-                        subnetMetas,\n-                        SubnetSelectionParameters.builder()\n-                                .withHa(dbStack.isHa())\n-                                .withForDatabase()\n-                                .build()\n-                );\n+        NetworkConnector networkConnector = cloudPlatformConnectors.get(new CloudPlatformVariant(dbStack.getCloudPlatform(), dbStack.getPlatformVariant()))\n+                .networkConnector();\n+        SubnetSelectionParameters build = SubnetSelectionParameters\n+                .builder()\n+                .withHa(dbStack.isHa())\n+                .withPreferPrivateIfExist()\n+                .build();\n+        SubnetSelectionResult subnetSelectionResult = networkConnector\n+                .filterSubnets(subnetMetas, build);\n+        LOGGER.info(\"Filtered subnets are: {}\", subnetSelectionResult);\n+        subnetSelectionResult = networkConnector\n+                .selectSubnets(subnetSelectionResult, build);\n+        LOGGER.info(\"Subnets after the selection are: {}\", subnetSelectionResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjc1MjE0OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNTozN1rOF250fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNTozN1rOF250fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNDc0OA==", "bodyText": "I would omit logging here. It is present in the filter-select machinery.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393114748", "createdAt": "2020-03-16T15:35:37Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -31,9 +31,21 @@ public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlat\n             LOGGER.debug(\"Check failed, returning null\");\n             return null;\n         }\n-        SubnetSelectionResult subnetSelectionResult = cloudPlatformConnectors.get(new CloudPlatformVariant(cloudPlatform.name(), cloudPlatform.name()))\n-                .networkConnector()\n-                .selectSubnets(new ArrayList<>(network.getSubnetMetas().values()), SubnetSelectionParameters.builder().withTunnel(tunnel).build());\n+\n+        NetworkConnector networkConnector = cloudPlatformConnectors\n+                .get(new CloudPlatformVariant(cloudPlatform.name(), cloudPlatform.name()))\n+                .networkConnector();\n+        SubnetSelectionParameters subnetSelectionParameters = SubnetSelectionParameters\n+                .builder()\n+                .withTunnel(tunnel)\n+                .build();\n+\n+        SubnetSelectionResult subnetSelectionResult = networkConnector\n+                .filterSubnets(network.getSubnetMetas().values(), subnetSelectionParameters);\n+        LOGGER.info(\"Filtered subnets are: {}\", subnetSelectionResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjc1NTYwOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNjoyMFrOF252vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNjoyMFrOF252vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNTMyNQ==", "bodyText": "I would log subnets here, should have been logged in the subnet filter-select machinery.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393115325", "createdAt": "2020-03-16T15:36:20Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -31,9 +31,21 @@ public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlat\n             LOGGER.debug(\"Check failed, returning null\");\n             return null;\n         }\n-        SubnetSelectionResult subnetSelectionResult = cloudPlatformConnectors.get(new CloudPlatformVariant(cloudPlatform.name(), cloudPlatform.name()))\n-                .networkConnector()\n-                .selectSubnets(new ArrayList<>(network.getSubnetMetas().values()), SubnetSelectionParameters.builder().withTunnel(tunnel).build());\n+\n+        NetworkConnector networkConnector = cloudPlatformConnectors\n+                .get(new CloudPlatformVariant(cloudPlatform.name(), cloudPlatform.name()))\n+                .networkConnector();\n+        SubnetSelectionParameters subnetSelectionParameters = SubnetSelectionParameters\n+                .builder()\n+                .withTunnel(tunnel)\n+                .build();\n+\n+        SubnetSelectionResult subnetSelectionResult = networkConnector\n+                .filterSubnets(network.getSubnetMetas().values(), subnetSelectionParameters);\n+        LOGGER.info(\"Filtered subnets are: {}\", subnetSelectionResult);\n+        subnetSelectionResult = networkConnector\n+                .selectSubnets(subnetSelectionResult, subnetSelectionParameters);\n+        LOGGER.info(\"Subnets after the selection are: {}\", subnetSelectionResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjc3MTQxOnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo0MDowMVrOF26AtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDozMDoyNFrOF3EqQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNzg3Ng==", "bodyText": "I would not add these methods to the public api, as for now they are only relevant for AWS only. I would move them to AwsNetworkConnector.", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393117876", "createdAt": "2020-03-16T15:40:01Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MjM1NA==", "bodyText": "it is also relevant for mock", "url": "https://github.com/hortonworks/cloudbreak/pull/7588#discussion_r393292354", "createdAt": "2020-03-16T20:30:24Z", "author": {"login": "doktoric"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/NetworkConnector.java", "diffHunk": "@@ -1,26 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n import com.sequenceiq.cloudbreak.cloud.model.Network;\n import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n import com.sequenceiq.cloudbreak.cloud.model.network.CreatedCloudNetwork;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkCreationRequest;\n import com.sequenceiq.cloudbreak.cloud.model.network.NetworkDeletionRequest;\n-import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionResult;\n \n /**\n  * Network connectors.\n  */\n public interface NetworkConnector extends CloudPlatformAware {\n+    Logger LOGGER = LoggerFactory.getLogger(NetworkConnector.class);\n+\n+    String NOT_ENOUGH_AZ = \"Acceptable subnets are in %d different AZs, but subnets in %d different AZs required.\";\n \n     CreatedCloudNetwork createNetworkWithSubnets(NetworkCreationRequest networkCreationRequest);\n \n     void deleteNetworkWithSubnets(NetworkDeletionRequest networkDeletionRequest);\n \n     String getNetworkCidr(Network network, CloudCredential credential);\n \n-    SubnetSelectionResult selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+    SubnetSelectionResult filterSubnets(Collection<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters);\n+\n+    int subnetCountInDifferentAzMin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNzg3Ng=="}, "originalCommit": {"oid": "914388c768a9666101e77bad687aaa8ed44b202e"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2665, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}