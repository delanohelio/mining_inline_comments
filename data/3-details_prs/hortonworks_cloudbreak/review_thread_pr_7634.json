{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjYwMTM1", "number": 7634, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzozOToxNlrODqmF4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyMzo0NlrODq0INg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTkwODgyOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzozOToxNlrOF6cLZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzozOToxNlrOF6cLZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzM5Ng==", "bodyText": "I would rephrase a bit saying that the check checks that the calling actor is either perform an action against themselves or have the right.", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r396823396", "createdAt": "2020-03-23T23:39:16Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTkwOTI5OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzozOTozM1rOF6cLuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzozNToxMlrOF7O5CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzQ4MQ==", "bodyText": "assert the parameters?", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r396823481", "createdAt": "2020-03-23T23:39:33Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {\n+        Crn actorCrn = Crn.safeFromString(actorCrnStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1NDI4MA==", "bodyText": "The safeFromString does a null check for us.", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397654280", "createdAt": "2020-03-25T07:35:12Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {\n+        Crn actorCrn = Crn.safeFromString(actorCrnStr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzQ4MQ=="}, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTkxMTY3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzo0MDo0MFrOF6cNFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzozNjowNlrOF7O6ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzgyOA==", "bodyText": "I think that checkRight throws if the check fails.", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r396823828", "createdAt": "2020-03-23T23:40:40Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {\n+        Crn actorCrn = Crn.safeFromString(actorCrnStr);\n+        Crn targetUserCrn = Crn.safeFromString(targetUserCrnStr);\n+        if (actorCrn.equals(targetUserCrn)) {\n+            return;\n+        }\n+        if (!actorCrn.getAccountId().equals(targetUserCrn.getAccountId())) {\n+            throw new AccessDeniedException(\"Unauthorized to run this operation in a different account\");\n+        }\n+        if (!grpcUmsClient.checkRight(GrpcUmsClient.INTERNAL_ACTOR_CRN, actorCrn.toString(), requiredRight, MDCUtils.getRequestId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1NDYyOA==", "bodyText": "So the grpcUmsClient checks for exception and returns a boolean instead.", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397654628", "createdAt": "2020-03-25T07:36:06Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {\n+        Crn actorCrn = Crn.safeFromString(actorCrnStr);\n+        Crn targetUserCrn = Crn.safeFromString(targetUserCrnStr);\n+        if (actorCrn.equals(targetUserCrn)) {\n+            return;\n+        }\n+        if (!actorCrn.getAccountId().equals(targetUserCrn.getAccountId())) {\n+            throw new AccessDeniedException(\"Unauthorized to run this operation in a different account\");\n+        }\n+        if (!grpcUmsClient.checkRight(GrpcUmsClient.INTERNAL_ACTOR_CRN, actorCrn.toString(), requiredRight, MDCUtils.getRequestId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzgyOA=="}, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjE3ODQ3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoxNzo0N1rOF6yWSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzozNzozNVrOF7O8vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4NjYzNQ==", "bodyText": "we have UmsAuthorizationService class, which has methods for checking rights through UMS, you should move this method to that class and maybe you can also reuse those existing methods", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397186635", "createdAt": "2020-03-24T14:17:47Z", "author": {"login": "horadla23"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1NTIzMA==", "bodyText": "Thanks! didn't know about that service. I've moved thee method over.", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397655230", "createdAt": "2020-03-25T07:37:35Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4NjYzNQ=="}, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjIwODU0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/KerberosMgmtV1Controller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyMzo0NlrOF6yozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyMzo0NlrOF6yozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5MTM3Mg==", "bodyText": "as mentioned, please move your logic to UmsAuthorizationService and use that", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397191372", "createdAt": "2020-03-24T14:23:46Z", "author": {"login": "horadla23"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/KerberosMgmtV1Controller.java", "diffHunk": "@@ -43,6 +45,9 @@\n     @Inject\n     private UserKeytabService userKeytabService;\n \n+    @Inject\n+    private AuthorizationUtil authorizationUtil;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2705, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}