{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMjg1OTM2", "number": 9665, "title": "CB-9954\tand CB-9953: back-end cloudbreak change to set up separate bu\u2026", "bodyText": "\u2026cket and role for freeipa auto-backup data\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads.\nSee detailed description in the commit message.", "createdAt": "2020-12-16T16:25:12Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9665", "merged": true, "mergeCommit": {"oid": "6159012f877f0ae908aa070fec49115bb6a730a4"}, "closed": true, "closedAt": "2021-02-04T16:22:51Z", "author": {"login": "christmasferret"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmxkrVABqjQxMjA2NTAxOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd22c0lABqjQyOTE0MzE2MDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "348bf41855d64940ce62ababbcd4c4c38f5993bb", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/348bf41855d64940ce62ababbcd4c4c38f5993bb", "committedDate": "2020-12-16T16:23:57Z", "message": "CB-9954\tand CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "722043138bef47059aa8adabcdbb825542019939", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/722043138bef47059aa8adabcdbb825542019939", "committedDate": "2020-12-16T16:31:22Z", "message": "CB-9954\tand CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODg4NTU4", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#pullrequestreview-560888558", "createdAt": "2021-01-04T09:36:15Z", "commit": {"oid": "722043138bef47059aa8adabcdbb825542019939"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b22e3651dd29948b36417e7e98654d5a47730c7b", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/b22e3651dd29948b36417e7e98654d5a47730c7b", "committedDate": "2021-01-12T16:30:22Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "941ba6dc2507b7697d9956fc7874d0c291583a18", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/941ba6dc2507b7697d9956fc7874d0c291583a18", "committedDate": "2021-01-12T17:08:04Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "941ba6dc2507b7697d9956fc7874d0c291583a18", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/941ba6dc2507b7697d9956fc7874d0c291583a18", "committedDate": "2021-01-12T17:08:04Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "committedDate": "2021-01-13T16:28:40Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NjAwOTYw", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#pullrequestreview-568600960", "createdAt": "2021-01-14T20:28:35Z", "commit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDoyODozNVrOIT2BmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDo1Mzo0NlrOIT218g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY3OTAwMA==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557679000", "createdAt": "2021-01-14T20:28:35Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java", "diffHunk": "@@ -31,6 +32,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDIxMw==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680213", "createdAt": "2021-01-14T20:30:46Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDI1NQ==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680255", "createdAt": "2021-01-14T20:30:51Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDMwNA==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680304", "createdAt": "2021-01-14T20:30:57Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_CLOUDWATCH_ATTRIBUTES)\n+    private BackupCloudwatchParams cloudwatch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDM0OQ==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680349", "createdAt": "2021-01-14T20:31:03Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDQ4OA==", "bodyText": "gcs is missing", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680488", "createdAt": "2021-01-14T20:31:22Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_CLOUDWATCH_ATTRIBUTES)\n+    private BackupCloudwatchParams cloudwatch;\n+\n+    public String getStorageLocation() {\n+        return storageLocation;\n+    }\n+\n+    public void setStorageLocation(String storageLocation) {\n+        this.storageLocation = storageLocation;\n+    }\n+\n+    public S3CloudStorageV1Parameters getS3() {\n+        return s3;\n+    }\n+\n+    public void setS3(S3CloudStorageV1Parameters s3) {\n+        this.s3 = s3;\n+    }\n+\n+    public AdlsGen2CloudStorageV1Parameters getAdlsGen2() {\n+        return adlsGen2;\n+    }\n+\n+    public void setAdlsGen2(AdlsGen2CloudStorageV1Parameters adlsGen2) {\n+        this.adlsGen2 = adlsGen2;\n+    }\n+\n+    public GcsCloudStorageV1Parameters getGcs() {\n+        return gcs;\n+    }\n+\n+    public void setGcs(GcsCloudStorageV1Parameters gcs) {\n+        this.gcs = gcs;\n+    }\n+\n+    public BackupCloudwatchParams getCloudwatch() {\n+        return cloudwatch;\n+    }\n+\n+    public void setCloudwatch(BackupCloudwatchParams cloudwatch) {\n+        this.cloudwatch = cloudwatch;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"BackupBase{\" +\n+                \"storageLocation='\" + storageLocation + '\\'' +\n+                \", s3=\" + s3 +\n+                \", adlsGen2=\" + adlsGen2 +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MTU5NA==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557681594", "createdAt": "2021-01-14T20:33:33Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java", "diffHunk": "@@ -63,6 +64,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MjcyNA==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557682724", "createdAt": "2021-01-14T20:35:41Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "diffHunk": "@@ -53,6 +54,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryResponse telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NjM0OQ==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557686349", "createdAt": "2021-01-14T20:42:40Z", "author": {"login": "bergerdenes"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java", "diffHunk": "@@ -74,6 +75,9 @@\n     @ApiModelProperty(FreeIpaModelDescriptions.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(FreeIpaModelDescriptions.BACKUP)\n+    private BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzA1OA==", "bodyText": "NULL is the implicit default anyway", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557687058", "createdAt": "2021-01-14T20:44:07Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/resources/schema/app/20210111160131_CB-9953_add_backup_location_to_environmentdb.sql", "diffHunk": "@@ -0,0 +1,10 @@\n+-- // CB-9953 add backup location to environmentdb\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE environment ADD COLUMN IF NOT EXISTS backup TEXT DEFAULT NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzIyNQ==", "bodyText": "dead code", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557687225", "createdAt": "2021-01-14T20:44:27Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/resources/schema/app/20210111160131_CB-9953_add_backup_location_to_environmentdb.sql", "diffHunk": "@@ -0,0 +1,10 @@\n+-- // CB-9953 add backup location to environmentdb\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE environment ADD COLUMN IF NOT EXISTS backup TEXT DEFAULT NULL;\n+-- UPDATE environment SET environment_service_version = 'No Info' WHERE environment_service_version IS NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzU3Mg==", "bodyText": "misleading comment?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557687572", "createdAt": "2021-01-14T20:45:08Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4Nzc5MQ==", "bodyText": "gcs?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557687791", "createdAt": "2021-01-14T20:45:33Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.\n+     * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n+     */\n+    public ValidationResult validateBackupStorageLocation(Environment environment) {\n+        ValidationResult.ValidationResultBuilder resultBuilder = new ValidationResult.ValidationResultBuilder();\n+        Optional.ofNullable(environment.getBackup())\n+                .filter(backup -> isCloudStorageEnabled(backup) && backup.getCloudwatch() == null)\n+                .map(EnvironmentBackup::getStorageLocation)\n+                .ifPresent(location -> cloudStorageLocationValidator.validateBackup(location, environment, resultBuilder));\n+        return resultBuilder.build();\n+    }\n+\n+    private boolean isCloudStorageEnabled(EnvironmentBackup backup) {\n+        return backup.getS3() != null || backup.getAdlsGen2() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDI5Mg==", "bodyText": "do I understand correctly if cloud storage location is validated only if there is no cloudwatch field  set on the backup?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557690292", "createdAt": "2021-01-14T20:50:07Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.\n+     * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n+     */\n+    public ValidationResult validateBackupStorageLocation(Environment environment) {\n+        ValidationResult.ValidationResultBuilder resultBuilder = new ValidationResult.ValidationResultBuilder();\n+        Optional.ofNullable(environment.getBackup())\n+                .filter(backup -> isCloudStorageEnabled(backup) && backup.getCloudwatch() == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDgwNA==", "bodyText": "is it telemetry or just backup? (question stands for all below)", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557690804", "createdAt": "2021-01-14T20:51:08Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java", "diffHunk": "@@ -14,6 +15,11 @@\n     public static final String TELEMETRY_LOGGING_GCS_ATTRIBUTES = \"telemetry - logging gcs attributes\";\n     public static final String TELEMETRY_LOGGING_CLOUDWATCH_ATTRIBUTES = \"telemetry - logging cloudwatch attributes\";\n     public static final String TELEMETRY_LOGGING_STORAGE_LOCATION = \"telemetry - logging storage location / container\";\n+    public static final String TELEMETRY_BACKUP_S3_ATTRIBUTES = \"telemetry - backup s3 attributes\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDg1NQ==", "bodyText": "is it telemetry or just backup?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557690855", "createdAt": "2021-01-14T20:51:13Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n public class TelemetryModelDescription {\n \n+    public static final String TELEMETRY_BACKUP = \"Cloud backup (telemetry) settings.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MjQwMg==", "bodyText": "response variable is not needed, just return Optional.empty()", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557692402", "createdAt": "2021-01-14T20:53:46Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/CloudStorageLocationValidator.java", "diffHunk": "@@ -60,6 +61,37 @@ public void validate(String storageLocation, Environment environment, Validation\n         return response;\n     }\n \n+    public void validateBackup(String storageLocation, Environment environment, ValidationResultBuilder resultBuilder) {\n+        Optional<FileSystemType> fileSystemType = getBackupFileSystemType(environment);\n+        String bucketName = getBucketName(fileSystemType, storageLocation);\n+        CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environment.getCredential());\n+        ObjectStorageMetadataRequest request = createObjectStorageMetadataRequest(environment.getCloudPlatform(), cloudCredential, bucketName);\n+        ObjectStorageMetadataResponse response = ThreadBasedUserCrnProvider.doAsInternalActor(() ->\n+                cloudProviderServicesV4Endopint.getObjectStorageMetaData(request));\n+        resultBuilder.ifError(() -> response.getStatus() == ResponseStatus.OK && !environment.getLocation().equals(response.getRegion()),\n+                String.format(\"Object storage location [%s] of bucket '%s' must match environment location [%s]\",\n+                        response.getRegion(),\n+                        bucketName,\n+                        environment.getLocation()));\n+    }\n+\n+    private Optional<FileSystemType> getBackupFileSystemType(Environment environment) {\n+        Optional<FileSystemType> response = Optional.empty();\n+        if (environment.getBackup() != null) {\n+            EnvironmentBackup backup = environment.getBackup();\n+            if (backup.getS3() != null) {\n+                return Optional.of(backup.getS3().getType());\n+            }\n+            if (backup.getAdlsGen2() != null) {\n+                return Optional.of(backup.getAdlsGen2().getType());\n+            }\n+            if (backup.getGcs() != null) {\n+                return Optional.of(backup.getGcs().getType());\n+            }\n+        }\n+        return response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e1c54cb96c4f837a7cdcab925cddb064d89a23c6", "committedDate": "2021-01-13T16:28:40Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "committedDate": "2021-01-25T23:32:55Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c2ae05b48d10dd86a1eecf6a509da2e358b33f72", "committedDate": "2021-01-25T23:32:55Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "a791d184b3246860f3ad8d01d24b9f1cbb0ff0ab", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a791d184b3246860f3ad8d01d24b9f1cbb0ff0ab", "committedDate": "2021-01-25T23:44:12Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2OTMxNDEx", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#pullrequestreview-576931411", "createdAt": "2021-01-27T02:30:17Z", "commit": {"oid": "a791d184b3246860f3ad8d01d24b9f1cbb0ff0ab"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a791d184b3246860f3ad8d01d24b9f1cbb0ff0ab", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a791d184b3246860f3ad8d01d24b9f1cbb0ff0ab", "committedDate": "2021-01-25T23:44:12Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "a491e3c6cfcda4080bfa522b98366c49ff831cb8", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a491e3c6cfcda4080bfa522b98366c49ff831cb8", "committedDate": "2021-01-27T05:48:38Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3NDg2NzMx", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#pullrequestreview-577486731", "createdAt": "2021-01-27T15:53:12Z", "commit": {"oid": "a491e3c6cfcda4080bfa522b98366c49ff831cb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNTo1MzoxM1rOIbOrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNTo1MzoxM1rOIbOrJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQyMjg4NA==", "bodyText": "I think the environment service also needs logic like this. (we need it in both places)", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r565422884", "createdAt": "2021-01-27T15:53:13Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/stack/CreateFreeIpaRequestToStackConverter.java", "diffHunk": "@@ -120,7 +120,11 @@ public Stack convert(CreateFreeIpaRequest source, String accountId, Future<Strin\n             stack.setNetwork(networkConverter.convert(source.getNetwork()));\n         }\n         stack.setTelemetry(telemetryConverter.convert(source.getTelemetry()));\n-        stack.setBackup(backupConverter.convert(source.getTelemetry()));\n+        if (source.getBackupRequest() != null && isNotEmpty(source.getBackupRequest().getStorageLocation())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a491e3c6cfcda4080bfa522b98366c49ff831cb8"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a491e3c6cfcda4080bfa522b98366c49ff831cb8", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a491e3c6cfcda4080bfa522b98366c49ff831cb8", "committedDate": "2021-01-27T05:48:38Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "75da1c777a3b9afcfb306e3cdff66365c9034d6e", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/75da1c777a3b9afcfb306e3cdff66365c9034d6e", "committedDate": "2021-01-27T18:21:16Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75da1c777a3b9afcfb306e3cdff66365c9034d6e", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/75da1c777a3b9afcfb306e3cdff66365c9034d6e", "committedDate": "2021-01-27T18:21:16Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/64dc260947b1c141d7d491328c2ef6c7657cff28", "committedDate": "2021-01-27T18:25:58Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3NzIxOTc3", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#pullrequestreview-577721977", "createdAt": "2021-01-27T20:16:42Z", "commit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4MzczODEy", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#pullrequestreview-578373812", "createdAt": "2021-01-28T14:15:13Z", "commit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDoxNToxM1rOIb5keg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDoxNjoyNFrOIb5oPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNTY5MA==", "bodyText": "Sorry for noticing this point just now but I would like to ask to rename the backupRequest to simply backup. I don't know how big effort is this at the UI side.\nSimilar renames are commented below.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566125690", "createdAt": "2021-01-28T14:15:13Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java", "diffHunk": "@@ -31,6 +32,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNTk1OA==", "bodyText": "Please rename the backupRequest to backup", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566125958", "createdAt": "2021-01-28T14:15:30Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java", "diffHunk": "@@ -63,6 +64,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjI2NQ==", "bodyText": "Please rename the backupResponse to backup", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566126265", "createdAt": "2021-01-28T14:15:53Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/DetailedEnvironmentResponse.java", "diffHunk": "@@ -70,6 +71,8 @@ public void setProxyConfig(ProxyResponse proxyConfig) {\n \n         private TelemetryResponse telemetry;\n \n+        private BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjQ3NQ==", "bodyText": "Please rename the backupResponse to backup", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566126475", "createdAt": "2021-01-28T14:16:10Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "diffHunk": "@@ -53,6 +56,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryResponse telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjY1NA==", "bodyText": "Please rename the backupResponse to backup", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566126654", "createdAt": "2021-01-28T14:16:24Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java", "diffHunk": "@@ -63,6 +64,8 @@ public static Builder builder() {\n \n         private TelemetryResponse telemetry;\n \n+        private BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4NDY3MjEw", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#pullrequestreview-578467210", "createdAt": "2021-01-28T15:44:01Z", "commit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNTo0NDowMVrOIb91DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNjoyMjozOFrOIb_vrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjE5NTQ2OA==", "bodyText": "@Valid should be in a separate line, like @NotNull", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566195468", "createdAt": "2021-01-28T15:44:01Z", "author": {"login": "lacikaaa"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private @Valid S3CloudStorageV1Parameters s3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNDIwMQ==", "bodyText": "why is this copy necessary?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566204201", "createdAt": "2021-01-28T15:54:47Z", "author": {"login": "lacikaaa"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNTg3MA==", "bodyText": "this looks like more a converter than a copy. I'm not sure if this really belongs into this class. Or it could be a constructor which accepts this class, but it's definitely not a copy", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566205870", "createdAt": "2021-01-28T15:56:45Z", "author": {"login": "lacikaaa"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {\n+        BackupCloudwatchParams newCloudwatchParams = null;\n+        if (cloudwatchParams != null) {\n+            newCloudwatchParams = new BackupCloudwatchParams();\n+            newCloudwatchParams.setStreamKey(cloudwatchParams.getStreamKey());\n+            newCloudwatchParams.setInstanceProfile(cloudwatchParams.getInstanceProfile());\n+            newCloudwatchParams.setRegion(cloudwatchParams.getRegion());\n+        }\n+        return newCloudwatchParams;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(CloudwatchParams cloudwatchParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNzc3Mg==", "bodyText": "what's the motivation to initialize this with null?\nI think this style is more clear:\nif (params == null) {\n\treturn null;\n} else {\n\tcopy logic;\n\treturn ...;\n}", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566207772", "createdAt": "2021-01-28T15:58:56Z", "author": {"login": "lacikaaa"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {\n+        BackupCloudwatchParams newCloudwatchParams = null;\n+        if (cloudwatchParams != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwODgyNg==", "bodyText": "missing ignoreuknown", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566208826", "createdAt": "2021-01-28T16:00:11Z", "author": {"login": "lacikaaa"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/response/BackupResponse.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.sequenceiq.common.api.backup.response;\n+\n+import com.sequenceiq.common.api.backup.base.BackupBase;\n+import io.swagger.annotations.ApiModel;\n+\n+@ApiModel(value = \"BackupResponse\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyMTQzNQ==", "bodyText": "valid to new line", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566221435", "createdAt": "2021-01-28T16:15:43Z", "author": {"login": "lacikaaa"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java", "diffHunk": "@@ -74,6 +75,9 @@\n     @ApiModelProperty(FreeIpaModelDescriptions.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(FreeIpaModelDescriptions.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNDE5Mw==", "bodyText": "I think you should check both backup and request against null or neither of them", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566224193", "createdAt": "2021-01-28T16:19:05Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -62,4 +75,28 @@ private void decorateBackupFromLoggingRequest(Backup backup, LoggingRequest logg\n             }\n         }\n     }\n+\n+    private void decorateBackupFromBackupRequest(Backup backup, BackupRequest backupRequest) {\n+        if (backupRequest != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNTc5Mw==", "bodyText": "this is not tested", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566225793", "createdAt": "2021-01-28T16:21:10Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -62,4 +75,28 @@ private void decorateBackupFromLoggingRequest(Backup backup, LoggingRequest logg\n             }\n         }\n     }\n+\n+    private void decorateBackupFromBackupRequest(Backup backup, BackupRequest backupRequest) {\n+        if (backupRequest != null) {\n+            backup.setStorageLocation(backupRequest.getStorageLocation());\n+            if (backupRequest.getS3() != null) {\n+                S3CloudStorageV1Parameters s3Params = new S3CloudStorageV1Parameters();\n+                s3Params.setInstanceProfile(backupRequest.getS3().getInstanceProfile());\n+                backup.setS3(s3Params);\n+            } else if (backupRequest.getAdlsGen2() != null) {\n+                AdlsGen2CloudStorageV1Parameters adlsGen2Params = new AdlsGen2CloudStorageV1Parameters();\n+                AdlsGen2CloudStorageV1Parameters adlsGen2FromRequest = backupRequest.getAdlsGen2();\n+                adlsGen2Params.setAccountKey(adlsGen2FromRequest.getAccountKey());\n+                adlsGen2Params.setAccountName(adlsGen2FromRequest.getAccountName());\n+                adlsGen2Params.setSecure(adlsGen2FromRequest.isSecure());\n+                adlsGen2Params.setManagedIdentity(adlsGen2FromRequest.getManagedIdentity());\n+                backup.setAdlsGen2(adlsGen2Params);\n+            } else if (backupRequest.getGcs() != null) {\n+                GcsCloudStorageV1Parameters gcsParams = new GcsCloudStorageV1Parameters();\n+                GcsCloudStorageV1Parameters gcsFromRequest = backupRequest.getGcs();\n+                gcsParams.setServiceAccountEmail(gcsFromRequest.getServiceAccountEmail());\n+                backup.setGcs(gcsParams);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNjg2MQ==", "bodyText": "when freeIpaBackupEnabled is false or request is null is not tested", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566226861", "createdAt": "2021-01-28T16:22:38Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -39,6 +40,18 @@ public Backup convert(TelemetryRequest request) {\n         return backup;\n     }\n \n+    public Backup convert(BackupRequest request) {\n+        Backup backup = null;\n+        if (freeIpaBackupEnabled && request != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/64dc260947b1c141d7d491328c2ef6c7657cff28", "committedDate": "2021-01-27T18:25:58Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "313b98e557df85e0d8e8590f39df4fdc211424fb", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/313b98e557df85e0d8e8590f39df4fdc211424fb", "committedDate": "2021-02-01T04:33:44Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "313b98e557df85e0d8e8590f39df4fdc211424fb", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/313b98e557df85e0d8e8590f39df4fdc211424fb", "committedDate": "2021-02-01T04:33:44Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "bb67a4a7fd7bb518c15b150ddbef89d0d214edb3", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/bb67a4a7fd7bb518c15b150ddbef89d0d214edb3", "committedDate": "2021-02-01T05:57:40Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb67a4a7fd7bb518c15b150ddbef89d0d214edb3", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/bb67a4a7fd7bb518c15b150ddbef89d0d214edb3", "committedDate": "2021-02-01T05:57:40Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "c71434b6b71c6c25c0b499313619692284b0558b", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c71434b6b71c6c25c0b499313619692284b0558b", "committedDate": "2021-02-03T14:07:26Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzMTA0Mjkw", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#pullrequestreview-583104290", "createdAt": "2021-02-04T07:37:48Z", "commit": {"oid": "c71434b6b71c6c25c0b499313619692284b0558b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNzozNzo0OFrOIfmQgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNzozNzo0OFrOIfmQgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDAwMzU4NA==", "bodyText": "I think this new line might not be intentional. could you revert this?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r570003584", "createdAt": "2021-02-04T07:37:48Z", "author": {"login": "lacikaaa"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java", "diffHunk": "@@ -34,7 +34,8 @@\n import io.swagger.annotations.ApiOperation;\n \n @RetryAndMetrics\n-@Path(\"/v1/freeipa\")\n+@Path(\"/\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c71434b6b71c6c25c0b499313619692284b0558b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzMTA1MDM4", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#pullrequestreview-583105038", "createdAt": "2021-02-04T07:39:11Z", "commit": {"oid": "c71434b6b71c6c25c0b499313619692284b0558b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c71434b6b71c6c25c0b499313619692284b0558b", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c71434b6b71c6c25c0b499313619692284b0558b", "committedDate": "2021-02-03T14:07:26Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\nBackups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\nIt should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "c8ced05c17b4ad70b5b3db079b56020437c8d4ed", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c8ced05c17b4ad70b5b3db079b56020437c8d4ed", "committedDate": "2021-02-04T14:41:52Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\n                                                            Backups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\n                                                            It should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "124ef42bbeee72601b58838a0e3d3b9eeb8a7caa", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/124ef42bbeee72601b58838a0e3d3b9eeb8a7caa", "committedDate": "2021-02-04T15:14:43Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\n                                                            Backups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\n                                                            It should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8ced05c17b4ad70b5b3db079b56020437c8d4ed", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c8ced05c17b4ad70b5b3db079b56020437c8d4ed", "committedDate": "2021-02-04T14:41:52Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\n                                                            Backups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\n                                                            It should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}, "afterCommit": {"oid": "124ef42bbeee72601b58838a0e3d3b9eeb8a7caa", "author": {"user": {"login": "christmasferret", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/124ef42bbeee72601b58838a0e3d3b9eeb8a7caa", "committedDate": "2021-02-04T15:14:43Z", "message": "CB-9954 and CB-9953: back-end cloudbreak change to set up separate bucket and role for freeipa auto-backup data\n\n                                                            Backups for FreeIPA need to be able to have a user-defined cloud storage location that has a separate policy to be able to be defined for that location.\n\n                                                            It should be similar as the top-level telemetry and log storage location that is usable by all SDX and Workloads including both VM and K8s based workloads."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1895, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}