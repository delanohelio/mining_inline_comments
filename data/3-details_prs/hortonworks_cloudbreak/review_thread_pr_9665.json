{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMjg1OTM2", "number": 9665, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDoyODozNVrOFO1yng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNzozNzo0OFrOFWijNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTA1Njk0OnYy", "diffSide": "RIGHT", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDoyODozNVrOIT2BmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMzozNjozN1rOIZ-4oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY3OTAwMA==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557679000", "createdAt": "2021-01-14T20:28:35Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java", "diffHunk": "@@ -31,6 +32,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNTYxNw==", "bodyText": "Thanks! updated.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564115617", "createdAt": "2021-01-25T23:36:37Z", "author": {"login": "christmasferret"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java", "diffHunk": "@@ -31,6 +32,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY3OTAwMA=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTA2NDgxOnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDozMDo0NlrOIT2GVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMzozNjo0MlrOIZ-4tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDIxMw==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680213", "createdAt": "2021-01-14T20:30:46Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNTYzOQ==", "bodyText": "Thanks! updated.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564115639", "createdAt": "2021-01-25T23:36:42Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDIxMw=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTA2NTA5OnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDozMDo1MVrOIT2Gfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNToyMDowMFrOIbM9Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDI1NQ==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680255", "createdAt": "2021-01-14T20:30:51Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNzEyNg==", "bodyText": "I didn't add @Valid for this class as AdlsGen2CloudStorageV1Parameters doesn't have validation inside. Was a copy and pre-exist in LoggingBase.java.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564117126", "createdAt": "2021-01-25T23:40:32Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDI1NQ=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMzMTUyNA==", "bodyText": "we can always make the code better and fix missing things ;)", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564331524", "createdAt": "2021-01-26T08:36:37Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDI1NQ=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM5NDc1OA==", "bodyText": "I mean AdlsGen2CloudStorageV1Parameters.java doesn't have an annotation that needs to be validated, not like the others that have annotations inside that need validation. I added @Valid to the other classes you are suggesting but just not this one. Thanks!", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r565394758", "createdAt": "2021-01-27T15:20:00Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDI1NQ=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTA2NTM5OnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDozMDo1N1rOIT2GsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMzozNjo1NVrOIZ-4_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDMwNA==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680304", "createdAt": "2021-01-14T20:30:57Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_CLOUDWATCH_ATTRIBUTES)\n+    private BackupCloudwatchParams cloudwatch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNTcwOQ==", "bodyText": "Thanks! updated.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564115709", "createdAt": "2021-01-25T23:36:55Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_CLOUDWATCH_ATTRIBUTES)\n+    private BackupCloudwatchParams cloudwatch;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDMwNA=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTA2NTY1OnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDozMTowM1rOIT2G3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMzozNjo1OVrOIZ-5Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDM0OQ==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680349", "createdAt": "2021-01-14T20:31:03Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNTczMA==", "bodyText": "Thanks! updated.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564115730", "createdAt": "2021-01-25T23:36:59Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDM0OQ=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTA2NjU0OnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDozMToyMlrOIT2HaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMjoyMjoxM1rOIZ88zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDQ4OA==", "bodyText": "gcs is missing", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557680488", "createdAt": "2021-01-14T20:31:22Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_CLOUDWATCH_ATTRIBUTES)\n+    private BackupCloudwatchParams cloudwatch;\n+\n+    public String getStorageLocation() {\n+        return storageLocation;\n+    }\n+\n+    public void setStorageLocation(String storageLocation) {\n+        this.storageLocation = storageLocation;\n+    }\n+\n+    public S3CloudStorageV1Parameters getS3() {\n+        return s3;\n+    }\n+\n+    public void setS3(S3CloudStorageV1Parameters s3) {\n+        this.s3 = s3;\n+    }\n+\n+    public AdlsGen2CloudStorageV1Parameters getAdlsGen2() {\n+        return adlsGen2;\n+    }\n+\n+    public void setAdlsGen2(AdlsGen2CloudStorageV1Parameters adlsGen2) {\n+        this.adlsGen2 = adlsGen2;\n+    }\n+\n+    public GcsCloudStorageV1Parameters getGcs() {\n+        return gcs;\n+    }\n+\n+    public void setGcs(GcsCloudStorageV1Parameters gcs) {\n+        this.gcs = gcs;\n+    }\n+\n+    public BackupCloudwatchParams getCloudwatch() {\n+        return cloudwatch;\n+    }\n+\n+    public void setCloudwatch(BackupCloudwatchParams cloudwatch) {\n+        this.cloudwatch = cloudwatch;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"BackupBase{\" +\n+                \"storageLocation='\" + storageLocation + '\\'' +\n+                \", s3=\" + s3 +\n+                \", adlsGen2=\" + adlsGen2 +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA4MzkxNw==", "bodyText": "Thanks! Added.\nIt was missing in LoggingBase.java as well. It was added in this PR a few weeks ago.\nhttps://github.com/hortonworks/cloudbreak/pull/9684/files", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564083917", "createdAt": "2021-01-25T22:22:13Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private S3CloudStorageV1Parameters s3;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_ADLS_GEN_2_ATTRIBUTES)\n+    private AdlsGen2CloudStorageV1Parameters adlsGen2;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_GCS_ATTRIBUTES)\n+    private GcsCloudStorageV1Parameters gcs;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_CLOUDWATCH_ATTRIBUTES)\n+    private BackupCloudwatchParams cloudwatch;\n+\n+    public String getStorageLocation() {\n+        return storageLocation;\n+    }\n+\n+    public void setStorageLocation(String storageLocation) {\n+        this.storageLocation = storageLocation;\n+    }\n+\n+    public S3CloudStorageV1Parameters getS3() {\n+        return s3;\n+    }\n+\n+    public void setS3(S3CloudStorageV1Parameters s3) {\n+        this.s3 = s3;\n+    }\n+\n+    public AdlsGen2CloudStorageV1Parameters getAdlsGen2() {\n+        return adlsGen2;\n+    }\n+\n+    public void setAdlsGen2(AdlsGen2CloudStorageV1Parameters adlsGen2) {\n+        this.adlsGen2 = adlsGen2;\n+    }\n+\n+    public GcsCloudStorageV1Parameters getGcs() {\n+        return gcs;\n+    }\n+\n+    public void setGcs(GcsCloudStorageV1Parameters gcs) {\n+        this.gcs = gcs;\n+    }\n+\n+    public BackupCloudwatchParams getCloudwatch() {\n+        return cloudwatch;\n+    }\n+\n+    public void setCloudwatch(BackupCloudwatchParams cloudwatch) {\n+        this.cloudwatch = cloudwatch;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"BackupBase{\" +\n+                \"storageLocation='\" + storageLocation + '\\'' +\n+                \", s3=\" + s3 +\n+                \", adlsGen2=\" + adlsGen2 +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDQ4OA=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTA3MzQ5OnYy", "diffSide": "RIGHT", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDozMzozM1rOIT2Lug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMzo0NTozMlrOIZ_E5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MTU5NA==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557681594", "createdAt": "2021-01-14T20:33:33Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java", "diffHunk": "@@ -63,6 +64,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExODc1Nw==", "bodyText": "Thanks! updated", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564118757", "createdAt": "2021-01-25T23:45:32Z", "author": {"login": "christmasferret"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java", "diffHunk": "@@ -63,6 +64,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MTU5NA=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTA4MDYxOnYy", "diffSide": "RIGHT", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDozNTo0MVrOIT2QJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMzo0NToyM1rOIZ_EuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MjcyNA==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557682724", "createdAt": "2021-01-14T20:35:41Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "diffHunk": "@@ -53,6 +54,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryResponse telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExODcxMw==", "bodyText": "Thanks! updated", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564118713", "createdAt": "2021-01-25T23:45:23Z", "author": {"login": "christmasferret"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "diffHunk": "@@ -53,6 +54,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryResponse telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MjcyNA=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTEwMzY3OnYy", "diffSide": "RIGHT", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDo0Mjo0MFrOIT2eTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMzozNzo0MlrOIZ-6Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NjM0OQ==", "bodyText": "missing @Valid annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557686349", "createdAt": "2021-01-14T20:42:40Z", "author": {"login": "bergerdenes"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java", "diffHunk": "@@ -74,6 +75,9 @@\n     @ApiModelProperty(FreeIpaModelDescriptions.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(FreeIpaModelDescriptions.BACKUP)\n+    private BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNjA0Mw==", "bodyText": "thanks! updated.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564116043", "createdAt": "2021-01-25T23:37:42Z", "author": {"login": "christmasferret"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java", "diffHunk": "@@ -74,6 +75,9 @@\n     @ApiModelProperty(FreeIpaModelDescriptions.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(FreeIpaModelDescriptions.BACKUP)\n+    private BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NjM0OQ=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTEwNzYxOnYy", "diffSide": "RIGHT", "path": "environment/src/main/resources/schema/app/20210111160131_CB-9953_add_backup_location_to_environmentdb.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDo0NDowN1rOIT2hEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMjowMTowOVrOIZ8Tpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzA1OA==", "bodyText": "NULL is the implicit default anyway", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557687058", "createdAt": "2021-01-14T20:44:07Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/resources/schema/app/20210111160131_CB-9953_add_backup_location_to_environmentdb.sql", "diffHunk": "@@ -0,0 +1,10 @@\n+-- // CB-9953 add backup location to environmentdb\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE environment ADD COLUMN IF NOT EXISTS backup TEXT DEFAULT NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA3MzM4Mw==", "bodyText": "Thanks! I dropped the default null;", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564073383", "createdAt": "2021-01-25T22:01:09Z", "author": {"login": "christmasferret"}, "path": "environment/src/main/resources/schema/app/20210111160131_CB-9953_add_backup_location_to_environmentdb.sql", "diffHunk": "@@ -0,0 +1,10 @@\n+-- // CB-9953 add backup location to environmentdb\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE environment ADD COLUMN IF NOT EXISTS backup TEXT DEFAULT NULL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzA1OA=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTEwODc5OnYy", "diffSide": "RIGHT", "path": "environment/src/main/resources/schema/app/20210111160131_CB-9953_add_backup_location_to_environmentdb.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDo0NDoyN1rOIT2huQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMTo1NTo1M1rOIZ8ICw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzIyNQ==", "bodyText": "dead code", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557687225", "createdAt": "2021-01-14T20:44:27Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/resources/schema/app/20210111160131_CB-9953_add_backup_location_to_environmentdb.sql", "diffHunk": "@@ -0,0 +1,10 @@\n+-- // CB-9953 add backup location to environmentdb\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE environment ADD COLUMN IF NOT EXISTS backup TEXT DEFAULT NULL;\n+-- UPDATE environment SET environment_service_version = 'No Info' WHERE environment_service_version IS NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA3MDQxMQ==", "bodyText": "Thanks, I deleted it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564070411", "createdAt": "2021-01-25T21:55:53Z", "author": {"login": "christmasferret"}, "path": "environment/src/main/resources/schema/app/20210111160131_CB-9953_add_backup_location_to_environmentdb.sql", "diffHunk": "@@ -0,0 +1,10 @@\n+-- // CB-9953 add backup location to environmentdb\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE environment ADD COLUMN IF NOT EXISTS backup TEXT DEFAULT NULL;\n+-- UPDATE environment SET environment_service_version = 'No Info' WHERE environment_service_version IS NULL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzIyNQ=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTExMDgxOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDo0NTowOFrOIT2jFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMzozOTowNFrOIZ-8WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzU3Mg==", "bodyText": "misleading comment?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557687572", "createdAt": "2021-01-14T20:45:08Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA3NTYxNQ==", "bodyText": "Thanks! Corrected it!", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564075615", "createdAt": "2021-01-25T22:05:40Z", "author": {"login": "christmasferret"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzU3Mg=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNjU2OQ==", "bodyText": "Thanks! changed it as it is a typo.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564116569", "createdAt": "2021-01-25T23:39:04Z", "author": {"login": "christmasferret"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzU3Mg=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTExMjE3OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDo0NTozM1rOIT2j7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMjo1ODo1OFrOIdgFyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4Nzc5MQ==", "bodyText": "gcs?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557687791", "createdAt": "2021-01-14T20:45:33Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.\n+     * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n+     */\n+    public ValidationResult validateBackupStorageLocation(Environment environment) {\n+        ValidationResult.ValidationResultBuilder resultBuilder = new ValidationResult.ValidationResultBuilder();\n+        Optional.ofNullable(environment.getBackup())\n+                .filter(backup -> isCloudStorageEnabled(backup) && backup.getCloudwatch() == null)\n+                .map(EnvironmentBackup::getStorageLocation)\n+                .ifPresent(location -> cloudStorageLocationValidator.validateBackup(location, environment, resultBuilder));\n+        return resultBuilder.build();\n+    }\n+\n+    private boolean isCloudStorageEnabled(EnvironmentBackup backup) {\n+        return backup.getS3() != null || backup.getAdlsGen2() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA2NzUxOA==", "bodyText": "Because I am only separating from logging bucket to backup bucket, I will not introduce gcs changes as it is not there for logging bucket validation now.\nIn the com.sequenceiq.environment.environment.validation.cloudstorage.EnvironmentLogStorageLocationValidator file, we have same thing that was committed by @oleewere. The purpose of this jira is to separate backup from logging bucket but keeps everything as of now.\n_private boolean isCloudStorageEnabled(EnvironmentLogging logging) {\n    return logging.getS3() != null || logging.getAdlsGen2() != null;\n}_", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564067518", "createdAt": "2021-01-25T21:50:30Z", "author": {"login": "christmasferret"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.\n+     * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n+     */\n+    public ValidationResult validateBackupStorageLocation(Environment environment) {\n+        ValidationResult.ValidationResultBuilder resultBuilder = new ValidationResult.ValidationResultBuilder();\n+        Optional.ofNullable(environment.getBackup())\n+                .filter(backup -> isCloudStorageEnabled(backup) && backup.getCloudwatch() == null)\n+                .map(EnvironmentBackup::getStorageLocation)\n+                .ifPresent(location -> cloudStorageLocationValidator.validateBackup(location, environment, resultBuilder));\n+        return resultBuilder.build();\n+    }\n+\n+    private boolean isCloudStorageEnabled(EnvironmentBackup backup) {\n+        return backup.getS3() != null || backup.getAdlsGen2() != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4Nzc5MQ=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgwNTM4Ng==", "bodyText": "yeah, good point, I need to include gcs there\nas gcs was not there, that means validation is not happening for gcs env", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567805386", "createdAt": "2021-02-01T12:58:58Z", "author": {"login": "oleewere"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.\n+     * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n+     */\n+    public ValidationResult validateBackupStorageLocation(Environment environment) {\n+        ValidationResult.ValidationResultBuilder resultBuilder = new ValidationResult.ValidationResultBuilder();\n+        Optional.ofNullable(environment.getBackup())\n+                .filter(backup -> isCloudStorageEnabled(backup) && backup.getCloudwatch() == null)\n+                .map(EnvironmentBackup::getStorageLocation)\n+                .ifPresent(location -> cloudStorageLocationValidator.validateBackup(location, environment, resultBuilder));\n+        return resultBuilder.build();\n+    }\n+\n+    private boolean isCloudStorageEnabled(EnvironmentBackup backup) {\n+        return backup.getS3() != null || backup.getAdlsGen2() != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4Nzc5MQ=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTEyODU0OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDo1MDowN1rOIT2ttA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMzowMTozM1rOIdgLnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDI5Mg==", "bodyText": "do I understand correctly if cloud storage location is validated only if there is no cloudwatch field  set on the backup?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557690292", "createdAt": "2021-01-14T20:50:07Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.\n+     * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n+     */\n+    public ValidationResult validateBackupStorageLocation(Environment environment) {\n+        ValidationResult.ValidationResultBuilder resultBuilder = new ValidationResult.ValidationResultBuilder();\n+        Optional.ofNullable(environment.getBackup())\n+                .filter(backup -> isCloudStorageEnabled(backup) && backup.getCloudwatch() == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA2NDcyMA==", "bodyText": "The purpose of this jira is to separate backup from logging bucket but keeps everything as of now.\n@oleewere https://github.com/hortonworks/cloudbreak/pull/6851/files\nThis is a direct copy of @oleewere's change in the above pull request from the EnvironmentLogStorageLocationValidator.\n.filter(logging -> logging.getCloudwatch() == null)\nAs I am only separating backup bucket from logging bucket, I am coping the same validation policy as what is working currently.\nOliver specifically commented \"* Currently, filter out cloudwatch (or any other cloud logging service) related validations\"\nHi @oleewere Would you mind checking why it is filtering by cloudwatch == null in your previous commits? Thanks!", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564064720", "createdAt": "2021-01-25T21:45:31Z", "author": {"login": "christmasferret"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.\n+     * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n+     */\n+    public ValidationResult validateBackupStorageLocation(Environment environment) {\n+        ValidationResult.ValidationResultBuilder resultBuilder = new ValidationResult.ValidationResultBuilder();\n+        Optional.ofNullable(environment.getBackup())\n+                .filter(backup -> isCloudStorageEnabled(backup) && backup.getCloudwatch() == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDI5Mg=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgwNjg3OQ==", "bodyText": "sorry for late response, so we can send log data to cloudwatch instead of s3, but the instance profile is validated against s3, so we only do the validation if no cloudwatch enabled. all of this won't be related for backup", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567806879", "createdAt": "2021-02-01T13:01:33Z", "author": {"login": "oleewere"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/EnvironmentBackupLocationValidator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.environment.environment.validation.cloudstorage;\n+\n+import java.util.Optional;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentBackup;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.validation.ValidationResult;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+\n+@Component\n+public class EnvironmentBackupLocationValidator {\n+\n+    private final CloudStorageLocationValidator cloudStorageLocationValidator;\n+\n+    public EnvironmentBackupLocationValidator(CloudStorageLocationValidator cloudStorageLocationValidator) {\n+        this.cloudStorageLocationValidator = cloudStorageLocationValidator;\n+    }\n+\n+    /**\n+     * Validate telemetry related logging storage location.\n+     * Currently, filter out cloudwatch (or any other cloud logging service) related validations\n+     */\n+    public ValidationResult validateBackupStorageLocation(Environment environment) {\n+        ValidationResult.ValidationResultBuilder resultBuilder = new ValidationResult.ValidationResultBuilder();\n+        Optional.ofNullable(environment.getBackup())\n+                .filter(backup -> isCloudStorageEnabled(backup) && backup.getCloudwatch() == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDI5Mg=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTEzMTcwOnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDo1MTowOFrOIT2vtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMzozODo0N1rOIZ-75w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDgwNA==", "bodyText": "is it telemetry or just backup? (question stands for all below)", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557690804", "createdAt": "2021-01-14T20:51:08Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java", "diffHunk": "@@ -14,6 +15,11 @@\n     public static final String TELEMETRY_LOGGING_GCS_ATTRIBUTES = \"telemetry - logging gcs attributes\";\n     public static final String TELEMETRY_LOGGING_CLOUDWATCH_ATTRIBUTES = \"telemetry - logging cloudwatch attributes\";\n     public static final String TELEMETRY_LOGGING_STORAGE_LOCATION = \"telemetry - logging storage location / container\";\n+    public static final String TELEMETRY_BACKUP_S3_ATTRIBUTES = \"telemetry - backup s3 attributes\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNjQ1NQ==", "bodyText": "Thanks! removed it as it is a typo.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564116455", "createdAt": "2021-01-25T23:38:47Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java", "diffHunk": "@@ -14,6 +15,11 @@\n     public static final String TELEMETRY_LOGGING_GCS_ATTRIBUTES = \"telemetry - logging gcs attributes\";\n     public static final String TELEMETRY_LOGGING_CLOUDWATCH_ATTRIBUTES = \"telemetry - logging cloudwatch attributes\";\n     public static final String TELEMETRY_LOGGING_STORAGE_LOCATION = \"telemetry - logging storage location / container\";\n+    public static final String TELEMETRY_BACKUP_S3_ATTRIBUTES = \"telemetry - backup s3 attributes\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDgwNA=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTEzMjA5OnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDo1MToxM1rOIT2v5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMzozODoyMFrOIZ-7Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDg1NQ==", "bodyText": "is it telemetry or just backup?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557690855", "createdAt": "2021-01-14T20:51:13Z", "author": {"login": "bergerdenes"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n public class TelemetryModelDescription {\n \n+    public static final String TELEMETRY_BACKUP = \"Cloud backup (telemetry) settings.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDExNjI5MA==", "bodyText": "Thanks! removed it as it is a typo.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564116290", "createdAt": "2021-01-25T23:38:20Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/telemetry/doc/TelemetryModelDescription.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n public class TelemetryModelDescription {\n \n+    public static final String TELEMETRY_BACKUP = \"Cloud backup (telemetry) settings.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MDg1NQ=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTE0MTIzOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/CloudStorageLocationValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDo1Mzo0NlrOIT218g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMjoxMzo1NVrOIZ8sqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MjQwMg==", "bodyText": "response variable is not needed, just return Optional.empty()", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r557692402", "createdAt": "2021-01-14T20:53:46Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/CloudStorageLocationValidator.java", "diffHunk": "@@ -60,6 +61,37 @@ public void validate(String storageLocation, Environment environment, Validation\n         return response;\n     }\n \n+    public void validateBackup(String storageLocation, Environment environment, ValidationResultBuilder resultBuilder) {\n+        Optional<FileSystemType> fileSystemType = getBackupFileSystemType(environment);\n+        String bucketName = getBucketName(fileSystemType, storageLocation);\n+        CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environment.getCredential());\n+        ObjectStorageMetadataRequest request = createObjectStorageMetadataRequest(environment.getCloudPlatform(), cloudCredential, bucketName);\n+        ObjectStorageMetadataResponse response = ThreadBasedUserCrnProvider.doAsInternalActor(() ->\n+                cloudProviderServicesV4Endopint.getObjectStorageMetaData(request));\n+        resultBuilder.ifError(() -> response.getStatus() == ResponseStatus.OK && !environment.getLocation().equals(response.getRegion()),\n+                String.format(\"Object storage location [%s] of bucket '%s' must match environment location [%s]\",\n+                        response.getRegion(),\n+                        bucketName,\n+                        environment.getLocation()));\n+    }\n+\n+    private Optional<FileSystemType> getBackupFileSystemType(Environment environment) {\n+        Optional<FileSystemType> response = Optional.empty();\n+        if (environment.getBackup() != null) {\n+            EnvironmentBackup backup = environment.getBackup();\n+            if (backup.getS3() != null) {\n+                return Optional.of(backup.getS3().getType());\n+            }\n+            if (backup.getAdlsGen2() != null) {\n+                return Optional.of(backup.getAdlsGen2().getType());\n+            }\n+            if (backup.getGcs() != null) {\n+                return Optional.of(backup.getGcs().getType());\n+            }\n+        }\n+        return response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA3OTc4Ng==", "bodyText": "Thanks! Made the change.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r564079786", "createdAt": "2021-01-25T22:13:55Z", "author": {"login": "christmasferret"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/cloudstorage/CloudStorageLocationValidator.java", "diffHunk": "@@ -60,6 +61,37 @@ public void validate(String storageLocation, Environment environment, Validation\n         return response;\n     }\n \n+    public void validateBackup(String storageLocation, Environment environment, ValidationResultBuilder resultBuilder) {\n+        Optional<FileSystemType> fileSystemType = getBackupFileSystemType(environment);\n+        String bucketName = getBucketName(fileSystemType, storageLocation);\n+        CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environment.getCredential());\n+        ObjectStorageMetadataRequest request = createObjectStorageMetadataRequest(environment.getCloudPlatform(), cloudCredential, bucketName);\n+        ObjectStorageMetadataResponse response = ThreadBasedUserCrnProvider.doAsInternalActor(() ->\n+                cloudProviderServicesV4Endopint.getObjectStorageMetaData(request));\n+        resultBuilder.ifError(() -> response.getStatus() == ResponseStatus.OK && !environment.getLocation().equals(response.getRegion()),\n+                String.format(\"Object storage location [%s] of bucket '%s' must match environment location [%s]\",\n+                        response.getRegion(),\n+                        bucketName,\n+                        environment.getLocation()));\n+    }\n+\n+    private Optional<FileSystemType> getBackupFileSystemType(Environment environment) {\n+        Optional<FileSystemType> response = Optional.empty();\n+        if (environment.getBackup() != null) {\n+            EnvironmentBackup backup = environment.getBackup();\n+            if (backup.getS3() != null) {\n+                return Optional.of(backup.getS3().getType());\n+            }\n+            if (backup.getAdlsGen2() != null) {\n+                return Optional.of(backup.getAdlsGen2().getType());\n+            }\n+            if (backup.getGcs() != null) {\n+                return Optional.of(backup.getGcs().getType());\n+            }\n+        }\n+        return response;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MjQwMg=="}, "originalCommit": {"oid": "e1c54cb96c4f837a7cdcab925cddb064d89a23c6"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MTQ2NzY2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/stack/CreateFreeIpaRequestToStackConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNTo1MzoxM1rOIbOrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMDowODozMFrOIbZgOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQyMjg4NA==", "bodyText": "I think the environment service also needs logic like this. (we need it in both places)", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r565422884", "createdAt": "2021-01-27T15:53:13Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/stack/CreateFreeIpaRequestToStackConverter.java", "diffHunk": "@@ -120,7 +120,11 @@ public Stack convert(CreateFreeIpaRequest source, String accountId, Future<Strin\n             stack.setNetwork(networkConverter.convert(source.getNetwork()));\n         }\n         stack.setTelemetry(telemetryConverter.convert(source.getTelemetry()));\n-        stack.setBackup(backupConverter.convert(source.getTelemetry()));\n+        if (source.getBackupRequest() != null && isNotEmpty(source.getBackupRequest().getStorageLocation())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a491e3c6cfcda4080bfa522b98366c49ff831cb8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYwMDMxMg==", "bodyText": "Thanks! I added the logic in EnvironmentApiConverter.java\n                .withBackup((request.getBackupRequest() != null && isNotEmpty(request.getBackupRequest().getStorageLocation())) ?\n                        backupConverter.convert(request.getBackupRequest()) : backupConverter.convert(request.getTelemetry()))\n\nI tested again using old UI and old dpcli\n\nSo now the environment table has the backup populated as log.\n\nConfirmed backup in log folder.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r565600312", "createdAt": "2021-01-27T20:08:30Z", "author": {"login": "christmasferret"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/stack/CreateFreeIpaRequestToStackConverter.java", "diffHunk": "@@ -120,7 +120,11 @@ public Stack convert(CreateFreeIpaRequest source, String accountId, Future<Strin\n             stack.setNetwork(networkConverter.convert(source.getNetwork()));\n         }\n         stack.setTelemetry(telemetryConverter.convert(source.getTelemetry()));\n-        stack.setBackup(backupConverter.convert(source.getTelemetry()));\n+        if (source.getBackupRequest() != null && isNotEmpty(source.getBackupRequest().getStorageLocation())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQyMjg4NA=="}, "originalCommit": {"oid": "a491e3c6cfcda4080bfa522b98366c49ff831cb8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjAwMzcwOnYy", "diffSide": "RIGHT", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDoxNToxM1rOIb5keg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNDozODowM1rOIdRGEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNTY5MA==", "bodyText": "Sorry for noticing this point just now but I would like to ask to rename the backupRequest to simply backup. I don't know how big effort is this at the UI side.\nSimilar renames are commented below.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566125690", "createdAt": "2021-01-28T14:15:13Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java", "diffHunk": "@@ -31,6 +32,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU1OTY5OQ==", "bodyText": "Thanks! Changed it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567559699", "createdAt": "2021-02-01T04:38:03Z", "author": {"login": "christmasferret"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentEditRequest.java", "diffHunk": "@@ -31,6 +32,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNTY5MA=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjAwNTQ3OnYy", "diffSide": "RIGHT", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDoxNTozMFrOIb5lhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNDozODoxN1rOIdRGRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNTk1OA==", "bodyText": "Please rename the backupRequest to backup", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566125958", "createdAt": "2021-01-28T14:15:30Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java", "diffHunk": "@@ -63,6 +64,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU1OTc0OA==", "bodyText": "Thanks! Changed it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567559748", "createdAt": "2021-02-01T04:38:17Z", "author": {"login": "christmasferret"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/EnvironmentRequest.java", "diffHunk": "@@ -63,6 +64,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNTk1OA=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjAwNzM3OnYy", "diffSide": "RIGHT", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/DetailedEnvironmentResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDoxNTo1M1rOIb5muQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNDozOToxNlrOIdRHFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjI2NQ==", "bodyText": "Please rename the backupResponse to backup", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566126265", "createdAt": "2021-01-28T14:15:53Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/DetailedEnvironmentResponse.java", "diffHunk": "@@ -70,6 +71,8 @@ public void setProxyConfig(ProxyResponse proxyConfig) {\n \n         private TelemetryResponse telemetry;\n \n+        private BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU1OTk1Ng==", "bodyText": "Thanks. changed it", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567559956", "createdAt": "2021-02-01T04:39:16Z", "author": {"login": "christmasferret"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/DetailedEnvironmentResponse.java", "diffHunk": "@@ -70,6 +71,8 @@ public void setProxyConfig(ProxyResponse proxyConfig) {\n \n         private TelemetryResponse telemetry;\n \n+        private BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjI2NQ=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjAwODY1OnYy", "diffSide": "RIGHT", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDoxNjoxMFrOIb5niw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNDozOTo0MVrOIdRHWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjQ3NQ==", "bodyText": "Please rename the backupResponse to backup", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566126475", "createdAt": "2021-01-28T14:16:10Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "diffHunk": "@@ -53,6 +56,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryResponse telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2MDAyNg==", "bodyText": "Thanks! Changed.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567560026", "createdAt": "2021-02-01T04:39:41Z", "author": {"login": "christmasferret"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "diffHunk": "@@ -53,6 +56,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.TELEMETRY)\n     private TelemetryResponse telemetry;\n \n+    @ApiModelProperty(EnvironmentModelDescription.BACKUP)\n+    private @Valid BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjQ3NQ=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjAwOTcyOnYy", "diffSide": "RIGHT", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDoxNjoyNFrOIb5oPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNDozODo1OFrOIdRG0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjY1NA==", "bodyText": "Please rename the backupResponse to backup", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566126654", "createdAt": "2021-01-28T14:16:24Z", "author": {"login": "bergerdenes"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java", "diffHunk": "@@ -63,6 +64,8 @@ public static Builder builder() {\n \n         private TelemetryResponse telemetry;\n \n+        private BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU1OTg5MQ==", "bodyText": "Thanks! Changed it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567559891", "createdAt": "2021-02-01T04:38:58Z", "author": {"login": "christmasferret"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java", "diffHunk": "@@ -63,6 +64,8 @@ public static Builder builder() {\n \n         private TelemetryResponse telemetry;\n \n+        private BackupResponse backupResponse;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyNjY1NA=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjQ0MTc1OnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNTo0NDowMVrOIb91DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNDo0MDoxNVrOIdRH8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjE5NTQ2OA==", "bodyText": "@Valid should be in a separate line, like @NotNull", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566195468", "createdAt": "2021-01-28T15:44:01Z", "author": {"login": "lacikaaa"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private @Valid S3CloudStorageV1Parameters s3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2MDE3OA==", "bodyText": "Thanks! Changed it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567560178", "createdAt": "2021-02-01T04:40:15Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/base/BackupBase.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.common.api.backup.base;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.cloudstorage.old.GcsCloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.backup.model.BackupCloudwatchParams;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BackupBase implements Serializable {\n+\n+    @NotNull\n+    @ApiModelProperty(BackupModelDescription.BACKUP_STORAGE_LOCATION)\n+    private String storageLocation;\n+\n+    @ApiModelProperty(BackupModelDescription.BACKUP_S3_ATTRIBUTES)\n+    private @Valid S3CloudStorageV1Parameters s3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjE5NTQ2OA=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjQ5NTY3OnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNTo1NDo0N1rOIb-XKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNDo1MDoyMVrOIdRRBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNDIwMQ==", "bodyText": "why is this copy necessary?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566204201", "createdAt": "2021-01-28T15:54:47Z", "author": {"login": "lacikaaa"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2MjUwMA==", "bodyText": "This is a copy of the current working logging code.\nIn TelemetryConverter.java, in the createLoggingRequestFromSource() method, there is one line as below,\nloggingRequest.setCloudwatch(CloudwatchParams.copy(logging.getCloudwatch()));\nIt creates a deep copy of the cloudwatch variable and assigns it to the logging request so that the logging object in telemetry and logging object in LoggingRequest are decoupled. Change one will not change the other one.\nWhen I separated the backup from logging, I did the same thing to create a deep copy so that the variable is decoupled in different objects.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567562500", "createdAt": "2021-02-01T04:50:21Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNDIwMQ=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjUwNTkzOnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNTo1Njo0NVrOIb-drg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNDo1MToxMFrOIdRRww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNTg3MA==", "bodyText": "this looks like more a converter than a copy. I'm not sure if this really belongs into this class. Or it could be a constructor which accepts this class, but it's definitely not a copy", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566205870", "createdAt": "2021-01-28T15:56:45Z", "author": {"login": "lacikaaa"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {\n+        BackupCloudwatchParams newCloudwatchParams = null;\n+        if (cloudwatchParams != null) {\n+            newCloudwatchParams = new BackupCloudwatchParams();\n+            newCloudwatchParams.setStreamKey(cloudwatchParams.getStreamKey());\n+            newCloudwatchParams.setInstanceProfile(cloudwatchParams.getInstanceProfile());\n+            newCloudwatchParams.setRegion(cloudwatchParams.getRegion());\n+        }\n+        return newCloudwatchParams;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(CloudwatchParams cloudwatchParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2MjY5MQ==", "bodyText": "Thanks a lot for the suggestion! You are right. I moved it to convertBackupCloudwatchParams() method.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567562691", "createdAt": "2021-02-01T04:51:10Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {\n+        BackupCloudwatchParams newCloudwatchParams = null;\n+        if (cloudwatchParams != null) {\n+            newCloudwatchParams = new BackupCloudwatchParams();\n+            newCloudwatchParams.setStreamKey(cloudwatchParams.getStreamKey());\n+            newCloudwatchParams.setInstanceProfile(cloudwatchParams.getInstanceProfile());\n+            newCloudwatchParams.setRegion(cloudwatchParams.getRegion());\n+        }\n+        return newCloudwatchParams;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(CloudwatchParams cloudwatchParams) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNTg3MA=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjUxNzg4OnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNTo1ODo1NlrOIb-lHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNTo1ODoxNVrOIdSWBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNzc3Mg==", "bodyText": "what's the motivation to initialize this with null?\nI think this style is more clear:\nif (params == null) {\n\treturn null;\n} else {\n\tcopy logic;\n\treturn ...;\n}", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566207772", "createdAt": "2021-01-28T15:58:56Z", "author": {"login": "lacikaaa"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {\n+        BackupCloudwatchParams newCloudwatchParams = null;\n+        if (cloudwatchParams != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU4MDE2Nw==", "bodyText": "Thanks! I changed to as above. It makes sense.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567580167", "createdAt": "2021-02-01T05:58:15Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/model/BackupCloudwatchParams.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.common.api.backup.model;\n+\n+import java.io.Serializable;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.common.api.backup.doc.BackupModelDescription;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchParams;\n+import com.sequenceiq.common.api.telemetry.model.CloudwatchStreamKey;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BackupCloudwatchParams implements Serializable {\n+\n+    @ApiModelProperty\n+    @NotNull\n+    private String instanceProfile;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS_REGION)\n+    private String region;\n+\n+    @ApiModelProperty(BackupModelDescription.CLOUDWATCH_PARAMS)\n+    private CloudwatchStreamKey streamKey = CloudwatchStreamKey.HOSTNAME;\n+\n+    public String getInstanceProfile() {\n+        return instanceProfile;\n+    }\n+\n+    public void setInstanceProfile(String instanceProfile) {\n+        this.instanceProfile = instanceProfile;\n+    }\n+\n+    public CloudwatchStreamKey getStreamKey() {\n+        return streamKey;\n+    }\n+\n+    public void setStreamKey(CloudwatchStreamKey streamKey) {\n+        this.streamKey = streamKey;\n+    }\n+\n+    public String getRegion() {\n+        return region;\n+    }\n+\n+    public void setRegion(String region) {\n+        this.region = region;\n+    }\n+\n+    @JsonIgnore\n+    public static BackupCloudwatchParams copy(BackupCloudwatchParams cloudwatchParams) {\n+        BackupCloudwatchParams newCloudwatchParams = null;\n+        if (cloudwatchParams != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwNzc3Mg=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjUyMzk4OnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/response/BackupResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNjowMDoxMVrOIb-pOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNToxMzoxM1rOIdRlYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwODgyNg==", "bodyText": "missing ignoreuknown", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566208826", "createdAt": "2021-01-28T16:00:11Z", "author": {"login": "lacikaaa"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/response/BackupResponse.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.sequenceiq.common.api.backup.response;\n+\n+import com.sequenceiq.common.api.backup.base.BackupBase;\n+import io.swagger.annotations.ApiModel;\n+\n+@ApiModel(value = \"BackupResponse\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2NzcxNA==", "bodyText": "Thanks. added ignoreUnknown = true", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567567714", "createdAt": "2021-02-01T05:13:13Z", "author": {"login": "christmasferret"}, "path": "common-model/src/main/java/com/sequenceiq/common/api/backup/response/BackupResponse.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.sequenceiq.common.api.backup.response;\n+\n+import com.sequenceiq.common.api.backup.base.BackupBase;\n+import io.swagger.annotations.ApiModel;\n+\n+@ApiModel(value = \"BackupResponse\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIwODgyNg=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjYwMDg1OnYy", "diffSide": "RIGHT", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNjoxNTo0M1rOIb_aew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNToxNDozOVrOIdRmxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyMTQzNQ==", "bodyText": "valid to new line", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566221435", "createdAt": "2021-01-28T16:15:43Z", "author": {"login": "lacikaaa"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java", "diffHunk": "@@ -74,6 +75,9 @@\n     @ApiModelProperty(FreeIpaModelDescriptions.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(FreeIpaModelDescriptions.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2ODA2OQ==", "bodyText": "thanks! changed.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567568069", "createdAt": "2021-02-01T05:14:39Z", "author": {"login": "christmasferret"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/model/create/CreateFreeIpaRequest.java", "diffHunk": "@@ -74,6 +75,9 @@\n     @ApiModelProperty(FreeIpaModelDescriptions.TELEMETRY)\n     private TelemetryRequest telemetry;\n \n+    @ApiModelProperty(FreeIpaModelDescriptions.BACKUP)\n+    private @Valid BackupRequest backupRequest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyMTQzNQ=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjYxODM5OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNjoxOTowNVrOIb_lQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNToxNToyMFrOIdRnYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNDE5Mw==", "bodyText": "I think you should check both backup and request against null or neither of them", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566224193", "createdAt": "2021-01-28T16:19:05Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -62,4 +75,28 @@ private void decorateBackupFromLoggingRequest(Backup backup, LoggingRequest logg\n             }\n         }\n     }\n+\n+    private void decorateBackupFromBackupRequest(Backup backup, BackupRequest backupRequest) {\n+        if (backupRequest != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2ODIyNw==", "bodyText": "Thanks! I checked both now. Indeed it makes sense.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567568227", "createdAt": "2021-02-01T05:15:20Z", "author": {"login": "christmasferret"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -62,4 +75,28 @@ private void decorateBackupFromLoggingRequest(Backup backup, LoggingRequest logg\n             }\n         }\n     }\n+\n+    private void decorateBackupFromBackupRequest(Backup backup, BackupRequest backupRequest) {\n+        if (backupRequest != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNDE5Mw=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjYyOTA3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNjoyMToxMFrOIb_rgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNToxNTo1OVrOIdRoDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNTc5Mw==", "bodyText": "this is not tested", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566225793", "createdAt": "2021-01-28T16:21:10Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -62,4 +75,28 @@ private void decorateBackupFromLoggingRequest(Backup backup, LoggingRequest logg\n             }\n         }\n     }\n+\n+    private void decorateBackupFromBackupRequest(Backup backup, BackupRequest backupRequest) {\n+        if (backupRequest != null) {\n+            backup.setStorageLocation(backupRequest.getStorageLocation());\n+            if (backupRequest.getS3() != null) {\n+                S3CloudStorageV1Parameters s3Params = new S3CloudStorageV1Parameters();\n+                s3Params.setInstanceProfile(backupRequest.getS3().getInstanceProfile());\n+                backup.setS3(s3Params);\n+            } else if (backupRequest.getAdlsGen2() != null) {\n+                AdlsGen2CloudStorageV1Parameters adlsGen2Params = new AdlsGen2CloudStorageV1Parameters();\n+                AdlsGen2CloudStorageV1Parameters adlsGen2FromRequest = backupRequest.getAdlsGen2();\n+                adlsGen2Params.setAccountKey(adlsGen2FromRequest.getAccountKey());\n+                adlsGen2Params.setAccountName(adlsGen2FromRequest.getAccountName());\n+                adlsGen2Params.setSecure(adlsGen2FromRequest.isSecure());\n+                adlsGen2Params.setManagedIdentity(adlsGen2FromRequest.getManagedIdentity());\n+                backup.setAdlsGen2(adlsGen2Params);\n+            } else if (backupRequest.getGcs() != null) {\n+                GcsCloudStorageV1Parameters gcsParams = new GcsCloudStorageV1Parameters();\n+                GcsCloudStorageV1Parameters gcsFromRequest = backupRequest.getGcs();\n+                gcsParams.setServiceAccountEmail(gcsFromRequest.getServiceAccountEmail());\n+                backup.setGcs(gcsParams);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2ODM5OQ==", "bodyText": "Thanks! This is a copy of the original working code where backup location was fetched from the logging request. As I am only separating backup from logging, this will work as exactly before.\nprivate void decorateBackupFromLoggingRequest(Backup backup, LoggingRequest loggingRequest) {\n        if (backup != null && loggingRequest != null) {\n            backup.setStorageLocation(loggingRequest.getStorageLocation());\n            if (loggingRequest.getS3() != null) {\n                S3CloudStorageV1Parameters s3Params = new S3CloudStorageV1Parameters();\n                s3Params.setInstanceProfile(loggingRequest.getS3().getInstanceProfile());\n                backup.setS3(s3Params);\n            } else if (loggingRequest.getAdlsGen2() != null) {\n                AdlsGen2CloudStorageV1Parameters adlsGen2Params = new AdlsGen2CloudStorageV1Parameters();\n                AdlsGen2CloudStorageV1Parameters adlsGen2FromRequest = loggingRequest.getAdlsGen2();\n                adlsGen2Params.setAccountKey(adlsGen2FromRequest.getAccountKey());\n                adlsGen2Params.setAccountName(adlsGen2FromRequest.getAccountName());\n                adlsGen2Params.setSecure(adlsGen2FromRequest.isSecure());\n                adlsGen2Params.setManagedIdentity(adlsGen2FromRequest.getManagedIdentity());\n                backup.setAdlsGen2(adlsGen2Params);\n            } else if (loggingRequest.getGcs() != null) {\n                GcsCloudStorageV1Parameters gcsParams = new GcsCloudStorageV1Parameters();\n                GcsCloudStorageV1Parameters gcsFromRequest = loggingRequest.getGcs();\n                gcsParams.setServiceAccountEmail(gcsFromRequest.getServiceAccountEmail());\n                backup.setGcs(gcsParams);\n            }\n        }\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567568399", "createdAt": "2021-02-01T05:15:59Z", "author": {"login": "christmasferret"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -62,4 +75,28 @@ private void decorateBackupFromLoggingRequest(Backup backup, LoggingRequest logg\n             }\n         }\n     }\n+\n+    private void decorateBackupFromBackupRequest(Backup backup, BackupRequest backupRequest) {\n+        if (backupRequest != null) {\n+            backup.setStorageLocation(backupRequest.getStorageLocation());\n+            if (backupRequest.getS3() != null) {\n+                S3CloudStorageV1Parameters s3Params = new S3CloudStorageV1Parameters();\n+                s3Params.setInstanceProfile(backupRequest.getS3().getInstanceProfile());\n+                backup.setS3(s3Params);\n+            } else if (backupRequest.getAdlsGen2() != null) {\n+                AdlsGen2CloudStorageV1Parameters adlsGen2Params = new AdlsGen2CloudStorageV1Parameters();\n+                AdlsGen2CloudStorageV1Parameters adlsGen2FromRequest = backupRequest.getAdlsGen2();\n+                adlsGen2Params.setAccountKey(adlsGen2FromRequest.getAccountKey());\n+                adlsGen2Params.setAccountName(adlsGen2FromRequest.getAccountName());\n+                adlsGen2Params.setSecure(adlsGen2FromRequest.isSecure());\n+                adlsGen2Params.setManagedIdentity(adlsGen2FromRequest.getManagedIdentity());\n+                backup.setAdlsGen2(adlsGen2Params);\n+            } else if (backupRequest.getGcs() != null) {\n+                GcsCloudStorageV1Parameters gcsParams = new GcsCloudStorageV1Parameters();\n+                GcsCloudStorageV1Parameters gcsFromRequest = backupRequest.getGcs();\n+                gcsParams.setServiceAccountEmail(gcsFromRequest.getServiceAccountEmail());\n+                backup.setGcs(gcsParams);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNTc5Mw=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjYzNTk0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNjoyMjozOFrOIb_vrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQwNToxNjozM1rOIdRozg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNjg2MQ==", "bodyText": "when freeIpaBackupEnabled is false or request is null is not tested", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r566226861", "createdAt": "2021-01-28T16:22:38Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -39,6 +40,18 @@ public Backup convert(TelemetryRequest request) {\n         return backup;\n     }\n \n+    public Backup convert(BackupRequest request) {\n+        Backup backup = null;\n+        if (freeIpaBackupEnabled && request != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU2ODU5MA==", "bodyText": "Thanks! Now I added test cases for freeIpaBackupEnabled is false or request is null.\nThis is a copy of the original working code\n    public Backup convert(TelemetryRequest request) {\n        Backup backup = null;\n        if (freeIpaBackupEnabled && request != null && request.getLogging() != null) {", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r567568590", "createdAt": "2021-02-01T05:16:33Z", "author": {"login": "christmasferret"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -39,6 +40,18 @@ public Backup convert(TelemetryRequest request) {\n         return backup;\n     }\n \n+    public Backup convert(BackupRequest request) {\n+        Backup backup = null;\n+        if (freeIpaBackupEnabled && request != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyNjg2MQ=="}, "originalCommit": {"oid": "64dc260947b1c141d7d491328c2ef6c7657cff28"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MTc5MDYzOnYy", "diffSide": "RIGHT", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNzozNzo0OFrOIfmQgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNDo0Mzo0NVrOIf3BJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDAwMzU4NA==", "bodyText": "I think this new line might not be intentional. could you revert this?", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r570003584", "createdAt": "2021-02-04T07:37:48Z", "author": {"login": "lacikaaa"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java", "diffHunk": "@@ -34,7 +34,8 @@\n import io.swagger.annotations.ApiOperation;\n \n @RetryAndMetrics\n-@Path(\"/v1/freeipa\")\n+@Path(\"/\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c71434b6b71c6c25c0b499313619692284b0558b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDI3ODE4MA==", "bodyText": "Thanks a lot! Surprised this is not caught by style check. reverted it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9665#discussion_r570278180", "createdAt": "2021-02-04T14:43:45Z", "author": {"login": "christmasferret"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/stack/FreeIpaV1Endpoint.java", "diffHunk": "@@ -34,7 +34,8 @@\n import io.swagger.annotations.ApiOperation;\n \n @RetryAndMetrics\n-@Path(\"/v1/freeipa\")\n+@Path(\"/\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDAwMzU4NA=="}, "originalCommit": {"oid": "c71434b6b71c6c25c0b499313619692284b0558b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3377, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}