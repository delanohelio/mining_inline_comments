{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNzA2MjYx", "number": 9068, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTozMTowN1rOEmiN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjoxMTo0MlrOEmjlMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODQxOTgzOnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CDPRestCommonService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTozMTowN1rOHWnixQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTozMTowN1rOHWnixQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ3ODU5Nw==", "bodyText": "The method name is misstyped.", "url": "https://github.com/hortonworks/cloudbreak/pull/9068#discussion_r493478597", "createdAt": "2020-09-23T11:31:07Z", "author": {"login": "biharitomi"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CDPRestCommonService.java", "diffHunk": "@@ -36,30 +37,44 @@\n     @Inject\n     private Map<String, CustomCrnOrNameProvider> customCrnOrNameProviders;\n \n-    public Map<String, String> collectCrnAndNameIfPresent(RestCallDetails restCallDetails, CDPOperationDetails operationDetails,\n-            Map<String, String> restParams, String nameField, String crnField) {\n+    public Map<String, String> collectCrnAndNameIfPresent(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n+            String nameField, String crnField) {\n         Map<String, String> params = new HashMap<>();\n+\n         RestRequestDetails restRequest = restCallDetails.getRestRequest();\n+\n         Json requestJson = getJson(restRequest.getBody());\n         Json responseJson = getJson(restCallDetails.getRestResponse().getBody());\n+\n         Map<String, String> copyRestParams = new HashMap<>(restParams);\n-        CustomCrnOrNameProvider customCrnOrNameProvider = customCrnOrNameProviders.get(restParams.get(RESOURCE_TYPE) + \"CustomCrnOrNameProvider\");\n-        if (customCrnOrNameProvider != null) {\n-            copyRestParams.putAll(customCrnOrNameProvider.provide(restCallDetails, operationDetails, restParams, nameField, crnField));\n-        }\n+        copyRestParams.putAll(collectFromCrnOPrNameProvider(restCallDetails, operationDetails, restParams, nameField, crnField));\n+\n         String resourceCrn = getCrn(requestJson, responseJson, operationDetails, copyRestParams, crnField);\n         String name = getName(requestJson, responseJson, operationDetails, copyRestParams, nameField);\n \n         checkNameOrCrnProvided(restRequest, resourceCrn, name);\n \n+        addNameAndCrnIfNotEmpty(nameField, crnField, params, resourceCrn, name);\n+        return params;\n+    }\n+\n+    private void addNameAndCrnIfNotEmpty(String nameField, String crnField, Map<String, String> params, String resourceCrn, String name) {\n         if (StringUtils.isNotEmpty(name)) {\n             params.put(nameField, name);\n         }\n \n         if (StringUtils.isNotEmpty(resourceCrn)) {\n             params.put(crnField, resourceCrn);\n         }\n-        return params;\n+    }\n+\n+    private Map<String, String> collectFromCrnOPrNameProvider(RestCallDetails restCallDetails, CDPOperationDetails operationDetails,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51c8c503d46aebf52b82f80facb522bf5bc032c9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODYyMTM2OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/DataCollectorComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjowNzo1NVrOHWph-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjowNzo1NVrOHWph-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUxMTE2Mg==", "bodyText": "I would name it that contains that it is using repositories to fetch entities/resources back like RepositoryBasedEntity/ResourceCollector", "url": "https://github.com/hortonworks/cloudbreak/pull/9068#discussion_r493511162", "createdAt": "2020-09-23T12:07:55Z", "author": {"login": "biharitomi"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/DataCollectorComponent.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.filter;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_CRN;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_NAME;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.ws.rs.Path;\n+\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResourceRepository;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.annotation.AccountEntityType;\n+import com.sequenceiq.cloudbreak.structuredevent.service.lookup.CDPAccountAwareRepositoryLookupService;\n+\n+@Component\n+public class DataCollectorComponent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b549a1689346acb1c7b0d6135de84e1405aa6f83"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODY0MzA0OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/ObjectFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjoxMTo0MlrOHWpvIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjoxMTo0MlrOHWpvIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUxNDUzMA==", "bodyText": "This name is too open, as the class only able to create Objects that are necessary for Rest event filter. RestEventFilterRelatedObjectFactory", "url": "https://github.com/hortonworks/cloudbreak/pull/9068#discussion_r493514530", "createdAt": "2020-09-23T12:11:42Z", "author": {"login": "biharitomi"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/filter/ObjectFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest.filter;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.REST;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_CRN;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_EVENT;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_NAME;\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_TYPE;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.Lists;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestResponseDetails;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+\n+@Component\n+class ObjectFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b549a1689346acb1c7b0d6135de84e1405aa6f83"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2201, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}