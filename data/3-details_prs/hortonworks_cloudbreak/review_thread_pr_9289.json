{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjEzNjcy", "number": 9289, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1MzozNlrOEyQ_mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1Njo1OVrOEyRFYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTQyNjgwOnYy", "diffSide": "RIGHT", "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1MzozNlrOHozoWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1MzozNlrOHozoWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MTAwMA==", "bodyText": "This may throw exception", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#discussion_r512551000", "createdAt": "2020-10-27T09:53:36Z", "author": {"login": "bbihari"}, "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "diffHunk": "@@ -31,13 +41,22 @@ public VaultRetryService(MetricService metricService) {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryReadingVault(Supplier<T> action) throws Retry.ActionFailedException {\n-        try {\n-            return action.get();\n-        } catch (RuntimeException e) {\n-            LOGGER.error(\"Exception during reading vault\", e);\n-            metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-            throw new Retry.ActionFailedException(e.getMessage());\n-        }\n+        Optional<Span> optionalSpan = initSpan(\"read\");\n+        return optionalSpan.map(span -> {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n+                try {\n+                    return action.get();\n+                } catch (RuntimeException e) {\n+                    LOGGER.error(\"Exception during reading vault\", e);\n+                    span.setTag(TracingUtil.ERROR, true);\n+                    span.setTag(TracingUtil.MESSAGE, e.getMessage());\n+                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n+                    throw new Retry.ActionFailedException(e.getMessage());\n+                }\n+            } finally {\n+                span.finish();\n+            }\n+        }).orElseGet(action::get);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTQzMDg0OnYy", "diffSide": "RIGHT", "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1NDoyOVrOHozqyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1NDoyOVrOHozqyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MTYyNg==", "bodyText": "This can throw RuntimeException", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#discussion_r512551626", "createdAt": "2020-10-27T09:54:29Z", "author": {"login": "bbihari"}, "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "diffHunk": "@@ -48,12 +67,34 @@ public VaultRetryService(MetricService metricService) {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryWritingVault(Supplier<T> action) throws Retry.ActionFailedException {\n-        try {\n-            return action.get();\n-        } catch (RuntimeException e) {\n-            LOGGER.error(\"Exception during writing vault\", e);\n-            metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-            throw new Retry.ActionFailedException(e.getMessage());\n+\n+        Optional<Span> optionalSpan = initSpan(\"write\");\n+        return optionalSpan.map(span -> {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n+                try {\n+                    return action.get();\n+                } catch (RuntimeException e) {\n+                    LOGGER.error(\"Exception during writing vault\", e);\n+                    span.setTag(TracingUtil.ERROR, true);\n+                    span.setTag(TracingUtil.MESSAGE, e.getMessage());\n+                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n+                    throw new Retry.ActionFailedException(e.getMessage());\n+                }\n+            } finally {\n+                span.finish();\n+            }\n+        }).orElseGet(action::get);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTQ0MTYwOnYy", "diffSide": "RIGHT", "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1Njo1OVrOHozxeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDowOTozM1rOHo0SrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MzMzNg==", "bodyText": "this function could be more compact with Optional.ofNullable(...).map(...)", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#discussion_r512553336", "createdAt": "2020-10-27T09:56:59Z", "author": {"login": "bbihari"}, "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "diffHunk": "@@ -48,12 +67,34 @@ public VaultRetryService(MetricService metricService) {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryWritingVault(Supplier<T> action) throws Retry.ActionFailedException {\n-        try {\n-            return action.get();\n-        } catch (RuntimeException e) {\n-            LOGGER.error(\"Exception during writing vault\", e);\n-            metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-            throw new Retry.ActionFailedException(e.getMessage());\n+\n+        Optional<Span> optionalSpan = initSpan(\"write\");\n+        return optionalSpan.map(span -> {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n+                try {\n+                    return action.get();\n+                } catch (RuntimeException e) {\n+                    LOGGER.error(\"Exception during writing vault\", e);\n+                    span.setTag(TracingUtil.ERROR, true);\n+                    span.setTag(TracingUtil.MESSAGE, e.getMessage());\n+                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n+                    throw new Retry.ActionFailedException(e.getMessage());\n+                }\n+            } finally {\n+                span.finish();\n+            }\n+        }).orElseGet(action::get);\n+    }\n+\n+    private Optional<Span> initSpan(String operationType) {\n+        Span activeSpan = tracer.activeSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2MTgzNw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#discussion_r512561837", "createdAt": "2020-10-27T10:09:33Z", "author": {"login": "attilapalfi92"}, "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "diffHunk": "@@ -48,12 +67,34 @@ public VaultRetryService(MetricService metricService) {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryWritingVault(Supplier<T> action) throws Retry.ActionFailedException {\n-        try {\n-            return action.get();\n-        } catch (RuntimeException e) {\n-            LOGGER.error(\"Exception during writing vault\", e);\n-            metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-            throw new Retry.ActionFailedException(e.getMessage());\n+\n+        Optional<Span> optionalSpan = initSpan(\"write\");\n+        return optionalSpan.map(span -> {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n+                try {\n+                    return action.get();\n+                } catch (RuntimeException e) {\n+                    LOGGER.error(\"Exception during writing vault\", e);\n+                    span.setTag(TracingUtil.ERROR, true);\n+                    span.setTag(TracingUtil.MESSAGE, e.getMessage());\n+                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n+                    throw new Retry.ActionFailedException(e.getMessage());\n+                }\n+            } finally {\n+                span.finish();\n+            }\n+        }).orElseGet(action::get);\n+    }\n+\n+    private Optional<Span> initSpan(String operationType) {\n+        Span activeSpan = tracer.activeSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MzMzNg=="}, "originalCommit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2048, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}