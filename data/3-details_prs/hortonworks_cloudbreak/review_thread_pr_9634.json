{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NzUyOTQ3", "number": 9634, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDo0NToyNFrOFEBLVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjozNDozNVrOFEERDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzU3OTA5OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/cleanup/handler/DnsRemoveHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDo0NToyNFrOID74vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDo0NToyNFrOID74vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk5NzgyMQ==", "bodyText": "Thanks for catching a bunch of these as the old way might be stuck in the flow if a different exception was thrown.", "url": "https://github.com/hortonworks/cloudbreak/pull/9634#discussion_r540997821", "createdAt": "2020-12-11T14:45:24Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/cleanup/handler/DnsRemoveHandler.java", "diffHunk": "@@ -53,7 +52,7 @@ public void accept(Event<RemoveDnsRequest> event) {\n             eventBus.notify(response.getDnsCleanupFailed().isEmpty()\n                             ? EventSelectorUtil.selector(RemoveDnsResponse.class) : EventSelectorUtil.failureSelector(RemoveDnsResponse.class),\n                     new Event<>(event.getHeaders(), response));\n-        } catch (FreeIpaClientException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6430a2f4882963784b9ac7f3dc9383c85741a5f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzYwODM5OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/mapper/FreeipaClientExceptionWrapperMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDo1MjoxMlrOID8KOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDoyNDo1OVrOIFS4QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwMjI5OQ==", "bodyText": "I feel like we might be missing cases where a FreeIpaClientExcpetion/RetryableFreeIpaClientException is thrown (rather than FreeIpaClientExceptionWrapper) since there isn't a mapper for those types. But I don't know how that will interact with the following retry annotation:\n    @Retryable(value = RetryableFreeIpaClientException.class,\n            maxAttemptsExpression = RetryableFreeIpaClientException.MAX_RETRIES_EXPRESSION,\n            backoff = @Backoff(delayExpression = RetryableFreeIpaClientException.DELAY_EXPRESSION,\n                    multiplierExpression = RetryableFreeIpaClientException.MULTIPLIER_EXPRESSION))", "url": "https://github.com/hortonworks/cloudbreak/pull/9634#discussion_r541002299", "createdAt": "2020-12-11T14:52:12Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/mapper/FreeipaClientExceptionWrapperMapper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.freeipa.controller.mapper;\n+\n+import javax.ws.rs.core.Response.Status;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.ExceptionResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClientExceptionWrapper;\n+\n+@Component\n+public class FreeipaClientExceptionWrapperMapper extends BaseExceptionMapper<FreeIpaClientExceptionWrapper> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6430a2f4882963784b9ac7f3dc9383c85741a5f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQyMzEwNQ==", "bodyText": "we have FreeipaClientExceptionMapper which handles both FreeIpaClientExcpetion/RetryableFreeIpaClientException", "url": "https://github.com/hortonworks/cloudbreak/pull/9634#discussion_r542423105", "createdAt": "2020-12-14T14:24:59Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/mapper/FreeipaClientExceptionWrapperMapper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.freeipa.controller.mapper;\n+\n+import javax.ws.rs.core.Response.Status;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.ExceptionResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClientExceptionWrapper;\n+\n+@Component\n+public class FreeipaClientExceptionWrapperMapper extends BaseExceptionMapper<FreeIpaClientExceptionWrapper> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwMjI5OQ=="}, "originalCommit": {"oid": "e6430a2f4882963784b9ac7f3dc9383c85741a5f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODA4NTI0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjozNDozNVrOIEAiIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDo0MDo1MlrOIFTphw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3Mzk1NA==", "bodyText": "I am pretty sure this doesn't interfere with the retries, so it should be good. i.e.\n\n@Retryable(value = RetryableFreeIpaClientException.class,\n            maxAttemptsExpression = RetryableFreeIpaClientException.MAX_RETRIES_EXPRESSION,\n            backoff = @Backoff(delayExpression = RetryableFreeIpaClientException.DELAY_EXPRESSION,\n                    multiplierExpression = RetryableFreeIpaClientException.MULTIPLIER_EXPRESSION))\n\nshould work since this isn't one of the cases where FreeIpaClientExceptions can be converted/wrapped with RetryableFreeIpaClientException.\n\nDid you consider line 130? I think this might also need to have to switch to the InvalidFreeIpaStateException.\n\n                return client.orElseThrow(() -> createFreeIpaUnableToBuildClient(new FreeIpaHostNotAvailableException(\"No FreeIPA client was available\")));", "url": "https://github.com/hortonworks/cloudbreak/pull/9634#discussion_r541073954", "createdAt": "2020-12-11T16:34:35Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -228,10 +229,10 @@ private FreeIpaClientBuilder getFreeIpaClientBuilderForDirectMode(Stack stack, I\n         return new FreeIpaClientBuilder(ADMIN_USER, freeIpa.getAdminPassword(), httpClientConfig, gatewayPort, instanceMetaData.getDiscoveryFQDN(), tracer);\n     }\n \n-    private FreeIpaClientException createFreeIpaStateIsInvalidException(Status stackStatus) {\n+    private InvalidFreeIpaStateException createFreeIpaStateIsInvalidException(Status stackStatus) {\n         String message = String.format(\"Couldn't build FreeIPA client. Because FreeIPA is in invalid state: '%s'\", stackStatus);\n         LOGGER.warn(message);\n-        return new FreeIpaClientException(message, new FreeIpaHostNotAvailableException(message));\n+        return new InvalidFreeIpaStateException(message, new FreeIpaHostNotAvailableException(message));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6430a2f4882963784b9ac7f3dc9383c85741a5f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzNTcxOQ==", "bodyText": "for now we would like to handle those cases separately where the status of the FreeIPA is already known to be wrong. I don't think I have seen this issue yet. Still, I removed the callt ot createFreeIpaUnableToBuildClient as there is a catch reight after which already calls that", "url": "https://github.com/hortonworks/cloudbreak/pull/9634#discussion_r542435719", "createdAt": "2020-12-14T14:40:52Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -228,10 +229,10 @@ private FreeIpaClientBuilder getFreeIpaClientBuilderForDirectMode(Stack stack, I\n         return new FreeIpaClientBuilder(ADMIN_USER, freeIpa.getAdminPassword(), httpClientConfig, gatewayPort, instanceMetaData.getDiscoveryFQDN(), tracer);\n     }\n \n-    private FreeIpaClientException createFreeIpaStateIsInvalidException(Status stackStatus) {\n+    private InvalidFreeIpaStateException createFreeIpaStateIsInvalidException(Status stackStatus) {\n         String message = String.format(\"Couldn't build FreeIPA client. Because FreeIPA is in invalid state: '%s'\", stackStatus);\n         LOGGER.warn(message);\n-        return new FreeIpaClientException(message, new FreeIpaHostNotAvailableException(message));\n+        return new InvalidFreeIpaStateException(message, new FreeIpaHostNotAvailableException(message));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3Mzk1NA=="}, "originalCommit": {"oid": "e6430a2f4882963784b9ac7f3dc9383c85741a5f"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3458, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}