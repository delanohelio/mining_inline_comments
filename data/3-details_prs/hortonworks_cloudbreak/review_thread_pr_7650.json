{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNjc2MDE1", "number": 7650, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMjowMToxOFrODrdriQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzo1NTowNFrODre2TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTAxNjQxOnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/v1/DistroXAutoScaleClusterV1Endpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMjowMToxOFrOF70xOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo0NToxMlrOF76kqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NDg3NA==", "bodyText": "How will the ParseException manifest in an actual WS call?", "url": "https://github.com/hortonworks/cloudbreak/pull/7650#discussion_r398274874", "createdAt": "2020-03-26T02:01:18Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/v1/DistroXAutoScaleClusterV1Endpoint.java", "diffHunk": "@@ -48,14 +51,14 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = ClusterOpDescription.CLUSTER_SET_AUTOSCALE_STATE, produces = MediaType.APPLICATION_JSON, notes = DistroXClusterNotes.NOTES)\n     DistroXAutoscaleClusterResponse updateAutoscaleConfigByClusterCrn(@PathParam(\"crn\") String clusterCrn,\n-            DistroXAutoscaleClusterRequest autoscaleClusterRequest);\n+            @ValidDistroXAutoscaleRequest @Valid DistroXAutoscaleClusterRequest autoscaleClusterRequest) throws ParseException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2434180c80c8ad6c79668e0321da95d19c33520d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2OTk2MA==", "bodyText": "As BAD_REQUEST", "url": "https://github.com/hortonworks/cloudbreak/pull/7650#discussion_r398369960", "createdAt": "2020-03-26T07:45:12Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/v1/DistroXAutoScaleClusterV1Endpoint.java", "diffHunk": "@@ -48,14 +51,14 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = ClusterOpDescription.CLUSTER_SET_AUTOSCALE_STATE, produces = MediaType.APPLICATION_JSON, notes = DistroXClusterNotes.NOTES)\n     DistroXAutoscaleClusterResponse updateAutoscaleConfigByClusterCrn(@PathParam(\"crn\") String clusterCrn,\n-            DistroXAutoscaleClusterRequest autoscaleClusterRequest);\n+            @ValidDistroXAutoscaleRequest @Valid DistroXAutoscaleClusterRequest autoscaleClusterRequest) throws ParseException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NDg3NA=="}, "originalCommit": {"oid": "2434180c80c8ad6c79668e0321da95d19c33520d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTAyNTYyOnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/validator/DistroXAutoscaleRequestValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMjowNjo0NVrOF702lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo0NTo0MVrOF76lkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NjI0Nw==", "bodyText": "Does this meant the AdjustmentType has to be specified?\nHave that, and a few other questions at: https://github.infra.cloudera.com/sseth/thunderhead/blob/master/services/api/distrox/src/main/java/com/cloudera/thunderhead/service/distroxapi/server/Conversions.java#L347 (Also other comments which mention: \"check with Santosh\")", "url": "https://github.com/hortonworks/cloudbreak/pull/7650#discussion_r398276247", "createdAt": "2020-03-26T02:06:45Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/validator/DistroXAutoscaleRequestValidator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sequenceiq.periscope.api.endpoint.validator;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import com.sequenceiq.periscope.api.model.AdjustmentType;\n+import com.sequenceiq.periscope.api.model.DistroXAutoscaleClusterRequest;\n+import com.sequenceiq.periscope.api.util.ValidatorUtil;\n+\n+public class DistroXAutoscaleRequestValidator\n+        implements ConstraintValidator<ValidDistroXAutoscaleRequest, DistroXAutoscaleClusterRequest> {\n+    @Inject\n+    private ValidatorUtil validatorUtil;\n+\n+    @Override\n+    public boolean isValid(DistroXAutoscaleClusterRequest request, ConstraintValidatorContext context) {\n+        Set<String> duplicateAutoscaleHostGroups = validatorUtil.getDuplicateAutoscaleHostGroups(request);\n+\n+        if (duplicateAutoscaleHostGroups.size() > 0) {\n+            String message = String.format(\"Hostgroup(s) %s configured with multiple autoscaling policies.\",\n+                    duplicateAutoscaleHostGroups.toString());\n+            com.sequenceiq.cloudbreak.validation.ValidatorUtil.addConstraintViolation(context, message, \"hostGroup\")\n+                    .disableDefaultConstraintViolation();\n+            return false;\n+        }\n+\n+        List<AdjustmentType> invalidLoadAlertHostGroups =\n+        request.getLoadAlertRequests().stream()\n+                .map(loadAlertRequest -> loadAlertRequest.getScalingPolicy().getAdjustmentType())\n+                .filter(adjustmentType -> !AdjustmentType.LOAD_BASED.equals(adjustmentType))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2434180c80c8ad6c79668e0321da95d19c33520d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3MDE5NA==", "bodyText": "Yes it needs to be specified to keep all alert definitions in sync.", "url": "https://github.com/hortonworks/cloudbreak/pull/7650#discussion_r398370194", "createdAt": "2020-03-26T07:45:41Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/validator/DistroXAutoscaleRequestValidator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sequenceiq.periscope.api.endpoint.validator;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import com.sequenceiq.periscope.api.model.AdjustmentType;\n+import com.sequenceiq.periscope.api.model.DistroXAutoscaleClusterRequest;\n+import com.sequenceiq.periscope.api.util.ValidatorUtil;\n+\n+public class DistroXAutoscaleRequestValidator\n+        implements ConstraintValidator<ValidDistroXAutoscaleRequest, DistroXAutoscaleClusterRequest> {\n+    @Inject\n+    private ValidatorUtil validatorUtil;\n+\n+    @Override\n+    public boolean isValid(DistroXAutoscaleClusterRequest request, ConstraintValidatorContext context) {\n+        Set<String> duplicateAutoscaleHostGroups = validatorUtil.getDuplicateAutoscaleHostGroups(request);\n+\n+        if (duplicateAutoscaleHostGroups.size() > 0) {\n+            String message = String.format(\"Hostgroup(s) %s configured with multiple autoscaling policies.\",\n+                    duplicateAutoscaleHostGroups.toString());\n+            com.sequenceiq.cloudbreak.validation.ValidatorUtil.addConstraintViolation(context, message, \"hostGroup\")\n+                    .disableDefaultConstraintViolation();\n+            return false;\n+        }\n+\n+        List<AdjustmentType> invalidLoadAlertHostGroups =\n+        request.getLoadAlertRequests().stream()\n+                .map(loadAlertRequest -> loadAlertRequest.getScalingPolicy().getAdjustmentType())\n+                .filter(adjustmentType -> !AdjustmentType.LOAD_BASED.equals(adjustmentType))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NjI0Nw=="}, "originalCommit": {"oid": "2434180c80c8ad6c79668e0321da95d19c33520d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTAzMDE5OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/validator/DistroXAutoscaleRequestValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMjowOToyMlrOF705RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo1MDoxOFrOF76uIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NjkzMw==", "bodyText": "Is the API allowing multiple scalingRequests to be specified for a single cluster already? Don't see a check for that. (I'm explicitly disallowing this on the CDP API).\nGiven that the UI will call this API directly, the check is likely required here as well (to avoid accidental UI code bugs)", "url": "https://github.com/hortonworks/cloudbreak/pull/7650#discussion_r398276933", "createdAt": "2020-03-26T02:09:22Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/validator/DistroXAutoscaleRequestValidator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sequenceiq.periscope.api.endpoint.validator;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import com.sequenceiq.periscope.api.model.AdjustmentType;\n+import com.sequenceiq.periscope.api.model.DistroXAutoscaleClusterRequest;\n+import com.sequenceiq.periscope.api.util.ValidatorUtil;\n+\n+public class DistroXAutoscaleRequestValidator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2434180c80c8ad6c79668e0321da95d19c33520d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3MjM4Nw==", "bodyText": "ack.", "url": "https://github.com/hortonworks/cloudbreak/pull/7650#discussion_r398372387", "createdAt": "2020-03-26T07:50:18Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/validator/DistroXAutoscaleRequestValidator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sequenceiq.periscope.api.endpoint.validator;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import com.sequenceiq.periscope.api.model.AdjustmentType;\n+import com.sequenceiq.periscope.api.model.DistroXAutoscaleClusterRequest;\n+import com.sequenceiq.periscope.api.util.ValidatorUtil;\n+\n+public class DistroXAutoscaleRequestValidator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NjkzMw=="}, "originalCommit": {"oid": "2434180c80c8ad6c79668e0321da95d19c33520d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTIwMzcyOnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/service/AlertService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzo1MjoxNlrOF72fpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo0OToyM1rOF76siA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMzE0MA==", "bodyText": "Is the ScalingPolicy field optional, or validated elsewhere?", "url": "https://github.com/hortonworks/cloudbreak/pull/7650#discussion_r398303140", "createdAt": "2020-03-26T03:52:16Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/service/AlertService.java", "diffHunk": "@@ -132,12 +132,18 @@ public TimeAlert findTimeAlertByCluster(Long clusterId, Long alertId) {\n         return timeAlertRepository.findByCluster(alertId, clusterId);\n     }\n \n-    public TimeAlert updateTimeAlert(Long clusterId, Long alertId, TimeAlert timeAlert) {\n+    public TimeAlert updateTimeAlert(Long clusterId, Long alertId, TimeAlert timeAlertForUpdate) {\n         TimeAlert alert = timeAlertRepository.findByCluster(alertId, clusterId);\n-        alert.setDescription(timeAlert.getDescription());\n-        alert.setCron(timeAlert.getCron());\n-        alert.setTimeZone(timeAlert.getTimeZone());\n-        alert.setName(timeAlert.getName());\n+        alert.setDescription(timeAlertForUpdate.getDescription());\n+        alert.setCron(timeAlertForUpdate.getCron());\n+        alert.setTimeZone(timeAlertForUpdate.getTimeZone());\n+        alert.setName(timeAlertForUpdate.getName());\n+        if (timeAlertForUpdate.getScalingPolicy() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2434180c80c8ad6c79668e0321da95d19c33520d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3MTk3Ng==", "bodyText": "In the api it is not optional.", "url": "https://github.com/hortonworks/cloudbreak/pull/7650#discussion_r398371976", "createdAt": "2020-03-26T07:49:23Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/service/AlertService.java", "diffHunk": "@@ -132,12 +132,18 @@ public TimeAlert findTimeAlertByCluster(Long clusterId, Long alertId) {\n         return timeAlertRepository.findByCluster(alertId, clusterId);\n     }\n \n-    public TimeAlert updateTimeAlert(Long clusterId, Long alertId, TimeAlert timeAlert) {\n+    public TimeAlert updateTimeAlert(Long clusterId, Long alertId, TimeAlert timeAlertForUpdate) {\n         TimeAlert alert = timeAlertRepository.findByCluster(alertId, clusterId);\n-        alert.setDescription(timeAlert.getDescription());\n-        alert.setCron(timeAlert.getCron());\n-        alert.setTimeZone(timeAlert.getTimeZone());\n-        alert.setName(timeAlert.getName());\n+        alert.setDescription(timeAlertForUpdate.getDescription());\n+        alert.setCron(timeAlertForUpdate.getCron());\n+        alert.setTimeZone(timeAlertForUpdate.getTimeZone());\n+        alert.setName(timeAlertForUpdate.getName());\n+        if (timeAlertForUpdate.getScalingPolicy() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMzE0MA=="}, "originalCommit": {"oid": "2434180c80c8ad6c79668e0321da95d19c33520d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTIwNzgwOnYy", "diffSide": "LEFT", "path": "autoscale/src/main/resources/schema/app/20200318083430_CB-5734_cluster_table_enhancements.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzo1NTowNFrOF72h-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo0ODo1OFrOF76rpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMzczNg==", "bodyText": "This essentially means we are back to inefficient queries (full table scans), correct?", "url": "https://github.com/hortonworks/cloudbreak/pull/7650#discussion_r398303736", "createdAt": "2020-03-26T03:55:04Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/resources/schema/app/20200318083430_CB-5734_cluster_table_enhancements.sql", "diffHunk": "@@ -5,8 +5,6 @@ ALTER TABLE cluster ADD COLUMN IF NOT EXISTS cb_stack_name VARCHAR(255);\n \n ALTER TABLE cluster ADD COLUMN IF NOT EXISTS cb_stack_type VARCHAR(255);\n \n-ALTER TABLE cluster ADD COLUMN IF NOT EXISTS autoscale_mode VARCHAR(255);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2434180c80c8ad6c79668e0321da95d19c33520d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3MTc1MA==", "bodyText": "I have to investigate how to optimize this but I think we can avoid full table scans.", "url": "https://github.com/hortonworks/cloudbreak/pull/7650#discussion_r398371750", "createdAt": "2020-03-26T07:48:58Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/resources/schema/app/20200318083430_CB-5734_cluster_table_enhancements.sql", "diffHunk": "@@ -5,8 +5,6 @@ ALTER TABLE cluster ADD COLUMN IF NOT EXISTS cb_stack_name VARCHAR(255);\n \n ALTER TABLE cluster ADD COLUMN IF NOT EXISTS cb_stack_type VARCHAR(255);\n \n-ALTER TABLE cluster ADD COLUMN IF NOT EXISTS autoscale_mode VARCHAR(255);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMzczNg=="}, "originalCommit": {"oid": "2434180c80c8ad6c79668e0321da95d19c33520d"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2585, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}