{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NjUwNTI4", "number": 8753, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDoyMDo1NlrOEWvCbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo1NDoyM1rOEYhiZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjc0Nzk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/parcel/ParcelService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDoyMDo1NlrOG-I7_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDoyMDo1NlrOG-I7_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxMTMyNA==", "bodyText": "Add logs", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r467811324", "createdAt": "2020-08-10T10:20:56Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/parcel/ParcelService.java", "diffHunk": "@@ -34,6 +44,33 @@\n     @Inject\n     private RestClientFactory restClientFactory;\n \n+    @Inject\n+    private ClusterComponentConfigProvider clusterComponentConfigProvider;\n+\n+    public Set<ClusterComponent> getParcelComponentsByBlueprint(Stack stack) {\n+        Cluster cluster = stack.getCluster();\n+        Set<ClusterComponent> components = getParcelComponents(cluster);\n+        if (stack.isDatalake()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86afa4d8d2ac8317791a77fe95ba46a5b4075374"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjc0ODk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/ClusterUpgradeAvailabilityService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDoyMToxOVrOG-I8tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDoyMToxOVrOG-I8tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxMTUwOA==", "bodyText": "Add logs", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r467811508", "createdAt": "2020-08-10T10:21:19Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/ClusterUpgradeAvailabilityService.java", "diffHunk": "@@ -169,6 +175,24 @@ private UpgradeV4Response checkForUpgrades(Stack stack, boolean lockComponents)\n         return upgradeOptions;\n     }\n \n+    private Map<String, String> getActivatedParcels(Stack stack) {\n+        if (stack.isDatalake()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86afa4d8d2ac8317791a77fe95ba46a5b4075374"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjc1MDQyOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDoyMTo0OFrOG-I9lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDoyMTo0OFrOG-I9lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxMTczMg==", "bodyText": "During upgrade, if DATALAKE\n\ndeactivate ALL except CDH\nundistribute them\ndelete them", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r467811732", "createdAt": "2020-08-10T10:21:48Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -510,15 +512,41 @@ public String getStackRepositoryJson(StackRepoDetails repoDetails, String stackR\n     }\n \n     @Override\n-    public Map<String, String> gatherInstalledComponents(String stackName) {\n+    public Map<String, String> gatherInstalledParcels(String stackName) {\n         try {\n-        return clouderaManagerParcelService.getActivatedParcels(apiClient, stackName);\n+            return clouderaManagerParcelService.getActivatedParcels(apiClient, stackName);\n         } catch (ApiException e) {\n             LOGGER.info(\"Unable to fetch the list of activated parcels\", e);\n             throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n         }\n     }\n \n+    @Override\n+    public void deactivateUnusedParcels(Set<ClusterComponent> usedParcelComponents) {\n+        ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n+        Map<String, ClouderaManagerProduct> cmProducts = new HashMap<>();\n+        for (ClusterComponent clusterComponent : usedParcelComponents) {\n+            ClouderaManagerProduct product = clusterComponent.getAttributes().getSilent(ClouderaManagerProduct.class);\n+            cmProducts.put(product.getName(), product);\n+        }\n+        Map<String, String> installedComponents = gatherInstalledParcels(stack.getName());\n+        Set<String> failedDeactivations = new HashSet<>();\n+        for (Map.Entry<String, String> installedComp : installedComponents.entrySet()) {\n+            if (!cmProducts.containsKey(installedComp.getKey())) {\n+                try {\n+                    parcelResourceApi.deactivateCommand(stack.getName(), installedComp.getKey(), installedComp.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86afa4d8d2ac8317791a77fe95ba46a5b4075374"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDkyMDg5OnYy", "diffSide": "RIGHT", "path": "cluster-api/src/main/java/com/sequenceiq/cloudbreak/cluster/api/ClusterModificationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoyMzo1OVrOHA0acw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoyMzo1OVrOHA0acw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyMDc4Nw==", "bodyText": "unnecessary default implementation", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470620787", "createdAt": "2020-08-14T13:23:59Z", "author": {"login": "lacikaaa"}, "path": "cluster-api/src/main/java/com/sequenceiq/cloudbreak/cluster/api/ClusterModificationService.java", "diffHunk": "@@ -29,7 +29,11 @@\n \n     void upgradeClusterRuntime(Set<ClusterComponent> components) throws CloudbreakException;\n \n-    default Map<String, String> gatherInstalledComponents(String hostname) {\n+    default Map<String, String> gatherInstalledParcels(String stackName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDk1NDAzOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerParcelService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzozMzowOVrOHA0uPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzozMzowOVrOHA0uPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNTg1NA==", "bodyText": "I think we should log what we are deactivating", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470625854", "createdAt": "2020-08-14T13:33:09Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerParcelService.java", "diffHunk": "@@ -12,39 +17,146 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n \n+import com.cloudera.api.swagger.ParcelResourceApi;\n import com.cloudera.api.swagger.ParcelsResourceApi;\n import com.cloudera.api.swagger.client.ApiClient;\n import com.cloudera.api.swagger.client.ApiException;\n import com.cloudera.api.swagger.model.ApiParcel;\n import com.cloudera.api.swagger.model.ApiParcelList;\n-import com.sequenceiq.cloudbreak.cm.client.retry.ClouderaManagerApiFactory;\n+import com.sequenceiq.cloudbreak.cloud.model.ClouderaManagerProduct;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n import com.sequenceiq.cloudbreak.cm.model.ParcelStatus;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n \n @Service\n class ClouderaManagerParcelService {\n-\n     private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelService.class);\n \n     @Inject\n-    private ClouderaManagerApiFactory clouderaManagerApiFactory;\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n \n-    public Map<String, String> getActivatedParcels(ApiClient client, String stackName) throws ApiException {\n-        return getClouderaManagerParcelsByStatus(client, stackName, ParcelStatus.ACTIVATED)\n-                .stream()\n-                .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+    public Map<String, String> getParcelsInStatus(ParcelsResourceApi parcelsResourceApi, String stackName, ParcelStatus parcelStatus) {\n+        try {\n+            return getClouderaManagerParcelsByStatus(parcelsResourceApi, stackName, parcelStatus)\n+                    .stream()\n+                    .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+        } catch (ApiException e) {\n+            LOGGER.info(\"Unable to fetch the list of activated parcels\", e);\n+            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+        }\n+    }\n+\n+    public void deactivateUnusedParcels(ParcelsResourceApi parcelsResourceApi, ParcelResourceApi parcelResourceApi, String stackName, Map<String,\n+            ClouderaManagerProduct> cmProducts) {\n+        Map<String, String> installedComponents = getParcelsInStatus(parcelsResourceApi, stackName, ParcelStatus.ACTIVATED);\n+        Set<String> failedDeactivations = new HashSet<>();\n+        for (Map.Entry<String, String> installedComp : installedComponents.entrySet()) {\n+            if (!cmProducts.containsKey(installedComp.getKey())) {\n+                try {\n+                    parcelResourceApi.deactivateCommand(stackName, installedComp.getKey(), installedComp.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDk2MjI2OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/ClouderaManagerPollingServiceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzozNToxNlrOHA0y8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzozNToxNlrOHA0y8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNzA1OQ==", "bodyText": "3 param is required, but only 2 is provided", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470627059", "createdAt": "2020-08-14T13:35:16Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/ClouderaManagerPollingServiceProvider.java", "diffHunk": "@@ -106,6 +110,21 @@ public PollingResult startPollingCmParcelActivation(Stack stack, ApiClient apiCl\n                 new ClouderaManagerParcelActivationListenerTask(clouderaManagerApiPojoFactory, cloudbreakEventService));\n     }\n \n+    public PollingResult startPollingCmParcelStatus(Stack stack, ApiClient apiClient, Map<String, String> parcelVersions,\n+            ParcelStatus parcelStatus) {\n+        LOGGER.debug(\"Waiting for Cloudera Manager parcels {} to become to status [{}]. [Server address: {}]\", parcelVersions, parcelStatus,\n+                stack.getClusterManagerIp());\n+        return pollCommandWithTimeListener(stack, apiClient, BigDecimal.ZERO, POLL_FOR_ONE_HOUR,\n+                new ClouderaManagerParcelStatusListenerTask(clouderaManagerApiPojoFactory, cloudbreakEventService, parcelVersions, parcelStatus));\n+    }\n+\n+    public PollingResult startPollingCmParcelDelete(Stack stack, ApiClient apiClient, Map<String, String> parcelVersions) {\n+        LOGGER.debug(\"Waiting for Cloudera Manager parcels {} to become to status [{}]. [Server address: {}]\", parcelVersions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDk5NDk1OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerParcelService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzo0NDoyOVrOHA1GpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjowNTowOVrOHBTeEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYzMjEwMA==", "bodyText": "it would be nice if we could get rid of these Map<String, String> in a followup task because it's actually a <product, version> map, but it's hard to figure out", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470632100", "createdAt": "2020-08-14T13:44:29Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerParcelService.java", "diffHunk": "@@ -12,39 +17,146 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n \n+import com.cloudera.api.swagger.ParcelResourceApi;\n import com.cloudera.api.swagger.ParcelsResourceApi;\n import com.cloudera.api.swagger.client.ApiClient;\n import com.cloudera.api.swagger.client.ApiException;\n import com.cloudera.api.swagger.model.ApiParcel;\n import com.cloudera.api.swagger.model.ApiParcelList;\n-import com.sequenceiq.cloudbreak.cm.client.retry.ClouderaManagerApiFactory;\n+import com.sequenceiq.cloudbreak.cloud.model.ClouderaManagerProduct;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n import com.sequenceiq.cloudbreak.cm.model.ParcelStatus;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n \n @Service\n class ClouderaManagerParcelService {\n-\n     private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelService.class);\n \n     @Inject\n-    private ClouderaManagerApiFactory clouderaManagerApiFactory;\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n \n-    public Map<String, String> getActivatedParcels(ApiClient client, String stackName) throws ApiException {\n-        return getClouderaManagerParcelsByStatus(client, stackName, ParcelStatus.ACTIVATED)\n-                .stream()\n-                .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+    public Map<String, String> getParcelsInStatus(ParcelsResourceApi parcelsResourceApi, String stackName, ParcelStatus parcelStatus) {\n+        try {\n+            return getClouderaManagerParcelsByStatus(parcelsResourceApi, stackName, parcelStatus)\n+                    .stream()\n+                    .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+        } catch (ApiException e) {\n+            LOGGER.info(\"Unable to fetch the list of activated parcels\", e);\n+            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+        }\n+    }\n+\n+    public void deactivateUnusedParcels(ParcelsResourceApi parcelsResourceApi, ParcelResourceApi parcelResourceApi, String stackName, Map<String,\n+            ClouderaManagerProduct> cmProducts) {\n+        Map<String, String> installedComponents = getParcelsInStatus(parcelsResourceApi, stackName, ParcelStatus.ACTIVATED);\n+        Set<String> failedDeactivations = new HashSet<>();\n+        for (Map.Entry<String, String> installedComp : installedComponents.entrySet()) {\n+            if (!cmProducts.containsKey(installedComp.getKey())) {\n+                try {\n+                    parcelResourceApi.deactivateCommand(stackName, installedComp.getKey(), installedComp.getValue());\n+                } catch (ApiException e) {\n+                    String product = \"[\" + installedComp.getKey() + \":\" + installedComp.getValue() + \"]\";\n+                    LOGGER.info(String.format(\"Unable to deactivate product: %s\", product), e);\n+                    failedDeactivations.add(product);\n+                }\n+            }\n+        }\n+        if (!failedDeactivations.isEmpty()) {\n+            throw new ClouderaManagerOperationFailedException(String.format(\"Deactivation failed on the following products: %s\", failedDeactivations));\n+        }\n+    }\n+\n+    public void undistributeUnusedParcels(ApiClient apiClient, ParcelsResourceApi parcelsResourceApi, ParcelResourceApi parcelResourceApi, Stack stack,\n+            Map<String, ClouderaManagerProduct> cmProducts) {\n+        Map<String, String> distributedComponents = getParcelsInStatus(parcelsResourceApi, stack.getName(), ParcelStatus.DISTRIBUTED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEyOTYxNw==", "bodyText": "Followup task: https://jira.cloudera.com/browse/CB-8485", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r471129617", "createdAt": "2020-08-16T16:05:09Z", "author": {"login": "schfeca75"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerParcelService.java", "diffHunk": "@@ -12,39 +17,146 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n \n+import com.cloudera.api.swagger.ParcelResourceApi;\n import com.cloudera.api.swagger.ParcelsResourceApi;\n import com.cloudera.api.swagger.client.ApiClient;\n import com.cloudera.api.swagger.client.ApiException;\n import com.cloudera.api.swagger.model.ApiParcel;\n import com.cloudera.api.swagger.model.ApiParcelList;\n-import com.sequenceiq.cloudbreak.cm.client.retry.ClouderaManagerApiFactory;\n+import com.sequenceiq.cloudbreak.cloud.model.ClouderaManagerProduct;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n import com.sequenceiq.cloudbreak.cm.model.ParcelStatus;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n \n @Service\n class ClouderaManagerParcelService {\n-\n     private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelService.class);\n \n     @Inject\n-    private ClouderaManagerApiFactory clouderaManagerApiFactory;\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n \n-    public Map<String, String> getActivatedParcels(ApiClient client, String stackName) throws ApiException {\n-        return getClouderaManagerParcelsByStatus(client, stackName, ParcelStatus.ACTIVATED)\n-                .stream()\n-                .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+    public Map<String, String> getParcelsInStatus(ParcelsResourceApi parcelsResourceApi, String stackName, ParcelStatus parcelStatus) {\n+        try {\n+            return getClouderaManagerParcelsByStatus(parcelsResourceApi, stackName, parcelStatus)\n+                    .stream()\n+                    .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+        } catch (ApiException e) {\n+            LOGGER.info(\"Unable to fetch the list of activated parcels\", e);\n+            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+        }\n+    }\n+\n+    public void deactivateUnusedParcels(ParcelsResourceApi parcelsResourceApi, ParcelResourceApi parcelResourceApi, String stackName, Map<String,\n+            ClouderaManagerProduct> cmProducts) {\n+        Map<String, String> installedComponents = getParcelsInStatus(parcelsResourceApi, stackName, ParcelStatus.ACTIVATED);\n+        Set<String> failedDeactivations = new HashSet<>();\n+        for (Map.Entry<String, String> installedComp : installedComponents.entrySet()) {\n+            if (!cmProducts.containsKey(installedComp.getKey())) {\n+                try {\n+                    parcelResourceApi.deactivateCommand(stackName, installedComp.getKey(), installedComp.getValue());\n+                } catch (ApiException e) {\n+                    String product = \"[\" + installedComp.getKey() + \":\" + installedComp.getValue() + \"]\";\n+                    LOGGER.info(String.format(\"Unable to deactivate product: %s\", product), e);\n+                    failedDeactivations.add(product);\n+                }\n+            }\n+        }\n+        if (!failedDeactivations.isEmpty()) {\n+            throw new ClouderaManagerOperationFailedException(String.format(\"Deactivation failed on the following products: %s\", failedDeactivations));\n+        }\n+    }\n+\n+    public void undistributeUnusedParcels(ApiClient apiClient, ParcelsResourceApi parcelsResourceApi, ParcelResourceApi parcelResourceApi, Stack stack,\n+            Map<String, ClouderaManagerProduct> cmProducts) {\n+        Map<String, String> distributedComponents = getParcelsInStatus(parcelsResourceApi, stack.getName(), ParcelStatus.DISTRIBUTED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYzMjEwMA=="}, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDk5ODg1OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerParcelService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzo0NTozNFrOHA1JKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzo0NTozNFrOHA1JKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYzMjc0Ng==", "bodyText": "log would be nice", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470632746", "createdAt": "2020-08-14T13:45:34Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerParcelService.java", "diffHunk": "@@ -12,39 +17,146 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n \n+import com.cloudera.api.swagger.ParcelResourceApi;\n import com.cloudera.api.swagger.ParcelsResourceApi;\n import com.cloudera.api.swagger.client.ApiClient;\n import com.cloudera.api.swagger.client.ApiException;\n import com.cloudera.api.swagger.model.ApiParcel;\n import com.cloudera.api.swagger.model.ApiParcelList;\n-import com.sequenceiq.cloudbreak.cm.client.retry.ClouderaManagerApiFactory;\n+import com.sequenceiq.cloudbreak.cloud.model.ClouderaManagerProduct;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n import com.sequenceiq.cloudbreak.cm.model.ParcelStatus;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n \n @Service\n class ClouderaManagerParcelService {\n-\n     private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelService.class);\n \n     @Inject\n-    private ClouderaManagerApiFactory clouderaManagerApiFactory;\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n \n-    public Map<String, String> getActivatedParcels(ApiClient client, String stackName) throws ApiException {\n-        return getClouderaManagerParcelsByStatus(client, stackName, ParcelStatus.ACTIVATED)\n-                .stream()\n-                .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+    public Map<String, String> getParcelsInStatus(ParcelsResourceApi parcelsResourceApi, String stackName, ParcelStatus parcelStatus) {\n+        try {\n+            return getClouderaManagerParcelsByStatus(parcelsResourceApi, stackName, parcelStatus)\n+                    .stream()\n+                    .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+        } catch (ApiException e) {\n+            LOGGER.info(\"Unable to fetch the list of activated parcels\", e);\n+            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+        }\n+    }\n+\n+    public void deactivateUnusedParcels(ParcelsResourceApi parcelsResourceApi, ParcelResourceApi parcelResourceApi, String stackName, Map<String,\n+            ClouderaManagerProduct> cmProducts) {\n+        Map<String, String> installedComponents = getParcelsInStatus(parcelsResourceApi, stackName, ParcelStatus.ACTIVATED);\n+        Set<String> failedDeactivations = new HashSet<>();\n+        for (Map.Entry<String, String> installedComp : installedComponents.entrySet()) {\n+            if (!cmProducts.containsKey(installedComp.getKey())) {\n+                try {\n+                    parcelResourceApi.deactivateCommand(stackName, installedComp.getKey(), installedComp.getValue());\n+                } catch (ApiException e) {\n+                    String product = \"[\" + installedComp.getKey() + \":\" + installedComp.getValue() + \"]\";\n+                    LOGGER.info(String.format(\"Unable to deactivate product: %s\", product), e);\n+                    failedDeactivations.add(product);\n+                }\n+            }\n+        }\n+        if (!failedDeactivations.isEmpty()) {\n+            throw new ClouderaManagerOperationFailedException(String.format(\"Deactivation failed on the following products: %s\", failedDeactivations));\n+        }\n+    }\n+\n+    public void undistributeUnusedParcels(ApiClient apiClient, ParcelsResourceApi parcelsResourceApi, ParcelResourceApi parcelResourceApi, Stack stack,\n+            Map<String, ClouderaManagerProduct> cmProducts) {\n+        Map<String, String> distributedComponents = getParcelsInStatus(parcelsResourceApi, stack.getName(), ParcelStatus.DISTRIBUTED);\n+        Map<String, String> filteredParcels = distributedComponents.entrySet().stream()\n+                .filter(entry -> !cmProducts.containsKey(entry.getKey()))\n+                .collect(toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        undistributeParcels(apiClient, parcelResourceApi, stack, filteredParcels);\n+    }\n+\n+    public void removeUnusedParcels(ApiClient apiClient, ParcelsResourceApi parcelsResourceApi, ParcelResourceApi parcelResourceApi, Stack stack,\n+            Map<String, ClouderaManagerProduct> cmProducts) {\n+        Map<String, String> downloadedParcels = getParcelsInStatus(parcelsResourceApi, stack.getName(), ParcelStatus.DOWNLOADED);\n+        Map<String, String> filteredParcels = downloadedParcels.entrySet().stream()\n+                .filter(entry -> !cmProducts.containsKey(entry.getKey()))\n+                .collect(toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        removeParcels(apiClient, parcelResourceApi, stack, filteredParcels);\n+    }\n+\n+    public void removeUnusedParcelVersions(ApiClient apiClient, ParcelsResourceApi parcelsResourceApi, ParcelResourceApi parcelResourceApi, Stack stack,\n+            String parcel, String usedVersion) throws ApiException {\n+        Map<String, String> unusedDistributedParcelVersions =\n+                getClouderaManagerParcelsByStatus(parcelsResourceApi, stack.getName(), ParcelStatus.DISTRIBUTED).stream()\n+                        .filter(apiParcel -> apiParcel.getProduct().equals(parcel) && !apiParcel.getVersion().equals(usedVersion))\n+                        .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+        undistributeParcels(apiClient, parcelResourceApi, stack, unusedDistributedParcelVersions);\n+\n+        Map<String, String> unusedDownloadedParcelVersions =\n+                getClouderaManagerParcelsByStatus(parcelsResourceApi, stack.getName(), ParcelStatus.DOWNLOADED).stream()\n+                        .filter(apiParcel -> apiParcel.getProduct().equals(parcel) && !apiParcel.getVersion().equals(usedVersion))\n+                        .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+        removeParcels(apiClient, parcelResourceApi, stack, unusedDownloadedParcelVersions);\n+    }\n+\n+    private void undistributeParcels(ApiClient apiClient, ParcelResourceApi parcelResourceApi, Stack stack, Map<String, String> parcels) {\n+        Set<String> failedDistribution = new HashSet<>();\n+        for (Map.Entry<String, String> distributedComponent : parcels.entrySet()) {\n+            try {\n+                parcelResourceApi.startRemovalOfDistributionCommand(stack.getName(), distributedComponent.getKey(), distributedComponent.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTAwODY5OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelActivationListenerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzo0ODoyMFrOHA1PZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzo0ODoyMFrOHA1PZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYzNDM0Mg==", "bodyText": "simplify: boolean datalake = stack != null && stack.isDatalake();", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470634342", "createdAt": "2020-08-14T13:48:20Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelActivationListenerTask.java", "diffHunk": "@@ -68,10 +70,12 @@ protected boolean doStatusCheck(ClouderaManagerPollerObject pollerObject, Comman\n     }\n \n     private List<ClouderaManagerProduct> getClouderaManagerProductsFromStack(Stack stack) {\n-        return Optional.ofNullable(stack).map(Stack::getCluster).map(Cluster::getComponents)\n-                .orElse(Set.of())\n-                .stream()\n-                .filter(clusterComponent -> ComponentType.CDH_PRODUCT_DETAILS.equals(clusterComponent.getComponentType()))\n+        Stream<ClusterComponent> clusterCompStream = Optional.ofNullable(stack).map(Stack::getCluster).map(Cluster::getComponents).orElse(Set.of()).stream();\n+        boolean datalake = stack == null ? false : stack.isDatalake();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTAzNTc5OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelDeletedListenerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzo1NToyNFrOHA1f_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzo1NToyNFrOHA1f_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYzODU5MQ==", "bodyText": "The second upgrade stuck for me at checking the deleted parcels\nSome parcels are not yet deleted: [(CDH 7.2.1-1.cdh7.2.1.p0.4763198 : AVAILABLE_REMOTELY)].\n\nWe're checking if it's empty, but for me, it shows AVAILABLE_REMOTELY on the UI. We can consider this one as deleted as well.", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470638591", "createdAt": "2020-08-14T13:55:24Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelDeletedListenerTask.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.sequenceiq.cloudbreak.cm.polling.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.cloudera.api.swagger.CommandsResourceApi;\n+import com.cloudera.api.swagger.ParcelsResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiParcel;\n+import com.cloudera.api.swagger.model.ApiParcelList;\n+import com.sequenceiq.cloudbreak.cm.ClouderaManagerOperationFailedException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiPojoFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollerObject;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+\n+public class ClouderaManagerParcelDeletedListenerTask extends AbstractClouderaManagerCommandCheckerTask<ClouderaManagerPollerObject> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelDeletedListenerTask.class);\n+\n+    private Map<String, String> parcelVersion;\n+\n+    public ClouderaManagerParcelDeletedListenerTask(ClouderaManagerApiPojoFactory clouderaManagerApiPojoFactory,\n+            CloudbreakEventService cloudbreakEventService, Map<String, String> parcelVersions) {\n+        super(clouderaManagerApiPojoFactory, cloudbreakEventService);\n+        this.parcelVersion = parcelVersions;\n+    }\n+\n+    @Override\n+    protected boolean doStatusCheck(ClouderaManagerPollerObject pollerObject, CommandsResourceApi commandsResourceApi) throws ApiException {\n+        ApiClient apiClient = pollerObject.getApiClient();\n+        Stack stack = pollerObject.getStack();\n+        ApiParcelList parcels = getClouderaManagerParcels(apiClient, stack.getName());\n+        List<ApiParcel> existedParcels = getExistedParcels(parcelVersion, parcels);\n+        if (existedParcels.isEmpty()) {\n+            LOGGER.debug(\"Parcels are deleted succesfully.\");\n+            return true;\n+        } else {\n+            LOGGER.debug(\"Some parcels are not yet deleted: [{}].\", getJoinedParcelStages(existedParcels));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTA4MjAxOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelActivationListenerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDowODoyOFrOHA19DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDowODoyOFrOHA19DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY0NjAyOA==", "bodyText": "I would suggest:\n    private List<ClouderaManagerProduct> getClouderaManagerProductsFromStack(Stack stack) {\n        return getClusterComponents(stack).stream()\n                .filter(createClusterComponentFilter(stack))\n                .map(ClusterComponent::getAttributes)\n                .map(toAttributeClass(ClouderaManagerProduct.class))\n                .collect(Collectors.toList());\n    }\n\n    private Set<ClusterComponent> getClusterComponents(Stack stack) {\n        return Optional.ofNullable(stack)\n                .map(Stack::getCluster)\n                .map(Cluster::getComponents).orElse(Set.of());\n    }\n\n    private Predicate<ClusterComponent> createClusterComponentFilter(Stack stack) {\n        boolean datalake = stack != null && stack.isDatalake();\n        Predicate<ClusterComponent> datalakeClusterComponentFilter = \n                clusterComponent -> clusterComponent.getName().equals(StackType.CDH.name());\n        Predicate<ClusterComponent> distroxClusterComponentFilter = \n                clusterComponent -> ComponentType.CDH_PRODUCT_DETAILS.equals(clusterComponent.getComponentType());\n        return datalake ? datalakeClusterComponentFilter : distroxClusterComponentFilter;\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470646028", "createdAt": "2020-08-14T14:08:28Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelActivationListenerTask.java", "diffHunk": "@@ -68,10 +70,12 @@ protected boolean doStatusCheck(ClouderaManagerPollerObject pollerObject, Comman\n     }\n \n     private List<ClouderaManagerProduct> getClouderaManagerProductsFromStack(Stack stack) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTA5MjI1OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelDeletedListenerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDoxMToyMFrOHA2DaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDoxMToyMFrOHA2DaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY0NzY1Ng==", "bodyText": "this could be omitted as the field and parameter name are different", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470647656", "createdAt": "2020-08-14T14:11:20Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelDeletedListenerTask.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.sequenceiq.cloudbreak.cm.polling.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.cloudera.api.swagger.CommandsResourceApi;\n+import com.cloudera.api.swagger.ParcelsResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiParcel;\n+import com.cloudera.api.swagger.model.ApiParcelList;\n+import com.sequenceiq.cloudbreak.cm.ClouderaManagerOperationFailedException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiPojoFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollerObject;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+\n+public class ClouderaManagerParcelDeletedListenerTask extends AbstractClouderaManagerCommandCheckerTask<ClouderaManagerPollerObject> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelDeletedListenerTask.class);\n+\n+    private Map<String, String> parcelVersion;\n+\n+    public ClouderaManagerParcelDeletedListenerTask(ClouderaManagerApiPojoFactory clouderaManagerApiPojoFactory,\n+            CloudbreakEventService cloudbreakEventService, Map<String, String> parcelVersions) {\n+        super(clouderaManagerApiPojoFactory, cloudbreakEventService);\n+        this.parcelVersion = parcelVersions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTExMjUzOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelDeletedListenerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDoxNjo0MlrOHA2P5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDoxNjo0MlrOHA2P5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY1MDg1Mw==", "bodyText": "Map<String, String> parcelsVersions is an unnecessary parameter as it's a field in the class", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470650853", "createdAt": "2020-08-14T14:16:42Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelDeletedListenerTask.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.sequenceiq.cloudbreak.cm.polling.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.cloudera.api.swagger.CommandsResourceApi;\n+import com.cloudera.api.swagger.ParcelsResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiParcel;\n+import com.cloudera.api.swagger.model.ApiParcelList;\n+import com.sequenceiq.cloudbreak.cm.ClouderaManagerOperationFailedException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiPojoFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollerObject;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+\n+public class ClouderaManagerParcelDeletedListenerTask extends AbstractClouderaManagerCommandCheckerTask<ClouderaManagerPollerObject> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelDeletedListenerTask.class);\n+\n+    private Map<String, String> parcelVersion;\n+\n+    public ClouderaManagerParcelDeletedListenerTask(ClouderaManagerApiPojoFactory clouderaManagerApiPojoFactory,\n+            CloudbreakEventService cloudbreakEventService, Map<String, String> parcelVersions) {\n+        super(clouderaManagerApiPojoFactory, cloudbreakEventService);\n+        this.parcelVersion = parcelVersions;\n+    }\n+\n+    @Override\n+    protected boolean doStatusCheck(ClouderaManagerPollerObject pollerObject, CommandsResourceApi commandsResourceApi) throws ApiException {\n+        ApiClient apiClient = pollerObject.getApiClient();\n+        Stack stack = pollerObject.getStack();\n+        ApiParcelList parcels = getClouderaManagerParcels(apiClient, stack.getName());\n+        List<ApiParcel> existedParcels = getExistedParcels(parcelVersion, parcels);\n+        if (existedParcels.isEmpty()) {\n+            LOGGER.debug(\"Parcels are deleted succesfully.\");\n+            return true;\n+        } else {\n+            LOGGER.debug(\"Some parcels are not yet deleted: [{}].\", getJoinedParcelStages(existedParcels));\n+            return false;\n+        }\n+    }\n+\n+    private ApiParcelList getClouderaManagerParcels(ApiClient apiClient, String stackName) throws ApiException {\n+        ParcelsResourceApi parcelsResourceApi = clouderaManagerApiPojoFactory.getParcelsResourceApi(apiClient);\n+        return parcelsResourceApi.readParcels(stackName, \"summary\");\n+    }\n+\n+    private List<ApiParcel> getExistedParcels(Map<String, String> parcelsVersions, ApiParcelList parcels) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTE1MjYwOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelDeletedListenerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDoyNzoyMlrOHA2o_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDoyNzoyMlrOHA2o_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY1NzI3OQ==", "bodyText": "I would simplify:\n    private List<ApiParcel> collectExistingParcels(ApiParcelList parcelsFromCM) {\n        return parcelsFromCM.getItems().stream()\n                .filter(this::isMatchingParcel)\n                .collect(Collectors.toList());\n    }\n\n    private boolean isMatchingParcel(ApiParcel parcel) {\n        return parcelVersion.containsKey(parcel.getProduct()) && parcelVersion.get(parcel.getProduct()).equals(parcel.getVersion());\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470657279", "createdAt": "2020-08-14T14:27:22Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelDeletedListenerTask.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.sequenceiq.cloudbreak.cm.polling.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.cloudera.api.swagger.CommandsResourceApi;\n+import com.cloudera.api.swagger.ParcelsResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiParcel;\n+import com.cloudera.api.swagger.model.ApiParcelList;\n+import com.sequenceiq.cloudbreak.cm.ClouderaManagerOperationFailedException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiPojoFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollerObject;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+\n+public class ClouderaManagerParcelDeletedListenerTask extends AbstractClouderaManagerCommandCheckerTask<ClouderaManagerPollerObject> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelDeletedListenerTask.class);\n+\n+    private Map<String, String> parcelVersion;\n+\n+    public ClouderaManagerParcelDeletedListenerTask(ClouderaManagerApiPojoFactory clouderaManagerApiPojoFactory,\n+            CloudbreakEventService cloudbreakEventService, Map<String, String> parcelVersions) {\n+        super(clouderaManagerApiPojoFactory, cloudbreakEventService);\n+        this.parcelVersion = parcelVersions;\n+    }\n+\n+    @Override\n+    protected boolean doStatusCheck(ClouderaManagerPollerObject pollerObject, CommandsResourceApi commandsResourceApi) throws ApiException {\n+        ApiClient apiClient = pollerObject.getApiClient();\n+        Stack stack = pollerObject.getStack();\n+        ApiParcelList parcels = getClouderaManagerParcels(apiClient, stack.getName());\n+        List<ApiParcel> existedParcels = getExistedParcels(parcelVersion, parcels);\n+        if (existedParcels.isEmpty()) {\n+            LOGGER.debug(\"Parcels are deleted succesfully.\");\n+            return true;\n+        } else {\n+            LOGGER.debug(\"Some parcels are not yet deleted: [{}].\", getJoinedParcelStages(existedParcels));\n+            return false;\n+        }\n+    }\n+\n+    private ApiParcelList getClouderaManagerParcels(ApiClient apiClient, String stackName) throws ApiException {\n+        ParcelsResourceApi parcelsResourceApi = clouderaManagerApiPojoFactory.getParcelsResourceApi(apiClient);\n+        return parcelsResourceApi.readParcels(stackName, \"summary\");\n+    }\n+\n+    private List<ApiParcel> getExistedParcels(Map<String, String> parcelsVersions, ApiParcelList parcels) {\n+        List<ApiParcel> existedParcels = new ArrayList<>();\n+        for (Map.Entry<String, String> parcelVersion : parcelsVersions.entrySet()) {\n+            Optional<ApiParcel> apiParcel = parcels.getItems().stream()\n+                    .filter(parcel -> isParcelMatching(parcelVersion.getKey(), parcelVersion.getValue(), parcel))\n+                    .findFirst();\n+            apiParcel.ifPresent(p -> existedParcels.add(p));\n+        }\n+        return existedParcels;\n+    }\n+\n+    private boolean isParcelMatching(String parcel, String version, ApiParcel apiParcel) {\n+        return parcel.equals(apiParcel.getProduct())\n+                && version.equals(apiParcel.getVersion());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTE2MTMxOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelStatusListenerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDoyOTozN1rOHA2uRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDoyOTozN1rOHA2uRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY1ODYyOA==", "bodyText": "same here, rename the field or omit this.", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470658628", "createdAt": "2020-08-14T14:29:37Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelStatusListenerTask.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.sequenceiq.cloudbreak.cm.polling.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.cloudera.api.swagger.CommandsResourceApi;\n+import com.cloudera.api.swagger.ParcelsResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiParcel;\n+import com.cloudera.api.swagger.model.ApiParcelList;\n+import com.sequenceiq.cloudbreak.cm.ClouderaManagerOperationFailedException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiPojoFactory;\n+import com.sequenceiq.cloudbreak.cm.model.ParcelStatus;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollerObject;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+\n+public class ClouderaManagerParcelStatusListenerTask extends AbstractClouderaManagerCommandCheckerTask<ClouderaManagerPollerObject> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelStatusListenerTask.class);\n+\n+    private Map<String, String> parcelVersion;\n+\n+    private ParcelStatus parcelStatus;\n+\n+    public ClouderaManagerParcelStatusListenerTask(ClouderaManagerApiPojoFactory clouderaManagerApiPojoFactory,\n+            CloudbreakEventService cloudbreakEventService, Map<String, String> parcelVersions, ParcelStatus parcelStatus) {\n+        super(clouderaManagerApiPojoFactory, cloudbreakEventService);\n+        this.parcelVersion = parcelVersions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTE3MjU5OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerParcelService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDozMjo0MVrOHA21Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDozMjo0MVrOHA21Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MDM4Mw==", "bodyText": "This should be another method after filtering like undistributeParcels and removeParcels to be uniform", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470660383", "createdAt": "2020-08-14T14:32:41Z", "author": {"login": "pdarvasi"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerParcelService.java", "diffHunk": "@@ -12,39 +17,146 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n \n+import com.cloudera.api.swagger.ParcelResourceApi;\n import com.cloudera.api.swagger.ParcelsResourceApi;\n import com.cloudera.api.swagger.client.ApiClient;\n import com.cloudera.api.swagger.client.ApiException;\n import com.cloudera.api.swagger.model.ApiParcel;\n import com.cloudera.api.swagger.model.ApiParcelList;\n-import com.sequenceiq.cloudbreak.cm.client.retry.ClouderaManagerApiFactory;\n+import com.sequenceiq.cloudbreak.cloud.model.ClouderaManagerProduct;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n import com.sequenceiq.cloudbreak.cm.model.ParcelStatus;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n \n @Service\n class ClouderaManagerParcelService {\n-\n     private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelService.class);\n \n     @Inject\n-    private ClouderaManagerApiFactory clouderaManagerApiFactory;\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n \n-    public Map<String, String> getActivatedParcels(ApiClient client, String stackName) throws ApiException {\n-        return getClouderaManagerParcelsByStatus(client, stackName, ParcelStatus.ACTIVATED)\n-                .stream()\n-                .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+    public Map<String, String> getParcelsInStatus(ParcelsResourceApi parcelsResourceApi, String stackName, ParcelStatus parcelStatus) {\n+        try {\n+            return getClouderaManagerParcelsByStatus(parcelsResourceApi, stackName, parcelStatus)\n+                    .stream()\n+                    .collect(Collectors.toMap(ApiParcel::getProduct, ApiParcel::getVersion));\n+        } catch (ApiException e) {\n+            LOGGER.info(\"Unable to fetch the list of activated parcels\", e);\n+            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+        }\n+    }\n+\n+    public void deactivateUnusedParcels(ParcelsResourceApi parcelsResourceApi, ParcelResourceApi parcelResourceApi, String stackName, Map<String,\n+            ClouderaManagerProduct> cmProducts) {\n+        Map<String, String> installedComponents = getParcelsInStatus(parcelsResourceApi, stackName, ParcelStatus.ACTIVATED);\n+        Set<String> failedDeactivations = new HashSet<>();\n+        for (Map.Entry<String, String> installedComp : installedComponents.entrySet()) {\n+            if (!cmProducts.containsKey(installedComp.getKey())) {\n+                try {\n+                    parcelResourceApi.deactivateCommand(stackName, installedComp.getKey(), installedComp.getValue());\n+                } catch (ApiException e) {\n+                    String product = \"[\" + installedComp.getKey() + \":\" + installedComp.getValue() + \"]\";\n+                    LOGGER.info(String.format(\"Unable to deactivate product: %s\", product), e);\n+                    failedDeactivations.add(product);\n+                }\n+            }\n+        }\n+        if (!failedDeactivations.isEmpty()) {\n+            throw new ClouderaManagerOperationFailedException(String.format(\"Deactivation failed on the following products: %s\", failedDeactivations));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTE5OTQwOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelStatusListenerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0MDoyMVrOHA3FqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0MDoyMVrOHA3FqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2NDYxNw==", "bodyText": "the first parameter a field also.\nI would simplify this with:\n    private List<ApiParcel> getNotInProperStateParcels(ApiParcelList parcels) {\n        return parcels.getItems().stream()\n                .filter(parcel -> parcelVersion.containsKey(parcel.getProduct()))\n                .filter(parcel -> parcelVersion.get(parcel.getProduct()).equals(parcel.getVersion()))\n                .filter(parcel -> !parcelStatus.name().equals(parcel.getStage()))\n                .collect(Collectors.toList());\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470664617", "createdAt": "2020-08-14T14:40:21Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelStatusListenerTask.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.sequenceiq.cloudbreak.cm.polling.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.cloudera.api.swagger.CommandsResourceApi;\n+import com.cloudera.api.swagger.ParcelsResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiParcel;\n+import com.cloudera.api.swagger.model.ApiParcelList;\n+import com.sequenceiq.cloudbreak.cm.ClouderaManagerOperationFailedException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiPojoFactory;\n+import com.sequenceiq.cloudbreak.cm.model.ParcelStatus;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollerObject;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+\n+public class ClouderaManagerParcelStatusListenerTask extends AbstractClouderaManagerCommandCheckerTask<ClouderaManagerPollerObject> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelStatusListenerTask.class);\n+\n+    private Map<String, String> parcelVersion;\n+\n+    private ParcelStatus parcelStatus;\n+\n+    public ClouderaManagerParcelStatusListenerTask(ClouderaManagerApiPojoFactory clouderaManagerApiPojoFactory,\n+            CloudbreakEventService cloudbreakEventService, Map<String, String> parcelVersions, ParcelStatus parcelStatus) {\n+        super(clouderaManagerApiPojoFactory, cloudbreakEventService);\n+        this.parcelVersion = parcelVersions;\n+        this.parcelStatus = parcelStatus;\n+    }\n+\n+    @Override\n+    protected boolean doStatusCheck(ClouderaManagerPollerObject pollerObject, CommandsResourceApi commandsResourceApi) throws ApiException {\n+        ApiClient apiClient = pollerObject.getApiClient();\n+        Stack stack = pollerObject.getStack();\n+        ApiParcelList parcels = getClouderaManagerParcels(apiClient, stack.getName());\n+        List<ApiParcel> notInProperStateParcels = getNotInProperStateParcels(parcelVersion, parcels);\n+        if (notInProperStateParcels.isEmpty()) {\n+            LOGGER.debug(\"Parcels are in the proper statuses: {}\", parcelStatus);\n+            return true;\n+        } else {\n+            LOGGER.debug(\"Some parcels are not yet in the proper status: [{}].\", getJoinedParcelStages(notInProperStateParcels));\n+            return false;\n+        }\n+    }\n+\n+    private ApiParcelList getClouderaManagerParcels(ApiClient apiClient, String stackName) throws ApiException {\n+        ParcelsResourceApi parcelsResourceApi = clouderaManagerApiPojoFactory.getParcelsResourceApi(apiClient);\n+        return parcelsResourceApi.readParcels(stackName, \"summary\");\n+    }\n+\n+    private List<ApiParcel> getNotInProperStateParcels(Map<String, String> parcelsVersions, ApiParcelList parcels) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTIwMDk2OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelActivationListenerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0MDo0NFrOHA3Gkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0MDo0NFrOHA3Gkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2NDg1MA==", "bodyText": "are you sure this is needed? Since 7.0.0 I see only name=CDH, componenttype=CDH_PRODUCT_DETAILS duplets", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470664850", "createdAt": "2020-08-14T14:40:44Z", "author": {"login": "pdarvasi"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelActivationListenerTask.java", "diffHunk": "@@ -68,10 +70,12 @@ protected boolean doStatusCheck(ClouderaManagerPollerObject pollerObject, Comman\n     }\n \n     private List<ClouderaManagerProduct> getClouderaManagerProductsFromStack(Stack stack) {\n-        return Optional.ofNullable(stack).map(Stack::getCluster).map(Cluster::getComponents)\n-                .orElse(Set.of())\n-                .stream()\n-                .filter(clusterComponent -> ComponentType.CDH_PRODUCT_DETAILS.equals(clusterComponent.getComponentType()))\n+        Stream<ClusterComponent> clusterCompStream = Optional.ofNullable(stack).map(Stack::getCluster).map(Cluster::getComponents).orElse(Set.of()).stream();\n+        boolean datalake = stack == null ? false : stack.isDatalake();\n+        Stream<ClusterComponent> cmProductStream = datalake ?\n+                clusterCompStream.filter(clusterComponent -> clusterComponent.getName().equals(StackType.CDH.name())) :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI1Mzg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/upgrade/ClusterUpgradeInitRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0ODo1NVrOHA3jKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0ODo1NVrOHA3jKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3MjE3MA==", "bodyText": "I think you shouldn't override the default implementation here", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470672170", "createdAt": "2020-08-14T14:48:55Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/api/event/cluster/upgrade/ClusterUpgradeInitRequest.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.sequenceiq.cloudbreak.reactor.api.event.cluster.upgrade;\n+\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+\n+public class ClusterUpgradeInitRequest extends StackEvent {\n+    public ClusterUpgradeInitRequest(Long stackId) {\n+        super(stackId);\n+    }\n+\n+    @Override\n+    public String selector() {\n+        return \"ClusterUpgradeInitRequest\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI1NzE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/upgrade/ClusterUpgradeEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0OTo0OVrOHA3lMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0OTo0OVrOHA3lMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3MjY5MQ==", "bodyText": "use EventSelectorUtil.selector(ClusterUpgradeInitRequest.class)", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470672691", "createdAt": "2020-08-14T14:49:49Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/upgrade/ClusterUpgradeEvent.java", "diffHunk": "@@ -3,7 +3,9 @@\n import com.sequenceiq.flow.core.FlowEvent;\n \n public enum ClusterUpgradeEvent implements FlowEvent {\n-    CLUSTER_MANAGER_UPGRADE_EVENT(\"CLUSTER_MANAGER_UPGRADE_EVENT\"),\n+    CLUSTER_UPGRADE_INIT_EVENT(\"CLUSTER_UPGRADE_INIT_EVENT\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI2MTMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/upgrade/ClusterUpgradeInitHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1MDo0OFrOHA3now==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1MDo0OFrOHA3now==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3MzMxNQ==", "bodyText": "this should be: CLUSTER_UPGRADE_INIT_EVENT.event() or CLUSTER_UPGRADE_INIT_EVENT.selector()", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470673315", "createdAt": "2020-08-14T14:50:48Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/upgrade/ClusterUpgradeInitHandler.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sequenceiq.cloudbreak.reactor.handler.cluster.upgrade;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.core.cluster.ClusterManagerUpgradeService;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.upgrade.ClusterUpgradeInitRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.upgrade.ClusterUpgradeInitSuccess;\n+import com.sequenceiq.cloudbreak.reactor.api.event.cluster.upgrade.ClusterUpgradeFailedEvent;\n+import com.sequenceiq.flow.reactor.api.handler.ExceptionCatcherEventHandler;\n+\n+@Component\n+public class ClusterUpgradeInitHandler extends ExceptionCatcherEventHandler<ClusterUpgradeInitRequest> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClusterUpgradeInitHandler.class);\n+\n+    @Inject\n+    private ClusterManagerUpgradeService clusterManagerUpgradeService;\n+\n+    @Override\n+    public String selector() {\n+        return \"ClusterUpgradeInitRequest\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTM3MTAyOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelDeletedListenerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToyMDo1MFrOHA4rIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNToyMDo1MFrOHA4rIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY5MDU5NQ==", "bodyText": "typo: existed -> existing", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470690595", "createdAt": "2020-08-14T15:20:50Z", "author": {"login": "pdarvasi"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/ClouderaManagerParcelDeletedListenerTask.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.sequenceiq.cloudbreak.cm.polling.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.cloudera.api.swagger.CommandsResourceApi;\n+import com.cloudera.api.swagger.ParcelsResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiParcel;\n+import com.cloudera.api.swagger.model.ApiParcelList;\n+import com.sequenceiq.cloudbreak.cm.ClouderaManagerOperationFailedException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiPojoFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollerObject;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+\n+public class ClouderaManagerParcelDeletedListenerTask extends AbstractClouderaManagerCommandCheckerTask<ClouderaManagerPollerObject> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelDeletedListenerTask.class);\n+\n+    private Map<String, String> parcelVersion;\n+\n+    public ClouderaManagerParcelDeletedListenerTask(ClouderaManagerApiPojoFactory clouderaManagerApiPojoFactory,\n+            CloudbreakEventService cloudbreakEventService, Map<String, String> parcelVersions) {\n+        super(clouderaManagerApiPojoFactory, cloudbreakEventService);\n+        this.parcelVersion = parcelVersions;\n+    }\n+\n+    @Override\n+    protected boolean doStatusCheck(ClouderaManagerPollerObject pollerObject, CommandsResourceApi commandsResourceApi) throws ApiException {\n+        ApiClient apiClient = pollerObject.getApiClient();\n+        Stack stack = pollerObject.getStack();\n+        ApiParcelList parcels = getClouderaManagerParcels(apiClient, stack.getName());\n+        List<ApiParcel> existedParcels = getExistedParcels(parcelVersion, parcels);\n+        if (existedParcels.isEmpty()) {\n+            LOGGER.debug(\"Parcels are deleted succesfully.\");\n+            return true;\n+        } else {\n+            LOGGER.debug(\"Some parcels are not yet deleted: [{}].\", getJoinedParcelStages(existedParcels));\n+            return false;\n+        }\n+    }\n+\n+    private ApiParcelList getClouderaManagerParcels(ApiClient apiClient, String stackName) throws ApiException {\n+        ParcelsResourceApi parcelsResourceApi = clouderaManagerApiPojoFactory.getParcelsResourceApi(apiClient);\n+        return parcelsResourceApi.readParcels(stackName, \"summary\");\n+    }\n+\n+    private List<ApiParcel> getExistedParcels(Map<String, String> parcelsVersions, ApiParcelList parcels) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTQ5MjYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/parcel/ParcelService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo0OTo1N1rOHA5xXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo0OTo1N1rOHA5xXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwODU3NA==", "bodyText": ".orElseThrow() would spare us the next line for null check", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470708574", "createdAt": "2020-08-14T15:49:57Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/parcel/ParcelService.java", "diffHunk": "@@ -35,6 +45,35 @@\n     @Inject\n     private RestClientFactory restClientFactory;\n \n+    @Inject\n+    private ClusterComponentConfigProvider clusterComponentConfigProvider;\n+\n+    public Set<ClusterComponent> getParcelComponentsByBlueprint(Stack stack) {\n+        Cluster cluster = stack.getCluster();\n+        Set<ClusterComponent> components = getParcelComponents(cluster);\n+        if (stack.isDatalake()) {\n+            ClusterComponent stackComponent = components.stream()\n+                    .filter(clusterComponent -> clusterComponent.getName().equals(StackType.CDH.name()))\n+                    .findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTUwNzU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/ClusterUpgradeAvailabilityService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo1NDoyM1rOHA56oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo1NDoyM1rOHA56oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxMDk0NA==", "bodyText": "same here, orElseThrow", "url": "https://github.com/hortonworks/cloudbreak/pull/8753#discussion_r470710944", "createdAt": "2020-08-14T15:54:23Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/ClusterUpgradeAvailabilityService.java", "diffHunk": "@@ -169,6 +175,26 @@ private UpgradeV4Response checkForUpgrades(Stack stack, boolean lockComponents)\n         return upgradeOptions;\n     }\n \n+    private Map<String, String> getActivatedParcels(Stack stack) {\n+        if (stack.isDatalake()) {\n+            Set<ClusterComponent> components = clusterComponentConfigProvider.getComponentsByClusterId(stack.getCluster().getId());\n+            ClusterComponent stackComponent = components.stream()\n+                    .filter(clusterComponent -> clusterComponent.getName().equals(StackType.CDH.name()))\n+                    .findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704d5acb1671747c88980408301bc453c92122"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2361, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}