{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMDMwNDI4", "number": 8259, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDowNzoyN1rOEEs2Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDowNzoyN1rOEEs2Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzY0NDgyOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/action/freeipa/AbstractFreeIPAAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDowNzoyN1rOGifEig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoyNzoxNVrOGif5rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxMzgzNA==", "bodyText": "should be <= ?", "url": "https://github.com/hortonworks/cloudbreak/pull/8259#discussion_r438813834", "createdAt": "2020-06-11T14:07:27Z", "author": {"login": "bergerdenes"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/action/freeipa/AbstractFreeIPAAction.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.sequenceiq.it.cloudbreak.action.freeipa;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.it.cloudbreak.FreeIPAClient;\n+import com.sequenceiq.it.cloudbreak.action.Action;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.AbstractFreeIPATestDto;\n+import com.sequenceiq.it.cloudbreak.util.wait.WaitUtil;\n+\n+public abstract class AbstractFreeIPAAction<U extends AbstractFreeIPATestDto> implements Action<U, FreeIPAClient> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractFreeIPAAction.class);\n+\n+    @Override\n+    public U action(TestContext testContext, U testDto, FreeIPAClient client) throws Exception {\n+        int retries = 0;\n+        U result = null;\n+        while (retries >= testDto.getWaitUtil().getMaxRetry()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4280f835fc0f8703ea73e99d570c04409486af6c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNzQzNg==", "bodyText": "sure :)", "url": "https://github.com/hortonworks/cloudbreak/pull/8259#discussion_r438827436", "createdAt": "2020-06-11T14:27:15Z", "author": {"login": "bbihari"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/action/freeipa/AbstractFreeIPAAction.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.sequenceiq.it.cloudbreak.action.freeipa;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.it.cloudbreak.FreeIPAClient;\n+import com.sequenceiq.it.cloudbreak.action.Action;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.AbstractFreeIPATestDto;\n+import com.sequenceiq.it.cloudbreak.util.wait.WaitUtil;\n+\n+public abstract class AbstractFreeIPAAction<U extends AbstractFreeIPATestDto> implements Action<U, FreeIPAClient> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractFreeIPAAction.class);\n+\n+    @Override\n+    public U action(TestContext testContext, U testDto, FreeIPAClient client) throws Exception {\n+        int retries = 0;\n+        U result = null;\n+        while (retries >= testDto.getWaitUtil().getMaxRetry()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxMzgzNA=="}, "originalCommit": {"oid": "4280f835fc0f8703ea73e99d570c04409486af6c"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3197, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}