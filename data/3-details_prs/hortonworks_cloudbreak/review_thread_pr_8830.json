{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4ODM5NjIz", "number": 8830, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMjowOVrOEcfGkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxNzozM1rOEcfTTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzA1MTcxOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMjowOVrOHHDIqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMjowOVrOHHDIqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1MzQ0OQ==", "bodyText": "I think this setting is not needed, as per API docs: \"Only restart services that are specified and their dependent services\". Omitting it should work", "url": "https://github.com/hortonworks/cloudbreak/pull/8830#discussion_r477153449", "createdAt": "2020-08-26T09:12:09Z", "author": {"login": "pdarvasi"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -203,6 +204,35 @@ public void upgradeClusterRuntime(Set<ClusterComponent> components) throws Cloud\n         }\n     }\n \n+    private void restartServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n+        List<String> serviceNames = getClusterServices();\n+        ApiRestartClusterArgs restartClusterArgs = new ApiRestartClusterArgs();\n+        restartClusterArgs.setRestartServiceNames(serviceNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c510bd28bc7baca7251d3ff8a0896a0664e2bfa"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzA1NDMzOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMjo1MFrOHHDKPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMjo1MFrOHHDKPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1Mzg1NA==", "bodyText": "typo -> \"Timeout happened while restarting services\"", "url": "https://github.com/hortonworks/cloudbreak/pull/8830#discussion_r477153854", "createdAt": "2020-08-26T09:12:50Z", "author": {"login": "pdarvasi"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -203,6 +204,35 @@ public void upgradeClusterRuntime(Set<ClusterComponent> components) throws Cloud\n         }\n     }\n \n+    private void restartServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n+        List<String> serviceNames = getClusterServices();\n+        ApiRestartClusterArgs restartClusterArgs = new ApiRestartClusterArgs();\n+        restartClusterArgs.setRestartServiceNames(serviceNames);\n+        restartClusterArgs.setRedeployClientConfiguration(true);\n+        ApiCommand restartCommand = clustersResourceApi.restartCommand(stack.getName(), restartClusterArgs);\n+        PollingResult pollingResult = clouderaManagerPollingServiceProvider.startPollingCmServicesRestart(stack, apiClient, restartCommand.getId());\n+        if (isExited(pollingResult)) {\n+            throw new CancellationException(\"Cluster was terminated while refreshing services.\");\n+        } else if (isTimeout(pollingResult)) {\n+            throw new CloudbreakException(\"Timeout while was restarting services.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c510bd28bc7baca7251d3ff8a0896a0664e2bfa"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzA1NTM2OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMzoxMFrOHHDK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMzoxMFrOHHDK8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NDAzNA==", "bodyText": "typo: refreshing --> restarting", "url": "https://github.com/hortonworks/cloudbreak/pull/8830#discussion_r477154034", "createdAt": "2020-08-26T09:13:10Z", "author": {"login": "pdarvasi"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -203,6 +204,35 @@ public void upgradeClusterRuntime(Set<ClusterComponent> components) throws Cloud\n         }\n     }\n \n+    private void restartServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n+        List<String> serviceNames = getClusterServices();\n+        ApiRestartClusterArgs restartClusterArgs = new ApiRestartClusterArgs();\n+        restartClusterArgs.setRestartServiceNames(serviceNames);\n+        restartClusterArgs.setRedeployClientConfiguration(true);\n+        ApiCommand restartCommand = clustersResourceApi.restartCommand(stack.getName(), restartClusterArgs);\n+        PollingResult pollingResult = clouderaManagerPollingServiceProvider.startPollingCmServicesRestart(stack, apiClient, restartCommand.getId());\n+        if (isExited(pollingResult)) {\n+            throw new CancellationException(\"Cluster was terminated while refreshing services.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c510bd28bc7baca7251d3ff8a0896a0664e2bfa"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzA1NzQwOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMzo0NVrOHHDMPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMzo0NVrOHHDMPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NDM2Nw==", "bodyText": "this could be omitted if setting turns out to be not needed", "url": "https://github.com/hortonworks/cloudbreak/pull/8830#discussion_r477154367", "createdAt": "2020-08-26T09:13:45Z", "author": {"login": "pdarvasi"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -203,6 +204,35 @@ public void upgradeClusterRuntime(Set<ClusterComponent> components) throws Cloud\n         }\n     }\n \n+    private void restartServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n+        List<String> serviceNames = getClusterServices();\n+        ApiRestartClusterArgs restartClusterArgs = new ApiRestartClusterArgs();\n+        restartClusterArgs.setRestartServiceNames(serviceNames);\n+        restartClusterArgs.setRedeployClientConfiguration(true);\n+        ApiCommand restartCommand = clustersResourceApi.restartCommand(stack.getName(), restartClusterArgs);\n+        PollingResult pollingResult = clouderaManagerPollingServiceProvider.startPollingCmServicesRestart(stack, apiClient, restartCommand.getId());\n+        if (isExited(pollingResult)) {\n+            throw new CancellationException(\"Cluster was terminated while refreshing services.\");\n+        } else if (isTimeout(pollingResult)) {\n+            throw new CloudbreakException(\"Timeout while was restarting services.\");\n+        }\n+    }\n+\n+    private List<String> getClusterServices() throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c510bd28bc7baca7251d3ff8a0896a0664e2bfa"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzA4NDI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/upgrade/ClusterUpgradeActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxNzozM1rOHHDdaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxNzozM1rOHHDdaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1ODc2MA==", "bodyText": "pls make this NPE safe in case of base images", "url": "https://github.com/hortonworks/cloudbreak/pull/8830#discussion_r477158760", "createdAt": "2020-08-26T09:17:33Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/upgrade/ClusterUpgradeActions.java", "diffHunk": "@@ -119,18 +120,26 @@ protected ClusterUpgradeContext createFlowContext(FlowParameters flowParameters,\n \n             @Override\n             protected void doExecute(ClusterUpgradeContext context, ClusterManagerUpgradeSuccess payload, Map<Object, Object> variables) {\n-                StatedImage currentImage = (StatedImage) variables.get(CURRENT_IMAGE);\n-                StatedImage targetImage = (StatedImage) variables.get(TARGET_IMAGE);\n+                Image currentImage = getImage(variables, CURRENT_IMAGE);\n+                Image targetImage = getImage(variables, TARGET_IMAGE);\n                 boolean clusterRuntimeUpgradeNeeded = clusterUpgradeService.upgradeCluster(context.getStackId(), currentImage, targetImage);\n                 Selectable event;\n                 if (clusterRuntimeUpgradeNeeded) {\n-                    event = new ClusterUpgradeRequest(context.getStackId());\n+                    event = new ClusterUpgradeRequest(context.getStackId(), isPatchUpgrade(currentImage, targetImage));\n                 } else {\n                     event = new ClusterUpgradeSuccess(context.getStackId());\n                 }\n                 sendEvent(context, event.selector(), event);\n             }\n \n+            private boolean isPatchUpgrade(Image currentImage, Image targetImage) {\n+                return currentImage.getStackDetails().getVersion().equals(targetImage.getStackDetails().getVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c510bd28bc7baca7251d3ff8a0896a0664e2bfa"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2406, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}