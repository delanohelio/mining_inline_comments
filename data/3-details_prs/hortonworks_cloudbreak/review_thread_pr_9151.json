{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NDIxNjc1", "number": 9151, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoxMTo0OVrOErECvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNjo0Njo1NVrOEreC-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTkwNDYyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/PropertyHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoxMTo0OVrOHdnnTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjozMjoxNVrOHecRsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxOTc4OA==", "bodyText": "Is there any reason why we are not using the @value annotation of Spring like in all the other property holder components?", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r500819788", "createdAt": "2020-10-07T08:11:49Z", "author": {"login": "biharitomi"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/PropertyHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class PropertyHelper {\n+\n+    private PropertyHelper() {\n+    }\n+\n+    public static Boolean isJsonFormatEnabled() {\n+        return Boolean.parseBoolean(getProperty(\"logger.format.json.enabled\", null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MDAzNg==", "bodyText": "that is for logging, it's needed right before Spring bootstrapping", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r501150036", "createdAt": "2020-10-07T16:30:00Z", "author": {"login": "oleewere"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/PropertyHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class PropertyHelper {\n+\n+    private PropertyHelper() {\n+    }\n+\n+    public static Boolean isJsonFormatEnabled() {\n+        return Boolean.parseBoolean(getProperty(\"logger.format.json.enabled\", null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxOTc4OA=="}, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY3Mzg1Nw==", "bodyText": "This is a spring boot application so even the logging framework is initialised by Spring boot framework.\nI would give it a try to use @value annotation instead of this and let spring to build the dependencies in the right order(starting with logger dependencies)\nOn the other hand it would be a much cleaner code and you shouldn't have to deal with env variables and properties as @lacikaaa took this into the focus in his review.\nwhat do you think @lacikaaa ?", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r501673857", "createdAt": "2020-10-08T12:17:21Z", "author": {"login": "biharitomi"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/PropertyHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class PropertyHelper {\n+\n+    private PropertyHelper() {\n+    }\n+\n+    public static Boolean isJsonFormatEnabled() {\n+        return Boolean.parseBoolean(getProperty(\"logger.format.json.enabled\", null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxOTc4OA=="}, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4MjYwOQ==", "bodyText": "Since logging is initialized\u00a0before\u00a0the\u00a0ApplicationContext\u00a0is created, it is not possible to control logging from\u00a0@PropertySources\u00a0in Spring\u00a0@Configuration\u00a0files. The only way to change the logging system or disable it entirely is via System properties.\n--\n\nSry, it is not supported, approving this PR", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r501682609", "createdAt": "2020-10-08T12:32:15Z", "author": {"login": "biharitomi"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/PropertyHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class PropertyHelper {\n+\n+    private PropertyHelper() {\n+    }\n+\n+    public static Boolean isJsonFormatEnabled() {\n+        return Boolean.parseBoolean(getProperty(\"logger.format.json.enabled\", null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxOTc4OA=="}, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTkxMzY3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/PropertyHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoxMzo1M1rOHdnsmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoxMzo1M1rOHdnsmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyMTE0NA==", "bodyText": "I would rename it to indicates that this class holds the logger related configurations that comes either from property or not. For example LoggerConfiguration.java", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r500821144", "createdAt": "2020-10-07T08:13:53Z", "author": {"login": "biharitomi"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/PropertyHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class PropertyHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTk4OTU4OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayoutTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODozMjozNlrOHdobbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozMDo0MVrOHd7zQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzMzEzMw==", "bodyText": "Would you mind to create tests based on the size message bigger than the 12KB limit or not?", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r500833133", "createdAt": "2020-10-07T08:32:36Z", "author": {"login": "biharitomi"}, "path": "common/src/test/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayoutTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.cloudbreak.logger.format;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import ch.qos.logback.classic.spi.LoggingEvent;\n+\n+public class CustomJsonLayoutTest {\n+\n+    private CustomJsonLayout underTest;\n+\n+    @Before\n+    public void setUp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MDUyOQ==", "bodyText": "that one is configurable, so im already testing that what happens if it reaches the limit", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r501150529", "createdAt": "2020-10-07T16:30:41Z", "author": {"login": "oleewere"}, "path": "common/src/test/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayoutTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.cloudbreak.logger.format;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import ch.qos.logback.classic.spi.LoggingEvent;\n+\n+public class CustomJsonLayoutTest {\n+\n+    private CustomJsonLayout underTest;\n+\n+    @Before\n+    public void setUp() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzMzEzMw=="}, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjE4NTExOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayout.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToyMDo0NVrOHdqUwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToyMDo0NVrOHdqUwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg2NDE5NA==", "bodyText": "this Splitter.fixedLength(this.maxChunkLength) could be initiated in the constructor", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r500864194", "createdAt": "2020-10-07T09:20:45Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayout.java", "diffHunk": "@@ -1,29 +1,65 @@\n package com.sequenceiq.cloudbreak.logger.format;\n \n+import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.base.Splitter;\n+import com.sequenceiq.cloudbreak.logger.PartialMessageMetadata;\n+\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.contrib.json.classic.JsonLayout;\n import ch.qos.logback.core.CoreConstants;\n \n public class CustomJsonLayout extends JsonLayout {\n \n+    private static final String PARTIAL_MESSAGE_FIELD = \"partial_message\";\n+\n+    private static final String PARTIAL_CHUNK_ID_FIELD = \"partial_id\";\n+\n+    private static final String PARTIAL_CHUNK_INDEX_FIELD = \"partial_ordinal\";\n+\n+    private static final String PARTIAL_LAST_FIELD = \"partial_last\";\n+\n+    private static final String PARTIAL_MESSAGE_FLAG = \"true\";\n+\n     private final String contextName;\n \n-    CustomJsonLayout(String contextName) {\n+    private final Integer maxChunkLength;\n+\n+    CustomJsonLayout(String contextName, Integer maxChunkLength) {\n         this.contextName = contextName;\n+        this.maxChunkLength = maxChunkLength;\n     }\n \n     public String doLayout(ILoggingEvent event, String fullLogMessage, String loggerNameFilter) {\n-        Map map = toJsonMap(event, fullLogMessage, loggerNameFilter);\n-        if (map == null || map.isEmpty()) {\n+        if (StringUtils.length(fullLogMessage) > this.maxChunkLength) {\n+            StringBuilder stringBuilder = new StringBuilder();\n+            String chunkId = Integer.toHexString(event.hashCode());\n+            Iterable<String> messages = Splitter.fixedLength(this.maxChunkLength).split(fullLogMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjE4Njg3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayout.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToyMToxOFrOHdqV-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToyMToxOFrOHdqV-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg2NDUwNA==", "bodyText": "this. is unnecessary", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r500864504", "createdAt": "2020-10-07T09:21:18Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayout.java", "diffHunk": "@@ -1,29 +1,65 @@\n package com.sequenceiq.cloudbreak.logger.format;\n \n+import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.base.Splitter;\n+import com.sequenceiq.cloudbreak.logger.PartialMessageMetadata;\n+\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.contrib.json.classic.JsonLayout;\n import ch.qos.logback.core.CoreConstants;\n \n public class CustomJsonLayout extends JsonLayout {\n \n+    private static final String PARTIAL_MESSAGE_FIELD = \"partial_message\";\n+\n+    private static final String PARTIAL_CHUNK_ID_FIELD = \"partial_id\";\n+\n+    private static final String PARTIAL_CHUNK_INDEX_FIELD = \"partial_ordinal\";\n+\n+    private static final String PARTIAL_LAST_FIELD = \"partial_last\";\n+\n+    private static final String PARTIAL_MESSAGE_FLAG = \"true\";\n+\n     private final String contextName;\n \n-    CustomJsonLayout(String contextName) {\n+    private final Integer maxChunkLength;\n+\n+    CustomJsonLayout(String contextName, Integer maxChunkLength) {\n         this.contextName = contextName;\n+        this.maxChunkLength = maxChunkLength;\n     }\n \n     public String doLayout(ILoggingEvent event, String fullLogMessage, String loggerNameFilter) {\n-        Map map = toJsonMap(event, fullLogMessage, loggerNameFilter);\n-        if (map == null || map.isEmpty()) {\n+        if (StringUtils.length(fullLogMessage) > this.maxChunkLength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjIwNjEzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayout.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToyNTo1OFrOHdqhxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToyNTo1OFrOHdqhxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg2NzUyNw==", "bodyText": "you can save one line here with:\nfor (int currentIndex = 0; messageIterator.hasNext(); currentIndex++) {", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r500867527", "createdAt": "2020-10-07T09:25:58Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayout.java", "diffHunk": "@@ -1,29 +1,65 @@\n package com.sequenceiq.cloudbreak.logger.format;\n \n+import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.base.Splitter;\n+import com.sequenceiq.cloudbreak.logger.PartialMessageMetadata;\n+\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.contrib.json.classic.JsonLayout;\n import ch.qos.logback.core.CoreConstants;\n \n public class CustomJsonLayout extends JsonLayout {\n \n+    private static final String PARTIAL_MESSAGE_FIELD = \"partial_message\";\n+\n+    private static final String PARTIAL_CHUNK_ID_FIELD = \"partial_id\";\n+\n+    private static final String PARTIAL_CHUNK_INDEX_FIELD = \"partial_ordinal\";\n+\n+    private static final String PARTIAL_LAST_FIELD = \"partial_last\";\n+\n+    private static final String PARTIAL_MESSAGE_FLAG = \"true\";\n+\n     private final String contextName;\n \n-    CustomJsonLayout(String contextName) {\n+    private final Integer maxChunkLength;\n+\n+    CustomJsonLayout(String contextName, Integer maxChunkLength) {\n         this.contextName = contextName;\n+        this.maxChunkLength = maxChunkLength;\n     }\n \n     public String doLayout(ILoggingEvent event, String fullLogMessage, String loggerNameFilter) {\n-        Map map = toJsonMap(event, fullLogMessage, loggerNameFilter);\n-        if (map == null || map.isEmpty()) {\n+        if (StringUtils.length(fullLogMessage) > this.maxChunkLength) {\n+            StringBuilder stringBuilder = new StringBuilder();\n+            String chunkId = Integer.toHexString(event.hashCode());\n+            Iterable<String> messages = Splitter.fixedLength(this.maxChunkLength).split(fullLogMessage);\n+            int currentIndex = 0;\n+            Iterator<String> messageIterator = messages.iterator();\n+            while (messageIterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjIzNjE0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayout.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOTozMzo1MlrOHdq1GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzowOTozMVrOHd9UJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg3MjQ3Mg==", "bodyText": "loggerNameFilter is not used\nmethod definition should look like: private Map<String, Object> toJsonMap\n\ntoJsonRecordString and toJsonString parameter is also missing the same", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r500872472", "createdAt": "2020-10-07T09:33:52Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayout.java", "diffHunk": "@@ -1,29 +1,65 @@\n package com.sequenceiq.cloudbreak.logger.format;\n \n+import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.base.Splitter;\n+import com.sequenceiq.cloudbreak.logger.PartialMessageMetadata;\n+\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.contrib.json.classic.JsonLayout;\n import ch.qos.logback.core.CoreConstants;\n \n public class CustomJsonLayout extends JsonLayout {\n \n+    private static final String PARTIAL_MESSAGE_FIELD = \"partial_message\";\n+\n+    private static final String PARTIAL_CHUNK_ID_FIELD = \"partial_id\";\n+\n+    private static final String PARTIAL_CHUNK_INDEX_FIELD = \"partial_ordinal\";\n+\n+    private static final String PARTIAL_LAST_FIELD = \"partial_last\";\n+\n+    private static final String PARTIAL_MESSAGE_FLAG = \"true\";\n+\n     private final String contextName;\n \n-    CustomJsonLayout(String contextName) {\n+    private final Integer maxChunkLength;\n+\n+    CustomJsonLayout(String contextName, Integer maxChunkLength) {\n         this.contextName = contextName;\n+        this.maxChunkLength = maxChunkLength;\n     }\n \n     public String doLayout(ILoggingEvent event, String fullLogMessage, String loggerNameFilter) {\n-        Map map = toJsonMap(event, fullLogMessage, loggerNameFilter);\n-        if (map == null || map.isEmpty()) {\n+        if (StringUtils.length(fullLogMessage) > this.maxChunkLength) {\n+            StringBuilder stringBuilder = new StringBuilder();\n+            String chunkId = Integer.toHexString(event.hashCode());\n+            Iterable<String> messages = Splitter.fixedLength(this.maxChunkLength).split(fullLogMessage);\n+            int currentIndex = 0;\n+            Iterator<String> messageIterator = messages.iterator();\n+            while (messageIterator.hasNext()) {\n+                String message = messageIterator.next();\n+                PartialMessageMetadata partialMessageMetadata = new PartialMessageMetadata(chunkId, currentIndex, !messageIterator.hasNext());\n+                stringBuilder.append(toJsonRecordString(toJsonMap(event, message, loggerNameFilter, partialMessageMetadata)));\n+            }\n+            return stringBuilder.toString();\n+        } else {\n+            return toJsonRecordString(toJsonMap(event, fullLogMessage, loggerNameFilter, null));\n+        }\n+    }\n+\n+    private String toJsonRecordString(Map map) {\n+        if (map.isEmpty()) {\n             return null;\n         }\n         return toJsonString(map) + CoreConstants.LINE_SEPARATOR;\n     }\n \n-    private Map toJsonMap(ILoggingEvent event, String fullLogMessage, String loggerNameFilter) {\n+    private Map toJsonMap(ILoggingEvent event, String fullLogMessage, String loggerNameFilter, PartialMessageMetadata partialMessageMetadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3Mzg1NA==", "bodyText": "sure i can remove loggerNameFilter, it seems anonymiziation was removed by @biharitomi  before, and the parameter was not cleaned up from MaskingPatternLayout (because of this, logback.xml configs needs to be updated) ... later we can remove the whole maskingPatternLayout, because at the moment, that is - technically - not doing anything at all (as that is for masking the logs, but it does not do that anymore)", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r501173854", "createdAt": "2020-10-07T17:07:00Z", "author": {"login": "oleewere"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayout.java", "diffHunk": "@@ -1,29 +1,65 @@\n package com.sequenceiq.cloudbreak.logger.format;\n \n+import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.base.Splitter;\n+import com.sequenceiq.cloudbreak.logger.PartialMessageMetadata;\n+\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.contrib.json.classic.JsonLayout;\n import ch.qos.logback.core.CoreConstants;\n \n public class CustomJsonLayout extends JsonLayout {\n \n+    private static final String PARTIAL_MESSAGE_FIELD = \"partial_message\";\n+\n+    private static final String PARTIAL_CHUNK_ID_FIELD = \"partial_id\";\n+\n+    private static final String PARTIAL_CHUNK_INDEX_FIELD = \"partial_ordinal\";\n+\n+    private static final String PARTIAL_LAST_FIELD = \"partial_last\";\n+\n+    private static final String PARTIAL_MESSAGE_FLAG = \"true\";\n+\n     private final String contextName;\n \n-    CustomJsonLayout(String contextName) {\n+    private final Integer maxChunkLength;\n+\n+    CustomJsonLayout(String contextName, Integer maxChunkLength) {\n         this.contextName = contextName;\n+        this.maxChunkLength = maxChunkLength;\n     }\n \n     public String doLayout(ILoggingEvent event, String fullLogMessage, String loggerNameFilter) {\n-        Map map = toJsonMap(event, fullLogMessage, loggerNameFilter);\n-        if (map == null || map.isEmpty()) {\n+        if (StringUtils.length(fullLogMessage) > this.maxChunkLength) {\n+            StringBuilder stringBuilder = new StringBuilder();\n+            String chunkId = Integer.toHexString(event.hashCode());\n+            Iterable<String> messages = Splitter.fixedLength(this.maxChunkLength).split(fullLogMessage);\n+            int currentIndex = 0;\n+            Iterator<String> messageIterator = messages.iterator();\n+            while (messageIterator.hasNext()) {\n+                String message = messageIterator.next();\n+                PartialMessageMetadata partialMessageMetadata = new PartialMessageMetadata(chunkId, currentIndex, !messageIterator.hasNext());\n+                stringBuilder.append(toJsonRecordString(toJsonMap(event, message, loggerNameFilter, partialMessageMetadata)));\n+            }\n+            return stringBuilder.toString();\n+        } else {\n+            return toJsonRecordString(toJsonMap(event, fullLogMessage, loggerNameFilter, null));\n+        }\n+    }\n+\n+    private String toJsonRecordString(Map map) {\n+        if (map.isEmpty()) {\n             return null;\n         }\n         return toJsonString(map) + CoreConstants.LINE_SEPARATOR;\n     }\n \n-    private Map toJsonMap(ILoggingEvent event, String fullLogMessage, String loggerNameFilter) {\n+    private Map toJsonMap(ILoggingEvent event, String fullLogMessage, String loggerNameFilter, PartialMessageMetadata partialMessageMetadata) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg3MjQ3Mg=="}, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NTMzNQ==", "bodyText": "with the Map, I have followed the JsonLayoutBase class, but that the same anyway ..so whatever, i can change that", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r501175335", "createdAt": "2020-10-07T17:09:31Z", "author": {"login": "oleewere"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/CustomJsonLayout.java", "diffHunk": "@@ -1,29 +1,65 @@\n package com.sequenceiq.cloudbreak.logger.format;\n \n+import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.base.Splitter;\n+import com.sequenceiq.cloudbreak.logger.PartialMessageMetadata;\n+\n import ch.qos.logback.classic.spi.ILoggingEvent;\n import ch.qos.logback.contrib.json.classic.JsonLayout;\n import ch.qos.logback.core.CoreConstants;\n \n public class CustomJsonLayout extends JsonLayout {\n \n+    private static final String PARTIAL_MESSAGE_FIELD = \"partial_message\";\n+\n+    private static final String PARTIAL_CHUNK_ID_FIELD = \"partial_id\";\n+\n+    private static final String PARTIAL_CHUNK_INDEX_FIELD = \"partial_ordinal\";\n+\n+    private static final String PARTIAL_LAST_FIELD = \"partial_last\";\n+\n+    private static final String PARTIAL_MESSAGE_FLAG = \"true\";\n+\n     private final String contextName;\n \n-    CustomJsonLayout(String contextName) {\n+    private final Integer maxChunkLength;\n+\n+    CustomJsonLayout(String contextName, Integer maxChunkLength) {\n         this.contextName = contextName;\n+        this.maxChunkLength = maxChunkLength;\n     }\n \n     public String doLayout(ILoggingEvent event, String fullLogMessage, String loggerNameFilter) {\n-        Map map = toJsonMap(event, fullLogMessage, loggerNameFilter);\n-        if (map == null || map.isEmpty()) {\n+        if (StringUtils.length(fullLogMessage) > this.maxChunkLength) {\n+            StringBuilder stringBuilder = new StringBuilder();\n+            String chunkId = Integer.toHexString(event.hashCode());\n+            Iterable<String> messages = Splitter.fixedLength(this.maxChunkLength).split(fullLogMessage);\n+            int currentIndex = 0;\n+            Iterator<String> messageIterator = messages.iterator();\n+            while (messageIterator.hasNext()) {\n+                String message = messageIterator.next();\n+                PartialMessageMetadata partialMessageMetadata = new PartialMessageMetadata(chunkId, currentIndex, !messageIterator.hasNext());\n+                stringBuilder.append(toJsonRecordString(toJsonMap(event, message, loggerNameFilter, partialMessageMetadata)));\n+            }\n+            return stringBuilder.toString();\n+        } else {\n+            return toJsonRecordString(toJsonMap(event, fullLogMessage, loggerNameFilter, null));\n+        }\n+    }\n+\n+    private String toJsonRecordString(Map map) {\n+        if (map.isEmpty()) {\n             return null;\n         }\n         return toJsonString(map) + CoreConstants.LINE_SEPARATOR;\n     }\n \n-    private Map toJsonMap(ILoggingEvent event, String fullLogMessage, String loggerNameFilter) {\n+    private Map toJsonMap(ILoggingEvent event, String fullLogMessage, String loggerNameFilter, PartialMessageMetadata partialMessageMetadata) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg3MjQ3Mg=="}, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjI0OTAxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/JsonLayoutFormat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOTozNzowNlrOHdq9Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOTozNzowNlrOHdq9Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg3NDUxMA==", "bodyText": "this. can be removed", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r500874510", "createdAt": "2020-10-07T09:37:06Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/format/JsonLayoutFormat.java", "diffHunk": "@@ -10,8 +10,8 @@\n \n     private final CustomJsonLayout jsonLayout;\n \n-    JsonLayoutFormat(String contextName) {\n-        this.jsonLayout = new CustomJsonLayout(contextName);\n+    JsonLayoutFormat(String contextName, Integer maxChunkLength) {\n+        this.jsonLayout = new CustomJsonLayout(contextName, maxChunkLength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76bda607c5980805763a09b9cf1e80dca813077d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDE2NTA1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/LoggerConfiguration.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNjo0Njo1NVrOHeQJJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjozMToyOVrOHecP8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ4MzgxMw==", "bodyText": "I don't really get this. so there are 3 properties above, you wrote them with lowercase and dot separated and right after you convert them. wouldn't be it easier just to have them written the way we expect them?", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r501483813", "createdAt": "2020-10-08T06:46:55Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/LoggerConfiguration.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class LoggerConfiguration {\n+\n+    private LoggerConfiguration() {\n+    }\n+\n+    public static Boolean isJsonFormatEnabled() {\n+        return Boolean.parseBoolean(getProperty(\"logger.format.json.enabled\", null));\n+    }\n+\n+    public static String getJsonFormatMdcName() {\n+        return getProperty(\"logger.format.json.mdc.name\", \"context\");\n+    }\n+\n+    public static Integer getSplitterMaxChunLength() {\n+        return Integer.parseInt(getProperty(\"logger.appender.splitter.max.chunk.length\", \"12000\"));\n+    }\n+\n+    private static String getProperty(String property, String defaultValue) {\n+        String envProperty = property.toUpperCase().replace(\".\", \"_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed19623361d57d4e5f03fdfedd82ca26a2fe9add"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNDg1MA==", "bodyText": "we use this both as a system property + environment variable (env+property needs to be the same key, if we are converting it, that's sure those are the ssme), first we are checking the environment property, lower we are simply checking the system property (system property used mostly locally, env vars are used for qa/mow deployments), we can do the opposite here, but I think it does not really matter.", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r501634850", "createdAt": "2020-10-08T11:05:59Z", "author": {"login": "oleewere"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/LoggerConfiguration.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class LoggerConfiguration {\n+\n+    private LoggerConfiguration() {\n+    }\n+\n+    public static Boolean isJsonFormatEnabled() {\n+        return Boolean.parseBoolean(getProperty(\"logger.format.json.enabled\", null));\n+    }\n+\n+    public static String getJsonFormatMdcName() {\n+        return getProperty(\"logger.format.json.mdc.name\", \"context\");\n+    }\n+\n+    public static Integer getSplitterMaxChunLength() {\n+        return Integer.parseInt(getProperty(\"logger.appender.splitter.max.chunk.length\", \"12000\"));\n+    }\n+\n+    private static String getProperty(String property, String defaultValue) {\n+        String envProperty = property.toUpperCase().replace(\".\", \"_\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ4MzgxMw=="}, "originalCommit": {"oid": "ed19623361d57d4e5f03fdfedd82ca26a2fe9add"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY3OTk0NA==", "bodyText": "That's why we should use Spring instead of implementing a Spring feature this way....", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r501679944", "createdAt": "2020-10-08T12:27:52Z", "author": {"login": "biharitomi"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/LoggerConfiguration.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class LoggerConfiguration {\n+\n+    private LoggerConfiguration() {\n+    }\n+\n+    public static Boolean isJsonFormatEnabled() {\n+        return Boolean.parseBoolean(getProperty(\"logger.format.json.enabled\", null));\n+    }\n+\n+    public static String getJsonFormatMdcName() {\n+        return getProperty(\"logger.format.json.mdc.name\", \"context\");\n+    }\n+\n+    public static Integer getSplitterMaxChunLength() {\n+        return Integer.parseInt(getProperty(\"logger.appender.splitter.max.chunk.length\", \"12000\"));\n+    }\n+\n+    private static String getProperty(String property, String defaultValue) {\n+        String envProperty = property.toUpperCase().replace(\".\", \"_\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ4MzgxMw=="}, "originalCommit": {"oid": "ed19623361d57d4e5f03fdfedd82ca26a2fe9add"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4MjE2Mw==", "bodyText": "sry, it is not supported by spring", "url": "https://github.com/hortonworks/cloudbreak/pull/9151#discussion_r501682163", "createdAt": "2020-10-08T12:31:29Z", "author": {"login": "biharitomi"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/LoggerConfiguration.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class LoggerConfiguration {\n+\n+    private LoggerConfiguration() {\n+    }\n+\n+    public static Boolean isJsonFormatEnabled() {\n+        return Boolean.parseBoolean(getProperty(\"logger.format.json.enabled\", null));\n+    }\n+\n+    public static String getJsonFormatMdcName() {\n+        return getProperty(\"logger.format.json.mdc.name\", \"context\");\n+    }\n+\n+    public static Integer getSplitterMaxChunLength() {\n+        return Integer.parseInt(getProperty(\"logger.appender.splitter.max.chunk.length\", \"12000\"));\n+    }\n+\n+    private static String getProperty(String property, String defaultValue) {\n+        String envProperty = property.toUpperCase().replace(\".\", \"_\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ4MzgxMw=="}, "originalCommit": {"oid": "ed19623361d57d4e5f03fdfedd82ca26a2fe9add"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2090, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}