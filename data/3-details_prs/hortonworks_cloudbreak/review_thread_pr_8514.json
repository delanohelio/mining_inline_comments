{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NDc4OTM1", "number": 8514, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzozNTowMVrOEQBBNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo0ODozN1rOEQG4aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjI5MzY3OnYy", "diffSide": "RIGHT", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/validation/UpgradeRequestValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzozNTowMVrOGz9P_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoxMToxMlrOG0O1Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNDA3Nw==", "bodyText": "!true we can use false?", "url": "https://github.com/hortonworks/cloudbreak/pull/8514#discussion_r457134077", "createdAt": "2020-07-20T07:35:01Z", "author": {"login": "keyki"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/validation/UpgradeRequestValidator.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.cloudbreak.validation;\n+\n+import java.util.Objects;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.tags.upgrade.UpgradeV4Request;\n+\n+public class UpgradeRequestValidator implements ConstraintValidator<ValidUpgradeRequest, UpgradeV4Request> {\n+\n+    @Override\n+    public boolean isValid(UpgradeV4Request value, ConstraintValidatorContext context) {\n+        if (Objects.isNull(value)) {\n+            return false;\n+        }\n+        return isOsUpgrade(value) || isRuntimeUpgrade(value);\n+    }\n+\n+    private boolean isOsUpgrade(UpgradeV4Request request) {\n+        return Boolean.TRUE.equals(request.getLockComponents()) && StringUtils.isEmpty(request.getRuntime());\n+    }\n+\n+    private boolean isRuntimeUpgrade(UpgradeV4Request request) {\n+        return !Boolean.TRUE.equals(request.getLockComponents())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ab30e06962d9f138bbf8d1070a9e5e141b13a8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMjExMQ==", "bodyText": "This handles \"null\" value as Runtime upgrade", "url": "https://github.com/hortonworks/cloudbreak/pull/8514#discussion_r457422111", "createdAt": "2020-07-20T14:11:12Z", "author": {"login": "pdarvasi"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/validation/UpgradeRequestValidator.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.cloudbreak.validation;\n+\n+import java.util.Objects;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.tags.upgrade.UpgradeV4Request;\n+\n+public class UpgradeRequestValidator implements ConstraintValidator<ValidUpgradeRequest, UpgradeV4Request> {\n+\n+    @Override\n+    public boolean isValid(UpgradeV4Request value, ConstraintValidatorContext context) {\n+        if (Objects.isNull(value)) {\n+            return false;\n+        }\n+        return isOsUpgrade(value) || isRuntimeUpgrade(value);\n+    }\n+\n+    private boolean isOsUpgrade(UpgradeV4Request request) {\n+        return Boolean.TRUE.equals(request.getLockComponents()) && StringUtils.isEmpty(request.getRuntime());\n+    }\n+\n+    private boolean isRuntimeUpgrade(UpgradeV4Request request) {\n+        return !Boolean.TRUE.equals(request.getLockComponents())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNDA3Nw=="}, "originalCommit": {"oid": "e4ab30e06962d9f138bbf8d1070a9e5e141b13a8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjM0NzA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/ClusterUpgradeImageFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzo0NjoxMlrOGz9tHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzo0NjoxMlrOGz9tHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0MTUzMg==", "bodyText": "Can you add some parentheses, what are we comparing or even better to extract them to methods to better understand what are the conditions.", "url": "https://github.com/hortonworks/cloudbreak/pull/8514#discussion_r457141532", "createdAt": "2020-07-20T07:46:12Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/ClusterUpgradeImageFilter.java", "diffHunk": "@@ -72,6 +74,17 @@ private ImageFilterResult filterImages(List<Image> availableImages, Image curren\n         return new ImageFilterResult(new Images(null, images, null), getReason(images));\n     }\n \n+    private Predicate<Image> filterPreviousImages(Image currentImage, boolean lockComponents) {\n+        return image -> {\n+            boolean result = !lockComponents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ab30e06962d9f138bbf8d1070a9e5e141b13a8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjM1NTY3OnYy", "diffSide": "RIGHT", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/validation/UpgradeRequestValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzo0ODowNlrOGz9yRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoxMToyMVrOG0O1jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0Mjg1Mg==", "bodyText": "!true = false", "url": "https://github.com/hortonworks/cloudbreak/pull/8514#discussion_r457142852", "createdAt": "2020-07-20T07:48:06Z", "author": {"login": "keyki"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/validation/UpgradeRequestValidator.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.sdx.validation;\n+\n+import java.util.Objects;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.sequenceiq.sdx.api.model.SdxUpgradeRequest;\n+\n+public class UpgradeRequestValidator implements ConstraintValidator<ValidUpgradeRequest, SdxUpgradeRequest> {\n+\n+    @Override\n+    public boolean isValid(SdxUpgradeRequest value, ConstraintValidatorContext context) {\n+        if (Objects.isNull(value)) {\n+            return false;\n+        }\n+        return isOsUpgrade(value) || isRuntimeUpgrade(value);\n+    }\n+\n+    private boolean isOsUpgrade(SdxUpgradeRequest request) {\n+        return Boolean.TRUE.equals(request.getLockComponents()) && StringUtils.isEmpty(request.getRuntime());\n+    }\n+\n+    private boolean isRuntimeUpgrade(SdxUpgradeRequest request) {\n+        return !Boolean.TRUE.equals(request.getLockComponents())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ab30e06962d9f138bbf8d1070a9e5e141b13a8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMjIyMg==", "bodyText": "This handles \"null\" value as Runtime upgrade", "url": "https://github.com/hortonworks/cloudbreak/pull/8514#discussion_r457422222", "createdAt": "2020-07-20T14:11:21Z", "author": {"login": "pdarvasi"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/validation/UpgradeRequestValidator.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.sdx.validation;\n+\n+import java.util.Objects;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.sequenceiq.sdx.api.model.SdxUpgradeRequest;\n+\n+public class UpgradeRequestValidator implements ConstraintValidator<ValidUpgradeRequest, SdxUpgradeRequest> {\n+\n+    @Override\n+    public boolean isValid(SdxUpgradeRequest value, ConstraintValidatorContext context) {\n+        if (Objects.isNull(value)) {\n+            return false;\n+        }\n+        return isOsUpgrade(value) || isRuntimeUpgrade(value);\n+    }\n+\n+    private boolean isOsUpgrade(SdxUpgradeRequest request) {\n+        return Boolean.TRUE.equals(request.getLockComponents()) && StringUtils.isEmpty(request.getRuntime());\n+    }\n+\n+    private boolean isRuntimeUpgrade(SdxUpgradeRequest request) {\n+        return !Boolean.TRUE.equals(request.getLockComponents())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0Mjg1Mg=="}, "originalCommit": {"oid": "e4ab30e06962d9f138bbf8d1070a9e5e141b13a8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjY1NDM2OnYy", "diffSide": "LEFT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxUpgradeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODo0NTozNFrOG0AZ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODo0NTozNFrOG0AZ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4NTc1Mw==", "bodyText": "messagesService is not used anymore", "url": "https://github.com/hortonworks/cloudbreak/pull/8514#discussion_r457185753", "createdAt": "2020-07-20T08:45:34Z", "author": {"login": "keyki"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxUpgradeService.java", "diffHunk": "@@ -290,8 +241,4 @@ private boolean stackAndClusterAvailable(StackV4Response stackV4Response, Cluste\n                 && cluster.getStatus() != null\n                 && cluster.getStatus().isAvailable();\n     }\n-\n-    private String getMessage(String imageId) {\n-        return messagesService.getMessage(ResourceEvent.DATALAKE_UPGRADE.getMessage(), Collections.singletonList(imageId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ab30e06962d9f138bbf8d1070a9e5e141b13a8"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzI0NTUxOnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/upgrade/SdxRuntimeUpgradeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo0NjozOVrOG0FrKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo0NjozOVrOG0FrKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3MjEwNg==", "bodyText": "Please rename the logger class to SdxRuntimeUpgradeService", "url": "https://github.com/hortonworks/cloudbreak/pull/8514#discussion_r457272106", "createdAt": "2020-07-20T10:46:39Z", "author": {"login": "tiborpopovics"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/upgrade/SdxRuntimeUpgradeService.java", "diffHunk": "@@ -24,18 +27,23 @@\n import com.sequenceiq.cloudbreak.event.ResourceEvent;\n import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n import com.sequenceiq.cloudbreak.message.CloudbreakMessagesService;\n+import com.sequenceiq.cloudbreak.util.NullUtil;\n import com.sequenceiq.datalake.controller.exception.BadRequestException;\n import com.sequenceiq.datalake.controller.sdx.SdxUpgradeClusterConverter;\n+import com.sequenceiq.datalake.controller.sdx.SdxUpgradeController;\n import com.sequenceiq.datalake.entity.SdxCluster;\n import com.sequenceiq.datalake.flow.SdxReactorFlowManager;\n import com.sequenceiq.datalake.service.sdx.SdxService;\n import com.sequenceiq.flow.api.model.FlowIdentifier;\n+import com.sequenceiq.sdx.api.model.SdxUpgradeReplaceVms;\n import com.sequenceiq.sdx.api.model.SdxUpgradeRequest;\n import com.sequenceiq.sdx.api.model.SdxUpgradeResponse;\n \n @Component\n public class SdxRuntimeUpgradeService {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(SdxUpgradeController.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ab30e06962d9f138bbf8d1070a9e5e141b13a8"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzI1NDE2OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/upgrade/SdxRuntimeUpgradeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo0ODozN1rOG0FwHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo0ODozN1rOG0FwHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3MzM3NQ==", "bodyText": "Please remove this empty line", "url": "https://github.com/hortonworks/cloudbreak/pull/8514#discussion_r457273375", "createdAt": "2020-07-20T10:48:37Z", "author": {"login": "tiborpopovics"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/upgrade/SdxRuntimeUpgradeService.java", "diffHunk": "@@ -56,51 +64,63 @@\n     @Inject\n     private EntitlementService entitlementService;\n \n-    public SdxUpgradeResponse checkForRuntimeUpgradeByName(String userCrn, String name, SdxUpgradeRequest upgradeSdxClusterRequest) {\n-        verifyRuntimeUpgradeEntitlement(userCrn);\n-        UpgradeV4Response upgradeV4Response = stackV4Endpoint.checkForClusterUpgradeByName(0L, name,\n-                sdxUpgradeClusterConverter.sdxUpgradeRequestToUpgradeV4Request(upgradeSdxClusterRequest));\n-        return sdxUpgradeClusterConverter.upgradeResponseToSdxUpgradeResponse(upgradeV4Response);\n+    public SdxUpgradeResponse checkForUpgradeByName(String userCrn, String clusterName, SdxUpgradeRequest upgradeSdxClusterRequest) {\n+        SdxUpgradeResponse sdxUpgradeResponse = checkForSdxUpgradeResponse(userCrn, upgradeSdxClusterRequest, clusterName);\n+        validateUpgradeCandidates(clusterName, sdxUpgradeResponse);\n+        return sdxUpgradeResponse;\n     }\n \n-    public SdxUpgradeResponse checkForRuntimeUpgradeByCrn(String userCrn, String crn, SdxUpgradeRequest upgradeSdxClusterRequest) {\n-        verifyRuntimeUpgradeEntitlement(userCrn);\n-        SdxCluster sdxCluster = sdxService.getByCrn(userCrn, crn);\n-        UpgradeV4Response upgradeV4Response = stackV4Endpoint.checkForClusterUpgradeByName(WORKSPACE_ID, sdxCluster.getClusterName(),\n-                sdxUpgradeClusterConverter.sdxUpgradeRequestToUpgradeV4Request(upgradeSdxClusterRequest));\n-        return sdxUpgradeClusterConverter.upgradeResponseToSdxUpgradeResponse(upgradeV4Response);\n+    public SdxUpgradeResponse checkForUpgradeByCrn(String userCrn, String crn, SdxUpgradeRequest upgradeSdxClusterRequest) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ab30e06962d9f138bbf8d1070a9e5e141b13a8"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3120, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}