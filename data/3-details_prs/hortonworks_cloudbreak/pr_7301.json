{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTQ2MDk5", "number": 7301, "title": "CB-5343 Resizing compute nodes does not work", "bodyText": "", "createdAt": "2020-02-17T13:47:51Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7301", "merged": true, "mergeCommit": {"oid": "cee44ba17090c13cae81e97673c8c4c063ae3932"}, "closed": true, "closedAt": "2020-02-18T15:02:34Z", "author": {"login": "topolyai5"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFOlyfgFqTM1OTc5MTA2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFjSITgFqTM2MDQwOTg5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzkxMDY2", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#pullrequestreview-359791066", "createdAt": "2020-02-17T14:53:25Z", "commit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo1MzoyNVrOFqnJzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo1NTowOVrOFqnNqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyNTk5OA==", "bodyText": "Why not CheckedFunction? Or ValidatedFunction? Would sound more correct.", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380225998", "createdAt": "2020-02-17T14:53:25Z", "author": {"login": "attilapalfi92"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/FunctionChecked.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package com.sequenceiq.cloudbreak.validation;\n+\n+@FunctionalInterface\n+public interface FunctionChecked<T, R, E extends Exception> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyNjk4Ng==", "bodyText": "I think optionalDeployClientConfigCommand is a leftover name from refactor and should be optionalApiCommand, isn't it?", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380226986", "createdAt": "2020-02-17T14:55:09Z", "author": {"login": "attilapalfi92"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -187,32 +187,40 @@ private Boolean isPrewarmed(Long clusterId) {\n     public void restartStaleServices(MgmtServiceResourceApi mgmtServiceResourceApi, ClustersResourceApi clustersResourceApi)\n             throws ApiException, CloudbreakException {\n         restartClouderaManagementServices(mgmtServiceResourceApi);\n-        restartCMStaleServices(clustersResourceApi);\n+        deployConfigAndRefreshCMStaleServices(clustersResourceApi);\n     }\n \n-    private void restartCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n+    private void deployConfigAndRefreshCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n         LOGGER.debug(\"Restarting stale services and redeploying client configurations in Cloudera Manager.\");\n         ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(apiClient);\n         List<ApiService> services = servicesResourceApi.readServices(stack.getName(), SUMMARY).getItems();\n         boolean configStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getConfigStalenessStatus()));\n-        if (configStale) {\n-            Optional<ApiCommand> optionalRestartCommand = clustersResourceApi.listActiveCommands(stack.getName(), SUMMARY).getItems().stream()\n-                    .filter(cmd -> \"RestartWaitingForStalenessSuccess\".equals(cmd.getName())).findFirst();\n-            ApiCommand restartServicesCommand;\n-            if (optionalRestartCommand.isPresent()) {\n-                restartServicesCommand = optionalRestartCommand.get();\n-                LOGGER.debug(\"Restart for stale services is already running with id: [{}]\", restartServicesCommand.getId());\n-            } else {\n-                restartServicesCommand = clustersResourceApi.restartCommand(stack.getName(),\n-                        new ApiRestartClusterArgs().redeployClientConfiguration(Boolean.TRUE).restartOnlyStaleServices(Boolean.TRUE));\n-            }\n-            pollRestart(restartServicesCommand);\n-            LOGGER.debug(\"Restarted stale services in Cloudera Manager.\");\n+        boolean clientConfigStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getClientConfigStalenessStatus()));\n+        if (configStale || clientConfigStale) {\n+            List<ApiCommand> commands = clustersResourceApi.listActiveCommands(stack.getName(), SUMMARY).getItems();\n+            ApiCommand deployClientConfigCmd = getApiCommand(commands, \"DeployClusterClientConfig\", stack.getName(), clustersResourceApi::deployClientConfig);\n+            pollDeployConfig(deployClientConfigCmd);\n+            ApiCommand refreshServicesCmd = getApiCommand(commands, \"RefreshCluster\", stack.getName(), clustersResourceApi::refresh);\n+            pollRefresh(refreshServicesCmd);\n+            LOGGER.debug(\"Config deployed and stale services are refreshed in Cloudera Manager.\");\n         } else {\n             LOGGER.debug(\"No stale services found in Cloudera Manager.\");\n         }\n     }\n \n+    private ApiCommand getApiCommand(List<ApiCommand> commands, String commandString, String clusterName, FunctionChecked<String, ApiCommand, ApiException> fn)\n+            throws ApiException {\n+        Optional<ApiCommand> optionalDeployClientConfigCommand = commands.stream().filter(cmd -> commandString.equals(cmd.getName())).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7b1b6628ab005b060f1f0862d4da61ea007afe33", "committedDate": "2020-02-17T13:46:29Z", "message": "CB-5343 Resizing compute nodes does not work"}, "afterCommit": {"oid": "73584700bf13fc42f3a8e01d7ff72f165af7775d", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/73584700bf13fc42f3a8e01d7ff72f165af7775d", "committedDate": "2020-02-17T15:08:15Z", "message": "CB-5343 Resizing compute nodes does not work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODA2NTg3", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#pullrequestreview-359806587", "createdAt": "2020-02-17T15:14:47Z", "commit": {"oid": "73584700bf13fc42f3a8e01d7ff72f165af7775d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODAxMzEw", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#pullrequestreview-359801310", "createdAt": "2020-02-17T15:07:28Z", "commit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTowNzoyOVrOFqnoXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTowNzoyOVrOFqnoXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzMzgyMA==", "bodyText": "what's behind the configStale and the clientConfigStale? the actual values come from a specific logic but the variable name does not reflect it. let's say something like serviceContainsStatusWithNotFreshStaleness.. or other.. it's much longer but a good variable name could make unnecessary to understand the stream-filter line(s) above.\nalso, do we have a unit-test for this logic somewhere? if not please make some.", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380233820", "createdAt": "2020-02-17T15:07:29Z", "author": {"login": "gregito"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -187,32 +187,40 @@ private Boolean isPrewarmed(Long clusterId) {\n     public void restartStaleServices(MgmtServiceResourceApi mgmtServiceResourceApi, ClustersResourceApi clustersResourceApi)\n             throws ApiException, CloudbreakException {\n         restartClouderaManagementServices(mgmtServiceResourceApi);\n-        restartCMStaleServices(clustersResourceApi);\n+        deployConfigAndRefreshCMStaleServices(clustersResourceApi);\n     }\n \n-    private void restartCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n+    private void deployConfigAndRefreshCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n         LOGGER.debug(\"Restarting stale services and redeploying client configurations in Cloudera Manager.\");\n         ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(apiClient);\n         List<ApiService> services = servicesResourceApi.readServices(stack.getName(), SUMMARY).getItems();\n         boolean configStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getConfigStalenessStatus()));\n-        if (configStale) {\n-            Optional<ApiCommand> optionalRestartCommand = clustersResourceApi.listActiveCommands(stack.getName(), SUMMARY).getItems().stream()\n-                    .filter(cmd -> \"RestartWaitingForStalenessSuccess\".equals(cmd.getName())).findFirst();\n-            ApiCommand restartServicesCommand;\n-            if (optionalRestartCommand.isPresent()) {\n-                restartServicesCommand = optionalRestartCommand.get();\n-                LOGGER.debug(\"Restart for stale services is already running with id: [{}]\", restartServicesCommand.getId());\n-            } else {\n-                restartServicesCommand = clustersResourceApi.restartCommand(stack.getName(),\n-                        new ApiRestartClusterArgs().redeployClientConfiguration(Boolean.TRUE).restartOnlyStaleServices(Boolean.TRUE));\n-            }\n-            pollRestart(restartServicesCommand);\n-            LOGGER.debug(\"Restarted stale services in Cloudera Manager.\");\n+        boolean clientConfigStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getClientConfigStalenessStatus()));\n+        if (configStale || clientConfigStale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODA4NDIw", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#pullrequestreview-359808420", "createdAt": "2020-02-17T15:17:26Z", "commit": {"oid": "73584700bf13fc42f3a8e01d7ff72f165af7775d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToxNzoyNlrOFqn93g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToxNzozMVrOFqn-Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzOTMyNg==", "bodyText": "please cover this method with unit test(s)", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380239326", "createdAt": "2020-02-17T15:17:26Z", "author": {"login": "gregito"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -238,6 +246,26 @@ private void pollRestart(ApiCommand restartCommand) throws CloudbreakException {\n         }\n     }\n \n+    private void pollDeployConfig(ApiCommand restartCommand) throws CloudbreakException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73584700bf13fc42f3a8e01d7ff72f165af7775d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzOTM3NA==", "bodyText": "please cover this method with unit test(s)", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380239374", "createdAt": "2020-02-17T15:17:31Z", "author": {"login": "gregito"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -238,6 +246,26 @@ private void pollRestart(ApiCommand restartCommand) throws CloudbreakException {\n         }\n     }\n \n+    private void pollDeployConfig(ApiCommand restartCommand) throws CloudbreakException {\n+        PollingResult hostTemplatePollingResult = clouderaManagerPollingServiceProvider.startPollingCmClientConfigDeployment(\n+                stack, apiClient, restartCommand.getId());\n+        if (isExited(hostTemplatePollingResult)) {\n+            throw new CancellationException(\"Cluster was terminated while waiting for config deploy\");\n+        } else if (isTimeout(hostTemplatePollingResult)) {\n+            throw new CloudbreakException(\"Timeout while Cloudera Manager was config deploying services.\");\n+        }\n+    }\n+\n+    private void pollRefresh(ApiCommand restartCommand) throws CloudbreakException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73584700bf13fc42f3a8e01d7ff72f165af7775d"}, "originalPosition": 86}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73584700bf13fc42f3a8e01d7ff72f165af7775d", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/73584700bf13fc42f3a8e01d7ff72f165af7775d", "committedDate": "2020-02-17T15:08:15Z", "message": "CB-5343 Resizing compute nodes does not work"}, "afterCommit": {"oid": "9240db10d7fd05d707a8e0e7e021a8449e682409", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/9240db10d7fd05d707a8e0e7e021a8449e682409", "committedDate": "2020-02-18T11:48:42Z", "message": "CB-5343 Resizing compute nodes does not work"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9240db10d7fd05d707a8e0e7e021a8449e682409", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/9240db10d7fd05d707a8e0e7e021a8449e682409", "committedDate": "2020-02-18T11:48:42Z", "message": "CB-5343 Resizing compute nodes does not work"}, "afterCommit": {"oid": "cfdfcf6595c5338e21ddfcc3a1f27f1366c3ddb8", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/cfdfcf6595c5338e21ddfcc3a1f27f1366c3ddb8", "committedDate": "2020-02-18T12:56:23Z", "message": "CB-5343 Resizing compute nodes does not work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMzI5NjEz", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#pullrequestreview-360329613", "createdAt": "2020-02-18T13:19:59Z", "commit": {"oid": "cfdfcf6595c5338e21ddfcc3a1f27f1366c3ddb8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f8aaefba086d08e1990156ab1492cbb7d393468", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/9f8aaefba086d08e1990156ab1492cbb7d393468", "committedDate": "2020-02-18T13:33:06Z", "message": "CB-5343 Resizing compute nodes does not work"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfdfcf6595c5338e21ddfcc3a1f27f1366c3ddb8", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/cfdfcf6595c5338e21ddfcc3a1f27f1366c3ddb8", "committedDate": "2020-02-18T12:56:23Z", "message": "CB-5343 Resizing compute nodes does not work"}, "afterCommit": {"oid": "9f8aaefba086d08e1990156ab1492cbb7d393468", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/9f8aaefba086d08e1990156ab1492cbb7d393468", "committedDate": "2020-02-18T13:33:06Z", "message": "CB-5343 Resizing compute nodes does not work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMzQxODcw", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#pullrequestreview-360341870", "createdAt": "2020-02-18T13:37:59Z", "commit": {"oid": "9f8aaefba086d08e1990156ab1492cbb7d393468"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNDA5ODkx", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#pullrequestreview-360409891", "createdAt": "2020-02-18T15:02:11Z", "commit": {"oid": "9f8aaefba086d08e1990156ab1492cbb7d393468"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1875, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}