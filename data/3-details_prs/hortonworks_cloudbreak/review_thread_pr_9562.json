{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMTA0Njk4", "number": 9562, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDo1MzoxN1rOFAvkCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo0OToxMlrOFCOhJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzIzNTk0OnYy", "diffSide": "RIGHT", "path": "auth-internal/src/main/java/com/sequenceiq/cloudbreak/auth/security/internal/InternalCrnModifier.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDo1MzoxN1rOH_LlKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMToxMjoxN1rOH_MQ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMjA3Mg==", "bodyText": "looks dangerous :)", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r536012072", "createdAt": "2020-12-04T10:53:17Z", "author": {"login": "lnardai"}, "path": "auth-internal/src/main/java/com/sequenceiq/cloudbreak/auth/security/internal/InternalCrnModifier.java", "diffHunk": "@@ -63,12 +63,7 @@ public Object changeInternalCrn(ProceedingJoinPoint proceedingJoinPoint) {\n \n     private String getAccountIdModifiedCrn(String userCrnString, String accountId) {\n         Crn userCrn = Crn.fromString(userCrnString);\n-        Crn newUserCrn = Crn.builder()\n-                .setService(userCrn.getService())\n-                .setAccountId(accountId)\n-                .setResourceType(userCrn.getResourceType())\n-                .setResource(userCrn.getResource())\n-                .build();\n+        Crn newUserCrn = Crn.copyWithDifferentAccountId(userCrn, accountId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc3e12fdac6b4833fc97a81be9e2cd72f4ff782"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxNDM5NQ==", "bodyText": "what do you mean by that? it does the same as the current code", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r536014395", "createdAt": "2020-12-04T10:57:01Z", "author": {"login": "horadla23"}, "path": "auth-internal/src/main/java/com/sequenceiq/cloudbreak/auth/security/internal/InternalCrnModifier.java", "diffHunk": "@@ -63,12 +63,7 @@ public Object changeInternalCrn(ProceedingJoinPoint proceedingJoinPoint) {\n \n     private String getAccountIdModifiedCrn(String userCrnString, String accountId) {\n         Crn userCrn = Crn.fromString(userCrnString);\n-        Crn newUserCrn = Crn.builder()\n-                .setService(userCrn.getService())\n-                .setAccountId(accountId)\n-                .setResourceType(userCrn.getResourceType())\n-                .setResource(userCrn.getResource())\n-                .build();\n+        Crn newUserCrn = Crn.copyWithDifferentAccountId(userCrn, accountId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMjA3Mg=="}, "originalCommit": {"oid": "9fc3e12fdac6b4833fc97a81be9e2cd72f4ff782"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxNjUyNg==", "bodyText": "Yes, I know, but that logic was private to that InternalCrnModifier implementation, while the static Crn is used widely in the code. I'm just contemplating wether it's worth to expose that.", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r536016526", "createdAt": "2020-12-04T11:00:38Z", "author": {"login": "lnardai"}, "path": "auth-internal/src/main/java/com/sequenceiq/cloudbreak/auth/security/internal/InternalCrnModifier.java", "diffHunk": "@@ -63,12 +63,7 @@ public Object changeInternalCrn(ProceedingJoinPoint proceedingJoinPoint) {\n \n     private String getAccountIdModifiedCrn(String userCrnString, String accountId) {\n         Crn userCrn = Crn.fromString(userCrnString);\n-        Crn newUserCrn = Crn.builder()\n-                .setService(userCrn.getService())\n-                .setAccountId(accountId)\n-                .setResourceType(userCrn.getResourceType())\n-                .setResource(userCrn.getResource())\n-                .build();\n+        Crn newUserCrn = Crn.copyWithDifferentAccountId(userCrn, accountId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMjA3Mg=="}, "originalCommit": {"oid": "9fc3e12fdac6b4833fc97a81be9e2cd72f4ff782"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyMzI1OA==", "bodyText": "setAccountId in Crn.builder() was not private, I mean right now everyone can change accountId If he/she want to do so. one solution can be to make the method package private or something like that but InternalCrnModifier and Crn placed in different module. We can move one of them but it can cause other issues.", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r536023258", "createdAt": "2020-12-04T11:12:17Z", "author": {"login": "horadla23"}, "path": "auth-internal/src/main/java/com/sequenceiq/cloudbreak/auth/security/internal/InternalCrnModifier.java", "diffHunk": "@@ -63,12 +63,7 @@ public Object changeInternalCrn(ProceedingJoinPoint proceedingJoinPoint) {\n \n     private String getAccountIdModifiedCrn(String userCrnString, String accountId) {\n         Crn userCrn = Crn.fromString(userCrnString);\n-        Crn newUserCrn = Crn.builder()\n-                .setService(userCrn.getService())\n-                .setAccountId(accountId)\n-                .setResourceType(userCrn.getResourceType())\n-                .setResource(userCrn.getResource())\n-                .build();\n+        Crn newUserCrn = Crn.copyWithDifferentAccountId(userCrn, accountId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMjA3Mg=="}, "originalCommit": {"oid": "9fc3e12fdac6b4833fc97a81be9e2cd72f4ff782"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzQ3NTMyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/auth/altus/CrnResourceDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDo1ODo0MFrOIAhK4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTowOTowMFrOIAhj4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxNDM3MA==", "bodyText": "just a stupid idea: I think it would be easier to read through the list if it would be grouped by services and the items would be alphabetically ordered inside the groups.\nMore nice way would be if the items would be in separate file by service, but that maybe would cause more complexity than benefit.", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r537414370", "createdAt": "2020-12-07T10:58:40Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/auth/altus/CrnResourceDescriptor.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.sequenceiq.cloudbreak.auth.altus;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+public enum CrnResourceDescriptor {\n+    ENVIRONMENT(Crn.ResourceType.ENVIRONMENT, Crn.Service.ENVIRONMENTS),\n+    DATALAKE(Crn.ResourceType.DATALAKE, Crn.Service.DATALAKE),\n+    FREEIPA(Crn.ResourceType.FREEIPA, Crn.Service.FREEIPA),\n+    KERBEROS(Crn.ResourceType.KERBEROS, Crn.Service.FREEIPA),\n+    LDAP(Crn.ResourceType.LDAP, Crn.Service.FREEIPA),\n+    DATAHUB(Crn.ResourceType.CLUSTER, Crn.Service.DATAHUB),\n+    CLUSTER_DEF(Crn.ResourceType.CLUSTER_DEFINITION, Crn.Service.DATAHUB),\n+    CLUSTER_TEMPLATE(Crn.ResourceType.CLUSTER_TEMPLATE, Crn.Service.DATAHUB),\n+    CREDENTIAL(Crn.ResourceType.CREDENTIAL, Crn.Service.ENVIRONMENTS),\n+    IMAGE_CATALOG(Crn.ResourceType.IMAGE_CATALOG, Crn.Service.DATAHUB),\n+    RECIPE(Crn.ResourceType.RECIPE, Crn.Service.DATAHUB),\n+    PROXY(Crn.ResourceType.PROXY_CONIFG, Crn.Service.ENVIRONMENTS),\n+    ACCOUNT_TAG(Crn.ResourceType.ACCOUNT_TAG, Crn.Service.ACCOUNTTAG),\n+    ACCOUNT_TELEMETRY(Crn.ResourceType.ACCOUNT_TELEMETRY, Crn.Service.ACCOUNTTELEMETRY),\n+    NETWORK(Crn.ResourceType.NETWORK, Crn.Service.ENVIRONMENTS),\n+    ROLE(Crn.ResourceType.ROLE, Crn.Service.IAM),\n+    RESOURCE_ROLE(Crn.ResourceType.RESOURCE_ROLE, Crn.Service.IAM),\n+    ALERT(Crn.ResourceType.DATAHUB_AUTOSCALE_CONFIG, Crn.Service.AUTOSCALE),\n+    DATABASE(Crn.ResourceType.DATABASE, Crn.Service.REDBEAMS),\n+    DATABASE_SERVER(Crn.ResourceType.DATABASE_SERVER, Crn.Service.REDBEAMS),\n+    USER(Crn.ResourceType.USER, Crn.Service.IAM),\n+    PUBLIC_KEY(Crn.ResourceType.PUBLIC_KEY, Crn.Service.IAM),\n+    MACHINE_USER(Crn.ResourceType.MACHINE_USER, Crn.Service.IAM),\n+    GROUP(Crn.ResourceType.GROUP, Crn.Service.IAM),\n+    POLICY(Crn.ResourceType.POLICY, Crn.Service.IAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4d9f6468fb315bd8ec79766d94f710b45e1bf3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyMDc2OA==", "bodyText": "yes, grouping seems worth to implement, separate files can be problematic indeed, since services are referring to other services' crns", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r537420768", "createdAt": "2020-12-07T11:09:00Z", "author": {"login": "horadla23"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/auth/altus/CrnResourceDescriptor.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.sequenceiq.cloudbreak.auth.altus;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+public enum CrnResourceDescriptor {\n+    ENVIRONMENT(Crn.ResourceType.ENVIRONMENT, Crn.Service.ENVIRONMENTS),\n+    DATALAKE(Crn.ResourceType.DATALAKE, Crn.Service.DATALAKE),\n+    FREEIPA(Crn.ResourceType.FREEIPA, Crn.Service.FREEIPA),\n+    KERBEROS(Crn.ResourceType.KERBEROS, Crn.Service.FREEIPA),\n+    LDAP(Crn.ResourceType.LDAP, Crn.Service.FREEIPA),\n+    DATAHUB(Crn.ResourceType.CLUSTER, Crn.Service.DATAHUB),\n+    CLUSTER_DEF(Crn.ResourceType.CLUSTER_DEFINITION, Crn.Service.DATAHUB),\n+    CLUSTER_TEMPLATE(Crn.ResourceType.CLUSTER_TEMPLATE, Crn.Service.DATAHUB),\n+    CREDENTIAL(Crn.ResourceType.CREDENTIAL, Crn.Service.ENVIRONMENTS),\n+    IMAGE_CATALOG(Crn.ResourceType.IMAGE_CATALOG, Crn.Service.DATAHUB),\n+    RECIPE(Crn.ResourceType.RECIPE, Crn.Service.DATAHUB),\n+    PROXY(Crn.ResourceType.PROXY_CONIFG, Crn.Service.ENVIRONMENTS),\n+    ACCOUNT_TAG(Crn.ResourceType.ACCOUNT_TAG, Crn.Service.ACCOUNTTAG),\n+    ACCOUNT_TELEMETRY(Crn.ResourceType.ACCOUNT_TELEMETRY, Crn.Service.ACCOUNTTELEMETRY),\n+    NETWORK(Crn.ResourceType.NETWORK, Crn.Service.ENVIRONMENTS),\n+    ROLE(Crn.ResourceType.ROLE, Crn.Service.IAM),\n+    RESOURCE_ROLE(Crn.ResourceType.RESOURCE_ROLE, Crn.Service.IAM),\n+    ALERT(Crn.ResourceType.DATAHUB_AUTOSCALE_CONFIG, Crn.Service.AUTOSCALE),\n+    DATABASE(Crn.ResourceType.DATABASE, Crn.Service.REDBEAMS),\n+    DATABASE_SERVER(Crn.ResourceType.DATABASE_SERVER, Crn.Service.REDBEAMS),\n+    USER(Crn.ResourceType.USER, Crn.Service.IAM),\n+    PUBLIC_KEY(Crn.ResourceType.PUBLIC_KEY, Crn.Service.IAM),\n+    MACHINE_USER(Crn.ResourceType.MACHINE_USER, Crn.Service.IAM),\n+    GROUP(Crn.ResourceType.GROUP, Crn.Service.IAM),\n+    POLICY(Crn.ResourceType.POLICY, Crn.Service.IAM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxNDM3MA=="}, "originalCommit": {"oid": "1c4d9f6468fb315bd8ec79766d94f710b45e1bf3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzQ4ODEyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/CrnCollectionValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTowMTozM1rOIAhSJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTowMTozM1rOIAhSJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxNjIyOQ==", "bodyText": "could you break this into smaller methods?", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r537416229", "createdAt": "2020-12-07T11:01:33Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/CrnCollectionValidator.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sequenceiq.cloudbreak.validation;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import com.google.common.base.Joiner;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.CrnResourceDescriptor;\n+\n+public class CrnCollectionValidator implements ConstraintValidator<ValidCrnCollection, Collection<String>> {\n+\n+    private CrnResourceDescriptor[] resourceDescriptors;\n+\n+    @Override\n+    public void initialize(ValidCrnCollection constraintAnnotation) {\n+        resourceDescriptors = constraintAnnotation.resource();\n+    }\n+\n+    @Override\n+    public boolean isValid(Collection<String> req, ConstraintValidatorContext constraintValidatorContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4d9f6468fb315bd8ec79766d94f710b45e1bf3"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzQ5NzAxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/CrnValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTowMzo0MVrOIAhXPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTowNzoyMVrOIAhf_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxNzUzNQ==", "bodyText": "I feel like there is a lot of code duplication here with CrnCollectionValidator. Could you move the common parts into a common class?", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r537417535", "createdAt": "2020-12-07T11:03:41Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/CrnValidator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.cloudbreak.validation;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import com.google.common.base.Joiner;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.CrnResourceDescriptor;\n+\n+public class CrnValidator implements ConstraintValidator<ValidCrn, String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4d9f6468fb315bd8ec79766d94f710b45e1bf3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxOTc3Mw==", "bodyText": "yes, makes sense", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r537419773", "createdAt": "2020-12-07T11:07:21Z", "author": {"login": "horadla23"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/CrnValidator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.cloudbreak.validation;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import com.google.common.base.Joiner;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.CrnResourceDescriptor;\n+\n+public class CrnValidator implements ConstraintValidator<ValidCrn, String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxNzUzNQ=="}, "originalCommit": {"oid": "1c4d9f6468fb315bd8ec79766d94f710b45e1bf3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzgwMDc0OnYy", "diffSide": "RIGHT", "path": "redbeams-api/src/main/java/com/sequenceiq/redbeams/api/endpoint/v4/databaseserver/DatabaseServerV4Endpoint.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjoxNzo1NlrOIAkFVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDowMDoyMFrOIAoDrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2MjEwMg==", "bodyText": "Question: does the Crn validation work with a collection of Crns as well?", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r537462102", "createdAt": "2020-12-07T12:17:56Z", "author": {"login": "gergopapi2"}, "path": "redbeams-api/src/main/java/com/sequenceiq/redbeams/api/endpoint/v4/databaseserver/DatabaseServerV4Endpoint.java", "diffHunk": "@@ -138,7 +141,7 @@ DatabaseServerV4Response deleteByName(\n     @ApiOperation(value = DatabaseServerOpDescription.DELETE_MULTIPLE_BY_CRN, notes = DatabaseServerNotes.DELETE_MULTIPLE_BY_CRN,\n             consumes = MediaType.APPLICATION_JSON, nickname = \"deleteMultipleDatabaseServersByCrn\")\n     DatabaseServerV4Responses deleteMultiple(\n-            @ApiParam(DatabaseServerParamDescriptions.CRNS) Set<@ValidCrn String> crns,\n+            @ApiParam(DatabaseServerParamDescriptions.CRNS) @ValidCrn(resource = DATABASE_SERVER) Set<String> crns,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa8482136b6aea2db2c6fbd06cdefa5e26cc260"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2ODM1MQ==", "bodyText": "have you checked the change? anyway there is a new mock test for this to make sure", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r537468351", "createdAt": "2020-12-07T12:28:49Z", "author": {"login": "horadla23"}, "path": "redbeams-api/src/main/java/com/sequenceiq/redbeams/api/endpoint/v4/databaseserver/DatabaseServerV4Endpoint.java", "diffHunk": "@@ -138,7 +141,7 @@ DatabaseServerV4Response deleteByName(\n     @ApiOperation(value = DatabaseServerOpDescription.DELETE_MULTIPLE_BY_CRN, notes = DatabaseServerNotes.DELETE_MULTIPLE_BY_CRN,\n             consumes = MediaType.APPLICATION_JSON, nickname = \"deleteMultipleDatabaseServersByCrn\")\n     DatabaseServerV4Responses deleteMultiple(\n-            @ApiParam(DatabaseServerParamDescriptions.CRNS) Set<@ValidCrn String> crns,\n+            @ApiParam(DatabaseServerParamDescriptions.CRNS) @ValidCrn(resource = DATABASE_SERVER) Set<String> crns,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2MjEwMg=="}, "originalCommit": {"oid": "baa8482136b6aea2db2c6fbd06cdefa5e26cc260"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUyNzIxNA==", "bodyText": "sorry, so yes, it is also working with collection of crns", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r537527214", "createdAt": "2020-12-07T14:00:20Z", "author": {"login": "horadla23"}, "path": "redbeams-api/src/main/java/com/sequenceiq/redbeams/api/endpoint/v4/databaseserver/DatabaseServerV4Endpoint.java", "diffHunk": "@@ -138,7 +141,7 @@ DatabaseServerV4Response deleteByName(\n     @ApiOperation(value = DatabaseServerOpDescription.DELETE_MULTIPLE_BY_CRN, notes = DatabaseServerNotes.DELETE_MULTIPLE_BY_CRN,\n             consumes = MediaType.APPLICATION_JSON, nickname = \"deleteMultipleDatabaseServersByCrn\")\n     DatabaseServerV4Responses deleteMultiple(\n-            @ApiParam(DatabaseServerParamDescriptions.CRNS) Set<@ValidCrn String> crns,\n+            @ApiParam(DatabaseServerParamDescriptions.CRNS) @ValidCrn(resource = DATABASE_SERVER) Set<String> crns,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2MjEwMg=="}, "originalCommit": {"oid": "baa8482136b6aea2db2c6fbd06cdefa5e26cc260"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODY5MjY5OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/v1/EnvironmentController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOToyOTowMVrOIBPoBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjowMTo0MVrOIBWhkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3NTQ5Mw==", "bodyText": "static import ? we used it in EnvironmentEndpoint.java", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r538175493", "createdAt": "2020-12-08T09:29:01Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/v1/EnvironmentController.java", "diffHunk": "@@ -141,7 +143,7 @@ public EnvironmentCrnResponse getCrnByName(@ResourceName String environmentName)\n \n     @Override\n     @CheckPermissionByResourceCrn(action = AuthorizationResourceAction.DESCRIBE_ENVIRONMENT)\n-    public DetailedEnvironmentResponse getByCrn(@ResourceCrn @TenantAwareParam String crn) {\n+    public DetailedEnvironmentResponse getByCrn(@ValidCrn(resource = CrnResourceDescriptor.ENVIRONMENT) @ResourceCrn @TenantAwareParam String crn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05efbbb75dfa18ba1e5e154de144b8dae6e09c1e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4ODUzMA==", "bodyText": "because there were conflicts between static imports (CrnResourceDescriptor.ENVIRONMENT vs CredentialType.ENVIRONMENT) i decided to not use static import in case of CrnResourceDescriptor", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r538288530", "createdAt": "2020-12-08T12:01:41Z", "author": {"login": "horadla23"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/v1/EnvironmentController.java", "diffHunk": "@@ -141,7 +143,7 @@ public EnvironmentCrnResponse getCrnByName(@ResourceName String environmentName)\n \n     @Override\n     @CheckPermissionByResourceCrn(action = AuthorizationResourceAction.DESCRIBE_ENVIRONMENT)\n-    public DetailedEnvironmentResponse getByCrn(@ResourceCrn @TenantAwareParam String crn) {\n+    public DetailedEnvironmentResponse getByCrn(@ValidCrn(resource = CrnResourceDescriptor.ENVIRONMENT) @ResourceCrn @TenantAwareParam String crn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3NTQ5Mw=="}, "originalCommit": {"oid": "05efbbb75dfa18ba1e5e154de144b8dae6e09c1e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODc1MzQyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/auth/altus/Crn.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo0MTo0NlrOIBQMHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDoxNzoxNVrOIBRyrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4NDczNA==", "bodyText": "is the resourceDescriptor required or why do you add to the param list?", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r538184734", "createdAt": "2020-12-08T09:41:46Z", "author": {"login": "topolyai5"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/auth/altus/Crn.java", "diffHunk": "@@ -591,32 +600,45 @@ public static Builder builder() {\n \n         private String resource;\n \n-        public Builder setPartition(Partition partition) {\n-            this.partition = checkNotNull(partition);\n+        /**\n+         * @deprecated ALTUS was replaced by CDP and is kept here for backward compatibility reasons (e.g., dynamodb serialized CRNs).\n+         */\n+        @Deprecated\n+        public Builder setOldPartition() {\n+            this.partition = Partition.ALTUS;\n             return this;\n         }\n \n-        public Builder setService(Service service) {\n-            this.service = checkNotNull(service);\n+        public Builder setAccountId(String accountId) {\n+            this.accountId = checkNotNull(accountId);\n             return this;\n         }\n \n-        public Builder setAccountId(String accountId) {\n-            this.accountId = checkNotNull(accountId);\n+        public Builder setResource(String resource) {\n+            this.resource = checkNotNull(resource);\n             return this;\n         }\n \n-        public Builder setResourceType(ResourceType resourceType) {\n-            this.resourceType = checkNotNull(resourceType);\n+        public Crn build(CrnResourceDescriptor resourceDescriptor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05efbbb75dfa18ba1e5e154de144b8dae6e09c1e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5NzE2MQ==", "bodyText": "yes, required", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r538197161", "createdAt": "2020-12-08T09:57:56Z", "author": {"login": "horadla23"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/auth/altus/Crn.java", "diffHunk": "@@ -591,32 +600,45 @@ public static Builder builder() {\n \n         private String resource;\n \n-        public Builder setPartition(Partition partition) {\n-            this.partition = checkNotNull(partition);\n+        /**\n+         * @deprecated ALTUS was replaced by CDP and is kept here for backward compatibility reasons (e.g., dynamodb serialized CRNs).\n+         */\n+        @Deprecated\n+        public Builder setOldPartition() {\n+            this.partition = Partition.ALTUS;\n             return this;\n         }\n \n-        public Builder setService(Service service) {\n-            this.service = checkNotNull(service);\n+        public Builder setAccountId(String accountId) {\n+            this.accountId = checkNotNull(accountId);\n             return this;\n         }\n \n-        public Builder setAccountId(String accountId) {\n-            this.accountId = checkNotNull(accountId);\n+        public Builder setResource(String resource) {\n+            this.resource = checkNotNull(resource);\n             return this;\n         }\n \n-        public Builder setResourceType(ResourceType resourceType) {\n-            this.resourceType = checkNotNull(resourceType);\n+        public Crn build(CrnResourceDescriptor resourceDescriptor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4NDczNA=="}, "originalCommit": {"oid": "05efbbb75dfa18ba1e5e154de144b8dae6e09c1e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIwMzM5OQ==", "bodyText": "As I know, almost all of the fields are required in the crn. Is it a good pattern to add the required fields as a parameter to the build() method?", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r538203399", "createdAt": "2020-12-08T10:06:36Z", "author": {"login": "topolyai5"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/auth/altus/Crn.java", "diffHunk": "@@ -591,32 +600,45 @@ public static Builder builder() {\n \n         private String resource;\n \n-        public Builder setPartition(Partition partition) {\n-            this.partition = checkNotNull(partition);\n+        /**\n+         * @deprecated ALTUS was replaced by CDP and is kept here for backward compatibility reasons (e.g., dynamodb serialized CRNs).\n+         */\n+        @Deprecated\n+        public Builder setOldPartition() {\n+            this.partition = Partition.ALTUS;\n             return this;\n         }\n \n-        public Builder setService(Service service) {\n-            this.service = checkNotNull(service);\n+        public Builder setAccountId(String accountId) {\n+            this.accountId = checkNotNull(accountId);\n             return this;\n         }\n \n-        public Builder setAccountId(String accountId) {\n-            this.accountId = checkNotNull(accountId);\n+        public Builder setResource(String resource) {\n+            this.resource = checkNotNull(resource);\n             return this;\n         }\n \n-        public Builder setResourceType(ResourceType resourceType) {\n-            this.resourceType = checkNotNull(resourceType);\n+        public Crn build(CrnResourceDescriptor resourceDescriptor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4NDczNA=="}, "originalCommit": {"oid": "05efbbb75dfa18ba1e5e154de144b8dae6e09c1e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIxMDAzOA==", "bodyText": "all fields are required, but some of them have 1 value always, some of them changed to package private in this change and alo crnresourcedescriptor is not part of the crn, so it is not a required field, but helps to fill in some fields of the crn, so it i decided to add to build() as parameter", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r538210038", "createdAt": "2020-12-08T10:15:55Z", "author": {"login": "horadla23"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/auth/altus/Crn.java", "diffHunk": "@@ -591,32 +600,45 @@ public static Builder builder() {\n \n         private String resource;\n \n-        public Builder setPartition(Partition partition) {\n-            this.partition = checkNotNull(partition);\n+        /**\n+         * @deprecated ALTUS was replaced by CDP and is kept here for backward compatibility reasons (e.g., dynamodb serialized CRNs).\n+         */\n+        @Deprecated\n+        public Builder setOldPartition() {\n+            this.partition = Partition.ALTUS;\n             return this;\n         }\n \n-        public Builder setService(Service service) {\n-            this.service = checkNotNull(service);\n+        public Builder setAccountId(String accountId) {\n+            this.accountId = checkNotNull(accountId);\n             return this;\n         }\n \n-        public Builder setAccountId(String accountId) {\n-            this.accountId = checkNotNull(accountId);\n+        public Builder setResource(String resource) {\n+            this.resource = checkNotNull(resource);\n             return this;\n         }\n \n-        public Builder setResourceType(ResourceType resourceType) {\n-            this.resourceType = checkNotNull(resourceType);\n+        public Crn build(CrnResourceDescriptor resourceDescriptor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4NDczNA=="}, "originalCommit": {"oid": "05efbbb75dfa18ba1e5e154de144b8dae6e09c1e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIxMDk4OQ==", "bodyText": "i can also add a new constructor for builder if it is better, instead of adding a parameter to build(), what do you think @topolyai5 ?", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r538210989", "createdAt": "2020-12-08T10:17:15Z", "author": {"login": "horadla23"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/auth/altus/Crn.java", "diffHunk": "@@ -591,32 +600,45 @@ public static Builder builder() {\n \n         private String resource;\n \n-        public Builder setPartition(Partition partition) {\n-            this.partition = checkNotNull(partition);\n+        /**\n+         * @deprecated ALTUS was replaced by CDP and is kept here for backward compatibility reasons (e.g., dynamodb serialized CRNs).\n+         */\n+        @Deprecated\n+        public Builder setOldPartition() {\n+            this.partition = Partition.ALTUS;\n             return this;\n         }\n \n-        public Builder setService(Service service) {\n-            this.service = checkNotNull(service);\n+        public Builder setAccountId(String accountId) {\n+            this.accountId = checkNotNull(accountId);\n             return this;\n         }\n \n-        public Builder setAccountId(String accountId) {\n-            this.accountId = checkNotNull(accountId);\n+        public Builder setResource(String resource) {\n+            this.resource = checkNotNull(resource);\n             return this;\n         }\n \n-        public Builder setResourceType(ResourceType resourceType) {\n-            this.resourceType = checkNotNull(resourceType);\n+        public Crn build(CrnResourceDescriptor resourceDescriptor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4NDczNA=="}, "originalCommit": {"oid": "05efbbb75dfa18ba1e5e154de144b8dae6e09c1e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODc5MzM0OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/client/EnvironmentTestClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo0OToxMlrOIBQjMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDoxNTozNlrOIBRuFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MDY0Mw==", "bodyText": "could you please change for this: EnvironmentInternalGetAction or remove one of them?", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r538190643", "createdAt": "2020-12-08T09:49:12Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/client/EnvironmentTestClient.java", "diffHunk": "@@ -36,6 +38,10 @@\n         return new EnvironmentGetAction();\n     }\n \n+    public Action<EnvironmentTestDto, EnvironmentClient> describeByCrn() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05efbbb75dfa18ba1e5e154de144b8dae6e09c1e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5Nzg5Mw==", "bodyText": "why internal? both of them are worth to test and both of them can be used by anyone", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r538197893", "createdAt": "2020-12-08T09:58:58Z", "author": {"login": "horadla23"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/client/EnvironmentTestClient.java", "diffHunk": "@@ -36,6 +38,10 @@\n         return new EnvironmentGetAction();\n     }\n \n+    public Action<EnvironmentTestDto, EnvironmentClient> describeByCrn() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MDY0Mw=="}, "originalCommit": {"oid": "05efbbb75dfa18ba1e5e154de144b8dae6e09c1e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIwMDI3OA==", "bodyText": "ohh, i see now, but my method is not using internalcrn, and that's the real use case in my test", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r538200278", "createdAt": "2020-12-08T10:02:09Z", "author": {"login": "horadla23"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/client/EnvironmentTestClient.java", "diffHunk": "@@ -36,6 +38,10 @@\n         return new EnvironmentGetAction();\n     }\n \n+    public Action<EnvironmentTestDto, EnvironmentClient> describeByCrn() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MDY0Mw=="}, "originalCommit": {"oid": "05efbbb75dfa18ba1e5e154de144b8dae6e09c1e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIwOTgxMg==", "bodyText": "Yes, you are right. Ok, it will be ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9562#discussion_r538209812", "createdAt": "2020-12-08T10:15:36Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/client/EnvironmentTestClient.java", "diffHunk": "@@ -36,6 +38,10 @@\n         return new EnvironmentGetAction();\n     }\n \n+    public Action<EnvironmentTestDto, EnvironmentClient> describeByCrn() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MDY0Mw=="}, "originalCommit": {"oid": "05efbbb75dfa18ba1e5e154de144b8dae6e09c1e"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3402, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}