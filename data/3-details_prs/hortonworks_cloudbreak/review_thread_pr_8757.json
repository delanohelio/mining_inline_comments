{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0ODA0ODA1", "number": 8757, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MDo0N1rOEWXq9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoyMToyN1rOEW0GBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkxOTU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/dr/backup/DatabaseBackupActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MDo0N1rOG9pfVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDozMTozNlrOG-RHhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NjA4Ng==", "bodyText": "suggestion: For the Database backup failed state, since we're passing so many null values in, and reusing this BackupRestoreContext for both active and failed backups and restores, it seems to me that we may want to create a new context type.", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467296086", "createdAt": "2020-08-07T21:50:47Z", "author": {"login": "brycederriso"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/dr/backup/DatabaseBackupActions.java", "diffHunk": "@@ -81,7 +82,7 @@ protected BackupRestoreContext createFlowContext(FlowParameters flowParameters,\n                     DatabaseBackupFailedEvent payload) {\n                 Flow flow = getFlow(flowParameters.getFlowId());\n                 flow.setFlowFailed(payload.getException());\n-                return BackupRestoreContext.from(flowParameters, payload, null, null);\n+                return BackupRestoreContext.from(flowParameters, payload, null, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a0f58b149ab261e205e4c7f4257ade0f401d0e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk0NTM0OQ==", "bodyText": "not relevant.", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467945349", "createdAt": "2020-08-10T14:31:36Z", "author": {"login": "kkalvagadda1"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/datalake/dr/backup/DatabaseBackupActions.java", "diffHunk": "@@ -81,7 +82,7 @@ protected BackupRestoreContext createFlowContext(FlowParameters flowParameters,\n                     DatabaseBackupFailedEvent payload) {\n                 Flow flow = getFlow(flowParameters.getFlowId());\n                 flow.setFlowFailed(payload.getException());\n-                return BackupRestoreContext.from(flowParameters, payload, null, null);\n+                return BackupRestoreContext.from(flowParameters, payload, null, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NjA4Ng=="}, "originalCommit": {"oid": "44a0f58b149ab261e205e4c7f4257ade0f401d0e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkzMjM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/BackupRestoreSaltConfigGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MzoyOVrOG9pngQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MzoyOVrOG9pngQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODE3Nw==", "bodyText": "suggestion: append _KEY to the end of this constant, since it refers to the key value we have to line up with in the key:value pair of our Yaml pillar.", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467298177", "createdAt": "2020-08-07T21:53:29Z", "author": {"login": "brycederriso"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/BackupRestoreSaltConfigGenerator.java", "diffHunk": "@@ -27,14 +26,17 @@\n \n     public static final String AWS_REGION_KEY = \"aws_region\";\n \n-    public SaltConfig createSaltConfig(String location, String backupId, Stack stack) throws URISyntaxException {\n+    public static final String RANGER_ADMIN_GROUP = \"ranger_admin_group\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a0f58b149ab261e205e4c7f4257ade0f401d0e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODk1MzI2OnYy", "diffSide": "RIGHT", "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/dr/SdxDatabaseDrServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1ODowNlrOG9p1Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDozMTo1MVrOG-RIPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwMTY3NA==", "bodyText": "suggestion: refer to this from public constant attached to the BackupRestoreSaltConfigGenerator instead of redefining a string literal that must match.", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467301674", "createdAt": "2020-08-07T21:58:06Z", "author": {"login": "brycederriso"}, "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/dr/SdxDatabaseDrServiceTest.java", "diffHunk": "@@ -40,6 +40,8 @@\n \n     private static final String BACKUPLOCATION = \"location/of/backup\";\n \n+    private static final String RANGERADMINGROUP = \"ranger_admin_group\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a0f58b149ab261e205e4c7f4257ade0f401d0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk0NTUzMg==", "bodyText": "not relevant.", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467945532", "createdAt": "2020-08-10T14:31:51Z", "author": {"login": "kkalvagadda1"}, "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/dr/SdxDatabaseDrServiceTest.java", "diffHunk": "@@ -40,6 +40,8 @@\n \n     private static final String BACKUPLOCATION = \"location/of/backup\";\n \n+    private static final String RANGERADMINGROUP = \"ranger_admin_group\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwMTY3NA=="}, "originalCommit": {"oid": "44a0f58b149ab261e205e4c7f4257ade0f401d0e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODk4MzM4OnYy", "diffSide": "RIGHT", "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/disaster_recovery/scripts/backup_db.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjowNjowNlrOG9qIZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjowNjowNlrOG9qIZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNjU5Nw==", "bodyText": "question: Could you move this set down with the rest of the shell options? Lines 9-10.\nset -o xtrace", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467306597", "createdAt": "2020-08-07T22:06:06Z", "author": {"login": "brycederriso"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/disaster_recovery/scripts/backup_db.sh", "diffHunk": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/bin/bash -x", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a0f58b149ab261e205e4c7f4257ade0f401d0e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzUzNzAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxMjowN1rOG-QSbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDozMzoyMFrOG-RMFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzMTc1OQ==", "bodyText": "question: Should this actually be a LOGGER.info or debug?", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467931759", "createdAt": "2020-08-10T14:12:07Z", "author": {"login": "brycederriso"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java", "diffHunk": "@@ -71,7 +88,14 @@ protected Selectable doAccept(HandlerEvent event) {\n             GatewayConfig gatewayConfig = gatewayConfigService.getGatewayConfig(stack, gatewayInstance, cluster.hasGateway());\n             Set<String> gatewayFQDN = Collections.singleton(gatewayInstance.getDiscoveryFQDN());\n             ExitCriteriaModel exitModel = ClusterDeletionBasedExitCriteriaModel.clusterDeletionBasedModel(stackId, cluster.getId());\n-            SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), stack);\n+            Optional<LdapView> ldapView = ldapConfigService.get(stack.getEnvironmentCrn(), stack.getName());\n+            String virtualGroupsEnvironmentCrn = environmentConfigProvider.getParentEnvironmentCrn(stack.getEnvironmentCrn());\n+            String adminGroup = ldapView.orElseThrow(() -> new CloudbreakServiceException(\"Ranger admin group not found.\"))\n+                    .getAdminGroup();\n+            LOGGER.error(\"Admin Group:\", adminGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a458e34d0f968cff4012c12c7419da0893e4ef"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk0NjUxOA==", "bodyText": "I was testing changes e2e so I 've added it as an error log. Updated to a debug log.", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467946518", "createdAt": "2020-08-10T14:33:20Z", "author": {"login": "kkalvagadda1"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java", "diffHunk": "@@ -71,7 +88,14 @@ protected Selectable doAccept(HandlerEvent event) {\n             GatewayConfig gatewayConfig = gatewayConfigService.getGatewayConfig(stack, gatewayInstance, cluster.hasGateway());\n             Set<String> gatewayFQDN = Collections.singleton(gatewayInstance.getDiscoveryFQDN());\n             ExitCriteriaModel exitModel = ClusterDeletionBasedExitCriteriaModel.clusterDeletionBasedModel(stackId, cluster.getId());\n-            SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), stack);\n+            Optional<LdapView> ldapView = ldapConfigService.get(stack.getEnvironmentCrn(), stack.getName());\n+            String virtualGroupsEnvironmentCrn = environmentConfigProvider.getParentEnvironmentCrn(stack.getEnvironmentCrn());\n+            String adminGroup = ldapView.orElseThrow(() -> new CloudbreakServiceException(\"Ranger admin group not found.\"))\n+                    .getAdminGroup();\n+            LOGGER.error(\"Admin Group:\", adminGroup);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzMTc1OQ=="}, "originalCommit": {"oid": "a4a458e34d0f968cff4012c12c7419da0893e4ef"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzUzODYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxMjoyNlrOG-QTUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxMjoyNlrOG-QTUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzMTk4NA==", "bodyText": "praise: Good use of orElseThrow().", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467931984", "createdAt": "2020-08-10T14:12:26Z", "author": {"login": "brycederriso"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/backup/DatabaseBackupHandler.java", "diffHunk": "@@ -71,7 +88,14 @@ protected Selectable doAccept(HandlerEvent event) {\n             GatewayConfig gatewayConfig = gatewayConfigService.getGatewayConfig(stack, gatewayInstance, cluster.hasGateway());\n             Set<String> gatewayFQDN = Collections.singleton(gatewayInstance.getDiscoveryFQDN());\n             ExitCriteriaModel exitModel = ClusterDeletionBasedExitCriteriaModel.clusterDeletionBasedModel(stackId, cluster.getId());\n-            SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), stack);\n+            Optional<LdapView> ldapView = ldapConfigService.get(stack.getEnvironmentCrn(), stack.getName());\n+            String virtualGroupsEnvironmentCrn = environmentConfigProvider.getParentEnvironmentCrn(stack.getEnvironmentCrn());\n+            String adminGroup = ldapView.orElseThrow(() -> new CloudbreakServiceException(\"Ranger admin group not found.\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a458e34d0f968cff4012c12c7419da0893e4ef"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzU1NDE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/restore/DatabaseRestoreHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoxNjoxMFrOG-QdJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NjozMlrOG-VEWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNDUwMQ==", "bodyText": "suggestion: If this block of additions is identical to the one in DatabaseBackupHandler, could we move it into it's own class for retrieving the rangerAdminGroup and then inject just that single class in both handlers?\nI think that could help improve the testability of this functionality, and help reduce the number of direct dependencies for these ...Handlers.", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467934501", "createdAt": "2020-08-10T14:16:10Z", "author": {"login": "brycederriso"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/restore/DatabaseRestoreHandler.java", "diffHunk": "@@ -71,7 +88,14 @@ protected Selectable doAccept(HandlerEvent event) {\n             GatewayConfig gatewayConfig = gatewayConfigService.getGatewayConfig(stack, gatewayInstance, cluster.hasGateway());\n             Set<String> gatewayFQDN = Collections.singleton(gatewayInstance.getDiscoveryFQDN());\n             ExitCriteriaModel exitModel = ClusterDeletionBasedExitCriteriaModel.clusterDeletionBasedModel(stackId, cluster.getId());\n-            SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), stack);\n+            Optional<LdapView> ldapView = ldapConfigService.get(stack.getEnvironmentCrn(), stack.getName());\n+            String virtualGroupsEnvironmentCrn = environmentConfigProvider.getParentEnvironmentCrn(stack.getEnvironmentCrn());\n+            String adminGroup = ldapView.orElseThrow(() -> new CloudbreakServiceException(\"Ranger admin group not found.\"))\n+                    .getAdminGroup();\n+            LOGGER.error(\"Admin Group:\", adminGroup);\n+            VirtualGroupRequest virtualGroupRequest = new VirtualGroupRequest(virtualGroupsEnvironmentCrn, adminGroup);\n+            String rangerAdminGroup = virtualGroupService.getVirtualGroup(virtualGroupRequest, UmsRight.RANGER_ADMIN.getRight());\n+            SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), rangerAdminGroup, stack);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a458e34d0f968cff4012c12c7419da0893e4ef"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxMDA3Mg==", "bodyText": "Good one. Will update the patch accordingly.", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r468010072", "createdAt": "2020-08-10T15:56:32Z", "author": {"login": "kkalvagadda1"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/dr/restore/DatabaseRestoreHandler.java", "diffHunk": "@@ -71,7 +88,14 @@ protected Selectable doAccept(HandlerEvent event) {\n             GatewayConfig gatewayConfig = gatewayConfigService.getGatewayConfig(stack, gatewayInstance, cluster.hasGateway());\n             Set<String> gatewayFQDN = Collections.singleton(gatewayInstance.getDiscoveryFQDN());\n             ExitCriteriaModel exitModel = ClusterDeletionBasedExitCriteriaModel.clusterDeletionBasedModel(stackId, cluster.getId());\n-            SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), stack);\n+            Optional<LdapView> ldapView = ldapConfigService.get(stack.getEnvironmentCrn(), stack.getName());\n+            String virtualGroupsEnvironmentCrn = environmentConfigProvider.getParentEnvironmentCrn(stack.getEnvironmentCrn());\n+            String adminGroup = ldapView.orElseThrow(() -> new CloudbreakServiceException(\"Ranger admin group not found.\"))\n+                    .getAdminGroup();\n+            LOGGER.error(\"Admin Group:\", adminGroup);\n+            VirtualGroupRequest virtualGroupRequest = new VirtualGroupRequest(virtualGroupsEnvironmentCrn, adminGroup);\n+            String rangerAdminGroup = virtualGroupService.getVirtualGroup(virtualGroupRequest, UmsRight.RANGER_ADMIN.getRight());\n+            SaltConfig saltConfig = saltConfigGenerator.createSaltConfig(request.getBackupLocation(), request.getBackupId(), rangerAdminGroup, stack);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNDUwMQ=="}, "originalCommit": {"oid": "a4a458e34d0f968cff4012c12c7419da0893e4ef"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzU3NjM5OnYy", "diffSide": "RIGHT", "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/disaster_recovery/scripts/backup_db.sh", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoyMToyOFrOG-Qqtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo1MDowNlrOG-bEEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNzk3NQ==", "bodyText": "question: How confident are we that RANGER_WAG will never be in the SQL files that we're using?\nIs there a string we could use here that is both invalid SQL (preventing restoration unless replacement occurs) and that we can be sure won't show up as part of the dump?", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r467937975", "createdAt": "2020-08-10T14:21:28Z", "author": {"login": "brycederriso"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/disaster_recovery/scripts/backup_db.sh", "diffHunk": "@@ -81,21 +87,47 @@ run_azure_backup() {\n   rmdir -v \"$DATE_DIR\" > >(tee -a $LOGFILE) 2> >(tee -a $LOGFILE >&2)\n }\n \n+replace_ranger_group_before_export() {\n+  doLog \"INFO Replacing \"$1\" with RANGER_WAG in the dump before export\"\n+  echo \"sed --in-place=\"original\" 's/\"$1\"/RANGER_WAG/g' $2\"\n+  ret_code=$(sed --in-place=\"original\" -e s/\"$1\"/RANGER_WAG/g \"$2\" || echo $?)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a458e34d0f968cff4012c12c7419da0893e4ef"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAzMjEzNg==", "bodyText": "Will \"RANGER_WAG\" with a string that will be unique.\nImplementing logic to prevent restoration unless replacement occurs needs further though. Let's not hold the patch for it.", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r468032136", "createdAt": "2020-08-10T16:32:45Z", "author": {"login": "kkalvagadda1"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/disaster_recovery/scripts/backup_db.sh", "diffHunk": "@@ -81,21 +87,47 @@ run_azure_backup() {\n   rmdir -v \"$DATE_DIR\" > >(tee -a $LOGFILE) 2> >(tee -a $LOGFILE >&2)\n }\n \n+replace_ranger_group_before_export() {\n+  doLog \"INFO Replacing \"$1\" with RANGER_WAG in the dump before export\"\n+  echo \"sed --in-place=\"original\" 's/\"$1\"/RANGER_WAG/g' $2\"\n+  ret_code=$(sed --in-place=\"original\" -e s/\"$1\"/RANGER_WAG/g \"$2\" || echo $?)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNzk3NQ=="}, "originalCommit": {"oid": "a4a458e34d0f968cff4012c12c7419da0893e4ef"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwODMwNQ==", "bodyText": "agreed!", "url": "https://github.com/hortonworks/cloudbreak/pull/8757#discussion_r468108305", "createdAt": "2020-08-10T18:50:06Z", "author": {"login": "brycederriso"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/disaster_recovery/scripts/backup_db.sh", "diffHunk": "@@ -81,21 +87,47 @@ run_azure_backup() {\n   rmdir -v \"$DATE_DIR\" > >(tee -a $LOGFILE) 2> >(tee -a $LOGFILE >&2)\n }\n \n+replace_ranger_group_before_export() {\n+  doLog \"INFO Replacing \"$1\" with RANGER_WAG in the dump before export\"\n+  echo \"sed --in-place=\"original\" 's/\"$1\"/RANGER_WAG/g' $2\"\n+  ret_code=$(sed --in-place=\"original\" -e s/\"$1\"/RANGER_WAG/g \"$2\" || echo $?)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNzk3NQ=="}, "originalCommit": {"oid": "a4a458e34d0f968cff4012c12c7419da0893e4ef"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2365, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}