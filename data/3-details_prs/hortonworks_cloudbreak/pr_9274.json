{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MzQwMDYy", "number": 9274, "title": "CB-9306 - Env service should create private DNS zones - various follow-ups", "bodyText": "This contains 2 commits deliberately, to be able to revert the first separately if needed:\nFirst contains:\n\nupgrade ARM template API versions to the latest\n\nSecond contains:\n\nvalidation on already existing network link\nexternalize poller values for all pollers like in AzureDnsZoneCreationPoller\nrefactor + unit test coverage for AzureDnsZoneService\nDataAccessException comment\nthe EndpointType enum refactor", "createdAt": "2020-10-22T14:35:25Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9274", "merged": true, "mergeCommit": {"oid": "42529f4ed109d51b5bb63a788f25e085b4853d9c"}, "closed": true, "closedAt": "2020-11-10T10:54:09Z", "author": {"login": "pdarvasi"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWP07AgBqjM5MTkzOTgwOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbHKQsAFqTUyNzA4MTg2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c93dc434b9481e3e24f58c79d255ec3e798907a2", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c93dc434b9481e3e24f58c79d255ec3e798907a2", "committedDate": "2020-10-22T14:25:41Z", "message": "CB-9306 - Azure ARM templates - API version upgrade"}, "afterCommit": {"oid": "db606980d7f719d7253c163c1a2e40f3bb9523f2", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/db606980d7f719d7253c163c1a2e40f3bb9523f2", "committedDate": "2020-10-26T08:09:04Z", "message": "CB-9306 - Azure ARM templates - API version upgrade"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db606980d7f719d7253c163c1a2e40f3bb9523f2", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/db606980d7f719d7253c163c1a2e40f3bb9523f2", "committedDate": "2020-10-26T08:09:04Z", "message": "CB-9306 - Azure ARM templates - API version upgrade"}, "afterCommit": {"oid": "e6eaed82ab60a4aca338ab34c61e8f5093b837e1", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e6eaed82ab60a4aca338ab34c61e8f5093b837e1", "committedDate": "2020-10-26T11:51:45Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6eaed82ab60a4aca338ab34c61e8f5093b837e1", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e6eaed82ab60a4aca338ab34c61e8f5093b837e1", "committedDate": "2020-10-26T11:51:45Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}, "afterCommit": {"oid": "8978fe6f56ebfe745221d6ab344cd79a99779a8c", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8978fe6f56ebfe745221d6ab344cd79a99779a8c", "committedDate": "2020-10-28T20:59:41Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8978fe6f56ebfe745221d6ab344cd79a99779a8c", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8978fe6f56ebfe745221d6ab344cd79a99779a8c", "committedDate": "2020-10-28T20:59:41Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}, "afterCommit": {"oid": "f83c20119e9e39cc59814870c8a2e40ef59872d0", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/f83c20119e9e39cc59814870c8a2e40ef59872d0", "committedDate": "2020-10-30T11:19:09Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f83c20119e9e39cc59814870c8a2e40ef59872d0", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/f83c20119e9e39cc59814870c8a2e40ef59872d0", "committedDate": "2020-10-30T11:19:09Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}, "afterCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e7e5910682b9006f265504e46123f909f8d9b2a8", "committedDate": "2020-10-30T11:57:41Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDI3NDcz", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#pullrequestreview-526027473", "createdAt": "2020-11-09T08:40:13Z", "commit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo0MDoxNFrOHvj_rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOToxMTozN1rOHvlIgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzNDg2Mw==", "bodyText": "why do we still need to check networkLinksDeployed? I think this should be dropped and only dnsZonesDeployed checked", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#discussion_r519634863", "createdAt": "2020-11-09T08:40:14Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -1,307 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud.azure;\n \n import static com.sequenceiq.common.api.type.ResourceType.AZURE_PRIVATE_DNS_ZONE;\n-import static com.sequenceiq.common.api.type.ResourceType.AZURE_VIRTUAL_NETWORK_LINK;\n \n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n \n-import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.dao.DataAccessException;\n import org.springframework.stereotype.Service;\n \n-import com.microsoft.azure.CloudException;\n-import com.microsoft.azure.PagedList;\n-import com.microsoft.azure.management.network.Network;\n-import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n-import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n-import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n-import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n-import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n-import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n-import com.sequenceiq.cloudbreak.common.json.Json;\n import com.sequenceiq.common.api.type.CommonStatus;\n-import com.sequenceiq.common.api.type.ResourceType;\n \n @Service\n public class AzureDnsZoneService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n \n-    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n-\n     private static final String DNS_ZONES = \"-dns-zones\";\n \n-    private static final String NETWORK_LINKS = \"-links\";\n-\n-    @Inject\n-    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n-\n-    @Inject\n-    private PersistenceRetriever resourcePersistenceRetriever;\n-\n-    @Inject\n-    private PersistenceNotifier persistenceNotifier;\n-\n     @Inject\n-    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+    private AzureResourceCreationHelperService azureResourceCreationHelperService;\n \n     @Inject\n     private AzureResourceIdProviderService azureResourceIdProviderService;\n \n-    @Inject\n-    private AzureUtils azureUtils;\n-\n-    @Value(\"${cb.arm.privateendpoint.services:}\")\n-    private List<String> privateEndpointServices;\n-\n-    public void getOrCreateDnsZones(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+    public void checkOrCreateDnsZones(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n             String resourceGroup, Map<String, String> tags) {\n \n         String networkId = networkView.getNetworkId();\n         String networkResourceGroup = networkView.getResourceGroupName();\n-        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n-\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = azureResourceCreationHelperService.getEnabledPrivateEndpointServices();\n         boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n         boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n-        String deploymentName = generateDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String deploymentName = azureResourceCreationHelperService.generateDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n         String dnsZoneDeploymentId = azureResourceIdProviderService.generateDeploymentId(azureClient.getCurrentSubscription().subscriptionId(),\n                 resourceGroup, deploymentName);\n \n         if (dnsZonesDeployed && networkLinksDeployed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzNTc4OQ==", "bodyText": "most of these variable could be moved into the if branch when dnsZonesDeployed is false.", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#discussion_r519635789", "createdAt": "2020-11-09T08:41:48Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -1,307 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud.azure;\n \n import static com.sequenceiq.common.api.type.ResourceType.AZURE_PRIVATE_DNS_ZONE;\n-import static com.sequenceiq.common.api.type.ResourceType.AZURE_VIRTUAL_NETWORK_LINK;\n \n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n \n-import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.dao.DataAccessException;\n import org.springframework.stereotype.Service;\n \n-import com.microsoft.azure.CloudException;\n-import com.microsoft.azure.PagedList;\n-import com.microsoft.azure.management.network.Network;\n-import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n-import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n-import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n-import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n-import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n-import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n-import com.sequenceiq.cloudbreak.common.json.Json;\n import com.sequenceiq.common.api.type.CommonStatus;\n-import com.sequenceiq.common.api.type.ResourceType;\n \n @Service\n public class AzureDnsZoneService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n \n-    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n-\n     private static final String DNS_ZONES = \"-dns-zones\";\n \n-    private static final String NETWORK_LINKS = \"-links\";\n-\n-    @Inject\n-    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n-\n-    @Inject\n-    private PersistenceRetriever resourcePersistenceRetriever;\n-\n-    @Inject\n-    private PersistenceNotifier persistenceNotifier;\n-\n     @Inject\n-    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+    private AzureResourceCreationHelperService azureResourceCreationHelperService;\n \n     @Inject\n     private AzureResourceIdProviderService azureResourceIdProviderService;\n \n-    @Inject\n-    private AzureUtils azureUtils;\n-\n-    @Value(\"${cb.arm.privateendpoint.services:}\")\n-    private List<String> privateEndpointServices;\n-\n-    public void getOrCreateDnsZones(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+    public void checkOrCreateDnsZones(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n             String resourceGroup, Map<String, String> tags) {\n \n         String networkId = networkView.getNetworkId();\n         String networkResourceGroup = networkView.getResourceGroupName();\n-        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n-\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = azureResourceCreationHelperService.getEnabledPrivateEndpointServices();\n         boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n         boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n-        String deploymentName = generateDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String deploymentName = azureResourceCreationHelperService.generateDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n         String dnsZoneDeploymentId = azureResourceIdProviderService.generateDeploymentId(azureClient.getCurrentSubscription().subscriptionId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzNzU0Ng==", "bodyText": "this branch should be splitted into smaller methods", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#discussion_r519637546", "createdAt": "2020-11-09T08:44:35Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -1,307 +1,99 @@\n package com.sequenceiq.cloudbreak.cloud.azure;\n \n import static com.sequenceiq.common.api.type.ResourceType.AZURE_PRIVATE_DNS_ZONE;\n-import static com.sequenceiq.common.api.type.ResourceType.AZURE_VIRTUAL_NETWORK_LINK;\n \n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n \n-import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.dao.DataAccessException;\n import org.springframework.stereotype.Service;\n \n-import com.microsoft.azure.CloudException;\n-import com.microsoft.azure.PagedList;\n-import com.microsoft.azure.management.network.Network;\n-import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n-import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n-import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n-import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n-import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n-import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n-import com.sequenceiq.cloudbreak.common.json.Json;\n import com.sequenceiq.common.api.type.CommonStatus;\n-import com.sequenceiq.common.api.type.ResourceType;\n \n @Service\n public class AzureDnsZoneService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n \n-    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n-\n     private static final String DNS_ZONES = \"-dns-zones\";\n \n-    private static final String NETWORK_LINKS = \"-links\";\n-\n-    @Inject\n-    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n-\n-    @Inject\n-    private PersistenceRetriever resourcePersistenceRetriever;\n-\n-    @Inject\n-    private PersistenceNotifier persistenceNotifier;\n-\n     @Inject\n-    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+    private AzureResourceCreationHelperService azureResourceCreationHelperService;\n \n     @Inject\n     private AzureResourceIdProviderService azureResourceIdProviderService;\n \n-    @Inject\n-    private AzureUtils azureUtils;\n-\n-    @Value(\"${cb.arm.privateendpoint.services:}\")\n-    private List<String> privateEndpointServices;\n-\n-    public void getOrCreateDnsZones(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+    public void checkOrCreateDnsZones(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n             String resourceGroup, Map<String, String> tags) {\n \n         String networkId = networkView.getNetworkId();\n         String networkResourceGroup = networkView.getResourceGroupName();\n-        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n-\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = azureResourceCreationHelperService.getEnabledPrivateEndpointServices();\n         boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n         boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n-        String deploymentName = generateDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String deploymentName = azureResourceCreationHelperService.generateDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n         String dnsZoneDeploymentId = azureResourceIdProviderService.generateDeploymentId(azureClient.getCurrentSubscription().subscriptionId(),\n                 resourceGroup, deploymentName);\n \n         if (dnsZonesDeployed && networkLinksDeployed) {\n             LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n         } else if (!dnsZonesDeployed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzODUxNw==", "bodyText": "these 2 variables should be moved inside the if", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#discussion_r519638517", "createdAt": "2020-11-09T08:46:25Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkLinkService.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_VIRTUAL_NETWORK_LINK;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+\n+@Service\n+public class AzureNetworkLinkService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureNetworkLinkService.class);\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureResourceCreationHelperService azureResourceCreationHelperService;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    public String validateExistingNetworkLink(AzureClient azureClient, String networkId) {\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = azureResourceCreationHelperService.getEnabledPrivateEndpointServices();\n+        return azureClient.validateNetworkLinkExistenceForDnsZones(networkId, enabledPrivateEndpointServices);\n+    }\n+\n+    public void checkOrCreateNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = azureResourceCreationHelperService.getEnabledPrivateEndpointServices();\n+\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = azureResourceCreationHelperService.generateDeploymentName(enabledPrivateEndpointServices, \"-\" + networkId + NETWORK_LINKS);\n+        String networkLinkDeploymentId = azureResourceIdProviderService.generateDeploymentId(azureClient.getCurrentSubscription().subscriptionId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzOTEyOQ==", "bodyText": "could you move this near to it's usage?", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#discussion_r519639129", "createdAt": "2020-11-09T08:47:26Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkLinkService.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_VIRTUAL_NETWORK_LINK;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+\n+@Service\n+public class AzureNetworkLinkService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureNetworkLinkService.class);\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureResourceCreationHelperService azureResourceCreationHelperService;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    public String validateExistingNetworkLink(AzureClient azureClient, String networkId) {\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = azureResourceCreationHelperService.getEnabledPrivateEndpointServices();\n+        return azureClient.validateNetworkLinkExistenceForDnsZones(networkId, enabledPrivateEndpointServices);\n+    }\n+\n+    public void checkOrCreateNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = azureResourceCreationHelperService.getEnabledPrivateEndpointServices();\n+\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = azureResourceCreationHelperService.generateDeploymentName(enabledPrivateEndpointServices, \"-\" + networkId + NETWORK_LINKS);\n+        String networkLinkDeploymentId = azureResourceIdProviderService.generateDeploymentId(azureClient.getCurrentSubscription().subscriptionId(),\n+                resourceGroup, deploymentName);\n+\n+        if (!networkLinksDeployed) {\n+            LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+            String azureNetworkId = azureResourceCreationHelperService.getAzureNetwork(azureClient, networkId, networkResourceGroup).id();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MDQ2Nw==", "bodyText": "could you split this part into smaller methods?", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#discussion_r519640467", "createdAt": "2020-11-09T08:49:49Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkLinkService.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_VIRTUAL_NETWORK_LINK;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+\n+@Service\n+public class AzureNetworkLinkService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureNetworkLinkService.class);\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureResourceCreationHelperService azureResourceCreationHelperService;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    public String validateExistingNetworkLink(AzureClient azureClient, String networkId) {\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = azureResourceCreationHelperService.getEnabledPrivateEndpointServices();\n+        return azureClient.validateNetworkLinkExistenceForDnsZones(networkId, enabledPrivateEndpointServices);\n+    }\n+\n+    public void checkOrCreateNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = azureResourceCreationHelperService.getEnabledPrivateEndpointServices();\n+\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = azureResourceCreationHelperService.generateDeploymentName(enabledPrivateEndpointServices, \"-\" + networkId + NETWORK_LINKS);\n+        String networkLinkDeploymentId = azureResourceIdProviderService.generateDeploymentId(azureClient.getCurrentSubscription().subscriptionId(),\n+                resourceGroup, deploymentName);\n+\n+        if (!networkLinksDeployed) {\n+            LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+            String azureNetworkId = azureResourceCreationHelperService.getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MTg1NQ==", "bodyText": "you should consider a wrapper object for these parameters as there are already 7 of them", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#discussion_r519641855", "createdAt": "2020-11-09T08:52:11Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceCreationHelperService.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_PRIVATE_DNS_ZONE;\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_VIRTUAL_NETWORK_LINK;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.management.network.Network;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureResourceCreationHelperService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureResourceCreationHelperService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureUtils azureUtils;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void pollForCreation(AuthenticatedContext authenticatedContext, AzureClient azureClient, String resourceGroup, String deploymentName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NjA0OA==", "bodyText": "I think this class has a responsibility of doing at least 2 different things:\n\nresource persistence handling\ndeployment creation/polling etc\n\nthis means it could be splitted into 2 separate class", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#discussion_r519646048", "createdAt": "2020-11-09T08:59:16Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureResourceCreationHelperService.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_PRIVATE_DNS_ZONE;\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_VIRTUAL_NETWORK_LINK;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.management.network.Network;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureResourceCreationHelperService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzI0MA==", "bodyText": "instead of returning null please consider a different way, like using Optional", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#discussion_r519653240", "createdAt": "2020-11-09T09:11:12Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -739,8 +739,29 @@ public void deleteGenericResourceById(String databaseServerId) {\n         handleAuthException(() -> azure.genericResources().deleteById(databaseServerId));\n     }\n \n-    public PrivateZone getPrivateDnsZoneByResourceGroup(String resourceGroupName, String dnsZoneName) {\n-        return privatednsManager.privateZones().getByResourceGroup(resourceGroupName, dnsZoneName);\n+    public PagedList<PrivateZone> getPrivateDnsZoneList() {\n+        return privatednsManager.privateZones().list();\n+    }\n+\n+    public String validateNetworkLinkExistenceForDnsZones(String networkLinkId, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        PagedList<PrivateZone> privateDnsZoneList = getPrivateDnsZoneList();\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            Optional<PrivateZone> privateZoneWithNetworkLink = privateDnsZoneList.stream()\n+                    .filter(privateZone -> privateZone.name().equals(dnsZoneName))\n+                    .filter(privateZone -> privateZone.provisioningState().equals(SUCCEEDED))\n+                    .filter(privateZone -> Objects.nonNull(getNetworkLinkByPrivateDnsZone(privateZone.resourceGroupName(), dnsZoneName, networkLinkId)))\n+                    .findFirst();\n+            if (privateZoneWithNetworkLink.isPresent()) {\n+                PrivateZone privateZone = privateZoneWithNetworkLink.get();\n+                String validationMessage = String.format(\"Network link for the network %s already exists for Private DNS Zone %s in resource group %s. \"\n+                            + \"Please ensure that there is no existing network link and try again!\",\n+                    networkLinkId, dnsZoneName, privateZone.resourceGroupName());\n+                LOGGER.warn(validationMessage);\n+                return validationMessage;\n+            }\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzUwNQ==", "bodyText": "please avoid in the middle return", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#discussion_r519653505", "createdAt": "2020-11-09T09:11:37Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -739,8 +739,29 @@ public void deleteGenericResourceById(String databaseServerId) {\n         handleAuthException(() -> azure.genericResources().deleteById(databaseServerId));\n     }\n \n-    public PrivateZone getPrivateDnsZoneByResourceGroup(String resourceGroupName, String dnsZoneName) {\n-        return privatednsManager.privateZones().getByResourceGroup(resourceGroupName, dnsZoneName);\n+    public PagedList<PrivateZone> getPrivateDnsZoneList() {\n+        return privatednsManager.privateZones().list();\n+    }\n+\n+    public String validateNetworkLinkExistenceForDnsZones(String networkLinkId, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        PagedList<PrivateZone> privateDnsZoneList = getPrivateDnsZoneList();\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            Optional<PrivateZone> privateZoneWithNetworkLink = privateDnsZoneList.stream()\n+                    .filter(privateZone -> privateZone.name().equals(dnsZoneName))\n+                    .filter(privateZone -> privateZone.provisioningState().equals(SUCCEEDED))\n+                    .filter(privateZone -> Objects.nonNull(getNetworkLinkByPrivateDnsZone(privateZone.resourceGroupName(), dnsZoneName, networkLinkId)))\n+                    .findFirst();\n+            if (privateZoneWithNetworkLink.isPresent()) {\n+                PrivateZone privateZone = privateZoneWithNetworkLink.get();\n+                String validationMessage = String.format(\"Network link for the network %s already exists for Private DNS Zone %s in resource group %s. \"\n+                            + \"Please ensure that there is no existing network link and try again!\",\n+                    networkLinkId, dnsZoneName, privateZone.resourceGroupName());\n+                LOGGER.warn(validationMessage);\n+                return validationMessage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7e5910682b9006f265504e46123f909f8d9b2a8", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e7e5910682b9006f265504e46123f909f8d9b2a8", "committedDate": "2020-10-30T11:57:41Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}, "afterCommit": {"oid": "e4c9747db571916e9531a7bbe6fb195f28b837ea", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e4c9747db571916e9531a7bbe6fb195f28b837ea", "committedDate": "2020-11-09T18:12:32Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4c9747db571916e9531a7bbe6fb195f28b837ea", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e4c9747db571916e9531a7bbe6fb195f28b837ea", "committedDate": "2020-11-09T18:12:32Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}, "afterCommit": {"oid": "540b0ef82975e83384cf2b938c9bd2d0c5b718f6", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/540b0ef82975e83384cf2b938c9bd2d0c5b718f6", "committedDate": "2020-11-09T18:16:48Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f1b8a6594e9924d4637deb4825c2a091fdc29e0", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/1f1b8a6594e9924d4637deb4825c2a091fdc29e0", "committedDate": "2020-11-09T21:41:54Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "540b0ef82975e83384cf2b938c9bd2d0c5b718f6", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/540b0ef82975e83384cf2b938c9bd2d0c5b718f6", "committedDate": "2020-11-09T18:16:48Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}, "afterCommit": {"oid": "1f1b8a6594e9924d4637deb4825c2a091fdc29e0", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/1f1b8a6594e9924d4637deb4825c2a091fdc29e0", "committedDate": "2020-11-09T21:41:54Z", "message": "CB-9306 - Env service should create private DNS zones - various follow-ups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MDgxODYw", "url": "https://github.com/hortonworks/cloudbreak/pull/9274#pullrequestreview-527081860", "createdAt": "2020-11-10T10:53:44Z", "commit": {"oid": "1f1b8a6594e9924d4637deb4825c2a091fdc29e0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2045, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}