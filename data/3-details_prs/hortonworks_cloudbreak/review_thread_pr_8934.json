{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5OTE3NzY5", "number": 8934, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyNDozMFrOEg1huQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyNzozOFrOEg1mmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODY2ODczOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/connector/PlatformAccessConfigsTestDto.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyNDozMFrOHN1lxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTozNDo0NVrOHN4J1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3MTU1OQ==", "bodyText": "I think in this case we should simply not override the default cleanUp", "url": "https://github.com/hortonworks/cloudbreak/pull/8934#discussion_r484271559", "createdAt": "2020-09-07T08:24:30Z", "author": {"login": "Bajzathd"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/connector/PlatformAccessConfigsTestDto.java", "diffHunk": "@@ -72,7 +72,7 @@ public PlatformAccessConfigsTestDto withAvailabilityZone(String availabilityZone\n \n     @Override\n     public void cleanUp(TestContext context, CloudbreakClient cloudbreakClient) {\n-        LOGGER.debug(\"this entry point does not have any clean up operation\");\n+        LOGGER.warn(String.format(\"Cleanup WARN: 'cleanUp' is not implemented for TestDto: %s with name: %s\", this, getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d830d9d7a71df8a15e80993d6cacda2f109c6cd3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3ODk1Mg==", "bodyText": "So should we remove all the cleanUp' is not implemented Override from the project?", "url": "https://github.com/hortonworks/cloudbreak/pull/8934#discussion_r484278952", "createdAt": "2020-09-07T08:36:54Z", "author": {"login": "aszegedi"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/connector/PlatformAccessConfigsTestDto.java", "diffHunk": "@@ -72,7 +72,7 @@ public PlatformAccessConfigsTestDto withAvailabilityZone(String availabilityZone\n \n     @Override\n     public void cleanUp(TestContext context, CloudbreakClient cloudbreakClient) {\n-        LOGGER.debug(\"this entry point does not have any clean up operation\");\n+        LOGGER.warn(String.format(\"Cleanup WARN: 'cleanUp' is not implemented for TestDto: %s with name: %s\", this, getName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3MTU1OQ=="}, "originalCommit": {"oid": "d830d9d7a71df8a15e80993d6cacda2f109c6cd3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMzU1OA==", "bodyText": "I think yes, and move this message to the default implementation. This way we will have less code, and truly standardized cleanUp", "url": "https://github.com/hortonworks/cloudbreak/pull/8934#discussion_r484313558", "createdAt": "2020-09-07T09:34:45Z", "author": {"login": "Bajzathd"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/connector/PlatformAccessConfigsTestDto.java", "diffHunk": "@@ -72,7 +72,7 @@ public PlatformAccessConfigsTestDto withAvailabilityZone(String availabilityZone\n \n     @Override\n     public void cleanUp(TestContext context, CloudbreakClient cloudbreakClient) {\n-        LOGGER.debug(\"this entry point does not have any clean up operation\");\n+        LOGGER.warn(String.format(\"Cleanup WARN: 'cleanUp' is not implemented for TestDto: %s with name: %s\", this, getName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3MTU1OQ=="}, "originalCommit": {"oid": "d830d9d7a71df8a15e80993d6cacda2f109c6cd3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODY4MTIyOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/EnvironmentChildTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyNzozOFrOHN1tJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODozNTo0OVrOHN2ANQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3MzQ0NA==", "bodyText": "From the message we can not tell which env was listed - the parent or the child.\nI have also refactored this test case in my PR, see here: https://github.com/hortonworks/cloudbreak/pull/8923/files#diff-68f3ed9be95a1bffc91d2b7ec253c58c\nI think we should merge these somehow here", "url": "https://github.com/hortonworks/cloudbreak/pull/8934#discussion_r484273444", "createdAt": "2020-09-07T08:27:38Z", "author": {"login": "Bajzathd"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/EnvironmentChildTest.java", "diffHunk": "@@ -231,4 +238,21 @@ private boolean parentNameEquals(EnvironmentTestDto environment, SimpleEnvironme\n                                 .bodyContains(method)\n                                 .exactTimes(times));\n     }\n+\n+    private Assertion<EnvironmentTestDto, EnvironmentClient> checkEnvsAreNotListedByName(List<String> environmentNames) {\n+        return (testContext, environmentTestDto, environmentClient) -> {\n+            Collection<SimpleEnvironmentResponse> simpleEnvironmentV4Respons = environmentTestDto.getResponseSimpleEnvSet();\n+            if (isNull(simpleEnvironmentV4Respons)) {\n+                throw new TestFailException(\"Environment list response is missing.\");\n+            }\n+            List<String> listedEnvironmentNames = simpleEnvironmentV4Respons.stream()\n+                    .filter(response -> !response.getEnvironmentStatus().equals(EnvironmentStatus.ARCHIVED))\n+                    .map(EnvironmentBaseResponse::getName)\n+                    .collect(Collectors.toList());\n+            if (listedEnvironmentNames.stream().anyMatch(environmentNames::contains)) {\n+                throw new TestFailException(\"Environment is listed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d830d9d7a71df8a15e80993d6cacda2f109c6cd3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3ODMyNQ==", "bodyText": "I think we should merge your PR first, after that rebase this PR onto master with your changes...", "url": "https://github.com/hortonworks/cloudbreak/pull/8934#discussion_r484278325", "createdAt": "2020-09-07T08:35:49Z", "author": {"login": "aszegedi"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/EnvironmentChildTest.java", "diffHunk": "@@ -231,4 +238,21 @@ private boolean parentNameEquals(EnvironmentTestDto environment, SimpleEnvironme\n                                 .bodyContains(method)\n                                 .exactTimes(times));\n     }\n+\n+    private Assertion<EnvironmentTestDto, EnvironmentClient> checkEnvsAreNotListedByName(List<String> environmentNames) {\n+        return (testContext, environmentTestDto, environmentClient) -> {\n+            Collection<SimpleEnvironmentResponse> simpleEnvironmentV4Respons = environmentTestDto.getResponseSimpleEnvSet();\n+            if (isNull(simpleEnvironmentV4Respons)) {\n+                throw new TestFailException(\"Environment list response is missing.\");\n+            }\n+            List<String> listedEnvironmentNames = simpleEnvironmentV4Respons.stream()\n+                    .filter(response -> !response.getEnvironmentStatus().equals(EnvironmentStatus.ARCHIVED))\n+                    .map(EnvironmentBaseResponse::getName)\n+                    .collect(Collectors.toList());\n+            if (listedEnvironmentNames.stream().anyMatch(environmentNames::contains)) {\n+                throw new TestFailException(\"Environment is listed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3MzQ0NA=="}, "originalCommit": {"oid": "d830d9d7a71df8a15e80993d6cacda2f109c6cd3"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2347, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}