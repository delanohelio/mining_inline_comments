{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNTMxNTIw", "number": 7923, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo1NjoyMVrOD5ajmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1NTo0NlrOD5d8rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTMwNTIwOnYy", "diffSide": "RIGHT", "path": "flow/src/main/java/com/sequenceiq/flow/service/flowlog/FlowChainLogService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo1NjoyMVrOGQqoYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo1NjoyMVrOGQqoYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEyODg2NA==", "bodyText": "Can't rootFlowChain be null here?", "url": "https://github.com/hortonworks/cloudbreak/pull/7923#discussion_r420128864", "createdAt": "2020-05-05T13:56:21Z", "author": {"login": "lnardai"}, "path": "flow/src/main/java/com/sequenceiq/flow/service/flowlog/FlowChainLogService.java", "diffHunk": "@@ -40,50 +39,50 @@\n         return repository.findByFlowChainIdOrderByCreatedDesc(flowChainId);\n     }\n \n-    public Set<FlowChainLog> collectRelatedFlowChains(FlowChainLog flowChain) {\n+    public List<FlowChainLog> collectRelatedFlowChains(FlowChainLog flowChain) {\n         LOGGER.info(\"Finding out master flow chain based on chain id {}\", flowChain.getFlowChainId());\n-        FlowChainLog masterFlowChain = collectMasterFlowChain(flowChain);\n-        LOGGER.info(\"Collecting child flow chains based on master chain id {}\", masterFlowChain.getFlowChainId());\n-        Set<FlowChainLog> flowChainList = Sets.newHashSet(masterFlowChain);\n-        collectChildFlowChains(flowChainList, masterFlowChain);\n+        FlowChainLog rootFlowChain = collectRootFlowChain(flowChain);\n+        LOGGER.info(\"Collecting child flow chains based on master chain id {}\", rootFlowChain.getFlowChainId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9656f8562857dc5fbfe8508ad468ebd463e649c3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTg2MDk0OnYy", "diffSide": "RIGHT", "path": "flow/src/test/java/com/sequenceiq/flow/service/flowlog/FlowChainLogServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1NTo0NlrOGQwI2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1NTo0NlrOGQwI2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxOTA5OA==", "bodyText": "Nice one! Readable tests.", "url": "https://github.com/hortonworks/cloudbreak/pull/7923#discussion_r420219098", "createdAt": "2020-05-05T15:55:46Z", "author": {"login": "lnardai"}, "path": "flow/src/test/java/com/sequenceiq/flow/service/flowlog/FlowChainLogServiceTest.java", "diffHunk": "@@ -34,87 +26,107 @@\n \n     private static final String FLOWCHAIN_PARENT_SUFFIX = \"Parent\";\n \n+    private static final String NO_PARENT = null;\n+\n     @InjectMocks\n     private FlowChainLogService underTest;\n \n     @Mock\n     private FlowChainLogRepository flowLogRepository;\n \n     @Test\n-    public void testGetRelatedFlowChainIds() {\n-        String flowChainId = \"flowChainId\";\n-        String otherFlowChainId = \"otherFlowChainId\";\n-        String childFlowChainId = \"childFlowChainId\";\n-        String parentFlowChainId = \"parentFlowChainId\";\n-        when(flowLogRepository.findByParentFlowChainIdOrderByCreatedDesc(eq(parentFlowChainId)))\n-                .thenReturn(Lists.newArrayList(create(flowChainId), create(otherFlowChainId)));\n-        when(flowLogRepository.findByParentFlowChainIdOrderByCreatedDesc(eq(flowChainId))).thenReturn(Lists.newArrayList(create(childFlowChainId)));\n-        when(flowLogRepository.findByParentFlowChainIdOrderByCreatedDesc(eq(otherFlowChainId))).thenReturn(Lists.newArrayList());\n-        when(flowLogRepository.findByParentFlowChainIdOrderByCreatedDesc(eq(childFlowChainId))).thenReturn(Lists.newArrayList());\n-        when(flowLogRepository.findFirstByFlowChainIdOrderByCreatedDesc(eq(flowChainId + FLOWCHAIN_PARENT_SUFFIX)))\n-                .thenReturn(Optional.of(create(parentFlowChainId)));\n-        when(flowLogRepository.findFirstByFlowChainIdOrderByCreatedDesc(eq(parentFlowChainId + FLOWCHAIN_PARENT_SUFFIX))).thenReturn(Optional.empty());\n-\n-        Set<FlowChainLog> flowChains = underTest.collectRelatedFlowChains(create(flowChainId));\n-        List<String> flowChainIds = flowChains.stream().map(flowChainLog -> flowChainLog.getFlowChainId()).collect(Collectors.toList());\n-\n-        assertEquals(4, flowChainIds.size());\n-        assertTrue(flowChainIds.contains(flowChainId));\n-        assertTrue(flowChainIds.contains(childFlowChainId));\n-        assertTrue(flowChainIds.contains(parentFlowChainId));\n-\n-        verify(flowLogRepository, times(4)).findByParentFlowChainIdOrderByCreatedDesc(any());\n-        verify(flowLogRepository, times(2)).findFirstByFlowChainIdOrderByCreatedDesc(any());\n+    public void testFindAllFlowChainsInTree() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9656f8562857dc5fbfe8508ad468ebd463e649c3"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2512, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}