{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MzI0MDQw", "number": 7697, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo0NDo0MFrODtPX0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo0ODowNVrODtPc8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzY0MzY4OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/action/TerminationService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo0NDo0MFrOF-jVRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzoxMjo0MFrOF-zjKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzNDkxNg==", "bodyText": "is this save necessary since the stackUpdater also saves the stack? If we need to save it again, shouldn't we use the Stack that is returned from updateStackStatus instead? By my understanding, this stack should be detached at this point.", "url": "https://github.com/hortonworks/cloudbreak/pull/7697#discussion_r401134916", "createdAt": "2020-03-31T18:44:40Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/action/TerminationService.java", "diffHunk": "@@ -54,22 +54,22 @@\n     private KerberosMgmtV1Service kerberosMgmtV1Service;\n \n     public void finalizeTermination(Long stackId) {\n-        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n-        Date now = new Date();\n-        String terminatedName = stack.getName() + DELIMITER + now.getTime();\n+        long currentTimeMillis = clock.getCurrentTimeMillis();\n         try {\n             transactionService.required(() -> {\n+                Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+                String terminatedName = stack.getName() + DELIMITER + currentTimeMillis;\n                 stack.setName(terminatedName);\n-                stack.setTerminated(clock.getCurrentTimeMillis());\n+                stack.setTerminated(currentTimeMillis);\n                 terminateInstanceGroups(stack);\n                 terminateMetaDataInstances(stack);\n                 cleanupVault(stack);\n+                stackUpdater.updateStackStatus(stack, DetailedStackStatus.DELETE_COMPLETED, \"Stack was terminated successfully.\");\n                 stackService.save(stack);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d269131303b05fe2a5251eab2ebda80310f664"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwMDYxNg==", "bodyText": "you are right, I was thinking about it, but as it went into rc-2.19 I wanted to minimize the change. My issue is if updateStackStatus change and don't save the stack only saves a new StackStatus, then we don't save here. But yeah, the returned value should be saved.", "url": "https://github.com/hortonworks/cloudbreak/pull/7697#discussion_r401400616", "createdAt": "2020-04-01T07:12:40Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/action/TerminationService.java", "diffHunk": "@@ -54,22 +54,22 @@\n     private KerberosMgmtV1Service kerberosMgmtV1Service;\n \n     public void finalizeTermination(Long stackId) {\n-        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n-        Date now = new Date();\n-        String terminatedName = stack.getName() + DELIMITER + now.getTime();\n+        long currentTimeMillis = clock.getCurrentTimeMillis();\n         try {\n             transactionService.required(() -> {\n+                Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+                String terminatedName = stack.getName() + DELIMITER + currentTimeMillis;\n                 stack.setName(terminatedName);\n-                stack.setTerminated(clock.getCurrentTimeMillis());\n+                stack.setTerminated(currentTimeMillis);\n                 terminateInstanceGroups(stack);\n                 terminateMetaDataInstances(stack);\n                 cleanupVault(stack);\n+                stackUpdater.updateStackStatus(stack, DetailedStackStatus.DELETE_COMPLETED, \"Stack was terminated successfully.\");\n                 stackService.save(stack);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzNDkxNg=="}, "originalCommit": {"oid": "65d269131303b05fe2a5251eab2ebda80310f664"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzY1NjgzOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/action/TerminationService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo0ODowNVrOF-jdhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzoxMzo1NFrOF-zlhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzNzAyOA==", "bodyText": "nit: do we refer to freeipa stacks as \"cluster\" elsewhere? I think it would be clearer to refer to this as \"freeipa infrastructure\"\nstackId is still available as a method parameter if you want to continue logging it.", "url": "https://github.com/hortonworks/cloudbreak/pull/7697#discussion_r401137028", "createdAt": "2020-03-31T18:48:05Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/action/TerminationService.java", "diffHunk": "@@ -54,22 +54,22 @@\n     private KerberosMgmtV1Service kerberosMgmtV1Service;\n \n     public void finalizeTermination(Long stackId) {\n-        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n-        Date now = new Date();\n-        String terminatedName = stack.getName() + DELIMITER + now.getTime();\n+        long currentTimeMillis = clock.getCurrentTimeMillis();\n         try {\n             transactionService.required(() -> {\n+                Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+                String terminatedName = stack.getName() + DELIMITER + currentTimeMillis;\n                 stack.setName(terminatedName);\n-                stack.setTerminated(clock.getCurrentTimeMillis());\n+                stack.setTerminated(currentTimeMillis);\n                 terminateInstanceGroups(stack);\n                 terminateMetaDataInstances(stack);\n                 cleanupVault(stack);\n+                stackUpdater.updateStackStatus(stack, DetailedStackStatus.DELETE_COMPLETED, \"Stack was terminated successfully.\");\n                 stackService.save(stack);\n-                stackUpdater.updateStackStatus(stackId, DetailedStackStatus.DELETE_COMPLETED, \"Stack was terminated successfully.\");\n                 return null;\n             });\n-        } catch (TransactionService.TransactionExecutionException ex) {\n-            LOGGER.info(\"Failed to terminate cluster infrastructure. Stack id {}\", stack.getId());\n+        } catch (TransactionExecutionException ex) {\n+            LOGGER.info(\"Failed to terminate cluster infrastructure.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d269131303b05fe2a5251eab2ebda80310f664"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwMTIyMA==", "bodyText": "it's a copy-paste error. yeah I could have added it, but hopefully the logcontext already contains that information, so I didn't think much about deleting it", "url": "https://github.com/hortonworks/cloudbreak/pull/7697#discussion_r401401220", "createdAt": "2020-04-01T07:13:54Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/action/TerminationService.java", "diffHunk": "@@ -54,22 +54,22 @@\n     private KerberosMgmtV1Service kerberosMgmtV1Service;\n \n     public void finalizeTermination(Long stackId) {\n-        Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n-        Date now = new Date();\n-        String terminatedName = stack.getName() + DELIMITER + now.getTime();\n+        long currentTimeMillis = clock.getCurrentTimeMillis();\n         try {\n             transactionService.required(() -> {\n+                Stack stack = stackService.getByIdWithListsInTransaction(stackId);\n+                String terminatedName = stack.getName() + DELIMITER + currentTimeMillis;\n                 stack.setName(terminatedName);\n-                stack.setTerminated(clock.getCurrentTimeMillis());\n+                stack.setTerminated(currentTimeMillis);\n                 terminateInstanceGroups(stack);\n                 terminateMetaDataInstances(stack);\n                 cleanupVault(stack);\n+                stackUpdater.updateStackStatus(stack, DetailedStackStatus.DELETE_COMPLETED, \"Stack was terminated successfully.\");\n                 stackService.save(stack);\n-                stackUpdater.updateStackStatus(stackId, DetailedStackStatus.DELETE_COMPLETED, \"Stack was terminated successfully.\");\n                 return null;\n             });\n-        } catch (TransactionService.TransactionExecutionException ex) {\n-            LOGGER.info(\"Failed to terminate cluster infrastructure. Stack id {}\", stack.getId());\n+        } catch (TransactionExecutionException ex) {\n+            LOGGER.info(\"Failed to terminate cluster infrastructure.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzNzAyOA=="}, "originalCommit": {"oid": "65d269131303b05fe2a5251eab2ebda80310f664"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2609, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}