{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNDY0Mjc4", "number": 7610, "title": "CB-6113 Sync in Environment modul", "bodyText": "", "createdAt": "2020-03-18T14:19:26Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7610", "merged": true, "mergeCommit": {"oid": "5c5ba71a0ff9f74db8d78b7a24d5dcb9bd16de22"}, "closed": true, "closedAt": "2020-03-20T12:19:27Z", "author": {"login": "topolyai5"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPIYvygFqTM3NzU0MzgyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPeNmOgH2gAyMzkwNDY0Mjc4Ojc4ZGQyYzI1ZjE0YjRkN2MyOGFjMzkwNDU0Y2U5NTFiY2YwYmMwZWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NTQzODI4", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#pullrequestreview-377543828", "createdAt": "2020-03-19T09:21:13Z", "commit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToyMToxM1rOF4mBDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToyMToxM1rOF4mBDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NzQzNw==", "bodyText": "I guess the view is enough right ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#discussion_r394887437", "createdAt": "2020-03-19T09:21:13Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/repository/EnvironmentRepository.java", "diffHunk": "@@ -73,4 +73,8 @@\n             + \"WHERE pe.id = :parentEnvironmentId AND e.accountId = :accountId AND e.archived = false\")\n     List<Environment> findAllByAccountIdAndParentEnvIdAndArchivedIsFalse(@Param(\"accountId\") String accountId,\n             @Param(\"parentEnvironmentId\") Long parentEnvironmentId);\n+\n+    @CheckPermission(action = ResourceAction.READ)\n+    @Query(\"SELECT e FROM Environment e WHERE e.archived = false and e.status in (:statuses)\")\n+    List<Environment> findAllRunningAndStatusIn(@Param(\"statuses\") Collection<EnvironmentStatus> statuses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NTQ3MzY0", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#pullrequestreview-377547364", "createdAt": "2020-03-19T09:25:57Z", "commit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToyNTo1N1rOF4mLvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTo1NzozN1rOF4nUjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5MDE3Mg==", "bodyText": "you could move this before the if along with Line 76", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#discussion_r394890172", "createdAt": "2020-03-19T09:25:57Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentDeletionService.java", "diffHunk": "@@ -65,8 +70,10 @@ public Environment delete(Environment environment, String userCrn, boolean force\n         validateDeletion(environment);\n         LOGGER.debug(\"Deleting environment with name: {}\", environment.getName());\n         if (forced) {\n+            environmentJobService.unschedule(environment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5MTQxMA==", "bodyText": "typo: FreeIPA", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#discussion_r394891410", "createdAt": "2020-03-19T09:28:03Z", "author": {"login": "bergerdenes"}, "path": "environment/src/test/java/com/sequenceiq/environment/environment/sync/EnvironmentSyncServiceTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.environment.environment.sync;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import com.sequenceiq.environment.environment.EnvironmentStatus;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.service.freeipa.FreeIpaService;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.describe.DescribeFreeIpaResponse;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class EnvironmentSyncServiceTest {\n+\n+    private final FreeIpaService freeIpaService = mock(FreeIpaService.class);\n+\n+    private final EnvironmentSyncService underTest = new EnvironmentSyncService(freeIpaService);\n+\n+    @ParameterizedTest(name = \"{0}\")\n+    @MethodSource(\"getStatusByFreeipaParams\")\n+    void testGetStatusByFreeipa(String testName, DescribeFreeIpaResponse freeIpaResponse, EnvironmentStatus expected) {\n+        Environment environment = new Environment();\n+        environment.setResourceCrn(\"crn\");\n+\n+        when(freeIpaService.describe(environment.getResourceCrn())).thenReturn(Optional.of(freeIpaResponse));\n+\n+        EnvironmentStatus actual = underTest.getStatusByFreeipa(environment);\n+\n+        Assertions.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void testGetStatusByFreeipaWhenFreeipaAttachedButNotFound() {\n+        Environment environment = new Environment();\n+        environment.setResourceCrn(\"crn\");\n+        environment.setCreateFreeIpa(true);\n+\n+        when(freeIpaService.describe(environment.getResourceCrn())).thenReturn(Optional.empty());\n+\n+        EnvironmentStatus actual = underTest.getStatusByFreeipa(environment);\n+        Assertions.assertEquals(EnvironmentStatus.FREEIPA_DELETED_ON_PROVIDER_SIDE, actual);\n+    }\n+\n+    @Test\n+    void testGetStatusByFreeipaWhenFreeipaNotAttached() {\n+        Environment environment = new Environment();\n+        environment.setResourceCrn(\"crn\");\n+        environment.setCreateFreeIpa(false);\n+\n+        when(freeIpaService.describe(environment.getResourceCrn())).thenReturn(Optional.empty());\n+\n+        EnvironmentStatus actual = underTest.getStatusByFreeipa(environment);\n+        Assertions.assertEquals(EnvironmentStatus.AVAILABLE, actual);\n+    }\n+\n+    // @formatter:off\n+    // CHECKSTYLE:OFF\n+    static Object[][] getStatusByFreeipaParams() {\n+        return new Object[][]{\n+                // testCaseName                     freeipa status                                          expected env status\n+                {\"Freeiap is available\",            getFreeipaResponse(Status.AVAILABLE),                   EnvironmentStatus.AVAILABLE},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwMjI3OQ==", "bodyText": "should be INFO (or WARN?)", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#discussion_r394902279", "createdAt": "2020-03-19T09:46:42Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/sync/EnvironmentStatusCheckerJob.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.sequenceiq.environment.environment.sync;\n+\n+import java.util.Optional;\n+\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+import com.sequenceiq.cloudbreak.logger.MdcContext;\n+import com.sequenceiq.environment.environment.EnvironmentStatus;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.environment.service.EnvironmentStatusUpdateService;\n+import com.sequenceiq.flow.core.FlowLogService;\n+import com.sequenceiq.statuschecker.job.StatusCheckerJob;\n+\n+@Component\n+public class EnvironmentStatusCheckerJob extends StatusCheckerJob {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentStatusCheckerJob.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final FlowLogService flowLogService;\n+\n+    private final EnvironmentSyncService environmentSyncService;\n+\n+    private final EnvironmentStatusUpdateService environmentStatusUpdateService;\n+\n+    private final EnvironmentJobService environmentJobService;\n+\n+    public EnvironmentStatusCheckerJob(EnvironmentService environmentService, FlowLogService flowLogService,\n+            EnvironmentSyncService environmentSyncService, EnvironmentStatusUpdateService environmentStatusUpdateService,\n+            EnvironmentJobService environmentJobService) {\n+        this.environmentService = environmentService;\n+        this.flowLogService = flowLogService;\n+        this.environmentSyncService = environmentSyncService;\n+        this.environmentStatusUpdateService = environmentStatusUpdateService;\n+        this.environmentJobService = environmentJobService;\n+    }\n+\n+    @Override\n+    protected void executeInternal(JobExecutionContext context) throws JobExecutionException {\n+        Long envId = getEnvId();\n+        Optional<Environment> environmentOpt = environmentService.findEnvironmentById(envId);\n+        if (environmentOpt.isPresent()) {\n+            Environment environment = environmentOpt.get();\n+            prepareMdcContext(environment);\n+            if (flowLogService.isOtherFlowRunning(envId)) {\n+                LOGGER.debug(\"EnvironmentStatusCheckerJob cannot run, because flow is running for environment: {}\", environment.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNDgzNQ==", "bodyText": "LOGGER.info signature is wrong, if you want to pass a Throwable then the first parameter is a String so you must format it.", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#discussion_r394904835", "createdAt": "2020-03-19T09:51:07Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/sync/EnvironmentStatusCheckerJob.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.sequenceiq.environment.environment.sync;\n+\n+import java.util.Optional;\n+\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+import com.sequenceiq.cloudbreak.logger.MdcContext;\n+import com.sequenceiq.environment.environment.EnvironmentStatus;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.environment.service.EnvironmentStatusUpdateService;\n+import com.sequenceiq.flow.core.FlowLogService;\n+import com.sequenceiq.statuschecker.job.StatusCheckerJob;\n+\n+@Component\n+public class EnvironmentStatusCheckerJob extends StatusCheckerJob {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentStatusCheckerJob.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final FlowLogService flowLogService;\n+\n+    private final EnvironmentSyncService environmentSyncService;\n+\n+    private final EnvironmentStatusUpdateService environmentStatusUpdateService;\n+\n+    private final EnvironmentJobService environmentJobService;\n+\n+    public EnvironmentStatusCheckerJob(EnvironmentService environmentService, FlowLogService flowLogService,\n+            EnvironmentSyncService environmentSyncService, EnvironmentStatusUpdateService environmentStatusUpdateService,\n+            EnvironmentJobService environmentJobService) {\n+        this.environmentService = environmentService;\n+        this.flowLogService = flowLogService;\n+        this.environmentSyncService = environmentSyncService;\n+        this.environmentStatusUpdateService = environmentStatusUpdateService;\n+        this.environmentJobService = environmentJobService;\n+    }\n+\n+    @Override\n+    protected void executeInternal(JobExecutionContext context) throws JobExecutionException {\n+        Long envId = getEnvId();\n+        Optional<Environment> environmentOpt = environmentService.findEnvironmentById(envId);\n+        if (environmentOpt.isPresent()) {\n+            Environment environment = environmentOpt.get();\n+            prepareMdcContext(environment);\n+            if (flowLogService.isOtherFlowRunning(envId)) {\n+                LOGGER.debug(\"EnvironmentStatusCheckerJob cannot run, because flow is running for environment: {}\", environment.getName());\n+            } else {\n+                syncAnEnv(environment);\n+            }\n+            MDCBuilder.cleanupMdc();\n+        } else {\n+            environmentJobService.unschedule(envId);\n+            LOGGER.warn(\"EnvironmentStatusCheckerJob cannot run, because environment is not found with id: {}. This env is unscheduled now\", envId);\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    void syncAnEnv(Environment environment) {\n+        try {\n+            ThreadBasedUserCrnProvider.doAs(environment.getCreator(), () -> {\n+                EnvironmentStatus status = environmentSyncService.getStatusByFreeipa(environment);\n+                if (environment.getStatus() != status) {\n+                    if (!flowLogService.isOtherFlowRunning(environment.getId())) {\n+                        environmentStatusUpdateService.updateEnvironmentStatusAndNotify(environment, status, ResourceEvent.ENVIRONMENT_SYNC_FINISHED);\n+                    } else {\n+                        LOGGER.info(\"EnvironmentStatusCheckerJob wants to update the status but it's ignored because a flow started on: {}\",\n+                                environment.getName());\n+                    }\n+                } else {\n+                    LOGGER.debug(\"Environment status is the same ({}), the update is skipped\", status);\n+                }\n+            });\n+        } catch (Exception e) {\n+            LOGGER.info(\"Environment sync is failed for {}, error: {}\", environment.getName(), e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNTc1Ng==", "bodyText": "switch?", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#discussion_r394905756", "createdAt": "2020-03-19T09:52:38Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/sync/EnvironmentSyncService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sequenceiq.environment.environment.sync;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.environment.environment.EnvironmentStatus;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.service.freeipa.FreeIpaService;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.describe.DescribeFreeIpaResponse;\n+\n+@Component\n+public class EnvironmentSyncService {\n+\n+    private final FreeIpaService freeIpaService;\n+\n+    public EnvironmentSyncService(FreeIpaService freeIpaService) {\n+        this.freeIpaService = freeIpaService;\n+    }\n+\n+    public EnvironmentStatus getStatusByFreeipa(Environment environment) {\n+        Optional<DescribeFreeIpaResponse> freeIpaResponseOpt = freeIpaService.describe(environment.getResourceCrn());\n+        if (freeIpaResponseOpt.isPresent()) {\n+            DescribeFreeIpaResponse freeIpaResponse = freeIpaResponseOpt.get();\n+            if (freeIpaResponse.getStatus() == Status.STOPPED) {\n+                return EnvironmentStatus.ENV_STOPPED;\n+            } else if (freeIpaResponse.getStatus() == Status.DELETED_ON_PROVIDER_SIDE) {\n+                return EnvironmentStatus.FREEIPA_DELETED_ON_PROVIDER_SIDE;\n+            } else if (freeIpaResponse.getStatus() == Status.STOP_FAILED) {\n+                return EnvironmentStatus.STOP_FREEIPA_FAILED;\n+            } else if (freeIpaResponse.getStatus() == Status.START_FAILED) {\n+                return EnvironmentStatus.START_FREEIPA_FAILED;\n+            } else if (freeIpaResponse.getStatus() == Status.START_IN_PROGRESS) {\n+                return EnvironmentStatus.START_FREEIPA_STARTED;\n+            } else if (freeIpaResponse.getStatus() == Status.STOP_IN_PROGRESS) {\n+                return EnvironmentStatus.STOP_FREEIPA_STARTED;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNzcwNg==", "bodyText": "call this class' unschedule(Long) and move logging there", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#discussion_r394907706", "createdAt": "2020-03-19T09:55:41Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/sync/EnvironmentJobService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.environment.environment.sync;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.statuschecker.service.JobService;\n+\n+@Component\n+public class EnvironmentJobService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentJobService.class);\n+\n+    @Inject\n+    private AutoSyncConfig autoSyncConfig;\n+\n+    @Inject\n+    private JobService jobService;\n+\n+    public void deleteAll() {\n+        jobService.deleteAll();\n+    }\n+\n+    public void schedule(Environment environment) {\n+        if (autoSyncConfig.isEnabled()) {\n+            jobService.schedule(new EnvironmentJobAdapter(environment));\n+            LOGGER.info(\"{} is scheduled for auto sync\", environment.getName());\n+        }\n+    }\n+\n+    public void unschedule(Long envId) {\n+        jobService.unschedule(envId.toString());\n+    }\n+\n+    public void unschedule(Environment environment) {\n+        jobService.unschedule(environment.getId().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwODY3MA==", "bodyText": "please use constructor injection", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#discussion_r394908670", "createdAt": "2020-03-19T09:57:23Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/sync/EnvironmentJobService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.environment.environment.sync;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.statuschecker.service.JobService;\n+\n+@Component\n+public class EnvironmentJobService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentJobService.class);\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwODgxMg==", "bodyText": "please use constructor injection", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#discussion_r394908812", "createdAt": "2020-03-19T09:57:37Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/sync/EnvironmentJobInitializer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.sequenceiq.environment.environment.sync;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.statuschecker.model.JobInitializer;\n+\n+@Component\n+public class EnvironmentJobInitializer implements JobInitializer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentJobInitializer.class);\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ec4a1b2a2ec4e5c1115e37e993406259cb5bfb9b", "committedDate": "2020-03-18T14:18:27Z", "message": "CB-6113 Sync in Environment modul"}, "afterCommit": {"oid": "6736a1bd80cd7b5f16073fc6b91ed5cd803a26da", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6736a1bd80cd7b5f16073fc6b91ed5cd803a26da", "committedDate": "2020-03-19T13:24:12Z", "message": "CB-6113 Sync in Environment modul"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bf77b773f36f887406cb69ef2eaba281d1ec80f", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2bf77b773f36f887406cb69ef2eaba281d1ec80f", "committedDate": "2020-03-19T13:28:26Z", "message": "CB-6113 Sync in Environment modul"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6736a1bd80cd7b5f16073fc6b91ed5cd803a26da", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6736a1bd80cd7b5f16073fc6b91ed5cd803a26da", "committedDate": "2020-03-19T13:24:12Z", "message": "CB-6113 Sync in Environment modul"}, "afterCommit": {"oid": "2bf77b773f36f887406cb69ef2eaba281d1ec80f", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2bf77b773f36f887406cb69ef2eaba281d1ec80f", "committedDate": "2020-03-19T13:28:26Z", "message": "CB-6113 Sync in Environment modul"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzIwNDAy", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#pullrequestreview-377720402", "createdAt": "2020-03-19T13:32:10Z", "commit": {"oid": "2bf77b773f36f887406cb69ef2eaba281d1ec80f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzozMjoxMFrOF4ufSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzozMjoxMFrOF4ufSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNjI1MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#discussion_r395026250", "createdAt": "2020-03-19T13:32:10Z", "author": {"login": "bergerdenes"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentDeletionService.java", "diffHunk": "@@ -64,6 +69,7 @@ public Environment delete(Environment environment, String userCrn, boolean force\n         MDCBuilder.buildMdcContext(environment);\n         validateDeletion(environment);\n         LOGGER.debug(\"Deleting environment with name: {}\", environment.getName());\n+        environmentJobService.unschedule(environment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf77b773f36f887406cb69ef2eaba281d1ec80f"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzM2MTc5", "url": "https://github.com/hortonworks/cloudbreak/pull/7610#pullrequestreview-377736179", "createdAt": "2020-03-19T13:49:53Z", "commit": {"oid": "2bf77b773f36f887406cb69ef2eaba281d1ec80f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78dd2c25f14b4d7c28ac390454ce951bcf0bc0ef", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/78dd2c25f14b4d7c28ac390454ce951bcf0bc0ef", "committedDate": "2020-03-20T10:46:57Z", "message": "CB-6113 disable environment sync in IT"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2482, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}