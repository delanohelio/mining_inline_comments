{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MDg3OTQ5", "number": 9239, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNTo0ODoyMlrOEvm6xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowODoyMFrOEv1FqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzU2MTY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/StackCreatorService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNTo0ODoyMlrOHkrkrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNTo0ODoyMlrOHkrkrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIyNDY4NQ==", "bodyText": "I'm not sure about the blueprint version, because QE sometimes use the same blueprint for multiple runtime versions.", "url": "https://github.com/hortonworks/cloudbreak/pull/9239#discussion_r508224685", "createdAt": "2020-10-20T05:48:22Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/StackCreatorService.java", "diffHunk": "@@ -178,6 +182,7 @@ public StackV4Response createStack(User user, Workspace workspace, StackV4Reques\n                 determineBlueprint(stackRequest, workspace),\n                 LOGGER,\n                 \"Stack request converted to stack took {} ms for stack {}\", stackName);\n+            validateBlueprintVersion(blueprint, stackRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd940537e9aba638bc24d60154a0af5b2233c64c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTg2Nzk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/StackRuntimeVersionValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowNTowOFrOHlByrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowNTowOFrOHlByrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4ODcxNw==", "bodyText": "We shouldn't call the method param stackBlueprintVersion", "url": "https://github.com/hortonworks/cloudbreak/pull/9239#discussion_r508588717", "createdAt": "2020-10-20T15:05:08Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/StackRuntimeVersionValidator.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.sequenceiq.cloudbreak.controller.validation.stack;\n+\n+import static com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider.INTERNAL_ACTOR_CRN;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.StackV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.cluster.ClusterV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.cluster.cm.ClouderaManagerV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.cluster.repository.RepositoryV4Request;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.altus.EntitlementService;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.service.datalake.SdxClientService;\n+import com.sequenceiq.sdx.api.model.SdxClusterResponse;\n+\n+@Component\n+public class StackRuntimeVersionValidator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackRuntimeVersionValidator.class);\n+\n+    @Inject\n+    private SdxClientService sdxClientService;\n+\n+    @Inject\n+    private EntitlementService entitlementService;\n+\n+    public void validate(StackV4Request stackRequest) {\n+        if (isDifferentDataHubAndDataLakeVersionAllowed()) {\n+            LOGGER.debug(\"The Data Hub version validation has been turned off with entitlement.\");\n+        } else {\n+            LOGGER.debug(\"Validating Data Hub version.\");\n+            findStackVersion(stackRequest).ifPresent(stackRuntimeVersion -> {\n+                List<SdxClusterResponse> sdxClusters = sdxClientService.getByEnvironmentCrn(stackRequest.getEnvironmentCrn());\n+                sdxClusters.forEach(sdx -> validateStackVersion(stackRuntimeVersion, sdx.getRuntime()));\n+            });\n+        }\n+\n+    }\n+\n+    private Optional<String> findStackVersion(StackV4Request stackRequest) {\n+        return Optional.of(stackRequest)\n+                .map(StackV4Request::getCluster)\n+                .map(ClusterV4Request::getCm)\n+                .map(ClouderaManagerV4Request::getRepository)\n+                .map(RepositoryV4Request::getVersion);\n+    }\n+\n+    private void validateStackVersion(String stackBlueprintVersion, String sdxRuntimeVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b97c7cfc7c9f96f1dfb4469e7449aafdbe2d6202"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTg4MzI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/StackRuntimeVersionValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowODoyMFrOHlB8lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowODoyMFrOHlB8lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5MTI1Mw==", "bodyText": "I think we might need to check the image as well. In the case of pre-warm image, the request won't contain the repository info, but the image id. In this case, we should check the version on the image if this is available at this point.", "url": "https://github.com/hortonworks/cloudbreak/pull/9239#discussion_r508591253", "createdAt": "2020-10-20T15:08:20Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/StackRuntimeVersionValidator.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.sequenceiq.cloudbreak.controller.validation.stack;\n+\n+import static com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider.INTERNAL_ACTOR_CRN;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.StackV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.cluster.ClusterV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.cluster.cm.ClouderaManagerV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.cluster.repository.RepositoryV4Request;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.altus.EntitlementService;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.service.datalake.SdxClientService;\n+import com.sequenceiq.sdx.api.model.SdxClusterResponse;\n+\n+@Component\n+public class StackRuntimeVersionValidator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackRuntimeVersionValidator.class);\n+\n+    @Inject\n+    private SdxClientService sdxClientService;\n+\n+    @Inject\n+    private EntitlementService entitlementService;\n+\n+    public void validate(StackV4Request stackRequest) {\n+        if (isDifferentDataHubAndDataLakeVersionAllowed()) {\n+            LOGGER.debug(\"The Data Hub version validation has been turned off with entitlement.\");\n+        } else {\n+            LOGGER.debug(\"Validating Data Hub version.\");\n+            findStackVersion(stackRequest).ifPresent(stackRuntimeVersion -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b97c7cfc7c9f96f1dfb4469e7449aafdbe2d6202"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2010, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}