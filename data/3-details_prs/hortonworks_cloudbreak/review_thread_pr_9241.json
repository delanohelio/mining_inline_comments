{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MjU0MDkw", "number": 9241, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjowNzo0NFrOEwVBuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDo0MjozMVrOEwebEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTExNjA5OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjowNzo0NFrOHl0RFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjowNzo0NFrOHl0RFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQxNTcwMg==", "bodyText": "Lets add this comment block from the canonical freeipa client for reference\n\nA cookie string may contain multiple cookies, parse the cookie\nstring and return the last cookie in the string matching the\ncookie name or None if not found.\nmethod which iterates over what parse() returns looking for\nthe specific cookie.\nWhen cookie_name appears more than once the last instance is\nreturned rather than the first because the ordering sequence\nmakes the last instance the current value.", "url": "https://github.com/hortonworks/cloudbreak/pull/9241#discussion_r509415702", "createdAt": "2020-10-21T16:07:44Z", "author": {"login": "kmanamcheri"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java", "diffHunk": "@@ -231,7 +231,10 @@ private CookieAndStickyId connect(String user, String pass, String apiAddress, i\n                         response.getStatusLine().getStatusCode()));\n             }\n         }\n-        Cookie sessionCookie = cookieStore.getCookies().stream().filter(cookie -> \"ipa_session\".equalsIgnoreCase(cookie.getName())).findFirst().get();\n+        Cookie sessionCookie = cookieStore.getCookies().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0716e26c054669a70be981927927f1646544fc22"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjYzMDE4OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/CookieComparator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozNzo1NFrOHmEETQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDo0Mjo0NVrOHmEWIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3NDU3Mw==", "bodyText": "Don't you have to use it somewhere? Like when you are sorting above, you have to use this comparator, no?", "url": "https://github.com/hortonworks/cloudbreak/pull/9241#discussion_r509674573", "createdAt": "2020-10-21T20:37:54Z", "author": {"login": "kmanamcheri"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/CookieComparator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import java.util.Date;\n+\n+import org.apache.http.cookie.Cookie;\n+import org.apache.http.cookie.CookieIdentityComparator;\n+\n+// Sort preceidence:\n+//   1. Cookie name (backwards - doesn't matter)\n+//   2. Domain name (backwards - doesn't matter)\n+//   3. Cookie path (more specific path is listed first) per RFC-6265 section 5.4.2\n+//   4. Expiration (no expiratation is listed first, latest expiration is listed next)\n+public class CookieComparator implements Serializable, Comparator<Cookie> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865c9d05b03a675e0169b5fa3f17efcbd1c5d98d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3NzgxOA==", "bodyText": "The FreeIpaCookeieStore is already sorted:\n\n  \n    \n      cloudbreak/freeipa/src/main/java/com/sequenceiq/freeipa/util/FreeIpaCookieStore.java\n    \n    \n         Line 15\n      in\n      865c9d0\n    \n    \n    \n    \n\n        \n          \n           private final Set<Cookie> cookies = new TreeSet<>(new CookieComparator()); \n        \n    \n  \n\n\nprivate final Set<Cookie> cookies = new TreeSet<>(new CookieComparator());", "url": "https://github.com/hortonworks/cloudbreak/pull/9241#discussion_r509677818", "createdAt": "2020-10-21T20:41:21Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/CookieComparator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import java.util.Date;\n+\n+import org.apache.http.cookie.Cookie;\n+import org.apache.http.cookie.CookieIdentityComparator;\n+\n+// Sort preceidence:\n+//   1. Cookie name (backwards - doesn't matter)\n+//   2. Domain name (backwards - doesn't matter)\n+//   3. Cookie path (more specific path is listed first) per RFC-6265 section 5.4.2\n+//   4. Expiration (no expiratation is listed first, latest expiration is listed next)\n+public class CookieComparator implements Serializable, Comparator<Cookie> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3NDU3Mw=="}, "originalCommit": {"oid": "865c9d05b03a675e0169b5fa3f17efcbd1c5d98d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3OTEzOA==", "bodyText": "I see that this is already used in \n  \n    \n      cloudbreak/freeipa/src/main/java/com/sequenceiq/freeipa/util/FreeIpaCookieStore.java\n    \n    \n         Line 15\n      in\n      865c9d0\n    \n    \n    \n    \n\n        \n          \n           private final Set<Cookie> cookies = new TreeSet<>(new CookieComparator());", "url": "https://github.com/hortonworks/cloudbreak/pull/9241#discussion_r509679138", "createdAt": "2020-10-21T20:42:45Z", "author": {"login": "kmanamcheri"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/CookieComparator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import java.util.Date;\n+\n+import org.apache.http.cookie.Cookie;\n+import org.apache.http.cookie.CookieIdentityComparator;\n+\n+// Sort preceidence:\n+//   1. Cookie name (backwards - doesn't matter)\n+//   2. Domain name (backwards - doesn't matter)\n+//   3. Cookie path (more specific path is listed first) per RFC-6265 section 5.4.2\n+//   4. Expiration (no expiratation is listed first, latest expiration is listed next)\n+public class CookieComparator implements Serializable, Comparator<Cookie> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3NDU3Mw=="}, "originalCommit": {"oid": "865c9d05b03a675e0169b5fa3f17efcbd1c5d98d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjY1NTU0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/CookieComparator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDo0MjozMVrOHmEVRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDo0MjozMVrOHmEVRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3ODkxNg==", "bodyText": "nit: typo", "url": "https://github.com/hortonworks/cloudbreak/pull/9241#discussion_r509678916", "createdAt": "2020-10-21T20:42:31Z", "author": {"login": "kmanamcheri"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/util/CookieComparator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.sequenceiq.freeipa.util;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import java.util.Date;\n+\n+import org.apache.http.cookie.Cookie;\n+import org.apache.http.cookie.CookieIdentityComparator;\n+\n+// Sort preceidence:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "865c9d05b03a675e0169b5fa3f17efcbd1c5d98d"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2016, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}