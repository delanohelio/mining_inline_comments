{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTM4MjY3", "number": 7808, "title": "CB-6338 Refactor wait for instance states at WaitUtil", "bodyText": "@afarsang, @lnardai and @topolyai5 please review", "createdAt": "2020-04-15T19:10:00Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7808", "merged": true, "mergeCommit": {"oid": "25fe8ab4b50b59446cbac31f892fd13d05c1550b"}, "closed": true, "closedAt": "2020-04-30T11:16:01Z", "author": {"login": "aszegedi"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZdmSDgFqTM5NjM3NjczOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccrMEsAFqTQwMzQyMzk2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2Mzc2NzM5", "url": "https://github.com/hortonworks/cloudbreak/pull/7808#pullrequestreview-396376739", "createdAt": "2020-04-20T11:43:16Z", "commit": {"oid": "8ab7c65519457d83d3416c0f58d8389532ebaaca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MTQ3MTU0", "url": "https://github.com/hortonworks/cloudbreak/pull/7808#pullrequestreview-397147154", "createdAt": "2020-04-21T09:22:01Z", "commit": {"oid": "8ab7c65519457d83d3416c0f58d8389532ebaaca"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOToyMjowMVrOGI7w-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo1MzozNlrOGI9H9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAyMDk4NA==", "bodyText": "I don't really like the Idea that the return type of this method was changed to void.\nBreaks the flow in the testcase.", "url": "https://github.com/hortonworks/cloudbreak/pull/7808#discussion_r412020984", "createdAt": "2020-04-21T09:22:01Z", "author": {"login": "lnardai"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/e2e/distrox/DistroXImagesTests.java", "diffHunk": "@@ -96,7 +96,8 @@ public void testDistroXWithBaseImageCanBeCreatedSuccessfully(TestContext testCon\n                 .when(distroXTestClient.create(), key(distrox))\n                 .await(STACK_AVAILABLE)\n                 .then((tc, testDto, client) -> {\n-                    return waitUtil.waitForDistroxInstancesStatus(testDto, client, instancesHealthy);\n+                    waitUtil.waitForDistroxInstanceStatus(testDto.getResponse().getName(), tc, instancesHealthy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab7c65519457d83d3416c0f58d8389532ebaaca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAyNzk0OA==", "bodyText": "This method got even more complicated.\nThe status and reason reason field always set together, please refactor that to a separate method.\nAlso a lot of \"freeIpaResponse.getStatusReason() != null ?\", This could be incorporated to that method as a default value or it could be set by default.", "url": "https://github.com/hortonworks/cloudbreak/pull/7808#discussion_r412027948", "createdAt": "2020-04-21T09:31:27Z", "author": {"login": "lnardai"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/WaitUtil.java", "diffHunk": "@@ -321,27 +336,36 @@ private boolean checkFailedStatuses(EnvironmentStatus currentStatus) {\n             com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status desiredStatus, long pollingInterval) {\n         Map<String, String> errors = new HashMap<>();\n         WaitResult waitResult = WaitResult.SUCCESSFUL;\n+        String status = \"\";\n+        String reason = \"\";\n+        DescribeFreeIpaResponse freeIpaResponse;\n         for (int retryBecauseOfWrongStatusHandlingInCB = 0; retryBecauseOfWrongStatusHandlingInCB < 3; retryBecauseOfWrongStatusHandlingInCB++) {\n             waitResult = waitForStatuses(freeIPAClient, name, desiredStatus);\n         }\n         if (waitResult == WaitResult.FAILED) {\n-            StringBuilder builder = new StringBuilder(\"The stack has failed: \").append(System.lineSeparator());\n-            DescribeFreeIpaResponse freeIpaResponse = getFreeIPAResponse(freeIPAClient, name);\n-            if (freeIpaResponse != null && freeIpaResponse.getStatus() != null) {\n-                builder.append(\"statusReason: \").append(freeIpaResponse.getStatusReason());\n-            }\n+            StringBuilder builder = new StringBuilder(\"FreeIPA has failed: \").append(System.lineSeparator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab7c65519457d83d3416c0f58d8389532ebaaca"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA0MzI1NQ==", "bodyText": "By eliminating these methods the original ones got even more complex.", "url": "https://github.com/hortonworks/cloudbreak/pull/7808#discussion_r412043255", "createdAt": "2020-04-21T09:53:36Z", "author": {"login": "lnardai"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/util/wait/WaitUtil.java", "diffHunk": "@@ -379,136 +414,130 @@ private boolean checkFailedStatuses(EnvironmentStatus currentStatus) {\n             SdxClusterStatusResponse desiredStatus, long pollingInterval) {\n         Map<String, String> errors = new HashMap<>();\n         WaitResult waitResult = WaitResult.SUCCESSFUL;\n+        String status = \"\";\n+        String reason = \"\";\n+        SdxClusterResponse sdxResponse;\n         for (int retryBecauseOfWrongStatusHandlingInCB = 0; retryBecauseOfWrongStatusHandlingInCB < 3; retryBecauseOfWrongStatusHandlingInCB++) {\n             waitResult = waitForStatuses(sdxClient, name, desiredStatus);\n         }\n         if (waitResult == WaitResult.FAILED) {\n-            StringBuilder builder = new StringBuilder(\"The stack has failed: \").append(System.lineSeparator());\n-            SdxClusterResponse sdxResponse = getSDXClusterResponse(sdxClient, name);\n-            if (sdxResponse != null && sdxResponse.getStatus() != null) {\n-                builder.append(\"statusReason: \").append(sdxResponse.getStatusReason());\n-            }\n+            StringBuilder builder = new StringBuilder(\"SDX has failed: \").append(System.lineSeparator());\n+            sdxResponse = getSDXClusterResponse(sdxClient, name);\n+            status = sdxResponse.getStatus().name();\n+            reason = sdxResponse.getStatusReason() != null ? sdxResponse.getStatusReason()\n+                    : \"SDX Status Reason is not available\";\n+            builder.append(\"statusReason: \").append(reason);\n             LOGGER.error(builder.toString());\n-            throw new TestFailException(builder.toString());\n+            errors = Map.of(\"status\", status, \"reason\", reason);\n         } else if (waitResult == WaitResult.TIMEOUT) {\n-            SdxClusterResponse sdxResponse = getSDXClusterResponse(sdxClient, name);\n-            LOGGER.error(\"Timeout happened while waiting for {} status at {}, the current status is {}\", desiredStatus.name(), name,\n-                    sdxResponse.getStatus().name());\n-            throw new TestFailException(\"Timeout happened while waiting for \" + desiredStatus.name() + \" status at \" + name + \", the current status is \"\n-                    + sdxResponse.getStatus().name());\n+            sdxResponse = getSDXClusterResponse(sdxClient, name);\n+            status = sdxResponse.getStatus().name();\n+            reason = sdxResponse.getStatusReason() != null ? sdxResponse.getStatusReason()\n+                    : \"SDX Status Reason is not available\";\n+            LOGGER.error(\"Timeout happened while waiting for {} status at {}, the current status is {} with reason: {}\", desiredStatus.name(),\n+                    name, status, reason);\n+            errors = Map.of(\"status\", status, \"reason\", reason);\n         } else if (DELETED != desiredStatus) {\n-            SdxClusterResponse sdxResponse = getSDXClusterResponse(sdxClient, name);\n+            sdxResponse = getSDXClusterResponse(sdxClient, name);\n             if (sdxResponse != null) {\n-                errors = Map.of(\"status\", sdxResponse.getStatus().name());\n+                status = sdxResponse.getStatus().name();\n+                reason = sdxResponse.getStatusReason() != null ? sdxResponse.getStatusReason()\n+                        : \"SDX Status Reason is not available\";\n+                errors = Map.of(\"status\", status, \"reason\", reason);\n             }\n         }\n         return errors;\n     }\n \n-    public SdxTestDto waitForSdxInstanceStatus(SdxTestDto sdxTestDto, SdxClient sdxClient, String hostGroup, InstanceStatus desiredState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab7c65519457d83d3416c0f58d8389532ebaaca"}, "originalPosition": 236}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63e0396981a2e1e994bc04adf25b2bdaaf90f60b", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/63e0396981a2e1e994bc04adf25b2bdaaf90f60b", "committedDate": "2020-04-21T13:20:26Z", "message": "CB-6338 Refactor wait for instance states at WaitUtil"}, "afterCommit": {"oid": "972c14a32c7a4b77f04e44db39194a4d5af5b9be", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/972c14a32c7a4b77f04e44db39194a4d5af5b9be", "committedDate": "2020-04-21T14:28:57Z", "message": "CB-6338 Refactor wait for instance states at WaitUtil"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "972c14a32c7a4b77f04e44db39194a4d5af5b9be", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/972c14a32c7a4b77f04e44db39194a4d5af5b9be", "committedDate": "2020-04-21T14:28:57Z", "message": "CB-6338 Refactor wait for instance states at WaitUtil"}, "afterCommit": {"oid": "3af1b7dbc4752dc33738e4525c03d636fb62e1fa", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/3af1b7dbc4752dc33738e4525c03d636fb62e1fa", "committedDate": "2020-04-21T16:39:14Z", "message": "CB-6338 Refactor wait for instance states at WaitUtil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3cc714be63450cb983e402a3e3187d176afa896", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d3cc714be63450cb983e402a3e3187d176afa896", "committedDate": "2020-04-21T20:29:25Z", "message": "CB-6338 Refactor wait for instance states at WaitUtil"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3af1b7dbc4752dc33738e4525c03d636fb62e1fa", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/3af1b7dbc4752dc33738e4525c03d636fb62e1fa", "committedDate": "2020-04-21T16:39:14Z", "message": "CB-6338 Refactor wait for instance states at WaitUtil"}, "afterCommit": {"oid": "d3cc714be63450cb983e402a3e3187d176afa896", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d3cc714be63450cb983e402a3e3187d176afa896", "committedDate": "2020-04-21T20:29:25Z", "message": "CB-6338 Refactor wait for instance states at WaitUtil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b33ae06f5ed1366f788a90ded4648e2fb9443d99", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/b33ae06f5ed1366f788a90ded4648e2fb9443d99", "committedDate": "2020-04-30T09:25:40Z", "message": "CB-6338 Refactor wait for instance states at WaitUtil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85df03666a9a6d3eade3593d0a3b35236762cbd0", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/85df03666a9a6d3eade3593d0a3b35236762cbd0", "committedDate": "2020-04-30T09:25:59Z", "message": "Merge branch 'test-waitrefact' of github.com:hortonworks/cloudbreak into test-waitrefact"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDIzOTY4", "url": "https://github.com/hortonworks/cloudbreak/pull/7808#pullrequestreview-403423968", "createdAt": "2020-04-30T11:15:04Z", "commit": {"oid": "85df03666a9a6d3eade3593d0a3b35236762cbd0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2333, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}