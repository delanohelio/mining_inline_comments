{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzOTQxMjA4", "number": 9676, "title": "CB-10408 modify AwsSubnetIgwExplorer to mark subnet as public when default route table has internet gateway attached to it", "bodyText": "See detailed description in the commit message.", "createdAt": "2020-12-22T07:55:09Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9676", "merged": true, "mergeCommit": {"oid": "4ad5c5292d6ebdde770af0bf86fd3e340dc2e85a"}, "closed": true, "closedAt": "2020-12-22T11:29:36Z", "author": {"login": "biharitomi"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdomsMOABqjQxMzkyMjM3NTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdooXahgFqTU1Njk5Mjc5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "adae6ebfe5eacaa92682167140f86a8a2953d881", "author": {"user": {"login": "biharitomi", "name": "Tamas Bihari"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/adae6ebfe5eacaa92682167140f86a8a2953d881", "committedDate": "2020-12-21T16:46:26Z", "message": "CB-10408 modify AwsSubnetIgwExplorer to mark subnet as public when default route table has internet gateway attached to it"}, "afterCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253", "author": {"user": {"login": "biharitomi", "name": "Tamas Bihari"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7d83096e17dd848ee9a3148643830f86660d2253", "committedDate": "2020-12-22T08:58:28Z", "message": "CB-10408 modify AwsSubnetIgwExplorer to mark subnet as public when default route table has internet gateway attached to it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTYxMjc1", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#pullrequestreview-556961275", "createdAt": "2020-12-22T10:04:39Z", "commit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDowNDo0MFrOIJ1fRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDowNDo0MFrOIJ1fRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4NDQ1NA==", "bodyText": "duplicated", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#discussion_r547184454", "createdAt": "2020-12-22T10:04:40Z", "author": {"login": "bergerdenes"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorerTest.java", "diffHunk": "@@ -25,19 +29,21 @@\n \n     private static final String OPEN_CIDR_BLOCK = \"0.0.0.0/0\";\n \n+    private static final String INTERNAL_DESTINATION_CIDR_BLOCK = \"172.17.0.0/16\";\n+\n     private final AwsSubnetIgwExplorer awsSubnetIgwExplorer = new AwsSubnetIgwExplorer();\n \n     @Test\n     public void testWithNoRouteTable() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithValidIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID).withVpcId(VPC_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTYxOTMz", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#pullrequestreview-556961933", "createdAt": "2020-12-22T10:05:40Z", "commit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDowNTo0MFrOIJ1hMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDowNTo0MFrOIJ1hMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4NDk0NA==", "bodyText": "spelling: Route\nalso in the below test method names", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#discussion_r547184944", "createdAt": "2020-12-22T10:05:40Z", "author": {"login": "bergerdenes"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorerTest.java", "diffHunk": "@@ -83,54 +89,201 @@ public void testWithIgwButNoAssociation() {\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithAssociationButNoIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         RouteTableAssociation routeTableAssociation = new RouteTableAssociation();\n         routeTableAssociation.setSubnetId(SUBNET_ID);\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithNoAssociationAndNoIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         RouteTableAssociation routeTableAssociation = new RouteTableAssociation();\n         routeTableAssociation.setSubnetId(DIFFERENT_SUBNET_ID);\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithRouteButNoAssociations() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n+\n+        assertFalse(hasInternetGateway);\n+    }\n+\n+    @Test\n+    public void testWithMainRoutTableAssociationAndNoIgw() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTY1NjQ0", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#pullrequestreview-556965644", "createdAt": "2020-12-22T10:11:28Z", "commit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoxMToyOVrOIJ1sjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoxMToyOVrOIJ1sjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4Nzg1NA==", "bodyText": "missing case (could be invalid though):\nwhat if the gateway is there but is not pointing to an open CIDR block", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#discussion_r547187854", "createdAt": "2020-12-22T10:11:29Z", "author": {"login": "bergerdenes"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorerTest.java", "diffHunk": "@@ -83,54 +89,201 @@ public void testWithIgwButNoAssociation() {\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithAssociationButNoIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         RouteTableAssociation routeTableAssociation = new RouteTableAssociation();\n         routeTableAssociation.setSubnetId(SUBNET_ID);\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithNoAssociationAndNoIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         RouteTableAssociation routeTableAssociation = new RouteTableAssociation();\n         routeTableAssociation.setSubnetId(DIFFERENT_SUBNET_ID);\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithRouteButNoAssociations() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n+\n+        assertFalse(hasInternetGateway);\n+    }\n+\n+    @Test\n+    public void testWithMainRoutTableAssociationAndNoIgw() {\n+        DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n+        Route route = new Route()\n+                .withDestinationCidrBlock(INTERNAL_DESTINATION_CIDR_BLOCK);\n+        routeTable.setRoutes(List.of(route));\n+        RouteTableAssociation routeTableAssociation = new RouteTableAssociation()\n+                .withMain(Boolean.TRUE);\n+        routeTable.setAssociations(List.of(routeTableAssociation));\n+        describeRouteTablesResult.setRouteTables(List.of(routeTable));\n+\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n+    @Test\n+    public void testWithMainRoutTableAssociationAndIgw() {\n+        DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n+        Route route = new Route()\n+                .withGatewayId(GATEWAY_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTc1ODUz", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#pullrequestreview-556975853", "createdAt": "2020-12-22T10:27:22Z", "commit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTc2Njk3", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#pullrequestreview-556976697", "createdAt": "2020-12-22T10:28:41Z", "commit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoyODo0MVrOIJ2OVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoyODo0MVrOIJ2OVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5NjUwMg==", "bodyText": "are there possible to exist route table without the specified vpc? If yes, could you please add a log message or any error if not found with the specific vpc", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#discussion_r547196502", "createdAt": "2020-12-22T10:28:41Z", "author": {"login": "topolyai5"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorer.java", "diffHunk": "@@ -22,43 +23,48 @@\n \n     private static final String IGW_PREFIX = \"igw-\";\n \n-    public boolean hasInternetGatewayOfSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId) {\n-        Optional<RouteTable> routeTable = getRouteTableForSubnet(describeRouteTablesResult, subnetId);\n-        return hasInternetGateway(routeTable, subnetId);\n+    public boolean hasInternetGatewayOfSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId, String vpcId) {\n+        Set<RouteTable> routeTables = getRouteTableForSubnet(describeRouteTablesResult, subnetId, vpcId);\n+        return hasInternetGateway(routeTables, subnetId, vpcId);\n     }\n \n-    private Optional<RouteTable> getRouteTableForSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId) {\n+    private Set<RouteTable> getRouteTableForSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId, String vpcId) {\n         List<RouteTable> routeTables = describeRouteTablesResult.getRouteTables();\n-        Optional<RouteTable> routeTable = Optional.empty();\n+        Set<RouteTable> connectedRouteTables = new HashSet<>();\n         for (RouteTable rt : routeTables) {\n-            LOGGER.info(\"Searching the routeTable where routeTable is {} and the subnet is :{}\", rt, subnetId);\n-            for (RouteTableAssociation association : rt.getAssociations()) {\n-                LOGGER.info(\"Searching the association where association is {} and the subnet is :{}\", association, subnetId);\n-                if (subnetId.equalsIgnoreCase(association.getSubnetId())) {\n-                    LOGGER.info(\"Found the routeTable which is {} and the subnet is :{}\", rt, subnetId);\n-                    routeTable = Optional.ofNullable(rt);\n-                    break;\n+            if (rt.getVpcId().equalsIgnoreCase(vpcId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6da94ff97393b446a21a006bbe47aa3e0fe7fec0", "author": {"user": {"login": "biharitomi", "name": "Tamas Bihari"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6da94ff97393b446a21a006bbe47aa3e0fe7fec0", "committedDate": "2020-12-22T10:42:36Z", "message": "CB-10408 modify AwsSubnetIgwExplorer to mark subnet as public when default route table has internet gateway attached to it"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253", "author": {"user": {"login": "biharitomi", "name": "Tamas Bihari"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7d83096e17dd848ee9a3148643830f86660d2253", "committedDate": "2020-12-22T08:58:28Z", "message": "CB-10408 modify AwsSubnetIgwExplorer to mark subnet as public when default route table has internet gateway attached to it"}, "afterCommit": {"oid": "6da94ff97393b446a21a006bbe47aa3e0fe7fec0", "author": {"user": {"login": "biharitomi", "name": "Tamas Bihari"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6da94ff97393b446a21a006bbe47aa3e0fe7fec0", "committedDate": "2020-12-22T10:42:36Z", "message": "CB-10408 modify AwsSubnetIgwExplorer to mark subnet as public when default route table has internet gateway attached to it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTkyNzk0", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#pullrequestreview-556992794", "createdAt": "2020-12-22T10:55:59Z", "commit": {"oid": "6da94ff97393b446a21a006bbe47aa3e0fe7fec0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1906, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}