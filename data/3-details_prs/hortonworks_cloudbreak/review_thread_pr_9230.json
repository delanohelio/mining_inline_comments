{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NzA1ODEz", "number": 9230, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOToyODozNVrOEuZPNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNjo1OFrOEuf__Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDgzNDQ1OnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOToyODozNVrOHixBug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0MjoyOVrOHi06hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIxNjg5MA==", "bodyText": "what is the use of extending if you do not use \"parameters\" but \"properties\"?", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506216890", "createdAt": "2020-10-16T09:28:35Z", "author": {"login": "pdarvasi"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "diffHunk": "@@ -1,15 +1,18 @@\n package com.sequenceiq.cloudbreak.cloud.model;\n \n import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Objects;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.cloudbreak.cloud.model.generic.DynamicModel;\n import com.sequenceiq.cloudbreak.cloud.model.network.SubnetType;\n \n @JsonInclude(JsonInclude.Include.NON_NULL)\n @JsonIgnoreProperties(ignoreUnknown = true)\n-public class CloudSubnet implements Serializable {\n+public class CloudSubnet extends DynamicModel implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MDQ0Mg==", "bodyText": "The parameters are used, not the properties ... I started to add properties when I realized that there is the DynamicModel and that would be a better solution ...", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506280442", "createdAt": "2020-10-16T10:42:17Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "diffHunk": "@@ -1,15 +1,18 @@\n package com.sequenceiq.cloudbreak.cloud.model;\n \n import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Objects;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.cloudbreak.cloud.model.generic.DynamicModel;\n import com.sequenceiq.cloudbreak.cloud.model.network.SubnetType;\n \n @JsonInclude(JsonInclude.Include.NON_NULL)\n @JsonIgnoreProperties(ignoreUnknown = true)\n-public class CloudSubnet implements Serializable {\n+public class CloudSubnet extends DynamicModel implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIxNjg5MA=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MDU4Mg==", "bodyText": "So I delete properties, thanks!", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506280582", "createdAt": "2020-10-16T10:42:29Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "diffHunk": "@@ -1,15 +1,18 @@\n package com.sequenceiq.cloudbreak.cloud.model;\n \n import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Objects;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.cloudbreak.cloud.model.generic.DynamicModel;\n import com.sequenceiq.cloudbreak.cloud.model.network.SubnetType;\n \n @JsonInclude(JsonInclude.Include.NON_NULL)\n @JsonIgnoreProperties(ignoreUnknown = true)\n-public class CloudSubnet implements Serializable {\n+public class CloudSubnet extends DynamicModel implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIxNjg5MA=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDgzODI1OnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOToyOToyMFrOHixDyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOToyOToyMFrOHixDyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIxNzQxNw==", "bodyText": "this could be final", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506217417", "createdAt": "2020-10-16T09:29:20Z", "author": {"login": "pdarvasi"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "diffHunk": "@@ -27,6 +30,8 @@\n \n     private boolean igwAvailable;\n \n+    private Map<String, String> properties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDg2NzkwOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureCloudSubnetParametersService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTozNTo1MlrOHixW0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzoyNDo1N1rOHjJgVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMjI5MA==", "bodyText": "This \"Disabled\" value could be the value of the constant in this class, therefore eliminating 1 magic string", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506222290", "createdAt": "2020-10-16T09:35:52Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureCloudSubnetParametersService.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Service\n+public class AzureCloudSubnetParametersService {\n+\n+    public static final String PRIVATE_ENDPOINT_NETWORK_POLICIES = \"privateEndpointNetworkPolicies\";\n+\n+    private static final String ENABLED = \"enabled\";\n+\n+    private static final String DISABLED = \"disabled\";\n+\n+    public void addPrivateEndpointNetworkPolicies(CloudSubnet cloudSubnet, String state) {\n+        cloudSubnet.putParameter(PRIVATE_ENDPOINT_NETWORK_POLICIES, \"Disabled\".equalsIgnoreCase(state) ? DISABLED : ENABLED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MTM5Nw==", "bodyText": "I wanted to decouple what Azure sends back from our internal representation, that's why I did not merge the two.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506281397", "createdAt": "2020-10-16T10:43:30Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureCloudSubnetParametersService.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Service\n+public class AzureCloudSubnetParametersService {\n+\n+    public static final String PRIVATE_ENDPOINT_NETWORK_POLICIES = \"privateEndpointNetworkPolicies\";\n+\n+    private static final String ENABLED = \"enabled\";\n+\n+    private static final String DISABLED = \"disabled\";\n+\n+    public void addPrivateEndpointNetworkPolicies(CloudSubnet cloudSubnet, String state) {\n+        cloudSubnet.putParameter(PRIVATE_ENDPOINT_NETWORK_POLICIES, \"Disabled\".equalsIgnoreCase(state) ? DISABLED : ENABLED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMjI5MA=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MTgyNA==", "bodyText": "I could add it as another constant to make it clear that this is the string we expect from Azure.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506281824", "createdAt": "2020-10-16T10:44:07Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureCloudSubnetParametersService.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Service\n+public class AzureCloudSubnetParametersService {\n+\n+    public static final String PRIVATE_ENDPOINT_NETWORK_POLICIES = \"privateEndpointNetworkPolicies\";\n+\n+    private static final String ENABLED = \"enabled\";\n+\n+    private static final String DISABLED = \"disabled\";\n+\n+    public void addPrivateEndpointNetworkPolicies(CloudSubnet cloudSubnet, String state) {\n+        cloudSubnet.putParameter(PRIVATE_ENDPOINT_NETWORK_POLICIES, \"Disabled\".equalsIgnoreCase(state) ? DISABLED : ENABLED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMjI5MA=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2NjY3MQ==", "bodyText": "I am saying that the internal representation can be the same as the Azure value, it has no disadvantage in this case", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506566671", "createdAt": "2020-10-16T15:52:50Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureCloudSubnetParametersService.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Service\n+public class AzureCloudSubnetParametersService {\n+\n+    public static final String PRIVATE_ENDPOINT_NETWORK_POLICIES = \"privateEndpointNetworkPolicies\";\n+\n+    private static final String ENABLED = \"enabled\";\n+\n+    private static final String DISABLED = \"disabled\";\n+\n+    public void addPrivateEndpointNetworkPolicies(CloudSubnet cloudSubnet, String state) {\n+        cloudSubnet.putParameter(PRIVATE_ENDPOINT_NETWORK_POLICIES, \"Disabled\".equalsIgnoreCase(state) ? DISABLED : ENABLED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMjI5MA=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxNzk0MQ==", "bodyText": "Only thing that it is persisted in env service. If azure representation changes then it would be enough to decouple internal representation from the azure one but doing it now does not do any harm in my opinion, it helps future devs.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506617941", "createdAt": "2020-10-16T17:24:57Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureCloudSubnetParametersService.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.util.Optional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Service\n+public class AzureCloudSubnetParametersService {\n+\n+    public static final String PRIVATE_ENDPOINT_NETWORK_POLICIES = \"privateEndpointNetworkPolicies\";\n+\n+    private static final String ENABLED = \"enabled\";\n+\n+    private static final String DISABLED = \"disabled\";\n+\n+    public void addPrivateEndpointNetworkPolicies(CloudSubnet cloudSubnet, String state) {\n+        cloudSubnet.putParameter(PRIVATE_ENDPOINT_NETWORK_POLICIES, \"Disabled\".equalsIgnoreCase(state) ? DISABLED : ENABLED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMjI5MA=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDkwMTQ4OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0MTozN1rOHixt1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTozNjoxMlrOHjNgRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyODE4Mw==", "bodyText": "an additional log line would be nice", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506228183", "createdAt": "2020-10-16T09:41:37Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "diffHunk": "@@ -137,7 +140,9 @@ private void addToResultIfRegionsAreMatch(Region region, Map<String, Set<CloudNe\n     private CloudNetwork convertToCloudNetwork(Network network) {\n         Set<CloudSubnet> subnets = new HashSet<>();\n         for (Entry<String, Subnet> subnet : network.subnets().entrySet()) {\n-            subnets.add(new CloudSubnet(subnet.getKey(), subnet.getKey(), null, subnet.getValue().addressPrefix()));\n+            CloudSubnet cloudSubnet = new CloudSubnet(subnet.getKey(), subnet.getKey(), null, subnet.getValue().addressPrefix());\n+            azureCloudSubnetParametersService.addPrivateEndpointNetworkPolicies(cloudSubnet, subnet.getValue().inner().privateEndpointNetworkPolicies());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4MzQ2MA==", "bodyText": "Added a line that logs CloudSubnet after it was filled with data.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506683460", "createdAt": "2020-10-16T19:36:12Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "diffHunk": "@@ -137,7 +140,9 @@ private void addToResultIfRegionsAreMatch(Region region, Map<String, Set<CloudNe\n     private CloudNetwork convertToCloudNetwork(Network network) {\n         Set<CloudSubnet> subnets = new HashSet<>();\n         for (Entry<String, Subnet> subnet : network.subnets().entrySet()) {\n-            subnets.add(new CloudSubnet(subnet.getKey(), subnet.getKey(), null, subnet.getValue().addressPrefix()));\n+            CloudSubnet cloudSubnet = new CloudSubnet(subnet.getKey(), subnet.getKey(), null, subnet.getValue().addressPrefix());\n+            azureCloudSubnetParametersService.addPrivateEndpointNetworkPolicies(cloudSubnet, subnet.getValue().inner().privateEndpointNetworkPolicies());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyODE4Mw=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDkxMjM2OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0Mzo0NFrOHix1hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoyNzozN1rOHi57vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzMDE1MQ==", "bodyText": "do we want to use this ever?", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506230151", "createdAt": "2020-10-16T09:43:44Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -423,9 +423,34 @@ public void deleteImages(AzureClient azureClient, Collection<String> imageIds) {\n         }\n     }\n \n+    @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n+    public void deleteGenericResources(AzureClient azureClient, Collection<String> genericResourceIds) {\n+        LOGGER.info(\"Delete generic resources: {}\", genericResourceIds);\n+        List<Completable> deleteCompletables = new ArrayList<>();\n+        List<String> failedToDeleteGenericResources = new ArrayList<>();\n+        for (String resourceId : genericResourceIds) {\n+            deleteCompletables.add(azureClient.deleteGenericResourceByIdAsync(resourceId)\n+                    .doOnError(throwable -> {\n+                        LOGGER.error(\"Error happened on azure during generic delete: {}\", resourceId, throwable);\n+                        failedToDeleteGenericResources.add(resourceId);\n+                    })\n+                    .subscribeOn(Schedulers.io()));\n+        }\n+        Completable.mergeDelayError(deleteCompletables).await();\n+        if (!failedToDeleteGenericResources.isEmpty()) {\n+            LOGGER.error(\"Can't delete every resource: {}\", failedToDeleteGenericResources);\n+            throw new CloudbreakServiceException(\"Can't delete every generic resource: \" + failedToDeleteGenericResources);\n+        }\n+    }\n+\n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n     public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n-        return handleDeleteErrors(azureClient::deleteDatabaseServer, \"DatabaseServer\", databaseServerId, cancelException);\n+        return handleDeleteErrors(azureClient::deleteGenericResourceById, \"DatabaseServer\", databaseServerId, cancelException);\n+    }\n+\n+    @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n+    public Optional<String> deletePrivateDnsZone(AzureClient azureClient, String privateDnsZoneId, boolean cancelException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MjgxNA==", "bodyText": "You are right, it is better to bury it well.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506362814", "createdAt": "2020-10-16T12:27:37Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -423,9 +423,34 @@ public void deleteImages(AzureClient azureClient, Collection<String> imageIds) {\n         }\n     }\n \n+    @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n+    public void deleteGenericResources(AzureClient azureClient, Collection<String> genericResourceIds) {\n+        LOGGER.info(\"Delete generic resources: {}\", genericResourceIds);\n+        List<Completable> deleteCompletables = new ArrayList<>();\n+        List<String> failedToDeleteGenericResources = new ArrayList<>();\n+        for (String resourceId : genericResourceIds) {\n+            deleteCompletables.add(azureClient.deleteGenericResourceByIdAsync(resourceId)\n+                    .doOnError(throwable -> {\n+                        LOGGER.error(\"Error happened on azure during generic delete: {}\", resourceId, throwable);\n+                        failedToDeleteGenericResources.add(resourceId);\n+                    })\n+                    .subscribeOn(Schedulers.io()));\n+        }\n+        Completable.mergeDelayError(deleteCompletables).await();\n+        if (!failedToDeleteGenericResources.isEmpty()) {\n+            LOGGER.error(\"Can't delete every resource: {}\", failedToDeleteGenericResources);\n+            throw new CloudbreakServiceException(\"Can't delete every generic resource: \" + failedToDeleteGenericResources);\n+        }\n+    }\n+\n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n     public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n-        return handleDeleteErrors(azureClient::deleteDatabaseServer, \"DatabaseServer\", databaseServerId, cancelException);\n+        return handleDeleteErrors(azureClient::deleteGenericResourceById, \"DatabaseServer\", databaseServerId, cancelException);\n+    }\n+\n+    @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n+    public Optional<String> deletePrivateDnsZone(AzureClient azureClient, String privateDnsZoneId, boolean cancelException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzMDE1MQ=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDk5NDc0OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1ODo0MFrOHiyroA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1ODo0MFrOHiyroA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0NDAwMA==", "bodyText": "does this delete dns zone groups, too?", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506244000", "createdAt": "2020-10-16T09:58:40Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -150,24 +155,34 @@\n                 .build(), ResourceStatus.DELETED));\n     }\n \n-    private List<CloudResourceStatus> deleteDatabaseServer(List<CloudResource> resources, CloudContext cloudContext, boolean force,\n+    private List<CloudResourceStatus> deleteResources(List<CloudResource> resources, CloudContext cloudContext, boolean force,\n             AzureClient client, PersistenceNotifier persistenceNotifier) {\n-        LOGGER.debug(\"Deleting database server\");\n-        Optional<CloudResource> dbServerResourceOptional = resources.stream().filter(r -> AZURE_DATABASE.equals(r.getType())).findFirst();\n-        if (dbServerResourceOptional.isEmpty()) {\n-            LOGGER.warn(\"Azure database id not found in database, deleting nothing\");\n-            return List.of();\n-        }\n-        String databaseServerId = dbServerResourceOptional.get().getReference();\n-        Optional<String> errorMessage = azureUtils.deleteDatabaseServer(client, databaseServerId, force);\n-        if (errorMessage.isEmpty()) {\n-            deleteResources(resources, cloudContext, persistenceNotifier);\n-        }\n \n-        return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n+        // TODO simplify after final form of template is reached\n+\n+        List<CloudResource> azureGenericResources = findResources(resources, List.of(AZURE_PRIVATE_ENDPOINT));\n+        LOGGER.debug(\"Deleting dns zone groups and azure private endpoints {}\", azureGenericResources);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTAzNjEyOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/subnet/selector/AzureSubnetSelectorService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowNDozOVrOHizHgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowNDozOVrOHizHgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MTEzNw==", "bodyText": "maybe it is worth adding: ...because of the network policy being enabled", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506251137", "createdAt": "2020-10-16T10:04:39Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/subnet/selector/AzureSubnetSelectorService.java", "diffHunk": "@@ -36,4 +44,18 @@ public SubnetSelectionResult select(Collection<CloudSubnet> subnetMetas, SubnetS\n         }\n         return Optional.empty();\n     }\n+\n+    public SubnetSelectionResult selectForPrivateEndpoint(Collection<CloudSubnet> subnetMetas, boolean existingNetwork) {\n+        List<CloudSubnet> suitableCloudSubnet;\n+        if (existingNetwork) {\n+            suitableCloudSubnet = subnetMetas.stream()\n+                    .filter(sn -> azureCloudSubnetParametersService.isPrivateEndpointNetworkPoliciesDisabled(sn))\n+                    .collect(Collectors.toList());\n+        } else {\n+            suitableCloudSubnet = new ArrayList<>(subnetMetas);\n+        }\n+        return suitableCloudSubnet.isEmpty() ?\n+                new SubnetSelectionResult(\"No suitable subnets found for placing a private endpoint\") :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA0NjQ5OnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowNjo1NlrOHizN8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowNjo1NlrOHizN8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1Mjc4Nw==", "bodyText": "pls add new field to equals", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506252787", "createdAt": "2020-10-16T10:06:56Z", "author": {"login": "pdarvasi"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "diffHunk": "@@ -1,15 +1,18 @@\n package com.sequenceiq.cloudbreak.cloud.model;\n \n import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Objects;\n \n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.sequenceiq.cloudbreak.cloud.model.generic.DynamicModel;\n import com.sequenceiq.cloudbreak.cloud.model.network.SubnetType;\n \n @JsonInclude(JsonInclude.Include.NON_NULL)\n @JsonIgnoreProperties(ignoreUnknown = true)\n-public class CloudSubnet implements Serializable {\n+public class CloudSubnet extends DynamicModel implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA1NzQ4OnYy", "diffSide": "RIGHT", "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpResourceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowOTo0M1rOHizUzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo0MDo1NFrOHi6feQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NDU0Mg==", "bodyText": "does --> is", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506254542", "createdAt": "2020-10-16T10:09:43Z", "author": {"login": "pdarvasi"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpResourceConnector.java", "diffHunk": "@@ -60,8 +60,8 @@ public String getStackTemplate() throws TemplatingDoesNotSupportedException {\n     }\n \n     @Override\n-    public String getDBStackTemplate() {\n-        return  \"\";\n+    public String getDBStackTemplate() throws TemplatingDoesNotSupportedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3MTk2MQ==", "bodyText": "renamed to TemplatingNotSupportedException", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506371961", "createdAt": "2020-10-16T12:40:54Z", "author": {"login": "gergopapi2"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpResourceConnector.java", "diffHunk": "@@ -60,8 +60,8 @@ public String getStackTemplate() throws TemplatingDoesNotSupportedException {\n     }\n \n     @Override\n-    public String getDBStackTemplate() {\n-        return  \"\";\n+    public String getDBStackTemplate() throws TemplatingDoesNotSupportedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NDU0Mg=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA2MTg4OnYy", "diffSide": "RIGHT", "path": "cloud-openstack/src/main/java/com/sequenceiq/cloudbreak/cloud/openstack/heat/OpenStackHeatNetworkConnector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoxMDo1MVrOHizXig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo0MzowNlrOHi6lbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NTI0Mg==", "bodyText": "we have UnsupportedOperationException, too", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506255242", "createdAt": "2020-10-16T10:10:51Z", "author": {"login": "pdarvasi"}, "path": "cloud-openstack/src/main/java/com/sequenceiq/cloudbreak/cloud/openstack/heat/OpenStackHeatNetworkConnector.java", "diffHunk": "@@ -52,6 +52,11 @@ public void createProviderSpecificNetworkResources(NetworkResourcesCreationReque\n         throw new OpenStackResourceException(\"CDP does not support Openstack.\");\n     }\n \n+    @Override\n+    public SubnetSelectionResult chooseSubnetsForPrivateEndpoint(Collection<CloudSubnet> subnetMetas, boolean existingNetwork) {\n+        throw new OpenStackResourceException(\"CDP does not support Openstack.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3MzQ4Ng==", "bodyText": "Yes, but since other methods do use that exception, I do not want to change the others.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506373486", "createdAt": "2020-10-16T12:43:06Z", "author": {"login": "gergopapi2"}, "path": "cloud-openstack/src/main/java/com/sequenceiq/cloudbreak/cloud/openstack/heat/OpenStackHeatNetworkConnector.java", "diffHunk": "@@ -52,6 +52,11 @@ public void createProviderSpecificNetworkResources(NetworkResourcesCreationReque\n         throw new OpenStackResourceException(\"CDP does not support Openstack.\");\n     }\n \n+    @Override\n+    public SubnetSelectionResult chooseSubnetsForPrivateEndpoint(Collection<CloudSubnet> subnetMetas, boolean existingNetwork) {\n+        throw new OpenStackResourceException(\"CDP does not support Openstack.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NTI0Mg=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA2NTYxOnYy", "diffSide": "RIGHT", "path": "common-model/src/main/java/com/sequenceiq/common/model/EndpointType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoxMTo1MlrOHizZ7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoxOTo1N1rOHjOptw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NTg1Mw==", "bodyText": "shouldn't we map this to AWS private endpoints, too?", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506255853", "createdAt": "2020-10-16T10:11:52Z", "author": {"login": "pdarvasi"}, "path": "common-model/src/main/java/com/sequenceiq/common/model/EndpointType.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.sequenceiq.common.model;\n+\n+public enum EndpointType {\n+    /*\n+    AWS:    do not use private endpoints\n+    AZURE:  invalid\n+     */\n+    NONE,\n+\n+    /*\n+    AWS:    use private endpoints\n+    AZURE:  use service endpoints\n+     */\n+    USE_SERVICE_ENDPOINT,\n+\n+    /*\n+    AWS:    invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMjI2Mw==", "bodyText": "I would not do it within the scope of this PR, I think this needs more thinking, together with validation for ServiceEndpointCreation. I will disable validation for ServiceEndpointCreation as well.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506702263", "createdAt": "2020-10-16T20:19:57Z", "author": {"login": "gergopapi2"}, "path": "common-model/src/main/java/com/sequenceiq/common/model/EndpointType.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.sequenceiq.common.model;\n+\n+public enum EndpointType {\n+    /*\n+    AWS:    do not use private endpoints\n+    AZURE:  invalid\n+     */\n+    NONE,\n+\n+    /*\n+    AWS:    use private endpoints\n+    AZURE:  use service endpoints\n+     */\n+    USE_SERVICE_ENDPOINT,\n+\n+    /*\n+    AWS:    invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NTg1Mw=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTExMjMyOnYy", "diffSide": "RIGHT", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/SubnetChooserService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoyMjozMFrOHiz4lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoyNDo1N1rOHjOyFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2MzcwMA==", "bodyText": "pls. add a log line", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506263700", "createdAt": "2020-10-16T10:22:30Z", "author": {"login": "pdarvasi"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/SubnetChooserService.java", "diffHunk": "@@ -40,4 +41,10 @@\n         }\n         return subnetSelectionResult.getResult();\n     }\n+\n+    public List<CloudSubnet> chooseSubnetForPrivateEndpoint(Collection<CloudSubnet> subnetMetas, DBStack dbStack, boolean existingNetwork) {\n+        NetworkConnector networkConnector = cloudPlatformConnectors.get(new CloudPlatformVariant(dbStack.getCloudPlatform(), dbStack.getPlatformVariant()))\n+                .networkConnector();\n+        return networkConnector.chooseSubnetsForPrivateEndpoint(subnetMetas, existingNetwork).getResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwNDQwNg==", "bodyText": "Added a log line that lists all subnets suitable for private endpoint.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506704406", "createdAt": "2020-10-16T20:24:57Z", "author": {"login": "gergopapi2"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/SubnetChooserService.java", "diffHunk": "@@ -40,4 +41,10 @@\n         }\n         return subnetSelectionResult.getResult();\n     }\n+\n+    public List<CloudSubnet> chooseSubnetForPrivateEndpoint(Collection<CloudSubnet> subnetMetas, DBStack dbStack, boolean existingNetwork) {\n+        NetworkConnector networkConnector = cloudPlatformConnectors.get(new CloudPlatformVariant(dbStack.getCloudPlatform(), dbStack.getPlatformVariant()))\n+                .networkConnector();\n+        return networkConnector.chooseSubnetsForPrivateEndpoint(subnetMetas, existingNetwork).getResult();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2MzcwMA=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTE0MjYzOnYy", "diffSide": "RIGHT", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/NetworkParameterAdder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoyODoxN1rOHi0M2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoyMjoxMlrOHi89CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2ODg4OA==", "bodyText": "if is handled if the return value is  \"null\"?", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506268888", "createdAt": "2020-10-16T10:28:17Z", "author": {"login": "pdarvasi"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/NetworkParameterAdder.java", "diffHunk": "@@ -74,4 +94,14 @@\n         }\n         return parameters;\n     }\n+\n+    private String getAzureSubnetToUseWithPrivateEndpoint(DetailedEnvironmentResponse detailedEnvironmentResponse, DBStack dbStack) {\n+        String subscriptionId = subnetListerService.getAzureSubscriptionId(detailedEnvironmentResponse.getCrn());\n+        return subnetChooserService.chooseSubnetForPrivateEndpoint(\n+                detailedEnvironmentResponse.getNetwork().getSubnetMetas().values(), dbStack, detailedEnvironmentResponse.getNetwork().isExistingNetwork())\n+                .stream()\n+                .findFirst()\n+                .map(csn -> subnetListerService.expandAzureResourceId(csn, detailedEnvironmentResponse, subscriptionId))\n+                .map(sn -> sn.getId()).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3NTU4Nw==", "bodyText": "So if no private endpoint is requested, then it is not used.\nBut if the subnet was changed after environment registration but before the postgres was started, then it gives an error. So a validation is needed for that, true.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506375587", "createdAt": "2020-10-16T12:46:17Z", "author": {"login": "gergopapi2"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/NetworkParameterAdder.java", "diffHunk": "@@ -74,4 +94,14 @@\n         }\n         return parameters;\n     }\n+\n+    private String getAzureSubnetToUseWithPrivateEndpoint(DetailedEnvironmentResponse detailedEnvironmentResponse, DBStack dbStack) {\n+        String subscriptionId = subnetListerService.getAzureSubscriptionId(detailedEnvironmentResponse.getCrn());\n+        return subnetChooserService.chooseSubnetForPrivateEndpoint(\n+                detailedEnvironmentResponse.getNetwork().getSubnetMetas().values(), dbStack, detailedEnvironmentResponse.getNetwork().isExistingNetwork())\n+                .stream()\n+                .findFirst()\n+                .map(csn -> subnetListerService.expandAzureResourceId(csn, detailedEnvironmentResponse, subscriptionId))\n+                .map(sn -> sn.getId()).orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2ODg4OA=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxMjI5Ng==", "bodyText": "I rearranged it: value is only added if private endpoint is requested. And if in that case no network is found, then an exception is thrown. This is the case when between env registration and database creation the network policies have been changed on the network. Thanks for spotting it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506412296", "createdAt": "2020-10-16T13:22:12Z", "author": {"login": "gergopapi2"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/NetworkParameterAdder.java", "diffHunk": "@@ -74,4 +94,14 @@\n         }\n         return parameters;\n     }\n+\n+    private String getAzureSubnetToUseWithPrivateEndpoint(DetailedEnvironmentResponse detailedEnvironmentResponse, DBStack dbStack) {\n+        String subscriptionId = subnetListerService.getAzureSubscriptionId(detailedEnvironmentResponse.getCrn());\n+        return subnetChooserService.chooseSubnetForPrivateEndpoint(\n+                detailedEnvironmentResponse.getNetwork().getSubnetMetas().values(), dbStack, detailedEnvironmentResponse.getNetwork().isExistingNetwork())\n+                .stream()\n+                .findFirst()\n+                .map(csn -> subnetListerService.expandAzureResourceId(csn, detailedEnvironmentResponse, subscriptionId))\n+                .map(sn -> sn.getId()).orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2ODg4OA=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTg3MzMyOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzowNjoyNlrOHi7ylQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoyMjo0MFrOHi8_RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5MzIzNw==", "bodyText": "accidental tabulator here", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506393237", "createdAt": "2020-10-16T13:06:26Z", "author": {"login": "attilapalfi92"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -81,7 +86,7 @@\n         Deployment deployment;\n         try {\n             String parametersMapAsString = new Json(Map.of()).getValue();\n-            client.createTemplateDeployment(resourceGroupName, stackName, template, parametersMapAsString);\n+                client.createTemplateDeployment(resourceGroupName, stackName, template, parametersMapAsString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxMjg2OQ==", "bodyText": "Thanks, changed.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506412869", "createdAt": "2020-10-16T13:22:40Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -81,7 +86,7 @@\n         Deployment deployment;\n         try {\n             String parametersMapAsString = new Json(Map.of()).getValue();\n-            client.createTemplateDeployment(resourceGroupName, stackName, template, parametersMapAsString);\n+                client.createTemplateDeployment(resourceGroupName, stackName, template, parametersMapAsString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5MzIzNw=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTg4MTM0OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzowNzo0MVrOHi74UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoyMzoyMVrOHi9CfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5NDcwNA==", "bodyText": "can you rename r to cloudResource? Not a big thing but helps reading it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506394704", "createdAt": "2020-10-16T13:07:41Z", "author": {"login": "attilapalfi92"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -150,24 +155,34 @@\n                 .build(), ResourceStatus.DELETED));\n     }\n \n-    private List<CloudResourceStatus> deleteDatabaseServer(List<CloudResource> resources, CloudContext cloudContext, boolean force,\n+    private List<CloudResourceStatus> deleteResources(List<CloudResource> resources, CloudContext cloudContext, boolean force,\n             AzureClient client, PersistenceNotifier persistenceNotifier) {\n-        LOGGER.debug(\"Deleting database server\");\n-        Optional<CloudResource> dbServerResourceOptional = resources.stream().filter(r -> AZURE_DATABASE.equals(r.getType())).findFirst();\n-        if (dbServerResourceOptional.isEmpty()) {\n-            LOGGER.warn(\"Azure database id not found in database, deleting nothing\");\n-            return List.of();\n-        }\n-        String databaseServerId = dbServerResourceOptional.get().getReference();\n-        Optional<String> errorMessage = azureUtils.deleteDatabaseServer(client, databaseServerId, force);\n-        if (errorMessage.isEmpty()) {\n-            deleteResources(resources, cloudContext, persistenceNotifier);\n-        }\n \n-        return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n+        // TODO simplify after final form of template is reached\n+\n+        List<CloudResource> azureGenericResources = findResources(resources, List.of(AZURE_PRIVATE_ENDPOINT));\n+        LOGGER.debug(\"Deleting dns zone groups and azure private endpoints {}\", azureGenericResources);\n+        azureUtils.deleteGenericResources(client, azureGenericResources.stream().map(CloudResource::getReference).collect(Collectors.toList()));\n+        azureGenericResources.forEach(cr -> persistenceNotifier.notifyDeletion(cr, cloudContext));\n+\n+        return findResources(resources, List.of(AZURE_DATABASE)).stream()\n+                .map(r -> deleteDatabaseServerAndNotify(r, cloudContext, client, persistenceNotifier, force))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private CloudResourceStatus deleteDatabaseServerAndNotify(\n+            CloudResource r, CloudContext cloudContext, AzureClient client, PersistenceNotifier persistenceNotifier, boolean force) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxMzY5Mg==", "bodyText": "done", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506413692", "createdAt": "2020-10-16T13:23:21Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -150,24 +155,34 @@\n                 .build(), ResourceStatus.DELETED));\n     }\n \n-    private List<CloudResourceStatus> deleteDatabaseServer(List<CloudResource> resources, CloudContext cloudContext, boolean force,\n+    private List<CloudResourceStatus> deleteResources(List<CloudResource> resources, CloudContext cloudContext, boolean force,\n             AzureClient client, PersistenceNotifier persistenceNotifier) {\n-        LOGGER.debug(\"Deleting database server\");\n-        Optional<CloudResource> dbServerResourceOptional = resources.stream().filter(r -> AZURE_DATABASE.equals(r.getType())).findFirst();\n-        if (dbServerResourceOptional.isEmpty()) {\n-            LOGGER.warn(\"Azure database id not found in database, deleting nothing\");\n-            return List.of();\n-        }\n-        String databaseServerId = dbServerResourceOptional.get().getReference();\n-        Optional<String> errorMessage = azureUtils.deleteDatabaseServer(client, databaseServerId, force);\n-        if (errorMessage.isEmpty()) {\n-            deleteResources(resources, cloudContext, persistenceNotifier);\n-        }\n \n-        return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n+        // TODO simplify after final form of template is reached\n+\n+        List<CloudResource> azureGenericResources = findResources(resources, List.of(AZURE_PRIVATE_ENDPOINT));\n+        LOGGER.debug(\"Deleting dns zone groups and azure private endpoints {}\", azureGenericResources);\n+        azureUtils.deleteGenericResources(client, azureGenericResources.stream().map(CloudResource::getReference).collect(Collectors.toList()));\n+        azureGenericResources.forEach(cr -> persistenceNotifier.notifyDeletion(cr, cloudContext));\n+\n+        return findResources(resources, List.of(AZURE_DATABASE)).stream()\n+                .map(r -> deleteDatabaseServerAndNotify(r, cloudContext, client, persistenceNotifier, force))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private CloudResourceStatus deleteDatabaseServerAndNotify(\n+            CloudResource r, CloudContext cloudContext, AzureClient client, PersistenceNotifier persistenceNotifier, boolean force) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5NDcwNA=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTg4ODczOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/subnet/selector/AzureSubnetSelectorService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzowODo1MlrOHi79oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo0MzowN1rOHjPPOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5NjA2NQ==", "bodyText": "A log line here would be nice I think", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506396065", "createdAt": "2020-10-16T13:08:52Z", "author": {"login": "attilapalfi92"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/subnet/selector/AzureSubnetSelectorService.java", "diffHunk": "@@ -36,4 +44,18 @@ public SubnetSelectionResult select(Collection<CloudSubnet> subnetMetas, SubnetS\n         }\n         return Optional.empty();\n     }\n+\n+    public SubnetSelectionResult selectForPrivateEndpoint(Collection<CloudSubnet> subnetMetas, boolean existingNetwork) {\n+        List<CloudSubnet> suitableCloudSubnet;\n+        if (existingNetwork) {\n+            suitableCloudSubnet = subnetMetas.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxMTg2Nw==", "bodyText": "I added a log line to show network registration type (existing / new). Result of selection is now logged in SubnetChooserService.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506711867", "createdAt": "2020-10-16T20:43:07Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/subnet/selector/AzureSubnetSelectorService.java", "diffHunk": "@@ -36,4 +44,18 @@ public SubnetSelectionResult select(Collection<CloudSubnet> subnetMetas, SubnetS\n         }\n         return Optional.empty();\n     }\n+\n+    public SubnetSelectionResult selectForPrivateEndpoint(Collection<CloudSubnet> subnetMetas, boolean existingNetwork) {\n+        List<CloudSubnet> suitableCloudSubnet;\n+        if (existingNetwork) {\n+            suitableCloudSubnet = subnetMetas.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5NjA2NQ=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTkxMDk2OnYy", "diffSide": "LEFT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTemplateBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxMTo1OVrOHi8Mrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo0NTozOVrOHjPTeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5OTkxOQ==", "bodyText": "What happened to these?", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506399919", "createdAt": "2020-10-16T13:11:59Z", "author": {"login": "attilapalfi92"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTemplateBuilder.java", "diffHunk": "@@ -43,23 +37,9 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AzureTemplateBuilder.class);\n \n-    private static final String GENERAL_PURPOSE = \"GeneralPurpose\";\n-\n-    private static final String MEMORY_OPTIMIZED = \"MemoryOptimized\";\n-\n-    private static final Set<String> GENERAL_PURPOSE_INSTANCE_TYPES = Set.of(\"GP_Gen5_2\", \"GP_Gen5_4\", \"GP_Gen5_8\", \"GP_Gen5_16\", \"GP_Gen5_32\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxMjk1NA==", "bodyText": "Those were extracted to AzureDatabaseTemplateBuilder, they were only used by database.", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506712954", "createdAt": "2020-10-16T20:45:39Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTemplateBuilder.java", "diffHunk": "@@ -43,23 +37,9 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AzureTemplateBuilder.class);\n \n-    private static final String GENERAL_PURPOSE = \"GeneralPurpose\";\n-\n-    private static final String MEMORY_OPTIMIZED = \"MemoryOptimized\";\n-\n-    private static final Set<String> GENERAL_PURPOSE_INSTANCE_TYPES = Set.of(\"GP_Gen5_2\", \"GP_Gen5_4\", \"GP_Gen5_8\", \"GP_Gen5_16\", \"GP_Gen5_32\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5OTkxOQ=="}, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTk0MjM3OnYy", "diffSide": "RIGHT", "path": "environment/src/test/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNjo1OFrOHi8iiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxNjo1OFrOHi8iiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwNTUxMw==", "bodyText": "good amount of tests", "url": "https://github.com/hortonworks/cloudbreak/pull/9230#discussion_r506405513", "createdAt": "2020-10-16T13:16:58Z", "author": {"login": "attilapalfi92"}, "path": "environment/src/test/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidatorTest.java", "diffHunk": "@@ -46,6 +57,106 @@ void testValidateDuringFlowWhenTheNetworkIsNull() {\n         assertTrue(validationResultBuilder.build().hasError());\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688cf9660f17ce8217776e67090ea47bdd108fcc"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2164, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}