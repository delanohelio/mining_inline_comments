{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNTI1MzAz", "number": 8950, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyMzo1OVrOEhli7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyNzo0NVrOEhlpKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjUzNjEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyMzo1OVrOHO-svg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODozOTozN1rOHPpP5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2OTM3NA==", "bodyText": "this should be private or moved to a separate class", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r485469374", "createdAt": "2020-09-09T09:23:59Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab8927b87e722e9e11fd5409a8ecba88815d28e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE2NjUwMg==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r486166502", "createdAt": "2020-09-10T08:39:37Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2OTM3NA=="}, "originalCommit": {"oid": "2ab8927b87e722e9e11fd5409a8ecba88815d28e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjUzOTY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyNDo0OFrOHO-u3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODozOTo0N1rOHPpQWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2OTkxNg==", "bodyText": "unnecessary line break", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r485469916", "createdAt": "2020-09-09T09:24:48Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab8927b87e722e9e11fd5409a8ecba88815d28e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE2NjYxNw==", "bodyText": "fixed", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r486166617", "createdAt": "2020-09-10T08:39:47Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2OTkxNg=="}, "originalCommit": {"oid": "2ab8927b87e722e9e11fd5409a8ecba88815d28e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjU0MTE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyNToxMlrOHO-v1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODozOTo1NlrOHPpQtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MDE2NA==", "bodyText": "missing else to indicate there are multiple exit point for the method", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r485470164", "createdAt": "2020-09-09T09:25:12Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n+        if (isNotBlank(im.getShortHostname())) {\n+            return im.getShortHostname();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab8927b87e722e9e11fd5409a8ecba88815d28e"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE2NjcxMA==", "bodyText": "fixed.", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r486166710", "createdAt": "2020-09-10T08:39:56Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n+        if (isNotBlank(im.getShortHostname())) {\n+            return im.getShortHostname();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MDE2NA=="}, "originalCommit": {"oid": "2ab8927b87e722e9e11fd5409a8ecba88815d28e"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjU0NDg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyNjowNVrOHO-yDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODo0MDowOVrOHPpRRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MDczMg==", "bodyText": "0L instead of integer 0", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r485470732", "createdAt": "2020-09-09T09:26:05Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n+        if (isNotBlank(im.getShortHostname())) {\n+            return im.getShortHostname();\n+        }\n+        AtomicLong hostGroupIndex = hostGroupNodeIndex.computeIfAbsent(im.getInstanceGroup().getGroupName(),\n+                instantGroup -> new AtomicLong(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab8927b87e722e9e11fd5409a8ecba88815d28e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE2Njg1NQ==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r486166855", "createdAt": "2020-09-10T08:40:09Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n+        if (isNotBlank(im.getShortHostname())) {\n+            return im.getShortHostname();\n+        }\n+        AtomicLong hostGroupIndex = hostGroupNodeIndex.computeIfAbsent(im.getInstanceGroup().getGroupName(),\n+                instantGroup -> new AtomicLong(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MDczMg=="}, "originalCommit": {"oid": "2ab8927b87e722e9e11fd5409a8ecba88815d28e"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjU1MjEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyNzo0NVrOHO-2Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODo0NjoyM1rOHPpguA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MTgxMQ==", "bodyText": "this doesn't scale well at first blink, if I have a 300 node cluster in a single hostgroup and upscale with 50 node what would happen?", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r485471811", "createdAt": "2020-09-09T09:27:45Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n+        if (isNotBlank(im.getShortHostname())) {\n+            return im.getShortHostname();\n+        }\n+        AtomicLong hostGroupIndex = hostGroupNodeIndex.computeIfAbsent(im.getInstanceGroup().getGroupName(),\n+                instantGroup -> new AtomicLong(0));\n+        String generatedHostName;\n+        do {\n+            generatedHostName = hostDiscoveryService.calculateHostname(stack.getCustomHostname(), im.getShortHostname(),\n+                    im.getInstanceGroupName(), hostGroupIndex.getAndIncrement(), stack.isHostgroupNameAsHostname());\n+        } while (clusterNodeNames.contains(generatedHostName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab8927b87e722e9e11fd5409a8ecba88815d28e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE3MDgwOA==", "bodyText": "if 300 node cluster in hostgroup, hostGroupNodeIndex would be initialized to 300 before hitting this loop. So the first new node would get 301 index and subsequent nodes would get next sequential indexes. The existing clusterNodeNames check is failSafe to ensure no duplicate name is generated as that would fail the cluster launch\\scaling.", "url": "https://github.com/hortonworks/cloudbreak/pull/8950#discussion_r486170808", "createdAt": "2020-09-10T08:46:23Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/ClusterBootstrapper.java", "diffHunk": "@@ -361,4 +373,21 @@ private void validatePollingResultForCancellation(PollingResult pollingResult, S\n         }\n     }\n \n+    String getNodeNameForInstance(InstanceMetaData im, Stack stack,\n+            Map<String, AtomicLong> hostGroupNodeIndex, Set<String> clusterNodeNames) {\n+        if (isNotBlank(im.getShortHostname())) {\n+            return im.getShortHostname();\n+        }\n+        AtomicLong hostGroupIndex = hostGroupNodeIndex.computeIfAbsent(im.getInstanceGroup().getGroupName(),\n+                instantGroup -> new AtomicLong(0));\n+        String generatedHostName;\n+        do {\n+            generatedHostName = hostDiscoveryService.calculateHostname(stack.getCustomHostname(), im.getShortHostname(),\n+                    im.getInstanceGroupName(), hostGroupIndex.getAndIncrement(), stack.isHostgroupNameAsHostname());\n+        } while (clusterNodeNames.contains(generatedHostName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MTgxMQ=="}, "originalCommit": {"oid": "2ab8927b87e722e9e11fd5409a8ecba88815d28e"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2242, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}