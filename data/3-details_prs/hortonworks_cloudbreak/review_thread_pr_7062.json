{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTgyODYw", "number": 7062, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowNDowN1rODX0xrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzowNzowN1rODX1yMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzA4NTI0OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/assertion/environment/EnvironmentTestAssertion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowNDowN1rOFdVPJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowNDowN1rOFdVPJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMDk2Nw==", "bodyText": "rename the parameter as well", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366300967", "createdAt": "2020-01-14T12:04:07Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/assertion/environment/EnvironmentTestAssertion.java", "diffHunk": "@@ -1,20 +1,20 @@\n package com.sequenceiq.it.cloudbreak.assertion.environment;\n \n-import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n-import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n-import com.sequenceiq.it.cloudbreak.CloudbreakClient;\n+import com.sequenceiq.it.cloudbreak.EnvironmentClient;\n import com.sequenceiq.it.cloudbreak.assertion.Assertion;\n import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n+import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n \n-public class EnvironmentTestAssertion implements Assertion<EnvironmentTestDto, CloudbreakClient> {\n+public class EnvironmentTestAssertion implements Assertion<EnvironmentTestDto, EnvironmentClient> {\n     private String expectedCredentialName;\n \n     public EnvironmentTestAssertion(String expectedCredentialName) {\n         this.expectedCredentialName = expectedCredentialName;\n     }\n \n     @Override\n-    public EnvironmentTestDto doAssertion(TestContext testContext, EnvironmentTestDto testDto, CloudbreakClient cloudbreakClient) throws Exception {\n+    public EnvironmentTestDto doAssertion(TestContext testContext, EnvironmentTestDto testDto, EnvironmentClient cloudbreakClient) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "563f43b2e92846c9efec786e4c65e14f83ee8c83"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzA5ODU4OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/CheckCount.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowOTozM1rOFdVXNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowOTozM1rOFdVXNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMzAzMA==", "bodyText": "please throw an exception, it will not be handled by test context", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366303030", "createdAt": "2020-01-14T12:09:33Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/CheckCount.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.it.cloudbreak.dto.mock;\n+\n+import java.util.List;\n+\n+import org.testng.Assert;\n+\n+import com.sequenceiq.it.cloudbreak.CloudbreakClient;\n+import com.sequenceiq.it.cloudbreak.dto.mock.answer.TypedRequestData;\n+import com.sequenceiq.it.cloudbreak.mock.DefaultModel;\n+\n+public class CheckCount {\n+    private CheckCount() {\n+    }\n+\n+    public static Verification times(int expectedTimes) {\n+        return new Verification() {\n+            @Override\n+            public <T> void handle(String path, Method method, CloudbreakClient client, DefaultModel model, List<TypedRequestData<T>> calls) {\n+\n+                Assert.assertEquals(calls.size(), expectedTimes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "563f43b2e92846c9efec786e4c65e14f83ee8c83"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzA5OTYwOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/CheckCount.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjoxMDowMFrOFdVX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTowNjoxM1rOFdxRTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMzE4OQ==", "bodyText": "consider using lambda format", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366303189", "createdAt": "2020-01-14T12:10:00Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/CheckCount.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.it.cloudbreak.dto.mock;\n+\n+import java.util.List;\n+\n+import org.testng.Assert;\n+\n+import com.sequenceiq.it.cloudbreak.CloudbreakClient;\n+import com.sequenceiq.it.cloudbreak.dto.mock.answer.TypedRequestData;\n+import com.sequenceiq.it.cloudbreak.mock.DefaultModel;\n+\n+public class CheckCount {\n+    private CheckCount() {\n+    }\n+\n+    public static Verification times(int expectedTimes) {\n+        return new Verification() {\n+            @Override\n+            public <T> void handle(String path, Method method, CloudbreakClient client, DefaultModel model, List<TypedRequestData<T>> calls) {\n+\n+                Assert.assertEquals(calls.size(), expectedTimes,\n+                        String.format(path + \" \" + method.getMethodName() + \" method call count expected to be %d, but was %d\", expectedTimes, calls.size()));\n+            }\n+        };\n+    }\n+\n+    public static Verification atLeast(int expectedMinimumTimes) {\n+        return new Verification() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "563f43b2e92846c9efec786e4c65e14f83ee8c83"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDI2OA==", "bodyText": "Verfication is generic, I could not use lambda here", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366760268", "createdAt": "2020-01-15T09:06:13Z", "author": {"login": "afarsang"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/CheckCount.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.it.cloudbreak.dto.mock;\n+\n+import java.util.List;\n+\n+import org.testng.Assert;\n+\n+import com.sequenceiq.it.cloudbreak.CloudbreakClient;\n+import com.sequenceiq.it.cloudbreak.dto.mock.answer.TypedRequestData;\n+import com.sequenceiq.it.cloudbreak.mock.DefaultModel;\n+\n+public class CheckCount {\n+    private CheckCount() {\n+    }\n+\n+    public static Verification times(int expectedTimes) {\n+        return new Verification() {\n+            @Override\n+            public <T> void handle(String path, Method method, CloudbreakClient client, DefaultModel model, List<TypedRequestData<T>> calls) {\n+\n+                Assert.assertEquals(calls.size(), expectedTimes,\n+                        String.format(path + \" \" + method.getMethodName() + \" method call count expected to be %d, but was %d\", expectedTimes, calls.size()));\n+            }\n+        };\n+    }\n+\n+    public static Verification atLeast(int expectedMinimumTimes) {\n+        return new Verification() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMzE4OQ=="}, "originalCommit": {"oid": "563f43b2e92846c9efec786e4c65e14f83ee8c83"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzE0MjU3OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/HttpMock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjoyNjo0NFrOFdVxow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjoyNjo0NFrOFdVxow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwOTc5NQ==", "bodyText": "Entity is unused, should be deleted from inheritance chain", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366309795", "createdAt": "2020-01-14T12:26:44Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/HttpMock.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.sequenceiq.it.cloudbreak.dto.mock;\n+\n+import static com.sequenceiq.it.cloudbreak.context.RunningParameter.emptyRunningParameter;\n+\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+import com.sequenceiq.it.TestParameter;\n+import com.sequenceiq.it.cloudbreak.CloudbreakClient;\n+import com.sequenceiq.it.cloudbreak.Entity;\n+import com.sequenceiq.it.cloudbreak.Prototype;\n+import com.sequenceiq.it.cloudbreak.ResourcePropertyProvider;\n+import com.sequenceiq.it.cloudbreak.assertion.Assertion;\n+import com.sequenceiq.it.cloudbreak.cloud.v4.CloudProvider;\n+import com.sequenceiq.it.cloudbreak.context.MockedTestContext;\n+import com.sequenceiq.it.cloudbreak.context.RunningParameter;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.CloudbreakTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.mock.answer.RequestData;\n+import com.sequenceiq.it.cloudbreak.mock.DefaultModel;\n+import com.sequenceiq.it.cloudbreak.spark.DynamicRouteStack;\n+import com.sequenceiq.it.cloudbreak.spark.SparkServer;\n+import com.sequenceiq.it.cloudbreak.spark.SparkServerFactory;\n+\n+@Prototype\n+public class HttpMock extends Entity implements CloudbreakTestDto {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "563f43b2e92846c9efec786e4c65e14f83ee8c83"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzI0MjY4OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/mock/model/SaltMock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzowNDoyM1rOFdWu2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTowNzo0NlrOFdxT6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyNTQ2NQ==", "bodyText": "hm, what is alma", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366325465", "createdAt": "2020-01-14T13:04:23Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/mock/model/SaltMock.java", "diffHunk": "@@ -135,6 +136,7 @@ private void postSaltBootActionDistribute(Service sparkService) {\n \n     private void postSaltBootPillar(Service sparkService) {\n         sparkService.post(SALT_SERVER_PILLAR, (request, response) -> {\n+            JsonUtil.readTree(\"alma\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "563f43b2e92846c9efec786e4c65e14f83ee8c83"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDkzNw==", "bodyText": "oops", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366760937", "createdAt": "2020-01-15T09:07:46Z", "author": {"login": "afarsang"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/mock/model/SaltMock.java", "diffHunk": "@@ -135,6 +136,7 @@ private void postSaltBootActionDistribute(Service sparkService) {\n \n     private void postSaltBootPillar(Service sparkService) {\n         sparkService.post(SALT_SERVER_PILLAR, (request, response) -> {\n+            JsonUtil.readTree(\"alma\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyNTQ2NQ=="}, "originalCommit": {"oid": "563f43b2e92846c9efec786e4c65e14f83ee8c83"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzI1MDQwOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/ImageCatalogBasicTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzowNzowN1rOFdWzkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTowOTowNFrOFdxWXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyNjY3Mw==", "bodyText": "is it mean: Should be returned with empty?", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366326673", "createdAt": "2020-01-14T13:07:07Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/ImageCatalogBasicTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.it.cloudbreak.testcase.mock;\n+\n+import static com.sequenceiq.it.cloudbreak.dto.mock.CheckCount.atLeast;\n+import static com.sequenceiq.it.cloudbreak.mock.ImageCatalogMockServerSetup.responseFromJsonFile;\n+\n+import javax.inject.Inject;\n+\n+import org.testng.annotations.Test;\n+\n+import com.sequenceiq.it.TestParameter;\n+import com.sequenceiq.it.cloudbreak.action.v4.credential.CredentialCreateAction;\n+import com.sequenceiq.it.cloudbreak.action.v4.imagecatalog.ImageCatalogCreateRetryAction;\n+import com.sequenceiq.it.cloudbreak.client.ImageCatalogTestClient;\n+import com.sequenceiq.it.cloudbreak.context.Description;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.credential.CredentialTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.imagecatalog.ImageCatalogTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.mock.HttpMock;\n+import com.sequenceiq.it.cloudbreak.dto.mock.endpoint.ImageCatalogEndpoint;\n+import com.sequenceiq.it.cloudbreak.mock.ImageCatalogMockServerSetup;\n+import com.sequenceiq.it.cloudbreak.testcase.AbstractMinimalTest;\n+\n+public class ImageCatalogBasicTest extends AbstractMinimalTest {\n+\n+    @Inject\n+    ImageCatalogMockServerSetup imageCatalogMockServerSetup;\n+\n+    @Inject\n+    private ImageCatalogTestClient imageCatalogTestClient;\n+\n+    @Inject\n+    private TestParameter testParameter;\n+\n+    @Test(dataProvider = TEST_CONTEXT)\n+    @Description(\n+            given = \"image catalog valid URL\",\n+            when = \"calling create image catalog with that URL\",\n+            then = \"getting image catalog response so the creation success\")\n+    public void testIC(TestContext testContext) {\n+        String imgCatalogName = resourcePropertyProvider().getName();\n+\n+        testContext\n+                .as()\n+                .given(HttpMock.class)\n+                .whenRequested(ImageCatalogEndpoint.Base.class).getCatalog().thenReturn(\n+                (model, uriParameters) -> imageCatalogMockServerSetup\n+                        .patchCbVersion(responseFromJsonFile(\"imagecatalog/catalog.json\"), testParameter))\n+                .whenRequested(ImageCatalogEndpoint.Base.class).head()\n+                .thenReturnHeader(\"Content-Length\", \"38\")\n+                .thenReturn((model, uriParameters) -> \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "563f43b2e92846c9efec786e4c65e14f83ee8c83"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MTU2Ng==", "bodyText": "yes, i'll clarify this", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366761566", "createdAt": "2020-01-15T09:09:04Z", "author": {"login": "afarsang"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/ImageCatalogBasicTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.it.cloudbreak.testcase.mock;\n+\n+import static com.sequenceiq.it.cloudbreak.dto.mock.CheckCount.atLeast;\n+import static com.sequenceiq.it.cloudbreak.mock.ImageCatalogMockServerSetup.responseFromJsonFile;\n+\n+import javax.inject.Inject;\n+\n+import org.testng.annotations.Test;\n+\n+import com.sequenceiq.it.TestParameter;\n+import com.sequenceiq.it.cloudbreak.action.v4.credential.CredentialCreateAction;\n+import com.sequenceiq.it.cloudbreak.action.v4.imagecatalog.ImageCatalogCreateRetryAction;\n+import com.sequenceiq.it.cloudbreak.client.ImageCatalogTestClient;\n+import com.sequenceiq.it.cloudbreak.context.Description;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.credential.CredentialTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.imagecatalog.ImageCatalogTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.mock.HttpMock;\n+import com.sequenceiq.it.cloudbreak.dto.mock.endpoint.ImageCatalogEndpoint;\n+import com.sequenceiq.it.cloudbreak.mock.ImageCatalogMockServerSetup;\n+import com.sequenceiq.it.cloudbreak.testcase.AbstractMinimalTest;\n+\n+public class ImageCatalogBasicTest extends AbstractMinimalTest {\n+\n+    @Inject\n+    ImageCatalogMockServerSetup imageCatalogMockServerSetup;\n+\n+    @Inject\n+    private ImageCatalogTestClient imageCatalogTestClient;\n+\n+    @Inject\n+    private TestParameter testParameter;\n+\n+    @Test(dataProvider = TEST_CONTEXT)\n+    @Description(\n+            given = \"image catalog valid URL\",\n+            when = \"calling create image catalog with that URL\",\n+            then = \"getting image catalog response so the creation success\")\n+    public void testIC(TestContext testContext) {\n+        String imgCatalogName = resourcePropertyProvider().getName();\n+\n+        testContext\n+                .as()\n+                .given(HttpMock.class)\n+                .whenRequested(ImageCatalogEndpoint.Base.class).getCatalog().thenReturn(\n+                (model, uriParameters) -> imageCatalogMockServerSetup\n+                        .patchCbVersion(responseFromJsonFile(\"imagecatalog/catalog.json\"), testParameter))\n+                .whenRequested(ImageCatalogEndpoint.Base.class).head()\n+                .thenReturnHeader(\"Content-Length\", \"38\")\n+                .thenReturn((model, uriParameters) -> \"\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyNjY3Mw=="}, "originalCommit": {"oid": "563f43b2e92846c9efec786e4c65e14f83ee8c83"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2915, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}