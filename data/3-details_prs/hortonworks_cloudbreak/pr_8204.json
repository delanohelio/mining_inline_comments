{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NzQ0MTQy", "number": 8204, "title": "CB-7267 [ASRG] Implement resource group termination step", "bodyText": "", "createdAt": "2020-06-04T10:36:45Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8204", "merged": true, "mergeCommit": {"oid": "30b5013448c9d73fe7ced6f3d5f03ef1b948cd66"}, "closed": true, "closedAt": "2020-06-09T13:11:13Z", "author": {"login": "gergopapi2"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn8jGJABqjM0MDY0NDM2ODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpjB41gFqTQyNzAyOTY4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8881657f3aff8bf2e886b531275c22498c61ff54", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8881657f3aff8bf2e886b531275c22498c61ff54", "committedDate": "2020-06-04T10:35:51Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}, "afterCommit": {"oid": "5b4192248397276777ad38831961ce7917c18097", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5b4192248397276777ad38831961ce7917c18097", "committedDate": "2020-06-04T11:41:20Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b4192248397276777ad38831961ce7917c18097", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5b4192248397276777ad38831961ce7917c18097", "committedDate": "2020-06-04T11:41:20Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}, "afterCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ab2fab3841d1e6c30fbe609e468898937e975c6d", "committedDate": "2020-06-04T14:01:26Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzgwNzQ5", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#pullrequestreview-424780749", "createdAt": "2020-06-04T19:54:39Z", "commit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTo1NDozOVrOGfVlsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDoxMDo0MlrOGfWFhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxMjc1Mw==", "bodyText": "Is this line always safe for NPE?", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435512753", "createdAt": "2020-06-04T19:54:39Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java", "diffHunk": "@@ -168,6 +173,23 @@ public void createEnvironmentPrerequisites(EnvironmentPrerequisitesCreateRequest\n                 environmentPrerequisitesCreateRequest.getAzure().getTags());\n     }\n \n+    @Override\n+    public void deleteEnvironmentPrerequisites(EnvironmentPrerequisiteDeleteRequest environmentPrerequisiteDeleteRequest) {\n+        AzureClient azureClient = azureClientService.getClient(environmentPrerequisiteDeleteRequest.getCloudCredential());\n+        String resourceGroupName = environmentPrerequisiteDeleteRequest.getAzurePrerequisiteDeleteRequest().getResourceGroupName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxMzM5MA==", "bodyText": "IMHO, we should not fail hard in such cases, we might warn and continue without deleting the RG. Its presence does not cost any money anyways.", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435513390", "createdAt": "2020-06-04T19:55:56Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureSetup.java", "diffHunk": "@@ -168,6 +173,23 @@ public void createEnvironmentPrerequisites(EnvironmentPrerequisitesCreateRequest\n                 environmentPrerequisitesCreateRequest.getAzure().getTags());\n     }\n \n+    @Override\n+    public void deleteEnvironmentPrerequisites(EnvironmentPrerequisiteDeleteRequest environmentPrerequisiteDeleteRequest) {\n+        AzureClient azureClient = azureClientService.getClient(environmentPrerequisiteDeleteRequest.getCloudCredential());\n+        String resourceGroupName = environmentPrerequisiteDeleteRequest.getAzurePrerequisiteDeleteRequest().getResourceGroupName();\n+        try {\n+            if (!azureClient.isResourceGroupEmpty(resourceGroupName)) {\n+                String message = String.format(\"Resource group %s is not empty, cannot proceed with deleting the environment. \" +\n+                        \"Please check contents on azure portal.\", resourceGroupName);\n+                LOGGER.warn(message);\n+                throw new CloudConnectorException(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxNjM0Mg==", "bodyText": "I liked the version with logging more in deleteDatabaseServer, could you pls add logging?", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435516342", "createdAt": "2020-06-04T20:01:40Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -348,19 +352,54 @@ public void deleteManagedDisks(AzureClient azureClient, Collection<String> manag\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n-    public void deleteDatabaseServer(AzureClient azureClient, String databaseServerId) {\n-        LOGGER.info(\"Delete database server: {}\", databaseServerId);\n-        List<String> failedToDeleteDatabaseServer = new ArrayList<>();\n-        Completable databaseServerDeleteCompletable = azureClient.deleteDatabaseServer(databaseServerId)\n-                .doOnError(throwable -> {\n-                    LOGGER.error(\"Error happend on azure database server delete: {}\", databaseServerId, throwable);\n-                    failedToDeleteDatabaseServer.add(databaseServerId);\n-                })\n-                .subscribeOn(Schedulers.io());\n-        databaseServerDeleteCompletable.await();\n-        if (!failedToDeleteDatabaseServer.isEmpty()) {\n-            LOGGER.error(\"Can't delete database server: {}\", failedToDeleteDatabaseServer);\n-            throw new CloudbreakServiceException(\"Can't delete database server: \" + failedToDeleteDatabaseServer);\n+    public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n+        return handleDeleteErrors(resourceId -> {\n+            LOGGER.info(\"Delete database server: {}\", resourceId);\n+            azureClient.deleteDatabaseServer(resourceId);\n+        }, \"DatabaseServer\", databaseServerId, true);\n+    }\n+\n+    @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n+    public Optional<String> deleteResourceGroup(AzureClient azureClient, String resourceGroupId, boolean cancelException) {\n+        return handleDeleteErrors(azureClient::deleteResourceGroup, \"ResourceGroup\", resourceGroupId, cancelException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxODI2Ng==", "bodyText": "This could be an async operation as we don't need to wait for it we can throw a CloudbreakServiceException inside doOnError()", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435518266", "createdAt": "2020-06-04T20:05:37Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -348,19 +352,54 @@ public void deleteManagedDisks(AzureClient azureClient, Collection<String> manag\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n-    public void deleteDatabaseServer(AzureClient azureClient, String databaseServerId) {\n-        LOGGER.info(\"Delete database server: {}\", databaseServerId);\n-        List<String> failedToDeleteDatabaseServer = new ArrayList<>();\n-        Completable databaseServerDeleteCompletable = azureClient.deleteDatabaseServer(databaseServerId)\n-                .doOnError(throwable -> {\n-                    LOGGER.error(\"Error happend on azure database server delete: {}\", databaseServerId, throwable);\n-                    failedToDeleteDatabaseServer.add(databaseServerId);\n-                })\n-                .subscribeOn(Schedulers.io());\n-        databaseServerDeleteCompletable.await();\n-        if (!failedToDeleteDatabaseServer.isEmpty()) {\n-            LOGGER.error(\"Can't delete database server: {}\", failedToDeleteDatabaseServer);\n-            throw new CloudbreakServiceException(\"Can't delete database server: \" + failedToDeleteDatabaseServer);\n+    public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n+        return handleDeleteErrors(resourceId -> {\n+            LOGGER.info(\"Delete database server: {}\", resourceId);\n+            azureClient.deleteDatabaseServer(resourceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMDM5Mg==", "bodyText": "creating --> deleting", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435520392", "createdAt": "2020-06-04T20:09:44Z", "author": {"login": "pdarvasi"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package com.sequenceiq.environment.environment.flow.deletion.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteHandlerSelectors.DELETE_PREREQUISITES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteStateSelectors.FINISH_ENV_DELETE_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupUsagePattern.USE_MULTIPLE;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.Setup;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudPlatformVariant;\n+import com.sequenceiq.cloudbreak.cloud.model.Platform;\n+import com.sequenceiq.cloudbreak.cloud.model.Variant;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.AzurePrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.EnvironmentPrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class PrerequisitesDeleteHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PrerequisitesDeleteHandler.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private final CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    protected PrerequisitesDeleteHandler(EventSender eventSender, EnvironmentService environmentService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter, CloudPlatformConnectors cloudPlatformConnectors) {\n+        super(eventSender);\n+        this.environmentService = environmentService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+    }\n+\n+    @Override\n+    public String selector() {\n+        return DELETE_PREREQUISITES_EVENT.selector();\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                if (AZURE.name().equals(environmentDto.getCloudPlatform())) {\n+                                    deleteResourceGroupIfEmpty(environmentDto, environment);\n+                                } else {\n+                                    LOGGER.debug(\"Cloudplatform not azure, not creating resource group.\");\n+                                }\n+                                goToFinishedState(environmentDtoEvent);\n+                            } catch (Exception e) {\n+                                goToFailedState(environmentDtoEvent, e.getMessage());\n+                            }\n+                        }, () -> goToFailedState(environmentDtoEvent, String.format(\"Environment was not found with id '%s'.\", environmentDto.getId()))\n+                );\n+    }\n+\n+    private void deleteResourceGroupIfEmpty(EnvironmentDto environmentDto, Environment environment) {\n+        Optional<AzureResourceGroupDto> azureResourceGroupDtoOptional = getAzureResourceGroupDto(environmentDto);\n+        if (azureResourceGroupDtoOptional.isEmpty()) {\n+            LOGGER.debug(\"No azure resource group dto defined, not creating resource group.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMDkwMA==", "bodyText": "not --> has not been", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435520900", "createdAt": "2020-06-04T20:10:42Z", "author": {"login": "pdarvasi"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package com.sequenceiq.environment.environment.flow.deletion.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteHandlerSelectors.DELETE_PREREQUISITES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteStateSelectors.FINISH_ENV_DELETE_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupUsagePattern.USE_MULTIPLE;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.Setup;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudPlatformVariant;\n+import com.sequenceiq.cloudbreak.cloud.model.Platform;\n+import com.sequenceiq.cloudbreak.cloud.model.Variant;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.AzurePrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.EnvironmentPrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class PrerequisitesDeleteHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PrerequisitesDeleteHandler.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private final CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    protected PrerequisitesDeleteHandler(EventSender eventSender, EnvironmentService environmentService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter, CloudPlatformConnectors cloudPlatformConnectors) {\n+        super(eventSender);\n+        this.environmentService = environmentService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+    }\n+\n+    @Override\n+    public String selector() {\n+        return DELETE_PREREQUISITES_EVENT.selector();\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                if (AZURE.name().equals(environmentDto.getCloudPlatform())) {\n+                                    deleteResourceGroupIfEmpty(environmentDto, environment);\n+                                } else {\n+                                    LOGGER.debug(\"Cloudplatform not azure, not creating resource group.\");\n+                                }\n+                                goToFinishedState(environmentDtoEvent);\n+                            } catch (Exception e) {\n+                                goToFailedState(environmentDtoEvent, e.getMessage());\n+                            }\n+                        }, () -> goToFailedState(environmentDtoEvent, String.format(\"Environment was not found with id '%s'.\", environmentDto.getId()))\n+                );\n+    }\n+\n+    private void deleteResourceGroupIfEmpty(EnvironmentDto environmentDto, Environment environment) {\n+        Optional<AzureResourceGroupDto> azureResourceGroupDtoOptional = getAzureResourceGroupDto(environmentDto);\n+        if (azureResourceGroupDtoOptional.isEmpty()) {\n+            LOGGER.debug(\"No azure resource group dto defined, not creating resource group.\");\n+            return;\n+        }\n+\n+        AzureResourceGroupDto azureResourceGroupDto = azureResourceGroupDtoOptional.get();\n+        LOGGER.debug(\"Azure resource group dto: {}\", azureResourceGroupDto);\n+        if (USE_MULTIPLE.equals(azureResourceGroupDto.getResourceGroupUsagePattern()) || !CREATE_NEW.equals(azureResourceGroupDto.getResourceGroupCreation())) {\n+            LOGGER.debug(\"Not deleting resource group.\");\n+            return;\n+        }\n+\n+        String resourceGroupName = azureResourceGroupDto.getName();\n+        deleteResourceGroupIfEmpty(environmentDto, resourceGroupName);\n+        LOGGER.debug(\"Azure resource group created successfully.\");\n+    }\n+\n+    private void deleteResourceGroupIfEmpty(EnvironmentDto environmentDto, String resourceGroupName) {\n+        try {\n+            Optional<Setup> setupOptional = getSetupConnector(environmentDto.getCloudPlatform());\n+            if (setupOptional.isEmpty()) {\n+                LOGGER.debug(\"No setup defined for platform {}, resource group not created.\", environmentDto.getCloudPlatform());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDg3MjEz", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#pullrequestreview-425087213", "createdAt": "2020-06-05T08:11:44Z", "commit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoxMTo0NFrOGfkqoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoxMTo0NFrOGfkqoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc1OTc3Nw==", "bodyText": "Am I missing here something? The class looks a little over-engineered. I mean the usage of function reference here.", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435759777", "createdAt": "2020-06-05T08:11:44Z", "author": {"login": "attilapalfi92"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -348,19 +352,54 @@ public void deleteManagedDisks(AzureClient azureClient, Collection<String> manag\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n-    public void deleteDatabaseServer(AzureClient azureClient, String databaseServerId) {\n-        LOGGER.info(\"Delete database server: {}\", databaseServerId);\n-        List<String> failedToDeleteDatabaseServer = new ArrayList<>();\n-        Completable databaseServerDeleteCompletable = azureClient.deleteDatabaseServer(databaseServerId)\n-                .doOnError(throwable -> {\n-                    LOGGER.error(\"Error happend on azure database server delete: {}\", databaseServerId, throwable);\n-                    failedToDeleteDatabaseServer.add(databaseServerId);\n-                })\n-                .subscribeOn(Schedulers.io());\n-        databaseServerDeleteCompletable.await();\n-        if (!failedToDeleteDatabaseServer.isEmpty()) {\n-            LOGGER.error(\"Can't delete database server: {}\", failedToDeleteDatabaseServer);\n-            throw new CloudbreakServiceException(\"Can't delete database server: \" + failedToDeleteDatabaseServer);\n+    public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n+        return handleDeleteErrors(resourceId -> {\n+            LOGGER.info(\"Delete database server: {}\", resourceId);\n+            azureClient.deleteDatabaseServer(resourceId);\n+        }, \"DatabaseServer\", databaseServerId, true);\n+    }\n+\n+    @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n+    public Optional<String> deleteResourceGroup(AzureClient azureClient, String resourceGroupId, boolean cancelException) {\n+        return handleDeleteErrors(azureClient::deleteResourceGroup, \"ResourceGroup\", resourceGroupId, cancelException);\n+    }\n+\n+    private <T> Optional<String> handleDeleteErrors(Consumer<String> deleteConsumer, String resourceType, String resourceId, boolean cancelException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDkyNjY0", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#pullrequestreview-425092664", "createdAt": "2020-06-05T08:19:53Z", "commit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoxOTo1NFrOGfk6oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyMzoxNlrOGflB7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mzg3Mg==", "bodyText": "Please remove the if here and use the composite pattern to determine the specific cloud-api that is needed to delete the prerequisites. Move every azure specific implementation to the cloud-azure module.", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435763872", "createdAt": "2020-06-05T08:19:54Z", "author": {"login": "attilapalfi92"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package com.sequenceiq.environment.environment.flow.deletion.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteHandlerSelectors.DELETE_PREREQUISITES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteStateSelectors.FINISH_ENV_DELETE_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupUsagePattern.USE_MULTIPLE;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.Setup;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudPlatformVariant;\n+import com.sequenceiq.cloudbreak.cloud.model.Platform;\n+import com.sequenceiq.cloudbreak.cloud.model.Variant;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.AzurePrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.EnvironmentPrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class PrerequisitesDeleteHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PrerequisitesDeleteHandler.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private final CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    protected PrerequisitesDeleteHandler(EventSender eventSender, EnvironmentService environmentService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter, CloudPlatformConnectors cloudPlatformConnectors) {\n+        super(eventSender);\n+        this.environmentService = environmentService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+    }\n+\n+    @Override\n+    public String selector() {\n+        return DELETE_PREREQUISITES_EVENT.selector();\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                if (AZURE.name().equals(environmentDto.getCloudPlatform())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NTc0MQ==", "bodyText": "See PublicKeyCreationHandler for reference.", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r435765741", "createdAt": "2020-06-05T08:23:16Z", "author": {"login": "attilapalfi92"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package com.sequenceiq.environment.environment.flow.deletion.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteHandlerSelectors.DELETE_PREREQUISITES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteStateSelectors.FINISH_ENV_DELETE_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupUsagePattern.USE_MULTIPLE;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.Setup;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudPlatformVariant;\n+import com.sequenceiq.cloudbreak.cloud.model.Platform;\n+import com.sequenceiq.cloudbreak.cloud.model.Variant;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.AzurePrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.EnvironmentPrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class PrerequisitesDeleteHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PrerequisitesDeleteHandler.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private final CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    protected PrerequisitesDeleteHandler(EventSender eventSender, EnvironmentService environmentService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter, CloudPlatformConnectors cloudPlatformConnectors) {\n+        super(eventSender);\n+        this.environmentService = environmentService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+    }\n+\n+    @Override\n+    public String selector() {\n+        return DELETE_PREREQUISITES_EVENT.selector();\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                if (AZURE.name().equals(environmentDto.getCloudPlatform())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mzg3Mg=="}, "originalCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ab2fab3841d1e6c30fbe609e468898937e975c6d", "committedDate": "2020-06-04T14:01:26Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}, "afterCommit": {"oid": "6b772be045b9b23690e9ae43b524c8337e27207b", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6b772be045b9b23690e9ae43b524c8337e27207b", "committedDate": "2020-06-08T19:15:03Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b772be045b9b23690e9ae43b524c8337e27207b", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6b772be045b9b23690e9ae43b524c8337e27207b", "committedDate": "2020-06-08T19:15:03Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}, "afterCommit": {"oid": "a315e32ff471175f12ae318da175f121c351c0da", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a315e32ff471175f12ae318da175f121c351c0da", "committedDate": "2020-06-08T19:19:16Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2ODc1MTE1", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#pullrequestreview-426875115", "createdAt": "2020-06-09T07:51:09Z", "commit": {"oid": "a315e32ff471175f12ae318da175f121c351c0da"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo1MTowOVrOGg87XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo1MTowOVrOGg87XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwNTg1Mw==", "bodyText": "Why is this if still here? Please remove it like in PublicKeyCreationHandler", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r437205853", "createdAt": "2020-06-09T07:51:09Z", "author": {"login": "attilapalfi92"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/deletion/handler/PrerequisitesDeleteHandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package com.sequenceiq.environment.environment.flow.deletion.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteHandlerSelectors.DELETE_PREREQUISITES_EVENT;\n+import static com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteStateSelectors.FINISH_ENV_DELETE_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupUsagePattern.USE_MULTIPLE;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.Setup;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudPlatformVariant;\n+import com.sequenceiq.cloudbreak.cloud.model.Platform;\n+import com.sequenceiq.cloudbreak.cloud.model.Variant;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.AzurePrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.prerequisite.EnvironmentPrerequisiteDeleteRequest;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.deletion.event.EnvDeleteFailedEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class PrerequisitesDeleteHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PrerequisitesDeleteHandler.class);\n+\n+    private final EnvironmentService environmentService;\n+\n+    private final CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private final CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    protected PrerequisitesDeleteHandler(EventSender eventSender, EnvironmentService environmentService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter, CloudPlatformConnectors cloudPlatformConnectors) {\n+        super(eventSender);\n+        this.environmentService = environmentService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+    }\n+\n+    @Override\n+    public String selector() {\n+        return DELETE_PREREQUISITES_EVENT.selector();\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                if (AZURE.name().equals(environmentDto.getCloudPlatform())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mzg3Mg=="}, "originalCommit": {"oid": "ab2fab3841d1e6c30fbe609e468898937e975c6d"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a315e32ff471175f12ae318da175f121c351c0da", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a315e32ff471175f12ae318da175f121c351c0da", "committedDate": "2020-06-08T19:19:16Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}, "afterCommit": {"oid": "def722a112341b92686aa7e4ad548b806bcaeb00", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/def722a112341b92686aa7e4ad548b806bcaeb00", "committedDate": "2020-06-09T08:04:48Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2ODkyNjQx", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#pullrequestreview-426892641", "createdAt": "2020-06-09T08:14:17Z", "commit": {"oid": "def722a112341b92686aa7e4ad548b806bcaeb00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTkyNDkx", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#pullrequestreview-426992491", "createdAt": "2020-06-09T10:10:54Z", "commit": {"oid": "def722a112341b92686aa7e4ad548b806bcaeb00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxMDo1NFrOGhCf1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxMDo1NFrOGhCf1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5NzExMA==", "bodyText": "cancelException is not passed here", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#discussion_r437297110", "createdAt": "2020-06-09T10:10:54Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -348,19 +352,53 @@ public void deleteManagedDisks(AzureClient azureClient, Collection<String> manag\n     }\n \n     @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n-    public void deleteDatabaseServer(AzureClient azureClient, String databaseServerId) {\n-        LOGGER.info(\"Delete database server: {}\", databaseServerId);\n-        List<String> failedToDeleteDatabaseServer = new ArrayList<>();\n-        Completable databaseServerDeleteCompletable = azureClient.deleteDatabaseServer(databaseServerId)\n-                .doOnError(throwable -> {\n-                    LOGGER.error(\"Error happend on azure database server delete: {}\", databaseServerId, throwable);\n-                    failedToDeleteDatabaseServer.add(databaseServerId);\n-                })\n-                .subscribeOn(Schedulers.io());\n-        databaseServerDeleteCompletable.await();\n-        if (!failedToDeleteDatabaseServer.isEmpty()) {\n-            LOGGER.error(\"Can't delete database server: {}\", failedToDeleteDatabaseServer);\n-            throw new CloudbreakServiceException(\"Can't delete database server: \" + failedToDeleteDatabaseServer);\n+    public Optional<String> deleteDatabaseServer(AzureClient azureClient, String databaseServerId, boolean cancelException) {\n+        return handleDeleteErrors(azureClient::deleteDatabaseServer, \"DatabaseServer\", databaseServerId, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def722a112341b92686aa7e4ad548b806bcaeb00"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fde758cedf9eb6a7bfc75edaa35680d129aeadc", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0fde758cedf9eb6a7bfc75edaa35680d129aeadc", "committedDate": "2020-06-09T10:17:25Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "def722a112341b92686aa7e4ad548b806bcaeb00", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/def722a112341b92686aa7e4ad548b806bcaeb00", "committedDate": "2020-06-09T08:04:48Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}, "afterCommit": {"oid": "0fde758cedf9eb6a7bfc75edaa35680d129aeadc", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0fde758cedf9eb6a7bfc75edaa35680d129aeadc", "committedDate": "2020-06-09T10:17:25Z", "message": "CB-7267 [ASRG] Implement resource group termination step"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDI5Njg4", "url": "https://github.com/hortonworks/cloudbreak/pull/8204#pullrequestreview-427029688", "createdAt": "2020-06-09T11:05:43Z", "commit": {"oid": "def722a112341b92686aa7e4ad548b806bcaeb00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1795, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}