{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MDE4Mzcw", "number": 7370, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowNDozN1rODjueSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjowMzozM1rODjym5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Nzg4MTcxOnYy", "diffSide": "LEFT", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowNDozN1rOFvsbEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowNDozN1rOFvsbEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NTIxOQ==", "bodyText": "Feels good!", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385555219", "createdAt": "2020-02-28T08:04:37Z", "author": {"login": "lnardai"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -308,23 +308,19 @@ public boolean checkRight(String actorCrn, String userCrn, String right, String\n             LOGGER.info(\"InternalCrn, allow right {} for user {}!\", right, userCrn);\n             return true;\n         }\n-        if (isReadRight(right)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2483078740561caa76c214f321a86f1f9394b522"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODQwOTY2OnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/DisabledPermissionChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTowNjo0OFrOFvxY1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTowNjo0OFrOFvxY1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzNjU2NQ==", "bodyText": "Logger not used.", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385636565", "createdAt": "2020-02-28T11:06:48Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/DisabledPermissionChecker.java", "diffHunk": "@@ -6,21 +6,25 @@\n \n import org.aspectj.lang.ProceedingJoinPoint;\n import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n-import com.sequenceiq.authorization.repository.DisableCheckPermissions;\n-import com.sequenceiq.authorization.resource.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n \n @Component\n public class DisabledPermissionChecker implements PermissionChecker<DisableCheckPermissions> {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(DisabledPermissionChecker.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODQyMDM4OnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ResourceCrnListPermissionChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMToxMDo0NFrOFvxffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyMDowNVrOFv0rRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzODI3MQ==", "bodyText": "This is what we can't do in batch operations as of now right?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385638271", "createdAt": "2020-02-28T11:10:44Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ResourceCrnListPermissionChecker.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.sequenceiq.authorization.service;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+\n+import javax.inject.Inject;\n+\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.annotation.CheckPermissionByResourceCrnList;\n+import com.sequenceiq.authorization.annotation.ResourceCrnList;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+\n+@Component\n+public class ResourceCrnListPermissionChecker implements PermissionChecker<CheckPermissionByResourceCrnList> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceCrnListPermissionChecker.class);\n+\n+    @Inject\n+    private CommonPermissionCheckingUtils commonPermissionCheckingUtils;\n+\n+    @Override\n+    public <T extends Annotation> Object checkPermissions(T rawMethodAnnotation, AuthorizationResourceType resourceType, String userCrn,\n+            ProceedingJoinPoint proceedingJoinPoint, MethodSignature methodSignature, long startTime) {\n+        CheckPermissionByResourceCrnList methodAnnotation = (CheckPermissionByResourceCrnList) rawMethodAnnotation;\n+        Collection<String> resourceCrns = commonPermissionCheckingUtils\n+                .getParameter(proceedingJoinPoint, methodSignature, ResourceCrnList.class, Collection.class);\n+        if (!resourceCrns.isEmpty()) {\n+            AuthorizationResourceAction action = methodAnnotation.action();\n+            resourceCrns.stream().forEach(resourceCrn ->\n+                    commonPermissionCheckingUtils.checkPermissionForUserOnResource(resourceType, action, userCrn, resourceCrn));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MDQzNw==", "bodyText": "Yesterday Han David introduced a method for it, i'll will refactor this to use that bulk call", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385690437", "createdAt": "2020-02-28T13:20:05Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ResourceCrnListPermissionChecker.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.sequenceiq.authorization.service;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+\n+import javax.inject.Inject;\n+\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.annotation.CheckPermissionByResourceCrnList;\n+import com.sequenceiq.authorization.annotation.ResourceCrnList;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+\n+@Component\n+public class ResourceCrnListPermissionChecker implements PermissionChecker<CheckPermissionByResourceCrnList> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceCrnListPermissionChecker.class);\n+\n+    @Inject\n+    private CommonPermissionCheckingUtils commonPermissionCheckingUtils;\n+\n+    @Override\n+    public <T extends Annotation> Object checkPermissions(T rawMethodAnnotation, AuthorizationResourceType resourceType, String userCrn,\n+            ProceedingJoinPoint proceedingJoinPoint, MethodSignature methodSignature, long startTime) {\n+        CheckPermissionByResourceCrnList methodAnnotation = (CheckPermissionByResourceCrnList) rawMethodAnnotation;\n+        Collection<String> resourceCrns = commonPermissionCheckingUtils\n+                .getParameter(proceedingJoinPoint, methodSignature, ResourceCrnList.class, Collection.class);\n+        if (!resourceCrns.isEmpty()) {\n+            AuthorizationResourceAction action = methodAnnotation.action();\n+            resourceCrns.stream().forEach(resourceCrn ->\n+                    commonPermissionCheckingUtils.checkPermissionForUserOnResource(resourceType, action, userCrn, resourceCrn));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzODI3MQ=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODQ1Mjg2OnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ResourceCrnPermissionChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMToyMjo0NlrOFvxzRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoxNDozMlrOFv0iYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0MzMzNA==", "bodyText": "What happens if there is multiple ResourceCrn specified? Or that is not possible in that context?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385643334", "createdAt": "2020-02-28T11:22:46Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ResourceCrnPermissionChecker.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.sequenceiq.authorization.service;\n+\n+import java.lang.annotation.Annotation;\n+\n+import javax.inject.Inject;\n+\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.annotation.CheckPermissionByResourceCrn;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.cloudbreak.auth.security.internal.ResourceCrn;\n+\n+@Component\n+public class ResourceCrnPermissionChecker implements PermissionChecker<CheckPermissionByResourceCrn> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceCrnPermissionChecker.class);\n+\n+    @Inject\n+    private CommonPermissionCheckingUtils commonPermissionCheckingUtils;\n+\n+    @Override\n+    public <T extends Annotation> Object checkPermissions(T rawMethodAnnotation, AuthorizationResourceType resourceType, String userCrn,\n+            ProceedingJoinPoint proceedingJoinPoint, MethodSignature methodSignature, long startTime) {\n+        CheckPermissionByResourceCrn methodAnnotation = (CheckPermissionByResourceCrn) rawMethodAnnotation;\n+        String resourceCrn = commonPermissionCheckingUtils.getParameter(proceedingJoinPoint, methodSignature, ResourceCrn.class, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4ODE2MA==", "bodyText": "There is another permissionchecker for resourcecrnlist if it is a collection, if someone annotates two string parameters with resourcecrn, i think the first one will be checked only, i can make an exception if someone provided more crns, because everyone should use a collection in this case i think", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385688160", "createdAt": "2020-02-28T13:14:32Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/ResourceCrnPermissionChecker.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.sequenceiq.authorization.service;\n+\n+import java.lang.annotation.Annotation;\n+\n+import javax.inject.Inject;\n+\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.annotation.CheckPermissionByResourceCrn;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.cloudbreak.auth.security.internal.ResourceCrn;\n+\n+@Component\n+public class ResourceCrnPermissionChecker implements PermissionChecker<CheckPermissionByResourceCrn> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceCrnPermissionChecker.class);\n+\n+    @Inject\n+    private CommonPermissionCheckingUtils commonPermissionCheckingUtils;\n+\n+    @Override\n+    public <T extends Annotation> Object checkPermissions(T rawMethodAnnotation, AuthorizationResourceType resourceType, String userCrn,\n+            ProceedingJoinPoint proceedingJoinPoint, MethodSignature methodSignature, long startTime) {\n+        CheckPermissionByResourceCrn methodAnnotation = (CheckPermissionByResourceCrn) rawMethodAnnotation;\n+        String resourceCrn = commonPermissionCheckingUtils.getParameter(proceedingJoinPoint, methodSignature, ResourceCrn.class, String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0MzMzNA=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODQ1OTQ1OnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/UmsAuthorizationService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMToyNTowN1rOFvx3SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozMzoyMVrOFv5Byg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0NDM2MA==", "bodyText": "Maybe we should enhance the error message here mention the Management Console Admin role here as well, or just tell a customer that he need's to get higher account level permissions for these actions.", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385644360", "createdAt": "2020-02-28T11:25:07Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/UmsAuthorizationService.java", "diffHunk": "@@ -26,35 +26,56 @@\n     @Inject\n     private GrpcUmsClient umsClient;\n \n-    public void checkRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action, String unauthorizedMessage) {\n-        if (!umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resource, action), getRequestId())) {\n+    // ACCOUNT LEVEL\n+\n+    public void checkRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action) {\n+        String right = RightUtils.getRight(resourceType, action);\n+        String unauthorizedMessage = String.format(\"You have no right to perform %s. This requires one of these roles: %s. \"\n+                        + \"You can request access through IAM service from an administrator.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5NTQ2Ng==", "bodyText": "we are giving this error message in every non happy use case and i think we need a logic to find out what role is needed in a case of right, we had a logic for that but it was ugly and it can become obsolete quickly, so I removed it months ago, anyway we need to find a good and maintainable logic for that", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385695466", "createdAt": "2020-02-28T13:30:27Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/UmsAuthorizationService.java", "diffHunk": "@@ -26,35 +26,56 @@\n     @Inject\n     private GrpcUmsClient umsClient;\n \n-    public void checkRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action, String unauthorizedMessage) {\n-        if (!umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resource, action), getRequestId())) {\n+    // ACCOUNT LEVEL\n+\n+    public void checkRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action) {\n+        String right = RightUtils.getRight(resourceType, action);\n+        String unauthorizedMessage = String.format(\"You have no right to perform %s. This requires one of these roles: %s. \"\n+                        + \"You can request access through IAM service from an administrator.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0NDM2MA=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2MTczOA==", "bodyText": "i have added this to the TODO list", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385761738", "createdAt": "2020-02-28T15:33:21Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/UmsAuthorizationService.java", "diffHunk": "@@ -26,35 +26,56 @@\n     @Inject\n     private GrpcUmsClient umsClient;\n \n-    public void checkRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action, String unauthorizedMessage) {\n-        if (!umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resource, action), getRequestId())) {\n+    // ACCOUNT LEVEL\n+\n+    public void checkRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action) {\n+        String right = RightUtils.getRight(resourceType, action);\n+        String unauthorizedMessage = String.format(\"You have no right to perform %s. This requires one of these roles: %s. \"\n+                        + \"You can request access through IAM service from an administrator.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0NDM2MA=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODQ3MTMyOnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/UmsAuthorizationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMToyOTo1MVrOFvx-jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoxODoxNlrOFv0oMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0NjIyMA==", "bodyText": "I saw multiple of these comments.\nMight be better to split the 2 implementation into 2 different classes.\nOne does the account Level AuthZ and one the Resource Level.", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385646220", "createdAt": "2020-02-28T11:29:51Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/UmsAuthorizationService.java", "diffHunk": "@@ -26,35 +26,56 @@\n     @Inject\n     private GrpcUmsClient umsClient;\n \n-    public void checkRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action, String unauthorizedMessage) {\n-        if (!umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resource, action), getRequestId())) {\n+    // ACCOUNT LEVEL\n+\n+    public void checkRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action) {\n+        String right = RightUtils.getRight(resourceType, action);\n+        String unauthorizedMessage = String.format(\"You have no right to perform %s. This requires one of these roles: %s. \"\n+                        + \"You can request access through IAM service from an administrator.\",\n+                right, \"PowerUser\");\n+        checkRightOfUser(userCrn, resourceType, action, unauthorizedMessage);\n+    }\n+\n+    public Boolean hasRightOfUser(String userCrn, String resourceType, String action) {\n+        Optional<AuthorizationResourceType> resourceEnum = AuthorizationResourceType.getByName(resourceType);\n+        Optional<AuthorizationResourceAction> actionEnum = AuthorizationResourceAction.getByName(action);\n+        if (!resourceEnum.isPresent() || !actionEnum.isPresent()) {\n+            throw new BadRequestException(\"Resource or action cannot be found by request!\");\n+        }\n+        if (!hasRightOfUser(userCrn, resourceEnum.get(), actionEnum.get())) {\n+            return Boolean.FALSE;\n+        }\n+        return Boolean.TRUE;\n+    }\n+\n+    private void checkRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action, String unauthorizedMessage) {\n+        if (!hasRightOfUser(userCrn, resourceType, action)) {\n             LOGGER.error(unauthorizedMessage);\n             throw new AccessDeniedException(unauthorizedMessage);\n         }\n     }\n \n-    public boolean hasRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action) {\n-        return umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resource, action), getRequestId());\n+    private boolean hasRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action) {\n+        return umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resourceType, action), getRequestId());\n     }\n \n-    public void checkRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action) {\n+    // RESOURCE LEVEL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4OTY0OA==", "bodyText": "Yesterday I renamed method so I think we can differentiate them within this class, but I'll write down your suggestion as a task.", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385689648", "createdAt": "2020-02-28T13:18:16Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/UmsAuthorizationService.java", "diffHunk": "@@ -26,35 +26,56 @@\n     @Inject\n     private GrpcUmsClient umsClient;\n \n-    public void checkRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action, String unauthorizedMessage) {\n-        if (!umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resource, action), getRequestId())) {\n+    // ACCOUNT LEVEL\n+\n+    public void checkRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action) {\n+        String right = RightUtils.getRight(resourceType, action);\n+        String unauthorizedMessage = String.format(\"You have no right to perform %s. This requires one of these roles: %s. \"\n+                        + \"You can request access through IAM service from an administrator.\",\n+                right, \"PowerUser\");\n+        checkRightOfUser(userCrn, resourceType, action, unauthorizedMessage);\n+    }\n+\n+    public Boolean hasRightOfUser(String userCrn, String resourceType, String action) {\n+        Optional<AuthorizationResourceType> resourceEnum = AuthorizationResourceType.getByName(resourceType);\n+        Optional<AuthorizationResourceAction> actionEnum = AuthorizationResourceAction.getByName(action);\n+        if (!resourceEnum.isPresent() || !actionEnum.isPresent()) {\n+            throw new BadRequestException(\"Resource or action cannot be found by request!\");\n+        }\n+        if (!hasRightOfUser(userCrn, resourceEnum.get(), actionEnum.get())) {\n+            return Boolean.FALSE;\n+        }\n+        return Boolean.TRUE;\n+    }\n+\n+    private void checkRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action, String unauthorizedMessage) {\n+        if (!hasRightOfUser(userCrn, resourceType, action)) {\n             LOGGER.error(unauthorizedMessage);\n             throw new AccessDeniedException(unauthorizedMessage);\n         }\n     }\n \n-    public boolean hasRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action) {\n-        return umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resource, action), getRequestId());\n+    private boolean hasRightOfUser(String userCrn, AuthorizationResourceType resourceType, AuthorizationResourceAction action) {\n+        return umsClient.checkRight(userCrn, userCrn, RightUtils.getRight(resourceType, action), getRequestId());\n     }\n \n-    public void checkRightOfUserForResource(String userCrn, AuthorizationResource resource, ResourceAction action) {\n+    // RESOURCE LEVEL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0NjIyMA=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODUwNDU4OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo0MjowMFrOFvyR7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyNzo1OFrOFv06lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1MTE4MA==", "bodyText": "rootProject.name is twice, might be a copy paste error?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385651180", "createdAt": "2020-02-28T11:42:00Z", "author": {"login": "lnardai"}, "path": "settings.gradle", "diffHunk": "@@ -50,8 +50,8 @@ include 'client-cm'\n include 'freeipa-client'\n include 'usage-collection'\n include 'cluster-proxy'\n-include 'authorization'\n-include 'workspace-authorization-api'\n+\n+rootProject.name = 'cloudbreak'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5NDM1OQ==", "bodyText": "yep :)", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385694359", "createdAt": "2020-02-28T13:27:58Z", "author": {"login": "horadla23"}, "path": "settings.gradle", "diffHunk": "@@ -50,8 +50,8 @@ include 'client-cm'\n include 'freeipa-client'\n include 'usage-collection'\n include 'cluster-proxy'\n-include 'authorization'\n-include 'workspace-authorization-api'\n+\n+rootProject.name = 'cloudbreak'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1MTE4MA=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODUyMDU2OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/StackService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo0ODoxNlrOFvybWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyMDo0OVrOFv0tAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1MzU5Mg==", "bodyText": "Interesting...", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385653592", "createdAt": "2020-02-28T11:48:16Z", "author": {"login": "lnardai"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/StackService.java", "diffHunk": "@@ -657,7 +669,6 @@ public Stack save(Stack stack) {\n     }\n \n     public FlowIdentifier updateImage(Long stackId, Long workspaceId, String imageId, String imageCatalogName, String imageCatalogUrl, User user) {\n-        permissionCheckingUtils.checkPermissionForUser(AuthorizationResource.DATAHUB, ResourceAction.WRITE, user.getUserCrn());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MDg4Mw==", "bodyText": "Just an usual random permission check in the code :)", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385690883", "createdAt": "2020-02-28T13:20:49Z", "author": {"login": "horadla23"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/StackService.java", "diffHunk": "@@ -657,7 +669,6 @@ public Stack save(Stack stack) {\n     }\n \n     public FlowIdentifier updateImage(Long stackId, Long workspaceId, String imageId, String imageCatalogName, String imageCatalogUrl, User user) {\n-        permissionCheckingUtils.checkPermissionForUser(AuthorizationResource.DATAHUB, ResourceAction.WRITE, user.getUserCrn());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1MzU5Mg=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODUzMTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo1Mjo0NFrOFvyhyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozNDo1NlrOFv5Fvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NTI0Mw==", "bodyText": "Would't these be better on the Endpoint?\nI'm fine with this, as the Endpoint is already overLoaded with annotations, just asking.", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385655243", "createdAt": "2020-02-28T11:52:44Z", "author": {"login": "lnardai"}, "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "diffHunk": "@@ -90,14 +99,16 @@ public StackViewV4Responses list(String environmentName, String environmentCrn)\n     }\n \n     @Override\n-    public StackV4Response post(@Valid DistroXV1Request request) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5NjMyMw==", "bodyText": "I made the annotation as method annotation because I think we will have controller which has method both with resource level permission check and account level permission check so we need it as a method annotation, we can make it for a class too, but it requires addition logic, I decided to not implement that for now", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385696323", "createdAt": "2020-02-28T13:32:22Z", "author": {"login": "horadla23"}, "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "diffHunk": "@@ -90,14 +99,16 @@ public StackViewV4Responses list(String environmentName, String environmentCrn)\n     }\n \n     @Override\n-    public StackV4Response post(@Valid DistroXV1Request request) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NTI0Mw=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2Mjc1MA==", "bodyText": "added to TODO list", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385762750", "createdAt": "2020-02-28T15:34:56Z", "author": {"login": "horadla23"}, "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "diffHunk": "@@ -90,14 +99,16 @@ public StackViewV4Responses list(String environmentName, String environmentCrn)\n     }\n \n     @Override\n-    public StackV4Response post(@Valid DistroXV1Request request) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NTI0Mw=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODUzNjc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo1NTowNFrOFvylOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzozNToxNlrOFv1HUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NjEyMQ==", "bodyText": "Shouldn't this be @ResourceCrn? Also is the annotation at the correct place?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385656121", "createdAt": "2020-02-28T11:55:04Z", "author": {"login": "lnardai"}, "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "diffHunk": "@@ -158,150 +173,172 @@ private void multideleteByCrn(DistroXMultiDeleteV1Request multiDeleteRequest, Bo\n     }\n \n     @Override\n-    public void syncByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByName(@ResourceName String name) {\n         stackOperations.sync(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void syncByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByCrn(@ResourceCrn String crn) {\n         stackOperations.sync(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void retryByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByName(@ResourceName String name) {\n         stackOperations.retry(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public List<RetryableFlowResponse> listRetryableFlows(String name) {\n+    @CheckPermissionByAccount\n+    public List<RetryableFlowResponse> listRetryableFlows(@ResourceName String name) {\n         List<RetryableFlow> retryableFlows = stackOperations.getRetryableFlows(name, workspaceService.getForCurrentUser().getId());\n         return retryableFlows.stream()\n                 .map(retryable -> Builder.builder().setName(retryable.getName()).setFailDate(retryable.getFailDate()).build())\n                 .collect(Collectors.toList());\n     }\n \n     @Override\n-    public void retryByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByCrn(@ResourceCrn String crn) {\n         stackOperations.retry(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStopByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByName(@ResourceName String name) {\n         stackOperations.putStop(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n-\n     }\n \n     @Override\n-    public void putStopByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrn(@ResourceCrn String crn) {\n         stackOperations.putStop(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStopByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStopByName);\n     }\n \n     @Override\n-    public void putStopByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStopByCrn);\n     }\n \n     @Override\n-    public void putStartByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByName(@ResourceName String name) {\n         stackOperations.putStart(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStartByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrn(@ResourceCrn String crn) {\n         stackOperations.putStart(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStartByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStartByName);\n     }\n \n     @Override\n-    public void putStartByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStartByCrn);\n     }\n \n     @Override\n-    public void putScalingByName(String name, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByName(@ResourceName String name, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByName(name).getId());\n         stackOperations.putScaling(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void putScalingByCrn(String crn, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByCrn(@ResourceCrn String crn, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByCrn(crn).getId());\n         stackOperations.putScaling(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void repairClusterByName(String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByName(@ResourceName String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public void repairClusterByCrn(String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByCrn(@ResourceCrn String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofCrn(crn),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @Valid DistroXV1Request stackRequest) {\n+    @CheckPermissionByAccount\n+    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @ResourceName @Valid DistroXV1Request stackRequest) {\n         return stackOperations.postStackForBlueprint(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId(),\n                 stackRequestConverter.convert(stackRequest));\n     }\n \n     @Override\n-    public GeneratedBlueprintV4Response postStackForBlueprintByCrn(String crn, @Valid DistroXV1Request stackRequest) {\n+    @CheckPermissionByAccount\n+    public GeneratedBlueprintV4Response postStackForBlueprintByCrn(String crn, @ResourceName @Valid DistroXV1Request stackRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5NzYxOA==", "bodyText": "I had to solve conflicts on this class during previous months countless time, so it is incorrect yes, but anyway is method has annotation CheckPermissionByAccount then we do not care about authz related annotations on parameters", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385697618", "createdAt": "2020-02-28T13:35:16Z", "author": {"login": "horadla23"}, "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "diffHunk": "@@ -158,150 +173,172 @@ private void multideleteByCrn(DistroXMultiDeleteV1Request multiDeleteRequest, Bo\n     }\n \n     @Override\n-    public void syncByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByName(@ResourceName String name) {\n         stackOperations.sync(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void syncByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByCrn(@ResourceCrn String crn) {\n         stackOperations.sync(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void retryByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByName(@ResourceName String name) {\n         stackOperations.retry(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public List<RetryableFlowResponse> listRetryableFlows(String name) {\n+    @CheckPermissionByAccount\n+    public List<RetryableFlowResponse> listRetryableFlows(@ResourceName String name) {\n         List<RetryableFlow> retryableFlows = stackOperations.getRetryableFlows(name, workspaceService.getForCurrentUser().getId());\n         return retryableFlows.stream()\n                 .map(retryable -> Builder.builder().setName(retryable.getName()).setFailDate(retryable.getFailDate()).build())\n                 .collect(Collectors.toList());\n     }\n \n     @Override\n-    public void retryByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByCrn(@ResourceCrn String crn) {\n         stackOperations.retry(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStopByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByName(@ResourceName String name) {\n         stackOperations.putStop(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n-\n     }\n \n     @Override\n-    public void putStopByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrn(@ResourceCrn String crn) {\n         stackOperations.putStop(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStopByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStopByName);\n     }\n \n     @Override\n-    public void putStopByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStopByCrn);\n     }\n \n     @Override\n-    public void putStartByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByName(@ResourceName String name) {\n         stackOperations.putStart(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStartByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrn(@ResourceCrn String crn) {\n         stackOperations.putStart(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStartByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStartByName);\n     }\n \n     @Override\n-    public void putStartByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStartByCrn);\n     }\n \n     @Override\n-    public void putScalingByName(String name, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByName(@ResourceName String name, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByName(name).getId());\n         stackOperations.putScaling(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void putScalingByCrn(String crn, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByCrn(@ResourceCrn String crn, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByCrn(crn).getId());\n         stackOperations.putScaling(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void repairClusterByName(String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByName(@ResourceName String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public void repairClusterByCrn(String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByCrn(@ResourceCrn String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofCrn(crn),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @Valid DistroXV1Request stackRequest) {\n+    @CheckPermissionByAccount\n+    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @ResourceName @Valid DistroXV1Request stackRequest) {\n         return stackOperations.postStackForBlueprint(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId(),\n                 stackRequestConverter.convert(stackRequest));\n     }\n \n     @Override\n-    public GeneratedBlueprintV4Response postStackForBlueprintByCrn(String crn, @Valid DistroXV1Request stackRequest) {\n+    @CheckPermissionByAccount\n+    public GeneratedBlueprintV4Response postStackForBlueprintByCrn(String crn, @ResourceName @Valid DistroXV1Request stackRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NjEyMQ=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODU0MDE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTo1NjoxOVrOFvynOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzozNTo0NlrOFv1IOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NjYzNA==", "bodyText": "Same here, is the annotation at the correct place?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385656634", "createdAt": "2020-02-28T11:56:19Z", "author": {"login": "lnardai"}, "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "diffHunk": "@@ -158,150 +173,172 @@ private void multideleteByCrn(DistroXMultiDeleteV1Request multiDeleteRequest, Bo\n     }\n \n     @Override\n-    public void syncByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByName(@ResourceName String name) {\n         stackOperations.sync(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void syncByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByCrn(@ResourceCrn String crn) {\n         stackOperations.sync(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void retryByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByName(@ResourceName String name) {\n         stackOperations.retry(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public List<RetryableFlowResponse> listRetryableFlows(String name) {\n+    @CheckPermissionByAccount\n+    public List<RetryableFlowResponse> listRetryableFlows(@ResourceName String name) {\n         List<RetryableFlow> retryableFlows = stackOperations.getRetryableFlows(name, workspaceService.getForCurrentUser().getId());\n         return retryableFlows.stream()\n                 .map(retryable -> Builder.builder().setName(retryable.getName()).setFailDate(retryable.getFailDate()).build())\n                 .collect(Collectors.toList());\n     }\n \n     @Override\n-    public void retryByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByCrn(@ResourceCrn String crn) {\n         stackOperations.retry(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStopByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByName(@ResourceName String name) {\n         stackOperations.putStop(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n-\n     }\n \n     @Override\n-    public void putStopByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrn(@ResourceCrn String crn) {\n         stackOperations.putStop(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStopByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStopByName);\n     }\n \n     @Override\n-    public void putStopByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStopByCrn);\n     }\n \n     @Override\n-    public void putStartByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByName(@ResourceName String name) {\n         stackOperations.putStart(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStartByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrn(@ResourceCrn String crn) {\n         stackOperations.putStart(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStartByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStartByName);\n     }\n \n     @Override\n-    public void putStartByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStartByCrn);\n     }\n \n     @Override\n-    public void putScalingByName(String name, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByName(@ResourceName String name, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByName(name).getId());\n         stackOperations.putScaling(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void putScalingByCrn(String crn, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByCrn(@ResourceCrn String crn, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByCrn(crn).getId());\n         stackOperations.putScaling(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void repairClusterByName(String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByName(@ResourceName String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public void repairClusterByCrn(String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByCrn(@ResourceCrn String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofCrn(crn),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @Valid DistroXV1Request stackRequest) {\n+    @CheckPermissionByAccount\n+    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @ResourceName @Valid DistroXV1Request stackRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5Nzg1MA==", "bodyText": "yes, same here", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385697850", "createdAt": "2020-02-28T13:35:46Z", "author": {"login": "horadla23"}, "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/controller/DistroXV1Controller.java", "diffHunk": "@@ -158,150 +173,172 @@ private void multideleteByCrn(DistroXMultiDeleteV1Request multiDeleteRequest, Bo\n     }\n \n     @Override\n-    public void syncByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByName(@ResourceName String name) {\n         stackOperations.sync(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void syncByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void syncByCrn(@ResourceCrn String crn) {\n         stackOperations.sync(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void retryByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByName(@ResourceName String name) {\n         stackOperations.retry(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public List<RetryableFlowResponse> listRetryableFlows(String name) {\n+    @CheckPermissionByAccount\n+    public List<RetryableFlowResponse> listRetryableFlows(@ResourceName String name) {\n         List<RetryableFlow> retryableFlows = stackOperations.getRetryableFlows(name, workspaceService.getForCurrentUser().getId());\n         return retryableFlows.stream()\n                 .map(retryable -> Builder.builder().setName(retryable.getName()).setFailDate(retryable.getFailDate()).build())\n                 .collect(Collectors.toList());\n     }\n \n     @Override\n-    public void retryByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void retryByCrn(@ResourceCrn String crn) {\n         stackOperations.retry(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStopByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByName(@ResourceName String name) {\n         stackOperations.putStop(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n-\n     }\n \n     @Override\n-    public void putStopByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrn(@ResourceCrn String crn) {\n         stackOperations.putStop(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStopByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStopByName);\n     }\n \n     @Override\n-    public void putStopByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStopByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStopByCrn);\n     }\n \n     @Override\n-    public void putStartByName(String name) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByName(@ResourceName String name) {\n         stackOperations.putStart(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId());\n \n     }\n \n     @Override\n-    public void putStartByCrn(String crn) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrn(@ResourceCrn String crn) {\n         stackOperations.putStart(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId());\n     }\n \n     @Override\n-    public void putStartByNames(List<String> names) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByNames(@ResourceNameList List<String> names) {\n         names.forEach(this::putStartByName);\n     }\n \n     @Override\n-    public void putStartByCrns(List<String> crns) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putStartByCrns(@ResourceCrnList List<String> crns) {\n         crns.forEach(this::putStartByCrn);\n     }\n \n     @Override\n-    public void putScalingByName(String name, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByName(@ResourceName String name, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByName(name).getId());\n         stackOperations.putScaling(NameOrCrn.ofName(name), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void putScalingByCrn(String crn, @Valid DistroXScaleV1Request updateRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void putScalingByCrn(@ResourceCrn String crn, @Valid DistroXScaleV1Request updateRequest) {\n         StackScaleV4Request stackScaleV4Request = scaleRequestConverter.convert(updateRequest);\n         stackScaleV4Request.setStackId(stackOperations.getStackByCrn(crn).getId());\n         stackOperations.putScaling(NameOrCrn.ofCrn(crn), workspaceService.getForCurrentUser().getId(), stackScaleV4Request);\n     }\n \n     @Override\n-    public void repairClusterByName(String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByName(@ResourceName String name, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofName(name),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public void repairClusterByCrn(String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public void repairClusterByCrn(@ResourceCrn String crn, @Valid DistroXRepairV1Request clusterRepairRequest) {\n         stackOperations.repairCluster(\n                 NameOrCrn.ofCrn(crn),\n                 workspaceService.getForCurrentUser().getId(),\n                 clusterRepairRequestConverter.convert(clusterRepairRequest));\n     }\n \n     @Override\n-    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @Valid DistroXV1Request stackRequest) {\n+    @CheckPermissionByAccount\n+    public GeneratedBlueprintV4Response postStackForBlueprintByName(String name, @ResourceName @Valid DistroXV1Request stackRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NjYzNA=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODU1OTEwOnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/controller/sdx/SdxController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjowMzozM1rOFvyx_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozNDoxMlrOFv5EBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1OTM5MA==", "bodyText": "This is an environment CRN not a Datalake CRN.\nWould this API call even work?", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385659390", "createdAt": "2020-02-28T12:03:33Z", "author": {"login": "lnardai"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/controller/sdx/SdxController.java", "diffHunk": "@@ -77,33 +86,38 @@ public SdxClusterResponse create(@ValidStackNameFormat @ValidStackNameLength Str\n     }\n \n     @Override\n-    public FlowIdentifier delete(String name, Boolean forced) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public FlowIdentifier delete(@ResourceName String name, Boolean forced) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         return sdxService.deleteSdx(userCrn, name, forced);\n     }\n \n     @Override\n-    public FlowIdentifier deleteByCrn(String clusterCrn, Boolean forced) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public FlowIdentifier deleteByCrn(@ResourceCrn String clusterCrn, Boolean forced) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         return sdxService.deleteSdxByClusterCrn(userCrn, clusterCrn, forced);\n     }\n \n     @Override\n-    public SdxClusterResponse get(String name) {\n+    @CheckPermissionByAccount\n+    public SdxClusterResponse get(@ResourceName String name) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         SdxCluster sdxCluster = sdxService.getSdxByNameInAccount(userCrn, name);\n         return sdxClusterConverter.sdxClusterToResponse(sdxCluster);\n     }\n \n     @Override\n-    public SdxClusterResponse getByCrn(String clusterCrn) {\n+    @CheckPermissionByAccount\n+    public SdxClusterResponse getByCrn(@ResourceCrn String clusterCrn) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         SdxCluster sdxCluster = sdxService.getByCrn(userCrn, clusterCrn);\n         return sdxClusterConverter.sdxClusterToResponse(sdxCluster);\n     }\n \n     @Override\n-    public List<SdxClusterResponse> getByEnvCrn(@ValidCrn String envCrn) {\n+    @CheckPermissionByAccount\n+    public List<SdxClusterResponse> getByEnvCrn(@ResourceCrn @ValidCrn String envCrn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5ODE3NA==", "bodyText": "hmm, that is a good question, i have to think about this scneario, anyway i'll remove resourcecrn from here for now", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385698174", "createdAt": "2020-02-28T13:36:28Z", "author": {"login": "horadla23"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/controller/sdx/SdxController.java", "diffHunk": "@@ -77,33 +86,38 @@ public SdxClusterResponse create(@ValidStackNameFormat @ValidStackNameLength Str\n     }\n \n     @Override\n-    public FlowIdentifier delete(String name, Boolean forced) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public FlowIdentifier delete(@ResourceName String name, Boolean forced) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         return sdxService.deleteSdx(userCrn, name, forced);\n     }\n \n     @Override\n-    public FlowIdentifier deleteByCrn(String clusterCrn, Boolean forced) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public FlowIdentifier deleteByCrn(@ResourceCrn String clusterCrn, Boolean forced) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         return sdxService.deleteSdxByClusterCrn(userCrn, clusterCrn, forced);\n     }\n \n     @Override\n-    public SdxClusterResponse get(String name) {\n+    @CheckPermissionByAccount\n+    public SdxClusterResponse get(@ResourceName String name) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         SdxCluster sdxCluster = sdxService.getSdxByNameInAccount(userCrn, name);\n         return sdxClusterConverter.sdxClusterToResponse(sdxCluster);\n     }\n \n     @Override\n-    public SdxClusterResponse getByCrn(String clusterCrn) {\n+    @CheckPermissionByAccount\n+    public SdxClusterResponse getByCrn(@ResourceCrn String clusterCrn) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         SdxCluster sdxCluster = sdxService.getByCrn(userCrn, clusterCrn);\n         return sdxClusterConverter.sdxClusterToResponse(sdxCluster);\n     }\n \n     @Override\n-    public List<SdxClusterResponse> getByEnvCrn(@ValidCrn String envCrn) {\n+    @CheckPermissionByAccount\n+    public List<SdxClusterResponse> getByEnvCrn(@ResourceCrn @ValidCrn String envCrn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1OTM5MA=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2MjMwOA==", "bodyText": "added to TODO list", "url": "https://github.com/hortonworks/cloudbreak/pull/7370#discussion_r385762308", "createdAt": "2020-02-28T15:34:12Z", "author": {"login": "horadla23"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/controller/sdx/SdxController.java", "diffHunk": "@@ -77,33 +86,38 @@ public SdxClusterResponse create(@ValidStackNameFormat @ValidStackNameLength Str\n     }\n \n     @Override\n-    public FlowIdentifier delete(String name, Boolean forced) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public FlowIdentifier delete(@ResourceName String name, Boolean forced) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         return sdxService.deleteSdx(userCrn, name, forced);\n     }\n \n     @Override\n-    public FlowIdentifier deleteByCrn(String clusterCrn, Boolean forced) {\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.WRITE)\n+    public FlowIdentifier deleteByCrn(@ResourceCrn String clusterCrn, Boolean forced) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         return sdxService.deleteSdxByClusterCrn(userCrn, clusterCrn, forced);\n     }\n \n     @Override\n-    public SdxClusterResponse get(String name) {\n+    @CheckPermissionByAccount\n+    public SdxClusterResponse get(@ResourceName String name) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         SdxCluster sdxCluster = sdxService.getSdxByNameInAccount(userCrn, name);\n         return sdxClusterConverter.sdxClusterToResponse(sdxCluster);\n     }\n \n     @Override\n-    public SdxClusterResponse getByCrn(String clusterCrn) {\n+    @CheckPermissionByAccount\n+    public SdxClusterResponse getByCrn(@ResourceCrn String clusterCrn) {\n         String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n         SdxCluster sdxCluster = sdxService.getByCrn(userCrn, clusterCrn);\n         return sdxClusterConverter.sdxClusterToResponse(sdxCluster);\n     }\n \n     @Override\n-    public List<SdxClusterResponse> getByEnvCrn(@ValidCrn String envCrn) {\n+    @CheckPermissionByAccount\n+    public List<SdxClusterResponse> getByEnvCrn(@ResourceCrn @ValidCrn String envCrn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1OTM5MA=="}, "originalCommit": {"oid": "6d23def8cfec4ab7cf82aa6ebd3b9918f26bb120"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2778, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}