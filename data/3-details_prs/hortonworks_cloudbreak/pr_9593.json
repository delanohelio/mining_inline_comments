{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzODAxMzAy", "number": 9593, "title": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services to a new version what we burned into the new image.", "bodyText": "In this commit we've introduced some changes in connection with Data Hub upgrade:\n\n\nCSD downloading: To upgrade a non-CDH service may require the same version of the CSD what the new version is. By default the old CSD files are already present in the image, therefore we need to download the new ones. This process is handled by a shell script that we add to the host at the beginning of the upgrade process.\nIn the case of Data Lake upgrade, we don't need to download the new CSD files because we're not upgrading the non-CDH services.\n\n\nUpgrading the non-CDH services (Spark, Nifi, etc...) has a different flow than the regular CDH runtime upgrade. We need to download, distribute, and activate the new parcels, then restart the affected services. There is no upgrade command to call.\nAfter the non-CDH services have been upgraded the flow continues with upgrading the CDH runtime. This whole process does not affect to the Data Lake upgrade flow. We just upgrade only the CDH version like before.", "createdAt": "2020-12-07T16:38:07Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9593", "merged": true, "mergeCommit": {"oid": "f34c5eabccc8ceb7b8f927490bc1db354089aca3"}, "closed": true, "closedAt": "2020-12-10T18:42:56Z", "author": {"login": "tiborpopovics"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdj4jgXgFqTU0NjM0NTQ1MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk3Pi4AFqTU0OTQ2MzcwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MzQ1NDUx", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546345451", "createdAt": "2020-12-07T16:58:03Z", "commit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjo1ODowM1rOIAwl9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjo1ODowM1rOIAwl9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY2NzA2Mw==", "bodyText": "We should call the method argument to services as well. We're mixing the product and services variables and it's hard to track.", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r537667063", "createdAt": "2020-12-07T16:58:03Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,114 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n             MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> services = getServices(components);\n+            ClouderaManagerProduct cdhService = getCdhService(services);\n+            setParcelRepo(services, clouderaManagerResourceApi);\n             refreshParcelRepos(clouderaManagerResourceApi);\n-            downloadParcel(stackProductVersion, parcelResourceApi, product);\n-            distributeParcel(stackProductVersion, parcelResourceApi, product);\n             if (patchUpgrade) {\n-                activateParcel(stackProductVersion, parcelResourceApi, product);\n+                installServices(services, parcelResourceApi);\n                 restartServices(clustersResourceApi);\n             } else {\n-                callUpgradeCdhCommand(stackProductVersion, clustersResourceApi);\n+                upgradeNonCdhServices(services, cdhService.getName(), parcelResourceApi);\n+                upgradeCdh(clustersResourceApi, parcelResourceApi, cdhService);\n                 restartStaleServices(mgmtServiceResourceApi, clustersResourceApi);\n             }\n-            clouderaManagerParcelService.removeUnusedParcelVersions(apiClient, parcelsResourceApi, parcelResourceApi, stack, product, stackProductVersion);\n+            removeUnusedParcels(components);\n             configService.enableKnoxAutorestartIfCmVersionAtLeast(CLOUDERAMANAGER_VERSION_7_1_0, apiClient, stack.getName());\n-        } catch (ApiException | IOException e) {\n+        } catch (ApiException e) {\n             LOGGER.info(\"Could not upgrade Cloudera Runtime services\", e);\n             throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n         }\n     }\n \n-    private ClusterComponent getStackComponent(Set<ClusterComponent> components) {\n+    private void upgradeCdh(ClustersResourceApi clustersResourceApi, ParcelResourceApi parcelResourceApi, ClouderaManagerProduct cdhService)\n+            throws ApiException, CloudbreakException {\n+        downloadParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        distributeParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        callUpgradeCdhCommand(cdhService, clustersResourceApi);\n+    }\n+\n+    private Set<ClouderaManagerProduct> getServices(Set<ClusterComponent> components) {\n         return components.stream()\n-                .filter(clusterComponent -> clusterComponent.getName().equals(com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name()))\n+                .filter(clusterComponent -> ComponentType.CDH_PRODUCT_DETAILS.equals(clusterComponent.getComponentType()))\n+                .map(this::getClouderaManagerProduct)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private void upgradeNonCdhServices(Set<ClouderaManagerProduct> services, String cdhServiceName, ParcelResourceApi parcelResourceApi)\n+            throws CloudbreakException, ApiException {\n+        Set<ClouderaManagerProduct> nonCdhServices = getNonCdhServices(services, cdhServiceName);\n+        installServices(nonCdhServices, parcelResourceApi);\n+    }\n+\n+    private void installServices(Set<ClouderaManagerProduct> products, ParcelResourceApi parcelResourceApi) throws ApiException, CloudbreakException {\n+        downloadParcel(products, parcelResourceApi);\n+        distributeParcel(products, parcelResourceApi);\n+        activateParcel(products, parcelResourceApi);\n+    }\n+\n+    private ClouderaManagerProduct getCdhService(Set<ClouderaManagerProduct> products) {\n+        return products.stream()\n+                .filter(product -> product.getName().equals(com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name()))\n                 .findFirst()\n                 .orElseThrow(() -> new NotFoundException(\"Runtime component not found!\"));\n     }\n \n+    private Set<ClouderaManagerProduct> getNonCdhServices(Set<ClouderaManagerProduct> products, String cdhProductName) {\n+        return products.stream()\n+                .filter(product -> !product.getName().equals(cdhProductName))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private ClouderaManagerProduct getClouderaManagerProduct(ClusterComponent clusterComponent) {\n+        try {\n+            return clusterComponent.getAttributes().get(ClouderaManagerProduct.class);\n+        } catch (IOException e) {\n+            LOGGER.info(\"Could not upgrade Cloudera Runtime services\", e);\n+            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private void checkParcelApiAvailability() throws CloudbreakException {\n+        clouderaManagerParcelManagementService.checkParcelApiAvailability(stack, apiClient);\n+    }\n+\n+    private void setParcelRepo(Set<ClouderaManagerProduct> products, ClouderaManagerResourceApi clouderaManagerResourceApi) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MzQ5OTI2", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546349926", "createdAt": "2020-12-07T17:02:44Z", "commit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzowMjo0NVrOIAw0dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzowMjo0NVrOIAw0dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3MDc3NA==", "bodyText": "This line can be moved to the else branch as it's only used there.", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r537670774", "createdAt": "2020-12-07T17:02:45Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,114 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n             MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> services = getServices(components);\n+            ClouderaManagerProduct cdhService = getCdhService(services);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MzU4MzI2", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546358326", "createdAt": "2020-12-07T17:12:11Z", "commit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxMjoxMVrOIAxQJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxMjoxMVrOIAxQJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3Nzg2MA==", "bodyText": "We should figure out a better method name. Maybe downloadAndActivateParcels ?", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r537677860", "createdAt": "2020-12-07T17:12:11Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,114 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n             MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> services = getServices(components);\n+            ClouderaManagerProduct cdhService = getCdhService(services);\n+            setParcelRepo(services, clouderaManagerResourceApi);\n             refreshParcelRepos(clouderaManagerResourceApi);\n-            downloadParcel(stackProductVersion, parcelResourceApi, product);\n-            distributeParcel(stackProductVersion, parcelResourceApi, product);\n             if (patchUpgrade) {\n-                activateParcel(stackProductVersion, parcelResourceApi, product);\n+                installServices(services, parcelResourceApi);\n                 restartServices(clustersResourceApi);\n             } else {\n-                callUpgradeCdhCommand(stackProductVersion, clustersResourceApi);\n+                upgradeNonCdhServices(services, cdhService.getName(), parcelResourceApi);\n+                upgradeCdh(clustersResourceApi, parcelResourceApi, cdhService);\n                 restartStaleServices(mgmtServiceResourceApi, clustersResourceApi);\n             }\n-            clouderaManagerParcelService.removeUnusedParcelVersions(apiClient, parcelsResourceApi, parcelResourceApi, stack, product, stackProductVersion);\n+            removeUnusedParcels(components);\n             configService.enableKnoxAutorestartIfCmVersionAtLeast(CLOUDERAMANAGER_VERSION_7_1_0, apiClient, stack.getName());\n-        } catch (ApiException | IOException e) {\n+        } catch (ApiException e) {\n             LOGGER.info(\"Could not upgrade Cloudera Runtime services\", e);\n             throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n         }\n     }\n \n-    private ClusterComponent getStackComponent(Set<ClusterComponent> components) {\n+    private void upgradeCdh(ClustersResourceApi clustersResourceApi, ParcelResourceApi parcelResourceApi, ClouderaManagerProduct cdhService)\n+            throws ApiException, CloudbreakException {\n+        downloadParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        distributeParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        callUpgradeCdhCommand(cdhService, clustersResourceApi);\n+    }\n+\n+    private Set<ClouderaManagerProduct> getServices(Set<ClusterComponent> components) {\n         return components.stream()\n-                .filter(clusterComponent -> clusterComponent.getName().equals(com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name()))\n+                .filter(clusterComponent -> ComponentType.CDH_PRODUCT_DETAILS.equals(clusterComponent.getComponentType()))\n+                .map(this::getClouderaManagerProduct)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private void upgradeNonCdhServices(Set<ClouderaManagerProduct> services, String cdhServiceName, ParcelResourceApi parcelResourceApi)\n+            throws CloudbreakException, ApiException {\n+        Set<ClouderaManagerProduct> nonCdhServices = getNonCdhServices(services, cdhServiceName);\n+        installServices(nonCdhServices, parcelResourceApi);\n+    }\n+\n+    private void installServices(Set<ClouderaManagerProduct> products, ParcelResourceApi parcelResourceApi) throws ApiException, CloudbreakException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MzU4OTE3", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546358917", "createdAt": "2020-12-07T17:12:54Z", "commit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxMjo1NFrOIAxSNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxMjo1NFrOIAxSNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3ODM5MA==", "bodyText": "Similarly use services instead of products.", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r537678390", "createdAt": "2020-12-07T17:12:54Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,114 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n             MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> services = getServices(components);\n+            ClouderaManagerProduct cdhService = getCdhService(services);\n+            setParcelRepo(services, clouderaManagerResourceApi);\n             refreshParcelRepos(clouderaManagerResourceApi);\n-            downloadParcel(stackProductVersion, parcelResourceApi, product);\n-            distributeParcel(stackProductVersion, parcelResourceApi, product);\n             if (patchUpgrade) {\n-                activateParcel(stackProductVersion, parcelResourceApi, product);\n+                installServices(services, parcelResourceApi);\n                 restartServices(clustersResourceApi);\n             } else {\n-                callUpgradeCdhCommand(stackProductVersion, clustersResourceApi);\n+                upgradeNonCdhServices(services, cdhService.getName(), parcelResourceApi);\n+                upgradeCdh(clustersResourceApi, parcelResourceApi, cdhService);\n                 restartStaleServices(mgmtServiceResourceApi, clustersResourceApi);\n             }\n-            clouderaManagerParcelService.removeUnusedParcelVersions(apiClient, parcelsResourceApi, parcelResourceApi, stack, product, stackProductVersion);\n+            removeUnusedParcels(components);\n             configService.enableKnoxAutorestartIfCmVersionAtLeast(CLOUDERAMANAGER_VERSION_7_1_0, apiClient, stack.getName());\n-        } catch (ApiException | IOException e) {\n+        } catch (ApiException e) {\n             LOGGER.info(\"Could not upgrade Cloudera Runtime services\", e);\n             throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n         }\n     }\n \n-    private ClusterComponent getStackComponent(Set<ClusterComponent> components) {\n+    private void upgradeCdh(ClustersResourceApi clustersResourceApi, ParcelResourceApi parcelResourceApi, ClouderaManagerProduct cdhService)\n+            throws ApiException, CloudbreakException {\n+        downloadParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        distributeParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        callUpgradeCdhCommand(cdhService, clustersResourceApi);\n+    }\n+\n+    private Set<ClouderaManagerProduct> getServices(Set<ClusterComponent> components) {\n         return components.stream()\n-                .filter(clusterComponent -> clusterComponent.getName().equals(com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name()))\n+                .filter(clusterComponent -> ComponentType.CDH_PRODUCT_DETAILS.equals(clusterComponent.getComponentType()))\n+                .map(this::getClouderaManagerProduct)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private void upgradeNonCdhServices(Set<ClouderaManagerProduct> services, String cdhServiceName, ParcelResourceApi parcelResourceApi)\n+            throws CloudbreakException, ApiException {\n+        Set<ClouderaManagerProduct> nonCdhServices = getNonCdhServices(services, cdhServiceName);\n+        installServices(nonCdhServices, parcelResourceApi);\n+    }\n+\n+    private void installServices(Set<ClouderaManagerProduct> products, ParcelResourceApi parcelResourceApi) throws ApiException, CloudbreakException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MzYwMjM4", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546360238", "createdAt": "2020-12-07T17:14:24Z", "commit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxNDoyNFrOIAxWRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxNDoyNFrOIAxWRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3OTQzMA==", "bodyText": "services", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r537679430", "createdAt": "2020-12-07T17:14:24Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,114 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n             MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> services = getServices(components);\n+            ClouderaManagerProduct cdhService = getCdhService(services);\n+            setParcelRepo(services, clouderaManagerResourceApi);\n             refreshParcelRepos(clouderaManagerResourceApi);\n-            downloadParcel(stackProductVersion, parcelResourceApi, product);\n-            distributeParcel(stackProductVersion, parcelResourceApi, product);\n             if (patchUpgrade) {\n-                activateParcel(stackProductVersion, parcelResourceApi, product);\n+                installServices(services, parcelResourceApi);\n                 restartServices(clustersResourceApi);\n             } else {\n-                callUpgradeCdhCommand(stackProductVersion, clustersResourceApi);\n+                upgradeNonCdhServices(services, cdhService.getName(), parcelResourceApi);\n+                upgradeCdh(clustersResourceApi, parcelResourceApi, cdhService);\n                 restartStaleServices(mgmtServiceResourceApi, clustersResourceApi);\n             }\n-            clouderaManagerParcelService.removeUnusedParcelVersions(apiClient, parcelsResourceApi, parcelResourceApi, stack, product, stackProductVersion);\n+            removeUnusedParcels(components);\n             configService.enableKnoxAutorestartIfCmVersionAtLeast(CLOUDERAMANAGER_VERSION_7_1_0, apiClient, stack.getName());\n-        } catch (ApiException | IOException e) {\n+        } catch (ApiException e) {\n             LOGGER.info(\"Could not upgrade Cloudera Runtime services\", e);\n             throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n         }\n     }\n \n-    private ClusterComponent getStackComponent(Set<ClusterComponent> components) {\n+    private void upgradeCdh(ClustersResourceApi clustersResourceApi, ParcelResourceApi parcelResourceApi, ClouderaManagerProduct cdhService)\n+            throws ApiException, CloudbreakException {\n+        downloadParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        distributeParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        callUpgradeCdhCommand(cdhService, clustersResourceApi);\n+    }\n+\n+    private Set<ClouderaManagerProduct> getServices(Set<ClusterComponent> components) {\n         return components.stream()\n-                .filter(clusterComponent -> clusterComponent.getName().equals(com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name()))\n+                .filter(clusterComponent -> ComponentType.CDH_PRODUCT_DETAILS.equals(clusterComponent.getComponentType()))\n+                .map(this::getClouderaManagerProduct)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private void upgradeNonCdhServices(Set<ClouderaManagerProduct> services, String cdhServiceName, ParcelResourceApi parcelResourceApi)\n+            throws CloudbreakException, ApiException {\n+        Set<ClouderaManagerProduct> nonCdhServices = getNonCdhServices(services, cdhServiceName);\n+        installServices(nonCdhServices, parcelResourceApi);\n+    }\n+\n+    private void installServices(Set<ClouderaManagerProduct> products, ParcelResourceApi parcelResourceApi) throws ApiException, CloudbreakException {\n+        downloadParcel(products, parcelResourceApi);\n+        distributeParcel(products, parcelResourceApi);\n+        activateParcel(products, parcelResourceApi);\n+    }\n+\n+    private ClouderaManagerProduct getCdhService(Set<ClouderaManagerProduct> products) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MzYwMzM5", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546360339", "createdAt": "2020-12-07T17:14:31Z", "commit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxNDozMlrOIAxWlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxNDozMlrOIAxWlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3OTUxMQ==", "bodyText": "services", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r537679511", "createdAt": "2020-12-07T17:14:32Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,114 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n             MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> services = getServices(components);\n+            ClouderaManagerProduct cdhService = getCdhService(services);\n+            setParcelRepo(services, clouderaManagerResourceApi);\n             refreshParcelRepos(clouderaManagerResourceApi);\n-            downloadParcel(stackProductVersion, parcelResourceApi, product);\n-            distributeParcel(stackProductVersion, parcelResourceApi, product);\n             if (patchUpgrade) {\n-                activateParcel(stackProductVersion, parcelResourceApi, product);\n+                installServices(services, parcelResourceApi);\n                 restartServices(clustersResourceApi);\n             } else {\n-                callUpgradeCdhCommand(stackProductVersion, clustersResourceApi);\n+                upgradeNonCdhServices(services, cdhService.getName(), parcelResourceApi);\n+                upgradeCdh(clustersResourceApi, parcelResourceApi, cdhService);\n                 restartStaleServices(mgmtServiceResourceApi, clustersResourceApi);\n             }\n-            clouderaManagerParcelService.removeUnusedParcelVersions(apiClient, parcelsResourceApi, parcelResourceApi, stack, product, stackProductVersion);\n+            removeUnusedParcels(components);\n             configService.enableKnoxAutorestartIfCmVersionAtLeast(CLOUDERAMANAGER_VERSION_7_1_0, apiClient, stack.getName());\n-        } catch (ApiException | IOException e) {\n+        } catch (ApiException e) {\n             LOGGER.info(\"Could not upgrade Cloudera Runtime services\", e);\n             throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n         }\n     }\n \n-    private ClusterComponent getStackComponent(Set<ClusterComponent> components) {\n+    private void upgradeCdh(ClustersResourceApi clustersResourceApi, ParcelResourceApi parcelResourceApi, ClouderaManagerProduct cdhService)\n+            throws ApiException, CloudbreakException {\n+        downloadParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        distributeParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        callUpgradeCdhCommand(cdhService, clustersResourceApi);\n+    }\n+\n+    private Set<ClouderaManagerProduct> getServices(Set<ClusterComponent> components) {\n         return components.stream()\n-                .filter(clusterComponent -> clusterComponent.getName().equals(com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name()))\n+                .filter(clusterComponent -> ComponentType.CDH_PRODUCT_DETAILS.equals(clusterComponent.getComponentType()))\n+                .map(this::getClouderaManagerProduct)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private void upgradeNonCdhServices(Set<ClouderaManagerProduct> services, String cdhServiceName, ParcelResourceApi parcelResourceApi)\n+            throws CloudbreakException, ApiException {\n+        Set<ClouderaManagerProduct> nonCdhServices = getNonCdhServices(services, cdhServiceName);\n+        installServices(nonCdhServices, parcelResourceApi);\n+    }\n+\n+    private void installServices(Set<ClouderaManagerProduct> products, ParcelResourceApi parcelResourceApi) throws ApiException, CloudbreakException {\n+        downloadParcel(products, parcelResourceApi);\n+        distributeParcel(products, parcelResourceApi);\n+        activateParcel(products, parcelResourceApi);\n+    }\n+\n+    private ClouderaManagerProduct getCdhService(Set<ClouderaManagerProduct> products) {\n+        return products.stream()\n+                .filter(product -> product.getName().equals(com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name()))\n                 .findFirst()\n                 .orElseThrow(() -> new NotFoundException(\"Runtime component not found!\"));\n     }\n \n+    private Set<ClouderaManagerProduct> getNonCdhServices(Set<ClouderaManagerProduct> products, String cdhProductName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MzYxMzYx", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546361361", "createdAt": "2020-12-07T17:15:39Z", "commit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxNTozOVrOIAxaHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxNTozOVrOIAxaHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4MDQxMg==", "bodyText": "services", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r537680412", "createdAt": "2020-12-07T17:15:39Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,114 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n             MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> services = getServices(components);\n+            ClouderaManagerProduct cdhService = getCdhService(services);\n+            setParcelRepo(services, clouderaManagerResourceApi);\n             refreshParcelRepos(clouderaManagerResourceApi);\n-            downloadParcel(stackProductVersion, parcelResourceApi, product);\n-            distributeParcel(stackProductVersion, parcelResourceApi, product);\n             if (patchUpgrade) {\n-                activateParcel(stackProductVersion, parcelResourceApi, product);\n+                installServices(services, parcelResourceApi);\n                 restartServices(clustersResourceApi);\n             } else {\n-                callUpgradeCdhCommand(stackProductVersion, clustersResourceApi);\n+                upgradeNonCdhServices(services, cdhService.getName(), parcelResourceApi);\n+                upgradeCdh(clustersResourceApi, parcelResourceApi, cdhService);\n                 restartStaleServices(mgmtServiceResourceApi, clustersResourceApi);\n             }\n-            clouderaManagerParcelService.removeUnusedParcelVersions(apiClient, parcelsResourceApi, parcelResourceApi, stack, product, stackProductVersion);\n+            removeUnusedParcels(components);\n             configService.enableKnoxAutorestartIfCmVersionAtLeast(CLOUDERAMANAGER_VERSION_7_1_0, apiClient, stack.getName());\n-        } catch (ApiException | IOException e) {\n+        } catch (ApiException e) {\n             LOGGER.info(\"Could not upgrade Cloudera Runtime services\", e);\n             throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n         }\n     }\n \n-    private ClusterComponent getStackComponent(Set<ClusterComponent> components) {\n+    private void upgradeCdh(ClustersResourceApi clustersResourceApi, ParcelResourceApi parcelResourceApi, ClouderaManagerProduct cdhService)\n+            throws ApiException, CloudbreakException {\n+        downloadParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        distributeParcel(Collections.singleton(cdhService), parcelResourceApi);\n+        callUpgradeCdhCommand(cdhService, clustersResourceApi);\n+    }\n+\n+    private Set<ClouderaManagerProduct> getServices(Set<ClusterComponent> components) {\n         return components.stream()\n-                .filter(clusterComponent -> clusterComponent.getName().equals(com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name()))\n+                .filter(clusterComponent -> ComponentType.CDH_PRODUCT_DETAILS.equals(clusterComponent.getComponentType()))\n+                .map(this::getClouderaManagerProduct)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private void upgradeNonCdhServices(Set<ClouderaManagerProduct> services, String cdhServiceName, ParcelResourceApi parcelResourceApi)\n+            throws CloudbreakException, ApiException {\n+        Set<ClouderaManagerProduct> nonCdhServices = getNonCdhServices(services, cdhServiceName);\n+        installServices(nonCdhServices, parcelResourceApi);\n+    }\n+\n+    private void installServices(Set<ClouderaManagerProduct> products, ParcelResourceApi parcelResourceApi) throws ApiException, CloudbreakException {\n+        downloadParcel(products, parcelResourceApi);\n+        distributeParcel(products, parcelResourceApi);\n+        activateParcel(products, parcelResourceApi);\n+    }\n+\n+    private ClouderaManagerProduct getCdhService(Set<ClouderaManagerProduct> products) {\n+        return products.stream()\n+                .filter(product -> product.getName().equals(com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name()))\n                 .findFirst()\n                 .orElseThrow(() -> new NotFoundException(\"Runtime component not found!\"));\n     }\n \n+    private Set<ClouderaManagerProduct> getNonCdhServices(Set<ClouderaManagerProduct> products, String cdhProductName) {\n+        return products.stream()\n+                .filter(product -> !product.getName().equals(cdhProductName))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private ClouderaManagerProduct getClouderaManagerProduct(ClusterComponent clusterComponent) {\n+        try {\n+            return clusterComponent.getAttributes().get(ClouderaManagerProduct.class);\n+        } catch (IOException e) {\n+            LOGGER.info(\"Could not upgrade Cloudera Runtime services\", e);\n+            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private void checkParcelApiAvailability() throws CloudbreakException {\n+        clouderaManagerParcelManagementService.checkParcelApiAvailability(stack, apiClient);\n+    }\n+\n+    private void setParcelRepo(Set<ClouderaManagerProduct> products, ClouderaManagerResourceApi clouderaManagerResourceApi) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NTE5NjQ1", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546519645", "createdAt": "2020-12-07T20:42:53Z", "commit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo0Mjo1M1rOIA51QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo0Mjo1M1rOIA51QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxODQzMg==", "bodyText": "What is this extra if condition for? There should be a test -f here to avoid downloading the csd with every highstate.", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r537818432", "createdAt": "2020-12-07T20:42:53Z", "author": {"login": "keyki"}, "path": "orchestrator-salt/src/main/resources/salt/salt/cloudera/csd/csd-downloader.sh", "diffHunk": "@@ -3,11 +3,14 @@\n set -ex\n \n mkdir -p /opt/cloudera/csd\n+rm -f /opt/cloudera/csd/*\n cd /opt/cloudera/csd\n \n {% if salt['pillar.get']('cloudera-manager:csd-urls') %}\n {% for url in salt['pillar.get']('cloudera-manager:csd-urls') %}\n+{% if salt['pillar.get']('cloudera-manager:csd-urls') %}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NTI4NTI3", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546528527", "createdAt": "2020-12-07T20:55:33Z", "commit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1NTozM1rOIA6TaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1NTozM1rOIA6TaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjE1Mg==", "bodyText": "What does this list contain on a Data Lake?", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r537826152", "createdAt": "2020-12-07T20:55:33Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,114 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n             MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> services = getServices(components);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NTI5MDMw", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546529030", "createdAt": "2020-12-07T20:56:17Z", "commit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1NjoxN1rOIA6VCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1NjoxN1rOIA6VCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjU2OA==", "bodyText": "We need to skip this part for a DL completely.", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r537826568", "createdAt": "2020-12-07T20:56:17Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,114 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n             MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> services = getServices(components);\n+            ClouderaManagerProduct cdhService = getCdhService(services);\n+            setParcelRepo(services, clouderaManagerResourceApi);\n             refreshParcelRepos(clouderaManagerResourceApi);\n-            downloadParcel(stackProductVersion, parcelResourceApi, product);\n-            distributeParcel(stackProductVersion, parcelResourceApi, product);\n             if (patchUpgrade) {\n-                activateParcel(stackProductVersion, parcelResourceApi, product);\n+                installServices(services, parcelResourceApi);\n                 restartServices(clustersResourceApi);\n             } else {\n-                callUpgradeCdhCommand(stackProductVersion, clustersResourceApi);\n+                upgradeNonCdhServices(services, cdhService.getName(), parcelResourceApi);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51"}, "originalPosition": 89}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e65c94a334a79f9aa677bba37f1b15188ef4b51", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/6e65c94a334a79f9aa677bba37f1b15188ef4b51", "committedDate": "2020-12-07T16:36:52Z", "message": "CB-9943: upgrade non-cdh based services"}, "afterCommit": {"oid": "176893e061c21dd44a353a348bce4af3755e8033", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/176893e061c21dd44a353a348bce4af3755e8033", "committedDate": "2020-12-08T07:04:14Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services to a new version what we burned into the new image."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2ODA3OTQ3", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546807947", "createdAt": "2020-12-08T07:22:46Z", "commit": {"oid": "176893e061c21dd44a353a348bce4af3755e8033"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzoyMjo0NlrOIBKnYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzoyMjo0NlrOIBKnYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA5MzQwOQ==", "bodyText": "There should be a test -f within the loop to skip the download if we already have it. Also, since we removed the check the /var/csd_downloaded file is not used for anything. We could replace it with proper logging to /var/log/csd_download.log and print messages there what is downloaded and what is skipped since we already have it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r538093409", "createdAt": "2020-12-08T07:22:46Z", "author": {"login": "keyki"}, "path": "orchestrator-salt/src/main/resources/salt/salt/cloudera/csd/csd-downloader.sh", "diffHunk": "@@ -3,6 +3,7 @@\n set -ex\n \n mkdir -p /opt/cloudera/csd\n+rm -f /opt/cloudera/csd/*\n cd /opt/cloudera/csd\n \n {% if salt['pillar.get']('cloudera-manager:csd-urls') %}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176893e061c21dd44a353a348bce4af3755e8033"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2ODIzMzU2", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546823356", "createdAt": "2020-12-08T07:45:20Z", "commit": {"oid": "176893e061c21dd44a353a348bce4af3755e8033"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzo0NToyMFrOIBLeug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzo0NToyMFrOIBLeug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEwNzU3OA==", "bodyText": "We should use services instead of products in these methods.", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r538107578", "createdAt": "2020-12-08T07:45:20Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerParcelManagementService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.sequenceiq.cloudbreak.cm;\n+\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isExited;\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isTimeout;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.cloudera.api.swagger.ClouderaManagerResourceApi;\n+import com.cloudera.api.swagger.ParcelResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.cloudera.api.swagger.model.ApiConfig;\n+import com.cloudera.api.swagger.model.ApiConfigList;\n+import com.sequenceiq.cloudbreak.cloud.model.ClouderaManagerProduct;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n+import com.sequenceiq.cloudbreak.cm.model.ParcelResource;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n+import com.sequenceiq.cloudbreak.service.CloudbreakException;\n+\n+@Service\n+class ClouderaManagerParcelManagementService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelManagementService.class);\n+\n+    @Inject\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n+\n+    void setParcelRepo(Set<ClouderaManagerProduct> products, ClouderaManagerResourceApi clouderaManagerResourceApi) throws ApiException {\n+        Set<String> stackProductParcels = products.stream()\n+                .map(ClouderaManagerProduct::getParcel)\n+                .collect(Collectors.toSet());\n+        LOGGER.info(\"Setting parcel repo to {}\", stackProductParcels);\n+        ApiConfigList apiConfigList = new ApiConfigList()\n+                .addItemsItem(new ApiConfig()\n+                        .name(\"remote_parcel_repo_urls\")\n+                        .value(String.join(\",\", stackProductParcels)));\n+        clouderaManagerResourceApi.updateConfig(\"Updated configurations.\", apiConfigList);\n+    }\n+\n+    void refreshParcelRepos(ClouderaManagerResourceApi clouderaManagerResourceApi, Stack stack, ApiClient apiClient) {\n+        try {\n+            ApiCommand apiCommand = clouderaManagerResourceApi.refreshParcelRepos();\n+            clouderaManagerPollingServiceProvider.startPollingCmParcelRepositoryRefresh(stack, apiClient, apiCommand.getId());\n+        } catch (ApiException e) {\n+            LOGGER.info(\"Unable to refresh parcel repo\", e);\n+            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+        }\n+    }\n+\n+    void downloadParcel(Set<ClouderaManagerProduct> products, ParcelResourceApi parcelResourceApi, Stack stack, ApiClient apiClient)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176893e061c21dd44a353a348bce4af3755e8033"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "176893e061c21dd44a353a348bce4af3755e8033", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/176893e061c21dd44a353a348bce4af3755e8033", "committedDate": "2020-12-08T07:04:14Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services to a new version what we burned into the new image."}, "afterCommit": {"oid": "63da714d3f5763b900212c30eff8b488d40eddc3", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/63da714d3f5763b900212c30eff8b488d40eddc3", "committedDate": "2020-12-08T07:58:46Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services to a new version what we burned into the new image."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2ODMzOTYw", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-546833960", "createdAt": "2020-12-08T08:02:38Z", "commit": {"oid": "63da714d3f5763b900212c30eff8b488d40eddc3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODowMjozOFrOIBMDVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODowMjozOFrOIBMDVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODExNjk1MQ==", "bodyText": "Unfortunately, using the components is not going to work now. In the case of Data Lake, it will try to re-activate all parcels that are on the images and that doesn't work.", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r538116951", "createdAt": "2020-12-08T08:02:38Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,114 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n             MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> services = getServices(components);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63da714d3f5763b900212c30eff8b488d40eddc3"}, "originalPosition": 77}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63da714d3f5763b900212c30eff8b488d40eddc3", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/63da714d3f5763b900212c30eff8b488d40eddc3", "committedDate": "2020-12-08T07:58:46Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services to a new version what we burned into the new image."}, "afterCommit": {"oid": "c6b677a4017dcf37718e1aa75814bb48a2b98054", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/c6b677a4017dcf37718e1aa75814bb48a2b98054", "committedDate": "2020-12-08T13:55:24Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services to a new version what we burned into the new image."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MjgxODI3", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-547281827", "createdAt": "2020-12-08T14:24:21Z", "commit": {"oid": "c6b677a4017dcf37718e1aa75814bb48a2b98054"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoyNDoyMVrOIBfGKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoyNDoyMVrOIBfGKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyODk3MQ==", "bodyText": "Can you extend these with log messages? An else branch can be introduced to log that we're skipping non-cdh based activaten. On the other case we can log what are the parcel names that we are going to activate.", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r538428971", "createdAt": "2020-12-08T14:24:21Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,125 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n-            MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> products = getProducts(components);\n+            setParcelRepo(products, clouderaManagerResourceApi);\n             refreshParcelRepos(clouderaManagerResourceApi);\n-            downloadParcel(stackProductVersion, parcelResourceApi, product);\n-            distributeParcel(stackProductVersion, parcelResourceApi, product);\n             if (patchUpgrade) {\n-                activateParcel(stackProductVersion, parcelResourceApi, product);\n+                downloadAndActivateParcels(products, parcelResourceApi);\n                 restartServices(clustersResourceApi);\n             } else {\n-                callUpgradeCdhCommand(stackProductVersion, clustersResourceApi);\n-                restartStaleServices(mgmtServiceResourceApi, clustersResourceApi);\n+                ClouderaManagerProduct cdhProduct = getCdhProducts(products);\n+                upgradeNonCdhProducts(products, cdhProduct.getName(), parcelResourceApi);\n+                upgradeCdh(clustersResourceApi, parcelResourceApi, cdhProduct);\n+                restartStaleServices(clustersResourceApi);\n             }\n-            clouderaManagerParcelService.removeUnusedParcelVersions(apiClient, parcelsResourceApi, parcelResourceApi, stack, product, stackProductVersion);\n+            removeUnusedParcelVersions(parcelResourceApi, products);\n             configService.enableKnoxAutorestartIfCmVersionAtLeast(CLOUDERAMANAGER_VERSION_7_1_0, apiClient, stack.getName());\n-        } catch (ApiException | IOException e) {\n+        } catch (ApiException e) {\n             LOGGER.info(\"Could not upgrade Cloudera Runtime services\", e);\n             throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n         }\n     }\n \n-    private ClusterComponent getStackComponent(Set<ClusterComponent> components) {\n+    private void upgradeCdh(ClustersResourceApi clustersResourceApi, ParcelResourceApi parcelResourceApi, ClouderaManagerProduct cdhService)\n+            throws ApiException, CloudbreakException {\n+        downloadParcels(Collections.singleton(cdhService), parcelResourceApi);\n+        distributeParcels(Collections.singleton(cdhService), parcelResourceApi);\n+        callUpgradeCdhCommand(cdhService, clustersResourceApi);\n+    }\n+\n+    private Set<ClouderaManagerProduct> getProducts(Set<ClusterComponent> components) {\n         return components.stream()\n-                .filter(clusterComponent -> clusterComponent.getName().equals(com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name()))\n+                .filter(clusterComponent -> ComponentType.CDH_PRODUCT_DETAILS.equals(clusterComponent.getComponentType()))\n+                .map(this::getClouderaManagerProduct)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private void upgradeNonCdhProducts(Set<ClouderaManagerProduct> services, String cdhServiceName, ParcelResourceApi parcelResourceApi)\n+            throws CloudbreakException, ApiException {\n+        Set<ClouderaManagerProduct> nonCdhServices = getNonCdhProducts(services, cdhServiceName);\n+        if (!nonCdhServices.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b677a4017dcf37718e1aa75814bb48a2b98054"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MjgxOTY5", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-547281969", "createdAt": "2020-12-08T14:24:30Z", "commit": {"oid": "c6b677a4017dcf37718e1aa75814bb48a2b98054"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoyNDozMFrOIBfG4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoyNDozMFrOIBfG4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyOTE1Mw==", "bodyText": "services -> products", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r538429153", "createdAt": "2020-12-08T14:24:30Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -170,47 +174,125 @@ public void cleanupCluster(Telemetry telemetry) throws CloudbreakException {\n     @Override\n     public void upgradeClusterRuntime(Set<ClusterComponent> components, boolean patchUpgrade) throws CloudbreakException {\n         try {\n-            ClusterComponent stackComponent = getStackComponent(components);\n-\n-            ClouderaManagerProduct stackProduct = stackComponent.getAttributes().get(ClouderaManagerProduct.class);\n-            String stackProductVersion = stackProduct.getVersion();\n-            String stackProductParcel = stackProduct.getParcel();\n-            String product = com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name();\n-\n             ClustersResourceApi clustersResourceApi = clouderaManagerApiFactory.getClustersResourceApi(apiClient);\n-            ParcelsResourceApi parcelsResourceApi = clouderaManagerApiFactory.getParcelsResourceApi(apiClient);\n             ParcelResourceApi parcelResourceApi = clouderaManagerApiFactory.getParcelResourceApi(apiClient);\n-            MgmtServiceResourceApi mgmtServiceResourceApi = clouderaManagerApiFactory.getMgmtServiceResourceApi(apiClient);\n             ClouderaManagerResourceApi clouderaManagerResourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(apiClient);\n \n-            startClouderaManager(stack, apiClient);\n+            startClouderaManager();\n             checkParcelApiAvailability();\n-            setParcelRepo(stackProductParcel, clouderaManagerResourceApi);\n+\n+            Set<ClouderaManagerProduct> products = getProducts(components);\n+            setParcelRepo(products, clouderaManagerResourceApi);\n             refreshParcelRepos(clouderaManagerResourceApi);\n-            downloadParcel(stackProductVersion, parcelResourceApi, product);\n-            distributeParcel(stackProductVersion, parcelResourceApi, product);\n             if (patchUpgrade) {\n-                activateParcel(stackProductVersion, parcelResourceApi, product);\n+                downloadAndActivateParcels(products, parcelResourceApi);\n                 restartServices(clustersResourceApi);\n             } else {\n-                callUpgradeCdhCommand(stackProductVersion, clustersResourceApi);\n-                restartStaleServices(mgmtServiceResourceApi, clustersResourceApi);\n+                ClouderaManagerProduct cdhProduct = getCdhProducts(products);\n+                upgradeNonCdhProducts(products, cdhProduct.getName(), parcelResourceApi);\n+                upgradeCdh(clustersResourceApi, parcelResourceApi, cdhProduct);\n+                restartStaleServices(clustersResourceApi);\n             }\n-            clouderaManagerParcelService.removeUnusedParcelVersions(apiClient, parcelsResourceApi, parcelResourceApi, stack, product, stackProductVersion);\n+            removeUnusedParcelVersions(parcelResourceApi, products);\n             configService.enableKnoxAutorestartIfCmVersionAtLeast(CLOUDERAMANAGER_VERSION_7_1_0, apiClient, stack.getName());\n-        } catch (ApiException | IOException e) {\n+        } catch (ApiException e) {\n             LOGGER.info(\"Could not upgrade Cloudera Runtime services\", e);\n             throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n         }\n     }\n \n-    private ClusterComponent getStackComponent(Set<ClusterComponent> components) {\n+    private void upgradeCdh(ClustersResourceApi clustersResourceApi, ParcelResourceApi parcelResourceApi, ClouderaManagerProduct cdhService)\n+            throws ApiException, CloudbreakException {\n+        downloadParcels(Collections.singleton(cdhService), parcelResourceApi);\n+        distributeParcels(Collections.singleton(cdhService), parcelResourceApi);\n+        callUpgradeCdhCommand(cdhService, clustersResourceApi);\n+    }\n+\n+    private Set<ClouderaManagerProduct> getProducts(Set<ClusterComponent> components) {\n         return components.stream()\n-                .filter(clusterComponent -> clusterComponent.getName().equals(com.sequenceiq.cloudbreak.cloud.model.component.StackType.CDH.name()))\n+                .filter(clusterComponent -> ComponentType.CDH_PRODUCT_DETAILS.equals(clusterComponent.getComponentType()))\n+                .map(this::getClouderaManagerProduct)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private void upgradeNonCdhProducts(Set<ClouderaManagerProduct> services, String cdhServiceName, ParcelResourceApi parcelResourceApi)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b677a4017dcf37718e1aa75814bb48a2b98054"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MzA3OTIw", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-547307920", "createdAt": "2020-12-08T14:51:17Z", "commit": {"oid": "c6b677a4017dcf37718e1aa75814bb48a2b98054"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDo1MToxN1rOIBg16Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDo1MToxN1rOIBg16Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ1NzU3Nw==", "bodyText": "Can you please add a log message that we're skipping the CSD update because it's a Data Lake", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r538457577", "createdAt": "2020-12-08T14:51:17Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterManagerUpgradeService.java", "diffHunk": "@@ -98,12 +99,19 @@ private void startClusterServices(Stack stack) throws CloudbreakException {\n         clusterApiConnectors.getConnector(stack).startCluster();\n     }\n \n-    private SaltConfig createSaltConfig(Cluster cluster) {\n+    private SaltConfig createSaltConfig(Long stackId, StackType stackType, Cluster cluster) {\n         Map<String, SaltPillarProperties> servicePillar = new HashMap<>();\n         ClouderaManagerRepo clouderaManagerRepo = clusterComponentConfigProvider.getClouderaManagerRepoDetails(cluster.getId());\n-        Optional<String> license = clusterHostServiceRunner.decoratePillarWithClouderaManagerLicense(cluster.getStack().getId(), servicePillar);\n+        Optional<String> license = clusterHostServiceRunner.decoratePillarWithClouderaManagerLicense(stackId, servicePillar);\n         clusterHostServiceRunner.decoratePillarWithClouderaManagerRepo(clouderaManagerRepo, servicePillar, license);\n         clusterHostServiceRunner.decoratePillarWithClouderaManagerSettings(servicePillar, clouderaManagerRepo);\n+        decorateWorkloadClusterPillarWithCsdDownloader(stackType, cluster, servicePillar);\n         return new SaltConfig(servicePillar);\n     }\n+\n+    private void decorateWorkloadClusterPillarWithCsdDownloader(StackType stackType, Cluster cluster, Map<String, SaltPillarProperties> servicePillar) {\n+        if (StackType.WORKLOAD.equals(stackType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b677a4017dcf37718e1aa75814bb48a2b98054"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6b677a4017dcf37718e1aa75814bb48a2b98054", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/c6b677a4017dcf37718e1aa75814bb48a2b98054", "committedDate": "2020-12-08T13:55:24Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services to a new version what we burned into the new image."}, "afterCommit": {"oid": "3dd2e3743b309a7d2b9ee6625d9824d692de3d5a", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/3dd2e3743b309a7d2b9ee6625d9824d692de3d5a", "committedDate": "2020-12-09T13:16:35Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services.\n\nIn this commit we've introduced some changes in connection with Data Hub upgrade:\n- CSD downloading: To upgrade a non-CDH service may require the same version of the CSD what the new version is. By default the old CSD files are already present in the image, therefore we need to download the new ones. This process is handled by a shell script that we add to the host at the beginning of the upgrade process.\n  In the case of Data Lake upgrade, we don't need to download the new CSD files because we're not upgrading the non-CDH services.\n\n- Upgrading the non-CDH services (Spark, Nifi, etc...) has a different flow than the regular CDH runtime upgrade. We need to download, distribute, and activate the new parcels, then restart the affected services. There is no upgrade command to call.\n  After the non-CDH services have been upgraded the flow continues with upgrading the CDH runtime. This whole process does not affect to the Data Lake upgrade flow. We just upgrade only the CDH version like before."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MjAzOTgy", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-548203982", "createdAt": "2020-12-09T13:54:39Z", "commit": {"oid": "3dd2e3743b309a7d2b9ee6625d9824d692de3d5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzo1NDozOVrOICVwXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzo1NDozOVrOICVwXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyNDUwOA==", "bodyText": "This should go to /var/log", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r539324508", "createdAt": "2020-12-09T13:54:39Z", "author": {"login": "keyki"}, "path": "orchestrator-salt/src/main/resources/salt/salt/cloudera/csd/csd-downloader.sh", "diffHunk": "@@ -6,11 +6,22 @@ mkdir -p /opt/cloudera/csd\n cd /opt/cloudera/csd\n \n {% if salt['pillar.get']('cloudera-manager:csd-urls') %}\n-{% for url in salt['pillar.get']('cloudera-manager:csd-urls') %}\n-curl -L -O -R {{ url }}\n-{% endfor %}\n+csdUrls=({%- for url in salt['pillar.get']('cloudera-manager:csd-urls') -%}\n+{{ url + \" \" }}\n+{%- endfor %})\n+\n+for url in ${csdUrls[@]}\n+do\n+  fileName=$(basename $url)\n+  if test -f $fileName\n+  then\n+    echo $fileName \"already exists\" >> /var/csd_downloaded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd2e3743b309a7d2b9ee6625d9824d692de3d5a"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dd2e3743b309a7d2b9ee6625d9824d692de3d5a", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/3dd2e3743b309a7d2b9ee6625d9824d692de3d5a", "committedDate": "2020-12-09T13:16:35Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services.\n\nIn this commit we've introduced some changes in connection with Data Hub upgrade:\n- CSD downloading: To upgrade a non-CDH service may require the same version of the CSD what the new version is. By default the old CSD files are already present in the image, therefore we need to download the new ones. This process is handled by a shell script that we add to the host at the beginning of the upgrade process.\n  In the case of Data Lake upgrade, we don't need to download the new CSD files because we're not upgrading the non-CDH services.\n\n- Upgrading the non-CDH services (Spark, Nifi, etc...) has a different flow than the regular CDH runtime upgrade. We need to download, distribute, and activate the new parcels, then restart the affected services. There is no upgrade command to call.\n  After the non-CDH services have been upgraded the flow continues with upgrading the CDH runtime. This whole process does not affect to the Data Lake upgrade flow. We just upgrade only the CDH version like before."}, "afterCommit": {"oid": "ea33bf51fad282def4ee059698c8eb1fabda08da", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/ea33bf51fad282def4ee059698c8eb1fabda08da", "committedDate": "2020-12-09T14:06:34Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services.\n\nIn this commit we've introduced some changes in connection with Data Hub upgrade:\n- CSD downloading: To upgrade a non-CDH service may require the same version of the CSD what the new version is. By default the old CSD files are already present in the image, therefore we need to download the new ones. This process is handled by a shell script that we add to the host at the beginning of the upgrade process.\n  In the case of Data Lake upgrade, we don't need to download the new CSD files because we're not upgrading the non-CDH services.\n\n- Upgrading the non-CDH services (Spark, Nifi, etc...) has a different flow than the regular CDH runtime upgrade. We need to download, distribute, and activate the new parcels, then restart the affected services. There is no upgrade command to call.\n  After the non-CDH services have been upgraded the flow continues with upgrading the CDH runtime. This whole process does not affect to the Data Lake upgrade flow. We just upgrade only the CDH version like before."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MjgzNDgx", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-548283481", "createdAt": "2020-12-09T15:11:35Z", "commit": {"oid": "ea33bf51fad282def4ee059698c8eb1fabda08da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNToxMTozNVrOICZoxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNToxMTozNVrOICZoxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM4ODEwMQ==", "bodyText": "Can you please cover this part with a unit test to make sure we don't update the CSDs in the case of Data Lake. If we break this then the complete Data Lake upgrade will be broken as the CSDs are not downloadable outside of Cloudera.", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r539388101", "createdAt": "2020-12-09T15:11:35Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/cluster/ClusterManagerUpgradeService.java", "diffHunk": "@@ -98,12 +99,21 @@ private void startClusterServices(Stack stack) throws CloudbreakException {\n         clusterApiConnectors.getConnector(stack).startCluster();\n     }\n \n-    private SaltConfig createSaltConfig(Cluster cluster) {\n+    private SaltConfig createSaltConfig(Long stackId, StackType stackType, Cluster cluster) {\n         Map<String, SaltPillarProperties> servicePillar = new HashMap<>();\n         ClouderaManagerRepo clouderaManagerRepo = clusterComponentConfigProvider.getClouderaManagerRepoDetails(cluster.getId());\n-        Optional<String> license = clusterHostServiceRunner.decoratePillarWithClouderaManagerLicense(cluster.getStack().getId(), servicePillar);\n+        Optional<String> license = clusterHostServiceRunner.decoratePillarWithClouderaManagerLicense(stackId, servicePillar);\n         clusterHostServiceRunner.decoratePillarWithClouderaManagerRepo(clouderaManagerRepo, servicePillar, license);\n         clusterHostServiceRunner.decoratePillarWithClouderaManagerSettings(servicePillar, clouderaManagerRepo);\n+        decorateWorkloadClusterPillarWithCsdDownloader(stackType, cluster, servicePillar);\n         return new SaltConfig(servicePillar);\n     }\n+\n+    private void decorateWorkloadClusterPillarWithCsdDownloader(StackType stackType, Cluster cluster, Map<String, SaltPillarProperties> servicePillar) {\n+        if (StackType.WORKLOAD.equals(stackType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea33bf51fad282def4ee059698c8eb1fabda08da"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea33bf51fad282def4ee059698c8eb1fabda08da", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/ea33bf51fad282def4ee059698c8eb1fabda08da", "committedDate": "2020-12-09T14:06:34Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services.\n\nIn this commit we've introduced some changes in connection with Data Hub upgrade:\n- CSD downloading: To upgrade a non-CDH service may require the same version of the CSD what the new version is. By default the old CSD files are already present in the image, therefore we need to download the new ones. This process is handled by a shell script that we add to the host at the beginning of the upgrade process.\n  In the case of Data Lake upgrade, we don't need to download the new CSD files because we're not upgrading the non-CDH services.\n\n- Upgrading the non-CDH services (Spark, Nifi, etc...) has a different flow than the regular CDH runtime upgrade. We need to download, distribute, and activate the new parcels, then restart the affected services. There is no upgrade command to call.\n  After the non-CDH services have been upgraded the flow continues with upgrading the CDH runtime. This whole process does not affect to the Data Lake upgrade flow. We just upgrade only the CDH version like before."}, "afterCommit": {"oid": "dec7e013ca68fa7597188952d5bb435ffea70d9d", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/dec7e013ca68fa7597188952d5bb435ffea70d9d", "committedDate": "2020-12-09T17:03:35Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services.\n\nIn this commit we've introduced some changes in connection with Data Hub upgrade:\n- CSD downloading: To upgrade a non-CDH service may require the same version of the CSD what the new version is. By default the old CSD files are already present in the image, therefore we need to download the new ones. This process is handled by a shell script that we add to the host at the beginning of the upgrade process.\n  In the case of Data Lake upgrade, we don't need to download the new CSD files because we're not upgrading the non-CDH services.\n\n- Upgrading the non-CDH services (Spark, Nifi, etc...) has a different flow than the regular CDH runtime upgrade. We need to download, distribute, and activate the new parcels, then restart the affected services. There is no upgrade command to call.\n  After the non-CDH services have been upgraded the flow continues with upgrading the CDH runtime. This whole process does not affect to the Data Lake upgrade flow. We just upgrade only the CDH version like before."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MDYyNTY1", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-549062565", "createdAt": "2020-12-10T10:36:26Z", "commit": {"oid": "dec7e013ca68fa7597188952d5bb435ffea70d9d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDozNjoyNlrOIDCkPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDozNjoyNlrOIDCkPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA1ODY4NA==", "bodyText": "this part is duplicated a few times, message maybe different a bit, but that could be a parameter", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r540058684", "createdAt": "2020-12-10T10:36:26Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerParcelManagementService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.sequenceiq.cloudbreak.cm;\n+\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isExited;\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isTimeout;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.cloudera.api.swagger.ClouderaManagerResourceApi;\n+import com.cloudera.api.swagger.ParcelResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.cloudera.api.swagger.model.ApiConfig;\n+import com.cloudera.api.swagger.model.ApiConfigList;\n+import com.sequenceiq.cloudbreak.cloud.model.ClouderaManagerProduct;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n+import com.sequenceiq.cloudbreak.cm.model.ParcelResource;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n+import com.sequenceiq.cloudbreak.service.CloudbreakException;\n+\n+@Service\n+class ClouderaManagerParcelManagementService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerParcelManagementService.class);\n+\n+    @Inject\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n+\n+    void setParcelRepos(Set<ClouderaManagerProduct> products, ClouderaManagerResourceApi clouderaManagerResourceApi) throws ApiException {\n+        Set<String> stackProductParcels = products.stream()\n+                .map(ClouderaManagerProduct::getParcel)\n+                .collect(Collectors.toSet());\n+        LOGGER.info(\"Setting parcel repo to {}\", stackProductParcels);\n+        ApiConfigList apiConfigList = new ApiConfigList()\n+                .addItemsItem(new ApiConfig()\n+                        .name(\"remote_parcel_repo_urls\")\n+                        .value(String.join(\",\", stackProductParcels)));\n+        clouderaManagerResourceApi.updateConfig(\"Updated configurations.\", apiConfigList);\n+    }\n+\n+    void refreshParcelRepos(ClouderaManagerResourceApi clouderaManagerResourceApi, Stack stack, ApiClient apiClient) {\n+        try {\n+            LOGGER.info(\"Refreshing parcel repos.\");\n+            ApiCommand apiCommand = clouderaManagerResourceApi.refreshParcelRepos();\n+            clouderaManagerPollingServiceProvider.startPollingCmParcelRepositoryRefresh(stack, apiClient, apiCommand.getId());\n+        } catch (ApiException e) {\n+            LOGGER.info(\"Unable to refresh parcel repo\", e);\n+            throw new ClouderaManagerOperationFailedException(e.getMessage(), e);\n+        }\n+    }\n+\n+    void downloadParcels(Set<ClouderaManagerProduct> products, ParcelResourceApi parcelResourceApi, Stack stack, ApiClient apiClient)\n+            throws ApiException, CloudbreakException {\n+        for (ClouderaManagerProduct product : products) {\n+            LOGGER.info(\"Downloading {} parcel.\", product.getName());\n+            ApiCommand apiCommand = parcelResourceApi.startDownloadCommand(stack.getName(), product.getName(), product.getVersion());\n+            PollingResult pollingResult = clouderaManagerPollingServiceProvider.startPollingCdpRuntimeParcelDownload(\n+                    stack, apiClient, apiCommand.getId(), new ParcelResource(stack.getName(), product.getName(), product.getVersion()));\n+            if (isExited(pollingResult)) {\n+                throw new CancellationException(\"Cluster was terminated while waiting for CDP Runtime Parcel to be downloaded\");\n+            } else if (isTimeout(pollingResult)) {\n+                throw new CloudbreakException(\"Timeout during the updated CDP Runtime Parcel download.\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dec7e013ca68fa7597188952d5bb435ffea70d9d"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MDY0MDI0", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-549064024", "createdAt": "2020-12-10T10:38:16Z", "commit": {"oid": "dec7e013ca68fa7597188952d5bb435ffea70d9d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDozODoxNlrOIDCpIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDozODoxNlrOIDCpIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA1OTkzOQ==", "bodyText": "it's kinda the same here, duplicating the same 5 lines, maybe it should be moved some util like thing or a component", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r540059939", "createdAt": "2020-12-10T10:38:16Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerUpgradeService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.cloudbreak.cm;\n+\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isExited;\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isTimeout;\n+\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.cloudera.api.swagger.ClustersResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCdhUpgradeArgs;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.cloudera.api.swagger.model.ApiCommandList;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n+import com.sequenceiq.cloudbreak.service.CloudbreakException;\n+\n+@Service\n+class ClouderaManagerUpgradeService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerUpgradeService.class);\n+\n+    private static final String SUMMARY = \"SUMMARY\";\n+\n+    @Inject\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n+\n+    void callUpgradeCdhCommand(String stackProductVersion, ClustersResourceApi clustersResourceApi, Stack stack, ApiClient apiClient)\n+            throws ApiException, CloudbreakException {\n+        LOGGER.info(\"Upgrading the CDP Runtime...\");\n+        Optional<ApiCommand> optionalUpgradeCommand = findUpgradeApiCommand(clustersResourceApi, stack);\n+        try {\n+            ApiCommand upgradeCommand;\n+            if (optionalUpgradeCommand.isPresent()) {\n+                upgradeCommand = optionalUpgradeCommand.get();\n+                LOGGER.debug(\"Upgrade of CDP Runtime is already running with id: [{}]\", upgradeCommand.getId());\n+            } else {\n+                ApiCdhUpgradeArgs upgradeArgs = new ApiCdhUpgradeArgs();\n+                upgradeArgs.setCdhParcelVersion(stackProductVersion);\n+                upgradeCommand = clustersResourceApi.upgradeCdhCommand(stack.getName(), upgradeArgs);\n+            }\n+            PollingResult pollingResult = clouderaManagerPollingServiceProvider.startPollingCdpRuntimeUpgrade(stack, apiClient, upgradeCommand.getId());\n+            if (isExited(pollingResult)) {\n+                throw new CancellationException(\"Cluster was terminated while waiting for CDP Runtime to be upgraded\");\n+            } else if (isTimeout(pollingResult)) {\n+                throw new CloudbreakException(\"Timeout during CDP Runtime upgrade.\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dec7e013ca68fa7597188952d5bb435ffea70d9d"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MDY1MDU2", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-549065056", "createdAt": "2020-12-10T10:39:33Z", "commit": {"oid": "dec7e013ca68fa7597188952d5bb435ffea70d9d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDozOTozM1rOIDCsqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDozOTozM1rOIDCsqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2MDg0MA==", "bodyText": "null check for response body?", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r540060840", "createdAt": "2020-12-10T10:39:33Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerUpgradeService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.cloudbreak.cm;\n+\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isExited;\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isTimeout;\n+\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.cloudera.api.swagger.ClustersResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCdhUpgradeArgs;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.cloudera.api.swagger.model.ApiCommandList;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n+import com.sequenceiq.cloudbreak.service.CloudbreakException;\n+\n+@Service\n+class ClouderaManagerUpgradeService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerUpgradeService.class);\n+\n+    private static final String SUMMARY = \"SUMMARY\";\n+\n+    @Inject\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n+\n+    void callUpgradeCdhCommand(String stackProductVersion, ClustersResourceApi clustersResourceApi, Stack stack, ApiClient apiClient)\n+            throws ApiException, CloudbreakException {\n+        LOGGER.info(\"Upgrading the CDP Runtime...\");\n+        Optional<ApiCommand> optionalUpgradeCommand = findUpgradeApiCommand(clustersResourceApi, stack);\n+        try {\n+            ApiCommand upgradeCommand;\n+            if (optionalUpgradeCommand.isPresent()) {\n+                upgradeCommand = optionalUpgradeCommand.get();\n+                LOGGER.debug(\"Upgrade of CDP Runtime is already running with id: [{}]\", upgradeCommand.getId());\n+            } else {\n+                ApiCdhUpgradeArgs upgradeArgs = new ApiCdhUpgradeArgs();\n+                upgradeArgs.setCdhParcelVersion(stackProductVersion);\n+                upgradeCommand = clustersResourceApi.upgradeCdhCommand(stack.getName(), upgradeArgs);\n+            }\n+            PollingResult pollingResult = clouderaManagerPollingServiceProvider.startPollingCdpRuntimeUpgrade(stack, apiClient, upgradeCommand.getId());\n+            if (isExited(pollingResult)) {\n+                throw new CancellationException(\"Cluster was terminated while waiting for CDP Runtime to be upgraded\");\n+            } else if (isTimeout(pollingResult)) {\n+                throw new CloudbreakException(\"Timeout during CDP Runtime upgrade.\");\n+            }\n+        } catch (ApiException ex) {\n+            if (ex.getResponseBody().contains(\"Cannot upgrade because the version is already CDH\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dec7e013ca68fa7597188952d5bb435ffea70d9d"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MDcwNzYw", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-549070760", "createdAt": "2020-12-10T10:46:56Z", "commit": {"oid": "dec7e013ca68fa7597188952d5bb435ffea70d9d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo0Njo1NlrOIDDAQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo0Njo1NlrOIDDAQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2NTg1OQ==", "bodyText": "I would add a log here with url and filename to see what's going on. also I would add a datetime to logs. it usually helps during investigation to see what happened when", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#discussion_r540065859", "createdAt": "2020-12-10T10:46:56Z", "author": {"login": "lacikaaa"}, "path": "orchestrator-salt/src/main/resources/salt/salt/cloudera/csd/csd-downloader.sh", "diffHunk": "@@ -6,11 +6,22 @@ mkdir -p /opt/cloudera/csd\n cd /opt/cloudera/csd\n \n {% if salt['pillar.get']('cloudera-manager:csd-urls') %}\n-{% for url in salt['pillar.get']('cloudera-manager:csd-urls') %}\n-curl -L -O -R {{ url }}\n-{% endfor %}\n+csdUrls=({%- for url in salt['pillar.get']('cloudera-manager:csd-urls') -%}\n+{{ url + \" \" }}\n+{%- endfor %})\n+\n+for url in ${csdUrls[@]}\n+do\n+  fileName=$(basename $url)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dec7e013ca68fa7597188952d5bb435ffea70d9d"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28319cc0f8cb174591627f8857853484f31208cd", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/28319cc0f8cb174591627f8857853484f31208cd", "committedDate": "2020-12-10T16:59:43Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services.\n\nIn this commit we've introduced some changes in connection with Data Hub upgrade:\n- CSD downloading: To upgrade a non-CDH service may require the same version of the CSD what the new version is. By default the old CSD files are already present in the image, therefore we need to download the new ones. This process is handled by a shell script that we add to the host at the beginning of the upgrade process.\n  In the case of Data Lake upgrade, we don't need to download the new CSD files because we're not upgrading the non-CDH services.\n\n- Upgrading the non-CDH services (Spark, Nifi, etc...) has a different flow than the regular CDH runtime upgrade. We need to download, distribute, and activate the new parcels, then restart the affected services. There is no upgrade command to call.\n  After the non-CDH services have been upgraded the flow continues with upgrading the CDH runtime. This whole process does not affect to the Data Lake upgrade flow. We just upgrade only the CDH version like before."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dec7e013ca68fa7597188952d5bb435ffea70d9d", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/dec7e013ca68fa7597188952d5bb435ffea70d9d", "committedDate": "2020-12-09T17:03:35Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services.\n\nIn this commit we've introduced some changes in connection with Data Hub upgrade:\n- CSD downloading: To upgrade a non-CDH service may require the same version of the CSD what the new version is. By default the old CSD files are already present in the image, therefore we need to download the new ones. This process is handled by a shell script that we add to the host at the beginning of the upgrade process.\n  In the case of Data Lake upgrade, we don't need to download the new CSD files because we're not upgrading the non-CDH services.\n\n- Upgrading the non-CDH services (Spark, Nifi, etc...) has a different flow than the regular CDH runtime upgrade. We need to download, distribute, and activate the new parcels, then restart the affected services. There is no upgrade command to call.\n  After the non-CDH services have been upgraded the flow continues with upgrading the CDH runtime. This whole process does not affect to the Data Lake upgrade flow. We just upgrade only the CDH version like before."}, "afterCommit": {"oid": "28319cc0f8cb174591627f8857853484f31208cd", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/28319cc0f8cb174591627f8857853484f31208cd", "committedDate": "2020-12-10T16:59:43Z", "message": "CB-9943: Extend the Data Hub CDH runtime upgrade process with upgrading the non-CDH services.\n\nIn this commit we've introduced some changes in connection with Data Hub upgrade:\n- CSD downloading: To upgrade a non-CDH service may require the same version of the CSD what the new version is. By default the old CSD files are already present in the image, therefore we need to download the new ones. This process is handled by a shell script that we add to the host at the beginning of the upgrade process.\n  In the case of Data Lake upgrade, we don't need to download the new CSD files because we're not upgrading the non-CDH services.\n\n- Upgrading the non-CDH services (Spark, Nifi, etc...) has a different flow than the regular CDH runtime upgrade. We need to download, distribute, and activate the new parcels, then restart the affected services. There is no upgrade command to call.\n  After the non-CDH services have been upgraded the flow continues with upgrading the CDH runtime. This whole process does not affect to the Data Lake upgrade flow. We just upgrade only the CDH version like before."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDIxODAw", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-549421800", "createdAt": "2020-12-10T17:13:02Z", "commit": {"oid": "28319cc0f8cb174591627f8857853484f31208cd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDYzNzA5", "url": "https://github.com/hortonworks/cloudbreak/pull/9593#pullrequestreview-549463709", "createdAt": "2020-12-10T18:00:16Z", "commit": {"oid": "28319cc0f8cb174591627f8857853484f31208cd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1947, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}