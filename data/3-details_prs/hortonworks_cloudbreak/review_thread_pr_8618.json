{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MDcwNzc0", "number": 8618, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoyMzoyN1rOERTHoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDozMToxMFrOERTLwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc0NDk2OnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/CronTimeEvaluator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoyMzoyN1rOG17zHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowODoxOFrOG1-koA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNzQ1NQ==", "bodyText": "All of the history changes here are part of another patch right? Can you please backport that independently of this change?", "url": "https://github.com/hortonworks/cloudbreak/pull/8618#discussion_r459207455", "createdAt": "2020-07-23T04:23:27Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/CronTimeEvaluator.java", "diffHunk": "@@ -80,15 +108,21 @@ public void execute() {\n         long start = System.currentTimeMillis();\n         Cluster cluster = clusterService.findById(clusterId);\n         MDCBuilder.buildMdcContext(cluster);\n-        publishIfNeeded(alertRepository.findAllByCluster(clusterId));\n+        publishIfNeeded(alertRepository.findAllByClusterIdOrderById(clusterId));\n         LOGGER.debug(\"Finished cronTimeEvaluator for cluster {} in {} ms\", cluster.getStackCrn(), System.currentTimeMillis() - start);\n     }\n \n-    private void publishIfNeeded(List<TimeAlert> alerts) {\n+    protected void publishIfNeeded(List<TimeAlert> alerts) {\n+        TimeAlert triggeredAlert = null;\n         for (TimeAlert alert : alerts) {\n-            if (isPolicyAttached(alert) && isTrigger(alert)) {\n+            boolean alertTriggerable = isTrigger(alert);\n+            if (isPolicyAttached(alert) && alertTriggerable && null == triggeredAlert) {\n                 publish(alert);\n-                break;\n+                triggeredAlert = alert;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ace5107cdbcce8a68711189fde7a107f32cce7b"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1Mjg5Ng==", "bodyText": "done.", "url": "https://github.com/hortonworks/cloudbreak/pull/8618#discussion_r459252896", "createdAt": "2020-07-23T07:08:18Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/CronTimeEvaluator.java", "diffHunk": "@@ -80,15 +108,21 @@ public void execute() {\n         long start = System.currentTimeMillis();\n         Cluster cluster = clusterService.findById(clusterId);\n         MDCBuilder.buildMdcContext(cluster);\n-        publishIfNeeded(alertRepository.findAllByCluster(clusterId));\n+        publishIfNeeded(alertRepository.findAllByClusterIdOrderById(clusterId));\n         LOGGER.debug(\"Finished cronTimeEvaluator for cluster {} in {} ms\", cluster.getStackCrn(), System.currentTimeMillis() - start);\n     }\n \n-    private void publishIfNeeded(List<TimeAlert> alerts) {\n+    protected void publishIfNeeded(List<TimeAlert> alerts) {\n+        TimeAlert triggeredAlert = null;\n         for (TimeAlert alert : alerts) {\n-            if (isPolicyAttached(alert) && isTrigger(alert)) {\n+            boolean alertTriggerable = isTrigger(alert);\n+            if (isPolicyAttached(alert) && alertTriggerable && null == triggeredAlert) {\n                 publish(alert);\n-                break;\n+                triggeredAlert = alert;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNzQ1NQ=="}, "originalCommit": {"oid": "7ace5107cdbcce8a68711189fde7a107f32cce7b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc1NTUyOnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/load/YarnResponseUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDozMToxMFrOG175Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowODowN1rOG1-kWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwODk4Ng==", "bodyText": "Is this needed if YARN is already processing this?", "url": "https://github.com/hortonworks/cloudbreak/pull/8618#discussion_r459208986", "createdAt": "2020-07-23T04:31:10Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/load/YarnResponseUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.periscope.monitor.evaluator.load;\n+\n+import static com.sequenceiq.periscope.monitor.evaluator.ScalingConstants.DEFAULT_MAX_SCALE_UP_STEP_SIZE;\n+\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.periscope.model.yarn.YarnScalingServiceV1Response;\n+\n+@Component\n+public class YarnResponseUtils {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(YarnResponseUtils.class);\n+\n+    public List<String> getYarnRecommendedDecommissionHostsForHostGroup(String clusterCrn, YarnScalingServiceV1Response yarnResponse,\n+            Map<String, String> hostFqdnsToInstanceId, int maxAllowedDownScale, Optional<Integer> mandatoryDownScaleCount) {\n+        Set<String> consideredNodeIds = new HashSet<>();\n+        Integer allowedDownscale = Math.max(maxAllowedDownScale, mandatoryDownScaleCount.orElse(0));\n+        List<String> decommissionNodes = yarnResponse.getScaleDownCandidates().orElse(List.of()).stream()\n+                .sorted(Comparator.comparingInt(YarnScalingServiceV1Response.DecommissionCandidate::getAmCount))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ace5107cdbcce8a68711189fde7a107f32cce7b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MjgyNw==", "bodyText": "removed the sorting.", "url": "https://github.com/hortonworks/cloudbreak/pull/8618#discussion_r459252827", "createdAt": "2020-07-23T07:08:07Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/load/YarnResponseUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.periscope.monitor.evaluator.load;\n+\n+import static com.sequenceiq.periscope.monitor.evaluator.ScalingConstants.DEFAULT_MAX_SCALE_UP_STEP_SIZE;\n+\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.periscope.model.yarn.YarnScalingServiceV1Response;\n+\n+@Component\n+public class YarnResponseUtils {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(YarnResponseUtils.class);\n+\n+    public List<String> getYarnRecommendedDecommissionHostsForHostGroup(String clusterCrn, YarnScalingServiceV1Response yarnResponse,\n+            Map<String, String> hostFqdnsToInstanceId, int maxAllowedDownScale, Optional<Integer> mandatoryDownScaleCount) {\n+        Set<String> consideredNodeIds = new HashSet<>();\n+        Integer allowedDownscale = Math.max(maxAllowedDownScale, mandatoryDownScaleCount.orElse(0));\n+        List<String> decommissionNodes = yarnResponse.getScaleDownCandidates().orElse(List.of()).stream()\n+                .sorted(Comparator.comparingInt(YarnScalingServiceV1Response.DecommissionCandidate::getAmCount))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwODk4Ng=="}, "originalCommit": {"oid": "7ace5107cdbcce8a68711189fde7a107f32cce7b"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3066, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}