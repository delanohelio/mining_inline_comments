{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MzYwNDA4", "number": 8038, "title": "CB-6809 Add Audit Service gRPC client", "bodyText": "Cover model validation with extensive unit testing", "createdAt": "2020-05-13T13:24:28Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8038", "merged": true, "mergeCommit": {"oid": "71e2f72d2093941c2b87f08e4f3068bad9c60851"}, "closed": true, "closedAt": "2020-05-15T08:01:41Z", "author": {"login": "bergerdenes"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchI7ShgBqjMzMzUzNzY4OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchb21lgFqTQxMjM2OTIzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e4829edee63335cdc9563b0a602717330b6859e", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/9e4829edee63335cdc9563b0a602717330b6859e", "committedDate": "2020-05-13T13:23:18Z", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing"}, "afterCommit": {"oid": "91aaca8147b8bbd448824ae004cd1261982abb35", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/91aaca8147b8bbd448824ae004cd1261982abb35", "committedDate": "2020-05-14T08:09:18Z", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91aaca8147b8bbd448824ae004cd1261982abb35", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/91aaca8147b8bbd448824ae004cd1261982abb35", "committedDate": "2020-05-14T08:09:18Z", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing"}, "afterCommit": {"oid": "d08d64760d18c62d8fe5bbefad0ee60dfff43cd4", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/d08d64760d18c62d8fe5bbefad0ee60dfff43cd4", "committedDate": "2020-05-14T12:45:13Z", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d08d64760d18c62d8fe5bbefad0ee60dfff43cd4", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/d08d64760d18c62d8fe5bbefad0ee60dfff43cd4", "committedDate": "2020-05-14T12:45:13Z", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing"}, "afterCommit": {"oid": "97ba434989f971467278402ac038b60520873400", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/97ba434989f971467278402ac038b60520873400", "committedDate": "2020-05-14T12:47:28Z", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExODI0Mzkw", "url": "https://github.com/hortonworks/cloudbreak/pull/8038#pullrequestreview-411824390", "createdAt": "2020-05-14T13:50:43Z", "commit": {"oid": "97ba434989f971467278402ac038b60520873400"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "776e2004e35a7d85902aeb026be463fdcae43319", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/776e2004e35a7d85902aeb026be463fdcae43319", "committedDate": "2020-05-14T19:35:20Z", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97ba434989f971467278402ac038b60520873400", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/97ba434989f971467278402ac038b60520873400", "committedDate": "2020-05-14T12:47:28Z", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing"}, "afterCommit": {"oid": "776e2004e35a7d85902aeb026be463fdcae43319", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/776e2004e35a7d85902aeb026be463fdcae43319", "committedDate": "2020-05-14T19:35:20Z", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzY5MjM3", "url": "https://github.com/hortonworks/cloudbreak/pull/8038#pullrequestreview-412369237", "createdAt": "2020-05-15T06:05:20Z", "commit": {"oid": "776e2004e35a7d85902aeb026be463fdcae43319"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjowNTozOVrOGV3n4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNjowNTozOVrOGV3n4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU4NDYxMA==", "bodyText": "why dont you use generic type for EventData?", "url": "https://github.com/hortonworks/cloudbreak/pull/8038#discussion_r425584610", "createdAt": "2020-05-15T06:05:39Z", "author": {"login": "topolyai5"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ActorBase;\n+import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n+import com.sequenceiq.cloudbreak.audit.model.ActorService;\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+\n+@Component\n+public class AuditEventToGrpcAuditEventConverter {\n+\n+    public AuditProto.AuditEvent convert(AuditEvent source) {\n+        String id = Optional.ofNullable(source.getId()).orElseGet(uuidSupplier());\n+        String requestId = Optional.ofNullable(source.getRequestId()).orElseGet(uuidSupplier());\n+        AuditProto.AuditEvent.Builder auditEventBuilder = prepareBuilderForCreateAuditEvent(source, id, requestId);\n+        updateAuditEventActor(auditEventBuilder, source.getActor());\n+        updateAuditEventData(auditEventBuilder, source.getEventData());\n+        return auditEventBuilder.build();\n+    }\n+\n+    private AuditProto.AuditEvent.Builder prepareBuilderForCreateAuditEvent(AuditEvent source, String id, String requestId) {\n+        AuditProto.AuditEvent.Builder builder = AuditProto.AuditEvent.newBuilder()\n+                .setId(id)\n+                .setTimestamp(System.currentTimeMillis())\n+                .setAccountId(source.getAccountId())\n+                .setRequestId(requestId)\n+                .setEventName(source.getEventName())\n+                .setEventSource(source.getEventSource());\n+        doIfTrue(source.getSourceIp(), StringUtils::isNotEmpty, builder::setSourceIPAddress);\n+        return builder;\n+    }\n+\n+    private void updateAuditEventActor(AuditProto.AuditEvent.Builder auditEventBuilder, ActorBase actorBase) {\n+        if (actorBase instanceof ActorCrn) {\n+            ActorCrn actor = (ActorCrn) actorBase;\n+            auditEventBuilder.setActorCrn(actor.getActorCrn());\n+        } else if (actorBase instanceof ActorService) {\n+            ActorService actor = (ActorService) actorBase;\n+            auditEventBuilder.setActorServiceName(actor.getActorServiceName());\n+        } else {\n+            throw new IllegalArgumentException(\"Actor has an invalid class: \" + actorBase.getClass().getName());\n+        }\n+    }\n+\n+    private void updateAuditEventData(AuditProto.AuditEvent.Builder auditEventBuilder, EventData source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776e2004e35a7d85902aeb026be463fdcae43319"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2209, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}