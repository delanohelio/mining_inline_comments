{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMjk5NDc2", "number": 9545, "title": "CB-10029 Azure managed image creation error can potentially lock user\u2026", "bodyText": "\u2026 out from using its single RG or subscription\nThe problem: when a user wants to use a new image, it needs to be copied to its storage account and then a managed image is created from it. The first step in image creation is to persist an image resource to database with status REQUESTED. If an exception comes during image creation then a polling is done. If after the polling the image is still not present then the exception is re-thrown and the user is notified.\nHowever, unbeknownst to the developers, the poller throws an exception on timeout - the code that would set image status to FAILED is not run any more. An image in REQUESTED state would then block the usage of that image forever, it is a trap state.\nSolution: the poller after image creation does not throw an exception on any error but lets the calling code decide what to do.\nSee detailed description in the commit message.", "createdAt": "2020-12-01T13:24:26Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9545", "merged": true, "mergeCommit": {"oid": "5456c938615207c566a77f7c24db157b73c51c3e"}, "closed": true, "closedAt": "2020-12-07T18:50:21Z", "author": {"login": "gergopapi2"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh-FMBgFqTU0MjE3MjM5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj6J2LAFqTU0NjQzNjM0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMTcyMzk5", "url": "https://github.com/hortonworks/cloudbreak/pull/9545#pullrequestreview-542172399", "createdAt": "2020-12-01T18:16:31Z", "commit": {"oid": "febcac0cf411fcc7ce9484c8d79fb1ab102ff975"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxNjozMVrOH85w1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxNjozMVrOH85w1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMjk5OA==", "bodyText": "is there a particular reason why you decided not to catch TimeoutException in a try... catch here?", "url": "https://github.com/hortonworks/cloudbreak/pull/9545#discussion_r533622998", "createdAt": "2020-12-01T18:16:31Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/image/AzureImageService.java", "diffHunk": "@@ -70,14 +72,18 @@ private AzureImage createImageAndNotify(AuthenticatedContext ac, VirtualMachineC\n     }\n \n     private Optional<VirtualMachineCustomImage> handleCustomImageCreationException(AzureImageInfo azureImageInfo, AuthenticatedContext ac,\n-            AzureClient client, AzureManagedImageCreationCheckerContext checkerContext, CloudException e) {\n+            AzureClient client, AzureManagedImageCreationCheckerContext checkerContext, CloudException originalException) {\n         Optional<VirtualMachineCustomImage> customImage;\n-        azureManagedImageCreationPoller.startPolling(ac, checkerContext);\n+        Optional<Throwable> errorResult = azureManagedImageCreationPoller.startPolling(ac, checkerContext, false);\n         customImage = findImage(azureImageInfo, client);\n         if (customImage.isEmpty()) {\n-            LOGGER.error(\"Failed to create custom image.\", e);\n             updateImageStatus(ac, azureImageInfo.getImageNameWithRegion(), azureImageInfo.getImageId(), CommonStatus.FAILED);\n-            throw new CloudConnectorException(e);\n+            if (errorResult.isPresent() && !(errorResult.get() instanceof TimeoutException)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "febcac0cf411fcc7ce9484c8d79fb1ab102ff975"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNzg5OTI4", "url": "https://github.com/hortonworks/cloudbreak/pull/9545#pullrequestreview-542789928", "createdAt": "2020-12-02T12:33:13Z", "commit": {"oid": "febcac0cf411fcc7ce9484c8d79fb1ab102ff975"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "febcac0cf411fcc7ce9484c8d79fb1ab102ff975", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/febcac0cf411fcc7ce9484c8d79fb1ab102ff975", "committedDate": "2020-12-01T13:23:22Z", "message": "CB-10029 Azure managed image creation error can potentially lock user out from using its single RG or subscription\n\nThe problem: when a user wants to use a new image, it needs to be copied to its storage account and then a managed image is created from it. The first step in image creation is to persist an image resource to database with status REQUESTED. If an exception comes during image creation then a polling is done. If after the polling the image is still not present then the exception is re-thrown and the user is notified.\nHowever, unbeknownst to the developers, the poller throws an exception on timeout - the code that would set image status to FAILED is not run any more. An image in REQUESTED state would then block the usage of that image forever, it is a trap state.\n\nSolution: the poller after image creation does not throw an exception on any error but lets the calling code decide what to do."}, "afterCommit": {"oid": "ae80e5e46f7ffe472e9d952c79a5acfee7422f5f", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ae80e5e46f7ffe472e9d952c79a5acfee7422f5f", "committedDate": "2020-12-07T08:46:14Z", "message": "CB-10029 Azure managed image creation error can potentially lock user out from using its single RG or subscription\n\nThe problem: when a user wants to use a new image, it needs to be copied to its storage account and then a managed image is created from it. The first step in image creation is to persist an image resource to database with status REQUESTED. If an exception comes during image creation then a polling is done. If after the polling the image is still not present then the exception is re-thrown and the user is notified.\nHowever, unbeknownst to the developers, the poller throws an exception on timeout - the code that would set image status to FAILED is not run any more. An image in REQUESTED state would then block the usage of that image forever, it is a trap state.\n\nSolution: the poller after image creation does not throw an exception on any error but lets the calling code decide what to do."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03130ce87eeb6ebf05ce09c44e7b6b4d039ea9e2", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/03130ce87eeb6ebf05ce09c44e7b6b4d039ea9e2", "committedDate": "2020-12-07T14:54:21Z", "message": "CB-10029 Azure managed image creation error can potentially lock user out from using its single RG or subscription\n\nThe problem: when a user wants to use a new image, it needs to be copied to its storage account and then a managed image is created from it. The first step in image creation is to persist an image resource to database with status REQUESTED. If an exception comes during image creation then a polling is done. If after the polling the image is still not present then the exception is re-thrown and the user is notified.\nHowever, unbeknownst to the developers, the poller throws an exception on timeout - the code that would set image status to FAILED is not run any more. An image in REQUESTED state would then block the usage of that image forever, it is a trap state.\n\nSolution: the poller after image creation does not throw an exception on any error but lets the calling code decide what to do."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae80e5e46f7ffe472e9d952c79a5acfee7422f5f", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ae80e5e46f7ffe472e9d952c79a5acfee7422f5f", "committedDate": "2020-12-07T08:46:14Z", "message": "CB-10029 Azure managed image creation error can potentially lock user out from using its single RG or subscription\n\nThe problem: when a user wants to use a new image, it needs to be copied to its storage account and then a managed image is created from it. The first step in image creation is to persist an image resource to database with status REQUESTED. If an exception comes during image creation then a polling is done. If after the polling the image is still not present then the exception is re-thrown and the user is notified.\nHowever, unbeknownst to the developers, the poller throws an exception on timeout - the code that would set image status to FAILED is not run any more. An image in REQUESTED state would then block the usage of that image forever, it is a trap state.\n\nSolution: the poller after image creation does not throw an exception on any error but lets the calling code decide what to do."}, "afterCommit": {"oid": "03130ce87eeb6ebf05ce09c44e7b6b4d039ea9e2", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/03130ce87eeb6ebf05ce09c44e7b6b4d039ea9e2", "committedDate": "2020-12-07T14:54:21Z", "message": "CB-10029 Azure managed image creation error can potentially lock user out from using its single RG or subscription\n\nThe problem: when a user wants to use a new image, it needs to be copied to its storage account and then a managed image is created from it. The first step in image creation is to persist an image resource to database with status REQUESTED. If an exception comes during image creation then a polling is done. If after the polling the image is still not present then the exception is re-thrown and the user is notified.\nHowever, unbeknownst to the developers, the poller throws an exception on timeout - the code that would set image status to FAILED is not run any more. An image in REQUESTED state would then block the usage of that image forever, it is a trap state.\n\nSolution: the poller after image creation does not throw an exception on any error but lets the calling code decide what to do."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NDM2MzQ5", "url": "https://github.com/hortonworks/cloudbreak/pull/9545#pullrequestreview-546436349", "createdAt": "2020-12-07T18:49:50Z", "commit": {"oid": "03130ce87eeb6ebf05ce09c44e7b6b4d039ea9e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2068, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}