{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMTE0NTQx", "number": 9569, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDoyNToyNFrOFClGgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzowMjoyOFrOFCo7hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjQ5MzQ0OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDoyNToyNFrOIB0nwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo0MToyNlrOICbOHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MTYzMw==", "bodyText": "suggestion: It looks like the String region value here is already present in the AuthenticatedContext ac parameter through String regionName = ac.getCloudContext().getLocation().getRegion().value(); can you get by with just the ac parameter being passed?\nI think something similar is going on with the Set<Group>> portToGroupMapping and AwsLoadBalancerScheme type parameters - they're both available in the loadBalancer object in the upscale() method.\nI think that would make the method signature cleaner:\ncfStackUtil.addLoadBalancerTargets(ac, loadBalancer, instances);\nAnd I think that reflects the \"purpose\" of each argument:\n\nac and region are really just here so we can construct clients to integrate with AWS, combine them into 1 to make the signature smaller.\nThe load balancer we're adding targets to is loadBalancer.\nThe new targets are held in `instances.\n\nI think in an ideal world the AuthenticatedContext would be provided via DI or some other means since it looks like it's being passed around a lot but actually used in very few places. \ud83e\udd37", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r538781633", "createdAt": "2020-12-08T20:25:24Z", "author": {"login": "brycederriso"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "diffHunk": "@@ -156,20 +169,96 @@ public DescribeInstancesRequest createDescribeInstancesRequest(Collection<String\n     }\n \n     public LoadBalancer getLoadBalancerByLogicalId(AuthenticatedContext ac, String logicalId, String region) {\n-        String cFStackName = getCfStackName(ac);\n-        AmazonCloudFormationRetryClient amazonCfClient =\n-            awsClient.createCloudFormationRetryClient(new AwsCredentialView(ac.getCloudCredential()), region);\n         AmazonElasticLoadBalancingClient amazonElbClient =\n             awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n \n-        DescribeStackResourceResult stackResourceResult = amazonCfClient.describeStackResource(new DescribeStackResourceRequest()\n-            .withStackName(cFStackName)\n-            .withLogicalResourceId(logicalId));\n-        String loadBalancerArn = stackResourceResult.getStackResourceDetail().getPhysicalResourceId();\n+        String loadBalancerArn = getResourceArnByLogicalId(ac, logicalId, region);\n \n         DescribeLoadBalancersResult loadBalancersResult = amazonElbClient.describeLoadBalancers(new DescribeLoadBalancersRequest()\n             .withLoadBalancerArns(Collections.singletonList(loadBalancerArn)));\n \n         return loadBalancersResult.getLoadBalancers().get(0);\n     }\n+\n+    public void addLoadBalancerTargets(AuthenticatedContext ac, String region, Map<Integer, Set<Group>> portToGroupMapping,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNDA0NA==", "bodyText": "You make well-thought out, compelling arguments. I've updated everything as you suggested.", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r539414044", "createdAt": "2020-12-09T15:41:26Z", "author": {"login": "hreeve-cloudera"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "diffHunk": "@@ -156,20 +169,96 @@ public DescribeInstancesRequest createDescribeInstancesRequest(Collection<String\n     }\n \n     public LoadBalancer getLoadBalancerByLogicalId(AuthenticatedContext ac, String logicalId, String region) {\n-        String cFStackName = getCfStackName(ac);\n-        AmazonCloudFormationRetryClient amazonCfClient =\n-            awsClient.createCloudFormationRetryClient(new AwsCredentialView(ac.getCloudCredential()), region);\n         AmazonElasticLoadBalancingClient amazonElbClient =\n             awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n \n-        DescribeStackResourceResult stackResourceResult = amazonCfClient.describeStackResource(new DescribeStackResourceRequest()\n-            .withStackName(cFStackName)\n-            .withLogicalResourceId(logicalId));\n-        String loadBalancerArn = stackResourceResult.getStackResourceDetail().getPhysicalResourceId();\n+        String loadBalancerArn = getResourceArnByLogicalId(ac, logicalId, region);\n \n         DescribeLoadBalancersResult loadBalancersResult = amazonElbClient.describeLoadBalancers(new DescribeLoadBalancersRequest()\n             .withLoadBalancerArns(Collections.singletonList(loadBalancerArn)));\n \n         return loadBalancersResult.getLoadBalancers().get(0);\n     }\n+\n+    public void addLoadBalancerTargets(AuthenticatedContext ac, String region, Map<Integer, Set<Group>> portToGroupMapping,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MTYzMw=="}, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjUxMzc3OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozMDoyNlrOIB0zTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo0MjoxMFrOICbQtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4NDU4OA==", "bodyText": "question: It looks like we're subtracting currentInstanceIds from this set of newInstanceIds, is that true? If so, are these actually instanceIdsFromNewTargetGroups?\nIt's a bit confusing to me to call them new, then remove the ones that aren't actually new.", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r538784588", "createdAt": "2020-12-08T20:30:26Z", "author": {"login": "brycederriso"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "diffHunk": "@@ -156,20 +169,96 @@ public DescribeInstancesRequest createDescribeInstancesRequest(Collection<String\n     }\n \n     public LoadBalancer getLoadBalancerByLogicalId(AuthenticatedContext ac, String logicalId, String region) {\n-        String cFStackName = getCfStackName(ac);\n-        AmazonCloudFormationRetryClient amazonCfClient =\n-            awsClient.createCloudFormationRetryClient(new AwsCredentialView(ac.getCloudCredential()), region);\n         AmazonElasticLoadBalancingClient amazonElbClient =\n             awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n \n-        DescribeStackResourceResult stackResourceResult = amazonCfClient.describeStackResource(new DescribeStackResourceRequest()\n-            .withStackName(cFStackName)\n-            .withLogicalResourceId(logicalId));\n-        String loadBalancerArn = stackResourceResult.getStackResourceDetail().getPhysicalResourceId();\n+        String loadBalancerArn = getResourceArnByLogicalId(ac, logicalId, region);\n \n         DescribeLoadBalancersResult loadBalancersResult = amazonElbClient.describeLoadBalancers(new DescribeLoadBalancersRequest()\n             .withLoadBalancerArns(Collections.singletonList(loadBalancerArn)));\n \n         return loadBalancersResult.getLoadBalancers().get(0);\n     }\n+\n+    public void addLoadBalancerTargets(AuthenticatedContext ac, String region, Map<Integer, Set<Group>> portToGroupMapping,\n+            AwsLoadBalancerScheme type, List<CloudResource> resourcesToAdd) {\n+        AmazonElasticLoadBalancingClient amazonElbClient =\n+            awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n+\n+        for (Map.Entry<Integer, Set<Group>> entry : portToGroupMapping.entrySet()) {\n+            // Get a list of the new instances in the target groups\n+            Set<String> newInstanceIds = getInstanceIdsForGroups(resourcesToAdd, entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNDcxMQ==", "bodyText": "I've changed the names to alreadyRegisteredInstanceIds and updatedInstanceIds, respectively.", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r539414711", "createdAt": "2020-12-09T15:42:10Z", "author": {"login": "hreeve-cloudera"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "diffHunk": "@@ -156,20 +169,96 @@ public DescribeInstancesRequest createDescribeInstancesRequest(Collection<String\n     }\n \n     public LoadBalancer getLoadBalancerByLogicalId(AuthenticatedContext ac, String logicalId, String region) {\n-        String cFStackName = getCfStackName(ac);\n-        AmazonCloudFormationRetryClient amazonCfClient =\n-            awsClient.createCloudFormationRetryClient(new AwsCredentialView(ac.getCloudCredential()), region);\n         AmazonElasticLoadBalancingClient amazonElbClient =\n             awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n \n-        DescribeStackResourceResult stackResourceResult = amazonCfClient.describeStackResource(new DescribeStackResourceRequest()\n-            .withStackName(cFStackName)\n-            .withLogicalResourceId(logicalId));\n-        String loadBalancerArn = stackResourceResult.getStackResourceDetail().getPhysicalResourceId();\n+        String loadBalancerArn = getResourceArnByLogicalId(ac, logicalId, region);\n \n         DescribeLoadBalancersResult loadBalancersResult = amazonElbClient.describeLoadBalancers(new DescribeLoadBalancersRequest()\n             .withLoadBalancerArns(Collections.singletonList(loadBalancerArn)));\n \n         return loadBalancersResult.getLoadBalancers().get(0);\n     }\n+\n+    public void addLoadBalancerTargets(AuthenticatedContext ac, String region, Map<Integer, Set<Group>> portToGroupMapping,\n+            AwsLoadBalancerScheme type, List<CloudResource> resourcesToAdd) {\n+        AmazonElasticLoadBalancingClient amazonElbClient =\n+            awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n+\n+        for (Map.Entry<Integer, Set<Group>> entry : portToGroupMapping.entrySet()) {\n+            // Get a list of the new instances in the target groups\n+            Set<String> newInstanceIds = getInstanceIdsForGroups(resourcesToAdd, entry.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4NDU4OA=="}, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjUzMTE1OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozNDo1N1rOIB09aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozNDo1N1rOIB09aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4NzE3Nw==", "bodyText": "suggestion: Consider:\nnewInstanceIds.removeAll(currentInstanceIds);\nThis would be mutating the collection (boo) but keeps type-safety and I think is easier to read (yay).", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r538787177", "createdAt": "2020-12-08T20:34:57Z", "author": {"login": "brycederriso"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "diffHunk": "@@ -156,20 +169,96 @@ public DescribeInstancesRequest createDescribeInstancesRequest(Collection<String\n     }\n \n     public LoadBalancer getLoadBalancerByLogicalId(AuthenticatedContext ac, String logicalId, String region) {\n-        String cFStackName = getCfStackName(ac);\n-        AmazonCloudFormationRetryClient amazonCfClient =\n-            awsClient.createCloudFormationRetryClient(new AwsCredentialView(ac.getCloudCredential()), region);\n         AmazonElasticLoadBalancingClient amazonElbClient =\n             awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n \n-        DescribeStackResourceResult stackResourceResult = amazonCfClient.describeStackResource(new DescribeStackResourceRequest()\n-            .withStackName(cFStackName)\n-            .withLogicalResourceId(logicalId));\n-        String loadBalancerArn = stackResourceResult.getStackResourceDetail().getPhysicalResourceId();\n+        String loadBalancerArn = getResourceArnByLogicalId(ac, logicalId, region);\n \n         DescribeLoadBalancersResult loadBalancersResult = amazonElbClient.describeLoadBalancers(new DescribeLoadBalancersRequest()\n             .withLoadBalancerArns(Collections.singletonList(loadBalancerArn)));\n \n         return loadBalancersResult.getLoadBalancers().get(0);\n     }\n+\n+    public void addLoadBalancerTargets(AuthenticatedContext ac, String region, Map<Integer, Set<Group>> portToGroupMapping,\n+            AwsLoadBalancerScheme type, List<CloudResource> resourcesToAdd) {\n+        AmazonElasticLoadBalancingClient amazonElbClient =\n+            awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n+\n+        for (Map.Entry<Integer, Set<Group>> entry : portToGroupMapping.entrySet()) {\n+            // Get a list of the new instances in the target groups\n+            Set<String> newInstanceIds = getInstanceIdsForGroups(resourcesToAdd, entry.getValue());\n+\n+            // Find target group ARN\n+            String targetGroupArn = getResourceArnByLogicalId(ac, AwsTargetGroup.getTargetGroupName(entry.getKey(), type), region);\n+\n+            // Use ARN to fetch a list of current targets\n+            DescribeTargetHealthResult targetHealthResult = amazonElbClient.describeTargetHealth(new DescribeTargetHealthRequest()\n+                .withTargetGroupArn(targetGroupArn));\n+            List<TargetDescription> targetDescriptions = targetHealthResult.getTargetHealthDescriptions().stream()\n+                .map(TargetHealthDescription::getTarget)\n+                .collect(Collectors.toList());\n+            Set<String> currentInstanceIds = targetDescriptions.stream()\n+                .map(TargetDescription::getId)\n+                .collect(Collectors.toSet());\n+\n+            // Get any instances that need to be added to the target group\n+            Collection<String> instancesToAdd = CollectionUtils.subtract(newInstanceIds, currentInstanceIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjUzNTA3OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozNjowNFrOIB0_nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozNjowNFrOIB0_nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4Nzc0MQ==", "bodyText": "suggestion: Comments about method signature from above apply here too I think.", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r538787741", "createdAt": "2020-12-08T20:36:04Z", "author": {"login": "brycederriso"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "diffHunk": "@@ -156,20 +169,96 @@ public DescribeInstancesRequest createDescribeInstancesRequest(Collection<String\n     }\n \n     public LoadBalancer getLoadBalancerByLogicalId(AuthenticatedContext ac, String logicalId, String region) {\n-        String cFStackName = getCfStackName(ac);\n-        AmazonCloudFormationRetryClient amazonCfClient =\n-            awsClient.createCloudFormationRetryClient(new AwsCredentialView(ac.getCloudCredential()), region);\n         AmazonElasticLoadBalancingClient amazonElbClient =\n             awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n \n-        DescribeStackResourceResult stackResourceResult = amazonCfClient.describeStackResource(new DescribeStackResourceRequest()\n-            .withStackName(cFStackName)\n-            .withLogicalResourceId(logicalId));\n-        String loadBalancerArn = stackResourceResult.getStackResourceDetail().getPhysicalResourceId();\n+        String loadBalancerArn = getResourceArnByLogicalId(ac, logicalId, region);\n \n         DescribeLoadBalancersResult loadBalancersResult = amazonElbClient.describeLoadBalancers(new DescribeLoadBalancersRequest()\n             .withLoadBalancerArns(Collections.singletonList(loadBalancerArn)));\n \n         return loadBalancersResult.getLoadBalancers().get(0);\n     }\n+\n+    public void addLoadBalancerTargets(AuthenticatedContext ac, String region, Map<Integer, Set<Group>> portToGroupMapping,\n+            AwsLoadBalancerScheme type, List<CloudResource> resourcesToAdd) {\n+        AmazonElasticLoadBalancingClient amazonElbClient =\n+            awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n+\n+        for (Map.Entry<Integer, Set<Group>> entry : portToGroupMapping.entrySet()) {\n+            // Get a list of the new instances in the target groups\n+            Set<String> newInstanceIds = getInstanceIdsForGroups(resourcesToAdd, entry.getValue());\n+\n+            // Find target group ARN\n+            String targetGroupArn = getResourceArnByLogicalId(ac, AwsTargetGroup.getTargetGroupName(entry.getKey(), type), region);\n+\n+            // Use ARN to fetch a list of current targets\n+            DescribeTargetHealthResult targetHealthResult = amazonElbClient.describeTargetHealth(new DescribeTargetHealthRequest()\n+                .withTargetGroupArn(targetGroupArn));\n+            List<TargetDescription> targetDescriptions = targetHealthResult.getTargetHealthDescriptions().stream()\n+                .map(TargetHealthDescription::getTarget)\n+                .collect(Collectors.toList());\n+            Set<String> currentInstanceIds = targetDescriptions.stream()\n+                .map(TargetDescription::getId)\n+                .collect(Collectors.toSet());\n+\n+            // Get any instances that need to be added to the target group\n+            Collection<String> instancesToAdd = CollectionUtils.subtract(newInstanceIds, currentInstanceIds);\n+\n+            // Register any new instances\n+            if (!instancesToAdd.isEmpty()) {\n+                List<TargetDescription> targetsToAdd = instancesToAdd.stream()\n+                    .map(instanceId -> new TargetDescription().withId(instanceId))\n+                    .collect(Collectors.toList());\n+                RegisterTargetsResult registerTargetsResult = amazonElbClient.registerTargets(new RegisterTargetsRequest()\n+                    .withTargetGroupArn(targetGroupArn)\n+                    .withTargets(targetsToAdd));\n+            }\n+        }\n+    }\n+\n+    public void removeLoadBalancerTargets(AuthenticatedContext ac, String region, Map<Integer, Set<Group>> portToGroupMapping,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjUzNzc0OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozNjo0OFrOIB1BKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozNjo0OFrOIB1BKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4ODEzNg==", "bodyText": "praise: Thank you for comments!", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r538788136", "createdAt": "2020-12-08T20:36:48Z", "author": {"login": "brycederriso"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/CloudFormationStackUtil.java", "diffHunk": "@@ -156,20 +169,96 @@ public DescribeInstancesRequest createDescribeInstancesRequest(Collection<String\n     }\n \n     public LoadBalancer getLoadBalancerByLogicalId(AuthenticatedContext ac, String logicalId, String region) {\n-        String cFStackName = getCfStackName(ac);\n-        AmazonCloudFormationRetryClient amazonCfClient =\n-            awsClient.createCloudFormationRetryClient(new AwsCredentialView(ac.getCloudCredential()), region);\n         AmazonElasticLoadBalancingClient amazonElbClient =\n             awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n \n-        DescribeStackResourceResult stackResourceResult = amazonCfClient.describeStackResource(new DescribeStackResourceRequest()\n-            .withStackName(cFStackName)\n-            .withLogicalResourceId(logicalId));\n-        String loadBalancerArn = stackResourceResult.getStackResourceDetail().getPhysicalResourceId();\n+        String loadBalancerArn = getResourceArnByLogicalId(ac, logicalId, region);\n \n         DescribeLoadBalancersResult loadBalancersResult = amazonElbClient.describeLoadBalancers(new DescribeLoadBalancersRequest()\n             .withLoadBalancerArns(Collections.singletonList(loadBalancerArn)));\n \n         return loadBalancersResult.getLoadBalancers().get(0);\n     }\n+\n+    public void addLoadBalancerTargets(AuthenticatedContext ac, String region, Map<Integer, Set<Group>> portToGroupMapping,\n+            AwsLoadBalancerScheme type, List<CloudResource> resourcesToAdd) {\n+        AmazonElasticLoadBalancingClient amazonElbClient =\n+            awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n+\n+        for (Map.Entry<Integer, Set<Group>> entry : portToGroupMapping.entrySet()) {\n+            // Get a list of the new instances in the target groups\n+            Set<String> newInstanceIds = getInstanceIdsForGroups(resourcesToAdd, entry.getValue());\n+\n+            // Find target group ARN\n+            String targetGroupArn = getResourceArnByLogicalId(ac, AwsTargetGroup.getTargetGroupName(entry.getKey(), type), region);\n+\n+            // Use ARN to fetch a list of current targets\n+            DescribeTargetHealthResult targetHealthResult = amazonElbClient.describeTargetHealth(new DescribeTargetHealthRequest()\n+                .withTargetGroupArn(targetGroupArn));\n+            List<TargetDescription> targetDescriptions = targetHealthResult.getTargetHealthDescriptions().stream()\n+                .map(TargetHealthDescription::getTarget)\n+                .collect(Collectors.toList());\n+            Set<String> currentInstanceIds = targetDescriptions.stream()\n+                .map(TargetDescription::getId)\n+                .collect(Collectors.toSet());\n+\n+            // Get any instances that need to be added to the target group\n+            Collection<String> instancesToAdd = CollectionUtils.subtract(newInstanceIds, currentInstanceIds);\n+\n+            // Register any new instances\n+            if (!instancesToAdd.isEmpty()) {\n+                List<TargetDescription> targetsToAdd = instancesToAdd.stream()\n+                    .map(instanceId -> new TargetDescription().withId(instanceId))\n+                    .collect(Collectors.toList());\n+                RegisterTargetsResult registerTargetsResult = amazonElbClient.registerTargets(new RegisterTargetsRequest()\n+                    .withTargetGroupArn(targetGroupArn)\n+                    .withTargets(targetsToAdd));\n+            }\n+        }\n+    }\n+\n+    public void removeLoadBalancerTargets(AuthenticatedContext ac, String region, Map<Integer, Set<Group>> portToGroupMapping,\n+            AwsLoadBalancerScheme type, List<CloudResource> resourcesToRemove) {\n+        AmazonElasticLoadBalancingClient amazonElbClient =\n+            awsClient.createElasticLoadBalancingClient(new AwsCredentialView(ac.getCloudCredential()), region);\n+\n+        for (Map.Entry<Integer, Set<Group>> entry : portToGroupMapping.entrySet()) {\n+            // Get a list of the instance ids to remove\n+            Set<String> instancesToRemove = getInstanceIdsForGroups(resourcesToRemove, entry.getValue());\n+\n+            // Find target group ARN\n+            String targetGroupArn = getResourceArnByLogicalId(ac, AwsTargetGroup.getTargetGroupName(entry.getKey(), type), region);\n+\n+            // Deregister any instances that no longer exist\n+            if (!instancesToRemove.isEmpty()) {\n+                try {\n+                    List<TargetDescription> targetsToRemove = instancesToRemove.stream()\n+                        .map(instanceId -> new TargetDescription().withId(instanceId))\n+                        .collect(Collectors.toList());\n+                    DeregisterTargetsResult deregisterTargetsResult = amazonElbClient.deregisterTargets(new DeregisterTargetsRequest()\n+                        .withTargetGroupArn(targetGroupArn)\n+                        .withTargets(targetsToRemove));\n+                } catch (InvalidTargetException ignored) {\n+                    // no-op - we tried to remove a target that wasn't in the target group, which is fine", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjU5NDM2OnYy", "diffSide": "LEFT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsResourceConnector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo1MToxNVrOIB1iLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo1OToyOVrOIDNdtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5NjU4OQ==", "bodyText": "question: No longer using this Object resourcesToRemove is very suspicious to me, though I understand if it's necessary to keep the Interface contract intact.\nIs that the case?", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r538796589", "createdAt": "2020-12-08T20:51:15Z", "author": {"login": "brycederriso"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsResourceConnector.java", "diffHunk": "@@ -162,7 +162,7 @@ public Object collectResourcesToRemove(AuthenticatedContext authenticatedContext\n     @Override\n     public List<CloudResourceStatus> downscale(AuthenticatedContext auth, CloudStack stack, List<CloudResource> resources, List<CloudInstance> vms,\n             Object resourcesToRemove) {\n-        return awsDownscaleService.downscale(auth, stack, resources, vms, resourcesToRemove);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNzM0Mw==", "bodyText": "The resourcesToRemove parameter comes from the interface, and does seem to be used by by other cloud providers, just not AWS. However, I found it very confusing when I was working on this to see that awsDownscaleService.downscale had a parameter called resourcesToRemove, but if you look at the actual code those aren't the resources being removed because that object isn't used at all. So this technically doesn't have anything to do with my change, but I thought it cleaned up the code and made it less confusing.", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r539417343", "createdAt": "2020-12-09T15:45:05Z", "author": {"login": "hreeve-cloudera"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsResourceConnector.java", "diffHunk": "@@ -162,7 +162,7 @@ public Object collectResourcesToRemove(AuthenticatedContext authenticatedContext\n     @Override\n     public List<CloudResourceStatus> downscale(AuthenticatedContext auth, CloudStack stack, List<CloudResource> resources, List<CloudInstance> vms,\n             Object resourcesToRemove) {\n-        return awsDownscaleService.downscale(auth, stack, resources, vms, resourcesToRemove);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5NjU4OQ=="}, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzNzIzNg==", "bodyText": "Ah, ok. You're right, this is better I think.\nThe real issue is with the interface, but I'm not familiar enough with it to suggest a refactoring that would work.\nThanks!", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r540237236", "createdAt": "2020-12-10T14:59:29Z", "author": {"login": "brycederriso"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsResourceConnector.java", "diffHunk": "@@ -162,7 +162,7 @@ public Object collectResourcesToRemove(AuthenticatedContext authenticatedContext\n     @Override\n     public List<CloudResourceStatus> downscale(AuthenticatedContext auth, CloudStack stack, List<CloudResource> resources, List<CloudInstance> vms,\n             Object resourcesToRemove) {\n-        return awsDownscaleService.downscale(auth, stack, resources, vms, resourcesToRemove);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5NjU4OQ=="}, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzEyMDcxOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/loadbalancer/AwsTargetGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzowMjoyOFrOIB6QTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo0MDozNFrOICbLAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3MzkzNQ==", "bodyText": "Can this be package-private?", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r538873935", "createdAt": "2020-12-08T23:02:28Z", "author": {"login": "kmanamcheri"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/loadbalancer/AwsTargetGroup.java", "diffHunk": "@@ -49,7 +49,7 @@ public int getOrder() {\n         return instanceIds;\n     }\n \n-    private static String getTargetGroupName(int port, AwsLoadBalancerScheme scheme) {\n+    public static String getTargetGroupName(int port, AwsLoadBalancerScheme scheme) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxMzI1MA==", "bodyText": "No, it's referenced outside the package.", "url": "https://github.com/hortonworks/cloudbreak/pull/9569#discussion_r539413250", "createdAt": "2020-12-09T15:40:34Z", "author": {"login": "hreeve-cloudera"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/loadbalancer/AwsTargetGroup.java", "diffHunk": "@@ -49,7 +49,7 @@ public int getOrder() {\n         return instanceIds;\n     }\n \n-    private static String getTargetGroupName(int port, AwsLoadBalancerScheme scheme) {\n+    public static String getTargetGroupName(int port, AwsLoadBalancerScheme scheme) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3MzkzNQ=="}, "originalCommit": {"oid": "8c99d89ca3675142f6fee7e43de040a4c5dcb833"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3413, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}