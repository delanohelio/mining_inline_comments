{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDAzNTIz", "number": 7424, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDowNDoyNFrODj0tbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyOToxNVrODkO7-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODkwMzQ4OnYy", "diffSide": "RIGHT", "path": "common/src/main/resources/messages/messages.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDowNDoyNFrOFv1_Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDo0ODo1NlrOFv3b9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMTkwNw==", "bodyText": "external.database ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385711907", "createdAt": "2020-02-28T14:04:24Z", "author": {"login": "doktoric"}, "path": "common/src/main/resources/messages/messages.properties", "diffHunk": "@@ -122,6 +122,14 @@ cluster.gateway.change=Starting primary gateway change\n cluster.gateway.changed.successfully=Primary gateway successfully changed to {0}\n cluster.gateway.change.failed=Primary gateway change failed. Reason: {0}\n cluster.ambari.cluster.decommissioning.time=The decommission of the Data nodes will take approximately {0}.\n+\n+cluster.externaldatabase.deletion.started=External database termination started.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczNTY2OQ==", "bodyText": "actually the current separation makes more sense logically", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385735669", "createdAt": "2020-02-28T14:48:56Z", "author": {"login": "attilapalfi92"}, "path": "common/src/main/resources/messages/messages.properties", "diffHunk": "@@ -122,6 +122,14 @@ cluster.gateway.change=Starting primary gateway change\n cluster.gateway.changed.successfully=Primary gateway successfully changed to {0}\n cluster.gateway.change.failed=Primary gateway change failed. Reason: {0}\n cluster.ambari.cluster.decommissioning.time=The decommission of the Data nodes will take approximately {0}.\n+\n+cluster.externaldatabase.deletion.started=External database termination started.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMTkwNw=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODkxMjQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/conf/ExternalDatabaseConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDowNzoxMVrOFv2EzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTo0NjoyM1rOFwZH2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzM1Nw==", "bodyText": "is this a tottaly new class for datalake db ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385713357", "createdAt": "2020-02-28T14:07:11Z", "author": {"login": "doktoric"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/conf/ExternalDatabaseConfig.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.sequenceiq.cloudbreak.conf;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseServerParameterSetter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseStackConfig;\n+import com.sequenceiq.cloudbreak.util.FileReaderUtils;\n+\n+@Configuration\n+public class ExternalDatabaseConfig {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDatabaseConfig.class);\n+\n+    @Value(\"${datalake.supported.externaldb.platform:AWS}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI4NzU3OA==", "bodyText": "the value coordinate is a copy-paste mistake. changed to a more meaningful attribute.", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386287578", "createdAt": "2020-03-02T09:46:23Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/conf/ExternalDatabaseConfig.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.sequenceiq.cloudbreak.conf;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseServerParameterSetter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseStackConfig;\n+import com.sequenceiq.cloudbreak.util.FileReaderUtils;\n+\n+@Configuration\n+public class ExternalDatabaseConfig {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDatabaseConfig.class);\n+\n+    @Value(\"${datalake.supported.externaldb.platform:AWS}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzM1Nw=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODkxNTMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/ExternalDatabaseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDowODowN1rOFv2GmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTozNDo1MVrOFwQSxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzgxNg==", "bodyText": "for cluster -> for Data Hub", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385713816", "createdAt": "2020-02-28T14:08:07Z", "author": {"login": "doktoric"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/ExternalDatabaseService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.dyngr.Polling;\n+import com.dyngr.core.AttemptResults;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.cloud.store.InMemoryStateStore;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.repository.cluster.ClusterRepository;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseOperation;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseServerParameterSetter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.PollingConfig;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseStackConfig;\n+import com.sequenceiq.cloudbreak.service.rdsconfig.RedbeamsClientService;\n+import com.sequenceiq.environment.api.v1.environment.model.response.DetailedEnvironmentResponse;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.requests.AllocateDatabaseServerV4Request;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.responses.DatabaseServerV4Response;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+@Service\n+public class ExternalDatabaseService {\n+\n+    public static final int SLEEP_TIME_IN_SEC_FOR_DB_POLLING = 10;\n+\n+    public static final int DURATION_IN_MINUTES_FOR_DB_POLLING = 60;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDatabaseService.class);\n+\n+    private final RedbeamsClientService redbeamsClient;\n+\n+    private final ClusterRepository clusterRepository;\n+\n+    private final  Map<CloudPlatform, DatabaseStackConfig> dbConfigs;\n+\n+    private final Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap;\n+\n+    public ExternalDatabaseService(RedbeamsClientService redbeamsClient, ClusterRepository clusterRepository,\n+            Map<CloudPlatform, DatabaseStackConfig> dbConfigs, Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap) {\n+        this.redbeamsClient = redbeamsClient;\n+        this.clusterRepository = clusterRepository;\n+        this.dbConfigs = dbConfigs;\n+        this.databaseServerParameterSetterMap = databaseServerParameterSetterMap;\n+    }\n+\n+    public void provisionDatabase(Cluster cluster, DatabaseAvailabilityType externalDatabase, DetailedEnvironmentResponse environment) {\n+        LOGGER.info(\"Create external {} database server in environment {} for cluster {}\", externalDatabase.name(), environment.getName(), cluster.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MjkxOA==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386142918", "createdAt": "2020-03-01T21:34:51Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/ExternalDatabaseService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.dyngr.Polling;\n+import com.dyngr.core.AttemptResults;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.cloud.store.InMemoryStateStore;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.repository.cluster.ClusterRepository;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseOperation;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseServerParameterSetter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.PollingConfig;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseStackConfig;\n+import com.sequenceiq.cloudbreak.service.rdsconfig.RedbeamsClientService;\n+import com.sequenceiq.environment.api.v1.environment.model.response.DetailedEnvironmentResponse;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.requests.AllocateDatabaseServerV4Request;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.responses.DatabaseServerV4Response;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+@Service\n+public class ExternalDatabaseService {\n+\n+    public static final int SLEEP_TIME_IN_SEC_FOR_DB_POLLING = 10;\n+\n+    public static final int DURATION_IN_MINUTES_FOR_DB_POLLING = 60;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDatabaseService.class);\n+\n+    private final RedbeamsClientService redbeamsClient;\n+\n+    private final ClusterRepository clusterRepository;\n+\n+    private final  Map<CloudPlatform, DatabaseStackConfig> dbConfigs;\n+\n+    private final Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap;\n+\n+    public ExternalDatabaseService(RedbeamsClientService redbeamsClient, ClusterRepository clusterRepository,\n+            Map<CloudPlatform, DatabaseStackConfig> dbConfigs, Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap) {\n+        this.redbeamsClient = redbeamsClient;\n+        this.clusterRepository = clusterRepository;\n+        this.dbConfigs = dbConfigs;\n+        this.databaseServerParameterSetterMap = databaseServerParameterSetterMap;\n+    }\n+\n+    public void provisionDatabase(Cluster cluster, DatabaseAvailabilityType externalDatabase, DetailedEnvironmentResponse environment) {\n+        LOGGER.info(\"Create external {} database server in environment {} for cluster {}\", externalDatabase.name(), environment.getName(), cluster.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzgxNg=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODkxNjAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/ExternalDatabaseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDowODoyMFrOFv2HCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTozNTowOFrOFwQS0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzkzMQ==", "bodyText": "for Data Hub", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385713931", "createdAt": "2020-02-28T14:08:20Z", "author": {"login": "doktoric"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/ExternalDatabaseService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.dyngr.Polling;\n+import com.dyngr.core.AttemptResults;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.cloud.store.InMemoryStateStore;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.repository.cluster.ClusterRepository;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseOperation;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseServerParameterSetter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.PollingConfig;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseStackConfig;\n+import com.sequenceiq.cloudbreak.service.rdsconfig.RedbeamsClientService;\n+import com.sequenceiq.environment.api.v1.environment.model.response.DetailedEnvironmentResponse;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.requests.AllocateDatabaseServerV4Request;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.responses.DatabaseServerV4Response;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+@Service\n+public class ExternalDatabaseService {\n+\n+    public static final int SLEEP_TIME_IN_SEC_FOR_DB_POLLING = 10;\n+\n+    public static final int DURATION_IN_MINUTES_FOR_DB_POLLING = 60;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDatabaseService.class);\n+\n+    private final RedbeamsClientService redbeamsClient;\n+\n+    private final ClusterRepository clusterRepository;\n+\n+    private final  Map<CloudPlatform, DatabaseStackConfig> dbConfigs;\n+\n+    private final Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap;\n+\n+    public ExternalDatabaseService(RedbeamsClientService redbeamsClient, ClusterRepository clusterRepository,\n+            Map<CloudPlatform, DatabaseStackConfig> dbConfigs, Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap) {\n+        this.redbeamsClient = redbeamsClient;\n+        this.clusterRepository = clusterRepository;\n+        this.dbConfigs = dbConfigs;\n+        this.databaseServerParameterSetterMap = databaseServerParameterSetterMap;\n+    }\n+\n+    public void provisionDatabase(Cluster cluster, DatabaseAvailabilityType externalDatabase, DetailedEnvironmentResponse environment) {\n+        LOGGER.info(\"Create external {} database server in environment {} for cluster {}\", externalDatabase.name(), environment.getName(), cluster.getName());\n+        AllocateDatabaseServerV4Request request = getDatabaseRequest(environment, externalDatabase);\n+        String databaseCrn;\n+        try {\n+            databaseCrn = redbeamsClient.create(request).getResourceCrn();\n+            updateClusterWithDatabaseServerCrn(cluster, databaseCrn);\n+        } catch (BadRequestException badRequestException) {\n+            LOGGER.error(\"Redbeams create request failed, bad request\", badRequestException);\n+            throw badRequestException;\n+        }\n+        waitAndGetDatabase(cluster, databaseCrn, DatabaseOperation.CREATION, true);\n+\n+    }\n+\n+    public void terminateDatabase(Cluster cluster, DatabaseAvailabilityType externalDatabase, DetailedEnvironmentResponse environment, boolean forced) {\n+        LOGGER.info(\"Terminate external {} database server in environment {} for cluster {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MjkzMA==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386142930", "createdAt": "2020-03-01T21:35:08Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/ExternalDatabaseService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.dyngr.Polling;\n+import com.dyngr.core.AttemptResults;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.cloud.store.InMemoryStateStore;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.repository.cluster.ClusterRepository;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseOperation;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseServerParameterSetter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.PollingConfig;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseStackConfig;\n+import com.sequenceiq.cloudbreak.service.rdsconfig.RedbeamsClientService;\n+import com.sequenceiq.environment.api.v1.environment.model.response.DetailedEnvironmentResponse;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.requests.AllocateDatabaseServerV4Request;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.responses.DatabaseServerV4Response;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+@Service\n+public class ExternalDatabaseService {\n+\n+    public static final int SLEEP_TIME_IN_SEC_FOR_DB_POLLING = 10;\n+\n+    public static final int DURATION_IN_MINUTES_FOR_DB_POLLING = 60;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDatabaseService.class);\n+\n+    private final RedbeamsClientService redbeamsClient;\n+\n+    private final ClusterRepository clusterRepository;\n+\n+    private final  Map<CloudPlatform, DatabaseStackConfig> dbConfigs;\n+\n+    private final Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap;\n+\n+    public ExternalDatabaseService(RedbeamsClientService redbeamsClient, ClusterRepository clusterRepository,\n+            Map<CloudPlatform, DatabaseStackConfig> dbConfigs, Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap) {\n+        this.redbeamsClient = redbeamsClient;\n+        this.clusterRepository = clusterRepository;\n+        this.dbConfigs = dbConfigs;\n+        this.databaseServerParameterSetterMap = databaseServerParameterSetterMap;\n+    }\n+\n+    public void provisionDatabase(Cluster cluster, DatabaseAvailabilityType externalDatabase, DetailedEnvironmentResponse environment) {\n+        LOGGER.info(\"Create external {} database server in environment {} for cluster {}\", externalDatabase.name(), environment.getName(), cluster.getName());\n+        AllocateDatabaseServerV4Request request = getDatabaseRequest(environment, externalDatabase);\n+        String databaseCrn;\n+        try {\n+            databaseCrn = redbeamsClient.create(request).getResourceCrn();\n+            updateClusterWithDatabaseServerCrn(cluster, databaseCrn);\n+        } catch (BadRequestException badRequestException) {\n+            LOGGER.error(\"Redbeams create request failed, bad request\", badRequestException);\n+            throw badRequestException;\n+        }\n+        waitAndGetDatabase(cluster, databaseCrn, DatabaseOperation.CREATION, true);\n+\n+    }\n+\n+    public void terminateDatabase(Cluster cluster, DatabaseAvailabilityType externalDatabase, DetailedEnvironmentResponse environment, boolean forced) {\n+        LOGGER.info(\"Terminate external {} database server in environment {} for cluster {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzkzMQ=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTEwNzU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/provision/ExternalDatabaseCreationActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowMzoyNlrOFv385w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxNDo1M1rOFwg88A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDEwMw==", "bodyText": "?", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385744103", "createdAt": "2020-02-28T15:03:26Z", "author": {"login": "doktoric"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/provision/ExternalDatabaseCreationActions.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.statemachine.StateContext;\n+import org.springframework.statemachine.action.Action;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.ExternalDatabaseContext;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.StackUpdaterService;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.action.AbstractExternalDatabaseCreationAction;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationEvent;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationState;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.provision.StackCreationEvent;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseResult;\n+import com.sequenceiq.cloudbreak.service.metrics.MetricType;\n+import com.sequenceiq.flow.core.Flow;\n+import com.sequenceiq.flow.core.FlowParameters;\n+\n+@Configuration\n+public class ExternalDatabaseCreationActions {\n+\n+    @Inject\n+    private StackUpdaterService stackUpdaterService;\n+\n+    @Bean(name = \"WAIT_FOR_EXTERNAL_DATABASE_STATE\")\n+    public Action<?, ?> externalDatabaseCreation() {\n+        return new AbstractExternalDatabaseCreationAction<>(StackEvent.class) {\n+            @Override\n+            protected void doExecute(ExternalDatabaseContext context, StackEvent payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ExternalDatabaseContext context) {\n+                Stack stack = context.getStack();\n+                return new CreateExternalDatabaseRequest(stack.getId(), \"CreateExternalDatabaseRequest\", stack.getName(), stack.getResourceCrn(), stack);\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"EXTERNAL_DATABASE_CREATION_FINISHED_STATE\")\n+    public Action<?, ?> externalDatabaseCreationFinishedAction() {\n+        return new AbstractExternalDatabaseCreationAction<>(CreateExternalDatabaseResult.class) {\n+            @Override\n+            protected void doExecute(ExternalDatabaseContext context, CreateExternalDatabaseResult payload, Map<Object, Object> variables) {\n+                getMetricService().incrementMetricCounter(MetricType.EXTERNAL_DATABASE_CREATION_SUCCESSFUL, context.getStack());\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ExternalDatabaseContext context) {\n+                return new StackEvent(ExternalDatabaseCreationEvent.EXTERNAL_DATABASE_CREATION_FINISHED_EVENT.event(), context.getStack().getId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"EXTERNAL_DATABASE_CREATION_FAILED_STATE\")\n+    public Action<?, ?> externalDatabaseCreationFailureAction() {\n+        return new AbstractExternalDatabaseCreationAction<>(CreateExternalDatabaseFailed.class) {\n+\n+            @Override\n+            protected void doExecute(ExternalDatabaseContext context, CreateExternalDatabaseFailed payload, Map<Object, Object> variables) {\n+//                stackCreationService.handleStackCreationFailure(context.getStack(), payload.getException());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNTg1Ng==", "bodyText": "removed", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386415856", "createdAt": "2020-03-02T14:14:53Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/provision/ExternalDatabaseCreationActions.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.statemachine.StateContext;\n+import org.springframework.statemachine.action.Action;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.ExternalDatabaseContext;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.StackUpdaterService;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.action.AbstractExternalDatabaseCreationAction;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationEvent;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationState;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.provision.StackCreationEvent;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseResult;\n+import com.sequenceiq.cloudbreak.service.metrics.MetricType;\n+import com.sequenceiq.flow.core.Flow;\n+import com.sequenceiq.flow.core.FlowParameters;\n+\n+@Configuration\n+public class ExternalDatabaseCreationActions {\n+\n+    @Inject\n+    private StackUpdaterService stackUpdaterService;\n+\n+    @Bean(name = \"WAIT_FOR_EXTERNAL_DATABASE_STATE\")\n+    public Action<?, ?> externalDatabaseCreation() {\n+        return new AbstractExternalDatabaseCreationAction<>(StackEvent.class) {\n+            @Override\n+            protected void doExecute(ExternalDatabaseContext context, StackEvent payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ExternalDatabaseContext context) {\n+                Stack stack = context.getStack();\n+                return new CreateExternalDatabaseRequest(stack.getId(), \"CreateExternalDatabaseRequest\", stack.getName(), stack.getResourceCrn(), stack);\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"EXTERNAL_DATABASE_CREATION_FINISHED_STATE\")\n+    public Action<?, ?> externalDatabaseCreationFinishedAction() {\n+        return new AbstractExternalDatabaseCreationAction<>(CreateExternalDatabaseResult.class) {\n+            @Override\n+            protected void doExecute(ExternalDatabaseContext context, CreateExternalDatabaseResult payload, Map<Object, Object> variables) {\n+                getMetricService().incrementMetricCounter(MetricType.EXTERNAL_DATABASE_CREATION_SUCCESSFUL, context.getStack());\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ExternalDatabaseContext context) {\n+                return new StackEvent(ExternalDatabaseCreationEvent.EXTERNAL_DATABASE_CREATION_FINISHED_EVENT.event(), context.getStack().getId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"EXTERNAL_DATABASE_CREATION_FAILED_STATE\")\n+    public Action<?, ?> externalDatabaseCreationFailureAction() {\n+        return new AbstractExternalDatabaseCreationAction<>(CreateExternalDatabaseFailed.class) {\n+\n+            @Override\n+            protected void doExecute(ExternalDatabaseContext context, CreateExternalDatabaseFailed payload, Map<Object, Object> variables) {\n+//                stackCreationService.handleStackCreationFailure(context.getStack(), payload.getException());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDEwMw=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTExMDk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/provision/handler/CreateExternalDatabaseHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowNDoxN1rOFv3-4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyNDo0N1rOFwaZoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDYxMQ==", "bodyText": "some log would be nice here", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385744611", "createdAt": "2020-02-28T15:04:17Z", "author": {"login": "doktoric"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/provision/handler/CreateExternalDatabaseHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.handler;\n+\n+import static com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationEvent.EXTERNAL_DATABASE_CREATION_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationEvent.EXTERNAL_DATABASE_WAIT_SUCCESS_EVENT;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.ObjectUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.dyngr.exception.PollerException;\n+import com.dyngr.exception.PollerStoppedException;\n+import com.dyngr.exception.UserBreakException;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.StackUpdaterService;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.ExternalDatabaseService;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseResult;\n+import com.sequenceiq.cloudbreak.service.environment.EnvironmentClientService;\n+import com.sequenceiq.environment.api.v1.environment.model.response.DetailedEnvironmentResponse;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class CreateExternalDatabaseHandler implements EventHandler<CreateExternalDatabaseRequest> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CreateExternalDatabaseHandler.class);\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Inject\n+    private ExternalDatabaseService provisionService;\n+\n+    @Inject\n+    private StackUpdaterService stackUpdaterService;\n+\n+    @Inject\n+    private EnvironmentClientService environmentClientService;\n+\n+    @Override\n+    public String selector() {\n+        return \"CreateExternalDatabaseRequest\";\n+    }\n+\n+    @Override\n+    public void accept(Event<CreateExternalDatabaseRequest> createExternalDatabaseRequest) {\n+        LOGGER.debug(\"In CreateExternalDatabaseHandler.accept\");\n+        CreateExternalDatabaseRequest request = createExternalDatabaseRequest.getData();\n+        Stack stack = request.getStack();\n+        DatabaseAvailabilityType externalDatabase = ObjectUtils.defaultIfNull(stack.getExternalDatabase(), DatabaseAvailabilityType.NONE);\n+        Selectable result;\n+        try {\n+            if (externalDatabase == DatabaseAvailabilityType.NONE) {\n+                LOGGER.info(\"External database for stack {} is not requested.\", stack.getName());\n+                result = new CreateExternalDatabaseResult(stack.getId(), EXTERNAL_DATABASE_WAIT_SUCCESS_EVENT.event(), stack.getName(), null);\n+            } else {\n+                stackUpdaterService.updateStatus(stack.getId(), DetailedStackStatus.EXTERNAL_DATABASE_CREATION_IN_PROGRESS,\n+                        ResourceEvent.CLUSTER_EXTERNAL_DATABASE_CREATION_STARTED, \"External database creation in progress\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwODUxMg==", "bodyText": "logging added here and to terminate handler as well", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386308512", "createdAt": "2020-03-02T10:24:47Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/provision/handler/CreateExternalDatabaseHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.handler;\n+\n+import static com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationEvent.EXTERNAL_DATABASE_CREATION_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationEvent.EXTERNAL_DATABASE_WAIT_SUCCESS_EVENT;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.ObjectUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.dyngr.exception.PollerException;\n+import com.dyngr.exception.PollerStoppedException;\n+import com.dyngr.exception.UserBreakException;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.StackUpdaterService;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.ExternalDatabaseService;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseResult;\n+import com.sequenceiq.cloudbreak.service.environment.EnvironmentClientService;\n+import com.sequenceiq.environment.api.v1.environment.model.response.DetailedEnvironmentResponse;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class CreateExternalDatabaseHandler implements EventHandler<CreateExternalDatabaseRequest> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CreateExternalDatabaseHandler.class);\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Inject\n+    private ExternalDatabaseService provisionService;\n+\n+    @Inject\n+    private StackUpdaterService stackUpdaterService;\n+\n+    @Inject\n+    private EnvironmentClientService environmentClientService;\n+\n+    @Override\n+    public String selector() {\n+        return \"CreateExternalDatabaseRequest\";\n+    }\n+\n+    @Override\n+    public void accept(Event<CreateExternalDatabaseRequest> createExternalDatabaseRequest) {\n+        LOGGER.debug(\"In CreateExternalDatabaseHandler.accept\");\n+        CreateExternalDatabaseRequest request = createExternalDatabaseRequest.getData();\n+        Stack stack = request.getStack();\n+        DatabaseAvailabilityType externalDatabase = ObjectUtils.defaultIfNull(stack.getExternalDatabase(), DatabaseAvailabilityType.NONE);\n+        Selectable result;\n+        try {\n+            if (externalDatabase == DatabaseAvailabilityType.NONE) {\n+                LOGGER.info(\"External database for stack {} is not requested.\", stack.getName());\n+                result = new CreateExternalDatabaseResult(stack.getId(), EXTERNAL_DATABASE_WAIT_SUCCESS_EVENT.event(), stack.getName(), null);\n+            } else {\n+                stackUpdaterService.updateStatus(stack.getId(), DetailedStackStatus.EXTERNAL_DATABASE_CREATION_IN_PROGRESS,\n+                        ResourceEvent.CLUSTER_EXTERNAL_DATABASE_CREATION_STARTED, \"External database creation in progress\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDYxMQ=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTExNzE3OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/cluster/flow/ClusterTerminationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowNjowNVrOFv4CxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowNjozM1rOFv4DvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NTYwNQ==", "bodyText": "do we really want to remove this ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385745605", "createdAt": "2020-02-28T15:06:05Z", "author": {"login": "doktoric"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/cluster/flow/ClusterTerminationService.java", "diffHunk": "@@ -146,7 +146,6 @@ public void finalizeClusterTermination(Long clusterId, boolean force) throws Tra\n             deleteFileSystemResources(stackId, fs, force);\n         }\n         cluster.setBlueprint(null);\n-        cluster.setStack(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NTg1Mw==", "bodyText": "yes", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385745853", "createdAt": "2020-02-28T15:06:33Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/cluster/flow/ClusterTerminationService.java", "diffHunk": "@@ -146,7 +146,6 @@ public void finalizeClusterTermination(Long clusterId, boolean force) throws Tra\n             deleteFileSystemResources(stackId, fs, force);\n         }\n         cluster.setBlueprint(null);\n-        cluster.setStack(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NTYwNQ=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTEyMTQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/AzureDatabaseServerParameterSetter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowNzoyMVrOFv4Fgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowNzoyMVrOFv4Fgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NjMwNg==", "bodyText": "I think the same is used in sdx app so we should expose these classes into a common modul. What do you think ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385746306", "createdAt": "2020-02-28T15:07:21Z", "author": {"login": "doktoric"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/AzureDatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.azure.AzureDatabaseServerV4Parameters;\n+\n+@Component\n+public class AzureDatabaseServerParameterSetter implements DatabaseServerParameterSetter {\n+\n+    @Value(\"${cb.azure.externaldatabase.retentionperiod:7}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTEyMzQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/rdsconfig/RedbeamsClientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowNzo1N1rOFv4Grg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTozNjo1OFrOFwQTaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NjYwNg==", "bodyText": "Database", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385746606", "createdAt": "2020-02-28T15:07:57Z", "author": {"login": "doktoric"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/rdsconfig/RedbeamsClientService.java", "diffHunk": "@@ -28,4 +31,24 @@ public DatabaseServerV4Response getByCrn(String dbCrn) {\n             throw new CloudbreakServiceException(message, e);\n         }\n     }\n+\n+    public DatabaseServerStatusV4Response create(AllocateDatabaseServerV4Request request) {\n+        try {\n+            return redbeamsServerEndpoint.create(request);\n+        } catch (WebApplicationException | ProcessingException e) {\n+            String message = String.format(\"Failed to create DatabseServer %s\", request.getName());\n+            LOGGER.error(message, e);\n+            throw new CloudbreakServiceException(message, e);\n+        }\n+    }\n+\n+    public DatabaseServerV4Response deleteByCrn(String crn, boolean force) {\n+        try {\n+            return redbeamsServerEndpoint.deleteByCrn(crn, force);\n+        } catch (WebApplicationException | ProcessingException e) {\n+            String message = String.format(\"Failed to delete DatabseServer with CRN %s\", crn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MzA4Mw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386143083", "createdAt": "2020-03-01T21:36:58Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/rdsconfig/RedbeamsClientService.java", "diffHunk": "@@ -28,4 +31,24 @@ public DatabaseServerV4Response getByCrn(String dbCrn) {\n             throw new CloudbreakServiceException(message, e);\n         }\n     }\n+\n+    public DatabaseServerStatusV4Response create(AllocateDatabaseServerV4Request request) {\n+        try {\n+            return redbeamsServerEndpoint.create(request);\n+        } catch (WebApplicationException | ProcessingException e) {\n+            String message = String.format(\"Failed to create DatabseServer %s\", request.getName());\n+            LOGGER.error(message, e);\n+            throw new CloudbreakServiceException(message, e);\n+        }\n+    }\n+\n+    public DatabaseServerV4Response deleteByCrn(String crn, boolean force) {\n+        try {\n+            return redbeamsServerEndpoint.deleteByCrn(crn, force);\n+        } catch (WebApplicationException | ProcessingException e) {\n+            String message = String.format(\"Failed to delete DatabseServer with CRN %s\", crn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NjYwNg=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTEyMzg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/rdsconfig/RedbeamsClientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowODowNVrOFv4G7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTozNzowN1rOFwQTbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NjY3MQ==", "bodyText": "Database", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385746671", "createdAt": "2020-02-28T15:08:05Z", "author": {"login": "doktoric"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/rdsconfig/RedbeamsClientService.java", "diffHunk": "@@ -28,4 +31,24 @@ public DatabaseServerV4Response getByCrn(String dbCrn) {\n             throw new CloudbreakServiceException(message, e);\n         }\n     }\n+\n+    public DatabaseServerStatusV4Response create(AllocateDatabaseServerV4Request request) {\n+        try {\n+            return redbeamsServerEndpoint.create(request);\n+        } catch (WebApplicationException | ProcessingException e) {\n+            String message = String.format(\"Failed to create DatabseServer %s\", request.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MzA4Nw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386143087", "createdAt": "2020-03-01T21:37:07Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/rdsconfig/RedbeamsClientService.java", "diffHunk": "@@ -28,4 +31,24 @@ public DatabaseServerV4Response getByCrn(String dbCrn) {\n             throw new CloudbreakServiceException(message, e);\n         }\n     }\n+\n+    public DatabaseServerStatusV4Response create(AllocateDatabaseServerV4Request request) {\n+        try {\n+            return redbeamsServerEndpoint.create(request);\n+        } catch (WebApplicationException | ProcessingException e) {\n+            String message = String.format(\"Failed to create DatabseServer %s\", request.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NjY3MQ=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTEyNzU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/application-dev.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowOTowOVrOFv4JSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTo0Njo0NVrOFwZIrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzI3NQ==", "bodyText": "I think it can be part of the simple application yml and then we will rewrite in help charts", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385747275", "createdAt": "2020-02-28T15:09:09Z", "author": {"login": "doktoric"}, "path": "core/src/main/resources/application-dev.yml", "diffHunk": "@@ -1 +1,2 @@\n-cb.image.catalog.url: https://cloudbreak-imagecatalog.s3.amazonaws.com/v3-dev-cb-image-catalog.json\n\\ No newline at end of file\n+cb.image.catalog.url: https://cloudbreak-imagecatalog.s3.amazonaws.com/v3-dev-cb-image-catalog.json\n+cb.aws.externaldatabase.retentionperiod: 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI4Nzc5MQ==", "bodyText": "fine for me.", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386287791", "createdAt": "2020-03-02T09:46:45Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/resources/application-dev.yml", "diffHunk": "@@ -1 +1,2 @@\n-cb.image.catalog.url: https://cloudbreak-imagecatalog.s3.amazonaws.com/v3-dev-cb-image-catalog.json\n\\ No newline at end of file\n+cb.image.catalog.url: https://cloudbreak-imagecatalog.s3.amazonaws.com/v3-dev-cb-image-catalog.json\n+cb.aws.externaldatabase.retentionperiod: 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzI3NQ=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTEzMDAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/schema/app/20200204150634_CB-5067_add_externaldatabase_to_stack.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowOTo1MVrOFv4KzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODozODo0NlrOFwXIgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzY2MA==", "bodyText": "externaldatabaseCreationType?", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385747660", "createdAt": "2020-02-28T15:09:51Z", "author": {"login": "doktoric"}, "path": "core/src/main/resources/schema/app/20200204150634_CB-5067_add_externaldatabase_to_stack.sql", "diffHunk": "@@ -0,0 +1,11 @@\n+-- // CB-5067 Add externaldatabase field to the stack table\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE stack ADD IF NOT EXISTS externaldatabase VARCHAR(10) DEFAULT 'NONE';\n+UPDATE stack SET externaldatabase = 'NONE' WHERE externaldatabase IS NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDk3OQ==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386254979", "createdAt": "2020-03-02T08:38:46Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/resources/schema/app/20200204150634_CB-5067_add_externaldatabase_to_stack.sql", "diffHunk": "@@ -0,0 +1,11 @@\n+-- // CB-5067 Add externaldatabase field to the stack table\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE stack ADD IF NOT EXISTS externaldatabase VARCHAR(10) DEFAULT 'NONE';\n+UPDATE stack SET externaldatabase = 'NONE' WHERE externaldatabase IS NULL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzY2MA=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzE3MjcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/AzureDatabaseServerParameterSetter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToxOToxOFrOFwcAkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxOTowMFrOFwhGWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNDg2Nw==", "bodyText": "DatabaseServerParameter serverParameter parameter is not used. Are you sure this is the right method signature?", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386334867", "createdAt": "2020-03-02T11:19:18Z", "author": {"login": "attilapalfi92"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/AzureDatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.azure.AzureDatabaseServerV4Parameters;\n+\n+@Component\n+public class AzureDatabaseServerParameterSetter implements DatabaseServerParameterSetter {\n+\n+    @Value(\"${cb.azure.externaldatabase.retentionperiod:7}\")\n+    private int retentionPeriod;\n+\n+    @Value(\"${cb.azure.externaldatabase.geoRedundantBackup:true}\")\n+    private Boolean geoRedundantBackup;\n+\n+    @Override\n+    public void setParameters(DatabaseServerV4StackRequest request, DatabaseServerParameter serverParameter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODI2Ng==", "bodyText": "Azure has no specifics yet. AWS has. Still, this also has to go into a unified child class.", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386418266", "createdAt": "2020-03-02T14:19:00Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/AzureDatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.azure.AzureDatabaseServerV4Parameters;\n+\n+@Component\n+public class AzureDatabaseServerParameterSetter implements DatabaseServerParameterSetter {\n+\n+    @Value(\"${cb.azure.externaldatabase.retentionperiod:7}\")\n+    private int retentionPeriod;\n+\n+    @Value(\"${cb.azure.externaldatabase.geoRedundantBackup:true}\")\n+    private Boolean geoRedundantBackup;\n+\n+    @Override\n+    public void setParameters(DatabaseServerV4StackRequest request, DatabaseServerParameter serverParameter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNDg2Nw=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzE3MzM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/AwsDatabaseServerParameterSetter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToxOToyOVrOFwcA7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxOTozN1rOFwhIDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNDk1OA==", "bodyText": "DatabaseServerParameter serverParameter parameter is not used. Are you sure this is the right method signature?", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386334958", "createdAt": "2020-03-02T11:19:29Z", "author": {"login": "attilapalfi92"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/AwsDatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.aws.AwsDatabaseServerV4Parameters;\n+\n+@Component\n+public class AwsDatabaseServerParameterSetter implements DatabaseServerParameterSetter {\n+\n+    @Value(\"${cb.aws.externaldatabase.retentionperiod:1}\")\n+    private int retentionPeriod;\n+\n+    @Value(\"${cb.aws.externaldatabase.engineversion:10.6}\")\n+    private String engineVersion;\n+\n+    @Override\n+    public void setParameters(DatabaseServerV4StackRequest request, DatabaseServerParameter serverParameter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODcwMg==", "bodyText": "it is used here.", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386418702", "createdAt": "2020-03-02T14:19:37Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/AwsDatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.aws.AwsDatabaseServerV4Parameters;\n+\n+@Component\n+public class AwsDatabaseServerParameterSetter implements DatabaseServerParameterSetter {\n+\n+    @Value(\"${cb.aws.externaldatabase.retentionperiod:1}\")\n+    private int retentionPeriod;\n+\n+    @Value(\"${cb.aws.externaldatabase.engineversion:10.6}\")\n+    private String engineVersion;\n+\n+    @Override\n+    public void setParameters(DatabaseServerV4StackRequest request, DatabaseServerParameter serverParameter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNDk1OA=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzE3NTY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/DatabaseServerParameterSetter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyMDoyOFrOFwcCXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMDozM1rOFwhKLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNTMyNQ==", "bodyText": "Could be named DatabaseServerParameterDecorator. Setter name is used for setter method, looks weird as class name,", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386335325", "createdAt": "2020-03-02T11:20:28Z", "author": {"login": "attilapalfi92"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/DatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+public interface DatabaseServerParameterSetter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTI0Ng==", "bodyText": "fine. renamed.", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386419246", "createdAt": "2020-03-02T14:20:33Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/DatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+public interface DatabaseServerParameterSetter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNTMyNQ=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzE3NzQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/DatabaseServerParameterSetter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyMTowMlrOFwcDbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMTowNFrOFwhLbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNTU5Ng==", "bodyText": "DatabaseServerParameter serverParameter Where is it used?", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386335596", "createdAt": "2020-03-02T11:21:02Z", "author": {"login": "attilapalfi92"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/DatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+public interface DatabaseServerParameterSetter {\n+    void setParameters(DatabaseServerV4StackRequest request, DatabaseServerParameter serverParameter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTU2Ng==", "bodyText": "currently in AWS", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386419566", "createdAt": "2020-03-02T14:21:04Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/DatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+public interface DatabaseServerParameterSetter {\n+    void setParameters(DatabaseServerV4StackRequest request, DatabaseServerParameter serverParameter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNTU5Ng=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzE5NTM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/stacks/database/DatabaseAvailabilityTypeToDatabaseResponseConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyNzoyOFrOFwcOcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo0MTo0NFrOFwh7dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzODQxOQ==", "bodyText": "We are moving away from using Spring's conversions service, because its very hard to debug and follow through the code. Can you please implement it without extending AbstractConversionServiceAwareConverter?", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386338419", "createdAt": "2020-03-02T11:27:28Z", "author": {"login": "attilapalfi92"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/stacks/database/DatabaseAvailabilityTypeToDatabaseResponseConverter.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.sequenceiq.cloudbreak.converter.v4.stacks.database;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.database.DatabaseResponse;\n+import com.sequenceiq.cloudbreak.converter.AbstractConversionServiceAwareConverter;\n+\n+@Component\n+public class DatabaseAvailabilityTypeToDatabaseResponseConverter  extends AbstractConversionServiceAwareConverter<DatabaseAvailabilityType, DatabaseResponse> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzMTg2Mg==", "bodyText": "not now.", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386431862", "createdAt": "2020-03-02T14:41:44Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/stacks/database/DatabaseAvailabilityTypeToDatabaseResponseConverter.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.sequenceiq.cloudbreak.converter.v4.stacks.database;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.database.DatabaseResponse;\n+import com.sequenceiq.cloudbreak.converter.AbstractConversionServiceAwareConverter;\n+\n+@Component\n+public class DatabaseAvailabilityTypeToDatabaseResponseConverter  extends AbstractConversionServiceAwareConverter<DatabaseAvailabilityType, DatabaseResponse> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzODQxOQ=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzIwMDU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/CloudbreakFlowInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyOToxNVrOFwcRpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDozODowMFrOFwhynw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzOTIzNw==", "bodyText": "Is this added to the parallel flows too?", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386339237", "createdAt": "2020-03-02T11:29:15Z", "author": {"login": "attilapalfi92"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/CloudbreakFlowInformation.java", "diffHunk": "@@ -73,7 +74,7 @@\n \n     @Override\n     public List<Class<? extends FlowConfiguration<?>>> getTerminationFlow() {\n-        return Arrays.asList(StackTerminationFlowConfig.class, ClusterTerminationFlowConfig.class);\n+        return Arrays.asList(StackTerminationFlowConfig.class, ClusterTerminationFlowConfig.class, ExternalDatabaseTerminationFlowConfig.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyOTU5OQ==", "bodyText": "added now", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386429599", "createdAt": "2020-03-02T14:38:00Z", "author": {"login": "bergerdenes"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/CloudbreakFlowInformation.java", "diffHunk": "@@ -73,7 +74,7 @@\n \n     @Override\n     public List<Class<? extends FlowConfiguration<?>>> getTerminationFlow() {\n-        return Arrays.asList(StackTerminationFlowConfig.class, ClusterTerminationFlowConfig.class);\n+        return Arrays.asList(StackTerminationFlowConfig.class, ClusterTerminationFlowConfig.class, ExternalDatabaseTerminationFlowConfig.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzOTIzNw=="}, "originalCommit": {"oid": "2d2dbf88df51d4eb753a45458518167ce02595ad"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2814, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}