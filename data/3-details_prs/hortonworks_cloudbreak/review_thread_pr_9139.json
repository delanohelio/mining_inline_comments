{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MDAyOTkz", "number": 9139, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo1MDoyNlrOEqGPlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo1MToxMlrOEqGPyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTc3OTQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/job/StackStatusCheckerJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo1MDoyNlrOHcIFmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoxNzoxMFrOHcQIVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDY4MA==", "bodyText": "Can you please add a few log lines here?", "url": "https://github.com/hortonworks/cloudbreak/pull/9139#discussion_r499254680", "createdAt": "2020-10-04T14:50:26Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/job/StackStatusCheckerJob.java", "diffHunk": "@@ -185,20 +189,24 @@ private void buildMdcContext(Stack stack) {\n     }\n \n     private void reportHealthAndSyncInstances(Stack stack, Collection<InstanceMetaData> runningInstances, Collection<InstanceMetaData> failedInstances,\n-            Set<String> newHealtyHostNames, InstanceSyncState defaultState) {\n+            Set<String> newHealtyHostNames, boolean hostCertExpiring) {\n         Set<String> newFailedNodeNames = failedInstances.stream()\n                 .filter(i -> !Set.of(SERVICES_UNHEALTHY, STOPPED).contains(i.getInstanceStatus()))\n                 .map(InstanceMetaData::getDiscoveryFQDN)\n                 .collect(toSet());\n-        ifFlowNotRunning(() -> clusterOperationService.reportHealthChange(stack.getResourceCrn(), newFailedNodeNames, newHealtyHostNames));\n-        ifFlowNotRunning(() -> {\n-            if (!failedInstances.isEmpty()) {\n-                clusterService.updateClusterStatusByStackId(stack.getId(), Status.AMBIGUOUS);\n-            } else if (statesFromAvailabeAllowed().contains(stack.getCluster().getStatus())) {\n-                clusterService.updateClusterStatusByStackId(stack.getId(), Status.AVAILABLE);\n-            }\n-        });\n-        syncInstances(stack, runningInstances, failedInstances, defaultState);\n+        ifFlowNotRunning(() -> updateStates(stack, failedInstances, newFailedNodeNames, newHealtyHostNames, hostCertExpiring));\n+        syncInstances(stack, runningInstances, failedInstances, InstanceSyncState.RUNNING);\n+    }\n+\n+    private void updateStates(Stack stack, Collection<InstanceMetaData> failedInstances, Set<String> newFailedNodeNames, Set<String> newHealtyHostNames,\n+            boolean hostCertExpiring) {\n+        clusterService.updateClusterCertExpirationState(stack.getCluster(), hostCertExpiring);\n+        clusterOperationService.reportHealthChange(stack.getResourceCrn(), newFailedNodeNames, newHealtyHostNames);\n+        if (!failedInstances.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7630cc77a896b64d91d38f03936c0369a83650d4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NjQ1NA==", "bodyText": "added", "url": "https://github.com/hortonworks/cloudbreak/pull/9139#discussion_r499386454", "createdAt": "2020-10-05T07:17:10Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/job/StackStatusCheckerJob.java", "diffHunk": "@@ -185,20 +189,24 @@ private void buildMdcContext(Stack stack) {\n     }\n \n     private void reportHealthAndSyncInstances(Stack stack, Collection<InstanceMetaData> runningInstances, Collection<InstanceMetaData> failedInstances,\n-            Set<String> newHealtyHostNames, InstanceSyncState defaultState) {\n+            Set<String> newHealtyHostNames, boolean hostCertExpiring) {\n         Set<String> newFailedNodeNames = failedInstances.stream()\n                 .filter(i -> !Set.of(SERVICES_UNHEALTHY, STOPPED).contains(i.getInstanceStatus()))\n                 .map(InstanceMetaData::getDiscoveryFQDN)\n                 .collect(toSet());\n-        ifFlowNotRunning(() -> clusterOperationService.reportHealthChange(stack.getResourceCrn(), newFailedNodeNames, newHealtyHostNames));\n-        ifFlowNotRunning(() -> {\n-            if (!failedInstances.isEmpty()) {\n-                clusterService.updateClusterStatusByStackId(stack.getId(), Status.AMBIGUOUS);\n-            } else if (statesFromAvailabeAllowed().contains(stack.getCluster().getStatus())) {\n-                clusterService.updateClusterStatusByStackId(stack.getId(), Status.AVAILABLE);\n-            }\n-        });\n-        syncInstances(stack, runningInstances, failedInstances, defaultState);\n+        ifFlowNotRunning(() -> updateStates(stack, failedInstances, newFailedNodeNames, newHealtyHostNames, hostCertExpiring));\n+        syncInstances(stack, runningInstances, failedInstances, InstanceSyncState.RUNNING);\n+    }\n+\n+    private void updateStates(Stack stack, Collection<InstanceMetaData> failedInstances, Set<String> newFailedNodeNames, Set<String> newHealtyHostNames,\n+            boolean hostCertExpiring) {\n+        clusterService.updateClusterCertExpirationState(stack.getCluster(), hostCertExpiring);\n+        clusterOperationService.reportHealthChange(stack.getResourceCrn(), newFailedNodeNames, newHealtyHostNames);\n+        if (!failedInstances.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDY4MA=="}, "originalCommit": {"oid": "7630cc77a896b64d91d38f03936c0369a83650d4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTc3OTkyOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerClusterStatusService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo1MToxMlrOHcIF3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoxNzoxOVrOHcQIkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDc1MQ==", "bodyText": "Can you please add a few log lines to these methods?", "url": "https://github.com/hortonworks/cloudbreak/pull/9139#discussion_r499254751", "createdAt": "2020-10-04T14:51:12Z", "author": {"login": "keyki"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerClusterStatusService.java", "diffHunk": "@@ -215,16 +223,37 @@ public ClusterStatusResult getStatus(boolean blueprintPresent) {\n     }\n \n     @Override\n-    public Map<HostName, ClusterManagerState> getExtendedHostStatuses() {\n-        Map<HostName, ClusterManagerState> result = new HashMap<>();\n-        getHostHealth().forEach((hostname, health) ->\n-                result.put(hostname, new ClusterManagerState(healthSummaryToState(health.getSummary()),\n-                        getHostHealthMessage(health.getSummary(), health.getExplanation()))));\n-        return result;\n+    public ExtendedHostStatuses getExtendedHostStatuses() {\n+        Map<HostName, Collection<ApiHealthCheck>> hostHealth = getHostHealth();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7630cc77a896b64d91d38f03936c0369a83650d4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NjUxNA==", "bodyText": "added", "url": "https://github.com/hortonworks/cloudbreak/pull/9139#discussion_r499386514", "createdAt": "2020-10-05T07:17:19Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerClusterStatusService.java", "diffHunk": "@@ -215,16 +223,37 @@ public ClusterStatusResult getStatus(boolean blueprintPresent) {\n     }\n \n     @Override\n-    public Map<HostName, ClusterManagerState> getExtendedHostStatuses() {\n-        Map<HostName, ClusterManagerState> result = new HashMap<>();\n-        getHostHealth().forEach((hostname, health) ->\n-                result.put(hostname, new ClusterManagerState(healthSummaryToState(health.getSummary()),\n-                        getHostHealthMessage(health.getSummary(), health.getExplanation()))));\n-        return result;\n+    public ExtendedHostStatuses getExtendedHostStatuses() {\n+        Map<HostName, Collection<ApiHealthCheck>> hostHealth = getHostHealth();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDc1MQ=="}, "originalCommit": {"oid": "7630cc77a896b64d91d38f03936c0369a83650d4"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2082, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}