{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4ODA0MDkx", "number": 7362, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDozODoxN1rODiR3vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyNjo0NlrODjaLYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjcwOTc1OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/resources/templates/aws-cf-stack-freeipa.ftl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDozODoxN1rOFtcCwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowMjo1MlrOFteTew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4OTY5OA==", "bodyText": "Could you rename AmbariNodeLaunchConfig? Or is there a reason to keep it?", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383189698", "createdAt": "2020-02-24T10:38:17Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/resources/templates/aws-cf-stack-freeipa.ftl", "diffHunk": "@@ -0,0 +1,236 @@\n+<#setting number_format=\"computer\">\n+{\n+  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n+\n+  \"Description\" : \"Deploys a Cloudera Data Platform FreeIPA cluster on AWS.\",\n+\n+  \"Parameters\" : {\n+\n+    \"StackName\" : {\n+      \"Description\" : \"Name of the CloudFormation stack that is used to tag instances\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"50\"\n+    },\n+\n+    \"VPCId\" : {\n+      \"Description\" : \"Id of the VPC where to deploy the cluster\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"12\",\n+      \"AllowedPattern\" : \"vpc-[a-z0-9]*\"\n+    },\n+\n+    \"SubnetId\" : {\n+      \"Description\" : \"Id of the Subnet within the existing VPC where to deploy the cluster\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"15\",\n+      \"MaxLength\": \"255\",\n+      \"AllowedPattern\" : \"subnet-[a-z0-9]*(?:,subnet-[a-z0-9]*)*\"\n+    },\n+\n+    \"StackOwner\" : {\n+      \"Description\" : \"The instances will have this parameter as an Owner tag.\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"50\"\n+    },\n+\n+    \"stackowner\" : {\n+       \"Description\" : \"The instances will have this parameter as an owner tag.\",\n+       \"Type\" : \"String\",\n+       \"MinLength\": \"1\",\n+       \"MaxLength\": \"200\"\n+    },\n+\n+    \"CBGateWayUserData\" : {\n+      \"Description\" : \"Gateway user data to be executed\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"9\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData1\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData2\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData3\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"KeyName\": {\n+      \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n+      \"Type\": \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"255\",\n+      \"AllowedPattern\" : \"[\\\\x20-\\\\x7E]*\",\n+      \"ConstraintDescription\" : \"can contain only ASCII characters.\"\n+    },\n+\n+    \"AMI\" : {\n+      \"Description\" : \"AMI that's used to start instances\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"12\",\n+      \"AllowedPattern\" : \"ami-[a-z0-9]*\",\n+      \"ConstraintDescription\" : \"must follow pattern: ami-xxxxxxxx\"\n+    },\n+\n+    \"RootDeviceName\" : {\n+      \"Description\" : \"Name of the root device that comes with the AMI\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"8\",\n+      \"MaxLength\": \"12\"\n+    }\n+\n+  },\n+\n+  \"Resources\" : {\n+\n+    <#if mapPublicIpOnLaunch>\n+        <#list gatewayGroups as group>\n+            <#list 1..group.instanceCount as nth>\n+                \"EIP${group.groupName?replace('_', '')}${nth}\" : {\n+                   \"Type\" : \"AWS::EC2::EIP\",\n+                   \"Properties\" : {\n+                      \"Domain\" : \"vpc\"\n+                   }\n+                },\n+            </#list>\n+        </#list>\n+    </#if>\n+\n+    <#list instanceGroups as group>\n+    \"${group.autoScalingGroupName}\" : {\n+      \"Type\" : \"AWS::AutoScaling::AutoScalingGroup\",\n+      \"Properties\" : {\n+        <#if group.subnetId??>\n+        \"VPCZoneIdentifier\" : [ \"${group.subnetId}\" ],\n+        <#else>\n+        \"VPCZoneIdentifier\" : [{ \"Ref\" : \"SubnetId\" }],\n+        </#if>\n+        \"LaunchConfigurationName\" : { \"Ref\" : \"AmbariNodeLaunchConfig${group.groupName?replace('_', '')}\" },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNjc0Nw==", "bodyText": "unfortunately if we change this here then we should take care with the backward compatibility", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383226747", "createdAt": "2020-02-24T12:02:52Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/resources/templates/aws-cf-stack-freeipa.ftl", "diffHunk": "@@ -0,0 +1,236 @@\n+<#setting number_format=\"computer\">\n+{\n+  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n+\n+  \"Description\" : \"Deploys a Cloudera Data Platform FreeIPA cluster on AWS.\",\n+\n+  \"Parameters\" : {\n+\n+    \"StackName\" : {\n+      \"Description\" : \"Name of the CloudFormation stack that is used to tag instances\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"50\"\n+    },\n+\n+    \"VPCId\" : {\n+      \"Description\" : \"Id of the VPC where to deploy the cluster\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"12\",\n+      \"AllowedPattern\" : \"vpc-[a-z0-9]*\"\n+    },\n+\n+    \"SubnetId\" : {\n+      \"Description\" : \"Id of the Subnet within the existing VPC where to deploy the cluster\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"15\",\n+      \"MaxLength\": \"255\",\n+      \"AllowedPattern\" : \"subnet-[a-z0-9]*(?:,subnet-[a-z0-9]*)*\"\n+    },\n+\n+    \"StackOwner\" : {\n+      \"Description\" : \"The instances will have this parameter as an Owner tag.\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"50\"\n+    },\n+\n+    \"stackowner\" : {\n+       \"Description\" : \"The instances will have this parameter as an owner tag.\",\n+       \"Type\" : \"String\",\n+       \"MinLength\": \"1\",\n+       \"MaxLength\": \"200\"\n+    },\n+\n+    \"CBGateWayUserData\" : {\n+      \"Description\" : \"Gateway user data to be executed\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"9\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData1\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData2\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData3\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"KeyName\": {\n+      \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n+      \"Type\": \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"255\",\n+      \"AllowedPattern\" : \"[\\\\x20-\\\\x7E]*\",\n+      \"ConstraintDescription\" : \"can contain only ASCII characters.\"\n+    },\n+\n+    \"AMI\" : {\n+      \"Description\" : \"AMI that's used to start instances\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"12\",\n+      \"AllowedPattern\" : \"ami-[a-z0-9]*\",\n+      \"ConstraintDescription\" : \"must follow pattern: ami-xxxxxxxx\"\n+    },\n+\n+    \"RootDeviceName\" : {\n+      \"Description\" : \"Name of the root device that comes with the AMI\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"8\",\n+      \"MaxLength\": \"12\"\n+    }\n+\n+  },\n+\n+  \"Resources\" : {\n+\n+    <#if mapPublicIpOnLaunch>\n+        <#list gatewayGroups as group>\n+            <#list 1..group.instanceCount as nth>\n+                \"EIP${group.groupName?replace('_', '')}${nth}\" : {\n+                   \"Type\" : \"AWS::EC2::EIP\",\n+                   \"Properties\" : {\n+                      \"Domain\" : \"vpc\"\n+                   }\n+                },\n+            </#list>\n+        </#list>\n+    </#if>\n+\n+    <#list instanceGroups as group>\n+    \"${group.autoScalingGroupName}\" : {\n+      \"Type\" : \"AWS::AutoScaling::AutoScalingGroup\",\n+      \"Properties\" : {\n+        <#if group.subnetId??>\n+        \"VPCZoneIdentifier\" : [ \"${group.subnetId}\" ],\n+        <#else>\n+        \"VPCZoneIdentifier\" : [{ \"Ref\" : \"SubnetId\" }],\n+        </#if>\n+        \"LaunchConfigurationName\" : { \"Ref\" : \"AmbariNodeLaunchConfig${group.groupName?replace('_', '')}\" },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4OTY5OA=="}, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjg1ODM1OnYy", "diffSide": "RIGHT", "path": "environment/src/main/resources/schema/app/20200323193238_CB-5159_freeipa_instances_per_group_is_optional.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMToyNjo0NVrOFtdahA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMToyNjo0NVrOFtdahA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxMjE2NA==", "bodyText": "please don't use DEFAULT, because it can lock the table. instead you can use an update", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383212164", "createdAt": "2020-02-24T11:26:45Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/resources/schema/app/20200323193238_CB-5159_freeipa_instances_per_group_is_optional.sql", "diffHunk": "@@ -0,0 +1,10 @@\n+-- // CB-1617 freeipa creation is optional\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE environment ADD COLUMN IF NOT EXISTS freeIpaInstancesPerGroup integer NOT NULL DEFAULT 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjg2NzgxOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/validation/CreateFreeIpaRequestValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMTozMDozOVrOFtdgUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMTozMDozOVrOFtdgUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxMzY1MA==", "bodyText": "I think these should be class level constants, or variables configurable via env parameters, so we can override them", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383213650", "createdAt": "2020-02-24T11:30:39Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/validation/CreateFreeIpaRequestValidator.java", "diffHunk": "@@ -27,9 +27,27 @@\n \n     @Override\n     public ValidationResult validate(CreateFreeIpaRequest subject) {\n+        // FreeIPA's recommends no more than 4 replication agreements per node. To simply things, only allow a fully connected mesh.\n+        // Also don't allow a special case with 5 nodes for 1 group when the there is a maximum of 4 instances when using multiple groups.\n+        final int maxInstances = 4;\n+\n+        final int maxInstanceGroups = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjk0OTE3OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowMDo0NVrOFteQXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzoyNzozMlrOFudMNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNTk1MQ==", "bodyText": "is it possible that the az is null here?", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383225951", "createdAt": "2020-02-24T12:00:45Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSetup.java", "diffHunk": "@@ -128,7 +128,8 @@ public void prerequisites(AuthenticatedContext ac, CloudStack stack, Persistence\n     private void validateRegionAndZone(CloudCredential cloudCredential, Location location) {\n         CloudRegions regions = awsPlatformResources.regions(cloudCredential, location.getRegion(), Collections.emptyMap());\n         List<AvailabilityZone> availabilityZones = regions.getCloudRegions().get(location.getRegion());\n-        if (!availabilityZones.contains(location.getAvailabilityZone())) {\n+        if (location.getAvailabilityZone() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1NzA3Ng==", "bodyText": "The FreeIPA cloud formation template was simplified. The AZs were needed when creating subnets which only cloudbreak core does. As a result it is no longer needed in the cloud formation template for FreeIPA. In order for the template to process I had to avoid sending the AZ parameter into the template processor. But I needed to only do this for FreeIPA and not core. As a result, I changed FreeIPA to not set the AZ since it is not used that way the common code could check if it was null and optionally use the AZ parameter.", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r384257076", "createdAt": "2020-02-26T03:27:32Z", "author": {"login": "jamisonbennett"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSetup.java", "diffHunk": "@@ -128,7 +128,8 @@ public void prerequisites(AuthenticatedContext ac, CloudStack stack, Persistence\n     private void validateRegionAndZone(CloudCredential cloudCredential, Location location) {\n         CloudRegions regions = awsPlatformResources.regions(cloudCredential, location.getRegion(), Collections.emptyMap());\n         List<AvailabilityZone> availabilityZones = regions.getCloudRegions().get(location.getRegion());\n-        if (!availabilityZones.contains(location.getAvailabilityZone())) {\n+        if (location.getAvailabilityZone() != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNTk1MQ=="}, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjk1MTQ0OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsStackRequestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowMTozNFrOFteRqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzoyODowMVrOFudMlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNjI4MQ==", "bodyText": "is this possible that the ac.getCloudContext().getLocation().getAvailabilityZone()  null ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383226281", "createdAt": "2020-02-24T12:01:34Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsStackRequestHelper.java", "diffHunk": "@@ -98,7 +100,8 @@ public DeleteStackRequest createDeleteStackRequest(String cFStackName) {\n         if (awsInstanceProfileView.isInstanceProfileAvailable()) {\n             parameters.add(new Parameter().withParameterKey(\"InstanceProfile\").withParameterValue(awsInstanceProfileView.getInstanceProfile()));\n         }\n-        if (ac.getCloudContext().getLocation().getAvailabilityZone().value() != null) {\n+        if (ac.getCloudContext().getLocation().getAvailabilityZone() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1NzE3Mg==", "bodyText": "Yes, for the same reason as above.", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r384257172", "createdAt": "2020-02-26T03:28:01Z", "author": {"login": "jamisonbennett"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsStackRequestHelper.java", "diffHunk": "@@ -98,7 +100,8 @@ public DeleteStackRequest createDeleteStackRequest(String cFStackName) {\n         if (awsInstanceProfileView.isInstanceProfileAvailable()) {\n             parameters.add(new Parameter().withParameterKey(\"InstanceProfile\").withParameterValue(awsInstanceProfileView.getInstanceProfile()));\n         }\n-        if (ac.getCloudContext().getLocation().getAvailabilityZone().value() != null) {\n+        if (ac.getCloudContext().getLocation().getAvailabilityZone() != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNjI4MQ=="}, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjk1NTUwOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/resources/templates/aws-cf-stack-freeipa.ftl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowMzoyMFrOFteUNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowMzoyMFrOFteUNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNjkzMg==", "bodyText": "cb-resource-type owner and Owner should be removed these are not required anymore", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383226932", "createdAt": "2020-02-24T12:03:20Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/resources/templates/aws-cf-stack-freeipa.ftl", "diffHunk": "@@ -0,0 +1,236 @@\n+<#setting number_format=\"computer\">\n+{\n+  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n+\n+  \"Description\" : \"Deploys a Cloudera Data Platform FreeIPA cluster on AWS.\",\n+\n+  \"Parameters\" : {\n+\n+    \"StackName\" : {\n+      \"Description\" : \"Name of the CloudFormation stack that is used to tag instances\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"50\"\n+    },\n+\n+    \"VPCId\" : {\n+      \"Description\" : \"Id of the VPC where to deploy the cluster\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"12\",\n+      \"AllowedPattern\" : \"vpc-[a-z0-9]*\"\n+    },\n+\n+    \"SubnetId\" : {\n+      \"Description\" : \"Id of the Subnet within the existing VPC where to deploy the cluster\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"15\",\n+      \"MaxLength\": \"255\",\n+      \"AllowedPattern\" : \"subnet-[a-z0-9]*(?:,subnet-[a-z0-9]*)*\"\n+    },\n+\n+    \"StackOwner\" : {\n+      \"Description\" : \"The instances will have this parameter as an Owner tag.\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"50\"\n+    },\n+\n+    \"stackowner\" : {\n+       \"Description\" : \"The instances will have this parameter as an owner tag.\",\n+       \"Type\" : \"String\",\n+       \"MinLength\": \"1\",\n+       \"MaxLength\": \"200\"\n+    },\n+\n+    \"CBGateWayUserData\" : {\n+      \"Description\" : \"Gateway user data to be executed\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"9\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData1\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData2\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData3\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"KeyName\": {\n+      \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n+      \"Type\": \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"255\",\n+      \"AllowedPattern\" : \"[\\\\x20-\\\\x7E]*\",\n+      \"ConstraintDescription\" : \"can contain only ASCII characters.\"\n+    },\n+\n+    \"AMI\" : {\n+      \"Description\" : \"AMI that's used to start instances\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"12\",\n+      \"AllowedPattern\" : \"ami-[a-z0-9]*\",\n+      \"ConstraintDescription\" : \"must follow pattern: ami-xxxxxxxx\"\n+    },\n+\n+    \"RootDeviceName\" : {\n+      \"Description\" : \"Name of the root device that comes with the AMI\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"8\",\n+      \"MaxLength\": \"12\"\n+    }\n+\n+  },\n+\n+  \"Resources\" : {\n+\n+    <#if mapPublicIpOnLaunch>\n+        <#list gatewayGroups as group>\n+            <#list 1..group.instanceCount as nth>\n+                \"EIP${group.groupName?replace('_', '')}${nth}\" : {\n+                   \"Type\" : \"AWS::EC2::EIP\",\n+                   \"Properties\" : {\n+                      \"Domain\" : \"vpc\"\n+                   }\n+                },\n+            </#list>\n+        </#list>\n+    </#if>\n+\n+    <#list instanceGroups as group>\n+    \"${group.autoScalingGroupName}\" : {\n+      \"Type\" : \"AWS::AutoScaling::AutoScalingGroup\",\n+      \"Properties\" : {\n+        <#if group.subnetId??>\n+        \"VPCZoneIdentifier\" : [ \"${group.subnetId}\" ],\n+        <#else>\n+        \"VPCZoneIdentifier\" : [{ \"Ref\" : \"SubnetId\" }],\n+        </#if>\n+        \"LaunchConfigurationName\" : { \"Ref\" : \"AmbariNodeLaunchConfig${group.groupName?replace('_', '')}\" },\n+        \"TerminationPolicies\" : [ \"NewestInstance\" ],\n+        \"MinSize\" : 0,\n+        \"MaxSize\" : ${group.instanceCount},\n+        \"DesiredCapacity\" : ${group.instanceCount},\n+        \"Tags\" : [ { \"Key\" : \"Name\", \"Value\" : { \"Fn::Join\" : [\"-\", [ { \"Ref\" : \"StackName\" }, \"${group.groupName}\"]] }, \"PropagateAtLaunch\" : \"true\" },\n+                   { \"Key\" : \"owner\", \"Value\" : { \"Ref\" : \"stackowner\" }, \"PropagateAtLaunch\" : \"true\" },\n+                   { \"Key\" : \"Owner\", \"Value\" : { \"Ref\" : \"StackOwner\" }, \"PropagateAtLaunch\" : \"true\" },\n+                   { \"Key\" : \"cb-resource-type\", \"Value\" : \"${instance_resource}\", \"PropagateAtLaunch\" : \"true\" },\n+                   { \"Key\" : \"instanceGroup\", \"Value\" : \"${group.groupName}\", \"PropagateAtLaunch\" : \"true\" }]\n+      }\n+    },\n+\n+    \"AmbariNodeLaunchConfig${group.groupName?replace('_', '')}\"  : {\n+      \"Type\" : \"AWS::AutoScaling::LaunchConfiguration\",\n+      \"Properties\" : {\n+        <#if group.ebsOptimized == true>\n+        \"EbsOptimized\" : \"true\",\n+        </#if>\n+        <#if group.hasInstanceProfile>\n+        \"IamInstanceProfile\" : \"${group.instanceProfile}\",\n+        </#if>\n+        \"BlockDeviceMappings\" : [\n+          {\n+            \"DeviceName\" : { \"Ref\" : \"RootDeviceName\" },\n+            \"Ebs\" : {\n+              \"VolumeSize\" : \"${group.rootVolumeSize}\",\n+              \"VolumeType\" : \"gp2\"\n+            }\n+          }\n+        ],\n+        <#if group.ebsEncrypted == true>\n+        \"ImageId\"        : \"${group.encryptedAMI}\",\n+        <#else>\n+        \"ImageId\"        : { \"Ref\" : \"AMI\" },\n+        </#if>\n+        <#if group.cloudSecurityIds?size != 0>\n+        \"SecurityGroups\" : [ <#list group.cloudSecurityIds as cloudSecurityId>\n+                               \"${cloudSecurityId}\"<#if cloudSecurityId_has_next>,</#if>\n+                             </#list>\n+                           ],\n+        <#else>\n+        \"SecurityGroups\" : [ { \"Ref\" : \"ClusterNodeSecurityGroup${group.groupName?replace('_', '')}\" } ],\n+        </#if>\n+        \"InstanceType\"   : \"${group.flavor}\",\n+        \"KeyName\"        : { \"Ref\" : \"KeyName\" },\n+        <#if group.spotPrice??>\n+        \"SpotPrice\"      : \"${group.spotPrice}\",\n+        </#if>\n+        \"UserData\"       : { \"Fn::Base64\" : { \"Fn::Join\" : [\"\", [ { \"Ref\" : \"CBGateWayUserData\"},\n+                                                                  { \"Ref\" : \"CBGateWayUserData1\"},\n+                                                                  { \"Ref\" : \"CBGateWayUserData2\"},\n+                                                                  { \"Ref\" : \"CBGateWayUserData3\"}]] }}\n+      }\n+    }\n+\n+    <#if group.cloudSecurityIds?size == 0>,\n+    \"ClusterNodeSecurityGroup${group.groupName?replace('_', '')}\" : {\n+      \"Type\" : \"AWS::EC2::SecurityGroup\",\n+      \"Properties\" : {\n+        \"GroupDescription\" : \"Allow access from web and bastion as well as outbound HTTP and HTTPS traffic\",\n+        \"Tags\" : [\n+            { \"Key\" : \"cb-resource-type\", \"Value\" : \"${securitygroup_resource}\" },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjk1NzEwOnYy", "diffSide": "RIGHT", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/AttachedFreeIpaRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowNDowMlrOFteVQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowNDowMlrOFteVQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNzIwMw==", "bodyText": "instanceCountByGroup or instanceCountPerGroup ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383227203", "createdAt": "2020-02-24T12:04:02Z", "author": {"login": "doktoric"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/AttachedFreeIpaRequest.java", "diffHunk": "@@ -14,6 +14,9 @@\n     @ApiModelProperty(value = EnvironmentModelDescription.CREATE_FREEIPA, required = true)\n     private Boolean create;\n \n+    @ApiModelProperty(value = EnvironmentModelDescription.FREEIPA_INSTANCES_PER_GROUP)\n+    private Integer instancesPerGroup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjk1OTE0OnYy", "diffSide": "RIGHT", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowNDo1NlrOFteWkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowNDo1NlrOFteWkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNzUzOA==", "bodyText": "I think we should create a FreeipaResponse Object here because probably we will see more and more property here", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383227538", "createdAt": "2020-02-24T12:04:56Z", "author": {"login": "doktoric"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "diffHunk": "@@ -32,6 +32,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.CREATE_FREEIPA)\n     private Boolean createFreeIpa = Boolean.TRUE;\n \n+    @ApiModelProperty(EnvironmentModelDescription.FREEIPA_INSTANCES_PER_GROUP)\n+    private Integer freeIpaInstancesPerGroup = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjk2MDE2OnYy", "diffSide": "RIGHT", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowNToxM1rOFteXHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzozMDoyNFrOFudOiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNzY3Nw==", "bodyText": "I think we should create a FreeipaResponse Object here because probably we will see more and more property here", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383227677", "createdAt": "2020-02-24T12:05:13Z", "author": {"login": "doktoric"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java", "diffHunk": "@@ -37,6 +37,8 @@ public static Builder builder() {\n \n         private boolean createFreeIpa;\n \n+        private int freeIpaInstancesPerGroup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1NzY3Mg==", "bodyText": "Done, but I am keeping the createFreeIpa in the parent class for API compatibility.", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r384257672", "createdAt": "2020-02-26T03:30:24Z", "author": {"login": "jamisonbennett"}, "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java", "diffHunk": "@@ -37,6 +37,8 @@ public static Builder builder() {\n \n         private boolean createFreeIpa;\n \n+        private int freeIpaInstancesPerGroup;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNzY3Nw=="}, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjk2MTU5OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/dto/EnvironmentCreationDto.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowNTo0NFrOFteX6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowNTo0NFrOFteX6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNzg4MA==", "bodyText": "thanks for created this object here \ud83d\udc4d", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383227880", "createdAt": "2020-02-24T12:05:44Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/dto/EnvironmentCreationDto.java", "diffHunk": "@@ -148,8 +148,8 @@ public EnvironmentTelemetry getTelemetry() {\n         return telemetry;\n     }\n \n-    public boolean isCreateFreeIpa() {\n-        return createFreeIpa;\n+    public FreeIpaCreationDto getFreeIpaCreation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjk3MjA1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/validation/CreateFreeIpaRequestValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowOTo1MVrOFteeHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjowOTo1MVrOFteeHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyOTQ2OQ==", "bodyText": "in the freeipa request", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383229469", "createdAt": "2020-02-24T12:09:51Z", "author": {"login": "doktoric"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/validation/CreateFreeIpaRequestValidator.java", "diffHunk": "@@ -27,9 +27,27 @@\n \n     @Override\n     public ValidationResult validate(CreateFreeIpaRequest subject) {\n+        // FreeIPA's recommends no more than 4 replication agreements per node. To simply things, only allow a fully connected mesh.\n+        // Also don't allow a special case with 5 nodes for 1 group when the there is a maximum of 4 instances when using multiple groups.\n+        final int maxInstances = 4;\n+\n+        final int maxInstanceGroups = 1;\n+\n         ValidationResultBuilder validationBuilder = ValidationResult.builder();\n-        if (CollectionUtils.isEmpty(subject.getInstanceGroups()) || subject.getInstanceGroups().size() != 1) {\n-            validationBuilder.error(\"Stack request must contain a single instance group.\");\n+        if (CollectionUtils.isEmpty(subject.getInstanceGroups())) {\n+            validationBuilder.error(\"Stack request must contain at least one instance group.\");\n+        } else {\n+            int nodesPerInstanceGroup = subject.getInstanceGroups().get(0).getNodeCount();\n+            if (subject.getInstanceGroups().stream().filter(ig -> ig.getNodeCount() != nodesPerInstanceGroup || ig.getNodeCount() < 1).count() > 0) {\n+                validationBuilder.error(\"All instance groups in the stack request must contain the same number of nodes per instance group \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjk3MzEwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/validation/CreateFreeIpaRequestValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjoxMDoyMFrOFteeyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjoxMDoyMFrOFteeyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyOTY0MQ==", "bodyText": "I think it shoud be good not to call stack request but freeipa request here", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383229641", "createdAt": "2020-02-24T12:10:20Z", "author": {"login": "doktoric"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/validation/CreateFreeIpaRequestValidator.java", "diffHunk": "@@ -27,9 +27,27 @@\n \n     @Override\n     public ValidationResult validate(CreateFreeIpaRequest subject) {\n+        // FreeIPA's recommends no more than 4 replication agreements per node. To simply things, only allow a fully connected mesh.\n+        // Also don't allow a special case with 5 nodes for 1 group when the there is a maximum of 4 instances when using multiple groups.\n+        final int maxInstances = 4;\n+\n+        final int maxInstanceGroups = 1;\n+\n         ValidationResultBuilder validationBuilder = ValidationResult.builder();\n-        if (CollectionUtils.isEmpty(subject.getInstanceGroups()) || subject.getInstanceGroups().size() != 1) {\n-            validationBuilder.error(\"Stack request must contain a single instance group.\");\n+        if (CollectionUtils.isEmpty(subject.getInstanceGroups())) {\n+            validationBuilder.error(\"Stack request must contain at least one instance group.\");\n+        } else {\n+            int nodesPerInstanceGroup = subject.getInstanceGroups().get(0).getNodeCount();\n+            if (subject.getInstanceGroups().stream().filter(ig -> ig.getNodeCount() != nodesPerInstanceGroup || ig.getNodeCount() < 1).count() > 0) {\n+                validationBuilder.error(\"All instance groups in the stack request must contain the same number of nodes per instance group \" +\n+                        \"and there must be at least 1 instance per instance group.\");\n+            }\n+            if (nodesPerInstanceGroup * subject.getInstanceGroups().size() > maxInstances) {\n+                validationBuilder.error(String.format(\"Stack request must contain at most %d instances.\", maxInstances));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjk3NDg1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjoxMDo1OVrOFtef1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyMjo0OVrOFvMszA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyOTkwOQ==", "bodyText": "do we really want to remove the CORE part here ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383229909", "createdAt": "2020-02-24T12:10:59Z", "author": {"login": "doktoric"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java", "diffHunk": "@@ -16,8 +16,7 @@\n     public com.sequenceiq.cloudbreak.cloud.model.Image convert(Image source) {\n         com.sequenceiq.cloudbreak.cloud.model.Image image =\n                 new com.sequenceiq.cloudbreak.cloud.model.Image(source.getImageName(),\n-                        Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\"),\n-                                InstanceGroupType.CORE, Optional.ofNullable(source.getUserdata()).orElse(\"\")),\n+                        Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1ODIyOA==", "bodyText": "This was done to simplify the FreeIPA templates. I discussed this with @lacikaaa and @keyki", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r384258228", "createdAt": "2020-02-26T03:33:08Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java", "diffHunk": "@@ -16,8 +16,7 @@\n     public com.sequenceiq.cloudbreak.cloud.model.Image convert(Image source) {\n         com.sequenceiq.cloudbreak.cloud.model.Image image =\n                 new com.sequenceiq.cloudbreak.cloud.model.Image(source.getImageName(),\n-                        Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\"),\n-                                InstanceGroupType.CORE, Optional.ofNullable(source.getUserdata()).orElse(\"\")),\n+                        Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\")),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyOTkwOQ=="}, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzNTQ2OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r385035468", "createdAt": "2020-02-27T10:22:49Z", "author": {"login": "doktoric"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java", "diffHunk": "@@ -16,8 +16,7 @@\n     public com.sequenceiq.cloudbreak.cloud.model.Image convert(Image source) {\n         com.sequenceiq.cloudbreak.cloud.model.Image image =\n                 new com.sequenceiq.cloudbreak.cloud.model.Image(source.getImageName(),\n-                        Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\"),\n-                                InstanceGroupType.CORE, Optional.ofNullable(source.getUserdata()).orElse(\"\")),\n+                        Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\")),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyOTkwOQ=="}, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mjk4MTczOnYy", "diffSide": "LEFT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/provision/action/AbstractStackProvisionAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjoxMzozNlrOFtej4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzozNDo1NlrOFudSMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMDk0Nw==", "bodyText": "why we removed this part ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383230947", "createdAt": "2020-02-24T12:13:36Z", "author": {"login": "doktoric"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/provision/action/AbstractStackProvisionAction.java", "diffHunk": "@@ -49,7 +48,7 @@ protected AbstractStackProvisionAction(Class<P> payloadClass) {\n     protected StackContext createFlowContext(FlowParameters flowParameters, StateContext<StackProvisionState, StackProvisionEvent> stateContext, P payload) {\n         Stack stack = stackService.getByIdWithListsInTransaction(payload.getResourceId());\n         MDCBuilder.buildMdcContext(stack);\n-        Location location = location(region(stack.getRegion()), availabilityZone(stack.getAvailabilityZone()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1ODYwOA==", "bodyText": "It was replaced with Location location = location(region(stack.getRegion())); which does not set the AZ.\nThe FreeIPA cloud formation template was simplified. The AZs were needed when creating subnets which only cloudbreak core does. As a result it is no longer needed in the cloud formation template for FreeIPA. In order for the template to process I had to avoid sending the AZ parameter into the template processor. But I needed to only do this for FreeIPA and not core. As a result, I changed FreeIPA to not set the AZ since it is not used that way the common code could check if it was null and optionally use the AZ parameter.", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r384258608", "createdAt": "2020-02-26T03:34:56Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/provision/action/AbstractStackProvisionAction.java", "diffHunk": "@@ -49,7 +48,7 @@ protected AbstractStackProvisionAction(Class<P> payloadClass) {\n     protected StackContext createFlowContext(FlowParameters flowParameters, StateContext<StackProvisionState, StackProvisionEvent> stateContext, P payload) {\n         Stack stack = stackService.getByIdWithListsInTransaction(payload.getResourceId());\n         MDCBuilder.buildMdcContext(stack);\n-        Location location = location(region(stack.getRegion()), availabilityZone(stack.getAvailabilityZone()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMDk0Nw=="}, "originalCommit": {"oid": "40adbe7e834408d1141417541c398a34907b1d2c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDU1NjQ4OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/v1/FreeIpaConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyNjo0NlrOFvM1NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyNjo0NlrOFvM1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzNzYyMQ==", "bodyText": "put this part into an else please", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r385037621", "createdAt": "2020-02-27T10:26:46Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/v1/FreeIpaConverter.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.sequenceiq.environment.environment.v1;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.environment.api.v1.environment.model.response.FreeIpaResponse;\n+import com.sequenceiq.environment.environment.dto.FreeIpaCreationDto;\n+\n+@Component\n+public class FreeIpaConverter {\n+\n+    public FreeIpaResponse convert(FreeIpaCreationDto freeIpaCreation) {\n+        if (freeIpaCreation == null) {\n+            return null;\n+        }\n+        FreeIpaResponse response = new FreeIpaResponse();\n+        response.setInstanceCountByGroup(freeIpaCreation.getInstanceCountByGroup());\n+        return response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9c01b4657c09854eb02d0bb2ccdb193dc6c5b1"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2769, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}