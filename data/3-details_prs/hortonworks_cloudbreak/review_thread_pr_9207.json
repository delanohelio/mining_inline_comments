{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNzY2Nzk3", "number": 9207, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyNTo0OFrOEs5p2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1NDoxNVrOEtaDsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE3NDAzOnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/DefaultNetworkConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyNTo0OFrOHgY2Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyNTo0OFrOHgY2Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMzU1NQ==", "bodyText": "I think we have such exception in our code as well", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503723555", "createdAt": "2020-10-13T07:25:48Z", "author": {"login": "doktoric"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/DefaultNetworkConnector.java", "diffHunk": "@@ -39,6 +41,11 @@ default SubnetSelectionResult chooseSubnets(Collection<CloudSubnet> subnetMetas,\n         return subnetSelectionResult;\n     }\n \n+    @Override\n+    default void createProviderSpecificNetworkResources(ProviderSpecificNetworkResourcesCreationRequest providerSpecificNetworkResourcesCreationRequest) {\n+        throw new NotImplementedException(\"No cloud provider specific resources exist on this cloud platform!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTY0MDE5OnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/DefaultNetworkConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToxNzo1MlrOHgdUXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToxNzo1MlrOHgdUXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NjgyOA==", "bodyText": "if you would create a NOOP method here, then in NetworkCreationHandler#createProviderSpecificNetworkResourcesIfNeeded you don't have to make a cloud provider check", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503796828", "createdAt": "2020-10-13T09:17:52Z", "author": {"login": "lacikaaa"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/DefaultNetworkConnector.java", "diffHunk": "@@ -39,6 +41,11 @@ default SubnetSelectionResult chooseSubnets(Collection<CloudSubnet> subnetMetas,\n         return subnetSelectionResult;\n     }\n \n+    @Override\n+    default void createProviderSpecificNetworkResources(ProviderSpecificNetworkResourcesCreationRequest providerSpecificNetworkResourcesCreationRequest) {\n+        throw new NotImplementedException(\"No cloud provider specific resources exist on this cloud platform!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTY2MzY5OnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/network/ProviderSpecificNetworkResourcesCreationRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyMzowN1rOHgdh-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyMzowN1rOHgdh-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMDMxNA==", "bodyText": "nit: a bit shorter name would be nice, like NetworkResourcesCreationRequest or CloudNetworkResourcesCreationRequest", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503800314", "createdAt": "2020-10-13T09:23:07Z", "author": {"login": "lacikaaa"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/network/ProviderSpecificNetworkResourcesCreationRequest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.sequenceiq.cloudbreak.cloud.model.network;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.Region;\n+\n+public class ProviderSpecificNetworkResourcesCreationRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTY2NzcyOnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/network/ProviderSpecificNetworkResourcesCreationRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyNDowM1rOHgdkYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyNDowM1rOHgdkYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMDkzMA==", "bodyText": "this field name is not in sync with the original field", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503800930", "createdAt": "2020-10-13T09:24:03Z", "author": {"login": "lacikaaa"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/network/ProviderSpecificNetworkResourcesCreationRequest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.sequenceiq.cloudbreak.cloud.model.network;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.Region;\n+\n+public class ProviderSpecificNetworkResourcesCreationRequest {\n+\n+    private final String networkId;\n+\n+    private final String networkResourceGroup;\n+\n+    private final boolean existingNetwork;\n+\n+    private final CloudCredential cloudCredential;\n+\n+    private final CloudContext cloudContext;\n+\n+    private final Region region;\n+\n+    private final String resourceGroup;\n+\n+    private final boolean privateEndpointsEnabled;\n+\n+    private final Map<String, String> tags;\n+\n+    private ProviderSpecificNetworkResourcesCreationRequest(Builder builder) {\n+        networkId = builder.networkId;\n+        networkResourceGroup = builder.networkResourceGroup;\n+        existingNetwork = builder.existingNetwork;\n+        cloudCredential = builder.cloudCredential;\n+        cloudContext = builder.cloudContext;\n+        region = builder.region;\n+        resourceGroup = builder.resourceGroup;\n+        privateEndpointsEnabled = builder.serviceEndpointsEnabled;\n+        tags = builder.tags;\n+    }\n+\n+    public String getNetworkId() {\n+        return networkId;\n+    }\n+\n+    public String getNetworkResourceGroup() {\n+        return networkResourceGroup;\n+    }\n+\n+    public boolean isExistingNetwork() {\n+        return existingNetwork;\n+    }\n+\n+    public CloudCredential getCloudCredential() {\n+        return cloudCredential;\n+    }\n+\n+    public CloudContext getCloudContext() {\n+        return cloudContext;\n+    }\n+\n+    public Region getRegion() {\n+        return region;\n+    }\n+\n+    public String getResourceGroup() {\n+        return resourceGroup;\n+    }\n+\n+    public boolean isPrivateEndpointsEnabled() {\n+        return privateEndpointsEnabled;\n+    }\n+\n+    public Map<String, String> getTags() {\n+        return tags;\n+    }\n+\n+    public static class Builder {\n+\n+        private String networkId;\n+\n+        private String networkResourceGroup;\n+\n+        private boolean existingNetwork;\n+\n+        private CloudCredential cloudCredential;\n+\n+        private CloudContext cloudContext;\n+\n+        private Region region;\n+\n+        private String resourceGroup;\n+\n+        private boolean serviceEndpointsEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTY3Njg0OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyNTo1NlrOHgdp6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoxNDowOFrOHgfh1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMjM0Ng==", "bodyText": "privatednsManager - > PrivateDnsManager", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503802346", "createdAt": "2020-10-13T09:25:56Z", "author": {"login": "doktoric"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -90,13 +97,16 @@\n \n     private final Azure azure;\n \n+    private final privatednsManager privatednsManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzMzA0NA==", "bodyText": "This is an Azure internal class, with its own naming.", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503833044", "createdAt": "2020-10-13T10:14:08Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -90,13 +97,16 @@\n \n     private final Azure azure;\n \n+    private final privatednsManager privatednsManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMjM0Ng=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTY5NDcxOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/test/resources/json/arm-network-dnszone.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyOTo1MFrOHgd0nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoxNjoxMlrOHgfmng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwNTA4NQ==", "bodyText": "what is the difference between main and test file ?", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503805085", "createdAt": "2020-10-13T09:29:50Z", "author": {"login": "doktoric"}, "path": "cloud-azure/src/test/resources/json/arm-network-dnszone.json", "diffHunk": "@@ -0,0 +1,72 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzNDI3MA==", "bodyText": "There is a test in AzureNetworkDnsZoneTemplateBuilderTest to compare the content of the generated and expected templates.", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503834270", "createdAt": "2020-10-13T10:16:12Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/test/resources/json/arm-network-dnszone.json", "diffHunk": "@@ -0,0 +1,72 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwNTA4NQ=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTc0NTc1OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTo0MTo0MlrOHgeTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1MTo0M1rOHhLO0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxMjkxOQ==", "bodyText": "where do you set this to FAILED? I see the next step is a polling.", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503812919", "createdAt": "2020-10-13T09:41:42Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyMDIzNg==", "bodyText": "this part not covered with unit test", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503820236", "createdAt": "2020-10-13T09:52:58Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxMjkxOQ=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NDUxMQ==", "bodyText": "I'm still not getting it from the code why is a polling here", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r504544511", "createdAt": "2020-10-14T09:44:31Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxMjkxOQ=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0OTA3NQ==", "bodyText": "Because DataAccessException comes when the unique key for a resource is violated - meaning the same DNS Zone is meant to be inserted multiple times. In that case, the second entry waits for the poller to complete the deployment of the first entry.", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r504549075", "createdAt": "2020-10-14T09:51:43Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxMjkxOQ=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTgxOTg0OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDowMDoxMlrOHgfBgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo0Nzo1MVrOHhLFuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyNDc3MA==", "bodyText": "this method is hard to follow and pretty complex\nmy suggestion is to create 2 new classes:\n\nDnsZoneDeploymentService: responsible for creating the DNS Zone if it's missing, or just wait for it to finish, etc\nNetworkLinkDepleymentService: add/create network links to the zone. I think if we reach this we can be sure we have the DNS zone deployed\n\nAfter this refactor you could get rid of:\n\nif (dnsZonesDeployed && networkLinksDeployed) as subclasses would check if they have to do anything\ncreateDnsZonesAndNetworkLinks as it would be always 2 separate steps", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503824770", "createdAt": "2020-10-13T10:00:12Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0Njc0Nw==", "bodyText": "I think these 2 don't belong to the same class as they are completely different things.\nAlso the new method names: getOrCreate is misleading as the methods don't return anything", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r504546747", "createdAt": "2020-10-14T09:47:51Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyNDc3MA=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTgyNzA1OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDowMjowNVrOHgfGGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDowMjowNVrOHgfGGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyNTk0NQ==", "bodyText": "networkId here is always null", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503825945", "createdAt": "2020-10-13T10:02:05Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);\n+                    pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                            enabledPrivateEndpointServices);\n+                }\n+            }\n+        } else {\n+            LOGGER.debug(\"Network links are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+        }\n+    }\n+\n+    private void pollForCreation(AuthenticatedContext authenticatedContext, AzureClient azureClient, String resourceGroup, String deploymentName,\n+            String dnsZoneDeploymentId, String networkId, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTg3MzQ2OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoxNDo0NVrOHgfjMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoxNDo0NVrOHgfjMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzMzM5NQ==", "bodyText": "this seems unnecessary, logging framework adds timestamp to every line", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503833395", "createdAt": "2020-10-13T10:14:45Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);\n+                    pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                            enabledPrivateEndpointServices);\n+                }\n+            }\n+        } else {\n+            LOGGER.debug(\"Network links are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+        }\n+    }\n+\n+    private void pollForCreation(AuthenticatedContext authenticatedContext, AzureClient azureClient, String resourceGroup, String deploymentName,\n+            String dnsZoneDeploymentId, String networkId, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneCreationCheckerContext checkerContext = new AzureDnsZoneCreationCheckerContext(azureClient,\n+                resourceGroup,\n+                deploymentName,\n+                networkId,\n+                enabledPrivateEndpointServices);\n+        azureDnsZoneCreationPoller.startPolling(authenticatedContext, checkerContext);\n+        CommonStatus deploymentStatus = azureClient.getTemplateDeploymentCommonStatus(resourceGroup, deploymentName);\n+        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, deploymentStatus);\n+    }\n+\n+    private void createDnsZonesAndNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                false,\n+                enabledPrivateEndpointServices,\n+                resourceGroup,\n+                tags);\n+        deployTemplate(azureClient, parameters);\n+    }\n+\n+    private Network getAzureNetwork(AzureClient azureClient, String networkId, String networkResourceGroup) {\n+        Network azureNetwork = azureClient.getNetworkByResourceGroup(networkResourceGroup, networkId);\n+        if (Objects.isNull(azureNetwork)) {\n+            throw new CloudConnectorException(String.format(\"Azure network id lookup failed with network id %s in resource group %s\", networkId,\n+                    networkResourceGroup));\n+        }\n+        return azureNetwork;\n+    }\n+\n+    private void createMissingNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        for (AzurePrivateDnsZoneServiceEnum service: enabledPrivateEndpointServices) {\n+            PagedList<VirtualNetworkLinkInner> networkLinks = azureClient.listNetworkLinksByPrivateDnsZoneName(resourceGroup, service.getDnsZoneName());\n+            boolean networkLinkCreated = azureClient.isNetworkLinkCreated(StringUtils.substringAfterLast(azureNetworkId, \"/\"), networkLinks);\n+            if (!networkLinkCreated) {\n+                LOGGER.debug(\"Network links for service {} not yet created, creating them now\", service.getSubResource());\n+                AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                        true,\n+                        enabledPrivateEndpointServices,\n+                        resourceGroup,\n+                        tags);\n+                deployTemplate(azureClient, parameters);\n+            }\n+        }\n+    }\n+\n+    private List<AzurePrivateDnsZoneServiceEnum> getEnabledPrivateEndpointServices() {\n+        return privateEndpointServices.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getBySubResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void deployTemplate(AzureClient azureClient, AzureDnsZoneDeploymentParameters parameters) {\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = parameters.getEnabledPrivateEndpointServices();\n+        String resourceGroup = parameters.getResourceGroupName();\n+\n+        LOGGER.debug(\"Deploying Private DNS Zones and applying network link for services {}\",\n+                enabledPrivateEndpointServices.stream().map(AzurePrivateDnsZoneServiceEnum::getSubResource).collect(Collectors.toList()));\n+        String networkId = StringUtils.substringAfterLast(parameters.getNetworkId(), \"/\");\n+        String suffix = parameters.getDeployOnlyNetworkLinks() ? \"-\" + networkId + NETWORK_LINKS : DNS_ZONES;\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, suffix);\n+\n+        try {\n+            if (azureClient.templateDeploymentExists(resourceGroup, deploymentName)) {\n+                LOGGER.debug(\"Deleting already existing deployment {}\", deploymentName);\n+                azureClient.deleteTemplateDeployment(resourceGroup, deploymentName);\n+            }\n+            String template = azureNetworkDnsZoneTemplateBuilder.build(parameters);\n+            String parametersMapAsString = new Json(Map.of()).getValue();\n+            if (azureClient.getTemplateDeploymentStatus(resourceGroup, deploymentName).isTransient()) {\n+                throw new CloudConnectorException(String.format(\n+                        \"Not finished template deployment with name %s already exists in resource group %s\", deploymentName, resourceGroup));\n+            } else {\n+                LocalDateTime now = LocalDateTime.now();\n+                LOGGER.debug(\"Creating deployment {}\", DTF.format(now));\n+                azureClient.createTemplateDeployment(resourceGroup, deploymentName, template, parametersMapAsString);\n+            }\n+        } catch (CloudException e) {\n+            LOGGER.info(\"Provisioning error, cloud exception happened: \", e);\n+            if (e.body() != null && e.body().details() != null) {\n+                String details = e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \"));\n+                throw new CloudConnectorException(String.format(\"Template provisioning failed, status code %s, error message: %s, details: %s\",\n+                        e.body().code(), e.body().message(), details));\n+            } else {\n+                throw new CloudConnectorException(String.format(\"Template provisioning failed: '%s', please go to Azure Portal for detailed message\", e));\n+            }\n+        } catch (Exception e) {\n+            LOGGER.warn(\"Provisioning error:\", e);\n+            throw new CloudConnectorException(String.format(\"Error in provisioning network dns zone template %s: %s\",\n+                    deploymentName, e.getMessage()));\n+        }\n+    }\n+\n+    private String generateDnsZoneDeploymentName(List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices, String suffix) {\n+        String fullDeploymentName = enabledPrivateEndpointServices.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getSubResource)\n+                .collect(Collectors.joining(\"-\", \"\", suffix))\n+                .toLowerCase();\n+        String deploymentName = StringUtils.left(fullDeploymentName, DEPLOYMENT_LENGTH_LIMIT);\n+        LOGGER.debug(\"Generated deployment name {}\", deploymentName);\n+        return deploymentName;\n+    }\n+\n+    private String getDnsZoneDeploymentId(String resourceGroup, AzureClient client, String deploymentName) {\n+        return azureResourceIdProviderService.generateDnsZoneDeploymentId(client.getCurrentSubscription()\n+                .subscriptionId(), resourceGroup, deploymentName);\n+    }\n+\n+    private boolean isRequested(String dnsZoneDeploymentId) {\n+        return findDnsZoneDeploymentByStatus(dnsZoneDeploymentId, CommonStatus.REQUESTED).isPresent();\n+    }\n+\n+    private boolean isCreated(String dnsZoneDeploymentId) {\n+        return findDnsZoneDeploymentByStatus(dnsZoneDeploymentId, CommonStatus.CREATED).isPresent();\n+    }\n+\n+    private void persistDnsZone(AuthenticatedContext ac, String deploymentName, String deploymentId) {\n+        LocalDateTime now = LocalDateTime.now();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTg4MDA2OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoxNjoyOFrOHgfnLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoxNjoyOFrOHgfnLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzNDQxMw==", "bodyText": "now is unnecessary here. adding rg name and deployment name would be more helpful", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503834413", "createdAt": "2020-10-13T10:16:28Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);\n+                    pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                            enabledPrivateEndpointServices);\n+                }\n+            }\n+        } else {\n+            LOGGER.debug(\"Network links are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+        }\n+    }\n+\n+    private void pollForCreation(AuthenticatedContext authenticatedContext, AzureClient azureClient, String resourceGroup, String deploymentName,\n+            String dnsZoneDeploymentId, String networkId, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneCreationCheckerContext checkerContext = new AzureDnsZoneCreationCheckerContext(azureClient,\n+                resourceGroup,\n+                deploymentName,\n+                networkId,\n+                enabledPrivateEndpointServices);\n+        azureDnsZoneCreationPoller.startPolling(authenticatedContext, checkerContext);\n+        CommonStatus deploymentStatus = azureClient.getTemplateDeploymentCommonStatus(resourceGroup, deploymentName);\n+        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, deploymentStatus);\n+    }\n+\n+    private void createDnsZonesAndNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                false,\n+                enabledPrivateEndpointServices,\n+                resourceGroup,\n+                tags);\n+        deployTemplate(azureClient, parameters);\n+    }\n+\n+    private Network getAzureNetwork(AzureClient azureClient, String networkId, String networkResourceGroup) {\n+        Network azureNetwork = azureClient.getNetworkByResourceGroup(networkResourceGroup, networkId);\n+        if (Objects.isNull(azureNetwork)) {\n+            throw new CloudConnectorException(String.format(\"Azure network id lookup failed with network id %s in resource group %s\", networkId,\n+                    networkResourceGroup));\n+        }\n+        return azureNetwork;\n+    }\n+\n+    private void createMissingNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        for (AzurePrivateDnsZoneServiceEnum service: enabledPrivateEndpointServices) {\n+            PagedList<VirtualNetworkLinkInner> networkLinks = azureClient.listNetworkLinksByPrivateDnsZoneName(resourceGroup, service.getDnsZoneName());\n+            boolean networkLinkCreated = azureClient.isNetworkLinkCreated(StringUtils.substringAfterLast(azureNetworkId, \"/\"), networkLinks);\n+            if (!networkLinkCreated) {\n+                LOGGER.debug(\"Network links for service {} not yet created, creating them now\", service.getSubResource());\n+                AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                        true,\n+                        enabledPrivateEndpointServices,\n+                        resourceGroup,\n+                        tags);\n+                deployTemplate(azureClient, parameters);\n+            }\n+        }\n+    }\n+\n+    private List<AzurePrivateDnsZoneServiceEnum> getEnabledPrivateEndpointServices() {\n+        return privateEndpointServices.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getBySubResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void deployTemplate(AzureClient azureClient, AzureDnsZoneDeploymentParameters parameters) {\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = parameters.getEnabledPrivateEndpointServices();\n+        String resourceGroup = parameters.getResourceGroupName();\n+\n+        LOGGER.debug(\"Deploying Private DNS Zones and applying network link for services {}\",\n+                enabledPrivateEndpointServices.stream().map(AzurePrivateDnsZoneServiceEnum::getSubResource).collect(Collectors.toList()));\n+        String networkId = StringUtils.substringAfterLast(parameters.getNetworkId(), \"/\");\n+        String suffix = parameters.getDeployOnlyNetworkLinks() ? \"-\" + networkId + NETWORK_LINKS : DNS_ZONES;\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, suffix);\n+\n+        try {\n+            if (azureClient.templateDeploymentExists(resourceGroup, deploymentName)) {\n+                LOGGER.debug(\"Deleting already existing deployment {}\", deploymentName);\n+                azureClient.deleteTemplateDeployment(resourceGroup, deploymentName);\n+            }\n+            String template = azureNetworkDnsZoneTemplateBuilder.build(parameters);\n+            String parametersMapAsString = new Json(Map.of()).getValue();\n+            if (azureClient.getTemplateDeploymentStatus(resourceGroup, deploymentName).isTransient()) {\n+                throw new CloudConnectorException(String.format(\n+                        \"Not finished template deployment with name %s already exists in resource group %s\", deploymentName, resourceGroup));\n+            } else {\n+                LocalDateTime now = LocalDateTime.now();\n+                LOGGER.debug(\"Creating deployment {}\", DTF.format(now));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTg4MDkxOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoxNjo0M1rOHgfntA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoxNjo0M1rOHgfntA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzNDU0OA==", "bodyText": "this can be dropped", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503834548", "createdAt": "2020-10-13T10:16:43Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTkwMDM0OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyMTo0MFrOHgfzPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyMTo0MFrOHgfzPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzNzUwMA==", "bodyText": "these 2 lines can be moved into generateDnsZoneDeploymentName as the result only used there", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503837500", "createdAt": "2020-10-13T10:21:40Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);\n+                    pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                            enabledPrivateEndpointServices);\n+                }\n+            }\n+        } else {\n+            LOGGER.debug(\"Network links are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+        }\n+    }\n+\n+    private void pollForCreation(AuthenticatedContext authenticatedContext, AzureClient azureClient, String resourceGroup, String deploymentName,\n+            String dnsZoneDeploymentId, String networkId, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneCreationCheckerContext checkerContext = new AzureDnsZoneCreationCheckerContext(azureClient,\n+                resourceGroup,\n+                deploymentName,\n+                networkId,\n+                enabledPrivateEndpointServices);\n+        azureDnsZoneCreationPoller.startPolling(authenticatedContext, checkerContext);\n+        CommonStatus deploymentStatus = azureClient.getTemplateDeploymentCommonStatus(resourceGroup, deploymentName);\n+        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, deploymentStatus);\n+    }\n+\n+    private void createDnsZonesAndNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                false,\n+                enabledPrivateEndpointServices,\n+                resourceGroup,\n+                tags);\n+        deployTemplate(azureClient, parameters);\n+    }\n+\n+    private Network getAzureNetwork(AzureClient azureClient, String networkId, String networkResourceGroup) {\n+        Network azureNetwork = azureClient.getNetworkByResourceGroup(networkResourceGroup, networkId);\n+        if (Objects.isNull(azureNetwork)) {\n+            throw new CloudConnectorException(String.format(\"Azure network id lookup failed with network id %s in resource group %s\", networkId,\n+                    networkResourceGroup));\n+        }\n+        return azureNetwork;\n+    }\n+\n+    private void createMissingNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        for (AzurePrivateDnsZoneServiceEnum service: enabledPrivateEndpointServices) {\n+            PagedList<VirtualNetworkLinkInner> networkLinks = azureClient.listNetworkLinksByPrivateDnsZoneName(resourceGroup, service.getDnsZoneName());\n+            boolean networkLinkCreated = azureClient.isNetworkLinkCreated(StringUtils.substringAfterLast(azureNetworkId, \"/\"), networkLinks);\n+            if (!networkLinkCreated) {\n+                LOGGER.debug(\"Network links for service {} not yet created, creating them now\", service.getSubResource());\n+                AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                        true,\n+                        enabledPrivateEndpointServices,\n+                        resourceGroup,\n+                        tags);\n+                deployTemplate(azureClient, parameters);\n+            }\n+        }\n+    }\n+\n+    private List<AzurePrivateDnsZoneServiceEnum> getEnabledPrivateEndpointServices() {\n+        return privateEndpointServices.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getBySubResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void deployTemplate(AzureClient azureClient, AzureDnsZoneDeploymentParameters parameters) {\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = parameters.getEnabledPrivateEndpointServices();\n+        String resourceGroup = parameters.getResourceGroupName();\n+\n+        LOGGER.debug(\"Deploying Private DNS Zones and applying network link for services {}\",\n+                enabledPrivateEndpointServices.stream().map(AzurePrivateDnsZoneServiceEnum::getSubResource).collect(Collectors.toList()));\n+        String networkId = StringUtils.substringAfterLast(parameters.getNetworkId(), \"/\");\n+        String suffix = parameters.getDeployOnlyNetworkLinks() ? \"-\" + networkId + NETWORK_LINKS : DNS_ZONES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTkxMTA2OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyNDo0MlrOHgf5tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyNDo0MlrOHgf5tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzOTE1OQ==", "bodyText": "why this check is necessary? at line #187 deployment existence already checked and deleted if present", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503839159", "createdAt": "2020-10-13T10:24:42Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);\n+                    pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                            enabledPrivateEndpointServices);\n+                }\n+            }\n+        } else {\n+            LOGGER.debug(\"Network links are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+        }\n+    }\n+\n+    private void pollForCreation(AuthenticatedContext authenticatedContext, AzureClient azureClient, String resourceGroup, String deploymentName,\n+            String dnsZoneDeploymentId, String networkId, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneCreationCheckerContext checkerContext = new AzureDnsZoneCreationCheckerContext(azureClient,\n+                resourceGroup,\n+                deploymentName,\n+                networkId,\n+                enabledPrivateEndpointServices);\n+        azureDnsZoneCreationPoller.startPolling(authenticatedContext, checkerContext);\n+        CommonStatus deploymentStatus = azureClient.getTemplateDeploymentCommonStatus(resourceGroup, deploymentName);\n+        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, deploymentStatus);\n+    }\n+\n+    private void createDnsZonesAndNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                false,\n+                enabledPrivateEndpointServices,\n+                resourceGroup,\n+                tags);\n+        deployTemplate(azureClient, parameters);\n+    }\n+\n+    private Network getAzureNetwork(AzureClient azureClient, String networkId, String networkResourceGroup) {\n+        Network azureNetwork = azureClient.getNetworkByResourceGroup(networkResourceGroup, networkId);\n+        if (Objects.isNull(azureNetwork)) {\n+            throw new CloudConnectorException(String.format(\"Azure network id lookup failed with network id %s in resource group %s\", networkId,\n+                    networkResourceGroup));\n+        }\n+        return azureNetwork;\n+    }\n+\n+    private void createMissingNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        for (AzurePrivateDnsZoneServiceEnum service: enabledPrivateEndpointServices) {\n+            PagedList<VirtualNetworkLinkInner> networkLinks = azureClient.listNetworkLinksByPrivateDnsZoneName(resourceGroup, service.getDnsZoneName());\n+            boolean networkLinkCreated = azureClient.isNetworkLinkCreated(StringUtils.substringAfterLast(azureNetworkId, \"/\"), networkLinks);\n+            if (!networkLinkCreated) {\n+                LOGGER.debug(\"Network links for service {} not yet created, creating them now\", service.getSubResource());\n+                AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                        true,\n+                        enabledPrivateEndpointServices,\n+                        resourceGroup,\n+                        tags);\n+                deployTemplate(azureClient, parameters);\n+            }\n+        }\n+    }\n+\n+    private List<AzurePrivateDnsZoneServiceEnum> getEnabledPrivateEndpointServices() {\n+        return privateEndpointServices.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getBySubResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void deployTemplate(AzureClient azureClient, AzureDnsZoneDeploymentParameters parameters) {\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = parameters.getEnabledPrivateEndpointServices();\n+        String resourceGroup = parameters.getResourceGroupName();\n+\n+        LOGGER.debug(\"Deploying Private DNS Zones and applying network link for services {}\",\n+                enabledPrivateEndpointServices.stream().map(AzurePrivateDnsZoneServiceEnum::getSubResource).collect(Collectors.toList()));\n+        String networkId = StringUtils.substringAfterLast(parameters.getNetworkId(), \"/\");\n+        String suffix = parameters.getDeployOnlyNetworkLinks() ? \"-\" + networkId + NETWORK_LINKS : DNS_ZONES;\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, suffix);\n+\n+        try {\n+            if (azureClient.templateDeploymentExists(resourceGroup, deploymentName)) {\n+                LOGGER.debug(\"Deleting already existing deployment {}\", deploymentName);\n+                azureClient.deleteTemplateDeployment(resourceGroup, deploymentName);\n+            }\n+            String template = azureNetworkDnsZoneTemplateBuilder.build(parameters);\n+            String parametersMapAsString = new Json(Map.of()).getValue();\n+            if (azureClient.getTemplateDeploymentStatus(resourceGroup, deploymentName).isTransient()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTk0MzI5OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDozMzoyMlrOHggNbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDozMzoyMlrOHggNbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0NDIwNQ==", "bodyText": "nit: could be inlined", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503844205", "createdAt": "2020-10-13T10:33:22Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkConnector.java", "diffHunk": "@@ -206,6 +210,26 @@ public SubnetSelectionResult chooseSubnets(Collection<CloudSubnet> subnetMetas,\n         return azureSubnetSelectorService.select(subnetMetas, subnetSelectionParameters);\n     }\n \n+    @Override\n+    public void createProviderSpecificNetworkResources(ProviderSpecificNetworkResourcesCreationRequest request) {\n+        boolean privateEndpointsEnabled = request.isPrivateEndpointsEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTk0NjE1OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkDnsZoneTemplateBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDozNDoxNVrOHggPMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDozNDoxNVrOHggPMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0NDY1OA==", "bodyText": "wrong class", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503844658", "createdAt": "2020-10-13T10:34:15Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkDnsZoneTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureNetworkDnsZoneTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureTemplateBuilder.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTk0Nzk1OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkDnsZoneTemplateBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDozNDo1MVrOHggQZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0ODozMFrOHgnsqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0NDk2Nw==", "bodyText": "please loose the : to ensure the value is set", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503844967", "createdAt": "2020-10-13T10:34:51Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkDnsZoneTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureNetworkDnsZoneTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.network.dnszone.template.path:}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2Njg5MA==", "bodyText": "Ok, done this for all the arm templates", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503966890", "createdAt": "2020-10-13T13:48:30Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkDnsZoneTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureNetworkDnsZoneTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.network.dnszone.template.path:}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0NDk2Nw=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTk4ODE1OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo0NjoxMFrOHggosw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo1MDoxM1rOHggxRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1MTE4Nw==", "bodyText": "you should use equals here instead of ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503851187", "createdAt": "2020-10-13T10:46:10Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -722,6 +739,66 @@ public void deleteDatabaseServer(String databaseServerId) {\n         handleAuthException(() -> azure.genericResources().deleteById(databaseServerId));\n     }\n \n+    public PrivateZone getPrivateDnsZoneByResourceGroup(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.privateZones().getByResourceGroup(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public PagedList<PrivateZone> listPrivateDnsZonesByResourceGroup(String resourceGroupName) {\n+        return privatednsManager.privateZones().listByResourceGroup(resourceGroupName);\n+    }\n+\n+    public PagedList<VirtualNetworkLinkInner> listNetworkLinksByPrivateDnsZoneName(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.virtualNetworkLinks().inner().list(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public boolean checkIfDnsZonesDeployed(String resourceGroupName, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking DNS Zones for services {}\", services.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                .collect(Collectors.toList()));\n+\n+        PagedList<PrivateZone> dnsZones = listPrivateDnsZonesByResourceGroup(resourceGroupName);\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            Optional<PrivateZone> foundDnsZone = dnsZones.stream()\n+                    .filter(dnsZone -> dnsZone.name().equals(dnsZoneName))\n+                    .filter(dnsZone -> dnsZone.provisioningState() == SUCCEEDED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1MzM4Mg==", "bodyText": "you could use noneMatch or anyMatch instead of the last filter, so it would return a boolean and you could use that in the if condition", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503853382", "createdAt": "2020-10-13T10:50:13Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -722,6 +739,66 @@ public void deleteDatabaseServer(String databaseServerId) {\n         handleAuthException(() -> azure.genericResources().deleteById(databaseServerId));\n     }\n \n+    public PrivateZone getPrivateDnsZoneByResourceGroup(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.privateZones().getByResourceGroup(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public PagedList<PrivateZone> listPrivateDnsZonesByResourceGroup(String resourceGroupName) {\n+        return privatednsManager.privateZones().listByResourceGroup(resourceGroupName);\n+    }\n+\n+    public PagedList<VirtualNetworkLinkInner> listNetworkLinksByPrivateDnsZoneName(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.virtualNetworkLinks().inner().list(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public boolean checkIfDnsZonesDeployed(String resourceGroupName, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking DNS Zones for services {}\", services.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                .collect(Collectors.toList()));\n+\n+        PagedList<PrivateZone> dnsZones = listPrivateDnsZonesByResourceGroup(resourceGroupName);\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            Optional<PrivateZone> foundDnsZone = dnsZones.stream()\n+                    .filter(dnsZone -> dnsZone.name().equals(dnsZoneName))\n+                    .filter(dnsZone -> dnsZone.provisioningState() == SUCCEEDED)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1MTE4Nw=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjAwNTcyOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo1MTowNFrOHggzVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo1MTowNFrOHggzVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1MzkwOQ==", "bodyText": "isEmpty please, like:\n\t\t\tif (virtualNetworkLinks.isEmpty()) {\n                LOGGER.info(\"Network link for network {} not found for DNS zone {}!\", networkId, dnsZoneName);\n                return false;\n            } else if (!isNetworkLinkCreated(networkId, virtualNetworkLinks)) {\n                LOGGER.info(\"Network link for network {} and DNS Zone {} is not provisioned successfully yet!\", networkId, dnsZoneName);\n                return false;\n            }", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503853909", "createdAt": "2020-10-13T10:51:04Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -722,6 +739,66 @@ public void deleteDatabaseServer(String databaseServerId) {\n         handleAuthException(() -> azure.genericResources().deleteById(databaseServerId));\n     }\n \n+    public PrivateZone getPrivateDnsZoneByResourceGroup(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.privateZones().getByResourceGroup(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public PagedList<PrivateZone> listPrivateDnsZonesByResourceGroup(String resourceGroupName) {\n+        return privatednsManager.privateZones().listByResourceGroup(resourceGroupName);\n+    }\n+\n+    public PagedList<VirtualNetworkLinkInner> listNetworkLinksByPrivateDnsZoneName(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.virtualNetworkLinks().inner().list(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public boolean checkIfDnsZonesDeployed(String resourceGroupName, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking DNS Zones for services {}\", services.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                .collect(Collectors.toList()));\n+\n+        PagedList<PrivateZone> dnsZones = listPrivateDnsZonesByResourceGroup(resourceGroupName);\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            Optional<PrivateZone> foundDnsZone = dnsZones.stream()\n+                    .filter(dnsZone -> dnsZone.name().equals(dnsZoneName))\n+                    .filter(dnsZone -> dnsZone.provisioningState() == SUCCEEDED)\n+                    .findAny();\n+            if (foundDnsZone.isEmpty()) {\n+                LOGGER.info(\"DNS Zone {} is not provisioned successfully yet!\", dnsZoneName);\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean checkIfNetworkLinksDeployed(String resourceGroupName, String networkId, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking Network link between network and services {} and network link {}\", networkId,\n+                services.stream()\n+                        .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                        .collect(Collectors.toList()));\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            PagedList<VirtualNetworkLinkInner> virtualNetworkLinks = listNetworkLinksByPrivateDnsZoneName(resourceGroupName, dnsZoneName);\n+            if (virtualNetworkLinks.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjAzMjk4OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo1ODozMVrOHghD_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoyNzoyMFrOHgmsHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1ODE3NQ==", "bodyText": "as these are not real enums, please use equals", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503858175", "createdAt": "2020-10-13T10:58:31Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -722,6 +739,66 @@ public void deleteDatabaseServer(String databaseServerId) {\n         handleAuthException(() -> azure.genericResources().deleteById(databaseServerId));\n     }\n \n+    public PrivateZone getPrivateDnsZoneByResourceGroup(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.privateZones().getByResourceGroup(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public PagedList<PrivateZone> listPrivateDnsZonesByResourceGroup(String resourceGroupName) {\n+        return privatednsManager.privateZones().listByResourceGroup(resourceGroupName);\n+    }\n+\n+    public PagedList<VirtualNetworkLinkInner> listNetworkLinksByPrivateDnsZoneName(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.virtualNetworkLinks().inner().list(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public boolean checkIfDnsZonesDeployed(String resourceGroupName, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking DNS Zones for services {}\", services.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                .collect(Collectors.toList()));\n+\n+        PagedList<PrivateZone> dnsZones = listPrivateDnsZonesByResourceGroup(resourceGroupName);\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            Optional<PrivateZone> foundDnsZone = dnsZones.stream()\n+                    .filter(dnsZone -> dnsZone.name().equals(dnsZoneName))\n+                    .filter(dnsZone -> dnsZone.provisioningState() == SUCCEEDED)\n+                    .findAny();\n+            if (foundDnsZone.isEmpty()) {\n+                LOGGER.info(\"DNS Zone {} is not provisioned successfully yet!\", dnsZoneName);\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean checkIfNetworkLinksDeployed(String resourceGroupName, String networkId, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking Network link between network and services {} and network link {}\", networkId,\n+                services.stream()\n+                        .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                        .collect(Collectors.toList()));\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            PagedList<VirtualNetworkLinkInner> virtualNetworkLinks = listNetworkLinksByPrivateDnsZoneName(resourceGroupName, dnsZoneName);\n+            if (virtualNetworkLinks.size() > 0) {\n+                if (!isNetworkLinkCreated(networkId, virtualNetworkLinks)) {\n+                    LOGGER.info(\"Network link for network {} and DNS Zone {} is not provisioned successfully yet!\", networkId, dnsZoneName);\n+                    return false;\n+                }\n+            } else {\n+                LOGGER.info(\"Network link for network {} not found for DNS zone {}!\", networkId, dnsZoneName);\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean isNetworkLinkCreated(String networkId, PagedList<VirtualNetworkLinkInner> virtualNetworkLinks) {\n+        return virtualNetworkLinks.stream()\n+                .filter(networkLink -> networkId.equals(networkLink.name()))\n+                .anyMatch(networkLink -> networkLink.provisioningState() == SUCCEEDED\n+                        && networkLink.virtualNetworkLinkState() == VirtualNetworkLinkState.COMPLETED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1MDM2Nw==", "bodyText": "God bless the Azure SDK! :D", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503950367", "createdAt": "2020-10-13T13:27:20Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -722,6 +739,66 @@ public void deleteDatabaseServer(String databaseServerId) {\n         handleAuthException(() -> azure.genericResources().deleteById(databaseServerId));\n     }\n \n+    public PrivateZone getPrivateDnsZoneByResourceGroup(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.privateZones().getByResourceGroup(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public PagedList<PrivateZone> listPrivateDnsZonesByResourceGroup(String resourceGroupName) {\n+        return privatednsManager.privateZones().listByResourceGroup(resourceGroupName);\n+    }\n+\n+    public PagedList<VirtualNetworkLinkInner> listNetworkLinksByPrivateDnsZoneName(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.virtualNetworkLinks().inner().list(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public boolean checkIfDnsZonesDeployed(String resourceGroupName, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking DNS Zones for services {}\", services.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                .collect(Collectors.toList()));\n+\n+        PagedList<PrivateZone> dnsZones = listPrivateDnsZonesByResourceGroup(resourceGroupName);\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            Optional<PrivateZone> foundDnsZone = dnsZones.stream()\n+                    .filter(dnsZone -> dnsZone.name().equals(dnsZoneName))\n+                    .filter(dnsZone -> dnsZone.provisioningState() == SUCCEEDED)\n+                    .findAny();\n+            if (foundDnsZone.isEmpty()) {\n+                LOGGER.info(\"DNS Zone {} is not provisioned successfully yet!\", dnsZoneName);\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean checkIfNetworkLinksDeployed(String resourceGroupName, String networkId, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking Network link between network and services {} and network link {}\", networkId,\n+                services.stream()\n+                        .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                        .collect(Collectors.toList()));\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            PagedList<VirtualNetworkLinkInner> virtualNetworkLinks = listNetworkLinksByPrivateDnsZoneName(resourceGroupName, dnsZoneName);\n+            if (virtualNetworkLinks.size() > 0) {\n+                if (!isNetworkLinkCreated(networkId, virtualNetworkLinks)) {\n+                    LOGGER.info(\"Network link for network {} and DNS Zone {} is not provisioned successfully yet!\", networkId, dnsZoneName);\n+                    return false;\n+                }\n+            } else {\n+                LOGGER.info(\"Network link for network {} not found for DNS zone {}!\", networkId, dnsZoneName);\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean isNetworkLinkCreated(String networkId, PagedList<VirtualNetworkLinkInner> virtualNetworkLinks) {\n+        return virtualNetworkLinks.stream()\n+                .filter(networkLink -> networkId.equals(networkLink.name()))\n+                .anyMatch(networkLink -> networkLink.provisioningState() == SUCCEEDED\n+                        && networkLink.virtualNetworkLinkState() == VirtualNetworkLinkState.COMPLETED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1ODE3NQ=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjA0NzExOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/resource/AzureResourceIdProviderService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowMjoyNFrOHghMTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowMjoyNFrOHghMTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MDMwMA==", "bodyText": "this could be private, or if we keep this public we might want to add asserts for the parameters also here", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503860300", "createdAt": "2020-10-13T11:02:24Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/resource/AzureResourceIdProviderService.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.resource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.Assert;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.AzureStorage;\n+\n+@Component\n+public class AzureResourceIdProviderService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureResourceIdProviderService.class);\n+\n+    public String generateImageId(String subscriptionId, String resourceGroup, String imageName) {\n+        Assert.hasText(subscriptionId, \"Subscription id must not be null or empty.\");\n+        Assert.hasText(resourceGroup, \"Resource group must not be null or empty.\");\n+        Assert.hasText(imageName, \"Image name must not be null or empty.\");\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(generateCommonPart(subscriptionId, resourceGroup));\n+        sb.append(\"/providers/Microsoft.Compute/\");\n+        sb.append(AzureStorage.IMAGES_CONTAINER);\n+        sb.append(\"/\");\n+        sb.append(imageName);\n+        String resourceReference = sb.toString();\n+        LOGGER.info(\"Generated resourceReferenceId: {}\", resourceReference);\n+        return resourceReference;\n+    }\n+\n+    public String generateDnsZoneDeploymentId(String subscriptionId, String resourceGroup, String deploymentName) {\n+        Assert.hasText(subscriptionId, \"Subscription id must not be null or empty.\");\n+        Assert.hasText(resourceGroup, \"Resource group must not be null or empty.\");\n+        Assert.hasText(deploymentName, \"Deployment name must not be null or empty.\");\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(generateCommonPart(subscriptionId, resourceGroup));\n+        sb.append(\"/providers/Microsoft.Resources/\");\n+        sb.append(\"deployments/\");\n+        sb.append(deploymentName);\n+        String resourceReference = sb.toString();\n+        LOGGER.info(\"Generated resourceReferenceId: {}\", resourceReference);\n+        return resourceReference;\n+    }\n+\n+    public String generateCommonPart(String subscriptionId, String resourceGroup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjA1MDUyOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/status/AzureStatusMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowMzoxOVrOHghOYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowMzoxOVrOHghOYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MDgzMg==", "bodyText": "maybe an extra log could help us later here", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503860832", "createdAt": "2020-10-13T11:03:19Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/status/AzureStatusMapper.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.status;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.ResourceStatus;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+\n+public class AzureStatusMapper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStatusMapper.class);\n+\n+    private AzureStatusMapper() {\n+    }\n+\n+    public static ResourceStatus mapResourceStatus(String status) {\n+        LOGGER.debug(\"Mapping resource status {}\", status);\n+        switch (status) {\n+            case \"Accepted\":\n+                return ResourceStatus.IN_PROGRESS;\n+            case \"Ready\":\n+                return ResourceStatus.UPDATED;\n+            case \"Canceled\":\n+                return ResourceStatus.FAILED;\n+            case \"Failed\":\n+                return ResourceStatus.FAILED;\n+            case \"Deleted\":\n+                return ResourceStatus.DELETED;\n+            case \"Succeeded\":\n+                return ResourceStatus.CREATED;\n+            default:\n+                return ResourceStatus.IN_PROGRESS;\n+\n+        }\n+    }\n+\n+    public static CommonStatus mapCommonStatus(String status) {\n+        LOGGER.debug(\"Mapping common status {}\", status);\n+        switch (status) {\n+            case \"Accepted\":\n+                return CommonStatus.REQUESTED;\n+            case \"Ready\":\n+            case \"Succeeded\":\n+                return CommonStatus.CREATED;\n+            case \"Canceled\":\n+            case \"Deleted\":\n+            case \"Failed\":\n+                return CommonStatus.FAILED;\n+            default:\n+                return CommonStatus.FAILED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjA1Njk3OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/dnszone/AzureDnsZoneCreationCheckerContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowNToxMFrOHghSWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowNToxMFrOHghSWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MTg0OQ==", "bodyText": "according to call hierarchy this always be null", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503861849", "createdAt": "2020-10-13T11:05:10Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/dnszone/AzureDnsZoneCreationCheckerContext.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.task.dnszone;\n+\n+import java.util.List;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.AzurePrivateDnsZoneServiceEnum;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+\n+public class AzureDnsZoneCreationCheckerContext {\n+\n+    private final AzureClient azureClient;\n+\n+    private final String resourceGroupName;\n+\n+    private final String deploymentName;\n+\n+    private final String networkId;\n+\n+    private final List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices;\n+\n+    public AzureDnsZoneCreationCheckerContext(AzureClient azureClient, String resourceGroupName, String deploymentName, String networkId,\n+            List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        this.azureClient = azureClient;\n+        this.resourceGroupName = resourceGroupName;\n+        this.deploymentName = deploymentName;\n+        this.networkId = networkId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjA2NjY4OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/dnszone/AzureDnsZoneCreationCheckerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowODoxMlrOHghYUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowODoxMlrOHghYUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MzM3OQ==", "bodyText": "this will never be called as networkId is null", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503863379", "createdAt": "2020-10-13T11:08:12Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/dnszone/AzureDnsZoneCreationCheckerTask.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.task.dnszone;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.AzurePrivateDnsZoneServiceEnum;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.model.ResourceStatus;\n+import com.sequenceiq.cloudbreak.cloud.task.PollBooleanStateTask;\n+\n+@Component(AzureDnsZoneCreationCheckerTask.NAME)\n+@Scope(\"prototype\")\n+public class AzureDnsZoneCreationCheckerTask extends PollBooleanStateTask {\n+\n+    public static final String NAME = \"AzureDnsZoneCreationChecker\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneCreationCheckerTask.class);\n+\n+    private final AzureDnsZoneCreationCheckerContext context;\n+\n+    public AzureDnsZoneCreationCheckerTask(AuthenticatedContext authenticatedContext, AzureDnsZoneCreationCheckerContext context) {\n+        super(authenticatedContext, false);\n+        this.context = context;\n+    }\n+\n+    @Override\n+    protected Boolean doCall() {\n+        String deploymentName = context.getDeploymentName();\n+        String resourceGroupName = context.getResourceGroupName();\n+        AzureClient azureClient = context.getAzureClient();\n+        String networkId = context.getNetworkId();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = context.getEnabledPrivateEndpointServices();\n+        LOGGER.info(\"Waiting for DNS zone to be created: {}\", deploymentName);\n+\n+        ResourceStatus templateDeploymentStatus = azureClient.getTemplateDeploymentStatus(resourceGroupName, deploymentName);\n+\n+        if (templateDeploymentStatus.isPermanent() &&\n+                templateDeploymentStatus != ResourceStatus.DELETED &&\n+                azureClient.checkIfDnsZonesDeployed(resourceGroupName, enabledPrivateEndpointServices)) {\n+            LOGGER.info(\"DNS zone and network link creation has been finished with status {}\", templateDeploymentStatus);\n+            if (StringUtils.isNotEmpty(networkId)) {\n+                return azureClient.checkIfNetworkLinksDeployed(resourceGroupName, networkId, enabledPrivateEndpointServices);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjA3Mzg4OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/dnszone/AzureDnsZoneCreationPoller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToxMDoxN1rOHghcqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoyMzozNlrOHgmhbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NDQ4OQ==", "bodyText": "these should be @Values so we could easily override them", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503864489", "createdAt": "2020-10-13T11:10:17Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/dnszone/AzureDnsZoneCreationPoller.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.task.dnszone;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.task.AzurePollTaskFactory;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.SyncPollingScheduler;\n+import com.sequenceiq.cloudbreak.cloud.task.PollTask;\n+\n+@Component\n+public class AzureDnsZoneCreationPoller {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneCreationPoller.class);\n+\n+    private static final int DNS_ZONE_CREATION_CHECKING_INTERVAL = 1000;\n+\n+    private static final int DNS_ZONE_CREATION_CHECKING_MAX_ATTEMPT = 100;\n+\n+    private static final int MAX_FAILURE_TOLERANT = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0NzYzMQ==", "bodyText": "Good idea, worth doing for all the affected Pollers", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503947631", "createdAt": "2020-10-13T13:23:36Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/dnszone/AzureDnsZoneCreationPoller.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.task.dnszone;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.task.AzurePollTaskFactory;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.SyncPollingScheduler;\n+import com.sequenceiq.cloudbreak.cloud.task.PollTask;\n+\n+@Component\n+public class AzureDnsZoneCreationPoller {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneCreationPoller.class);\n+\n+    private static final int DNS_ZONE_CREATION_CHECKING_INTERVAL = 1000;\n+\n+    private static final int DNS_ZONE_CREATION_CHECKING_MAX_ATTEMPT = 100;\n+\n+    private static final int MAX_FAILURE_TOLERANT = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NDQ4OQ=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjA4MzQxOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/resources/templates/arm-network-dnszone.ftl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToxMzowOFrOHghiUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjo1Mzo0MVrOHglLfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NTkzOA==", "bodyText": "this seems pretty old, can't we move to a newer one?", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503865938", "createdAt": "2020-10-13T11:13:08Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/resources/templates/arm-network-dnszone.ftl", "diffHunk": "@@ -0,0 +1,61 @@\n+<#setting number_format=\"computer\">\n+{\n+    \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkyNTYzMQ==", "bodyText": "I update it for this template and file a follow-up to update all the others, as every arm template references this schema version except for 1.", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503925631", "createdAt": "2020-10-13T12:53:41Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/resources/templates/arm-network-dnszone.ftl", "diffHunk": "@@ -0,0 +1,61 @@\n+<#setting number_format=\"computer\">\n+{\n+    \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NTkzOA=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjA4NjQ4OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/test/resources/json/arm-network-dnszone.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToxNDowOVrOHghkMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToxNDowOVrOHghkMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NjQxOQ==", "bodyText": "same here for the schema version", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503866419", "createdAt": "2020-10-13T11:14:09Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/test/resources/json/arm-network-dnszone.json", "diffHunk": "@@ -0,0 +1,72 @@\n+{\n+  \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjA5Njg0OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/NetworkCreationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToxNzoyMFrOHghqXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToxNzoyMFrOHghqXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2Nzk5OQ==", "bodyText": "as mentioned above this could be removed if we change the DefaultNetworkConnector", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503867999", "createdAt": "2020-10-13T11:17:20Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/NetworkCreationHandler.java", "diffHunk": "@@ -118,6 +120,12 @@ private void createCloudNetworkIfNeeded(EnvironmentDto environmentDto, Environme\n         }\n     }\n \n+    private void createProviderSpecificNetworkResourcesIfNeeded(EnvironmentDto environmentDto, BaseNetwork network) {\n+        if (AZURE.equalsIgnoreCase(environmentDto.getCloudPlatform())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjEwOTgzOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/NetworkCreationRequestFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToyMTowMFrOHghyMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToyMTowMFrOHghyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3MDAwMg==", "bodyText": "nit: isExistingNetwork", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503870002", "createdAt": "2020-10-13T11:21:00Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/NetworkCreationRequestFactory.java", "diffHunk": "@@ -72,6 +80,25 @@ public NetworkCreationRequest create(EnvironmentDto environment) {\n         return builder.build();\n     }\n \n+    public ProviderSpecificNetworkResourcesCreationRequest createProviderSpecificNetworkResources(EnvironmentDto environment, BaseNetwork baseNetwork) {\n+        NetworkDto networkDto = environment.getNetwork();\n+        ProviderSpecificNetworkResourcesCreationRequest.Builder builder = new ProviderSpecificNetworkResourcesCreationRequest.Builder()\n+                .withNetworkId(NullUtil.getIfNotNull(baseNetwork, BaseNetwork::getNetworkId))\n+                .withNetworkResourceGroup(NullUtil.getIfNotNull(baseNetwork, this::getNetworkResourceGroupName))\n+                .withExistingNetwork(NullUtil.getIfNotNull(baseNetwork, this::getExistingNetwork))\n+                .withCloudCredential(getCredential(environment))\n+                .withCloudContext(getCloudContext(environment))\n+                .withRegion(Region.region(environment.getLocation().getName()))\n+                .withPrivateEndpointsEnabled(ServiceEndpointCreation.ENABLED_PRIVATE_ENDPOINT == networkDto.getServiceEndpointCreation())\n+                .withTags(networkTagProvider.getTags(environment));\n+                getResourceGroupName(environment).ifPresent(builder::withResourceGroup);\n+        return builder.build();\n+    }\n+\n+    private boolean getExistingNetwork(BaseNetwork baseNetwork) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjExNTQyOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/NetworkCreationRequestFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToyMjozNlrOHgh1ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0MDoxOFrOHgnTKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3MDkxNQ==", "bodyText": "I don't like instanceof. You could solve this by adding the method to BaseNetwork which returns null and override it from AzureNetwork", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503870915", "createdAt": "2020-10-13T11:22:36Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/NetworkCreationRequestFactory.java", "diffHunk": "@@ -80,6 +107,10 @@ public String getStackName(EnvironmentDto environment) {\n         return String.join(\"-\", environment.getName(), String.valueOf(environment.getNetwork().getId()));\n     }\n \n+    private String getNetworkResourceGroupName(BaseNetwork baseNetwork) {\n+        return baseNetwork instanceof AzureNetwork ? ((AzureNetwork) baseNetwork).getResourceGroupName() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkyODQzMA==", "bodyText": "Yes, me neither, but the RG term does not make any sense for any other provider.", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503928430", "createdAt": "2020-10-13T12:57:57Z", "author": {"login": "pdarvasi"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/NetworkCreationRequestFactory.java", "diffHunk": "@@ -80,6 +107,10 @@ public String getStackName(EnvironmentDto environment) {\n         return String.join(\"-\", environment.getName(), String.valueOf(environment.getNetwork().getId()));\n     }\n \n+    private String getNetworkResourceGroupName(BaseNetwork baseNetwork) {\n+        return baseNetwork instanceof AzureNetwork ? ((AzureNetwork) baseNetwork).getResourceGroupName() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3MDkxNQ=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2MDM2Mg==", "bodyText": "In that case this should be solved similarly like NetworkDto <-> AzureNetwork conversion or other cloudplatform dependent stuff. maybe @doktoric can point to a more fitting example", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503960362", "createdAt": "2020-10-13T13:40:18Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/NetworkCreationRequestFactory.java", "diffHunk": "@@ -80,6 +107,10 @@ public String getStackName(EnvironmentDto environment) {\n         return String.join(\"-\", environment.getName(), String.valueOf(environment.getNetwork().getId()));\n     }\n \n+    private String getNetworkResourceGroupName(BaseNetwork baseNetwork) {\n+        return baseNetwork instanceof AzureNetwork ? ((AzureNetwork) baseNetwork).getResourceGroupName() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3MDkxNQ=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjEyMjU3OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/parameters/dao/converter/ResourceTypeConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToyNDo1NFrOHgh6SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoxMzoxNVrOHgl-qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3MjA3Mg==", "bodyText": "so this won't result in any unexpected result? why have you changed this and why to this one?", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503872072", "createdAt": "2020-10-13T11:24:54Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/parameters/dao/converter/ResourceTypeConverter.java", "diffHunk": "@@ -1,12 +1,12 @@\n package com.sequenceiq.environment.parameters.dao.converter;\n \n import com.sequenceiq.cloudbreak.converter.DefaultEnumConverter;\n-import com.sequenceiq.environment.resourcepersister.ResourceType;\n+import com.sequenceiq.common.api.type.ResourceType;\n \n public class ResourceTypeConverter extends DefaultEnumConverter<ResourceType> {\n \n     @Override\n     public ResourceType getDefault() {\n-        return ResourceType.AWS_INSTANCE;\n+        return ResourceType.AZURE_PRIVATE_DNS_ZONE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzODczMA==", "bodyText": "Because this is the only resource type stored in the environment service now.", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503938730", "createdAt": "2020-10-13T13:13:15Z", "author": {"login": "pdarvasi"}, "path": "environment/src/main/java/com/sequenceiq/environment/parameters/dao/converter/ResourceTypeConverter.java", "diffHunk": "@@ -1,12 +1,12 @@\n package com.sequenceiq.environment.parameters.dao.converter;\n \n import com.sequenceiq.cloudbreak.converter.DefaultEnumConverter;\n-import com.sequenceiq.environment.resourcepersister.ResourceType;\n+import com.sequenceiq.common.api.type.ResourceType;\n \n public class ResourceTypeConverter extends DefaultEnumConverter<ResourceType> {\n \n     @Override\n     public ResourceType getDefault() {\n-        return ResourceType.AWS_INSTANCE;\n+        return ResourceType.AZURE_PRIVATE_DNS_ZONE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3MjA3Mg=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjEzNjUwOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/resourcepersister/CloudResourceRetrieverService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToyODozNlrOHgiCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToyODozNlrOHgiCiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3NDE4NQ==", "bodyText": "could you use the exact converter instead of ConversionService here?", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503874185", "createdAt": "2020-10-13T11:28:36Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/resourcepersister/CloudResourceRetrieverService.java", "diffHunk": "@@ -12,8 +18,21 @@\n @Component\n public class CloudResourceRetrieverService implements ResourceRetriever {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(CloudResourceRetrieverService.class);\n+\n+    @Inject\n+    @Qualifier(\"conversionService\")\n+    private ConversionService conversionService;\n+\n+    @Inject\n+    private ResourceService resourceService;\n+\n     @Override\n     public Optional<CloudResource> findByResourceReferenceAndStatusAndType(String resourceReference, CommonStatus status, ResourceType resourceType) {\n-        return Optional.empty();\n+        Optional<Resource> optionalResource = resourceService.findByResourceReferenceAndStatusAndType(resourceReference, status, resourceType);\n+        LOGGER.debug(\"Resource retrieved by optionalResource reference: {}, status: {} and type: {}. Is present: {}\", resourceReference, status, resourceType,\n+                optionalResource.isPresent());\n+        return optionalResource\n+                .map(resource -> conversionService.convert(resource, CloudResource.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjE5MzkzOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/resourcepersister/Resource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTo0NDoyNlrOHgil4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTo0NDoyNlrOHgil4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4MzIzNQ==", "bodyText": "if you would name the column in your sql environment_id I think you could drop this line", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503883235", "createdAt": "2020-10-13T11:44:26Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/resourcepersister/Resource.java", "diffHunk": "@@ -1,30 +1,33 @@\n package com.sequenceiq.environment.resourcepersister;\n \n-import java.io.Serializable;\n-\n import javax.persistence.Column;\n import javax.persistence.Convert;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n import javax.persistence.SequenceGenerator;\n \n-import com.sequenceiq.cloudbreak.common.json.Json;\n-import com.sequenceiq.cloudbreak.common.json.JsonToString;\n import com.sequenceiq.cloudbreak.converter.CommonStatusConverter;\n import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+import com.sequenceiq.environment.environment.domain.Environment;\n import com.sequenceiq.environment.parameters.dao.converter.ResourceTypeConverter;\n \n @Entity\n-public class Resource implements Serializable {\n+public class Resource {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO, generator = \"resource_generator\")\n     @SequenceGenerator(name = \"resource_generator\", sequenceName = \"resource_id_seq\", allocationSize = 1)\n     private Long id;\n \n-    private String instanceGroup;\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"resource_environment\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjIwMzg0OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/resourcepersister/ResourceRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTo0NzoxNVrOHgir6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTo0NzoxNVrOHgir6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4NDc3Ng==", "bodyText": "Long would be more consistent", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503884776", "createdAt": "2020-10-13T11:47:15Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/resourcepersister/ResourceRepository.java", "diffHunk": "@@ -10,14 +10,24 @@\n import org.springframework.data.repository.CrudRepository;\n import org.springframework.data.repository.query.Param;\n \n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n @Transactional(TxType.REQUIRED)\n public interface ResourceRepository extends CrudRepository<Resource, Long> {\n \n-    @Query(\"SELECT r FROM Resource r WHERE r.crn = :crn AND r.resourceName = :name AND r.resourceType = :type\")\n-    Optional<Resource> findByStackIdAndNameAndType(@Param(\"crn\") String crnId, @Param(\"name\") String name,\n-            @Param(\"type\") com.sequenceiq.environment.resourcepersister.ResourceType type);\n+    @Query(\"SELECT r FROM Resource r WHERE r.environment.id = :environmentId AND r.resourceName = :name AND r.resourceType = :type\")\n+    Optional<Resource> findByEnvironmentIdAndNameAndType(@Param(\"environmentId\") Long environmentId, @Param(\"name\") String name,\n+            @Param(\"type\") com.sequenceiq.common.api.type.ResourceType type);\n+\n+    @Query(\"SELECT r FROM Resource r WHERE r.environment.id = :environmentId\")\n+    List<Resource> findAllByEnvironmentId(@Param(\"environmentId\") long environmentId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjIxNTczOnYy", "diffSide": "RIGHT", "path": "environment/src/main/resources/schema/app/20200930134106_CB-8867-Env_service_should_create_private_DNS_zone_privatelink.postgres.database.azure.com.sql", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTo1MDoyN1rOHgiy3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzozMzo0OFrOHhF7mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4NjU1Nw==", "bodyText": "as mentioned above I would name this environment_id and also I would add index to this field", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503886557", "createdAt": "2020-10-13T11:50:27Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/resources/schema/app/20200930134106_CB-8867-Env_service_should_create_private_DNS_zone_privatelink.postgres.database.azure.com.sql", "diffHunk": "@@ -0,0 +1,23 @@\n+-- // CB-8867-Env service should create private DNS zone privatelink.postgres.database.azure.com\n+-- Migration SQL that makes the change goes here.\n+CREATE SEQUENCE IF NOT EXISTS resource_id_seq START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;\n+\n+CREATE TABLE IF NOT EXISTS resource\n+(\n+   id                   bigserial NOT NULL ,\n+   resource_environment     bigserial NOT NULL CONSTRAINT fk_resource_resource_environment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0MDk0NA==", "bodyText": "Right now, we are not using env_id in any of our selects, I would put the index when it is actually useful.", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503940944", "createdAt": "2020-10-13T13:15:47Z", "author": {"login": "pdarvasi"}, "path": "environment/src/main/resources/schema/app/20200930134106_CB-8867-Env_service_should_create_private_DNS_zone_privatelink.postgres.database.azure.com.sql", "diffHunk": "@@ -0,0 +1,23 @@\n+-- // CB-8867-Env service should create private DNS zone privatelink.postgres.database.azure.com\n+-- Migration SQL that makes the change goes here.\n+CREATE SEQUENCE IF NOT EXISTS resource_id_seq START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;\n+\n+CREATE TABLE IF NOT EXISTS resource\n+(\n+   id                   bigserial NOT NULL ,\n+   resource_environment     bigserial NOT NULL CONSTRAINT fk_resource_resource_environment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4NjU1Nw=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0Njc1OQ==", "bodyText": "I found one method in the repository which has it. Also I'm afraid we will miss it when someone adds one, and notice it only when it's causing performance issues", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503946759", "createdAt": "2020-10-13T13:22:23Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/resources/schema/app/20200930134106_CB-8867-Env_service_should_create_private_DNS_zone_privatelink.postgres.database.azure.com.sql", "diffHunk": "@@ -0,0 +1,23 @@\n+-- // CB-8867-Env service should create private DNS zone privatelink.postgres.database.azure.com\n+-- Migration SQL that makes the change goes here.\n+CREATE SEQUENCE IF NOT EXISTS resource_id_seq START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;\n+\n+CREATE TABLE IF NOT EXISTS resource\n+(\n+   id                   bigserial NOT NULL ,\n+   resource_environment     bigserial NOT NULL CONSTRAINT fk_resource_resource_environment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4NjU1Nw=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2MjIzNA==", "bodyText": "It is not called yet, but I've created the index.", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r504462234", "createdAt": "2020-10-14T07:33:48Z", "author": {"login": "pdarvasi"}, "path": "environment/src/main/resources/schema/app/20200930134106_CB-8867-Env_service_should_create_private_DNS_zone_privatelink.postgres.database.azure.com.sql", "diffHunk": "@@ -0,0 +1,23 @@\n+-- // CB-8867-Env service should create private DNS zone privatelink.postgres.database.azure.com\n+-- Migration SQL that makes the change goes here.\n+CREATE SEQUENCE IF NOT EXISTS resource_id_seq START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;\n+\n+CREATE TABLE IF NOT EXISTS resource\n+(\n+   id                   bigserial NOT NULL ,\n+   resource_environment     bigserial NOT NULL CONSTRAINT fk_resource_resource_environment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4NjU1Nw=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDQ4MzA1OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1NDoxNVrOHhLVJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0Nzo0MlrOHhT9BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MDY5Mg==", "bodyText": "I don't think it's needed anymore", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r504550692", "createdAt": "2020-10-14T09:54:15Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_PRIVATE_DNS_ZONE;\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_VIRTUAL_NETWORK_LINK;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Inject\n+    private AzureUtils azureUtils;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void getOrCreateDnsZones(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = azureResourceIdProviderService.generateDeploymentId(azureClient.getCurrentSubscription().subscriptionId(),\n+                resourceGroup, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3ab0b4ef383c19cca3e6da6a28cf60d16a403e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MTk3Mw==", "bodyText": "It is needed to short-circuit the creation if it is not needed.", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r504691973", "createdAt": "2020-10-14T13:47:42Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_PRIVATE_DNS_ZONE;\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_VIRTUAL_NETWORK_LINK;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Inject\n+    private AzureUtils azureUtils;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void getOrCreateDnsZones(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = azureResourceIdProviderService.generateDeploymentId(azureClient.getCurrentSubscription().subscriptionId(),\n+                resourceGroup, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MDY5Mg=="}, "originalCommit": {"oid": "5c3ab0b4ef383c19cca3e6da6a28cf60d16a403e"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2139, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}