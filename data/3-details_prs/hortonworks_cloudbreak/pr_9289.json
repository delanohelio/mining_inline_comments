{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjEzNjcy", "number": 9289, "title": "CB-9313 - added Vault client side tracing", "bodyText": "Using this optional construct to avoid tracing of lonely vault spans.\nNot adding the usual tags from the MDC Context because it would be very very redundant and consume lot of memory unnecessarily.", "createdAt": "2020-10-26T18:07:04Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9289", "merged": true, "mergeCommit": {"oid": "8164a75a2043c2399d2c10f9face53b63ab4c7dd"}, "closed": true, "closedAt": "2020-10-27T12:28:53Z", "author": {"login": "attilapalfi92"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWl6LQAFqTUxNzUyMDM1Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWmOhAgFqTUxNzUzOTY0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTIwMzU2", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#pullrequestreview-517520356", "createdAt": "2020-10-27T09:53:35Z", "commit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1MzozNlrOHozoWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1MzozNlrOHozoWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MTAwMA==", "bodyText": "This may throw exception", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#discussion_r512551000", "createdAt": "2020-10-27T09:53:36Z", "author": {"login": "bbihari"}, "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "diffHunk": "@@ -31,13 +41,22 @@ public VaultRetryService(MetricService metricService) {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryReadingVault(Supplier<T> action) throws Retry.ActionFailedException {\n-        try {\n-            return action.get();\n-        } catch (RuntimeException e) {\n-            LOGGER.error(\"Exception during reading vault\", e);\n-            metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-            throw new Retry.ActionFailedException(e.getMessage());\n-        }\n+        Optional<Span> optionalSpan = initSpan(\"read\");\n+        return optionalSpan.map(span -> {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n+                try {\n+                    return action.get();\n+                } catch (RuntimeException e) {\n+                    LOGGER.error(\"Exception during reading vault\", e);\n+                    span.setTag(TracingUtil.ERROR, true);\n+                    span.setTag(TracingUtil.MESSAGE, e.getMessage());\n+                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n+                    throw new Retry.ActionFailedException(e.getMessage());\n+                }\n+            } finally {\n+                span.finish();\n+            }\n+        }).orElseGet(action::get);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTIxMTkw", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#pullrequestreview-517521190", "createdAt": "2020-10-27T09:54:28Z", "commit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1NDoyOVrOHozqyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1NDoyOVrOHozqyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MTYyNg==", "bodyText": "This can throw RuntimeException", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#discussion_r512551626", "createdAt": "2020-10-27T09:54:29Z", "author": {"login": "bbihari"}, "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "diffHunk": "@@ -48,12 +67,34 @@ public VaultRetryService(MetricService metricService) {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryWritingVault(Supplier<T> action) throws Retry.ActionFailedException {\n-        try {\n-            return action.get();\n-        } catch (RuntimeException e) {\n-            LOGGER.error(\"Exception during writing vault\", e);\n-            metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-            throw new Retry.ActionFailedException(e.getMessage());\n+\n+        Optional<Span> optionalSpan = initSpan(\"write\");\n+        return optionalSpan.map(span -> {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n+                try {\n+                    return action.get();\n+                } catch (RuntimeException e) {\n+                    LOGGER.error(\"Exception during writing vault\", e);\n+                    span.setTag(TracingUtil.ERROR, true);\n+                    span.setTag(TracingUtil.MESSAGE, e.getMessage());\n+                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n+                    throw new Retry.ActionFailedException(e.getMessage());\n+                }\n+            } finally {\n+                span.finish();\n+            }\n+        }).orElseGet(action::get);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTIzNDEw", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#pullrequestreview-517523410", "createdAt": "2020-10-27T09:56:58Z", "commit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1Njo1OVrOHozxeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1Njo1OVrOHozxeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MzMzNg==", "bodyText": "this function could be more compact with Optional.ofNullable(...).map(...)", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#discussion_r512553336", "createdAt": "2020-10-27T09:56:59Z", "author": {"login": "bbihari"}, "path": "secret-engine/src/main/java/com/sequenceiq/cloudbreak/service/secret/service/VaultRetryService.java", "diffHunk": "@@ -48,12 +67,34 @@ public VaultRetryService(MetricService metricService) {\n                     maxDelayExpression = \"${vault.retry.maxdelay:10000}\")\n     )\n     public <T> T tryWritingVault(Supplier<T> action) throws Retry.ActionFailedException {\n-        try {\n-            return action.get();\n-        } catch (RuntimeException e) {\n-            LOGGER.error(\"Exception during writing vault\", e);\n-            metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n-            throw new Retry.ActionFailedException(e.getMessage());\n+\n+        Optional<Span> optionalSpan = initSpan(\"write\");\n+        return optionalSpan.map(span -> {\n+            try (Scope ignored = tracer.activateSpan(span)) {\n+                try {\n+                    return action.get();\n+                } catch (RuntimeException e) {\n+                    LOGGER.error(\"Exception during writing vault\", e);\n+                    span.setTag(TracingUtil.ERROR, true);\n+                    span.setTag(TracingUtil.MESSAGE, e.getMessage());\n+                    metricService.incrementMetricCounter(MetricType.VAULT_READ_FAILED);\n+                    throw new Retry.ActionFailedException(e.getMessage());\n+                }\n+            } finally {\n+                span.finish();\n+            }\n+        }).orElseGet(action::get);\n+    }\n+\n+    private Optional<Span> initSpan(String operationType) {\n+        Span activeSpan = tracer.activeSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTI1MDgy", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#pullrequestreview-517525082", "createdAt": "2020-10-27T09:58:50Z", "commit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/81cdbc75b5da9b8e0a6691dad0080924ab3b5f5b", "committedDate": "2020-10-26T18:06:15Z", "message": "CB-9313 - added Vault client side tracing\nUsing this optional construct to avoid tracing of lonely vault spans.\nNot adding the usual tags from the MDC Context because it would be very very redundant and consume lot of memory unnecessarily."}, "afterCommit": {"oid": "c6109bf4d67cc7473f222c4f5138da824b40cf38", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c6109bf4d67cc7473f222c4f5138da824b40cf38", "committedDate": "2020-10-27T10:03:09Z", "message": "CB-9313 - added Vault client side tracing\nUsing this optional construct to avoid tracing of lonely vault spans.\nNot adding the usual tags from the MDC Context because it would be very very redundant and consume lot of memory unnecessarily."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f7491e66d43b77e1b447d86fd1eee94a72466b5", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4f7491e66d43b77e1b447d86fd1eee94a72466b5", "committedDate": "2020-10-27T10:09:57Z", "message": "CB-9313 - added Vault client side tracing\nUsing this optional construct to avoid tracing of lonely vault spans.\nNot adding the usual tags from the MDC Context because it would be very very redundant and consume lot of memory unnecessarily."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6109bf4d67cc7473f222c4f5138da824b40cf38", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c6109bf4d67cc7473f222c4f5138da824b40cf38", "committedDate": "2020-10-27T10:03:09Z", "message": "CB-9313 - added Vault client side tracing\nUsing this optional construct to avoid tracing of lonely vault spans.\nNot adding the usual tags from the MDC Context because it would be very very redundant and consume lot of memory unnecessarily."}, "afterCommit": {"oid": "4f7491e66d43b77e1b447d86fd1eee94a72466b5", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4f7491e66d43b77e1b447d86fd1eee94a72466b5", "committedDate": "2020-10-27T10:09:57Z", "message": "CB-9313 - added Vault client side tracing\nUsing this optional construct to avoid tracing of lonely vault spans.\nNot adding the usual tags from the MDC Context because it would be very very redundant and consume lot of memory unnecessarily."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTM5NjQ0", "url": "https://github.com/hortonworks/cloudbreak/pull/9289#pullrequestreview-517539644", "createdAt": "2020-10-27T10:15:49Z", "commit": {"oid": "4f7491e66d43b77e1b447d86fd1eee94a72466b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2063, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}