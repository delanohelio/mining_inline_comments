{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNTUzMjcx", "number": 8255, "reviewThreads": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowMDozOFrOEEpw2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNTo0MFrOEHmYzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzE0MDA5OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowMDozOFrOGiaGdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo0Njo0NFrOGieBmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczMjQwNA==", "bodyText": "is there a specific need for LinkedHashMap? (same question for the bean below as well)", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438732404", "createdAt": "2020-06-11T12:00:38Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -26,4 +39,19 @@ public int getPort() {\n     public boolean isConfigured() {\n         return !StringUtil.isNullOrEmpty(endpoint);\n     }\n+\n+    @Bean\n+    public Map<Class, EventDataUtilizer> eventDataUtilizers() {\n+        Map<Class, EventDataUtilizer> result = new LinkedHashMap<>(eventDataUtilizerImplementations.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MDcyMg==", "bodyText": "passing back. is there a specific reason against LinkedHashMap? \ud83d\ude42", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438790722", "createdAt": "2020-06-11T13:40:32Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -26,4 +39,19 @@ public int getPort() {\n     public boolean isConfigured() {\n         return !StringUtil.isNullOrEmpty(endpoint);\n     }\n+\n+    @Bean\n+    public Map<Class, EventDataUtilizer> eventDataUtilizers() {\n+        Map<Class, EventDataUtilizer> result = new LinkedHashMap<>(eventDataUtilizerImplementations.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczMjQwNA=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NjY5Ng==", "bodyText": "nice :D", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438796696", "createdAt": "2020-06-11T13:46:44Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -26,4 +39,19 @@ public int getPort() {\n     public boolean isConfigured() {\n         return !StringUtil.isNullOrEmpty(endpoint);\n     }\n+\n+    @Bean\n+    public Map<Class, EventDataUtilizer> eventDataUtilizers() {\n+        Map<Class, EventDataUtilizer> result = new LinkedHashMap<>(eventDataUtilizerImplementations.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczMjQwNA=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzE1NjIxOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/EventDataUtilizer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNjoxM1rOGiaQgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo1OToyN1rOGiev7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDk3Nw==", "bodyText": "Why \"D\" ? :)\nNaming: EventDataConverter (okay, it is not a traditional converter, but still)", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438734977", "createdAt": "2020-06-11T12:06:13Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/EventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+\n+public interface EventDataUtilizer<D extends EventData> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MTQ0Mw==", "bodyText": "D was for Data in my mind", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438791443", "createdAt": "2020-06-11T13:41:17Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/EventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+\n+public interface EventDataUtilizer<D extends EventData> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDk3Nw=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwMDk3Ng==", "bodyText": "Traditionally the type parameter is T\u00a0U V W", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438800976", "createdAt": "2020-06-11T13:51:29Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/EventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+\n+public interface EventDataUtilizer<D extends EventData> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDk3Nw=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwODU1OQ==", "bodyText": "Then I'll change it to T", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438808559", "createdAt": "2020-06-11T13:59:27Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/EventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+\n+public interface EventDataUtilizer<D extends EventData> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDk3Nw=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzE1NzQ1OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/EventDataUtilizer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNjozOFrOGiaRSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjoyMzowMFrOGkMzzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTE3Ng==", "bodyText": "modifyAuditEventBuilderWithEventData  -> convertInBuilder", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438735176", "createdAt": "2020-06-11T12:06:38Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/EventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+\n+public interface EventDataUtilizer<D extends EventData> {\n+\n+    void modifyAuditEventBuilderWithEventData(AuditProto.AuditEvent.Builder auditEventBuilder, D source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MjI0OQ==", "bodyText": "there is no conversion inside the method hence your choice of name would be misleading in my opinion", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438792249", "createdAt": "2020-06-11T13:42:10Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/EventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+\n+public interface EventDataUtilizer<D extends EventData> {\n+\n+    void modifyAuditEventBuilderWithEventData(AuditProto.AuditEvent.Builder auditEventBuilder, D source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTE3Ng=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNDM2Nw==", "bodyText": "AuditEventDataUpdater ?\nand modifyAuditEventBuilderWithEventData -> updateBuilder ?\nthoughts?", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438804367", "createdAt": "2020-06-11T13:54:56Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/EventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+\n+public interface EventDataUtilizer<D extends EventData> {\n+\n+    void modifyAuditEventBuilderWithEventData(AuditProto.AuditEvent.Builder auditEventBuilder, D source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTE3Ng=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxMTY0NA==", "bodyText": "It's not updating any audit event data but the builder instead.\nMaybe AuditEventBuilderUpdater..? still kinda strange", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438811644", "createdAt": "2020-06-11T14:03:58Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/EventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+\n+public interface EventDataUtilizer<D extends EventData> {\n+\n+    void modifyAuditEventBuilderWithEventData(AuditProto.AuditEvent.Builder auditEventBuilder, D source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTE3Ng=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxMTc5MQ==", "bodyText": "class and method renamed", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440611791", "createdAt": "2020-06-16T06:23:00Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/EventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+\n+public interface EventDataUtilizer<D extends EventData> {\n+\n+    void modifyAuditEventBuilderWithEventData(AuditProto.AuditEvent.Builder auditEventBuilder, D source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTE3Ng=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzM1NzM5OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowNzo0NVrOGicPpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDowMTo0NlrOGie2gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NzUyNw==", "bodyText": "after renaming the template class, the field name would be like eventDataConverters", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438767527", "createdAt": "2020-06-11T13:07:45Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -15,6 +22,12 @@\n     @Value(\"${altus.audit.port:8989}\")\n     private int port;\n \n+    @Inject\n+    private List<EventDataUtilizer> eventDataUtilizerImplementations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MzE4MA==", "bodyText": "still, no conversion happens there", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438793180", "createdAt": "2020-06-11T13:43:04Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -15,6 +22,12 @@\n     @Value(\"${altus.audit.port:8989}\")\n     private int port;\n \n+    @Inject\n+    private List<EventDataUtilizer> eventDataUtilizerImplementations;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NzUyNw=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxMDI0Mw==", "bodyText": "AuditEventDataUpdaters ? as suggested above. Thoughts?", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438810243", "createdAt": "2020-06-11T14:01:46Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -15,6 +22,12 @@\n     @Value(\"${altus.audit.port:8989}\")\n     private int port;\n \n+    @Inject\n+    private List<EventDataUtilizer> eventDataUtilizerImplementations;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NzUyNw=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzM1ODM2OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowODowMFrOGicQRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowODowMFrOGicQRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NzY4Ng==", "bodyText": "after renaming the template class, the field name would be like resultEventDataConverters", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438767686", "createdAt": "2020-06-11T13:08:00Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -15,6 +22,12 @@\n     @Value(\"${altus.audit.port:8989}\")\n     private int port;\n \n+    @Inject\n+    private List<EventDataUtilizer> eventDataUtilizerImplementations;\n+\n+    @Inject\n+    private List<AuditEventDataUtilizer> auditEventDataUtilizerImplementations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzM1OTgyOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowODoyNlrOGicRKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo1NjowMVrOGiej5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NzkxNA==", "bodyText": "utilizer -> converter", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438767914", "createdAt": "2020-06-11T13:08:26Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -26,4 +39,19 @@ public int getPort() {\n     public boolean isConfigured() {\n         return !StringUtil.isNullOrEmpty(endpoint);\n     }\n+\n+    @Bean\n+    public Map<Class, EventDataUtilizer> eventDataUtilizers() {\n+        Map<Class, EventDataUtilizer> result = new LinkedHashMap<>(eventDataUtilizerImplementations.size());\n+        eventDataUtilizerImplementations.forEach(utilizer -> result.put(utilizer.getType(), utilizer));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNTQ3Ng==", "bodyText": "still no conversion happens", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438805476", "createdAt": "2020-06-11T13:56:01Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -26,4 +39,19 @@ public int getPort() {\n     public boolean isConfigured() {\n         return !StringUtil.isNullOrEmpty(endpoint);\n     }\n+\n+    @Bean\n+    public Map<Class, EventDataUtilizer> eventDataUtilizers() {\n+        Map<Class, EventDataUtilizer> result = new LinkedHashMap<>(eventDataUtilizerImplementations.size());\n+        eventDataUtilizerImplementations.forEach(utilizer -> result.put(utilizer.getType(), utilizer));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NzkxNA=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzM3NzgyOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventDataUtilizer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoxMzoxMlrOGicctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjoyMjowN1rOGkMymg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3MDg3MA==", "bodyText": "why \"D\"?\nNaming: ResultEventDataConverter (okay, it is not a traditional converter, but still)", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438770870", "createdAt": "2020-06-11T13:13:12Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n+\n+public interface AuditEventDataUtilizer<D extends ResultEventData> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwMjUyMQ==", "bodyText": "ResultEventDataUpdater then?", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438802521", "createdAt": "2020-06-11T13:53:01Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n+\n+public interface AuditEventDataUtilizer<D extends ResultEventData> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3MDg3MA=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxMTQ4Mg==", "bodyText": "it's not updating the ResultEventData but the builder class of the ResultEventData class, hence this choice of name is as straightforward as possible even if it's a little bit longer than it should be", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440611482", "createdAt": "2020-06-16T06:22:07Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n+\n+public interface AuditEventDataUtilizer<D extends ResultEventData> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3MDg3MA=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzM3OTIzOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventDataUtilizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoxMzoyOVrOGicddg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDowNDo1MFrOGie96g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3MTA2Mg==", "bodyText": "modifyAuditEventBuilderWithEventData -> convertInBuilder\nauditEventBuilder -> attemptAuditEventResultBuilder (too long, I know. or just builder)", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438771062", "createdAt": "2020-06-11T13:13:29Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n+\n+public interface AuditEventDataUtilizer<D extends ResultEventData> {\n+\n+    void modifyAuditEventBuilderWithEventData(AuditProto.AttemptAuditEventResult.Builder auditEventBuilder, D source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxMjEzOA==", "bodyText": "builder will be fine", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438812138", "createdAt": "2020-06-11T14:04:50Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n+\n+public interface AuditEventDataUtilizer<D extends ResultEventData> {\n+\n+    void modifyAuditEventBuilderWithEventData(AuditProto.AttemptAuditEventResult.Builder auditEventBuilder, D source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3MTA2Mg=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzM5OTA5OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoxODo1MlrOGicqEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo0NzowOFrOGieCxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NDI5MQ==", "bodyText": "Is this logging needed? If you insist on this logging, please move it to the Bean definition method in the Configuration class.", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438774291", "createdAt": "2020-06-11T13:18:52Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "diffHunk": "@@ -1,25 +1,49 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n-\n-import java.util.Optional;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n import com.sequenceiq.cloudbreak.audit.model.ActorBase;\n import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n import com.sequenceiq.cloudbreak.audit.model.ActorService;\n-import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n import com.sequenceiq.cloudbreak.audit.model.EventData;\n-import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import com.sequenceiq.cloudbreak.util.NullUtil;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n \n @Component\n public class AuditEventToGrpcAuditEventConverter {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditEventToGrpcAuditEventConverter.class);\n+\n+    private final Map<Class, EventDataUtilizer> eventDataUtilizer;\n+\n+    public AuditEventToGrpcAuditEventConverter(Map<Class, EventDataUtilizer> eventDataUtilizer) {\n+        if (MapUtils.isNotEmpty(eventDataUtilizer)) {\n+            List<String> utilizers = new LinkedList<>();\n+            eventDataUtilizer.forEach((type, utilizer) -> utilizers.add(String.format(\"[%s :: %s]\",\n+                    NullUtil.getIfNotNull(type, t -> t.getSimpleName()),\n+                    NullUtil.getIfNotNull(utilizer, u -> u.getClass().getSimpleName()))));\n+            String utilizerListMessage = String.join(\",\", utilizers);\n+            LOGGER.debug(\"The \" + AuditEventToGrpcAuditEventConverter.class.getSimpleName() + \" has got the following \"\n+                    + EventDataUtilizer.class.getSimpleName() + \" implementations: {}\", utilizerListMessage);\n+        } else {\n+            LOGGER.debug(\"The \" + AuditEventToGrpcAuditEventConverter.class.getSimpleName() + \" has not got any \"\n+                    + EventDataUtilizer.class.getSimpleName() + \" implementation!\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5Njk5Nw==", "bodyText": "logging is almost always welcomed in my opinion, but yes, this may be moved to the config class", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438796997", "createdAt": "2020-06-11T13:47:08Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "diffHunk": "@@ -1,25 +1,49 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n-\n-import java.util.Optional;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n import com.sequenceiq.cloudbreak.audit.model.ActorBase;\n import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n import com.sequenceiq.cloudbreak.audit.model.ActorService;\n-import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n import com.sequenceiq.cloudbreak.audit.model.EventData;\n-import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import com.sequenceiq.cloudbreak.util.NullUtil;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n \n @Component\n public class AuditEventToGrpcAuditEventConverter {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditEventToGrpcAuditEventConverter.class);\n+\n+    private final Map<Class, EventDataUtilizer> eventDataUtilizer;\n+\n+    public AuditEventToGrpcAuditEventConverter(Map<Class, EventDataUtilizer> eventDataUtilizer) {\n+        if (MapUtils.isNotEmpty(eventDataUtilizer)) {\n+            List<String> utilizers = new LinkedList<>();\n+            eventDataUtilizer.forEach((type, utilizer) -> utilizers.add(String.format(\"[%s :: %s]\",\n+                    NullUtil.getIfNotNull(type, t -> t.getSimpleName()),\n+                    NullUtil.getIfNotNull(utilizer, u -> u.getClass().getSimpleName()))));\n+            String utilizerListMessage = String.join(\",\", utilizers);\n+            LOGGER.debug(\"The \" + AuditEventToGrpcAuditEventConverter.class.getSimpleName() + \" has got the following \"\n+                    + EventDataUtilizer.class.getSimpleName() + \" implementations: {}\", utilizerListMessage);\n+        } else {\n+            LOGGER.debug(\"The \" + AuditEventToGrpcAuditEventConverter.class.getSimpleName() + \" has not got any \"\n+                    + EventDataUtilizer.class.getSimpleName() + \" implementation!\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NDI5MQ=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQwNDM2OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoyMDoyMVrOGictdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDowMzozMlrOGie69w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NTE1OA==", "bodyText": "you could completely go functional and throw out the utilizers list. just map the k:v to output and use Collectors.joining", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438775158", "createdAt": "2020-06-11T13:20:21Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "diffHunk": "@@ -1,25 +1,49 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n-\n-import java.util.Optional;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n import com.sequenceiq.cloudbreak.audit.model.ActorBase;\n import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n import com.sequenceiq.cloudbreak.audit.model.ActorService;\n-import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n import com.sequenceiq.cloudbreak.audit.model.EventData;\n-import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import com.sequenceiq.cloudbreak.util.NullUtil;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n \n @Component\n public class AuditEventToGrpcAuditEventConverter {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditEventToGrpcAuditEventConverter.class);\n+\n+    private final Map<Class, EventDataUtilizer> eventDataUtilizer;\n+\n+    public AuditEventToGrpcAuditEventConverter(Map<Class, EventDataUtilizer> eventDataUtilizer) {\n+        if (MapUtils.isNotEmpty(eventDataUtilizer)) {\n+            List<String> utilizers = new LinkedList<>();\n+            eventDataUtilizer.forEach((type, utilizer) -> utilizers.add(String.format(\"[%s :: %s]\",\n+                    NullUtil.getIfNotNull(type, t -> t.getSimpleName()),\n+                    NullUtil.getIfNotNull(utilizer, u -> u.getClass().getSimpleName()))));\n+            String utilizerListMessage = String.join(\",\", utilizers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwMTUyOQ==", "bodyText": "I wouldn't go full functional just because it wouldn't add that much readability for me at least", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438801529", "createdAt": "2020-06-11T13:52:05Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "diffHunk": "@@ -1,25 +1,49 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n-\n-import java.util.Optional;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n import com.sequenceiq.cloudbreak.audit.model.ActorBase;\n import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n import com.sequenceiq.cloudbreak.audit.model.ActorService;\n-import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n import com.sequenceiq.cloudbreak.audit.model.EventData;\n-import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import com.sequenceiq.cloudbreak.util.NullUtil;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n \n @Component\n public class AuditEventToGrpcAuditEventConverter {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditEventToGrpcAuditEventConverter.class);\n+\n+    private final Map<Class, EventDataUtilizer> eventDataUtilizer;\n+\n+    public AuditEventToGrpcAuditEventConverter(Map<Class, EventDataUtilizer> eventDataUtilizer) {\n+        if (MapUtils.isNotEmpty(eventDataUtilizer)) {\n+            List<String> utilizers = new LinkedList<>();\n+            eventDataUtilizer.forEach((type, utilizer) -> utilizers.add(String.format(\"[%s :: %s]\",\n+                    NullUtil.getIfNotNull(type, t -> t.getSimpleName()),\n+                    NullUtil.getIfNotNull(utilizer, u -> u.getClass().getSimpleName()))));\n+            String utilizerListMessage = String.join(\",\", utilizers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NTE1OA=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxMTAxMg==", "bodyText": "well :D", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438811012", "createdAt": "2020-06-11T14:02:55Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "diffHunk": "@@ -1,25 +1,49 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n-\n-import java.util.Optional;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n import com.sequenceiq.cloudbreak.audit.model.ActorBase;\n import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n import com.sequenceiq.cloudbreak.audit.model.ActorService;\n-import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n import com.sequenceiq.cloudbreak.audit.model.EventData;\n-import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import com.sequenceiq.cloudbreak.util.NullUtil;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n \n @Component\n public class AuditEventToGrpcAuditEventConverter {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditEventToGrpcAuditEventConverter.class);\n+\n+    private final Map<Class, EventDataUtilizer> eventDataUtilizer;\n+\n+    public AuditEventToGrpcAuditEventConverter(Map<Class, EventDataUtilizer> eventDataUtilizer) {\n+        if (MapUtils.isNotEmpty(eventDataUtilizer)) {\n+            List<String> utilizers = new LinkedList<>();\n+            eventDataUtilizer.forEach((type, utilizer) -> utilizers.add(String.format(\"[%s :: %s]\",\n+                    NullUtil.getIfNotNull(type, t -> t.getSimpleName()),\n+                    NullUtil.getIfNotNull(utilizer, u -> u.getClass().getSimpleName()))));\n+            String utilizerListMessage = String.join(\",\", utilizers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NTE1OA=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxMTM4Mw==", "bodyText": "just do it, it will be beautiful. trust me ;)", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438811383", "createdAt": "2020-06-11T14:03:32Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "diffHunk": "@@ -1,25 +1,49 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n-\n-import java.util.Optional;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n import com.sequenceiq.cloudbreak.audit.model.ActorBase;\n import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n import com.sequenceiq.cloudbreak.audit.model.ActorService;\n-import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n import com.sequenceiq.cloudbreak.audit.model.EventData;\n-import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import com.sequenceiq.cloudbreak.util.NullUtil;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n \n @Component\n public class AuditEventToGrpcAuditEventConverter {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditEventToGrpcAuditEventConverter.class);\n+\n+    private final Map<Class, EventDataUtilizer> eventDataUtilizer;\n+\n+    public AuditEventToGrpcAuditEventConverter(Map<Class, EventDataUtilizer> eventDataUtilizer) {\n+        if (MapUtils.isNotEmpty(eventDataUtilizer)) {\n+            List<String> utilizers = new LinkedList<>();\n+            eventDataUtilizer.forEach((type, utilizer) -> utilizers.add(String.format(\"[%s :: %s]\",\n+                    NullUtil.getIfNotNull(type, t -> t.getSimpleName()),\n+                    NullUtil.getIfNotNull(utilizer, u -> u.getClass().getSimpleName()))));\n+            String utilizerListMessage = String.join(\",\", utilizers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NTE1OA=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQwNTk0OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoyMDo0NlrOGicubg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoyMDo0NlrOGicubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NTQwNg==", "bodyText": "Is this logging needed? If you insist on this logging, please move it to the Bean definition method in the Configuration class.", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438775406", "createdAt": "2020-06-11T13:20:46Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.java", "diffHunk": "@@ -1,22 +1,47 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n import com.sequenceiq.cloudbreak.audit.model.AttemptAuditEventResult;\n-import com.sequenceiq.cloudbreak.audit.model.ResultApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n-import com.sequenceiq.cloudbreak.audit.model.ResultServiceEventData;\n+import com.sequenceiq.cloudbreak.util.NullUtil;\n+import org.apache.commons.collections.MapUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n \n @Component\n public class AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.class);\n+\n+    private final Map<Class, AuditEventDataUtilizer> auditEventDataUtilizers;\n+\n+    public AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(Map<Class, AuditEventDataUtilizer> auditEventDataUtilizers) {\n+        if (MapUtils.isNotEmpty(auditEventDataUtilizers)) {\n+            List<String> utilizers = new LinkedList<>();\n+            auditEventDataUtilizers.forEach((type, utilizer) -> utilizers.add(String.format(\"[%s :: %s]\",\n+                    NullUtil.getIfNotNull(type, t -> t.getSimpleName()),\n+                    NullUtil.getIfNotNull(utilizer, u -> u.getClass().getSimpleName()))));\n+            String utilizerListMessage = String.join(\",\", utilizers);\n+            LOGGER.debug(\"The \" + AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.class.getSimpleName() + \" has got the following \"\n+                    + AuditEventDataUtilizer.class.getSimpleName() + \" implementations: {}\", utilizerListMessage);\n+        } else {\n+            LOGGER.debug(\"The \" + AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.class.getSimpleName() + \" has not got any \"\n+                    + AuditEventDataUtilizer.class.getSimpleName() + \" implementation!\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQ0MjU4OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ResultApiRequestDataUtilizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMDoxN1rOGidFuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMDoxN1rOGidFuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MTM2OA==", "bodyText": "please rename consistently with interface name", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438781368", "createdAt": "2020-06-11T13:30:17Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ResultApiRequestDataUtilizer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultApiRequestData;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+\n+@Component\n+public class ResultApiRequestDataUtilizer implements AuditEventDataUtilizer<ResultApiRequestData> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQ0MzE1OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ResultServiceEventDataUtilizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMDoyNlrOGidGFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMDoyNlrOGidGFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MTQ2Mg==", "bodyText": "please rename consistently with interface name", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438781462", "createdAt": "2020-06-11T13:30:26Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ResultServiceEventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultServiceEventData;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+\n+@Component\n+public class ResultServiceEventDataUtilizer implements AuditEventDataUtilizer<ResultServiceEventData> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQ0NTMyOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ServiceEventDataUtilizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMDo1OFrOGidHdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMDo1OFrOGidHdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MTgxMw==", "bodyText": "please rename consistently with base class", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438781813", "createdAt": "2020-06-11T13:30:58Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ServiceEventDataUtilizer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+\n+@Component\n+public class ServiceEventDataUtilizer implements EventDataUtilizer<ServiceEventData> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQ1MzI3OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMjoyNFrOGidMPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo1NDo0OFrOGiefJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MzAzOQ==", "bodyText": "times(0) -> never() (although its just cosmetics)", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438783039", "createdAt": "2020-06-11T13:32:24Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverterTest.java", "diffHunk": "@@ -49,7 +63,18 @@ void testPreventPossibleNullValuesServiceApiRequestResult() {\n                 .withResourceCrns(CRNS)\n                 .build();\n         AttemptAuditEventResult source = makeMinimalAttemptAuditEventResult(resultServiceEventData);\n+        underTest = new AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(createMockUtilizer(ResultServiceEventData.class));\n+\n         underTest.convert(source);\n+        verify(mockAuditEventDataUtilizer, times(1)).modifyAuditEventBuilderWithEventData(any(), any());\n+    }\n+\n+    @Test\n+    void testWhenResultEventDataIsNullThenNoUtilizerCallHappens() {\n+        AttemptAuditEventResult source = makeMinimalAttemptAuditEventResult(null);\n+\n+        underTest.convert(source);\n+        verify(mockAuditEventDataUtilizer, times(0)).modifyAuditEventBuilderWithEventData(any(), any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNDI2MA==", "bodyText": "oh, this never() stuff is new to me, thanks!", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438804260", "createdAt": "2020-06-11T13:54:48Z", "author": {"login": "gregito"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverterTest.java", "diffHunk": "@@ -49,7 +63,18 @@ void testPreventPossibleNullValuesServiceApiRequestResult() {\n                 .withResourceCrns(CRNS)\n                 .build();\n         AttemptAuditEventResult source = makeMinimalAttemptAuditEventResult(resultServiceEventData);\n+        underTest = new AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(createMockUtilizer(ResultServiceEventData.class));\n+\n         underTest.convert(source);\n+        verify(mockAuditEventDataUtilizer, times(1)).modifyAuditEventBuilderWithEventData(any(), any());\n+    }\n+\n+    @Test\n+    void testWhenResultEventDataIsNullThenNoUtilizerCallHappens() {\n+        AttemptAuditEventResult source = makeMinimalAttemptAuditEventResult(null);\n+\n+        underTest.convert(source);\n+        verify(mockAuditEventDataUtilizer, times(0)).modifyAuditEventBuilderWithEventData(any(), any());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MzAzOQ=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQ2MTg3OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMzo0N1rOGidRdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMzo0N1rOGidRdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4NDM3Mw==", "bodyText": "I prefer declarative @Mock but it's up to your taste.", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438784373", "createdAt": "2020-06-11T13:33:47Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverterTest.java", "diffHunk": "@@ -35,7 +41,15 @@\n \n     private static final String RESPONSE_PARAMETERS = \"responseParameters\";\n \n-    private final AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter underTest = new AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter();\n+    private AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter underTest;\n+\n+    private AuditEventDataUtilizer mockAuditEventDataUtilizer;\n+\n+    @BeforeEach\n+    void setUp() {\n+        underTest = new AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(new LinkedHashMap<>());\n+        mockAuditEventDataUtilizer = mock(AuditEventDataUtilizer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQ4MzU1OnYy", "diffSide": "LEFT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozNzoyMlrOGidezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo0Mzo0OVrOGid26w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4Nzc4OQ==", "bodyText": "I miss these tests in for the recently refactored converter classes", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438787789", "createdAt": "2020-06-11T13:37:22Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverterTest.java", "diffHunk": "@@ -115,13 +139,20 @@ void convertWithApiRequestData() {\n                 .build();\n         AuditEvent source = makeAuditEvent(actor, eventData);\n \n+        underTest = new AuditEventToGrpcAuditEventConverter(createMockUtilizer(ApiRequestData.class));\n+\n         AuditProto.AuditEvent target = underTest.convert(source);\n         assertGeneric(target);\n-        assertThat(target.getEventTypeCase()).isEqualTo(AuditProto.AuditEvent.EventTypeCase.APIREQUESTDATA);\n-        assertThat(target.getApiRequestData().getApiVersion()).isEqualTo(API_VERSION);\n-        assertThat(target.getApiRequestData().getMutating()).isEqualTo(MUTATING);\n-        assertThat(target.getApiRequestData().getRequestParameters()).isEqualTo(REQUEST_PARAMETERS);\n-        assertThat(target.getApiRequestData().getUserAgent()).isEqualTo(USER_AGENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5Mzk2Mw==", "bodyText": "you're right, I'll make them reappear in new test cases. same goes for the other requests as well", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438793963", "createdAt": "2020-06-11T13:43:49Z", "author": {"login": "gregito"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverterTest.java", "diffHunk": "@@ -115,13 +139,20 @@ void convertWithApiRequestData() {\n                 .build();\n         AuditEvent source = makeAuditEvent(actor, eventData);\n \n+        underTest = new AuditEventToGrpcAuditEventConverter(createMockUtilizer(ApiRequestData.class));\n+\n         AuditProto.AuditEvent target = underTest.convert(source);\n         assertGeneric(target);\n-        assertThat(target.getEventTypeCase()).isEqualTo(AuditProto.AuditEvent.EventTypeCase.APIREQUESTDATA);\n-        assertThat(target.getApiRequestData().getApiVersion()).isEqualTo(API_VERSION);\n-        assertThat(target.getApiRequestData().getMutating()).isEqualTo(MUTATING);\n-        assertThat(target.getApiRequestData().getRequestParameters()).isEqualTo(REQUEST_PARAMETERS);\n-        assertThat(target.getApiRequestData().getUserAgent()).isEqualTo(USER_AGENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4Nzc4OQ=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQ4NjQwOnYy", "diffSide": "LEFT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozNzo1M1rOGidgjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozNzo1M1rOGidgjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4ODIzNg==", "bodyText": "miss these tests in for the recently refactored converter classes", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438788236", "createdAt": "2020-06-11T13:37:53Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverterTest.java", "diffHunk": "@@ -97,11 +121,11 @@ void convertWithServiceEventData() {\n                 .build();\n         AuditEvent source = makeAuditEvent(actor, eventData);\n \n+        underTest = new AuditEventToGrpcAuditEventConverter(createMockUtilizer(ServiceEventData.class));\n+\n         AuditProto.AuditEvent target = underTest.convert(source);\n         assertGeneric(target);\n-        assertThat(target.getEventTypeCase()).isEqualTo(AuditProto.AuditEvent.EventTypeCase.SERVICEEVENTDATA);\n-        assertThat(target.getServiceEventData().getDetailsVersion()).isEqualTo(SERVICE_EVENT_VERSION);\n-        assertThat(target.getServiceEventData().getEventDetails()).isEqualTo(SERVICE_EVENT_DETAILS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQ4ODEyOnYy", "diffSide": "LEFT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozODowOVrOGidhmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoxMTo0NVrOGjluaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4ODUwNw==", "bodyText": "I miss these tests in for the recently refactored converter classes", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438788507", "createdAt": "2020-06-11T13:38:09Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverterTest.java", "diffHunk": "@@ -68,22 +93,22 @@ void convertWithResultServiceEventData() {\n                 .withResultDetails(RESULT_DETAILS)\n                 .build();\n         AttemptAuditEventResult source = makeAttemptAuditEventResult(rsed);\n+        underTest = new AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(createMockUtilizer(ResultServiceEventData.class));\n \n         AuditProto.AttemptAuditEventResult target = underTest.convert(source);\n         assertGeneric(target);\n-        assertThat(target.getEventTypeCase()).isEqualTo(AuditProto.AttemptAuditEventResult.EventTypeCase.RESULTSERVICEEVENTDATA);\n-        assertThat(target.getResultServiceEventData().getResourceCrnList()).hasSameElementsAs(CRNS);\n-        assertThat(target.getResultServiceEventData().getResultDetails()).isEqualTo(RESULT_DETAILS);\n+        verify(mockAuditEventDataUtilizer, times(1)).modifyAuditEventBuilderWithEventData(any(), any());\n     }\n \n     @Test\n     void convertWithResultApiRequestData() {\n         ResultApiRequestData rsed = ResultApiRequestData.builder().withResponseParameters(RESPONSE_PARAMETERS).build();\n         AttemptAuditEventResult source = makeAttemptAuditEventResult(rsed);\n+        underTest = new AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(createMockUtilizer(ResultApiRequestData.class));\n \n         AuditProto.AttemptAuditEventResult target = underTest.convert(source);\n         assertGeneric(target);\n-        assertThat(target.getEventTypeCase()).isEqualTo(AuditProto.AttemptAuditEventResult.EventTypeCase.RESULTAPIREQUESTDATA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3MTQzMw==", "bodyText": "because the mock does the actual data manipulation this test case line is not relevant anymore", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r439971433", "createdAt": "2020-06-15T07:11:45Z", "author": {"login": "gregito"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverterTest.java", "diffHunk": "@@ -68,22 +93,22 @@ void convertWithResultServiceEventData() {\n                 .withResultDetails(RESULT_DETAILS)\n                 .build();\n         AttemptAuditEventResult source = makeAttemptAuditEventResult(rsed);\n+        underTest = new AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(createMockUtilizer(ResultServiceEventData.class));\n \n         AuditProto.AttemptAuditEventResult target = underTest.convert(source);\n         assertGeneric(target);\n-        assertThat(target.getEventTypeCase()).isEqualTo(AuditProto.AttemptAuditEventResult.EventTypeCase.RESULTSERVICEEVENTDATA);\n-        assertThat(target.getResultServiceEventData().getResourceCrnList()).hasSameElementsAs(CRNS);\n-        assertThat(target.getResultServiceEventData().getResultDetails()).isEqualTo(RESULT_DETAILS);\n+        verify(mockAuditEventDataUtilizer, times(1)).modifyAuditEventBuilderWithEventData(any(), any());\n     }\n \n     @Test\n     void convertWithResultApiRequestData() {\n         ResultApiRequestData rsed = ResultApiRequestData.builder().withResponseParameters(RESPONSE_PARAMETERS).build();\n         AttemptAuditEventResult source = makeAttemptAuditEventResult(rsed);\n+        underTest = new AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(createMockUtilizer(ResultApiRequestData.class));\n \n         AuditProto.AttemptAuditEventResult target = underTest.convert(source);\n         assertGeneric(target);\n-        assertThat(target.getEventTypeCase()).isEqualTo(AuditProto.AttemptAuditEventResult.EventTypeCase.RESULTAPIREQUESTDATA);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4ODUwNw=="}, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQ4OTk2OnYy", "diffSide": "LEFT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozODoyOVrOGidipw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozODoyOVrOGidipw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4ODc3NQ==", "bodyText": "I miss these tests in for the recently refactored converter classes", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r438788775", "createdAt": "2020-06-11T13:38:29Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverterTest.java", "diffHunk": "@@ -68,22 +93,22 @@ void convertWithResultServiceEventData() {\n                 .withResultDetails(RESULT_DETAILS)\n                 .build();\n         AttemptAuditEventResult source = makeAttemptAuditEventResult(rsed);\n+        underTest = new AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(createMockUtilizer(ResultServiceEventData.class));\n \n         AuditProto.AttemptAuditEventResult target = underTest.convert(source);\n         assertGeneric(target);\n-        assertThat(target.getEventTypeCase()).isEqualTo(AuditProto.AttemptAuditEventResult.EventTypeCase.RESULTSERVICEEVENTDATA);\n-        assertThat(target.getResultServiceEventData().getResourceCrnList()).hasSameElementsAs(CRNS);\n-        assertThat(target.getResultServiceEventData().getResultDetails()).isEqualTo(RESULT_DETAILS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2bac5c66993a862f101bf9bd08791392c3bbbf"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM0NDEwOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxMzozMVrOGjxkrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxMzozMVrOGjxkrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NTU1MQ==", "bodyText": "auditEventBuilderUpdaters", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440165551", "createdAt": "2020-06-15T13:13:31Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -1,20 +1,40 @@\n package com.sequenceiq.cloudbreak.audit.config;\n \n \n+import com.sequenceiq.cloudbreak.audit.converter.AttemptAuditEventResultBuilderUpdater;\n+import com.sequenceiq.cloudbreak.audit.converter.AuditEventBuilderUpdater;\n+import com.sequenceiq.cloudbreak.util.NullUtil;\n+import io.netty.util.internal.StringUtil;\n+import org.apache.commons.collections.MapUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-import io.netty.util.internal.StringUtil;\n+import javax.inject.Inject;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n @Configuration\n public class AuditConfig {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditConfig.class);\n+\n     @Value(\"${altus.audit.host:}\")\n     private String endpoint;\n \n     @Value(\"${altus.audit.port:8989}\")\n     private int port;\n \n+    @Inject\n+    private List<AuditEventBuilderUpdater> auditEventBuilderUpdaterImplementations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM0NTU0OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxMzo1OFrOGjxlrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxMzo1OFrOGjxlrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NTgwNg==", "bodyText": "attemptAuditEventResultBuilderUpdaters\nstill long enough", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440165806", "createdAt": "2020-06-15T13:13:58Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -1,20 +1,40 @@\n package com.sequenceiq.cloudbreak.audit.config;\n \n \n+import com.sequenceiq.cloudbreak.audit.converter.AttemptAuditEventResultBuilderUpdater;\n+import com.sequenceiq.cloudbreak.audit.converter.AuditEventBuilderUpdater;\n+import com.sequenceiq.cloudbreak.util.NullUtil;\n+import io.netty.util.internal.StringUtil;\n+import org.apache.commons.collections.MapUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-import io.netty.util.internal.StringUtil;\n+import javax.inject.Inject;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n @Configuration\n public class AuditConfig {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditConfig.class);\n+\n     @Value(\"${altus.audit.host:}\")\n     private String endpoint;\n \n     @Value(\"${altus.audit.port:8989}\")\n     private int port;\n \n+    @Inject\n+    private List<AuditEventBuilderUpdater> auditEventBuilderUpdaterImplementations;\n+\n+    @Inject\n+    private List<AttemptAuditEventResultBuilderUpdater> attemptAuditEventResultBuilderUpdaterImplementations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM0OTE2OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNDo1N1rOGjxn9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNDo1N1rOGjxn9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NjM5MA==", "bodyText": "Collectors.joining(\",\")", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440166390", "createdAt": "2020-06-15T13:14:57Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -26,4 +46,44 @@ public int getPort() {\n     public boolean isConfigured() {\n         return !StringUtil.isNullOrEmpty(endpoint);\n     }\n+\n+    @Bean\n+    public Map<Class, AuditEventBuilderUpdater> eventDataUtilizers() {\n+        Map<Class, AuditEventBuilderUpdater> result = new LinkedHashMap<>(auditEventBuilderUpdaterImplementations.size());\n+        auditEventBuilderUpdaterImplementations.forEach(utilizer -> result.put(utilizer.getType(), utilizer));\n+        if (MapUtils.isNotEmpty(result)) {\n+            List<String> eventDataUtilizers = result.entrySet().stream().map(classAuditEventDataUtilizerEntry -> {\n+                return String.format(\"[%s :: %s]\",\n+                        NullUtil.getIfNotNull(classAuditEventDataUtilizerEntry.getKey(), t -> t.getSimpleName()),\n+                        NullUtil.getIfNotNull(classAuditEventDataUtilizerEntry.getValue(), u -> u.getClass().getSimpleName()));\n+            }).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM1MjQwOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNTo0MlrOGjxp8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNTo0MlrOGjxp8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2Njg5OQ==", "bodyText": "return is not needed, neither the {}", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440166899", "createdAt": "2020-06-15T13:15:42Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -26,4 +46,44 @@ public int getPort() {\n     public boolean isConfigured() {\n         return !StringUtil.isNullOrEmpty(endpoint);\n     }\n+\n+    @Bean\n+    public Map<Class, AuditEventBuilderUpdater> eventDataUtilizers() {\n+        Map<Class, AuditEventBuilderUpdater> result = new LinkedHashMap<>(auditEventBuilderUpdaterImplementations.size());\n+        auditEventBuilderUpdaterImplementations.forEach(utilizer -> result.put(utilizer.getType(), utilizer));\n+        if (MapUtils.isNotEmpty(result)) {\n+            List<String> eventDataUtilizers = result.entrySet().stream().map(classAuditEventDataUtilizerEntry -> {\n+                return String.format(\"[%s :: %s]\",\n+                        NullUtil.getIfNotNull(classAuditEventDataUtilizerEntry.getKey(), t -> t.getSimpleName()),\n+                        NullUtil.getIfNotNull(classAuditEventDataUtilizerEntry.getValue(), u -> u.getClass().getSimpleName()));\n+            }).collect(Collectors.toList());\n+            String utilizerListMessage = String.join(\",\", eventDataUtilizers);\n+            LOGGER.debug(\"The \" + AuditEventBuilderUpdater.class.getSimpleName() + \" has the following implementations: {}\", utilizerListMessage);\n+        } else {\n+            LOGGER.debug(\"The \" + AuditEventBuilderUpdater.class.getSimpleName() + \" has no any implementation!\");\n+        }\n+        return result;\n+    }\n+\n+    @Bean\n+    public Map<Class, AttemptAuditEventResultBuilderUpdater> auditEventDataUtilizers() {\n+        Map<Class, AttemptAuditEventResultBuilderUpdater> result = new LinkedHashMap<>(attemptAuditEventResultBuilderUpdaterImplementations.size());\n+        attemptAuditEventResultBuilderUpdaterImplementations.forEach(utilizer -> result.put(utilizer.getType(), utilizer));\n+        if (MapUtils.isNotEmpty(result)) {\n+            List<String> auditEventDataUtilizers = result.entrySet().stream().map(classAuditEventDataUtilizerEntry -> {\n+                return String.format(\"[%s :: %s]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM1NDg4OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNjoxOVrOGjxrcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNjoxOVrOGjxrcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NzI4MQ==", "bodyText": "Collectors.joining", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440167281", "createdAt": "2020-06-15T13:16:19Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/config/AuditConfig.java", "diffHunk": "@@ -26,4 +46,44 @@ public int getPort() {\n     public boolean isConfigured() {\n         return !StringUtil.isNullOrEmpty(endpoint);\n     }\n+\n+    @Bean\n+    public Map<Class, AuditEventBuilderUpdater> eventDataUtilizers() {\n+        Map<Class, AuditEventBuilderUpdater> result = new LinkedHashMap<>(auditEventBuilderUpdaterImplementations.size());\n+        auditEventBuilderUpdaterImplementations.forEach(utilizer -> result.put(utilizer.getType(), utilizer));\n+        if (MapUtils.isNotEmpty(result)) {\n+            List<String> eventDataUtilizers = result.entrySet().stream().map(classAuditEventDataUtilizerEntry -> {\n+                return String.format(\"[%s :: %s]\",\n+                        NullUtil.getIfNotNull(classAuditEventDataUtilizerEntry.getKey(), t -> t.getSimpleName()),\n+                        NullUtil.getIfNotNull(classAuditEventDataUtilizerEntry.getValue(), u -> u.getClass().getSimpleName()));\n+            }).collect(Collectors.toList());\n+            String utilizerListMessage = String.join(\",\", eventDataUtilizers);\n+            LOGGER.debug(\"The \" + AuditEventBuilderUpdater.class.getSimpleName() + \" has the following implementations: {}\", utilizerListMessage);\n+        } else {\n+            LOGGER.debug(\"The \" + AuditEventBuilderUpdater.class.getSimpleName() + \" has no any implementation!\");\n+        }\n+        return result;\n+    }\n+\n+    @Bean\n+    public Map<Class, AttemptAuditEventResultBuilderUpdater> auditEventDataUtilizers() {\n+        Map<Class, AttemptAuditEventResultBuilderUpdater> result = new LinkedHashMap<>(attemptAuditEventResultBuilderUpdaterImplementations.size());\n+        attemptAuditEventResultBuilderUpdaterImplementations.forEach(utilizer -> result.put(utilizer.getType(), utilizer));\n+        if (MapUtils.isNotEmpty(result)) {\n+            List<String> auditEventDataUtilizers = result.entrySet().stream().map(classAuditEventDataUtilizerEntry -> {\n+                return String.format(\"[%s :: %s]\",\n+                        NullUtil.getIfNotNull(classAuditEventDataUtilizerEntry.getKey(), t -> t.getSimpleName()),\n+                        NullUtil.getIfNotNull(classAuditEventDataUtilizerEntry.getValue(), u -> u.getClass().getSimpleName()));\n+            }).collect(Collectors.toList());\n+            result.forEach((type, utilizer) -> auditEventDataUtilizers.add(String.format(\"[%s :: %s]\",\n+                    NullUtil.getIfNotNull(type, t -> t.getSimpleName()),\n+                    NullUtil.getIfNotNull(utilizer, u -> u.getClass().getSimpleName()))));\n+            String utilizerListMessage = String.join(\",\", auditEventDataUtilizers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM2MTI0OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNzo0N1rOGjxvLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNzo0N1rOGjxvLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2ODIzOQ==", "bodyText": "it is not \"utilizer\" anymore", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440168239", "createdAt": "2020-06-15T13:17:47Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.java", "diffHunk": "@@ -1,22 +1,31 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n import com.sequenceiq.cloudbreak.audit.model.AttemptAuditEventResult;\n-import com.sequenceiq.cloudbreak.audit.model.ResultApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n-import com.sequenceiq.cloudbreak.audit.model.ResultServiceEventData;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n \n @Component\n public class AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.class);\n+\n+    private final Map<Class, AttemptAuditEventResultBuilderUpdater> auditEventDataUtilizers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM2Mzk5OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventBuilderUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxODoyOFrOGjxw2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNTo1NToxOVrOGkMN6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2ODY2Nw==", "bodyText": "\"WithEventData\" could be omitted\nmoreover, update would be adequate", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440168667", "createdAt": "2020-06-15T13:18:28Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventBuilderUpdater.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+\n+public interface AuditEventBuilderUpdater<T extends EventData> {\n+\n+    void updateAuditEventBuilderWithEventData(AuditProto.AuditEvent.Builder auditEventBuilder, T source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwMjA4OA==", "bodyText": "pls see below my comment regarding to this", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440602088", "createdAt": "2020-06-16T05:55:19Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventBuilderUpdater.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+\n+public interface AuditEventBuilderUpdater<T extends EventData> {\n+\n+    void updateAuditEventBuilderWithEventData(AuditProto.AuditEvent.Builder auditEventBuilder, T source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2ODY2Nw=="}, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM2NDg1OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxODo0MFrOGjxxXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxODo0MFrOGjxxXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2ODc5Nw==", "bodyText": "not \"utilizer\" anymore", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440168797", "createdAt": "2020-06-15T13:18:40Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "diffHunk": "@@ -1,25 +1,33 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n-\n-import java.util.Optional;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n import com.sequenceiq.cloudbreak.audit.model.ActorBase;\n import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n import com.sequenceiq.cloudbreak.audit.model.ActorService;\n-import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n import com.sequenceiq.cloudbreak.audit.model.EventData;\n-import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n \n @Component\n public class AuditEventToGrpcAuditEventConverter {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditEventToGrpcAuditEventConverter.class);\n+\n+    private final Map<Class, AuditEventBuilderUpdater> eventDataUtilizer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjQwMDkyOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultBuilderUpdater.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoyODowMVrOGjyIAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjoxMDozNlrOGkMhqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NDU5NA==", "bodyText": "update would be adequate", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440174594", "createdAt": "2020-06-15T13:28:01Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultBuilderUpdater.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n+\n+public interface AttemptAuditEventResultBuilderUpdater<T extends ResultEventData> {\n+\n+    void updateAttemptAuditEventResultBuilderWithEventData(AuditProto.AttemptAuditEventResult.Builder builder, T source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5ODAwOA==", "bodyText": "update tells nothing about the functionality of the method. since we're not using javadocs, the method name is the only way to indicate what would the function do when somebody calls it", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440598008", "createdAt": "2020-06-16T05:41:16Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultBuilderUpdater.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n+\n+public interface AttemptAuditEventResultBuilderUpdater<T extends ResultEventData> {\n+\n+    void updateAttemptAuditEventResultBuilderWithEventData(AuditProto.AttemptAuditEventResult.Builder builder, T source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NDU5NA=="}, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwNzE0NQ==", "bodyText": "well actually, your idea has gone through my head and it's not as senseless as I thought before, so I'm gonna rename it to update since the class name already contains a lot of information", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440607145", "createdAt": "2020-06-16T06:10:36Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultBuilderUpdater.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n+\n+public interface AttemptAuditEventResultBuilderUpdater<T extends ResultEventData> {\n+\n+    void updateAttemptAuditEventResultBuilderWithEventData(AuditProto.AttemptAuditEventResult.Builder builder, T source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NDU5NA=="}, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjQ0NzU3OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ResultApiRequestResultBuilderUpdaterAttempt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozOToyOVrOGjylUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNTozODoxOFrOGkL6vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MjA5Ng==", "bodyText": "ResultApiRequestResultBuilderUpdaterAttempt is a way overcomplicated name.\nI would have still stuck to naming the interface to reflect the converter nature: AttemptAuditEventResultConverter\nand then name this class like ResultApiRequestConverter\nThoughts?", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440182096", "createdAt": "2020-06-15T13:39:29Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ResultApiRequestResultBuilderUpdaterAttempt.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultApiRequestData;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+\n+@Component\n+public class ResultApiRequestResultBuilderUpdaterAttempt implements AttemptAuditEventResultBuilderUpdater<ResultApiRequestData> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5NzE4Mw==", "bodyText": "but it's still not converting anything :D\nAnyway I've renamed the class to refer to the implemented generic class", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440597183", "createdAt": "2020-06-16T05:38:18Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ResultApiRequestResultBuilderUpdaterAttempt.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultApiRequestData;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+\n+@Component\n+public class ResultApiRequestResultBuilderUpdaterAttempt implements AttemptAuditEventResultBuilderUpdater<ResultApiRequestData> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MjA5Ng=="}, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjQ1MTA3OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ResultServiceEventResultBuilderUpdaterAttempt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzo0MDowN1rOGjynQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzo0MDowN1rOGjynQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MjU5Mw==", "bodyText": "same as above. this name is way too compex", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r440182593", "createdAt": "2020-06-15T13:40:07Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/ResultServiceEventResultBuilderUpdaterAttempt.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ResultServiceEventData;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+\n+@Component\n+public class ResultServiceEventResultBuilderUpdaterAttempt implements AttemptAuditEventResultBuilderUpdater<ResultServiceEventData> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f57740c47c2189f980b63c4087dae4a65370188"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjI5NzcyOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMTo0OVrOGlTc7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjoyMjo1OVrOGlZZYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2OTE5OQ==", "bodyText": "what is the reason behind this? besides, it is not consistent with the other converter class", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r441769199", "createdAt": "2020-06-17T19:01:49Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.java", "diffHunk": "@@ -1,51 +1,46 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.converter.builder.AttemptAuditEventResultBuilderProvider;\n import com.sequenceiq.cloudbreak.audit.model.AttemptAuditEventResult;\n-import com.sequenceiq.cloudbreak.audit.model.ResultApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n-import com.sequenceiq.cloudbreak.audit.model.ResultServiceEventData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n \n @Component\n public class AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter {\n \n-    public AuditProto.AttemptAuditEventResult convert(AttemptAuditEventResult source) {\n-        AuditProto.AttemptAuditEventResult.Builder attemptAuditEventResultBuilder = prepareBuilderForCreateAuditEvent(source);\n-        updatResultEventData(attemptAuditEventResultBuilder, source.getResultEventData());\n-        return attemptAuditEventResultBuilder.build();\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.class);\n+\n+    private final Map<Class, AttemptAuditEventResultBuilderUpdater> builderUpdater;\n+\n+    private final AttemptAuditEventResultBuilderProvider builderProvider;\n+\n+    public AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(Map<Class, AttemptAuditEventResultBuilderUpdater> builderUpdater,\n+                    AttemptAuditEventResultBuilderProvider builderProvider) {\n+        this.builderUpdater = builderUpdater;\n+        this.builderProvider = builderProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc440cd706536c3b143c641e39fe2350f2518311"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2NjU5Mw==", "bodyText": "the reason behind this is to make the testing easier by abstracting these builders - like the AttemptAuditEventResult's builder - since they're coming outside from our codebase and the earlier tests were relying on their functionality. but it's easy to acknowledge that if somebody would have changed the functionality of some these builders behind the scene, the tests would fail even if our logic would be the same", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r441866593", "createdAt": "2020-06-17T22:22:59Z", "author": {"login": "gregito"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.java", "diffHunk": "@@ -1,51 +1,46 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.converter.builder.AttemptAuditEventResultBuilderProvider;\n import com.sequenceiq.cloudbreak.audit.model.AttemptAuditEventResult;\n-import com.sequenceiq.cloudbreak.audit.model.ResultApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n-import com.sequenceiq.cloudbreak.audit.model.ResultServiceEventData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n \n @Component\n public class AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter {\n \n-    public AuditProto.AttemptAuditEventResult convert(AttemptAuditEventResult source) {\n-        AuditProto.AttemptAuditEventResult.Builder attemptAuditEventResultBuilder = prepareBuilderForCreateAuditEvent(source);\n-        updatResultEventData(attemptAuditEventResultBuilder, source.getResultEventData());\n-        return attemptAuditEventResultBuilder.build();\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.class);\n+\n+    private final Map<Class, AttemptAuditEventResultBuilderUpdater> builderUpdater;\n+\n+    private final AttemptAuditEventResultBuilderProvider builderProvider;\n+\n+    public AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(Map<Class, AttemptAuditEventResultBuilderUpdater> builderUpdater,\n+                    AttemptAuditEventResultBuilderProvider builderProvider) {\n+        this.builderUpdater = builderUpdater;\n+        this.builderProvider = builderProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2OTE5OQ=="}, "originalCommit": {"oid": "dc440cd706536c3b143c641e39fe2350f2518311"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjI5ODI5OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMjowMFrOGlTdVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMjowMFrOGlTdVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2OTMwMA==", "bodyText": "should be plural", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r441769300", "createdAt": "2020-06-17T19:02:00Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.java", "diffHunk": "@@ -1,51 +1,46 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.converter.builder.AttemptAuditEventResultBuilderProvider;\n import com.sequenceiq.cloudbreak.audit.model.AttemptAuditEventResult;\n-import com.sequenceiq.cloudbreak.audit.model.ResultApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.ResultEventData;\n-import com.sequenceiq.cloudbreak.audit.model.ResultServiceEventData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n \n @Component\n public class AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter {\n \n-    public AuditProto.AttemptAuditEventResult convert(AttemptAuditEventResult source) {\n-        AuditProto.AttemptAuditEventResult.Builder attemptAuditEventResultBuilder = prepareBuilderForCreateAuditEvent(source);\n-        updatResultEventData(attemptAuditEventResultBuilder, source.getResultEventData());\n-        return attemptAuditEventResultBuilder.build();\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter.class);\n+\n+    private final Map<Class, AttemptAuditEventResultBuilderUpdater> builderUpdater;\n+\n+    private final AttemptAuditEventResultBuilderProvider builderProvider;\n+\n+    public AttemptAuditEventResultToGrpcAttemptAuditEventResultConverter(Map<Class, AttemptAuditEventResultBuilderUpdater> builderUpdater,\n+                    AttemptAuditEventResultBuilderProvider builderProvider) {\n+        this.builderUpdater = builderUpdater;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc440cd706536c3b143c641e39fe2350f2518311"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjMwMjg2OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMzoyOFrOGlTgbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTowMzoyOFrOGlTgbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3MDA5Mg==", "bodyText": "should be plural", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r441770092", "createdAt": "2020-06-17T19:03:28Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "diffHunk": "@@ -1,25 +1,33 @@\n package com.sequenceiq.cloudbreak.audit.converter;\n \n-import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n-import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n-\n-import java.util.Optional;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.stereotype.Component;\n-\n import com.cloudera.thunderhead.service.audit.AuditProto;\n import com.sequenceiq.cloudbreak.audit.model.ActorBase;\n import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n import com.sequenceiq.cloudbreak.audit.model.ActorService;\n-import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n import com.sequenceiq.cloudbreak.audit.model.EventData;\n-import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n \n @Component\n public class AuditEventToGrpcAuditEventConverter {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AuditEventToGrpcAuditEventConverter.class);\n+\n+    private final Map<Class, AuditEventBuilderUpdater> builderUpdater;\n+\n+    public AuditEventToGrpcAuditEventConverter(Map<Class, AuditEventBuilderUpdater> builderUpdater) {\n+        this.builderUpdater = builderUpdater;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc440cd706536c3b143c641e39fe2350f2518311"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDAyOTA1OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ServiceEventDataBuildUpdaterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozMjozNVrOGnDYHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozMjozNVrOGnDYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMjk3Mw==", "bodyText": "not needed", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r443602973", "createdAt": "2020-06-22T14:32:35Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ServiceEventDataBuildUpdaterTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.converter.builder.ServiceEventDataBuilderProvider;\n+import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class ServiceEventDataBuildUpdaterTest {\n+\n+    @Mock\n+    private ServiceEventDataBuilderProvider mockBuilderProvider;\n+\n+    @Mock\n+    private AuditProto.ServiceEventData.Builder mockServiceEventDataBuilder;\n+\n+    @Mock\n+    private AuditProto.ServiceEventData mockAuditProtoServiceEventData;\n+\n+    @Mock\n+    private AuditProto.AuditEvent.Builder mockAuditEventBuilder;\n+\n+    @Mock\n+    private ServiceEventData mockServiceEventData;\n+\n+    private ServiceEventDataBuildUpdater underTest;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        when(mockBuilderProvider.getNewServiceEventDataBuilder()).thenReturn(mockServiceEventDataBuilder);\n+        when(mockServiceEventDataBuilder.build()).thenReturn(mockAuditProtoServiceEventData);\n+\n+        underTest = new ServiceEventDataBuildUpdater(mockBuilderProvider);\n+    }\n+\n+    @AfterEach\n+    void checkAfter() {\n+        verify(mockServiceEventDataBuilder, times(1)).build();\n+        verify(mockServiceEventData, times(1)).getVersion();\n+        verify(mockServiceEventData, times(1)).getEventDetails();\n+        verify(mockBuilderProvider, times(1)).getNewServiceEventDataBuilder();\n+    }\n+\n+    @Test\n+    void testUpdateWhenVersionIsNull() {\n+        when(mockServiceEventData.getVersion()).thenReturn(null);\n+\n+        underTest.update(mockAuditEventBuilder, mockServiceEventData);\n+\n+        verify(mockServiceEventDataBuilder, never()).setDetailsVersion(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenVersionIsEmpty() {\n+        when(mockServiceEventData.getVersion()).thenReturn(\"\");\n+\n+        underTest.update(mockAuditEventBuilder, mockServiceEventData);\n+\n+        verify(mockServiceEventDataBuilder, never()).setDetailsVersion(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenVersionIsNotNull() {\n+        String version = \"someVersion\";\n+        when(mockServiceEventData.getVersion()).thenReturn(version);\n+\n+        underTest.update(mockAuditEventBuilder, mockServiceEventData);\n+\n+        verify(mockServiceEventDataBuilder, times(1)).setDetailsVersion(any());\n+        verify(mockServiceEventDataBuilder, times(1)).setDetailsVersion(version);\n+    }\n+\n+    @Test\n+    void testUpdateWhenEventDetailIsNull() {\n+        when(mockServiceEventData.getEventDetails()).thenReturn(null);\n+\n+        underTest.update(mockAuditEventBuilder, mockServiceEventData);\n+\n+        verify(mockServiceEventDataBuilder, never()).setEventDetails(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenEventDetailIsEmpty() {\n+        when(mockServiceEventData.getEventDetails()).thenReturn(\"\");\n+\n+        underTest.update(mockAuditEventBuilder, mockServiceEventData);\n+\n+        verify(mockServiceEventDataBuilder, never()).setEventDetails(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenEventDetailIsNotNull() {\n+        String details = \"someDetail\";\n+        when(mockServiceEventData.getEventDetails()).thenReturn(details);\n+\n+        underTest.update(mockAuditEventBuilder, mockServiceEventData);\n+\n+        verify(mockServiceEventDataBuilder, times(1)).setEventDetails(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25557bbd45adbdffac4af1daf828119981c6b09"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDAzMDMwOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ResultServiceEventDataBuildUpdaterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozMjo1MFrOGnDYzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozMjo1MFrOGnDYzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMzE1MQ==", "bodyText": "\"SomeData\"", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r443603151", "createdAt": "2020-06-22T14:32:50Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ResultServiceEventDataBuildUpdaterTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.converter.builder.ResultServiceEventDataBuilderProvider;\n+import com.sequenceiq.cloudbreak.audit.model.ResultServiceEventData;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class ResultServiceEventDataBuildUpdaterTest {\n+\n+    @Mock\n+    private ResultServiceEventDataBuilderProvider mockBuilderProvider;\n+\n+    @Mock\n+    private AuditProto.ResultServiceEventData.Builder mockResultServiceEventDataBuilder;\n+\n+    @Mock\n+    private AuditProto.AttemptAuditEventResult.Builder mockAttemptAuditEventResult;\n+\n+    @Mock\n+    private ResultServiceEventData mockResultServiceEventData;\n+\n+    private ResultServiceEventDataBuildUpdater underTest;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        when(mockBuilderProvider.getNewResultServiceEventDataBuilder()).thenReturn(mockResultServiceEventDataBuilder);\n+        when(mockResultServiceEventDataBuilder.addAllResourceCrn(any())).thenReturn(mockResultServiceEventDataBuilder);\n+\n+        underTest = new ResultServiceEventDataBuildUpdater(mockBuilderProvider);\n+    }\n+\n+    @AfterEach\n+    void checkAfter() {\n+        verify(mockResultServiceEventDataBuilder, times(1)).build();\n+        verify(mockResultServiceEventData, times(1)).getResultDetails();\n+        verify(mockResultServiceEventDataBuilder, times(1)).addAllResourceCrn(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenResultDetailIsEmpty() {\n+        when(mockResultServiceEventData.getResultDetails()).thenReturn(\"\");\n+\n+        underTest.update(mockAttemptAuditEventResult, mockResultServiceEventData);\n+\n+        verify(mockResultServiceEventDataBuilder, never()).setResultDetails(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenResultDetailIsNull() {\n+        when(mockResultServiceEventData.getResultDetails()).thenReturn(null);\n+\n+        underTest.update(mockAttemptAuditEventResult, mockResultServiceEventData);\n+\n+        verify(mockResultServiceEventDataBuilder, never()).setResultDetails(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenResultDetailIsNotEmpty() {\n+        when(mockResultServiceEventData.getResultDetails()).thenReturn(\"SomeData\");\n+\n+        underTest.update(mockAttemptAuditEventResult, mockResultServiceEventData);\n+\n+        verify(mockResultServiceEventDataBuilder, times(1)).setResultDetails(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25557bbd45adbdffac4af1daf828119981c6b09"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDAzMTY4OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ResultApiRequestDataBuildUpdaterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozMzowOFrOGnDZuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozMzowOFrOGnDZuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMzM4NA==", "bodyText": "\"someValue\"", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r443603384", "createdAt": "2020-06-22T14:33:08Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ResultApiRequestDataBuildUpdaterTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.converter.builder.ResultApiRequestDataBuilderProvider;\n+import com.sequenceiq.cloudbreak.audit.model.ResultApiRequestData;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class ResultApiRequestDataBuildUpdaterTest {\n+\n+    @Mock\n+    private AuditProto.ResultApiRequestData.Builder mockResultApiRequestDataBuilder;\n+\n+    @Mock\n+    private ResultApiRequestDataBuilderProvider builderProvider;\n+\n+    @Mock\n+    private AuditProto.ResultApiRequestData mockResultApiRequestData;\n+\n+    @Mock\n+    private AuditProto.AttemptAuditEventResult.Builder mockAttemptAuditEventResultBuilder;\n+\n+    @Mock\n+    private ResultApiRequestData resultEventData;\n+\n+    @Mock\n+    private ResultApiRequestDataBuildUpdater underTest;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(builderProvider.getNewResultApiRequestDataBuilder()).thenReturn(mockResultApiRequestDataBuilder);\n+        when(mockResultApiRequestDataBuilder.build()).thenReturn(mockResultApiRequestData);\n+\n+        underTest = new ResultApiRequestDataBuildUpdater(builderProvider);\n+    }\n+\n+    @AfterEach\n+    void checkAfter() {\n+        verify(builderProvider, times(1)).getNewResultApiRequestDataBuilder();\n+        verify(mockResultApiRequestDataBuilder, times(1)).build();\n+        verify(resultEventData, times(1)).getResponseParameters();\n+        verify(mockAttemptAuditEventResultBuilder, times(1)).setResultApiRequestData(mockResultApiRequestData);\n+    }\n+\n+    @Test\n+    void testUpdateWhenResponseParametersAreEmpty() {\n+        when(resultEventData.getResponseParameters()).thenReturn(\"\");\n+\n+        underTest.update(mockAttemptAuditEventResultBuilder, resultEventData);\n+\n+        verify(mockResultApiRequestDataBuilder, never()).setResponseParameters(anyString());\n+    }\n+\n+    @Test\n+    void testUpdateWhenResponseParameterIsNull() {\n+        when(resultEventData.getResponseParameters()).thenReturn(null);\n+\n+        underTest.update(mockAttemptAuditEventResultBuilder, resultEventData);\n+\n+        verify(mockResultApiRequestDataBuilder, never()).setResponseParameters(anyString());\n+    }\n+\n+    @Test\n+    void testUpdateWhenResponseParametersAreNotEmpty() {\n+        when(resultEventData.getResponseParameters()).thenReturn(\"someValue\");\n+\n+        underTest.update(mockAttemptAuditEventResultBuilder, resultEventData);\n+\n+        verify(mockResultApiRequestDataBuilder, times(1)).setResponseParameters(anyString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25557bbd45adbdffac4af1daf828119981c6b09"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDAzNzAzOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNDoxMVrOGnDc_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNDoxMVrOGnDc_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNDIyMg==", "bodyText": "not needed. same for all other properties", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r443604222", "createdAt": "2020-06-22T14:34:11Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverterTest.java", "diffHunk": "@@ -147,13 +201,26 @@ void convertUnknownActorThrows() {\n         assertThatThrownBy(() -> underTest.convert(source)).isInstanceOf(IllegalArgumentException.class);\n     }\n \n-    private void assertGeneric(AuditProto.AuditEvent target) {\n-        assertThat(target.getId()).isEqualTo(UUID_ID);\n-        assertThat(target.getAccountId()).isEqualTo(ACCOUNT_ID);\n-        assertThat(target.getRequestId()).isEqualTo(REQUEST_ID);\n-        assertThat(target.getEventName()).isEqualTo(EVENT_NAME);\n-        assertThat(target.getEventSource()).isEqualTo(EVENT_SOURCE);\n-        assertThat(target.getSourceIPAddress()).isEqualTo(SOURCE_IP);\n+    private void assertGeneric() {\n+        verify(mockAuditEventBuilder, times(1)).setId(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25557bbd45adbdffac4af1daf828119981c6b09"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDA0MjQ3OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ApiRequestDataBuildUpdaterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNToxOVrOGnDgcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNToxOVrOGnDgcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNTEwNQ==", "bodyText": "not needed", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r443605105", "createdAt": "2020-06-22T14:35:19Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ApiRequestDataBuildUpdaterTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.converter.builder.ApiRequestDataBuilderProvider;\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class ApiRequestDataBuildUpdaterTest {\n+\n+    @Mock\n+    private ApiRequestDataBuilderProvider mockBuilderProvider;\n+\n+    @Mock\n+    private AuditProto.ApiRequestData.Builder mockApiRequestDataBuilder;\n+\n+    @Mock\n+    private ApiRequestData mockApiRequestData;\n+\n+    @Mock\n+    private AuditProto.AuditEvent.Builder mockAuditEventBuilder;\n+\n+    @Mock\n+    private AuditProto.ApiRequestData mockApiRequestDataBuilderResult;\n+\n+    private ApiRequestDataBuildUpdater underTest;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        when(mockBuilderProvider.getNewApiRequestDataBuilder()).thenReturn(mockApiRequestDataBuilder);\n+        when(mockApiRequestDataBuilder.setMutating(anyBoolean())).thenReturn(mockApiRequestDataBuilder);\n+        when(mockApiRequestDataBuilder.build()).thenReturn(mockApiRequestDataBuilderResult);\n+\n+        underTest = new ApiRequestDataBuildUpdater(mockBuilderProvider);\n+    }\n+\n+    @AfterEach\n+    void checkAfter() {\n+        verify(mockApiRequestDataBuilder, times(1)).setMutating(anyBoolean());\n+        verify(mockApiRequestData, times(1)).getApiVersion();\n+        verify(mockApiRequestData, times(1)).getRequestParameters();\n+        verify(mockApiRequestData, times(1)).getUserAgent();\n+        verify(mockAuditEventBuilder, times(1)).setApiRequestData(any(AuditProto.ApiRequestData.class));\n+        verify(mockAuditEventBuilder, times(1)).setApiRequestData(mockApiRequestDataBuilderResult);\n+    }\n+\n+    @Test\n+    void testUpdateWhenApiVersionIsNull() {\n+        when(mockApiRequestData.getApiVersion()).thenReturn(null);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setApiVersion(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenApiVersionIsEmpty() {\n+        when(mockApiRequestData.getApiVersion()).thenReturn(\"\");\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setApiVersion(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenApiVersionIsNotEmpty() {\n+        String apiVersionValue = \"someApiVersion\";\n+        when(mockApiRequestData.getApiVersion()).thenReturn(apiVersionValue);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, times(1)).setApiVersion(any());\n+        verify(mockApiRequestDataBuilder, times(1)).setApiVersion(apiVersionValue);\n+    }\n+\n+    @Test\n+    void testUpdateWhenRequestParameterIsNull() {\n+        when(mockApiRequestData.getRequestParameters()).thenReturn(null);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setRequestParameters(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenRequestParameterIsEmpty() {\n+        when(mockApiRequestData.getRequestParameters()).thenReturn(\"\");\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setRequestParameters(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenRequestParameterIsNotEmpty() {\n+        String requestParams = \"someRequestParamValue\";\n+        when(mockApiRequestData.getRequestParameters()).thenReturn(requestParams);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, times(1)).setRequestParameters(any());\n+        verify(mockApiRequestDataBuilder, times(1)).setRequestParameters(requestParams);\n+    }\n+\n+    @Test\n+    void testUpdateWhenUserAgentIsNull() {\n+        when(mockApiRequestData.getUserAgent()).thenReturn(null);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setUserAgent(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenUserAgentIsEmpty() {\n+        when(mockApiRequestData.getUserAgent()).thenReturn(\"\");\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setUserAgent(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenUserAgentIsNotEmpty() {\n+        String userAgentValue = \"someUserAgentValue\";\n+        when(mockApiRequestData.getUserAgent()).thenReturn(userAgentValue);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, times(1)).setUserAgent(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25557bbd45adbdffac4af1daf828119981c6b09"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDA0MzIxOnYy", "diffSide": "RIGHT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ApiRequestDataBuildUpdaterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNToyOFrOGnDg7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNToyOFrOGnDg7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNTIyOA==", "bodyText": "not needed", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r443605228", "createdAt": "2020-06-22T14:35:28Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ApiRequestDataBuildUpdaterTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.converter.builder.ApiRequestDataBuilderProvider;\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class ApiRequestDataBuildUpdaterTest {\n+\n+    @Mock\n+    private ApiRequestDataBuilderProvider mockBuilderProvider;\n+\n+    @Mock\n+    private AuditProto.ApiRequestData.Builder mockApiRequestDataBuilder;\n+\n+    @Mock\n+    private ApiRequestData mockApiRequestData;\n+\n+    @Mock\n+    private AuditProto.AuditEvent.Builder mockAuditEventBuilder;\n+\n+    @Mock\n+    private AuditProto.ApiRequestData mockApiRequestDataBuilderResult;\n+\n+    private ApiRequestDataBuildUpdater underTest;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        when(mockBuilderProvider.getNewApiRequestDataBuilder()).thenReturn(mockApiRequestDataBuilder);\n+        when(mockApiRequestDataBuilder.setMutating(anyBoolean())).thenReturn(mockApiRequestDataBuilder);\n+        when(mockApiRequestDataBuilder.build()).thenReturn(mockApiRequestDataBuilderResult);\n+\n+        underTest = new ApiRequestDataBuildUpdater(mockBuilderProvider);\n+    }\n+\n+    @AfterEach\n+    void checkAfter() {\n+        verify(mockApiRequestDataBuilder, times(1)).setMutating(anyBoolean());\n+        verify(mockApiRequestData, times(1)).getApiVersion();\n+        verify(mockApiRequestData, times(1)).getRequestParameters();\n+        verify(mockApiRequestData, times(1)).getUserAgent();\n+        verify(mockAuditEventBuilder, times(1)).setApiRequestData(any(AuditProto.ApiRequestData.class));\n+        verify(mockAuditEventBuilder, times(1)).setApiRequestData(mockApiRequestDataBuilderResult);\n+    }\n+\n+    @Test\n+    void testUpdateWhenApiVersionIsNull() {\n+        when(mockApiRequestData.getApiVersion()).thenReturn(null);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setApiVersion(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenApiVersionIsEmpty() {\n+        when(mockApiRequestData.getApiVersion()).thenReturn(\"\");\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setApiVersion(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenApiVersionIsNotEmpty() {\n+        String apiVersionValue = \"someApiVersion\";\n+        when(mockApiRequestData.getApiVersion()).thenReturn(apiVersionValue);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, times(1)).setApiVersion(any());\n+        verify(mockApiRequestDataBuilder, times(1)).setApiVersion(apiVersionValue);\n+    }\n+\n+    @Test\n+    void testUpdateWhenRequestParameterIsNull() {\n+        when(mockApiRequestData.getRequestParameters()).thenReturn(null);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setRequestParameters(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenRequestParameterIsEmpty() {\n+        when(mockApiRequestData.getRequestParameters()).thenReturn(\"\");\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setRequestParameters(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenRequestParameterIsNotEmpty() {\n+        String requestParams = \"someRequestParamValue\";\n+        when(mockApiRequestData.getRequestParameters()).thenReturn(requestParams);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, times(1)).setRequestParameters(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25557bbd45adbdffac4af1daf828119981c6b09"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDA0NDI4OnYy", "diffSide": "RIGHT", "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ApiRequestDataBuildUpdaterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNTo0MFrOGnDhjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNTo0MFrOGnDhjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNTM4OQ==", "bodyText": "not needed", "url": "https://github.com/hortonworks/cloudbreak/pull/8255#discussion_r443605389", "createdAt": "2020-06-22T14:35:40Z", "author": {"login": "bergerdenes"}, "path": "audit-connector/src/test/java/com/sequenceiq/cloudbreak/audit/converter/ApiRequestDataBuildUpdaterTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.converter.builder.ApiRequestDataBuilderProvider;\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class ApiRequestDataBuildUpdaterTest {\n+\n+    @Mock\n+    private ApiRequestDataBuilderProvider mockBuilderProvider;\n+\n+    @Mock\n+    private AuditProto.ApiRequestData.Builder mockApiRequestDataBuilder;\n+\n+    @Mock\n+    private ApiRequestData mockApiRequestData;\n+\n+    @Mock\n+    private AuditProto.AuditEvent.Builder mockAuditEventBuilder;\n+\n+    @Mock\n+    private AuditProto.ApiRequestData mockApiRequestDataBuilderResult;\n+\n+    private ApiRequestDataBuildUpdater underTest;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        when(mockBuilderProvider.getNewApiRequestDataBuilder()).thenReturn(mockApiRequestDataBuilder);\n+        when(mockApiRequestDataBuilder.setMutating(anyBoolean())).thenReturn(mockApiRequestDataBuilder);\n+        when(mockApiRequestDataBuilder.build()).thenReturn(mockApiRequestDataBuilderResult);\n+\n+        underTest = new ApiRequestDataBuildUpdater(mockBuilderProvider);\n+    }\n+\n+    @AfterEach\n+    void checkAfter() {\n+        verify(mockApiRequestDataBuilder, times(1)).setMutating(anyBoolean());\n+        verify(mockApiRequestData, times(1)).getApiVersion();\n+        verify(mockApiRequestData, times(1)).getRequestParameters();\n+        verify(mockApiRequestData, times(1)).getUserAgent();\n+        verify(mockAuditEventBuilder, times(1)).setApiRequestData(any(AuditProto.ApiRequestData.class));\n+        verify(mockAuditEventBuilder, times(1)).setApiRequestData(mockApiRequestDataBuilderResult);\n+    }\n+\n+    @Test\n+    void testUpdateWhenApiVersionIsNull() {\n+        when(mockApiRequestData.getApiVersion()).thenReturn(null);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setApiVersion(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenApiVersionIsEmpty() {\n+        when(mockApiRequestData.getApiVersion()).thenReturn(\"\");\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, never()).setApiVersion(any());\n+    }\n+\n+    @Test\n+    void testUpdateWhenApiVersionIsNotEmpty() {\n+        String apiVersionValue = \"someApiVersion\";\n+        when(mockApiRequestData.getApiVersion()).thenReturn(apiVersionValue);\n+\n+        underTest.update(mockAuditEventBuilder, mockApiRequestData);\n+\n+        verify(mockApiRequestDataBuilder, times(1)).setApiVersion(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25557bbd45adbdffac4af1daf828119981c6b09"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3186, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}