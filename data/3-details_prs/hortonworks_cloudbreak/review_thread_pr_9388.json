{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NzMxNTc4", "number": 9388, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0NjowNlrOE6DNFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODoxNTowNVrOE_f8rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzA1MzY3OnYy", "diffSide": "RIGHT", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDo0NjowNlrOH04RKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToxNDoyN1rOH05u4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwOTg5OQ==", "bodyText": "Is it intentional that you want to use same cache as used for hasRights ?", "url": "https://github.com/hortonworks/cloudbreak/pull/9388#discussion_r525209899", "createdAt": "2020-11-17T14:46:06Z", "author": {"login": "horadla23"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -403,32 +398,61 @@ public Account getAccountDetails(String actorCrn, String accountId, Optional<Str\n         }\n     }\n \n-    @Cacheable(cacheNames = \"umsUserRoleAssigmentsCache\", key = \"{ #actorCrn, #userCrn }\")\n+    @Cacheable(cacheNames = \"umsUserRoleAssigmentsCache\", key = \"{ #userCrn }\")\n     public List<UserManagementProto.ResourceAssignment> listResourceRoleAssigments(String actorCrn, String userCrn, Optional<String> requestId) {\n         try (ManagedChannelWrapper channelWrapper = makeWrapper()) {\n             UmsClient client = makeClient(channelWrapper.getChannel(), actorCrn);\n             return client.listAssigmentsOfUser(requestId.orElse(UUID.randomUUID().toString()), userCrn);\n         }\n     }\n \n-    //\"#value.concat(#fieldId).concat(#projectId)\"\n-//    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #actorCrn, #userCrn, #right, #resource }\")\n-    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #userCrn, #right, #resource }\")\n-    public boolean checkRight(String actorCrn, String userCrn, String right, String resource, Optional<String> requestId) {\n+    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ #userCrn, #right, #resource }\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e310bbafa8f6d037815a8cab3e998049ab6640"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIxNzQ3Mw==", "bodyText": "is there a meaningful difference on the ask towards ums from a caching point of view?", "url": "https://github.com/hortonworks/cloudbreak/pull/9388#discussion_r525217473", "createdAt": "2020-11-17T14:55:04Z", "author": {"login": "lnardai"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -403,32 +398,61 @@ public Account getAccountDetails(String actorCrn, String accountId, Optional<Str\n         }\n     }\n \n-    @Cacheable(cacheNames = \"umsUserRoleAssigmentsCache\", key = \"{ #actorCrn, #userCrn }\")\n+    @Cacheable(cacheNames = \"umsUserRoleAssigmentsCache\", key = \"{ #userCrn }\")\n     public List<UserManagementProto.ResourceAssignment> listResourceRoleAssigments(String actorCrn, String userCrn, Optional<String> requestId) {\n         try (ManagedChannelWrapper channelWrapper = makeWrapper()) {\n             UmsClient client = makeClient(channelWrapper.getChannel(), actorCrn);\n             return client.listAssigmentsOfUser(requestId.orElse(UUID.randomUUID().toString()), userCrn);\n         }\n     }\n \n-    //\"#value.concat(#fieldId).concat(#projectId)\"\n-//    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #actorCrn, #userCrn, #right, #resource }\")\n-    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #userCrn, #right, #resource }\")\n-    public boolean checkRight(String actorCrn, String userCrn, String right, String resource, Optional<String> requestId) {\n+    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ #userCrn, #right, #resource }\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwOTg5OQ=="}, "originalCommit": {"oid": "59e310bbafa8f6d037815a8cab3e998049ab6640"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzMzg4OA==", "bodyText": "i guess not, only the name of the cache deceived me, but it's not important", "url": "https://github.com/hortonworks/cloudbreak/pull/9388#discussion_r525233888", "createdAt": "2020-11-17T15:14:27Z", "author": {"login": "horadla23"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -403,32 +398,61 @@ public Account getAccountDetails(String actorCrn, String accountId, Optional<Str\n         }\n     }\n \n-    @Cacheable(cacheNames = \"umsUserRoleAssigmentsCache\", key = \"{ #actorCrn, #userCrn }\")\n+    @Cacheable(cacheNames = \"umsUserRoleAssigmentsCache\", key = \"{ #userCrn }\")\n     public List<UserManagementProto.ResourceAssignment> listResourceRoleAssigments(String actorCrn, String userCrn, Optional<String> requestId) {\n         try (ManagedChannelWrapper channelWrapper = makeWrapper()) {\n             UmsClient client = makeClient(channelWrapper.getChannel(), actorCrn);\n             return client.listAssigmentsOfUser(requestId.orElse(UUID.randomUUID().toString()), userCrn);\n         }\n     }\n \n-    //\"#value.concat(#fieldId).concat(#projectId)\"\n-//    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #actorCrn, #userCrn, #right, #resource }\")\n-    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #userCrn, #right, #resource }\")\n-    public boolean checkRight(String actorCrn, String userCrn, String right, String resource, Optional<String> requestId) {\n+    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ #userCrn, #right, #resource }\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIwOTg5OQ=="}, "originalCommit": {"oid": "59e310bbafa8f6d037815a8cab3e998049ab6640"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDE5MTgyOnYy", "diffSide": "RIGHT", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODoxNTowNVrOH9O_gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjowOTo0MlrOH9YATA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk3MDgxOA==", "bodyText": "i haven't noticed it, but int test brought out this double ##\n\"statusReason\":\"Error message: \\\"Internal server error: Expression [{ ##actorCrn, userCrn, #right, #resource }] @3: EL1043E: Unexpected token. Expected 'identifier' but was 'hash(#)'\\\"\"", "url": "https://github.com/hortonworks/cloudbreak/pull/9388#discussion_r533970818", "createdAt": "2020-12-02T08:15:05Z", "author": {"login": "horadla23"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -379,24 +374,53 @@ public Account getAccountDetails(String actorCrn, String accountId, Optional<Str\n         return client.listAssigmentsOfUser(RequestIdUtil.getOrGenerate(requestId), userCrn);\n     }\n \n-    //\"#value.concat(#fieldId).concat(#projectId)\"\n-//    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #actorCrn, #userCrn, #right, #resource }\")\n-    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #userCrn, #right, #resource }\")\n-    public boolean checkRight(String actorCrn, String userCrn, String right, String resource, Optional<String> requestId) {\n+    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ #actorCrn, #userCrn, #right, #resource }\")\n+    public boolean checkResourceRight(String actorCrn, String userCrn, String right, String resource, Optional<String> requestId) {\n         if (InternalCrnBuilder.isInternalCrn(userCrn)) {\n             LOGGER.info(\"InternalCrn, allow right {} for user {}!\", right, userCrn);\n             return true;\n         }\n-        if (!isEntitledAndLogResult(actorCrn, ThreadBasedUserCrnProvider.getAccountId(), Entitlement.CB_AUTHZ_POWER_USERS)) {\n-            if (RightUtil.isReadRight(right)) {\n-                LOGGER.info(\"In account {} authorization related entitlement disabled, thus skipping permission check!!\",\n-                        ThreadBasedUserCrnProvider.getAccountId());\n-                return true;\n-            } else {\n-                // if legacy authz then we will check permission on account level\n-                resource = null;\n-            }\n+        return makeCheckRightCall(actorCrn, userCrn, right, resource, requestId);\n+    }\n+\n+    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ ##actorCrn, userCrn, #right, #resource }\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9977b2a7ef2e35a22099adc21290d8f5b6bb543d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDExODQ3Ng==", "bodyText": "Thank you!", "url": "https://github.com/hortonworks/cloudbreak/pull/9388#discussion_r534118476", "createdAt": "2020-12-02T12:09:42Z", "author": {"login": "lnardai"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -379,24 +374,53 @@ public Account getAccountDetails(String actorCrn, String accountId, Optional<Str\n         return client.listAssigmentsOfUser(RequestIdUtil.getOrGenerate(requestId), userCrn);\n     }\n \n-    //\"#value.concat(#fieldId).concat(#projectId)\"\n-//    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #actorCrn, #userCrn, #right, #resource }\")\n-    @Cacheable(cacheNames = \"umsUserRightsCache\", key = \"{ #userCrn, #right, #resource }\")\n-    public boolean checkRight(String actorCrn, String userCrn, String right, String resource, Optional<String> requestId) {\n+    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ #actorCrn, #userCrn, #right, #resource }\")\n+    public boolean checkResourceRight(String actorCrn, String userCrn, String right, String resource, Optional<String> requestId) {\n         if (InternalCrnBuilder.isInternalCrn(userCrn)) {\n             LOGGER.info(\"InternalCrn, allow right {} for user {}!\", right, userCrn);\n             return true;\n         }\n-        if (!isEntitledAndLogResult(actorCrn, ThreadBasedUserCrnProvider.getAccountId(), Entitlement.CB_AUTHZ_POWER_USERS)) {\n-            if (RightUtil.isReadRight(right)) {\n-                LOGGER.info(\"In account {} authorization related entitlement disabled, thus skipping permission check!!\",\n-                        ThreadBasedUserCrnProvider.getAccountId());\n-                return true;\n-            } else {\n-                // if legacy authz then we will check permission on account level\n-                resource = null;\n-            }\n+        return makeCheckRightCall(actorCrn, userCrn, right, resource, requestId);\n+    }\n+\n+    @Cacheable(cacheNames = \"umsUserHasRightsForResourceCache\", key = \"{ ##actorCrn, userCrn, #right, #resource }\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk3MDgxOA=="}, "originalCommit": {"oid": "9977b2a7ef2e35a22099adc21290d8f5b6bb543d"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3562, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}