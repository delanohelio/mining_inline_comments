{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2Mzc0MzYz", "number": 8637, "title": "CB-8135 configure paywall credentials to CM yum repo file", "bodyText": "Whenever a cluster is installed from https://archive.cloudera.com\na basic credential must be provided. This credential can be generated\nfrom the CM license file that is provided by UMS. The test credential\ncan be used to authenticate to this paywall however, in production\neach customer gets its own license file. The username is the uuid field\nand the password is generated from sha256(name + uuid) and the first 12\ncharacters.", "createdAt": "2020-07-24T16:17:39Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8637", "merged": true, "mergeCommit": {"oid": "fec4f2b421cefcdd278801c4a9a5b325689e69d8"}, "closed": true, "closedAt": "2020-07-27T07:14:06Z", "author": {"login": "keyki"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4HM9gABqjM1ODQ3NzIxNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc48bHpAFqTQ1NTUyMTQ2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2c62d16adbb5872e1de13ea5000578eea2d8227", "author": {"user": {"login": "keyki", "name": "Krisztian Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c2c62d16adbb5872e1de13ea5000578eea2d8227", "committedDate": "2020-07-24T16:11:27Z", "message": "CB-8135 configure paywall credentials to CM yum repo file\nWhenever a cluster is installed from https://archive.cloudera.com\na basic credential must be provided. This credential can be generated\nfrom the CM license file that is provided by UMS. The test credential\ncan be used to authenticate to this paywall however, in production\neach customer gets its own license file. The username is the uuid field\nand the password is generated from sha256(name + uuid) and the first 12\ncharacters."}, "afterCommit": {"oid": "4e1864c2ad6905b22586fc953bf7a39155d535b6", "author": {"user": {"login": "keyki", "name": "Krisztian Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4e1864c2ad6905b22586fc953bf7a39155d535b6", "committedDate": "2020-07-24T17:08:33Z", "message": "CB-8135 configure paywall credentials to CM yum repo file\nWhenever a cluster is installed from https://archive.cloudera.com\na basic credential must be provided. This credential can be generated\nfrom the CM license file that is provided by UMS. The test credential\ncan be used to authenticate to this paywall however, in production\neach customer gets its own license file. The username is the uuid field\nand the password is generated from sha256(name + uuid) and the first 12\ncharacters."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a84b423fae1dc1f960a4b6cddef20df9ad967338", "author": {"user": {"login": "keyki", "name": "Krisztian Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a84b423fae1dc1f960a4b6cddef20df9ad967338", "committedDate": "2020-07-26T17:36:06Z", "message": "CB-8135 configure paywall credentials to CM yum repo file\nWhenever a cluster is installed from https://archive.cloudera.com\na basic credential must be provided. This credential can be generated\nfrom the CM license file that is provided by UMS. The test credential\ncan be used to authenticate to this paywall however, in production\neach customer gets its own license file. The username is the uuid field\nand the password is generated from sha256(name + uuid) and the first 12\ncharacters."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e1864c2ad6905b22586fc953bf7a39155d535b6", "author": {"user": {"login": "keyki", "name": "Krisztian Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4e1864c2ad6905b22586fc953bf7a39155d535b6", "committedDate": "2020-07-24T17:08:33Z", "message": "CB-8135 configure paywall credentials to CM yum repo file\nWhenever a cluster is installed from https://archive.cloudera.com\na basic credential must be provided. This credential can be generated\nfrom the CM license file that is provided by UMS. The test credential\ncan be used to authenticate to this paywall however, in production\neach customer gets its own license file. The username is the uuid field\nand the password is generated from sha256(name + uuid) and the first 12\ncharacters."}, "afterCommit": {"oid": "a84b423fae1dc1f960a4b6cddef20df9ad967338", "author": {"user": {"login": "keyki", "name": "Krisztian Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a84b423fae1dc1f960a4b6cddef20df9ad967338", "committedDate": "2020-07-26T17:36:06Z", "message": "CB-8135 configure paywall credentials to CM yum repo file\nWhenever a cluster is installed from https://archive.cloudera.com\na basic credential must be provided. This credential can be generated\nfrom the CM license file that is provided by UMS. The test credential\ncan be used to authenticate to this paywall however, in production\neach customer gets its own license file. The username is the uuid field\nand the password is generated from sha256(name + uuid) and the first 12\ncharacters."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTE3ODQ4", "url": "https://github.com/hortonworks/cloudbreak/pull/8637#pullrequestreview-455517848", "createdAt": "2020-07-27T07:02:48Z", "commit": {"oid": "a84b423fae1dc1f960a4b6cddef20df9ad967338"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowMjo0OFrOG3V-rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowMjo0OFrOG3V-rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4NDk3Mg==", "bodyText": "just mentioning, don't have to replace: StringUtils#isNoneEmpty could work also", "url": "https://github.com/hortonworks/cloudbreak/pull/8637#discussion_r460684972", "createdAt": "2020-07-27T07:02:48Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "diffHunk": "@@ -414,32 +419,61 @@ private void decoratePillarWithClouderaManagerAutoTls(Cluster cluster, Map<Strin\n         }\n     }\n \n-    private void decoratePillarWithClouderaManagerLicense(Long stackId, Map<String, SaltPillarProperties> servicePillar) {\n+    private Optional<String> decoratePillarWithClouderaManagerLicense(Long stackId, Map<String, SaltPillarProperties> servicePillar) {\n         String userCrn = stackService.get(stackId).getCreator().getUserCrn();\n-\n         Account account = umsClient.getAccountDetails(userCrn, Crn.safeFromString(userCrn).getAccountId(), Optional.empty());\n-\n-        if (StringUtils.isNotEmpty(account.getClouderaManagerLicenseKey())) {\n-            LOGGER.debug(\"Got license key from UMS: {}\", account.getClouderaManagerLicenseKey());\n+        Optional<String> licenseOpt = Optional.ofNullable(account.getClouderaManagerLicenseKey());\n+        if (licenseOpt.isPresent() && isNotEmpty(licenseOpt.get())) {\n+            String license = licenseOpt.get();\n+            LOGGER.debug(\"Got license key from UMS: {}\", license);\n             servicePillar.put(\"cloudera-manager-license\",\n                     new SaltPillarProperties(\"/cloudera-manager/license.sls\",\n                             singletonMap(\"cloudera-manager\",\n-                                    singletonMap(\"license\", account.getClouderaManagerLicenseKey()))));\n+                                    singletonMap(\"license\", license))));\n         }\n+        return licenseOpt;\n     }\n \n-    private void decoratePillarWithClouderaManagerRepo(Long stackId, Long clusterId, Map<String, SaltPillarProperties> servicePillar)\n+    @VisibleForTesting\n+    void decoratePillarWithClouderaManagerRepo(Long clusterId, Map<String, SaltPillarProperties> servicePillar, Optional<String> license)\n             throws CloudbreakOrchestratorFailedException {\n-\n         ClouderaManagerRepo clouderaManagerRepo = clusterComponentConfigProvider.getClouderaManagerRepoDetails(clusterId);\n-\n         if (clouderaManagerRepo == null) {\n             throw new CloudbreakOrchestratorFailedException(\"Cloudera Manager repository details are missing.\");\n         }\n-\n         servicePillar.put(\"cloudera-manager-repo\", new SaltPillarProperties(\"/cloudera-manager/repo.sls\",\n-                singletonMap(\"cloudera-manager\", singletonMap(\"repo\", clouderaManagerRepo))));\n+                singletonMap(\"cloudera-manager\", createCMRepoPillar(clouderaManagerRepo, license))));\n+\n+    }\n \n+    private Map<String, Object> createCMRepoPillar(ClouderaManagerRepo clouderaManagerRepo, Optional<String> license) {\n+        Map<String, Object> pillarValues = new HashMap<>();\n+        pillarValues.put(\"repo\", clouderaManagerRepo);\n+        parseLicense(license).ifPresent(jsonLicense -> {\n+            String username = jsonLicense.getPaywallUsername();\n+            String password = jsonLicense.getPaywallPassword();\n+            if (isNotEmpty(username) && isNotEmpty(password)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a84b423fae1dc1f960a4b6cddef20df9ad967338"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTIxNDY5", "url": "https://github.com/hortonworks/cloudbreak/pull/8637#pullrequestreview-455521469", "createdAt": "2020-07-27T07:09:46Z", "commit": {"oid": "a84b423fae1dc1f960a4b6cddef20df9ad967338"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2635, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}