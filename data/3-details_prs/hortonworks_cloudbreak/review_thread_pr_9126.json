{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MjA1OTQ1", "number": 9126, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjowOToxN1rOEpccUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjoyMToxNFrOEpcs6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODkzMDczOnYy", "diffSide": "RIGHT", "path": "flow/src/test/java/com/sequenceiq/flow/core/Flow2HandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjowOToxN1rOHbHVKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzo0NDo0OFrOHbLGAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5MzcwNQ==", "bodyText": "are these fields not called at all in the tests ? I guess some verification should be useful", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#discussion_r498193705", "createdAt": "2020-10-01T12:09:17Z", "author": {"login": "doktoric"}, "path": "flow/src/test/java/com/sequenceiq/flow/core/Flow2HandlerTest.java", "diffHunk": "@@ -150,6 +152,12 @@\n     @Mock\n     private SpanContext spanContext;\n \n+    @Mock", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1NTM2MQ==", "bodyText": "wrote a test", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#discussion_r498255361", "createdAt": "2020-10-01T13:44:48Z", "author": {"login": "bergerdenes"}, "path": "flow/src/test/java/com/sequenceiq/flow/core/Flow2HandlerTest.java", "diffHunk": "@@ -150,6 +152,12 @@\n     @Mock\n     private SpanContext spanContext;\n \n+    @Mock", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5MzcwNQ=="}, "originalCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODkzNTE2OnYy", "diffSide": "RIGHT", "path": "flow/src/main/java/com/sequenceiq/flow/cleanup/InMemoryCleanup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjoxMDoyN1rOHbHX6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjozMDowNFrOHbIEAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5NDQxMQ==", "bodyText": "this is the same with cancelFlowWithoutDbUpdate", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#discussion_r498194411", "createdAt": "2020-10-01T12:10:27Z", "author": {"login": "topolyai5"}, "path": "flow/src/main/java/com/sequenceiq/flow/cleanup/InMemoryCleanup.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sequenceiq.flow.cleanup;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.cloud.store.InMemoryResourceStateStore;\n+import com.sequenceiq.flow.core.FlowRegister;\n+import com.sequenceiq.flow.core.chain.FlowChains;\n+\n+@Component\n+public class InMemoryCleanup {\n+\n+    @Inject\n+    private FlowRegister runningFlows;\n+\n+    @Inject\n+    private FlowChains flowChains;\n+\n+    public void cancelEveryFlowWithoutDbUpdate() {\n+        for (String resourceType : InMemoryResourceStateStore.getResourceTypes()) {\n+            for (Long resourceId : InMemoryResourceStateStore.getAllResourceId(resourceType)) {\n+                InMemoryResourceStateStore.putResource(resourceType, resourceId, PollGroup.CANCELLED);\n+            }\n+        }\n+        for (String id : runningFlows.getRunningFlowIds()) {\n+            String flowChainId = runningFlows.getFlowChainId(id);\n+            if (flowChainId != null) {\n+                flowChains.removeFullFlowChain(flowChainId);\n+            }\n+            runningFlows.remove(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwNTY5Nw==", "bodyText": "true, reused.", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#discussion_r498205697", "createdAt": "2020-10-01T12:30:04Z", "author": {"login": "bergerdenes"}, "path": "flow/src/main/java/com/sequenceiq/flow/cleanup/InMemoryCleanup.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sequenceiq.flow.cleanup;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.cloud.store.InMemoryResourceStateStore;\n+import com.sequenceiq.flow.core.FlowRegister;\n+import com.sequenceiq.flow.core.chain.FlowChains;\n+\n+@Component\n+public class InMemoryCleanup {\n+\n+    @Inject\n+    private FlowRegister runningFlows;\n+\n+    @Inject\n+    private FlowChains flowChains;\n+\n+    public void cancelEveryFlowWithoutDbUpdate() {\n+        for (String resourceType : InMemoryResourceStateStore.getResourceTypes()) {\n+            for (Long resourceId : InMemoryResourceStateStore.getAllResourceId(resourceType)) {\n+                InMemoryResourceStateStore.putResource(resourceType, resourceId, PollGroup.CANCELLED);\n+            }\n+        }\n+        for (String id : runningFlows.getRunningFlowIds()) {\n+            String flowChainId = runningFlows.getFlowChainId(id);\n+            if (flowChainId != null) {\n+                flowChains.removeFullFlowChain(flowChainId);\n+            }\n+            runningFlows.remove(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5NDQxMQ=="}, "originalCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODk3MzIyOnYy", "diffSide": "RIGHT", "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjoyMToxNFrOHbHvkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjoyODoxMFrOHbH_ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMDQ2Ng==", "bodyText": "why don't you send this inside the lamda?", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#discussion_r498200466", "createdAt": "2020-10-01T12:21:14Z", "author": {"login": "topolyai5"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -184,11 +193,24 @@ private void handleFlowControlEvent(String key, Payload payload, FlowParameters\n         LOGGER.debug(\"flow control event arrived: key: {}, flowid: {}, usercrn: {}, payload: {}\", key, flowId, flowParameters.getFlowTriggerUserCrn(), payload);\n         Flow flow = runningFlows.get(flowId);\n         if (flow != null) {\n+            MutableBoolean isFlowCancelled = new MutableBoolean(false);\n             transactionService.required(() -> {\n                 Optional<FlowLog> lastFlowLog = flowLogService.getLastFlowLog(flow.getFlowId());\n-                lastFlowLog.ifPresent(flowLog -> updateFlowLogStatus(key, payload, flowChainId, flow, flowLog, flowParameters));\n+                lastFlowLog.ifPresent(flowLog -> {\n+                    String nodeId = nodeConfig.getId();\n+                    if (flowLog.getCloudbreakNodeId() == null || flowLog.getCloudbreakNodeId().equals(nodeId)) {\n+                        updateFlowLogStatus(key, payload, flowChainId, flow, flowLog, flowParameters);\n+                    } else {\n+                        LOGGER.warn(\"Flow {} was handled by another node {}, current node ID is {}, abandoning.\",\n+                                flow.getFlowId(), flowLog.getCloudbreakNodeId(), nodeId);\n+                        inMemoryCleanup.cancelFlowWithoutDbUpdate(flow.getFlowId());\n+                        isFlowCancelled.setTrue();\n+                    }\n+                });\n             });\n-            flow.sendEvent(key, flowParameters.getFlowTriggerUserCrn(), payload, flowParameters.getSpanContext());\n+            if (!isFlowCancelled.booleanValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMjE1Mw==", "bodyText": "it may take some time to consume events, and it shouldn't be in a transaction then", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#discussion_r498202153", "createdAt": "2020-10-01T12:24:09Z", "author": {"login": "sodre90"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -184,11 +193,24 @@ private void handleFlowControlEvent(String key, Payload payload, FlowParameters\n         LOGGER.debug(\"flow control event arrived: key: {}, flowid: {}, usercrn: {}, payload: {}\", key, flowId, flowParameters.getFlowTriggerUserCrn(), payload);\n         Flow flow = runningFlows.get(flowId);\n         if (flow != null) {\n+            MutableBoolean isFlowCancelled = new MutableBoolean(false);\n             transactionService.required(() -> {\n                 Optional<FlowLog> lastFlowLog = flowLogService.getLastFlowLog(flow.getFlowId());\n-                lastFlowLog.ifPresent(flowLog -> updateFlowLogStatus(key, payload, flowChainId, flow, flowLog, flowParameters));\n+                lastFlowLog.ifPresent(flowLog -> {\n+                    String nodeId = nodeConfig.getId();\n+                    if (flowLog.getCloudbreakNodeId() == null || flowLog.getCloudbreakNodeId().equals(nodeId)) {\n+                        updateFlowLogStatus(key, payload, flowChainId, flow, flowLog, flowParameters);\n+                    } else {\n+                        LOGGER.warn(\"Flow {} was handled by another node {}, current node ID is {}, abandoning.\",\n+                                flow.getFlowId(), flowLog.getCloudbreakNodeId(), nodeId);\n+                        inMemoryCleanup.cancelFlowWithoutDbUpdate(flow.getFlowId());\n+                        isFlowCancelled.setTrue();\n+                    }\n+                });\n             });\n-            flow.sendEvent(key, flowParameters.getFlowTriggerUserCrn(), payload, flowParameters.getSpanContext());\n+            if (!isFlowCancelled.booleanValue()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMDQ2Ng=="}, "originalCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMzQzMg==", "bodyText": "I see, thanks", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#discussion_r498203432", "createdAt": "2020-10-01T12:26:16Z", "author": {"login": "topolyai5"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -184,11 +193,24 @@ private void handleFlowControlEvent(String key, Payload payload, FlowParameters\n         LOGGER.debug(\"flow control event arrived: key: {}, flowid: {}, usercrn: {}, payload: {}\", key, flowId, flowParameters.getFlowTriggerUserCrn(), payload);\n         Flow flow = runningFlows.get(flowId);\n         if (flow != null) {\n+            MutableBoolean isFlowCancelled = new MutableBoolean(false);\n             transactionService.required(() -> {\n                 Optional<FlowLog> lastFlowLog = flowLogService.getLastFlowLog(flow.getFlowId());\n-                lastFlowLog.ifPresent(flowLog -> updateFlowLogStatus(key, payload, flowChainId, flow, flowLog, flowParameters));\n+                lastFlowLog.ifPresent(flowLog -> {\n+                    String nodeId = nodeConfig.getId();\n+                    if (flowLog.getCloudbreakNodeId() == null || flowLog.getCloudbreakNodeId().equals(nodeId)) {\n+                        updateFlowLogStatus(key, payload, flowChainId, flow, flowLog, flowParameters);\n+                    } else {\n+                        LOGGER.warn(\"Flow {} was handled by another node {}, current node ID is {}, abandoning.\",\n+                                flow.getFlowId(), flowLog.getCloudbreakNodeId(), nodeId);\n+                        inMemoryCleanup.cancelFlowWithoutDbUpdate(flow.getFlowId());\n+                        isFlowCancelled.setTrue();\n+                    }\n+                });\n             });\n-            flow.sendEvent(key, flowParameters.getFlowTriggerUserCrn(), payload, flowParameters.getSpanContext());\n+            if (!isFlowCancelled.booleanValue()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMDQ2Ng=="}, "originalCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwNDU1NA==", "bodyText": "because that would change the logic: the sendEvent is necessary in the case lastFlowLog is not present", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#discussion_r498204554", "createdAt": "2020-10-01T12:28:10Z", "author": {"login": "bergerdenes"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -184,11 +193,24 @@ private void handleFlowControlEvent(String key, Payload payload, FlowParameters\n         LOGGER.debug(\"flow control event arrived: key: {}, flowid: {}, usercrn: {}, payload: {}\", key, flowId, flowParameters.getFlowTriggerUserCrn(), payload);\n         Flow flow = runningFlows.get(flowId);\n         if (flow != null) {\n+            MutableBoolean isFlowCancelled = new MutableBoolean(false);\n             transactionService.required(() -> {\n                 Optional<FlowLog> lastFlowLog = flowLogService.getLastFlowLog(flow.getFlowId());\n-                lastFlowLog.ifPresent(flowLog -> updateFlowLogStatus(key, payload, flowChainId, flow, flowLog, flowParameters));\n+                lastFlowLog.ifPresent(flowLog -> {\n+                    String nodeId = nodeConfig.getId();\n+                    if (flowLog.getCloudbreakNodeId() == null || flowLog.getCloudbreakNodeId().equals(nodeId)) {\n+                        updateFlowLogStatus(key, payload, flowChainId, flow, flowLog, flowParameters);\n+                    } else {\n+                        LOGGER.warn(\"Flow {} was handled by another node {}, current node ID is {}, abandoning.\",\n+                                flow.getFlowId(), flowLog.getCloudbreakNodeId(), nodeId);\n+                        inMemoryCleanup.cancelFlowWithoutDbUpdate(flow.getFlowId());\n+                        isFlowCancelled.setTrue();\n+                    }\n+                });\n             });\n-            flow.sendEvent(key, flowParameters.getFlowTriggerUserCrn(), payload, flowParameters.getSpanContext());\n+            if (!isFlowCancelled.booleanValue()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMDQ2Ng=="}, "originalCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2231, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}