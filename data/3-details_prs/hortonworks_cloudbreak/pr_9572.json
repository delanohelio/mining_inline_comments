{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNDgwOTEx", "number": 9572, "title": "CB-9123 URL configurable in the integration test. Supported: how many\u2026", "bodyText": "Evaluate the response by URI an http method if it appears in the pre-defined response list. The order of the responses matter with the same path and method. (Check the unit tests)\nEvaluate the times:\n\n0: will be permanently in the list, the next ones in the list with the same path and method will be never evaluate\n1...n: evaluate n times. If reach the n-th, the response will be removed from the list of path.\n\nEvaluate the response or exception\n\nOnly if the the status code is 200 return with the response.\nIf the status code is null, throw a NotFound status.", "createdAt": "2020-12-04T11:44:29Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9572", "merged": true, "mergeCommit": {"oid": "d4c084a9475d89a6e23e475b411d1cbe054a0d6e"}, "closed": true, "closedAt": "2020-12-08T17:26:12Z", "author": {"login": "topolyai5"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjxEUZgBqjQwNzgyODMwMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkN4VAAFqTU0NzQ1NDQ3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c4bc16b2cea3d2692c584035d5180f8bfb92b3f", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8c4bc16b2cea3d2692c584035d5180f8bfb92b3f", "committedDate": "2020-12-04T11:43:53Z", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs"}, "afterCommit": {"oid": "ad9ae8ab992085574d03dbc3ad5b517b033b2629", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ad9ae8ab992085574d03dbc3ad5b517b033b2629", "committedDate": "2020-12-07T08:14:08Z", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDM5MTk5", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#pullrequestreview-546039199", "createdAt": "2020-12-07T11:00:10Z", "commit": {"oid": "ad9ae8ab992085574d03dbc3ad5b517b033b2629"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTowMDoxMFrOIAhOrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTowMDoxMFrOIAhOrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxNTM0MA==", "bodyText": "Why so many commented code lines?", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#discussion_r537415340", "createdAt": "2020-12-07T11:00:10Z", "author": {"login": "attilapalfi92"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/answer/DefaultResponseConfigure.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.sequenceiq.it.cloudbreak.dto.mock.answer;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hamcrest.Matcher;\n+\n+import com.sequenceiq.it.cloudbreak.dto.CloudbreakTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.mock.Method;\n+import com.sequenceiq.it.cloudbreak.mock.ExecuteQueryToMockInfrastructure;\n+import com.sequenceiq.it.cloudbreak.testcase.mock.response.MockResponse;\n+\n+public class DefaultResponseConfigure<T extends CloudbreakTestDto> {\n+    private final Method method;\n+\n+    private final String path;\n+\n+    private final T testDto;\n+\n+    private final ExecuteQueryToMockInfrastructure executeQuery;\n+\n+    private final Map<String, String> pathVariables = new HashMap<>();\n+\n+    public DefaultResponseConfigure(Method method, String path, T testDto, ExecuteQueryToMockInfrastructure executeQuery) {\n+        this.method = method;\n+        this.path = path;\n+        this.executeQuery = executeQuery;\n+        this.testDto = testDto;\n+    }\n+\n+    public Method getMethod() {\n+        return method;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public T clearDefinedResponses() {\n+//        mock.getDynamicRouteStack().clear(method.getHttpMethod(), path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9ae8ab992085574d03dbc3ad5b517b033b2629"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad9ae8ab992085574d03dbc3ad5b517b033b2629", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ad9ae8ab992085574d03dbc3ad5b517b033b2629", "committedDate": "2020-12-07T08:14:08Z", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs"}, "afterCommit": {"oid": "4e32919e9374f73f1eefe85662a821f2e12d73e3", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4e32919e9374f73f1eefe85662a821f2e12d73e3", "committedDate": "2020-12-07T11:16:16Z", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "040654056c8b66b3a5536f3b0a2d0afc76461a64", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/040654056c8b66b3a5536f3b0a2d0afc76461a64", "committedDate": "2020-12-07T11:33:29Z", "message": "thread count=8"}, "afterCommit": {"oid": "4e32919e9374f73f1eefe85662a821f2e12d73e3", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4e32919e9374f73f1eefe85662a821f2e12d73e3", "committedDate": "2020-12-07T11:16:16Z", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d89a376152ae9816ddf34f9fb9311250d06c180", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5d89a376152ae9816ddf34f9fb9311250d06c180", "committedDate": "2020-12-07T14:42:36Z", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e32919e9374f73f1eefe85662a821f2e12d73e3", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4e32919e9374f73f1eefe85662a821f2e12d73e3", "committedDate": "2020-12-07T11:16:16Z", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs"}, "afterCommit": {"oid": "5d89a376152ae9816ddf34f9fb9311250d06c180", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5d89a376152ae9816ddf34f9fb9311250d06c180", "committedDate": "2020-12-07T14:42:36Z", "message": "CB-9123 URL configurable in the integration test. Supported: how many times, custom status codes with messages. The pre-defined responses are pertians to a resource only and exclusively. You can define easily in the ITs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2ODI2NzYz", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#pullrequestreview-546826763", "createdAt": "2020-12-08T07:51:12Z", "commit": {"oid": "5d89a376152ae9816ddf34f9fb9311250d06c180"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDU0NDcw", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#pullrequestreview-547454470", "createdAt": "2020-12-08T17:18:39Z", "commit": {"oid": "5d89a376152ae9816ddf34f9fb9311250d06c180"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoxODo0MFrOIBq_mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzo0MzowNFrOIBsnHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyMzg5Ng==", "bodyText": "If sparkservice eliminated we might consider to rename this annotation,or even yield this from a swagger doc (if I recall correctly mocks are generated based on swagger)", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#discussion_r538623896", "createdAt": "2020-12-08T17:18:40Z", "author": {"login": "afarsang"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/endpoint/ClouderaManagerEndpoints.java", "diffHunk": "@@ -1,157 +1,201 @@\n package com.sequenceiq.it.cloudbreak.dto.mock.endpoint;\n \n-import com.cloudera.api.swagger.model.ApiAuthRoleMetadataList;\n import com.cloudera.api.swagger.model.ApiClusterTemplate;\n-import com.cloudera.api.swagger.model.ApiCommand;\n-import com.cloudera.api.swagger.model.ApiCommandList;\n-import com.cloudera.api.swagger.model.ApiConfigList;\n-import com.cloudera.api.swagger.model.ApiEcho;\n-import com.cloudera.api.swagger.model.ApiHostList;\n-import com.cloudera.api.swagger.model.ApiHostTemplateList;\n-import com.cloudera.api.swagger.model.ApiParcelList;\n-import com.cloudera.api.swagger.model.ApiRemoteDataContext;\n-import com.cloudera.api.swagger.model.ApiRole;\n-import com.cloudera.api.swagger.model.ApiRoleList;\n-import com.cloudera.api.swagger.model.ApiService;\n-import com.cloudera.api.swagger.model.ApiServiceList;\n import com.cloudera.api.swagger.model.ApiUser2;\n-import com.cloudera.api.swagger.model.ApiUser2List;\n-import com.cloudera.api.swagger.model.ApiVersionInfo;\n+import com.sequenceiq.it.cloudbreak.dto.CloudbreakTestDto;\n import com.sequenceiq.it.cloudbreak.dto.mock.SparkUri;\n-import com.sequenceiq.it.cloudbreak.dto.mock.answer.AnswerWithoutRequest;\n-import com.sequenceiq.it.cloudbreak.dto.mock.answer.ClouderaManagerPreparedRequestAnswer;\n-import com.sequenceiq.it.cloudbreak.dto.mock.answer.StringRequestAnswer;\n+import com.sequenceiq.it.cloudbreak.dto.mock.answer.DefaultResponseConfigure;\n+import com.sequenceiq.it.cloudbreak.mock.ExecuteQueryToMockInfrastructure;\n \n-public final class ClouderaManagerEndpoints {\n+public final class ClouderaManagerEndpoints<T extends CloudbreakTestDto> {\n     public static final String API_ROOT = \"/api/v31\";\n \n-    private ClouderaManagerEndpoints() {\n+    private T testDto;\n+\n+    private ExecuteQueryToMockInfrastructure executeQueryToMockInfrastructure;\n+\n+    public ClouderaManagerEndpoints(T testDto, ExecuteQueryToMockInfrastructure executeQueryToMockInfrastructure) {\n+        this.testDto = testDto;\n+        this.executeQueryToMockInfrastructure = executeQueryToMockInfrastructure;\n+    }\n+\n+    public Users<T> users() {\n+        return (Users<T>) EndpointProxyFactory.create(Users.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public Admin<T> usersAdmin() {\n+        return (Admin<T>) EndpointProxyFactory.create(Admin.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public ClusterHosts<T> clusterHosts() {\n+        return (ClusterHosts<T>) EndpointProxyFactory.create(ClusterHosts.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public ClusterCommands.DeployConfig<T> clusterCommandsDeployConfig() {\n+        return (ClusterCommands.DeployConfig<T>) EndpointProxyFactory.create(ClusterCommands.DeployConfig.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public ClusterHostTemplates.CommandsApplyHostTemplate<T> commandsApplyHostTemplate() {\n+        return (ClusterHostTemplates.CommandsApplyHostTemplate<T>)\n+                EndpointProxyFactory.create(ClusterHostTemplates.CommandsApplyHostTemplate.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public Commands<T> commands() {\n+        return (Commands<T>) EndpointProxyFactory.create(Commands.class, testDto, executeQueryToMockInfrastructure);\n+    }\n+\n+    public ClouderaManagerHosts<T> clouderaManagerHosts() {\n+        return (ClouderaManagerHosts<T>) EndpointProxyFactory.create(ClouderaManagerHosts.class, testDto, executeQueryToMockInfrastructure);\n     }\n \n     @SparkUri(url = API_ROOT + \"/cm/importClusterTemplate\", requestType = ApiClusterTemplate.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d89a376152ae9816ddf34f9fb9311250d06c180"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzNDI1Nw==", "bodyText": "Honestly I am missing the original keywords here (given when then) a bit.\nwould it make sense call this as 'whenMockSpiRequestedWith()' or something similar?", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#discussion_r538634257", "createdAt": "2020-12-08T17:28:25Z", "author": {"login": "afarsang"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/EnvironmentEditTest.java", "diffHunk": "@@ -50,39 +51,37 @@ protected void setupTest(TestContext testContext) {\n             when = \"change managed ssh key to existing one\",\n             then = \"delete managed ssh key but not create new one\")\n     public void authenticationEditWhenSetExistingKeyAndDeleteManagedSuccessfully(MockedTestContext testContext) {\n+        String randomPublicKeyId = UUID.randomUUID().toString();\n         testContext\n-                .given(HttpMock.class).whenRequested(SpiEndpoints.RegisterPublicKey.class).post()\n-                .thenReturn((s, uriParameters) -> \"\")\n-                .whenRequested(SpiEndpoints.GetPublicKey.class).get()\n-                .pathVariable(\"publicKeyId\", \"id\")\n-                .thenReturn((s, uriParameters) -> true)\n+                .given(HttpMock.class)\n+                .mockSpi().getPublicKey().get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d89a376152ae9816ddf34f9fb9311250d06c180"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY1MDM5OQ==", "bodyText": "I guess this line wanted to be 'registerPublikKey()' verification", "url": "https://github.com/hortonworks/cloudbreak/pull/9572#discussion_r538650399", "createdAt": "2020-12-08T17:43:04Z", "author": {"login": "afarsang"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/EnvironmentEditTest.java", "diffHunk": "@@ -50,39 +51,37 @@ protected void setupTest(TestContext testContext) {\n             when = \"change managed ssh key to existing one\",\n             then = \"delete managed ssh key but not create new one\")\n     public void authenticationEditWhenSetExistingKeyAndDeleteManagedSuccessfully(MockedTestContext testContext) {\n+        String randomPublicKeyId = UUID.randomUUID().toString();\n         testContext\n-                .given(HttpMock.class).whenRequested(SpiEndpoints.RegisterPublicKey.class).post()\n-                .thenReturn((s, uriParameters) -> \"\")\n-                .whenRequested(SpiEndpoints.GetPublicKey.class).get()\n-                .pathVariable(\"publicKeyId\", \"id\")\n-                .thenReturn((s, uriParameters) -> true)\n+                .given(HttpMock.class)\n+                .mockSpi().getPublicKey().get()\n+                .pathVariable(\"publicKeyId\", randomPublicKeyId)\n+                .thenReturn(Map.of(\"publicKeyId\", randomPublicKeyId, \"publicKey\", \"asd\"))\n+\n                 .given(EnvironmentTestDto.class)\n                 .withCreateFreeIpa(false)\n                 .when(environmentTestClient.create())\n                 .await(EnvironmentStatus.AVAILABLE)\n \n-//                .given(HttpMock.class).whenRequested(SpiEndpoints.UnregisterPublicKey.class).post().clearCalls()\n-//                .whenRequested(SpiEndpoints.UnregisterPublicKey.class).post()\n-//                .thenReturn((s, model, uriParameters) -> false)\n                 .given(EnvironmentAuthenticationTestDto.class)\n-                .withPublicKeyId(\"existing-public-key\")\n+                .withPublicKeyId(randomPublicKeyId)\n                 .withPublicKey(null)\n                 .given(EnvironmentTestDto.class)\n                 .when(environmentTestClient.changeAuthentication())\n                 .when(environmentTestClient.describe())\n                 .then((tc, t, c) -> {\n                     String publicKeyId = t.getResponse().getAuthentication().getPublicKeyId();\n                     String publicKey = t.getResponse().getAuthentication().getPublicKey();\n-                    if (!\"existing-public-key\".equals(publicKeyId)) {\n+                    if (!randomPublicKeyId.equals(publicKeyId)) {\n                         throw new TestFailException(\"The auth public key id was not changed, but it should be changed\");\n                     }\n                     if (publicKey != null) {\n                         throw new TestFailException(\"The auth public key should be null\");\n                     }\n                     return t;\n                 })\n-                .given(HttpMock.class).whenRequested(SpiEndpoints.UnregisterPublicKey.class).post().verify(CheckCount.times(1))\n-                .given(HttpMock.class).whenRequested(SpiEndpoints.RegisterPublicKey.class).post().verify(CheckCount.times(0))\n+                .mockSpi().unregisterPublicKey().post().times(1).verify()\n+                .mockSpi().unregisterPublicKey().post().times(0).verify()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d89a376152ae9816ddf34f9fb9311250d06c180"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1928, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}