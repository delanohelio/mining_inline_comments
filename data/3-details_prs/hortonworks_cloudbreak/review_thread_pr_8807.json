{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MzU1NjE5", "number": 8807, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzowNDozNlrOEYCxQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoyMDo1NFrOEYDLkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjQ2NjU5OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzowNDozNlrOHAKkQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowOTowMVrOHAfYfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNTE2OA==", "bodyText": "could you give this variable a meaningful name?", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r469935168", "createdAt": "2020-08-13T13:04:36Z", "author": {"login": "lacikaaa"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+        Map<String, String> ret = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6754dc074a6e51c86c2414fb24adb41a2edd393"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjIyMw==", "bodyText": "Renamed.", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r470276223", "createdAt": "2020-08-13T22:09:01Z", "author": {"login": "gitmfox"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+        Map<String, String> ret = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNTE2OA=="}, "originalCommit": {"oid": "d6754dc074a6e51c86c2414fb24adb41a2edd393"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjQ3ODA4OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzowNzoyNVrOHAKrLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowOTozN1rOHAfZdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNjk0Mg==", "bodyText": "I don't prefer returns in the middle of a method. Could you add an else branch for the rest f the code, so it's obvious there is 2 exit point?", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r469936942", "createdAt": "2020-08-13T13:07:25Z", "author": {"login": "lacikaaa"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6754dc074a6e51c86c2414fb24adb41a2edd393"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNzQ1Nw==", "bodyText": "shall we log here it's empty?", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r469937457", "createdAt": "2020-08-13T13:08:17Z", "author": {"login": "lacikaaa"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNjk0Mg=="}, "originalCommit": {"oid": "d6754dc074a6e51c86c2414fb24adb41a2edd393"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjQ2OA==", "bodyText": "Fixed first issue, added log statement as suggested.", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r470276468", "createdAt": "2020-08-13T22:09:37Z", "author": {"login": "gitmfox"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNjk0Mg=="}, "originalCommit": {"oid": "d6754dc074a6e51c86c2414fb24adb41a2edd393"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjQ4OTcwOnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoxMDoxMFrOHAKyAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjoxMTowM1rOHAfb7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzODY4OA==", "bodyText": "what happens if there is no = sign? I think it would throw an exception when you try to assign value to val. Shouldn't we handle this somehow?", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r469938688", "createdAt": "2020-08-13T13:10:10Z", "author": {"login": "lacikaaa"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+        Map<String, String> ret = new HashMap<>();\n+        String[] mappings = userMappingStr.split(\";\");\n+        Arrays.stream(mappings).forEach(mapping -> {\n+            String[] entry = mapping.split(\"=\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6754dc074a6e51c86c2414fb24adb41a2edd393"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NzEwMw==", "bodyText": "Right. Now handles the lack of an equals sign by logging a warning and skipping the entry.", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r470277103", "createdAt": "2020-08-13T22:11:03Z", "author": {"login": "gitmfox"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+        Map<String, String> ret = new HashMap<>();\n+        String[] mappings = userMappingStr.split(\";\");\n+        Arrays.stream(mappings).forEach(mapping -> {\n+            String[] entry = mapping.split(\"=\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzODY4OA=="}, "originalCommit": {"oid": "d6754dc074a6e51c86c2414fb24adb41a2edd393"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjUzMzkzOnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoyMDo1NFrOHALNFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjoxMzo1NlrOHAfgHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0NTYyMA==", "bodyText": "what if none found? are we sure there is at least one?", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r469945620", "createdAt": "2020-08-13T13:20:54Z", "author": {"login": "lacikaaa"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+        Map<String, String> ret = new HashMap<>();\n+        String[] mappings = userMappingStr.split(\";\");\n+        Arrays.stream(mappings).forEach(mapping -> {\n+            String[] entry = mapping.split(\"=\");\n+            String key = entry[0];\n+            String val = entry[1];\n+            ret.put(key, val);\n+        });\n+        return ret;\n+    }\n+\n+    private Map<String, String> getExistingAzureUserMapping(RolesResourceApi rolesResourceApi, String clusterName, String rangerUserSyncRoleName)\n+            throws ApiException {\n+        ApiConfigList roleConfigList = rolesResourceApi.readRoleConfig(clusterName, rangerUserSyncRoleName, RANGER_SERVICE_NAME, \"summary\");\n+        ApiConfig azureUserMappingConfig = roleConfigList.getItems().stream()\n+                .filter(apiConfig -> apiConfig.getName().equals(AZURE_USER_MAPPING))\n+                .findFirst()\n+                .get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6754dc074a6e51c86c2414fb24adb41a2edd393"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3ODE3NA==", "bodyText": "I am not sure if we can be sure that the config is always present--probably not, but in any case we should protect against this possibility. Now checks that the optional value is present before getting it. If it is absent, an empty map is returned.", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r470278174", "createdAt": "2020-08-13T22:13:56Z", "author": {"login": "gitmfox"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+        Map<String, String> ret = new HashMap<>();\n+        String[] mappings = userMappingStr.split(\";\");\n+        Arrays.stream(mappings).forEach(mapping -> {\n+            String[] entry = mapping.split(\"=\");\n+            String key = entry[0];\n+            String val = entry[1];\n+            ret.put(key, val);\n+        });\n+        return ret;\n+    }\n+\n+    private Map<String, String> getExistingAzureUserMapping(RolesResourceApi rolesResourceApi, String clusterName, String rangerUserSyncRoleName)\n+            throws ApiException {\n+        ApiConfigList roleConfigList = rolesResourceApi.readRoleConfig(clusterName, rangerUserSyncRoleName, RANGER_SERVICE_NAME, \"summary\");\n+        ApiConfig azureUserMappingConfig = roleConfigList.getItems().stream()\n+                .filter(apiConfig -> apiConfig.getName().equals(AZURE_USER_MAPPING))\n+                .findFirst()\n+                .get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0NTYyMA=="}, "originalCommit": {"oid": "d6754dc074a6e51c86c2414fb24adb41a2edd393"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2394, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}