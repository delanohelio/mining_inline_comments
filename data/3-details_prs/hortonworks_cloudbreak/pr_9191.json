{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODAyMTM3", "number": 9191, "title": "CB-8930 - CM API tracing implemented", "bodyText": "extracting cm api name from stack trace\nIf I were using the URL, it would contain cluster specific info, like cluster name.\nThis would cause the number of operations to be infinite and filtering for CM operations would be impossible.\nThis is why I'm using the CM API's class and method names.\nAdded unit test for the complicated logic.\nUsing StackWalker so it does not have a performance impact.", "createdAt": "2020-10-09T20:21:52Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9191", "merged": true, "mergeCommit": {"oid": "df885d32b33d2e2fcd07764632eb86369a8084a7"}, "closed": true, "closedAt": "2020-10-13T15:22:54Z", "author": {"login": "attilapalfi92"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRxLmbAFqTUwNjQ2NzYwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSJYLzABqjM4NzE2MzcwODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NDY3NjA0", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#pullrequestreview-506467604", "createdAt": "2020-10-12T09:50:43Z", "commit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTo1MDo0M1rOHf3dWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowOToxMlrOHf4Iag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE3NjUzNg==", "bodyText": "could you remove jetbrains annotations?", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503176536", "createdAt": "2020-10-12T09:50:43Z", "author": {"login": "lacikaaa"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/CmOkHttpTracingInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.tracing.TracingUtil;\n+import com.squareup.okhttp.Interceptor;\n+import com.squareup.okhttp.Request;\n+import com.squareup.okhttp.Response;\n+\n+import io.opentracing.References;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+\n+@Component\n+public class CmOkHttpTracingInterceptor implements Interceptor {\n+\n+    private static final String CLOUDERA_MANAGER = \"Cloudera Manager\";\n+\n+    @Inject\n+    private Tracer tracer;\n+\n+    @Inject\n+    private StackTraceBasedCmApiNameExtractor stackTraceBasedCmApiNameExtractor;\n+\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MTA4NQ==", "bodyText": "why not Arrays.asList(stackTrace)?", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503181085", "createdAt": "2020-10-12T09:58:15Z", "author": {"login": "lacikaaa"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackTraceBasedCmApiNameExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackTraceBasedCmApiNameExtractor.class);\n+\n+    public Optional<String> getCmApiName(StackTraceElement[] stackTrace) {\n+        List<StackTraceElement> list = new ArrayList<>();\n+        Collections.addAll(list, stackTrace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MzY1Mw==", "bodyText": "this empty line indicates this method should be splitted into 2 separate at least", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503183653", "createdAt": "2020-10-12T10:02:26Z", "author": {"login": "lacikaaa"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackTraceBasedCmApiNameExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackTraceBasedCmApiNameExtractor.class);\n+\n+    public Optional<String> getCmApiName(StackTraceElement[] stackTrace) {\n+        List<StackTraceElement> list = new ArrayList<>();\n+        Collections.addAll(list, stackTrace);\n+        Optional<StackTraceElement> first = list.stream()\n+                .filter(e -> e.getClassName().startsWith(\"com.cloudera.api.swagger\"))\n+                .filter(e -> !e.getClassName().startsWith(\"com.cloudera.api.swagger.client\"))\n+                .findFirst();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NDgwMQ==", "bodyText": "what's the performance impact of this? We make a lot of call to CM, if we inspect every calls stacktrace, could it increase the load significantly?", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503184801", "createdAt": "2020-10-12T10:04:23Z", "author": {"login": "lacikaaa"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackTraceBasedCmApiNameExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackTraceBasedCmApiNameExtractor.class);\n+\n+    public Optional<String> getCmApiName(StackTraceElement[] stackTrace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NzU2Mg==", "bodyText": "this could bre refactored into a separate method:\n    private Span createSpan(Chain chain) {\n        Request request = chain.request();\n        Optional<String> cmApiNameOptional = stackTraceBasedCmApiNameExtractor.getCmApiName(Thread.currentThread().getStackTrace());\n        String cmApiName = cmApiNameOptional.orElse(request.url().getPath());\n        Span span = tracer.buildSpan(\"CM - [\" + cmApiName + \"] \")\n                .addReference(References.FOLLOWS_FROM, tracer.activeSpan() != null ? tracer.activeSpan().context() : null)\n                .start();\n        span.setTag(TracingUtil.COMPONENT, CLOUDERA_MANAGER);\n        span.setTag(TracingUtil.URL, request.url().toString());\n        span.setTag(TracingUtil.HTTP_METHOD, request.method());\n        span.setTag(TracingUtil.HEADERS, Json.silent(request.headers().toMultimap()).getValue());\n        return span;\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503187562", "createdAt": "2020-10-12T10:09:12Z", "author": {"login": "lacikaaa"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/CmOkHttpTracingInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.tracing.TracingUtil;\n+import com.squareup.okhttp.Interceptor;\n+import com.squareup.okhttp.Request;\n+import com.squareup.okhttp.Response;\n+\n+import io.opentracing.References;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+\n+@Component\n+public class CmOkHttpTracingInterceptor implements Interceptor {\n+\n+    private static final String CLOUDERA_MANAGER = \"Cloudera Manager\";\n+\n+    @Inject\n+    private Tracer tracer;\n+\n+    @Inject\n+    private StackTraceBasedCmApiNameExtractor stackTraceBasedCmApiNameExtractor;\n+\n+    @NotNull\n+    @Override\n+    public Response intercept(@NotNull Chain chain) throws IOException {\n+        Optional<String> cmApiNameOptional = stackTraceBasedCmApiNameExtractor.getCmApiName(Thread.currentThread().getStackTrace());\n+        Request request = chain.request();\n+        String cmApiName = cmApiNameOptional.orElse(request.url().getPath());\n+        Span span = tracer.buildSpan(\"CM - [\" + cmApiName + \"] \")\n+                .addReference(References.FOLLOWS_FROM, tracer.activeSpan() != null ? tracer.activeSpan().context() : null)\n+                .start();\n+        span.setTag(TracingUtil.COMPONENT, CLOUDERA_MANAGER);\n+        span.setTag(TracingUtil.URL, request.url().toString());\n+        span.setTag(TracingUtil.HTTP_METHOD, request.method());\n+        span.setTag(TracingUtil.HEADERS, Json.silent(chain.request().headers().toMultimap()).getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/f4097c263bf55b5281dd0311ac8209035cabedf1", "committedDate": "2020-10-09T20:20:44Z", "message": "CB-8930 - CM API tracing implemented\n- extracting cm api name from stack trace\nIf I were using the URL, it would contain cluster specific info, like cluster name.\nThis would cause the number of operations to be infinite and filtering for CM operations would be impossible.\nThis is why I'm using the CM API's class and method names.\nAdded unit test for the complicated logic."}, "afterCommit": {"oid": "7b6516210344257e658866f78f233df68d69c3ab", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7b6516210344257e658866f78f233df68d69c3ab", "committedDate": "2020-10-12T16:10:47Z", "message": "CB-8930 - CM API tracing implemented\n- extracting cm api name from stack trace\nIf I were using the URL, it would contain cluster specific info, like cluster name.\nThis would cause the number of operations to be infinite and filtering for CM operations would be impossible.\nThis is why I'm using the CM API's class and method names.\nAdded unit test for the complicated logic.\nUsing StackWalker so it does not have a performance impact."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b6516210344257e658866f78f233df68d69c3ab", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7b6516210344257e658866f78f233df68d69c3ab", "committedDate": "2020-10-12T16:10:47Z", "message": "CB-8930 - CM API tracing implemented\n- extracting cm api name from stack trace\nIf I were using the URL, it would contain cluster specific info, like cluster name.\nThis would cause the number of operations to be infinite and filtering for CM operations would be impossible.\nThis is why I'm using the CM API's class and method names.\nAdded unit test for the complicated logic.\nUsing StackWalker so it does not have a performance impact."}, "afterCommit": {"oid": "8070dd2c194cce967180b876bba9bdad3473f38e", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8070dd2c194cce967180b876bba9bdad3473f38e", "committedDate": "2020-10-12T16:22:14Z", "message": "CB-8930 - CM API tracing implemented\n- extracting cm api name from stack trace\nIf I were using the URL, it would contain cluster specific info, like cluster name.\nThis would cause the number of operations to be infinite and filtering for CM operations would be impossible.\nThis is why I'm using the CM API's class and method names.\nAdded unit test for the complicated logic.\nUsing StackWalker so it does not have a performance impact."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzY4ODkw", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#pullrequestreview-506768890", "createdAt": "2020-10-12T16:37:44Z", "commit": {"oid": "8070dd2c194cce967180b876bba9bdad3473f38e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8070dd2c194cce967180b876bba9bdad3473f38e", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8070dd2c194cce967180b876bba9bdad3473f38e", "committedDate": "2020-10-12T16:22:14Z", "message": "CB-8930 - CM API tracing implemented\n- extracting cm api name from stack trace\nIf I were using the URL, it would contain cluster specific info, like cluster name.\nThis would cause the number of operations to be infinite and filtering for CM operations would be impossible.\nThis is why I'm using the CM API's class and method names.\nAdded unit test for the complicated logic.\nUsing StackWalker so it does not have a performance impact."}, "afterCommit": {"oid": "e4af4cbbc30bd2becbed1567204e8a8cf68bd71c", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e4af4cbbc30bd2becbed1567204e8a8cf68bd71c", "committedDate": "2020-10-13T14:05:20Z", "message": "CB-8930 - CM API tracing implemented\n- extracting cm api name from stack trace\nIf I were using the URL, it would contain cluster specific info, like cluster name.\nThis would cause the number of operations to be infinite and filtering for CM operations would be impossible.\nThis is why I'm using the CM API's class and method names.\nAdded unit test for the complicated logic.\nUsing StackWalker so it does not have a performance impact."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9ac92ee1d1e8c9f6a0516b91c54eefd12e05e38", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e9ac92ee1d1e8c9f6a0516b91c54eefd12e05e38", "committedDate": "2020-10-13T14:22:59Z", "message": "CB-8930 - CM API tracing implemented\n- extracting cm api name from stack trace\nIf I were using the URL, it would contain cluster specific info, like cluster name.\nThis would cause the number of operations to be infinite and filtering for CM operations would be impossible.\nThis is why I'm using the CM API's class and method names.\nAdded unit test for the complicated logic.\nUsing StackWalker so it does not have a performance impact."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4af4cbbc30bd2becbed1567204e8a8cf68bd71c", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e4af4cbbc30bd2becbed1567204e8a8cf68bd71c", "committedDate": "2020-10-13T14:05:20Z", "message": "CB-8930 - CM API tracing implemented\n- extracting cm api name from stack trace\nIf I were using the URL, it would contain cluster specific info, like cluster name.\nThis would cause the number of operations to be infinite and filtering for CM operations would be impossible.\nThis is why I'm using the CM API's class and method names.\nAdded unit test for the complicated logic.\nUsing StackWalker so it does not have a performance impact."}, "afterCommit": {"oid": "e9ac92ee1d1e8c9f6a0516b91c54eefd12e05e38", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e9ac92ee1d1e8c9f6a0516b91c54eefd12e05e38", "committedDate": "2020-10-13T14:22:59Z", "message": "CB-8930 - CM API tracing implemented\n- extracting cm api name from stack trace\nIf I were using the URL, it would contain cluster specific info, like cluster name.\nThis would cause the number of operations to be infinite and filtering for CM operations would be impossible.\nThis is why I'm using the CM API's class and method names.\nAdded unit test for the complicated logic.\nUsing StackWalker so it does not have a performance impact."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2146, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}