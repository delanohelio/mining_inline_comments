{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2Mjk3Mzg4", "number": 8189, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxMDowM1rOEBnvbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoxOTo1MlrOECa3bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTM1MTUxOnYy", "diffSide": "RIGHT", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/autoscales/AutoscaleV4Endpoint.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxMDowM1rOGdkzuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo0MzoxNVrOGeMz_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NDk1NQ==", "bodyText": "Can this take only clusterCrn and internally use blueprintName ?", "url": "https://github.com/hortonworks/cloudbreak/pull/8189#discussion_r433664955", "createdAt": "2020-06-02T07:10:03Z", "author": {"login": "smaniraju"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/autoscales/AutoscaleV4Endpoint.java", "diffHunk": "@@ -106,4 +107,10 @@ void decommissionInstancesForClusterCrn(@PathParam(\"crn\") String clusterCrn,\n     @Path(\"clusterproxy\")\n     @Produces(MediaType.APPLICATION_JSON)\n     ClusterProxyConfiguration getClusterProxyconfiguration();\n+\n+    @GET\n+    @Path(\"recommendation\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    AutoscaleRecommendationV4Response getRecommendation(@QueryParam(\"workspaceId\") Long workspaceId,\n+                                                        @QueryParam(\"blueprintName\") String blueprintName);\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf417194ac7b9d4cb971ce06a23b380b2887678"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MDMxMw==", "bodyText": "Doing it by blueprintName is more cache-friendly. At the same time, clusterCrn is a nice abstraction, particularly caller need not worry about workspaceId.", "url": "https://github.com/hortonworks/cloudbreak/pull/8189#discussion_r434260313", "createdAt": "2020-06-03T01:28:48Z", "author": {"login": "cegganesh84"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/autoscales/AutoscaleV4Endpoint.java", "diffHunk": "@@ -106,4 +107,10 @@ void decommissionInstancesForClusterCrn(@PathParam(\"crn\") String clusterCrn,\n     @Path(\"clusterproxy\")\n     @Produces(MediaType.APPLICATION_JSON)\n     ClusterProxyConfiguration getClusterProxyconfiguration();\n+\n+    @GET\n+    @Path(\"recommendation\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    AutoscaleRecommendationV4Response getRecommendation(@QueryParam(\"workspaceId\") Long workspaceId,\n+                                                        @QueryParam(\"blueprintName\") String blueprintName);\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NDk1NQ=="}, "originalCommit": {"oid": "cbf417194ac7b9d4cb971ce06a23b380b2887678"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMDM4MQ==", "bodyText": "I would prefer it using clusterCrn, since it avoids additional CB call to retrieve blueprintname associated with the cluster. Also workspaceId is internal id of CB, so  would  prefer to avoid making api calls based on that.", "url": "https://github.com/hortonworks/cloudbreak/pull/8189#discussion_r434320381", "createdAt": "2020-06-03T05:43:15Z", "author": {"login": "smaniraju"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/autoscales/AutoscaleV4Endpoint.java", "diffHunk": "@@ -106,4 +107,10 @@ void decommissionInstancesForClusterCrn(@PathParam(\"crn\") String clusterCrn,\n     @Path(\"clusterproxy\")\n     @Produces(MediaType.APPLICATION_JSON)\n     ClusterProxyConfiguration getClusterProxyconfiguration();\n+\n+    @GET\n+    @Path(\"recommendation\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    AutoscaleRecommendationV4Response getRecommendation(@QueryParam(\"workspaceId\") Long workspaceId,\n+                                                        @QueryParam(\"blueprintName\") String blueprintName);\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NDk1NQ=="}, "originalCommit": {"oid": "cbf417194ac7b9d4cb971ce06a23b380b2887678"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM5OTc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/AutoscaleV4Controller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTozODoxNlrOGeMuEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo0MjoxMlrOGeMyqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxODg2NQ==", "bodyText": "This api is meant for internal periscope use which uses internalCrn for communication. It should use the earlier PreAuthorize checks  and not CheckPermissionByAccount.", "url": "https://github.com/hortonworks/cloudbreak/pull/8189#discussion_r434318865", "createdAt": "2020-06-03T05:38:16Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/AutoscaleV4Controller.java", "diffHunk": "@@ -157,8 +157,7 @@ public ClusterProxyConfiguration getClusterProxyconfiguration() {\n     }\n \n     @Override\n-    @DisableCheckPermissions\n-    @PreAuthorize(\"hasRole('AUTOSCALE')\")\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.DATAHUB_READ)\n     public AutoscaleRecommendationV4Response getRecommendation(Long workspaceId, String blueprintName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2435dbb5d0b17cc515e9f1f6077b73177b4d15c3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMDA0MQ==", "bodyText": "That makes sense. How to test those internal APIs (in general)?", "url": "https://github.com/hortonworks/cloudbreak/pull/8189#discussion_r434320041", "createdAt": "2020-06-03T05:42:12Z", "author": {"login": "cegganesh84"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/AutoscaleV4Controller.java", "diffHunk": "@@ -157,8 +157,7 @@ public ClusterProxyConfiguration getClusterProxyconfiguration() {\n     }\n \n     @Override\n-    @DisableCheckPermissions\n-    @PreAuthorize(\"hasRole('AUTOSCALE')\")\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.DATAHUB_READ)\n     public AutoscaleRecommendationV4Response getRecommendation(Long workspaceId, String blueprintName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxODg2NQ=="}, "originalCommit": {"oid": "2435dbb5d0b17cc515e9f1f6077b73177b4d15c3"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTcyNzgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/CloudResourceAdvisor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoxOTo1MlrOGe3SoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoxOTo1MlrOGe3SoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjM1Mw==", "bodyText": "Nit: empty lines", "url": "https://github.com/hortonworks/cloudbreak/pull/8189#discussion_r435016353", "createdAt": "2020-06-04T06:19:52Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/CloudResourceAdvisor.java", "diffHunk": "@@ -149,6 +146,20 @@ public PlatformRecommendation createForBlueprint(Long workspaceId, String bluepr\n         return new PlatformRecommendation(vmTypesByHostGroup, availableVmTypes, diskTypes, instanceCounts, gateway, autoscale, resize);\n     }\n \n+    public AutoscaleRecommendation getAutoscaleRecommendation(Long workspaceId, String blueprintName) {\n+        LOGGER.debug(\"Autoscale advice for blueprintName: {}.\", blueprintName);\n+\n+        BlueprintTextProcessor blueprintTextProcessor = getBlueprintTextProcessor(workspaceId, blueprintName);\n+\n+        return recommendAutoscale(blueprintTextProcessor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "577e97dfcc012c71f0732a2ed0c409ea421f653b"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3266, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}