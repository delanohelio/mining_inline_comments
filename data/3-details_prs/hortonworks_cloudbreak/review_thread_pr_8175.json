{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NTQwMzE4", "number": 8175, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo1ODowOFrOECFeJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDowMjowMFrOECFjKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjIyMjQ2OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo1ODowOFrOGeUyxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo1ODowOFrOGeUyxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MTE0MQ==", "bodyText": "e.body() is used 5 times, should be extracted", "url": "https://github.com/hortonworks/cloudbreak/pull/8175#discussion_r434451141", "createdAt": "2020-06-03T09:58:08Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -112,52 +116,83 @@\n                 .name(Integer.toString(POSTGRESQL_SERVER_PORT))\n                 .build());\n         databaseResources.add(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build());\n         return databaseResources;\n     }\n \n-    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, boolean force) {\n+    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, List<CloudResource> resources, boolean force) {\n         CloudContext cloudContext = ac.getCloudContext();\n         AzureClient client = ac.getParameter(AzureClient.class);\n-        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n \n+        return azureResourceGroupMetadataProvider.useSingleResourceGroup(stack)\n+                ? deleteDatabaseServer(resources, force, client)\n+                : deleteResourceGroup(stack, force, cloudContext, client);\n+    }\n+\n+    private List<CloudResourceStatus> deleteResourceGroup(DatabaseStack stack, boolean force, CloudContext cloudContext, AzureClient client) {\n+        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n+        LOGGER.debug(\"Deleting resource group {}\", resourceGroupName);\n         try {\n             client.deleteResourceGroup(resourceGroupName);\n         } catch (CloudException e) {\n-            String errorMessage = null;\n-            if (e.body() != null) {\n-                String errorCode = e.body().code();\n-                if (\"ResourceGroupNotFound\".equals(errorCode)) {\n-                    LOGGER.warn(\"Resource group {} does not exist, assuming that it has already been deleted\", resourceGroupName);\n-                    // leave errorMessage null => do not throw exception\n-                } else {\n-                    String details = e.body().details() != null ? e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \")) : \"\";\n-                    errorMessage = String.format(\"Resource group %s deletion failed, status code %s, error message: %s, details: %s\",\n-                            resourceGroupName, errorCode, e.body().message(), details);\n-                }\n-            } else {\n-                errorMessage = String.format(\"Resource group %s deletion failed: '%s', please go to Azure Portal for details\",\n-                        resourceGroupName, e.getMessage());\n-            }\n-\n-            if (errorMessage != null) {\n-                if (force) {\n-                    LOGGER.warn(errorMessage);\n-                    LOGGER.warn(\"Resource group {} deletion failed, continuing because termination is forced\", resourceGroupName);\n-                } else {\n-                    throw new CloudConnectorException(errorMessage, e);\n-                }\n-            }\n+            errorHandling(force, e, \"resource group\", resourceGroupName);\n         }\n \n         return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build(), ResourceStatus.DELETED));\n     }\n \n+    private List<CloudResourceStatus> deleteDatabaseServer(List<CloudResource> resources, boolean force, AzureClient client) {\n+        LOGGER.debug(\"Deleting database server\");\n+        Optional<CloudResource> dbServerResourceOptional = resources.stream().filter(r -> AZURE_DATABASE.equals(r.getType())).findFirst();\n+        if (dbServerResourceOptional.isEmpty()) {\n+            LOGGER.warn(\"Azure database id not found in database, deleting nothing\");\n+            return List.of();\n+        }\n+        String databaseServerId = dbServerResourceOptional.get().getReference();\n+        try {\n+            azureUtils.deleteDatabaseServer(client, databaseServerId);\n+        } catch (CloudException e) {\n+            errorHandling(force, e, \"Database server\", databaseServerId);\n+        }\n+\n+        return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n+                .type(AZURE_DATABASE)\n+                .name(databaseServerId)\n+                .build(), ResourceStatus.DELETED));\n+    }\n+\n+    private void errorHandling(boolean force, CloudException e, String resourceType, String resourceId) {\n+        String errorMessage = null;\n+        if (e.body() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb0219aed6b5357bd9576102b56e41e6cca3dec4"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjIyNDQzOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo1ODo0MFrOGeU0FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo1ODo0MFrOGeU0FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MTQ3Ng==", "bodyText": "I would prefer handleErrors() - verb first", "url": "https://github.com/hortonworks/cloudbreak/pull/8175#discussion_r434451476", "createdAt": "2020-06-03T09:58:40Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -112,52 +116,83 @@\n                 .name(Integer.toString(POSTGRESQL_SERVER_PORT))\n                 .build());\n         databaseResources.add(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build());\n         return databaseResources;\n     }\n \n-    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, boolean force) {\n+    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, List<CloudResource> resources, boolean force) {\n         CloudContext cloudContext = ac.getCloudContext();\n         AzureClient client = ac.getParameter(AzureClient.class);\n-        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n \n+        return azureResourceGroupMetadataProvider.useSingleResourceGroup(stack)\n+                ? deleteDatabaseServer(resources, force, client)\n+                : deleteResourceGroup(stack, force, cloudContext, client);\n+    }\n+\n+    private List<CloudResourceStatus> deleteResourceGroup(DatabaseStack stack, boolean force, CloudContext cloudContext, AzureClient client) {\n+        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n+        LOGGER.debug(\"Deleting resource group {}\", resourceGroupName);\n         try {\n             client.deleteResourceGroup(resourceGroupName);\n         } catch (CloudException e) {\n-            String errorMessage = null;\n-            if (e.body() != null) {\n-                String errorCode = e.body().code();\n-                if (\"ResourceGroupNotFound\".equals(errorCode)) {\n-                    LOGGER.warn(\"Resource group {} does not exist, assuming that it has already been deleted\", resourceGroupName);\n-                    // leave errorMessage null => do not throw exception\n-                } else {\n-                    String details = e.body().details() != null ? e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \")) : \"\";\n-                    errorMessage = String.format(\"Resource group %s deletion failed, status code %s, error message: %s, details: %s\",\n-                            resourceGroupName, errorCode, e.body().message(), details);\n-                }\n-            } else {\n-                errorMessage = String.format(\"Resource group %s deletion failed: '%s', please go to Azure Portal for details\",\n-                        resourceGroupName, e.getMessage());\n-            }\n-\n-            if (errorMessage != null) {\n-                if (force) {\n-                    LOGGER.warn(errorMessage);\n-                    LOGGER.warn(\"Resource group {} deletion failed, continuing because termination is forced\", resourceGroupName);\n-                } else {\n-                    throw new CloudConnectorException(errorMessage, e);\n-                }\n-            }\n+            errorHandling(force, e, \"resource group\", resourceGroupName);\n         }\n \n         return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build(), ResourceStatus.DELETED));\n     }\n \n+    private List<CloudResourceStatus> deleteDatabaseServer(List<CloudResource> resources, boolean force, AzureClient client) {\n+        LOGGER.debug(\"Deleting database server\");\n+        Optional<CloudResource> dbServerResourceOptional = resources.stream().filter(r -> AZURE_DATABASE.equals(r.getType())).findFirst();\n+        if (dbServerResourceOptional.isEmpty()) {\n+            LOGGER.warn(\"Azure database id not found in database, deleting nothing\");\n+            return List.of();\n+        }\n+        String databaseServerId = dbServerResourceOptional.get().getReference();\n+        try {\n+            azureUtils.deleteDatabaseServer(client, databaseServerId);\n+        } catch (CloudException e) {\n+            errorHandling(force, e, \"Database server\", databaseServerId);\n+        }\n+\n+        return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n+                .type(AZURE_DATABASE)\n+                .name(databaseServerId)\n+                .build(), ResourceStatus.DELETED));\n+    }\n+\n+    private void errorHandling(boolean force, CloudException e, String resourceType, String resourceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb0219aed6b5357bd9576102b56e41e6cca3dec4"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjIyNTk2OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo1OToxMVrOGeU1EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo1OToxMVrOGeU1EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MTcyOQ==", "bodyText": "We should log the error in this case, too", "url": "https://github.com/hortonworks/cloudbreak/pull/8175#discussion_r434451729", "createdAt": "2020-06-03T09:59:11Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -112,52 +116,83 @@\n                 .name(Integer.toString(POSTGRESQL_SERVER_PORT))\n                 .build());\n         databaseResources.add(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build());\n         return databaseResources;\n     }\n \n-    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, boolean force) {\n+    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, List<CloudResource> resources, boolean force) {\n         CloudContext cloudContext = ac.getCloudContext();\n         AzureClient client = ac.getParameter(AzureClient.class);\n-        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n \n+        return azureResourceGroupMetadataProvider.useSingleResourceGroup(stack)\n+                ? deleteDatabaseServer(resources, force, client)\n+                : deleteResourceGroup(stack, force, cloudContext, client);\n+    }\n+\n+    private List<CloudResourceStatus> deleteResourceGroup(DatabaseStack stack, boolean force, CloudContext cloudContext, AzureClient client) {\n+        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n+        LOGGER.debug(\"Deleting resource group {}\", resourceGroupName);\n         try {\n             client.deleteResourceGroup(resourceGroupName);\n         } catch (CloudException e) {\n-            String errorMessage = null;\n-            if (e.body() != null) {\n-                String errorCode = e.body().code();\n-                if (\"ResourceGroupNotFound\".equals(errorCode)) {\n-                    LOGGER.warn(\"Resource group {} does not exist, assuming that it has already been deleted\", resourceGroupName);\n-                    // leave errorMessage null => do not throw exception\n-                } else {\n-                    String details = e.body().details() != null ? e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \")) : \"\";\n-                    errorMessage = String.format(\"Resource group %s deletion failed, status code %s, error message: %s, details: %s\",\n-                            resourceGroupName, errorCode, e.body().message(), details);\n-                }\n-            } else {\n-                errorMessage = String.format(\"Resource group %s deletion failed: '%s', please go to Azure Portal for details\",\n-                        resourceGroupName, e.getMessage());\n-            }\n-\n-            if (errorMessage != null) {\n-                if (force) {\n-                    LOGGER.warn(errorMessage);\n-                    LOGGER.warn(\"Resource group {} deletion failed, continuing because termination is forced\", resourceGroupName);\n-                } else {\n-                    throw new CloudConnectorException(errorMessage, e);\n-                }\n-            }\n+            errorHandling(force, e, \"resource group\", resourceGroupName);\n         }\n \n         return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build(), ResourceStatus.DELETED));\n     }\n \n+    private List<CloudResourceStatus> deleteDatabaseServer(List<CloudResource> resources, boolean force, AzureClient client) {\n+        LOGGER.debug(\"Deleting database server\");\n+        Optional<CloudResource> dbServerResourceOptional = resources.stream().filter(r -> AZURE_DATABASE.equals(r.getType())).findFirst();\n+        if (dbServerResourceOptional.isEmpty()) {\n+            LOGGER.warn(\"Azure database id not found in database, deleting nothing\");\n+            return List.of();\n+        }\n+        String databaseServerId = dbServerResourceOptional.get().getReference();\n+        try {\n+            azureUtils.deleteDatabaseServer(client, databaseServerId);\n+        } catch (CloudException e) {\n+            errorHandling(force, e, \"Database server\", databaseServerId);\n+        }\n+\n+        return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n+                .type(AZURE_DATABASE)\n+                .name(databaseServerId)\n+                .build(), ResourceStatus.DELETED));\n+    }\n+\n+    private void errorHandling(boolean force, CloudException e, String resourceType, String resourceId) {\n+        String errorMessage = null;\n+        if (e.body() != null) {\n+            String errorCode = e.body().code();\n+            if (\"ResourceGroupNotFound\".equals(errorCode)) {\n+                LOGGER.warn(\"{} {} does not exist, assuming that it has already been deleted\", resourceType, resourceId);\n+                // leave errorMessage null => do not throw exception\n+            } else {\n+                String details = e.body().details() != null ? e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \")) : \"\";\n+                errorMessage = String.format(\"%s %s deletion failed, status code %s, error message: %s, details: %s\",\n+                        resourceType, resourceId, errorCode, e.body().message(), details);\n+            }\n+        } else {\n+            errorMessage = String.format(\"%s %s deletion failed: '%s', please go to Azure Portal for details\",\n+                    resourceType, resourceId, e.getMessage());\n+        }\n+\n+        if (errorMessage != null) {\n+            if (force) {\n+                LOGGER.warn(errorMessage);\n+                LOGGER.warn(\"{} {} deletion failed, continuing because termination is forced\", resourceType, resourceId);\n+            } else {\n+                throw new CloudConnectorException(errorMessage, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb0219aed6b5357bd9576102b56e41e6cca3dec4"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjIzNTMwOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDowMjowMFrOGeU7QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDowMjowMFrOGeU7QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MzMxMw==", "bodyText": "We should consider deleting the actual resource as it won't be reused in future.", "url": "https://github.com/hortonworks/cloudbreak/pull/8175#discussion_r434453313", "createdAt": "2020-06-03T10:02:00Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -112,52 +116,83 @@\n                 .name(Integer.toString(POSTGRESQL_SERVER_PORT))\n                 .build());\n         databaseResources.add(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build());\n         return databaseResources;\n     }\n \n-    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, boolean force) {\n+    public List<CloudResourceStatus> terminateDatabaseServer(AuthenticatedContext ac, DatabaseStack stack, List<CloudResource> resources, boolean force) {\n         CloudContext cloudContext = ac.getCloudContext();\n         AzureClient client = ac.getParameter(AzureClient.class);\n-        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n \n+        return azureResourceGroupMetadataProvider.useSingleResourceGroup(stack)\n+                ? deleteDatabaseServer(resources, force, client)\n+                : deleteResourceGroup(stack, force, cloudContext, client);\n+    }\n+\n+    private List<CloudResourceStatus> deleteResourceGroup(DatabaseStack stack, boolean force, CloudContext cloudContext, AzureClient client) {\n+        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, stack);\n+        LOGGER.debug(\"Deleting resource group {}\", resourceGroupName);\n         try {\n             client.deleteResourceGroup(resourceGroupName);\n         } catch (CloudException e) {\n-            String errorMessage = null;\n-            if (e.body() != null) {\n-                String errorCode = e.body().code();\n-                if (\"ResourceGroupNotFound\".equals(errorCode)) {\n-                    LOGGER.warn(\"Resource group {} does not exist, assuming that it has already been deleted\", resourceGroupName);\n-                    // leave errorMessage null => do not throw exception\n-                } else {\n-                    String details = e.body().details() != null ? e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \")) : \"\";\n-                    errorMessage = String.format(\"Resource group %s deletion failed, status code %s, error message: %s, details: %s\",\n-                            resourceGroupName, errorCode, e.body().message(), details);\n-                }\n-            } else {\n-                errorMessage = String.format(\"Resource group %s deletion failed: '%s', please go to Azure Portal for details\",\n-                        resourceGroupName, e.getMessage());\n-            }\n-\n-            if (errorMessage != null) {\n-                if (force) {\n-                    LOGGER.warn(errorMessage);\n-                    LOGGER.warn(\"Resource group {} deletion failed, continuing because termination is forced\", resourceGroupName);\n-                } else {\n-                    throw new CloudConnectorException(errorMessage, e);\n-                }\n-            }\n+            errorHandling(force, e, \"resource group\", resourceGroupName);\n         }\n \n         return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()\n-                .type(ResourceType.AZURE_RESOURCE_GROUP)\n+                .type(AZURE_RESOURCE_GROUP)\n                 .name(resourceGroupName)\n                 .build(), ResourceStatus.DELETED));\n     }\n \n+    private List<CloudResourceStatus> deleteDatabaseServer(List<CloudResource> resources, boolean force, AzureClient client) {\n+        LOGGER.debug(\"Deleting database server\");\n+        Optional<CloudResource> dbServerResourceOptional = resources.stream().filter(r -> AZURE_DATABASE.equals(r.getType())).findFirst();\n+        if (dbServerResourceOptional.isEmpty()) {\n+            LOGGER.warn(\"Azure database id not found in database, deleting nothing\");\n+            return List.of();\n+        }\n+        String databaseServerId = dbServerResourceOptional.get().getReference();\n+        try {\n+            azureUtils.deleteDatabaseServer(client, databaseServerId);\n+        } catch (CloudException e) {\n+            errorHandling(force, e, \"Database server\", databaseServerId);\n+        }\n+\n+        return Lists.newArrayList(new CloudResourceStatus(CloudResource.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb0219aed6b5357bd9576102b56e41e6cca3dec4"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3259, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}