{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjkyNTQx", "number": 7667, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDowNjoyNVrODsFFSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNjo1NDo1MFrODsSjyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTQ3MjA4OnYy", "diffSide": "RIGHT", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/RetryableFreeIpaClientException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDowNjoyNVrOF8ypxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoyNzoyMFrOF89MjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4ODc3Mg==", "bodyText": "These should probably be configurable with @value.", "url": "https://github.com/hortonworks/cloudbreak/pull/7667#discussion_r399288772", "createdAt": "2020-03-27T14:06:25Z", "author": {"login": "holleyism"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/RetryableFreeIpaClientException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.util.OptionalInt;\n+\n+public class RetryableFreeIpaClientException extends FreeIpaClientException {\n+\n+    public static final int MAX_RETRIES = 5;\n+\n+    public static final int BACKOFF_DELAY = 5000;\n+\n+    public static final double BACKOFF_MULTIPLIER = 1.5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd8d394d8a80a6fefee4210a1a3ad5199eba384"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MTUxNw==", "bodyText": "Done", "url": "https://github.com/hortonworks/cloudbreak/pull/7667#discussion_r399461517", "createdAt": "2020-03-27T18:27:20Z", "author": {"login": "jamisonbennett"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/RetryableFreeIpaClientException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.util.OptionalInt;\n+\n+public class RetryableFreeIpaClientException extends FreeIpaClientException {\n+\n+    public static final int MAX_RETRIES = 5;\n+\n+    public static final int BACKOFF_DELAY = 5000;\n+\n+    public static final double BACKOFF_MULTIPLIER = 1.5;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4ODc3Mg=="}, "originalCommit": {"oid": "0fd8d394d8a80a6fefee4210a1a3ad5199eba384"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzY2MTQ0OnYy", "diffSide": "RIGHT", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientExceptionUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNjoyNTowNFrOF9HSUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNjoyNTowNFrOF9HSUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNjgzNA==", "bodyText": "assigning new value to the method parameter seems bad practice to me. could you introduce new variable here?", "url": "https://github.com/hortonworks/cloudbreak/pull/7667#discussion_r399626834", "createdAt": "2020-03-28T06:25:04Z", "author": {"login": "lacikaaa"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientExceptionUtil.java", "diffHunk": "@@ -1,35 +1,243 @@\n package com.sequenceiq.freeipa.client;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n \n import com.googlecode.jsonrpc4j.JsonRpcClientException;\n \n public class FreeIpaClientExceptionUtil {\n \n-    public static final int NOT_MAPPED_ERROR_CODE = 4000;\n+    // See https://github.com/freeipa/freeipa/blob/master/ipalib/errors.py\n+    public enum ErrorCodes {\n+        PUBLIC_ERROR(900),\n+        VERSION_ERROR(901),\n+        UNKNOWN_ERROR(902),\n+        INTERNAL_ERROR(903),\n+        SERVER_INTERNAL_ERROR(904),\n+        COMMAND_ERROR(905),\n+        SERVER_COMMAND_ERROR(906),\n+        NETWORK_ERROR(907),\n+        SERVER_NETWORK_ERROR(908),\n+        JSON_ERROR(909),\n+        XML_RPC_MARSHALL_ERROR(910),\n+        REFERER_ERROR(911),\n+        ENVIRONMENT_ERROR(912),\n+        SYSTEM_ENCODING_ERROR(913),\n+        AUTHENTICATION_ERROR(1000),\n+        KERBEROS_ERROR(1100),\n+        CCACHE_ERROR(1101),\n+        SERVICE_ERROR(1102),\n+        NO_CACHE_ERROR(1103),\n+        TICKET_EXPIRED(1104),\n+        BAD_CCACHE_PERMS(1105),\n+        BAD_CCACHE_FORMAT(1106),\n+        CANNOT_RESOLVE_KDC(1107),\n+        SESSION_ERROR(1200),\n+        INVALID_SESSION_PASSWORD(1201),\n+        PASSWORD_EXPIRED(1202),\n+        KRB_PRINCIPAL_EXPIRED(1203),\n+        USER_LOCKED(1204),\n+        AUTHORIZATION_ERROR(2000),\n+        ACI_ERROR(2100),\n+        INVOCATION_ERROR(3000),\n+        ENCODING_ERROR(3001),\n+        BINARY_ENCODING_ERROR(3002),\n+        ZERO_ARGUMENT_ERROR(3003),\n+        MAX_ARGUMENT_ERROR(3004),\n+        OPTION_ERROR(3005),\n+        OVERLAP_ERROR(3006),\n+        REQUIREMENT_ERROR(3007),\n+        CONVERSION_ERROR(3008),\n+        VALIDATION_ERROR(3009),\n+        NO_SUCH_NAMESPACE_ERROR(3010),\n+        PASSWORD_MISMATCH(3011),\n+        NOT_IMPLEMENTED_ERROR(3012),\n+        NOT_CONFIGURED_ERROR(3013),\n+        PROMPT_FAILED(3014),\n+        DEPRECATION_ERROR(3015),\n+        NOT_A_FOREST_ROOT_ERROR(3016),\n+        EXECUTION_ERROR(4000),\n+        NOT_FOUND(4001),\n+        DUPLICATE_ENTRY(4002),\n+        HOST_SERVICE(4003),\n+        MALFORMED_SERVICE_PRINCIPAL(4004),\n+        REALM_MISMATCH(4005),\n+        REQUIRES_ROOT(4006),\n+        ALREADY_POSIX_GROUP(4007),\n+        MALFORMED_USER_PRINCIPAL(4008),\n+        ALREADY_ACTIVE(4009),\n+        ALREADY_INACTIVE(4010),\n+        HAS_NS_ACCOUNT_LOCK(4011),\n+        NOT_GROUP_MEMBER(4012),\n+        RECURSIVE_GROUP(4013),\n+        ALREADY_GROUP_MEMBER(4014),\n+        BASE64_DECODE_ERROR(4015),\n+        REMOTE_RETRIEVE_ERROR(4016),\n+        SAME_GROUP_ERROR(4017),\n+        DEFAULT_GROUP_ERROR(4018),\n+        MANAGED_GROUP_ERROR(4020),\n+        MANAGED_POLICY_ERROR(4021),\n+        FILE_ERROR(4022),\n+        NO_CERTIFICATE_ERROR(4023),\n+        MANAGED_GROUP_EXISTS_ERROR(4024),\n+        REVERSE_MEMBER_ERROR(4025),\n+        ATTRIBUTE_VALUE_NOT_FOUND(4026),\n+        SINGLE_MATCH_EXPECTED(4027),\n+        ALREADY_EXTERNAL_GROUP(4028),\n+        EXTERNAL_GROUP_VIOLATION(4029),\n+        POSIX_GROUP_VIOLATION(4030),\n+        EMPTY_RESULT(4031),\n+        INVALID_DOMAIN_LEVEL_ERROR(4032),\n+        SERVER_REMOVAL_ERROR(4033),\n+        OPERATION_NOT_SUPPORTED_FOR_PRINCIPAL_TYPE(4034),\n+        HTTP_REQUEST_ERROR(4035),\n+        REDUNDANT_MAPPING_RULE(4036),\n+        CSR_TEMPLATE_ERROR(4037),\n+        BUILTIN_ERROR(4100),\n+        HELP_ERROR(4101),\n+        LDAP_ERROR(4200),\n+        MIDAIR_COLLISION(4201),\n+        EMPTY_MODLIST(4202),\n+        DATABASE_ERROR(4203),\n+        LIMIT_EXCEEDED(4204),\n+        OBJECTCLASS_VIOLATION(4205),\n+        NOT_ALLOWED_ON_RDN(4206),\n+        ONLY_ONE_VALUE_ALLOWED(4207),\n+        INVALID_SYNTAX(4208),\n+        BAD_SEARCH_FILTER(4209),\n+        NOT_ALLOWED_ON_NON_LEAF(4210),\n+        DATABASE_TIMEOUT(4211),\n+        TASK_TIMEOUT(4213),\n+        TIME_LIMIT_EXCEEDED(4214),\n+        SIZE_LIMIT_EXCEEDED(4215),\n+        ADMIN_LIMIT_EXCEEDED(4216),\n+        CERTIFICATE_ERROR(4300),\n+        CERTIFICATE_OPERATION_ERROR(4301),\n+        CERTIFICATE_FORMAT_ERROR(4302),\n+        MUTUALLY_EXCLUSIVE_ERROR(4303),\n+        NON_FATAL_ERROR(4304),\n+        ALREADY_REGISTERED_ERROR(4305),\n+        NOT_REGISTERED_ERROR(4306),\n+        DEPENDENT_ENTRY(4307),\n+        LAST_MEMBER_ERROR(4308),\n+        PROTECTED_ENTRY_ERROR(4309),\n+        CERTIFICATE_INVALID_ERROR(4310),\n+        SCHEMA_UP_TO_DATE(4311),\n+        DNS_ERROR(4400),\n+        DNS_NOT_A_RECORED_ERROR(4019),\n+        DNS_DATA_MISMATCH(4212),\n+        DNS_RESOLVER_ERROR(4401),\n+        TRUST_ERROR(4500),\n+        TRUST_TOPOLOGY_CONFLICT_ERROR(4501),\n+        GENERIC_ERROR(5000);\n+\n+        private final int value;\n+\n+        ErrorCodes(int value) {\n+            this.value = value;\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+    }\n+\n+    private static final Map<Integer, ErrorCodes> ERROR_CODES_LOOKUP = new HashMap<>();\n+\n+    private static final Set<ErrorCodes> RETRYABLE_HTTP_CODES = Set.of(\n+            ErrorCodes.NETWORK_ERROR,\n+            ErrorCodes.SERVER_NETWORK_ERROR,\n+            ErrorCodes.REFERER_ERROR,\n+            ErrorCodes.AUTHENTICATION_ERROR,\n+            ErrorCodes.KERBEROS_ERROR,\n+            ErrorCodes.CCACHE_ERROR,\n+            ErrorCodes.SERVICE_ERROR,\n+            ErrorCodes.NO_CACHE_ERROR,\n+            ErrorCodes.TICKET_EXPIRED,\n+            ErrorCodes.BAD_CCACHE_PERMS,\n+            ErrorCodes.BAD_CCACHE_FORMAT,\n+            ErrorCodes.CANNOT_RESOLVE_KDC,\n+            ErrorCodes.SESSION_ERROR,\n+            ErrorCodes.INVALID_SESSION_PASSWORD,\n+            ErrorCodes.AUTHORIZATION_ERROR,\n+            ErrorCodes.HTTP_REQUEST_ERROR,\n+            ErrorCodes.MIDAIR_COLLISION,\n+            ErrorCodes.LIMIT_EXCEEDED,\n+            ErrorCodes.DATABASE_TIMEOUT,\n+            ErrorCodes.TASK_TIMEOUT,\n+            ErrorCodes.TIME_LIMIT_EXCEEDED,\n+            ErrorCodes.SIZE_LIMIT_EXCEEDED,\n+            ErrorCodes.ADMIN_LIMIT_EXCEEDED,\n+            ErrorCodes.NON_FATAL_ERROR,\n+            ErrorCodes.GENERIC_ERROR\n+    );\n \n-    public static final int NOT_FOUND_ERROR_CODE = 4001;\n+    private static Set<Integer> retryableHttpCodes = Set.of(\n+            HttpStatus.UNAUTHORIZED,\n+            HttpStatus.PROXY_AUTHENTICATION_REQUIRED,\n+            HttpStatus.REQUEST_TIMEOUT,\n+            HttpStatus.TOO_MANY_REQUESTS,\n+            HttpStatus.INTERNAL_SERVER_ERROR,\n+            HttpStatus.BAD_GATEWAY,\n+            HttpStatus.SERVICE_UNAVAILABLE,\n+            HttpStatus.GATEWAY_TIMEOUT,\n+            HttpStatus.BANDWIDTH_LIMIT_EXCEEDED,\n+            HttpStatus.NETWORK_AUTHENTICATION_REQUIRED\n+    )\n+            .stream()\n+            .map(s -> s.value())\n+            .collect(Collectors.toSet());\n \n-    public static final int DUPLICATE_ENTRY_ERROR_CODE = 4002;\n+    static {\n+        for (ErrorCodes errorCode : ErrorCodes.values()) {\n+            ERROR_CODES_LOOKUP.put(errorCode.value, errorCode);\n+        }\n+    }\n \n     private FreeIpaClientExceptionUtil() {\n     }\n \n     public static boolean isNotFoundException(FreeIpaClientException e) {\n-        return isExceptionWithErrorCode(e, Set.of(NOT_FOUND_ERROR_CODE));\n+        return isExceptionWithErrorCode(e, Set.of(ErrorCodes.NOT_FOUND));\n     }\n \n     public static boolean isDuplicateEntryException(FreeIpaClientException e) {\n-        return isExceptionWithErrorCode(e, Set.of(DUPLICATE_ENTRY_ERROR_CODE));\n+        return isExceptionWithErrorCode(e, Set.of(ErrorCodes.DUPLICATE_ENTRY));\n     }\n \n-    public static boolean isExceptionWithErrorCode(FreeIpaClientException e, Set<Integer> errorCodes) {\n-        return Optional.ofNullable(e.getCause())\n+    public static boolean isExceptionWithErrorCode(FreeIpaClientException e, Set<ErrorCodes> errorCodes) {\n+        return Optional.ofNullable(getAncestorCauseBeforeFreeIpaClientExceptions(e))\n                 .filter(JsonRpcClientException.class::isInstance)\n                 .map(JsonRpcClientException.class::cast)\n                 .map(JsonRpcClientException::getCode)\n+                .flatMap(c -> Optional.ofNullable(ERROR_CODES_LOOKUP.get(c)))\n                 .filter(c -> errorCodes.contains(c))\n                 .isPresent();\n     }\n+\n+    public static FreeIpaClientException convertToRetryableIfNeeded(FreeIpaClientException e) {\n+        if (isRetryable(e)) {\n+            return new RetryableFreeIpaClientException(e.getLocalizedMessage(), e, e.getStatusCode());\n+        } else {\n+            return e;\n+        }\n+    }\n+\n+    private static boolean isRetryable(FreeIpaClientException e) {\n+        return isExceptionWithErrorCode(e, RETRYABLE_HTTP_CODES) ||\n+                (e.getStatusCode().isPresent() &&\n+                retryableHttpCodes.contains(e.getStatusCode().getAsInt()));\n+    }\n+\n+    public static Throwable getAncestorCauseBeforeFreeIpaClientExceptions(FreeIpaClientException e) {\n+        while (e.getCause() instanceof FreeIpaClientException) {\n+            e = (FreeIpaClientException) e.getCause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd33375b0d7f86542dcbc4fecee2536da6bd015"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzY2OTgwOnYy", "diffSide": "RIGHT", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/RetryableFreeIpaClientException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNjozODoyNVrOF9HWHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNjozODoyNVrOF9HWHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNzgwNA==", "bodyText": "you should default values only in one place, I think the yaml is fine", "url": "https://github.com/hortonworks/cloudbreak/pull/7667#discussion_r399627804", "createdAt": "2020-03-28T06:38:25Z", "author": {"login": "lacikaaa"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/RetryableFreeIpaClientException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.util.OptionalInt;\n+\n+public class RetryableFreeIpaClientException extends FreeIpaClientException {\n+\n+    public static final String MAX_RETRIES_EXPRESSION = \"#{${freeipa.client.retry.retries:5}}\";\n+\n+    public static final String DELAY_EXPRESSION = \"#{${freeipa.client.retry.delay:5000}}\";\n+\n+    public static final String MULTIPLIER_EXPRESSION = \"#{${freeipa.client.retry.multiplier:1.5}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd33375b0d7f86542dcbc4fecee2536da6bd015"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzY3MzQ3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/KerberosMgmtRoleComponent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNjo0NDowMFrOF9HXvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMToyNzoxOVrOF9MdOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyODIyMA==", "bodyText": "why is it necessary to wrap it?", "url": "https://github.com/hortonworks/cloudbreak/pull/7667#discussion_r399628220", "createdAt": "2020-03-28T06:44:00Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/KerberosMgmtRoleComponent.java", "diffHunk": "@@ -25,21 +26,25 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(KerberosMgmtRoleComponent.class);\n \n-    public boolean privilegesExist(RoleRequest roleRequest, FreeIpaClient ipaClient) {\n-        return roleRequest == null ||\n-            roleRequest.getPrivileges().stream().allMatch(privilegeName -> {\n-                try {\n-                    ipaClient.showPrivilege(privilegeName);\n-                    return true;\n-                } catch (FreeIpaClientException e) {\n-                    if (!FreeIpaClientExceptionUtil.isNotFoundException(e)) {\n-                        LOGGER.debug(\"Privilege [{}] does not exist\", privilegeName);\n-                    } else {\n-                        LOGGER.error(\"Privilege [{}] show error\", privilegeName, e);\n-                    }\n-                    return false;\n-                }\n-            });\n+    public boolean privilegesExist(RoleRequest roleRequest, FreeIpaClient ipaClient) throws FreeIpaClientException {\n+        try {\n+            return roleRequest == null ||\n+                    roleRequest.getPrivileges().stream().allMatch(privilegeName -> {\n+                        try {\n+                            ipaClient.showPrivilege(privilegeName);\n+                            return true;\n+                        } catch (FreeIpaClientException e) {\n+                            if (!FreeIpaClientExceptionUtil.isNotFoundException(e)) {\n+                                LOGGER.error(\"Privilege [{}] show error\", privilegeName, e);\n+                                throw new FreeIpaClientExceptionWrapper(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd33375b0d7f86542dcbc4fecee2536da6bd015"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxMTU0NQ==", "bodyText": "FreeIpaClientException is a checked exception, so I wrap it with an unchecked exception which is thrown from the lambda passed into matchAll(). I then catch the unchecked exception and rethrow the original exception outside of the lambda.", "url": "https://github.com/hortonworks/cloudbreak/pull/7667#discussion_r399711545", "createdAt": "2020-03-28T21:27:19Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/KerberosMgmtRoleComponent.java", "diffHunk": "@@ -25,21 +26,25 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(KerberosMgmtRoleComponent.class);\n \n-    public boolean privilegesExist(RoleRequest roleRequest, FreeIpaClient ipaClient) {\n-        return roleRequest == null ||\n-            roleRequest.getPrivileges().stream().allMatch(privilegeName -> {\n-                try {\n-                    ipaClient.showPrivilege(privilegeName);\n-                    return true;\n-                } catch (FreeIpaClientException e) {\n-                    if (!FreeIpaClientExceptionUtil.isNotFoundException(e)) {\n-                        LOGGER.debug(\"Privilege [{}] does not exist\", privilegeName);\n-                    } else {\n-                        LOGGER.error(\"Privilege [{}] show error\", privilegeName, e);\n-                    }\n-                    return false;\n-                }\n-            });\n+    public boolean privilegesExist(RoleRequest roleRequest, FreeIpaClient ipaClient) throws FreeIpaClientException {\n+        try {\n+            return roleRequest == null ||\n+                    roleRequest.getPrivileges().stream().allMatch(privilegeName -> {\n+                        try {\n+                            ipaClient.showPrivilege(privilegeName);\n+                            return true;\n+                        } catch (FreeIpaClientException e) {\n+                            if (!FreeIpaClientExceptionUtil.isNotFoundException(e)) {\n+                                LOGGER.error(\"Privilege [{}] show error\", privilegeName, e);\n+                                throw new FreeIpaClientExceptionWrapper(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyODIyMA=="}, "originalCommit": {"oid": "efd33375b0d7f86542dcbc4fecee2536da6bd015"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzY4MDA5OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/retry/RetryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNjo1NDo1MFrOF9Ha0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNjo1NDo1MFrOF9Ha0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyOTAwOQ==", "bodyText": "I don't know if you are aware of, but we already have a retryservice in thhe common. You might rename this just to avoid confusion later", "url": "https://github.com/hortonworks/cloudbreak/pull/7667#discussion_r399629009", "createdAt": "2020-03-28T06:54:50Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/retry/RetryService.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.sequenceiq.freeipa.retry;\n+\n+import org.springframework.retry.annotation.Backoff;\n+import org.springframework.retry.annotation.Retryable;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.util.CheckedFunction;\n+import com.sequenceiq.freeipa.client.RetryableFreeIpaClientException;\n+\n+@Service\n+public class RetryService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd33375b0d7f86542dcbc4fecee2536da6bd015"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2593, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}