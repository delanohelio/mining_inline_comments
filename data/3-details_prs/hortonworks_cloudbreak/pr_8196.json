{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2ODEwMzY1", "number": 8196, "title": "CB-7268 - Implemented tracing support for flow", "bodyText": "screenshots:\nhttps://drive.google.com/drive/folders/15lytU6cUsu5EbDzN3tPcGBDAFXLHTxBQ?usp=sharing", "createdAt": "2020-06-02T20:23:26Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8196", "merged": true, "mergeCommit": {"oid": "a88c3841b009b434f5bd5814591cff84b3fcedc3"}, "closed": true, "closedAt": "2020-06-07T17:46:55Z", "author": {"login": "attilapalfi92"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnlkuoABqjM0MDExNDE3MzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoUUH2AFqTQyNTM5ODIwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05a44f2eab226ac6b3077ce511edddeca586b000", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/05a44f2eab226ac6b3077ce511edddeca586b000", "committedDate": "2020-06-02T19:56:27Z", "message": "CB-7268 - Implemented tracing support for flow"}, "afterCommit": {"oid": "b79501d3b783a3a69fdf4c9d96e069cb37686f32", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/b79501d3b783a3a69fdf4c9d96e069cb37686f32", "committedDate": "2020-06-03T08:55:23Z", "message": "CB-7268 - Implemented tracing support for flow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b79501d3b783a3a69fdf4c9d96e069cb37686f32", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/b79501d3b783a3a69fdf4c9d96e069cb37686f32", "committedDate": "2020-06-03T08:55:23Z", "message": "CB-7268 - Implemented tracing support for flow"}, "afterCommit": {"oid": "5459b16ee11e0d5edccc227f7b9ff1f4a598a675", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5459b16ee11e0d5edccc227f7b9ff1f4a598a675", "committedDate": "2020-06-03T09:09:43Z", "message": "CB-7268 - Implemented tracing support for flow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5459b16ee11e0d5edccc227f7b9ff1f4a598a675", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5459b16ee11e0d5edccc227f7b9ff1f4a598a675", "committedDate": "2020-06-03T09:09:43Z", "message": "CB-7268 - Implemented tracing support for flow"}, "afterCommit": {"oid": "c412316b9c7b5216a7203629561a6eb775d9b4a1", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c412316b9c7b5216a7203629561a6eb775d9b4a1", "committedDate": "2020-06-03T11:42:28Z", "message": "CB-7268 - Implemented tracing support for flow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c412316b9c7b5216a7203629561a6eb775d9b4a1", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c412316b9c7b5216a7203629561a6eb775d9b4a1", "committedDate": "2020-06-03T11:42:28Z", "message": "CB-7268 - Implemented tracing support for flow"}, "afterCommit": {"oid": "52aafb0db2f29075166028f6510fc2f900e6bfdc", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/52aafb0db2f29075166028f6510fc2f900e6bfdc", "committedDate": "2020-06-03T13:00:12Z", "message": "CB-7268 - Implemented tracing support for flow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52aafb0db2f29075166028f6510fc2f900e6bfdc", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/52aafb0db2f29075166028f6510fc2f900e6bfdc", "committedDate": "2020-06-03T13:00:12Z", "message": "CB-7268 - Implemented tracing support for flow"}, "afterCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "committedDate": "2020-06-04T09:41:03Z", "message": "CB-7268 - Implemented tracing support for flow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MzAyNTA2", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#pullrequestreview-424302506", "createdAt": "2020-06-04T10:18:52Z", "commit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDoxODo1MlrOGe_Siw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDozMjozOVrOGe_wFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw==", "bodyText": "could you refactor so both the if and else body is in a method?", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435147403", "createdAt": "2020-06-04T10:18:52Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0ODM1MA==", "bodyText": "if we create above a span with spanContext, do we really need this if? we could go with\nflowParameters.setSpanContext(span.context());\nif I'm not mistaken", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435148350", "createdAt": "2020-06-04T10:20:28Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+                    flowContext = createFlowContext(flowParameters, context, payload);\n+                    doExecute(context, payload, flowContext, variables, flowStateName);\n+                } else {\n+                    Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowParameters.getFlowId(),\n+                            null, flowParameters.getFlowTriggerUserCrn());\n+                    if (spanContext == null) {\n+                        spanContext = span.context();\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0OTA4MA==", "bodyText": "also some log would be nice to see what's happening around here", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435149080", "createdAt": "2020-06-04T10:21:42Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw=="}, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0OTY3MQ==", "bodyText": "same here, do we really need this?", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435149671", "createdAt": "2020-06-04T10:22:47Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -71,14 +75,37 @@\n     @Inject\n     private ApplicationFlowInformation applicationFlowInformation;\n \n+    @Inject\n+    private Tracer tracer;\n+\n     @Override\n     public void accept(Event<? extends Payload> event) {\n         String key = (String) event.getKey();\n         Payload payload = event.getData();\n         String flowId = getFlowId(event);\n         String flowChainId = getFlowChainId(event);\n         String flowTriggerUserCrn = getFlowTriggerUserCrn(event);\n-        FlowParameters flowParameters = new FlowParameters(flowId, flowTriggerUserCrn);\n+        Span activeSpan = tracer.activeSpan();\n+        SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+        String operationName = event.getKey().toString();\n+        if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+            doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+        } else {\n+            Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowId, flowChainId, flowTriggerUserCrn);\n+            if (spanContext == null) {\n+                spanContext = span.context();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1MTg5Ng==", "bodyText": "this doExecute is a bit strange, doesn't have any extra info. Could you come up with a better naming, also we already have a doExecute call inside this method", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435151896", "createdAt": "2020-06-04T10:27:02Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -102,6 +113,23 @@ public void execute(StateContext<S, E> context) {\n         });\n     }\n \n+    private void doExecute(StateContext<S, E> context, P payload, C flowContext, Map<Object, Object> variables, String flowStateName) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1Mjc0MQ==", "bodyText": "similar here, can we come up with a meaningful name? like acceptWithSpanContext or whatever", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435152741", "createdAt": "2020-06-04T10:28:35Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -71,14 +75,37 @@\n     @Inject\n     private ApplicationFlowInformation applicationFlowInformation;\n \n+    @Inject\n+    private Tracer tracer;\n+\n     @Override\n     public void accept(Event<? extends Payload> event) {\n         String key = (String) event.getKey();\n         Payload payload = event.getData();\n         String flowId = getFlowId(event);\n         String flowChainId = getFlowChainId(event);\n         String flowTriggerUserCrn = getFlowTriggerUserCrn(event);\n-        FlowParameters flowParameters = new FlowParameters(flowId, flowTriggerUserCrn);\n+        Span activeSpan = tracer.activeSpan();\n+        SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+        String operationName = event.getKey().toString();\n+        if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+            doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+        } else {\n+            Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowId, flowChainId, flowTriggerUserCrn);\n+            if (spanContext == null) {\n+                spanContext = span.context();\n+            }\n+            try (Scope scope = tracer.activateSpan(span)) {\n+                doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+            } finally {\n+                span.finish();\n+            }\n+        }\n+    }\n+\n+    private void doAccept(Event<? extends Payload> event, String key, Payload payload, String flowId, String flowChainId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1NDk2NA==", "bodyText": "same", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435154964", "createdAt": "2020-06-04T10:32:39Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/reactor/FlowParametersAspects.java", "diffHunk": "@@ -29,16 +39,37 @@ public Object setFlowTriggerUserCrnForReactorHandler(ProceedingJoinPoint proceed\n         Event<?> event = (Event<?>) proceedingJoinPoint.getArgs()[0];\n         String flowTriggerUserCrn = event.getHeaders().get(FlowConstants.FLOW_TRIGGER_USERCRN);\n         return ThreadBasedUserCrnProvider.doAsAndThrow(flowTriggerUserCrn, () -> {\n-            if (flowTriggerUserCrn != null) {\n-                try {\n-                    MDCBuilder.buildMdcContextFromCrn(Crn.fromString(flowTriggerUserCrn));\n-                } catch (Exception e) {\n-                    LOGGER.debug(\"Couldn't set MDCContext from crn: [{}]\", flowTriggerUserCrn, e);\n+            String operationName = event.getKey().toString();\n+            SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+            Span activeSpan = tracer.activeSpan();\n+            if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+                return doProceed(proceedingJoinPoint, flowTriggerUserCrn, event, spanContext);\n+            } else {\n+                Span span = TracingUtil.getSpan(tracer, operationName, spanContext, event.getHeaders().get(FlowConstants.FLOW_ID),\n+                        event.getHeaders().get(FlowConstants.FLOW_CHAIN_ID), flowTriggerUserCrn);\n+                try (Scope ignored = tracer.activateSpan(span)) {\n+                    if (spanContext == null) {\n+                        spanContext = span.context();\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/fdc2445efbea2b0c7e042a12dbc6f33cb09df3af", "committedDate": "2020-06-04T09:41:03Z", "message": "CB-7268 - Implemented tracing support for flow"}, "afterCommit": {"oid": "c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "committedDate": "2020-06-04T14:20:46Z", "message": "CB-7268 - Implemented tracing support for flow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12619e43cf4802761fd188ca83de7b8e6dff4a35", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/12619e43cf4802761fd188ca83de7b8e6dff4a35", "committedDate": "2020-06-05T15:14:33Z", "message": "CB-7268 - Implemented tracing support for flow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c2c656cba6a0725ef051e07a26abeb77ffbfa2f1", "committedDate": "2020-06-04T14:20:46Z", "message": "CB-7268 - Implemented tracing support for flow"}, "afterCommit": {"oid": "12619e43cf4802761fd188ca83de7b8e6dff4a35", "author": {"user": {"login": "attilapalfi92", "name": "Attila P\u00e1lfi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/12619e43cf4802761fd188ca83de7b8e6dff4a35", "committedDate": "2020-06-05T15:14:33Z", "message": "CB-7268 - Implemented tracing support for flow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Mzk4MjA1", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#pullrequestreview-425398205", "createdAt": "2020-06-05T15:23:08Z", "commit": {"oid": "12619e43cf4802761fd188ca83de7b8e6dff4a35"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1788, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}