{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNzcyMjgz", "number": 9208, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoyNjoyMlrOEtgvOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowODoxNVrOEtiCTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTU3NzU1OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSecurityService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoyNjoyMlrOHhVy_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoyNjoyMlrOHhVy_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMjE3NQ==", "bodyText": "StringUtils.removeEnd(String str, String remove) would be a bit simpler", "url": "https://github.com/hortonworks/cloudbreak/pull/9208#discussion_r504722175", "createdAt": "2020-10-14T14:26:22Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSecurityService.java", "diffHunk": "@@ -405,4 +417,12 @@ private void processHostCertsBatchResponse(ApiClient client, ApiBatchResponse ap\n             throw new ClouderaManagerOperationFailedException(\"Host certificates rotation batch operation failed: \" + apiBatchResponse);\n         }\n     }\n+\n+    private String createPrivateKeyString(KeyPair sshKeyPair) {\n+        String privateKeyStr = PkiUtil.convert(sshKeyPair.getPrivate());\n+        if (privateKeyStr.endsWith(\"\\n\")) {\n+            privateKeyStr = privateKeyStr.substring(0, privateKeyStr.length() - 1);\n+        }\n+        return privateKeyStr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10042b431ec52c1796f346123b5a26974e6285ac"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTY0NDgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/certrotate/ClusterHostCertificatesRotationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDozOTozNVrOHhWdNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDozOTozNVrOHhWdNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMjk4Mw==", "bodyText": "I would refactor this bit as there is almost a condition for every line:\n    protected Selectable doAccept(HandlerEvent event) {\n        LOGGER.debug(\"Accepting Cluster Manager host certificates rotation request...\");\n        ClusterHostCertificatesRotationRequest request = event.getData();\n        Selectable result;\n        try {\n            Stack stack = stackService.getByIdWithListsInTransaction(request.getResourceId());\n            ClusterApi clusterApi = apiConnectors.getConnector(stack);\n            if (isRootSshAccessNeededForHostCertRotation(stack)) {\n                rotateCertsWithSsh(stack, clusterApi);\n            } else {\n                clusterApi.rotateHostCertificates(null, null);\n            }\n            result = new ClusterHostCertificatesRotationSuccess(request.getResourceId());\n        } catch (Exception e) {\n            LOGGER.info(\"Cluster Manager host certificates rotation failed\", e);\n            result = new ClusterCertificatesRotationFailed(request.getResourceId(), e);\n        }\n        return result;\n    }\n\n    private boolean isRootSshAccessNeededForHostCertRotation(Stack stack) {\n        return CMRepositoryVersionUtil.isRootSshAccessNeededForHostCertRotation(\n                clusterComponentConfigProvider.getClouderaManagerRepoDetails(stack.getCluster().getId()));\n    }\n\n    private void rotateCertsWithSsh(Stack stack, ClusterApi clusterApi) throws Exception {\n        KeyPair sshKeyPair = sshKeyService.generateKeyPair();\n        sshKeyService.addSshPublicKeyToHosts(stack, ROOT_USER, sshKeyPair, TEMPORARY_SSH_KEY);\n        clusterApi.rotateHostCertificates(ROOT_USER, sshKeyPair);\n        sshKeyService.removeSshPublicKeyFromHosts(stack, ROOT_USER, TEMPORARY_SSH_KEY);\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/9208#discussion_r504732983", "createdAt": "2020-10-14T14:39:35Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/cluster/certrotate/ClusterHostCertificatesRotationHandler.java", "diffHunk": "@@ -46,8 +61,18 @@ protected Selectable doAccept(HandlerEvent event) {\n         Selectable result;\n         try {\n             Stack stack = stackService.getByIdWithListsInTransaction(request.getResourceId());\n+            boolean rootSshAccessNeeded = CMRepositoryVersionUtil.isRootSshAccessNeededForHostCertRotation(\n+                    clusterComponentConfigProvider.getClouderaManagerRepoDetails(stack.getCluster().getId()));\n+            KeyPair sshKeyPair = null;\n+            if (rootSshAccessNeeded) {\n+                sshKeyPair = sshKeyService.generateKeyPair();\n+                sshKeyService.addSshPublicKeyToHosts(stack, ROOT_USER, sshKeyPair, TEMPORARY_SSH_KEY);\n+            }\n             ClusterApi clusterApi = apiConnectors.getConnector(stack);\n-            clusterApi.rotateHostCertificates();\n+            clusterApi.rotateHostCertificates(rootSshAccessNeeded ? ROOT_USER : null, sshKeyPair);\n+            if (rootSshAccessNeeded) {\n+                sshKeyService.removeSshPublicKeyFromHosts(stack, ROOT_USER, TEMPORARY_SSH_KEY);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10042b431ec52c1796f346123b5a26974e6285ac"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTcwNTU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/ssh/SshKeyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo1MTozMVrOHhXC9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo1MTozMVrOHhXC9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0MjY0Ng==", "bodyText": "saltState is always \"ssh.remove_ssh_publickey\"\ncould be moved to a constant and inlined at line #54", "url": "https://github.com/hortonworks/cloudbreak/pull/9208#discussion_r504742646", "createdAt": "2020-10-14T14:51:31Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/ssh/SshKeyService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.cloudbreak.ssh;\n+\n+import java.security.KeyPair;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.certificate.PkiUtil;\n+import com.sequenceiq.cloudbreak.core.bootstrap.service.ClusterDeletionBasedExitCriteriaModel;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.orchestrator.host.HostOrchestrator;\n+import com.sequenceiq.cloudbreak.orchestrator.host.OrchestratorStateParams;\n+import com.sequenceiq.cloudbreak.orchestrator.model.Node;\n+import com.sequenceiq.cloudbreak.service.GatewayConfigService;\n+import com.sequenceiq.cloudbreak.util.StackUtil;\n+\n+@Component\n+public class SshKeyService {\n+    @Inject\n+    private HostOrchestrator hostOrchestrator;\n+\n+    @Inject\n+    private GatewayConfigService gatewayConfigService;\n+\n+    @Inject\n+    private StackUtil stackUtil;\n+\n+    public KeyPair generateKeyPair() {\n+        return PkiUtil.generateKeypair();\n+    }\n+\n+    public void addSshPublicKeyToHosts(Stack stack, String user, KeyPair keyPair, String authKeysComment) throws Exception {\n+        OrchestratorStateParams stateParams = createSshStateParams(stack, user, keyPair, authKeysComment, \"ssh.remove_ssh_publickey\");\n+        hostOrchestrator.runOrchestratorState(stateParams);\n+        stateParams.setState(\"ssh.add_ssh_publickey\");\n+        hostOrchestrator.runOrchestratorState(stateParams);\n+    }\n+\n+    public void removeSshPublicKeyFromHosts(Stack stack, String user, String authKeysComment) throws Exception {\n+        OrchestratorStateParams stateParams = createSshStateParams(stack, user, null, authKeysComment, \"ssh.remove_ssh_publickey\");\n+        hostOrchestrator.runOrchestratorState(stateParams);\n+    }\n+\n+    private OrchestratorStateParams createSshStateParams(Stack stack, String user, KeyPair keyPair, String authKeysComment, String saltState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10042b431ec52c1796f346123b5a26974e6285ac"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTc5MDIyOnYy", "diffSide": "RIGHT", "path": "orchestrator-salt/src/main/resources/salt/salt/ssh/remove_ssh_publickey.sls", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowODoxNVrOHhX3Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODo1MzoyOVrOHh9GfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NjAyMw==", "bodyText": "why true?", "url": "https://github.com/hortonworks/cloudbreak/pull/9208#discussion_r504756023", "createdAt": "2020-10-14T15:08:15Z", "author": {"login": "lacikaaa"}, "path": "orchestrator-salt/src/main/resources/salt/salt/ssh/remove_ssh_publickey.sls", "diffHunk": "@@ -0,0 +1,19 @@\n+\n+{{ salt['user.info'](salt['pillar.get']('tmpssh:user')).home }}/.ssh/authorized_keys:\n+  file.blockreplace:\n+    - marker_start: \"# {{ salt['pillar.get']('tmpssh:comment') }}\"\n+    - marker_end: \"# end of {{ salt['pillar.get']('tmpssh:comment') }}\"\n+    - append_if_not_found: True", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10042b431ec52c1796f346123b5a26974e6285ac"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2NjE0MA==", "bodyText": "If it's true the state execution won't fail when the markers are missing", "url": "https://github.com/hortonworks/cloudbreak/pull/9208#discussion_r505366140", "createdAt": "2020-10-15T08:53:29Z", "author": {"login": "schfeca75"}, "path": "orchestrator-salt/src/main/resources/salt/salt/ssh/remove_ssh_publickey.sls", "diffHunk": "@@ -0,0 +1,19 @@\n+\n+{{ salt['user.info'](salt['pillar.get']('tmpssh:user')).home }}/.ssh/authorized_keys:\n+  file.blockreplace:\n+    - marker_start: \"# {{ salt['pillar.get']('tmpssh:comment') }}\"\n+    - marker_end: \"# end of {{ salt['pillar.get']('tmpssh:comment') }}\"\n+    - append_if_not_found: True", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NjAyMw=="}, "originalCommit": {"oid": "10042b431ec52c1796f346123b5a26974e6285ac"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2141, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}