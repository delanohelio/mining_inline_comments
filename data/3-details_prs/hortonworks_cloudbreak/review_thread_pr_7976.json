{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjg0NDM5", "number": 7976, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo0Mzo1OFrOD5tEFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo0Mzo1OFrOD5tEFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODMzNzUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/blueprint/BlueprintService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo0Mzo1OFrOGRHeWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODoyMjozNlrOGRIqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMTQzMg==", "bodyText": "why synchronized is needed?", "url": "https://github.com/hortonworks/cloudbreak/pull/7976#discussion_r420601432", "createdAt": "2020-05-06T07:43:58Z", "author": {"login": "attilapalfi92"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/blueprint/BlueprintService.java", "diffHunk": "@@ -245,7 +250,7 @@ public boolean isDatalakeBlueprint(Blueprint blueprint) {\n         return blueprintListFilters.isDatalakeBlueprint(blueprint);\n     }\n \n-    private Iterable<Blueprint> saveDefaultsWithReadRight(Iterable<Blueprint> blueprints, Workspace workspace) {\n+    private synchronized Iterable<Blueprint> saveDefaultsWithReadRight(Iterable<Blueprint> blueprints, Workspace workspace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64811469cb042aa480bcfd43cc7b9fa960c5fa2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyMDkwOQ==", "bodyText": "The issue shortly: If the workspace does not have any default blueprint and the users want to access it (list it, create freeipa, e.g) in parallel, the threads try to create the default blueprints.\nI tried with transactions, try-catch with a recursive call, but the deadlock occurs as well.\nThe only working solution is the sync block for one instance and the recursive call for more instance -> all threads finish with success.\nI added the sync block to the beginning of update, but I think it is a bottleneck because the read is synced as well, so wait until the other thread finishes (I cannot test it properly, so it is an assumption).\nIf I add the sync block to save only, the default blueprint's update will slower but this is called only on empty ws or new/updated default bps", "url": "https://github.com/hortonworks/cloudbreak/pull/7976#discussion_r420620909", "createdAt": "2020-05-06T08:22:36Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/blueprint/BlueprintService.java", "diffHunk": "@@ -245,7 +250,7 @@ public boolean isDatalakeBlueprint(Blueprint blueprint) {\n         return blueprintListFilters.isDatalakeBlueprint(blueprint);\n     }\n \n-    private Iterable<Blueprint> saveDefaultsWithReadRight(Iterable<Blueprint> blueprints, Workspace workspace) {\n+    private synchronized Iterable<Blueprint> saveDefaultsWithReadRight(Iterable<Blueprint> blueprints, Workspace workspace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMTQzMg=="}, "originalCommit": {"oid": "b64811469cb042aa480bcfd43cc7b9fa960c5fa2"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2428, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}