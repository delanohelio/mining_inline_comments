{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNDI2Mzg2", "number": 8129, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowMjo1MVrOEAf1GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyMDo0NlrOEAgRRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTU2OTUzOnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/resources/actions.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowMjo1MVrOGb0CMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzozMzo0NVrOGb1R9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxNzI2NQ==", "bodyText": "Why not \"environments/createClusterDefinition\"? Other rights follow this convention.", "url": "https://github.com/hortonworks/cloudbreak/pull/8129#discussion_r431817265", "createdAt": "2020-05-28T13:02:51Z", "author": {"login": "foldik"}, "path": "authorization-common/src/main/resources/actions.json", "diffHunk": "@@ -142,5 +142,41 @@\n     \"resourceType\": \"IMAGE_CATALOG\",\n     \"actionType\": \"RESOURCE_DEPENDENT\",\n     \"legacyRight\": \"datahub/write\"\n+  },\n+  \"CREATE_CLUSTER_DEFINITION\": {\n+    \"right\": \"environments/createClusterDefinitions\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b32e103a9514dc328529dac462c6ede6ce0736"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzNzY4NQ==", "bodyText": "This name was specified in the jira issue, and the thunderhead rights were created according to that", "url": "https://github.com/hortonworks/cloudbreak/pull/8129#discussion_r431837685", "createdAt": "2020-05-28T13:33:45Z", "author": {"login": "bbihari"}, "path": "authorization-common/src/main/resources/actions.json", "diffHunk": "@@ -142,5 +142,41 @@\n     \"resourceType\": \"IMAGE_CATALOG\",\n     \"actionType\": \"RESOURCE_DEPENDENT\",\n     \"legacyRight\": \"datahub/write\"\n+  },\n+  \"CREATE_CLUSTER_DEFINITION\": {\n+    \"right\": \"environments/createClusterDefinitions\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxNzI2NQ=="}, "originalCommit": {"oid": "91b32e103a9514dc328529dac462c6ede6ce0736"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTYyMzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/blueprint/DefaultBlueprintChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxNjowOFrOGb0kOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyNjo1OFrOGb3q_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyNTk3OA==", "bodyText": "Can you please do something like this:\nSELECT just_the_necessary_fields WHERE crn in (:crns);\n\ninstead of\nfor ... {\n  SELECT one where crn = :crn\n}", "url": "https://github.com/hortonworks/cloudbreak/pull/8129#discussion_r431825978", "createdAt": "2020-05-28T13:16:08Z", "author": {"login": "foldik"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/blueprint/DefaultBlueprintChecker.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.cloudbreak.service.blueprint;\n+\n+import static com.sequenceiq.authorization.resource.AuthorizationResourceAction.DESCRIBE_CLUSTER_TEMPLATE;\n+import static java.util.Collections.emptyList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.service.CrnsByCategory;\n+import com.sequenceiq.authorization.service.DefaultResourceChecker;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.ResourceStatus;\n+import com.sequenceiq.cloudbreak.domain.Blueprint;\n+\n+@Component\n+public class DefaultBlueprintChecker implements DefaultResourceChecker {\n+\n+    @Inject\n+    private BlueprintService blueprintService;\n+\n+    @Override\n+    public AuthorizationResourceType getResourceType() {\n+        return AuthorizationResourceType.CLUSTER_TEMPLATE;\n+    }\n+\n+    @Override\n+    public boolean isDefault(String resourceCrn) {\n+        Blueprint b = blueprintService.getByResourceCrn(resourceCrn);\n+        return b != null && ResourceStatus.DEFAULT == b.getStatus();\n+    }\n+\n+    @Override\n+    public boolean isAllowedAction(AuthorizationResourceAction action) {\n+        return DESCRIBE_CLUSTER_TEMPLATE.equals(action);\n+    }\n+\n+    @Override\n+    public CrnsByCategory getDefaultResourceCrns(Collection<String> resourceCrns) {\n+        Map<Boolean, List<String>> byDefault = resourceCrns.stream().collect(Collectors.partitioningBy(this::isDefault));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b32e103a9514dc328529dac462c6ede6ce0736"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3Njg2MA==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/8129#discussion_r431876860", "createdAt": "2020-05-28T14:26:58Z", "author": {"login": "bbihari"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/blueprint/DefaultBlueprintChecker.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.cloudbreak.service.blueprint;\n+\n+import static com.sequenceiq.authorization.resource.AuthorizationResourceAction.DESCRIBE_CLUSTER_TEMPLATE;\n+import static java.util.Collections.emptyList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.service.CrnsByCategory;\n+import com.sequenceiq.authorization.service.DefaultResourceChecker;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.ResourceStatus;\n+import com.sequenceiq.cloudbreak.domain.Blueprint;\n+\n+@Component\n+public class DefaultBlueprintChecker implements DefaultResourceChecker {\n+\n+    @Inject\n+    private BlueprintService blueprintService;\n+\n+    @Override\n+    public AuthorizationResourceType getResourceType() {\n+        return AuthorizationResourceType.CLUSTER_TEMPLATE;\n+    }\n+\n+    @Override\n+    public boolean isDefault(String resourceCrn) {\n+        Blueprint b = blueprintService.getByResourceCrn(resourceCrn);\n+        return b != null && ResourceStatus.DEFAULT == b.getStatus();\n+    }\n+\n+    @Override\n+    public boolean isAllowedAction(AuthorizationResourceAction action) {\n+        return DESCRIBE_CLUSTER_TEMPLATE.equals(action);\n+    }\n+\n+    @Override\n+    public CrnsByCategory getDefaultResourceCrns(Collection<String> resourceCrns) {\n+        Map<Boolean, List<String>> byDefault = resourceCrns.stream().collect(Collectors.partitioningBy(this::isDefault));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyNTk3OA=="}, "originalCommit": {"oid": "91b32e103a9514dc328529dac462c6ede6ce0736"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTY0MTY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/template/DefaultClusterTemplateChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyMDo0NlrOGb0wEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyNzowNlrOGb3rSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyOTAwOA==", "bodyText": "Can you please rewrite it as the DefaultBlueprintChecker?", "url": "https://github.com/hortonworks/cloudbreak/pull/8129#discussion_r431829008", "createdAt": "2020-05-28T13:20:46Z", "author": {"login": "foldik"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/template/DefaultClusterTemplateChecker.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.cloudbreak.service.template;\n+\n+import static com.sequenceiq.authorization.resource.AuthorizationResourceAction.DESCRIBE_CLUSTER_DEFINITION;\n+import static com.sequenceiq.authorization.resource.AuthorizationResourceType.CLUSTER_DEFINITION;\n+import static java.util.Collections.emptyList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.service.CrnsByCategory;\n+import com.sequenceiq.authorization.service.DefaultResourceChecker;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.ResourceStatus;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.ClusterTemplate;\n+\n+@Component\n+public class DefaultClusterTemplateChecker implements DefaultResourceChecker {\n+\n+    @Inject\n+    private ClusterTemplateService clusterTemplateService;\n+\n+    @Override\n+    public AuthorizationResourceType getResourceType() {\n+        return CLUSTER_DEFINITION;\n+    }\n+\n+    @Override\n+    public boolean isDefault(String resourceCrn) {\n+        ClusterTemplate b = clusterTemplateService.getByResourceCrn(resourceCrn);\n+        return b != null && ResourceStatus.DEFAULT == b.getStatus();\n+    }\n+\n+    @Override\n+    public boolean isAllowedAction(AuthorizationResourceAction action) {\n+        return DESCRIBE_CLUSTER_DEFINITION == action;\n+    }\n+\n+    @Override\n+    public CrnsByCategory getDefaultResourceCrns(Collection<String> resourceCrns) {\n+        Map<Boolean, List<String>> byDefault = resourceCrns.stream().collect(Collectors.partitioningBy(this::isDefault));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b32e103a9514dc328529dac462c6ede6ce0736"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3NjkzOQ==", "bodyText": "sure", "url": "https://github.com/hortonworks/cloudbreak/pull/8129#discussion_r431876939", "createdAt": "2020-05-28T14:27:06Z", "author": {"login": "bbihari"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/template/DefaultClusterTemplateChecker.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.cloudbreak.service.template;\n+\n+import static com.sequenceiq.authorization.resource.AuthorizationResourceAction.DESCRIBE_CLUSTER_DEFINITION;\n+import static com.sequenceiq.authorization.resource.AuthorizationResourceType.CLUSTER_DEFINITION;\n+import static java.util.Collections.emptyList;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n+import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.service.CrnsByCategory;\n+import com.sequenceiq.authorization.service.DefaultResourceChecker;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.ResourceStatus;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.ClusterTemplate;\n+\n+@Component\n+public class DefaultClusterTemplateChecker implements DefaultResourceChecker {\n+\n+    @Inject\n+    private ClusterTemplateService clusterTemplateService;\n+\n+    @Override\n+    public AuthorizationResourceType getResourceType() {\n+        return CLUSTER_DEFINITION;\n+    }\n+\n+    @Override\n+    public boolean isDefault(String resourceCrn) {\n+        ClusterTemplate b = clusterTemplateService.getByResourceCrn(resourceCrn);\n+        return b != null && ResourceStatus.DEFAULT == b.getStatus();\n+    }\n+\n+    @Override\n+    public boolean isAllowedAction(AuthorizationResourceAction action) {\n+        return DESCRIBE_CLUSTER_DEFINITION == action;\n+    }\n+\n+    @Override\n+    public CrnsByCategory getDefaultResourceCrns(Collection<String> resourceCrns) {\n+        Map<Boolean, List<String>> byDefault = resourceCrns.stream().collect(Collectors.partitioningBy(this::isDefault));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyOTAwOA=="}, "originalCommit": {"oid": "91b32e103a9514dc328529dac462c6ede6ce0736"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3361, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}