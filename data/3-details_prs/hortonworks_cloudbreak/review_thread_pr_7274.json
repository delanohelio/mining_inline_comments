{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjI4OTI1", "number": 7274, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoyNjo0NVrODfKJMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozNzo0NVrODfl8Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTk4NjQzOnYy", "diffSide": "LEFT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoyNjo0NVrOFossPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoyNjo0NVrOFossPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxOTU4MQ==", "bodyText": "We use this method here AwsNetworkService#80. Is it same?", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378219581", "createdAt": "2020-02-12T12:26:45Z", "author": {"login": "topolyai5"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -389,7 +389,7 @@ private DescribeVpcsRequest getDescribeVpcsRequestWIthFilters(Map<String, String\n                             subnetName.orElse(subnet.getSubnetId()),\n                             subnet.getAvailabilityZone(),\n                             subnet.getCidrBlock(),\n-                            !subnet.isMapPublicIpOnLaunch(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573f1db7fea0504727a0ac9d9ef419e11bacca41"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzY5MzUzOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTozMTowMlrOFpQcWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTowOToyNFrOFpXb-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNTMzOQ==", "bodyText": "We are passing hasInternetGateway's value 2 times here.", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378805339", "createdAt": "2020-02-13T11:31:02Z", "author": {"login": "keyki"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -389,7 +389,7 @@ private DescribeVpcsRequest getDescribeVpcsRequestWIthFilters(Map<String, String\n                             subnetName.orElse(subnet.getSubnetId()),\n                             subnet.getAvailabilityZone(),\n                             subnet.getCidrBlock(),\n-                            !subnet.isMapPublicIpOnLaunch(),\n+                            !hasInternetGateway,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d879a6e4c53c009d13680f08b3c46b79ac4516"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDMyOA==", "bodyText": "thats ok, as private subnet flag is driven by it", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378810328", "createdAt": "2020-02-13T11:43:09Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -389,7 +389,7 @@ private DescribeVpcsRequest getDescribeVpcsRequestWIthFilters(Map<String, String\n                             subnetName.orElse(subnet.getSubnetId()),\n                             subnet.getAvailabilityZone(),\n                             subnet.getCidrBlock(),\n-                            !subnet.isMapPublicIpOnLaunch(),\n+                            !hasInternetGateway,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNTMzOQ=="}, "originalCommit": {"oid": "65d879a6e4c53c009d13680f08b3c46b79ac4516"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxOTkyOA==", "bodyText": "Ok, I see the value in that and addressed it with a new ctor. However, it would be great to refactor CloudSubnet as it has too many ctors.", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378919928", "createdAt": "2020-02-13T15:09:24Z", "author": {"login": "gergopapi2"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -389,7 +389,7 @@ private DescribeVpcsRequest getDescribeVpcsRequestWIthFilters(Map<String, String\n                             subnetName.orElse(subnet.getSubnetId()),\n                             subnet.getAvailabilityZone(),\n                             subnet.getCidrBlock(),\n-                            !subnet.isMapPublicIpOnLaunch(),\n+                            !hasInternetGateway,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNTMzOQ=="}, "originalCommit": {"oid": "65d879a6e4c53c009d13680f08b3c46b79ac4516"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzcwMDI3OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTozMzo0M1rOFpQgpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTowOTozN1rOFpXcbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNjQzNw==", "bodyText": "return with the optional here", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378806437", "createdAt": "2020-02-13T11:33:43Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,58 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n-            return null;\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        return network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty() && !network.getSubnetMetas().isEmpty()\n+                ? getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform)\n+                : null;\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        String chosenSubnetId = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (StringUtils.isEmpty(chosenSubnetId) && !preferPrivate) {\n+            chosenSubnetId = tryGetOnePrivateSubnet(subnetMetas);\n         }\n+        if (StringUtils.isEmpty(chosenSubnetId)) {\n+            chosenSubnetId = subnetMetas.get(0).getId();\n+        }\n+        return chosenSubnetId;\n+    }\n+\n+    private String tryGetOnePublicSubnet(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> publicSubnet = subnetMetas.stream()\n+                .filter(sn -> !sn.isPrivateSubnet() && sn.isMapPublicIpOnLaunch())\n+                .findAny();\n+        return publicSubnet.isPresent() ? publicSubnet.get().getId() : \"\";\n     }\n \n-    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate) {\n-        Optional<CloudSubnet> subnet =\n-                network.getSubnetMetas().values().stream().filter(cloudSubnet -> preferPrivate == cloudSubnet.isPrivateSubnet()).findAny();\n-        return subnet.isPresent() ? subnet.get().getId() : network.getSubnetIds().iterator().next();\n+    private String tryGetOnePrivateSubnet(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> privateSubnet = subnetMetas.stream()\n+                .filter(CloudSubnet::isPrivateSubnet)\n+                .findFirst();\n+        return privateSubnet.isPresent() ? privateSubnet.get().getId() : \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d879a6e4c53c009d13680f08b3c46b79ac4516"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDA0NA==", "bodyText": "Good idea, did it, thanks.", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378920044", "createdAt": "2020-02-13T15:09:37Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,58 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n-            return null;\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        return network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty() && !network.getSubnetMetas().isEmpty()\n+                ? getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform)\n+                : null;\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        String chosenSubnetId = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (StringUtils.isEmpty(chosenSubnetId) && !preferPrivate) {\n+            chosenSubnetId = tryGetOnePrivateSubnet(subnetMetas);\n         }\n+        if (StringUtils.isEmpty(chosenSubnetId)) {\n+            chosenSubnetId = subnetMetas.get(0).getId();\n+        }\n+        return chosenSubnetId;\n+    }\n+\n+    private String tryGetOnePublicSubnet(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> publicSubnet = subnetMetas.stream()\n+                .filter(sn -> !sn.isPrivateSubnet() && sn.isMapPublicIpOnLaunch())\n+                .findAny();\n+        return publicSubnet.isPresent() ? publicSubnet.get().getId() : \"\";\n     }\n \n-    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate) {\n-        Optional<CloudSubnet> subnet =\n-                network.getSubnetMetas().values().stream().filter(cloudSubnet -> preferPrivate == cloudSubnet.isPrivateSubnet()).findAny();\n-        return subnet.isPresent() ? subnet.get().getId() : network.getSubnetIds().iterator().next();\n+    private String tryGetOnePrivateSubnet(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> privateSubnet = subnetMetas.stream()\n+                .filter(CloudSubnet::isPrivateSubnet)\n+                .findFirst();\n+        return privateSubnet.isPresent() ? privateSubnet.get().getId() : \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNjQzNw=="}, "originalCommit": {"oid": "65d879a6e4c53c009d13680f08b3c46b79ac4516"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzcwMjExOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTozNDoxOVrOFpQhtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTowOTo0NFrOFpXcrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNjcxMQ==", "bodyText": "return with optional here", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378806711", "createdAt": "2020-02-13T11:34:19Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,58 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n-            return null;\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        return network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty() && !network.getSubnetMetas().isEmpty()\n+                ? getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform)\n+                : null;\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        String chosenSubnetId = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (StringUtils.isEmpty(chosenSubnetId) && !preferPrivate) {\n+            chosenSubnetId = tryGetOnePrivateSubnet(subnetMetas);\n         }\n+        if (StringUtils.isEmpty(chosenSubnetId)) {\n+            chosenSubnetId = subnetMetas.get(0).getId();\n+        }\n+        return chosenSubnetId;\n+    }\n+\n+    private String tryGetOnePublicSubnet(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> publicSubnet = subnetMetas.stream()\n+                .filter(sn -> !sn.isPrivateSubnet() && sn.isMapPublicIpOnLaunch())\n+                .findAny();\n+        return publicSubnet.isPresent() ? publicSubnet.get().getId() : \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d879a6e4c53c009d13680f08b3c46b79ac4516"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDExMA==", "bodyText": "Good idea, did it, thanks.", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378920110", "createdAt": "2020-02-13T15:09:44Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,58 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n-            return null;\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        return network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty() && !network.getSubnetMetas().isEmpty()\n+                ? getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform)\n+                : null;\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        String chosenSubnetId = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (StringUtils.isEmpty(chosenSubnetId) && !preferPrivate) {\n+            chosenSubnetId = tryGetOnePrivateSubnet(subnetMetas);\n         }\n+        if (StringUtils.isEmpty(chosenSubnetId)) {\n+            chosenSubnetId = subnetMetas.get(0).getId();\n+        }\n+        return chosenSubnetId;\n+    }\n+\n+    private String tryGetOnePublicSubnet(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> publicSubnet = subnetMetas.stream()\n+                .filter(sn -> !sn.isPrivateSubnet() && sn.isMapPublicIpOnLaunch())\n+                .findAny();\n+        return publicSubnet.isPresent() ? publicSubnet.get().getId() : \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNjcxMQ=="}, "originalCommit": {"oid": "65d879a6e4c53c009d13680f08b3c46b79ac4516"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzcxNjM3OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTozOTo0N1rOFpQqeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToxMDowMFrOFpXdXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwODk1Mg==", "bodyText": "I'm missing the scenario here, when we prefer private, but we don't have one, we should choose a public with mapPublicIpOnLaunch enabled if it's possible, and fall back to any subnet if it fails", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378808952", "createdAt": "2020-02-13T11:39:47Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,58 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n-            return null;\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        return network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty() && !network.getSubnetMetas().isEmpty()\n+                ? getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform)\n+                : null;\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d879a6e4c53c009d13680f08b3c46b79ac4516"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDI4NQ==", "bodyText": "Yes, that is also useful, added it. Thanks.", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378920285", "createdAt": "2020-02-13T15:10:00Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,58 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n-            return null;\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        return network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty() && !network.getSubnetMetas().isEmpty()\n+                ? getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform)\n+                : null;\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwODk1Mg=="}, "originalCommit": {"oid": "65d879a6e4c53c009d13680f08b3c46b79ac4516"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDQ5MjQ1OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToyNjowNVrOFpYH6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozMjoyM1rOFpYYfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMTE3OA==", "bodyText": "it would reflect the logic more if you move this if into the upper one", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378931178", "createdAt": "2020-02-13T15:26:05Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,66 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetIdProvider.class);\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        LOGGER.debug(\"Choosing subnet, network: {},  platform: {}, tunnel: {}\", network, cloudPlatform, tunnel);\n+        if (network == null || network.getSubnetIds() == null || network.getSubnetIds().isEmpty() || network.getSubnetMetas().isEmpty()) {\n+            LOGGER.debug(\"Check failed, returning null\");\n             return null;\n         }\n+        return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        LOGGER.debug(\"Choosing aws subnet, preferring private: {}, available\", preferPrivate);\n+        Optional<CloudSubnet> foundCloudSubnet = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (foundCloudSubnet.isEmpty()) {\n+            LOGGER.debug(\"Choosing subnet alternate strategy\");\n+            // This is just trying the reverse option, i.e. if we preferred private but there was no private then let's look for a suitable public subnet\n+            foundCloudSubnet = preferPrivate ? tryGetOnePublicSubnet(subnetMetas) : tryGetOnePrivateSubnet(subnetMetas);\n+        }\n+        if (foundCloudSubnet.isEmpty()) {\n+            LOGGER.debug(\"Choosing subnet, fallback to any subnet\");\n+            foundCloudSubnet = Optional.of(subnetMetas.get(0));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f05ac94d668948ad4b694bcf6f01b7c61e4270"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNDEwNg==", "bodyText": "I see. Actually I like to avoid many indentations, they are hard to read. Also, this is yet another step to try to get a subnet, different from the previous one.", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378934106", "createdAt": "2020-02-13T15:30:25Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,66 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetIdProvider.class);\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        LOGGER.debug(\"Choosing subnet, network: {},  platform: {}, tunnel: {}\", network, cloudPlatform, tunnel);\n+        if (network == null || network.getSubnetIds() == null || network.getSubnetIds().isEmpty() || network.getSubnetMetas().isEmpty()) {\n+            LOGGER.debug(\"Check failed, returning null\");\n             return null;\n         }\n+        return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        LOGGER.debug(\"Choosing aws subnet, preferring private: {}, available\", preferPrivate);\n+        Optional<CloudSubnet> foundCloudSubnet = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (foundCloudSubnet.isEmpty()) {\n+            LOGGER.debug(\"Choosing subnet alternate strategy\");\n+            // This is just trying the reverse option, i.e. if we preferred private but there was no private then let's look for a suitable public subnet\n+            foundCloudSubnet = preferPrivate ? tryGetOnePublicSubnet(subnetMetas) : tryGetOnePrivateSubnet(subnetMetas);\n+        }\n+        if (foundCloudSubnet.isEmpty()) {\n+            LOGGER.debug(\"Choosing subnet, fallback to any subnet\");\n+            foundCloudSubnet = Optional.of(subnetMetas.get(0));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMTE3OA=="}, "originalCommit": {"oid": "c0f05ac94d668948ad4b694bcf6f01b7c61e4270"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNTQyMA==", "bodyText": "also can be moved to a separate method called like fallbackToAny", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378935420", "createdAt": "2020-02-13T15:32:23Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,66 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetIdProvider.class);\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        LOGGER.debug(\"Choosing subnet, network: {},  platform: {}, tunnel: {}\", network, cloudPlatform, tunnel);\n+        if (network == null || network.getSubnetIds() == null || network.getSubnetIds().isEmpty() || network.getSubnetMetas().isEmpty()) {\n+            LOGGER.debug(\"Check failed, returning null\");\n             return null;\n         }\n+        return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        LOGGER.debug(\"Choosing aws subnet, preferring private: {}, available\", preferPrivate);\n+        Optional<CloudSubnet> foundCloudSubnet = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (foundCloudSubnet.isEmpty()) {\n+            LOGGER.debug(\"Choosing subnet alternate strategy\");\n+            // This is just trying the reverse option, i.e. if we preferred private but there was no private then let's look for a suitable public subnet\n+            foundCloudSubnet = preferPrivate ? tryGetOnePublicSubnet(subnetMetas) : tryGetOnePrivateSubnet(subnetMetas);\n+        }\n+        if (foundCloudSubnet.isEmpty()) {\n+            LOGGER.debug(\"Choosing subnet, fallback to any subnet\");\n+            foundCloudSubnet = Optional.of(subnetMetas.get(0));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMTE3OA=="}, "originalCommit": {"oid": "c0f05ac94d668948ad4b694bcf6f01b7c61e4270"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDUyNTAwOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozMzo0OVrOFpYcaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozMzo0OVrOFpYcaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNjQyNQ==", "bodyText": "this could be moved out and givne a meaningful name so we don't need the comment", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378936425", "createdAt": "2020-02-13T15:33:49Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,66 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetIdProvider.class);\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        LOGGER.debug(\"Choosing subnet, network: {},  platform: {}, tunnel: {}\", network, cloudPlatform, tunnel);\n+        if (network == null || network.getSubnetIds() == null || network.getSubnetIds().isEmpty() || network.getSubnetMetas().isEmpty()) {\n+            LOGGER.debug(\"Check failed, returning null\");\n             return null;\n         }\n+        return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        LOGGER.debug(\"Choosing aws subnet, preferring private: {}, available\", preferPrivate);\n+        Optional<CloudSubnet> foundCloudSubnet = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (foundCloudSubnet.isEmpty()) {\n+            LOGGER.debug(\"Choosing subnet alternate strategy\");\n+            // This is just trying the reverse option, i.e. if we preferred private but there was no private then let's look for a suitable public subnet\n+            foundCloudSubnet = preferPrivate ? tryGetOnePublicSubnet(subnetMetas) : tryGetOnePrivateSubnet(subnetMetas);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f05ac94d668948ad4b694bcf6f01b7c61e4270"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDU0MDM4OnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozNzo0NVrOFpYmUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTo0MDowMVrOFpYsyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzODk2Mw==", "bodyText": "I don't like it's called privateSubnet and we set the IGW from it. We request the IGW setting boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, subnet.getSubnetId()); from AWS so it would make sense, that the parameter is called IGW, and we set the privateSubnet from it's value and not reversed.", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378938963", "createdAt": "2020-02-13T15:37:45Z", "author": {"login": "lacikaaa"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "diffHunk": "@@ -39,6 +39,16 @@ public CloudSubnet(String id, String name, String availabilityZone, String cidr)\n         this.cidr = cidr;\n     }\n \n+    public CloudSubnet(String id, String name, String availabilityZone, String cidr, boolean privateSubnet, boolean mapPublicIpOnLaunch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f05ac94d668948ad4b694bcf6f01b7c61e4270"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0MDYxOQ==", "bodyText": "Yes, that's what I did first, but then the tests were harder to read. The two terms on aws are interchangeable. But of course, I can change.", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378940619", "createdAt": "2020-02-13T15:40:01Z", "author": {"login": "gergopapi2"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "diffHunk": "@@ -39,6 +39,16 @@ public CloudSubnet(String id, String name, String availabilityZone, String cidr)\n         this.cidr = cidr;\n     }\n \n+    public CloudSubnet(String id, String name, String availabilityZone, String cidr, boolean privateSubnet, boolean mapPublicIpOnLaunch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzODk2Mw=="}, "originalCommit": {"oid": "c0f05ac94d668948ad4b694bcf6f01b7c61e4270"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2839, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}