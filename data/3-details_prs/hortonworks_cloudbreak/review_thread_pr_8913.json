{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3OTg4ODMw", "number": 8913, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTo0MzoyM1rOEg51tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTo0MzoyM1rOEg51tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTM3NTI3OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerDiagnosticsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTo0MzoyNFrOHN8MvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTo1MzoyMlrOHN8e6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM3OTgzNw==", "bodyText": "a log would be nice here. \"starting polling blabla...\" or something", "url": "https://github.com/hortonworks/cloudbreak/pull/8913#discussion_r484379837", "createdAt": "2020-09-07T11:43:24Z", "author": {"login": "attilapalfi92"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerDiagnosticsService.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.sequenceiq.cloudbreak.cm;\n+\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isExited;\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isTimeout;\n+\n+import java.math.BigDecimal;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.joda.time.DateTime;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Service;\n+\n+import com.cloudera.api.swagger.ClouderaManagerResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCollectDiagnosticDataArguments;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.sequenceiq.cloudbreak.client.HttpClientConfig;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n+import com.sequenceiq.cloudbreak.cluster.api.ClusterDiagnosticsService;\n+import com.sequenceiq.cloudbreak.cluster.service.ClusterClientInitException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiClientProvider;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerClientInitException;\n+import com.sequenceiq.cloudbreak.cm.client.retry.ClouderaManagerApiFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n+import com.sequenceiq.cloudbreak.service.CloudbreakException;\n+import com.sequenceiq.common.model.diagnostics.CmDiagnosticsParameters;\n+\n+@Service\n+@Scope(\"prototype\")\n+public class ClouderaManagerDiagnosticsService implements ClusterDiagnosticsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerDiagnosticsService.class);\n+\n+    @Inject\n+    private ClouderaManagerApiClientProvider clouderaManagerApiClientProvider;\n+\n+    @Inject\n+    private ClouderaManagerApiFactory clouderaManagerApiFactory;\n+\n+    @Inject\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n+\n+    private final Stack stack;\n+\n+    private final HttpClientConfig clientConfig;\n+\n+    private ApiClient client;\n+\n+    public ClouderaManagerDiagnosticsService(Stack stack, HttpClientConfig clientConfig) {\n+        this.stack = stack;\n+        this.clientConfig = clientConfig;\n+    }\n+\n+    @PostConstruct\n+    public void initApiClient() throws ClusterClientInitException {\n+        Cluster cluster = stack.getCluster();\n+        String cloudbreakAmbariUser = cluster.getCloudbreakAmbariUser();\n+        String cloudbreakAmbariPassword = cluster.getCloudbreakAmbariPassword();\n+        try {\n+            client = clouderaManagerApiClientProvider\n+                    .getClient(stack.getGatewayPort(), cloudbreakAmbariUser, cloudbreakAmbariPassword, clientConfig);\n+        } catch (ClouderaManagerClientInitException e) {\n+            throw new ClusterClientInitException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void collectDiagnostics(CmDiagnosticsParameters parameters) throws CloudbreakException {\n+        ClouderaManagerResourceApi resourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(client);\n+        try {\n+            ApiCommand collectDiagnostics = resourceApi.collectDiagnosticDataCommand(convertToCollectDiagnosticDataArguments(parameters));\n+            PollingResult pollingResult = clouderaManagerPollingServiceProvider.startPollingCollectDiagnostics(stack, client, collectDiagnostics.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "753353f32edced1debb744c87b5483e6aa8f32c1"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NDQ5MA==", "bodyText": "actually there is a log in startPollingCollectDiagnostics call itself", "url": "https://github.com/hortonworks/cloudbreak/pull/8913#discussion_r484384490", "createdAt": "2020-09-07T11:53:22Z", "author": {"login": "oleewere"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerDiagnosticsService.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.sequenceiq.cloudbreak.cm;\n+\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isExited;\n+import static com.sequenceiq.cloudbreak.polling.PollingResult.isTimeout;\n+\n+import java.math.BigDecimal;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.joda.time.DateTime;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Service;\n+\n+import com.cloudera.api.swagger.ClouderaManagerResourceApi;\n+import com.cloudera.api.swagger.client.ApiClient;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCollectDiagnosticDataArguments;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.sequenceiq.cloudbreak.client.HttpClientConfig;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.CancellationException;\n+import com.sequenceiq.cloudbreak.cluster.api.ClusterDiagnosticsService;\n+import com.sequenceiq.cloudbreak.cluster.service.ClusterClientInitException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiClientProvider;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerClientInitException;\n+import com.sequenceiq.cloudbreak.cm.client.retry.ClouderaManagerApiFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerPollingServiceProvider;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.polling.PollingResult;\n+import com.sequenceiq.cloudbreak.service.CloudbreakException;\n+import com.sequenceiq.common.model.diagnostics.CmDiagnosticsParameters;\n+\n+@Service\n+@Scope(\"prototype\")\n+public class ClouderaManagerDiagnosticsService implements ClusterDiagnosticsService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClouderaManagerDiagnosticsService.class);\n+\n+    @Inject\n+    private ClouderaManagerApiClientProvider clouderaManagerApiClientProvider;\n+\n+    @Inject\n+    private ClouderaManagerApiFactory clouderaManagerApiFactory;\n+\n+    @Inject\n+    private ClouderaManagerPollingServiceProvider clouderaManagerPollingServiceProvider;\n+\n+    private final Stack stack;\n+\n+    private final HttpClientConfig clientConfig;\n+\n+    private ApiClient client;\n+\n+    public ClouderaManagerDiagnosticsService(Stack stack, HttpClientConfig clientConfig) {\n+        this.stack = stack;\n+        this.clientConfig = clientConfig;\n+    }\n+\n+    @PostConstruct\n+    public void initApiClient() throws ClusterClientInitException {\n+        Cluster cluster = stack.getCluster();\n+        String cloudbreakAmbariUser = cluster.getCloudbreakAmbariUser();\n+        String cloudbreakAmbariPassword = cluster.getCloudbreakAmbariPassword();\n+        try {\n+            client = clouderaManagerApiClientProvider\n+                    .getClient(stack.getGatewayPort(), cloudbreakAmbariUser, cloudbreakAmbariPassword, clientConfig);\n+        } catch (ClouderaManagerClientInitException e) {\n+            throw new ClusterClientInitException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void collectDiagnostics(CmDiagnosticsParameters parameters) throws CloudbreakException {\n+        ClouderaManagerResourceApi resourceApi = clouderaManagerApiFactory.getClouderaManagerResourceApi(client);\n+        try {\n+            ApiCommand collectDiagnostics = resourceApi.collectDiagnosticDataCommand(convertToCollectDiagnosticDataArguments(parameters));\n+            PollingResult pollingResult = clouderaManagerPollingServiceProvider.startPollingCollectDiagnostics(stack, client, collectDiagnostics.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM3OTgzNw=="}, "originalCommit": {"oid": "753353f32edced1debb744c87b5483e6aa8f32c1"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2333, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}