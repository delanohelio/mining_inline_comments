{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTAxNDgz", "number": 7897, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzozNzozMVrOD2z5Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzozNzozMVrOD2z5Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Nzk5OTAyOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UmsUsersStateProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzozNzozMVrOGMvecQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo0MToyMVrOGMvp5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxMzkzNw==", "bodyText": "So we have these utility functions in Crns.java and Crn.java to do things like Crns.safeFromString (that can't return null) and Crns.forTypr(String, Service, ResourceType) that ensures that a crn belongs to a service and is of a specific resource type. It may be useful to bring that in here.", "url": "https://github.com/hortonworks/cloudbreak/pull/7897#discussion_r416013937", "createdAt": "2020-04-27T17:37:31Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UmsUsersStateProvider.java", "diffHunk": "@@ -230,4 +247,14 @@ private EnvironmentAccessChecker createEnvironmentAccessChecker(String environme\n         requireNonNull(environmentCrn, \"environmentCrn is null\");\n         return new EnvironmentAccessChecker(grpcUmsClient, environmentCrn);\n     }\n+\n+    private Crn getCrn(WorkloadAdministrationGroup wag) {\n+        Crn resourceCrn = null;\n+        try {\n+            resourceCrn = Crn.fromString(wag.getResource());\n+        } catch (Exception e) {\n+            LOGGER.debug(\"Invalid resource is assigned to workload admin group: {}\", e.getMessage());\n+        }\n+        return resourceCrn;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96760454e0c9f24f20c72820832f9d0e016527f7"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxNjg2OA==", "bodyText": "Thanks. I'll bring that one in along with some tests.", "url": "https://github.com/hortonworks/cloudbreak/pull/7897#discussion_r416016868", "createdAt": "2020-04-27T17:41:21Z", "author": {"login": "keyki"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UmsUsersStateProvider.java", "diffHunk": "@@ -230,4 +247,14 @@ private EnvironmentAccessChecker createEnvironmentAccessChecker(String environme\n         requireNonNull(environmentCrn, \"environmentCrn is null\");\n         return new EnvironmentAccessChecker(grpcUmsClient, environmentCrn);\n     }\n+\n+    private Crn getCrn(WorkloadAdministrationGroup wag) {\n+        Crn resourceCrn = null;\n+        try {\n+            resourceCrn = Crn.fromString(wag.getResource());\n+        } catch (Exception e) {\n+            LOGGER.debug(\"Invalid resource is assigned to workload admin group: {}\", e.getMessage());\n+        }\n+        return resourceCrn;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxMzkzNw=="}, "originalCommit": {"oid": "96760454e0c9f24f20c72820832f9d0e016527f7"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2499, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}