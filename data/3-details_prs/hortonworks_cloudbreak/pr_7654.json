{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MDEzODQx", "number": 7654, "title": "CB-5989: support HDP-3.1.5", "bodyText": "", "createdAt": "2020-03-26T08:01:15Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7654", "merged": true, "mergeCommit": {"oid": "6158f2c4b7f26d4fc83b5dba4932ddd34934be7d"}, "closed": true, "closedAt": "2020-03-30T07:38:05Z", "author": {"login": "tiborpopovics"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRsqY1gFqTM4MjY1MjM2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSpgDLAFqTM4MzU5NzQwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNjUyMzY2", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#pullrequestreview-382652366", "createdAt": "2020-03-27T08:18:33Z", "commit": {"oid": "9907d64c347078819b2cfbc8a92b1644b72ccdca"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoxODozM1rOF8m_3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODozOTo0NlrOF8noRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NzgyMw==", "bodyText": "Typo - centos7", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399097823", "createdAt": "2020-03-27T08:18:33Z", "author": {"login": "pdarvasi"}, "path": "cloud-common/src/main/resources/application.yml", "diffHunk": "@@ -322,6 +348,34 @@ cb:\n             ubuntu18: http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.22/repos/ubuntu18\n             sles12: http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.22/repos/sles12\n             amazonlinux2: http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.22/repos/amazonlinux2\n+      \"[3.1.5]\":\n+        version: 3.1.5.0\n+        minAmbari: 2.7.5\n+        paywallProtected: true\n+        repo:\n+          stack:\n+            repoid: HDP-3.1.5\n+            redhat7: https://archive.cloudera.com/p/HDP/centos7/3.x/updates/3.1.5.0\n+            debian9: https://archive.cloudera.com/p/HDP/centos7/3.x/updates/3.1.5.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9907d64c347078819b2cfbc8a92b1644b72ccdca"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMTExNQ==", "bodyText": "isStackPaywallProtected() could check this setting, too, as it already checks almost the same logic", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399101115", "createdAt": "2020-03-27T08:25:32Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.cloudbreak.controller.validation.stack;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.model.AmbariRepoDetailsJson;\n+import com.sequenceiq.cloudbreak.api.model.AmbariStackDetailsJson;\n+import com.sequenceiq.cloudbreak.api.model.stack.cluster.ClusterRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.component.AmbariInfo;\n+import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDFEntries;\n+import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDPEntries;\n+import com.sequenceiq.cloudbreak.cloud.model.component.StackInfo;\n+import com.sequenceiq.cloudbreak.controller.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.service.DefaultAmbariRepoService;\n+import com.sequenceiq.cloudbreak.service.credential.PaywallCredentialService;\n+\n+@Component\n+public class PaywallCredentialValidator {\n+\n+    @Inject\n+    private PaywallCredentialService paywallCredentialService;\n+\n+    @Inject\n+    private DefaultHDPEntries defaultHDPEntries;\n+\n+    @Inject\n+    private DefaultHDFEntries defaultHDFEntries;\n+\n+    @Inject\n+    private DefaultAmbariRepoService defaultAmbariRepoService;\n+\n+    public void validateCredential(ClusterRequest clusterRequest, String stackType, String stackVersion) {\n+        StackInfo stackInfo = getStackInfo(stackType, stackVersion);\n+        boolean noPaywallCredentialAvailable = noPaywallCredentialAvailable();\n+        if (clusterRequest.getAmbariStackDetails() != null && clusterRequest.getAmbariRepoDetailsJson() != null) {\n+            if ((isStackPaywallProtected(clusterRequest, stackInfo) || isAmbariPaywallProtected(clusterRequest)) && noPaywallCredentialAvailable) {\n+                throwException();\n+            }\n+        } else if (stackInfo != null && stackInfo.isPaywallProtected() && noPaywallCredentialAvailable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9907d64c347078819b2cfbc8a92b1644b72ccdca"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMjA5MA==", "bodyText": "You can use StackType enum instead of the constant here", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399102090", "createdAt": "2020-03-27T08:27:28Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/PaywallCredentialValidator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.cloudbreak.controller.validation.stack;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.model.AmbariRepoDetailsJson;\n+import com.sequenceiq.cloudbreak.api.model.AmbariStackDetailsJson;\n+import com.sequenceiq.cloudbreak.api.model.stack.cluster.ClusterRequest;\n+import com.sequenceiq.cloudbreak.cloud.model.component.AmbariInfo;\n+import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDFEntries;\n+import com.sequenceiq.cloudbreak.cloud.model.component.DefaultHDPEntries;\n+import com.sequenceiq.cloudbreak.cloud.model.component.StackInfo;\n+import com.sequenceiq.cloudbreak.controller.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.service.DefaultAmbariRepoService;\n+import com.sequenceiq.cloudbreak.service.credential.PaywallCredentialService;\n+\n+@Component\n+public class PaywallCredentialValidator {\n+\n+    @Inject\n+    private PaywallCredentialService paywallCredentialService;\n+\n+    @Inject\n+    private DefaultHDPEntries defaultHDPEntries;\n+\n+    @Inject\n+    private DefaultHDFEntries defaultHDFEntries;\n+\n+    @Inject\n+    private DefaultAmbariRepoService defaultAmbariRepoService;\n+\n+    public void validateCredential(ClusterRequest clusterRequest, String stackType, String stackVersion) {\n+        StackInfo stackInfo = getStackInfo(stackType, stackVersion);\n+        boolean noPaywallCredentialAvailable = noPaywallCredentialAvailable();\n+        if (clusterRequest.getAmbariStackDetails() != null && clusterRequest.getAmbariRepoDetailsJson() != null) {\n+            if ((isStackPaywallProtected(clusterRequest, stackInfo) || isAmbariPaywallProtected(clusterRequest)) && noPaywallCredentialAvailable) {\n+                throwException();\n+            }\n+        } else if (stackInfo != null && stackInfo.isPaywallProtected() && noPaywallCredentialAvailable) {\n+            throwException();\n+        }\n+    }\n+\n+    private StackInfo getStackInfo(String stackType, String stackVersion) {\n+        return \"HDP\".equals(stackType) ? defaultHDPEntries.getEntries().get(stackVersion) : defaultHDFEntries.getEntries().get(stackVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9907d64c347078819b2cfbc8a92b1644b72ccdca"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNTcyNw==", "bodyText": "Does this mean that we do not allow e.g. 2.6 anymore? Isn't it needed?", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399105727", "createdAt": "2020-03-27T08:34:50Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/BlueprintRequestToBlueprintConverter.java", "diffHunk": "@@ -77,9 +77,10 @@ private void validateBlueprintStackVersion(Blueprint blueprint) {\n         try {\n             JsonNode root = JsonUtil.readTree(blueprint.getBlueprintText());\n             String stackVersion = blueprintUtils.getBlueprintStackVersion(root);\n-            if (StringUtils.isBlank(stackVersion) || !stackVersion.matches(\"[0-9]+\\\\.[0-9]+\")) {\n-                throw new BadRequestException(String.format(\"Stack version [%s] is not valid. Valid stack version is in MAJOR.MINOR format eg.: 2.6\",\n-                        stackVersion));\n+            if (StringUtils.isBlank(stackVersion) || !stackVersion.matches(\"[0-9]+\\\\.[0-9]?(\\\\.?[0-9])\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9907d64c347078819b2cfbc8a92b1644b72ccdca"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzQzMQ==", "bodyText": "Is this being used here?", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399107431", "createdAt": "2020-03-27T08:38:23Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/RepositoryValidator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.cloudbreak.service;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.api.model.stack.StackDescriptor;\n+import com.sequenceiq.cloudbreak.cloud.VersionComparator;\n+import com.sequenceiq.cloudbreak.cloud.model.AmbariRepo;\n+import com.sequenceiq.cloudbreak.cloud.model.Image;\n+import com.sequenceiq.cloudbreak.cloud.model.component.StackRepoDetails;\n+import com.sequenceiq.cloudbreak.controller.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.domain.stack.Component;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.ClusterComponent;\n+import com.sequenceiq.cloudbreak.service.credential.PaywallCredentialService;\n+\n+@Service\n+public class RepositoryValidator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RepositoryValidator.class);\n+\n+    @Inject\n+    private StackMatrixService stackMatrixService;\n+\n+    @Inject\n+    private PaywallCredentialService paywallCredentialService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9907d64c347078819b2cfbc8a92b1644b72ccdca"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwODE2Nw==", "bodyText": "We should log the fact if it is not available.", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#discussion_r399108167", "createdAt": "2020-03-27T08:39:46Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/credential/PaywallCredentialService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.sequenceiq.cloudbreak.service.credential;\n+\n+import static java.util.Collections.singletonMap;\n+\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.orchestrator.model.SaltPillarProperties;\n+\n+@Component\n+public class PaywallCredentialService {\n+\n+    private static final int SHIFT = 3;\n+\n+    @Value(\"${cb.paywall.username:}\")\n+    private String paywallUserName;\n+\n+    @Value(\"${cb.paywall.password:}\")\n+    private String paywallPassword;\n+\n+    public String addCredentialForUrl(String url) {\n+        if (paywallCredentialAvailable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9907d64c347078819b2cfbc8a92b1644b72ccdca"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "committedDate": "2020-03-30T06:44:49Z", "message": "CB-5989: support HDP-3.1.5"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9907d64c347078819b2cfbc8a92b1644b72ccdca", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/9907d64c347078819b2cfbc8a92b1644b72ccdca", "committedDate": "2020-03-26T07:59:23Z", "message": "CB-5989: support HDP-3.1.5"}, "afterCommit": {"oid": "5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/5ca618d290ab52693e0c5ed9883de1d1b9fde7a4", "committedDate": "2020-03-30T06:44:49Z", "message": "CB-5989: support HDP-3.1.5"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTk3NDA0", "url": "https://github.com/hortonworks/cloudbreak/pull/7654#pullrequestreview-383597404", "createdAt": "2020-03-30T07:37:50Z", "commit": {"oid": "5ca618d290ab52693e0c5ed9883de1d1b9fde7a4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2372, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}